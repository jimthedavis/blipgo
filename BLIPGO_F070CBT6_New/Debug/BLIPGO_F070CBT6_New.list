
BLIPGO_F070CBT6_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ce0  08014b20  08014b20  00024b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016800  08016800  000302b8  2**0
                  CONTENTS
  4 .ARM          00000000  08016800  08016800  000302b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016800  08016800  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016800  08016800  00026800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016804  08016804  00026804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08016808  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002930  200002b8  08016ac0  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002be8  08016ac0  00032be8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021071  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047e7  00000000  00000000  00051351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  00055b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  000574e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d7f  00000000  00000000  00058ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020375  00000000  00000000  0006fa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000783d3  00000000  00000000  0008fddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001081af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006880  00000000  00000000  00108204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b8 	.word	0x200002b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08014b08 	.word	0x08014b08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002bc 	.word	0x200002bc
 8000104:	08014b08 	.word	0x08014b08

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_lmul>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	0415      	lsls	r5, r2, #16
 8000430:	0c2d      	lsrs	r5, r5, #16
 8000432:	000f      	movs	r7, r1
 8000434:	0001      	movs	r1, r0
 8000436:	002e      	movs	r6, r5
 8000438:	46c6      	mov	lr, r8
 800043a:	4684      	mov	ip, r0
 800043c:	0400      	lsls	r0, r0, #16
 800043e:	0c14      	lsrs	r4, r2, #16
 8000440:	0c00      	lsrs	r0, r0, #16
 8000442:	0c09      	lsrs	r1, r1, #16
 8000444:	4346      	muls	r6, r0
 8000446:	434d      	muls	r5, r1
 8000448:	4360      	muls	r0, r4
 800044a:	4361      	muls	r1, r4
 800044c:	1940      	adds	r0, r0, r5
 800044e:	0c34      	lsrs	r4, r6, #16
 8000450:	1824      	adds	r4, r4, r0
 8000452:	b500      	push	{lr}
 8000454:	42a5      	cmp	r5, r4
 8000456:	d903      	bls.n	8000460 <__aeabi_lmul+0x34>
 8000458:	2080      	movs	r0, #128	; 0x80
 800045a:	0240      	lsls	r0, r0, #9
 800045c:	4680      	mov	r8, r0
 800045e:	4441      	add	r1, r8
 8000460:	0c25      	lsrs	r5, r4, #16
 8000462:	186d      	adds	r5, r5, r1
 8000464:	4661      	mov	r1, ip
 8000466:	4359      	muls	r1, r3
 8000468:	437a      	muls	r2, r7
 800046a:	0430      	lsls	r0, r6, #16
 800046c:	1949      	adds	r1, r1, r5
 800046e:	0424      	lsls	r4, r4, #16
 8000470:	0c00      	lsrs	r0, r0, #16
 8000472:	1820      	adds	r0, r4, r0
 8000474:	1889      	adds	r1, r1, r2
 8000476:	bc80      	pop	{r7}
 8000478:	46b8      	mov	r8, r7
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800047c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000480:	f3bf 8f4f 	dsb	sy
}
 8000484:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000486:	4b04      	ldr	r3, [pc, #16]	; (8000498 <__NVIC_SystemReset+0x1c>)
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <__NVIC_SystemReset+0x20>)
 800048a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800048c:	f3bf 8f4f 	dsb	sy
}
 8000490:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	e7fd      	b.n	8000492 <__NVIC_SystemReset+0x16>
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	e000ed00 	.word	0xe000ed00
 800049c:	05fa0004 	.word	0x05fa0004

080004a0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004a0:	b5b0      	push	{r4, r5, r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4aa2      	ldr	r2, [pc, #648]	; (8000738 <HAL_UART_RxCpltCallback+0x298>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d001      	beq.n	80004b6 <HAL_UART_RxCpltCallback+0x16>
 80004b2:	f000 fd29 	bl	8000f08 <HAL_UART_RxCpltCallback+0xa68>
	{
		HAL_UART_Receive_IT(&huart1, &rx_esp, 1);
 80004b6:	49a1      	ldr	r1, [pc, #644]	; (800073c <HAL_UART_RxCpltCallback+0x29c>)
 80004b8:	4ba1      	ldr	r3, [pc, #644]	; (8000740 <HAL_UART_RxCpltCallback+0x2a0>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f00d f9c3 	bl	800d848 <HAL_UART_Receive_IT>

//		if(rx_esp == '+')
//			rx_esp_counter = 0;

		rx_string_esp[rx_esp_counter] = rx_esp;
 80004c2:	4ba0      	ldr	r3, [pc, #640]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	001a      	movs	r2, r3
 80004c8:	4b9c      	ldr	r3, [pc, #624]	; (800073c <HAL_UART_RxCpltCallback+0x29c>)
 80004ca:	7819      	ldrb	r1, [r3, #0]
 80004cc:	4b9e      	ldr	r3, [pc, #632]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80004ce:	5499      	strb	r1, [r3, r2]

		///+NOTIFY:0,2,1,17,[0B]L[00]�[07][04][12][11][0B]8F;u��[00][00]
		if(ble_get_data_flag && rx_string_esp[1]=='N' && rx_string_esp[2]=='O' && rx_string_esp[3]=='T' && rx_string_esp[4]=='I' && rx_string_esp[5]=='F' && rx_string_esp[6]=='Y' && rx_string_esp[7]==':' && rx_string_esp[10]=='2' && rx_string_esp[12]=='1' && rx_string_esp[14]=='1' && rx_string_esp[15]=='7' && rx_string_esp[16]==',' && rx_esp_counter > 16)
 80004d0:	4b9e      	ldr	r3, [pc, #632]	; (800074c <HAL_UART_RxCpltCallback+0x2ac>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d100      	bne.n	80004da <HAL_UART_RxCpltCallback+0x3a>
 80004d8:	e07b      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 80004da:	4b9b      	ldr	r3, [pc, #620]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80004dc:	785b      	ldrb	r3, [r3, #1]
 80004de:	2b4e      	cmp	r3, #78	; 0x4e
 80004e0:	d000      	beq.n	80004e4 <HAL_UART_RxCpltCallback+0x44>
 80004e2:	e076      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 80004e4:	4b98      	ldr	r3, [pc, #608]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	2b4f      	cmp	r3, #79	; 0x4f
 80004ea:	d000      	beq.n	80004ee <HAL_UART_RxCpltCallback+0x4e>
 80004ec:	e071      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 80004ee:	4b96      	ldr	r3, [pc, #600]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80004f0:	78db      	ldrb	r3, [r3, #3]
 80004f2:	2b54      	cmp	r3, #84	; 0x54
 80004f4:	d000      	beq.n	80004f8 <HAL_UART_RxCpltCallback+0x58>
 80004f6:	e06c      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 80004f8:	4b93      	ldr	r3, [pc, #588]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	2b49      	cmp	r3, #73	; 0x49
 80004fe:	d000      	beq.n	8000502 <HAL_UART_RxCpltCallback+0x62>
 8000500:	e067      	b.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 8000502:	4b91      	ldr	r3, [pc, #580]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	2b46      	cmp	r3, #70	; 0x46
 8000508:	d163      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 800050a:	4b8f      	ldr	r3, [pc, #572]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800050c:	799b      	ldrb	r3, [r3, #6]
 800050e:	2b59      	cmp	r3, #89	; 0x59
 8000510:	d15f      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 8000512:	4b8d      	ldr	r3, [pc, #564]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000514:	79db      	ldrb	r3, [r3, #7]
 8000516:	2b3a      	cmp	r3, #58	; 0x3a
 8000518:	d15b      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 800051a:	4b8b      	ldr	r3, [pc, #556]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800051c:	7a9b      	ldrb	r3, [r3, #10]
 800051e:	2b32      	cmp	r3, #50	; 0x32
 8000520:	d157      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 8000522:	4b89      	ldr	r3, [pc, #548]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000524:	7b1b      	ldrb	r3, [r3, #12]
 8000526:	2b31      	cmp	r3, #49	; 0x31
 8000528:	d153      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 800052a:	4b87      	ldr	r3, [pc, #540]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800052c:	7b9b      	ldrb	r3, [r3, #14]
 800052e:	2b31      	cmp	r3, #49	; 0x31
 8000530:	d14f      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 8000532:	4b85      	ldr	r3, [pc, #532]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000534:	7bdb      	ldrb	r3, [r3, #15]
 8000536:	2b37      	cmp	r3, #55	; 0x37
 8000538:	d14b      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 800053a:	4b83      	ldr	r3, [pc, #524]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800053c:	7c1b      	ldrb	r3, [r3, #16]
 800053e:	2b2c      	cmp	r3, #44	; 0x2c
 8000540:	d147      	bne.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
 8000542:	4b80      	ldr	r3, [pc, #512]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2b10      	cmp	r3, #16
 8000548:	d943      	bls.n	80005d2 <HAL_UART_RxCpltCallback+0x132>
		{
			if(rx_esp_counter==17)
 800054a:	4b7e      	ldr	r3, [pc, #504]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b11      	cmp	r3, #17
 8000550:	d102      	bne.n	8000558 <HAL_UART_RxCpltCallback+0xb8>
				esp_plus_enable = 0;
 8000552:	4b7f      	ldr	r3, [pc, #508]	; (8000750 <HAL_UART_RxCpltCallback+0x2b0>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]

			if(rx_esp_counter > 33)
 8000558:	4b7a      	ldr	r3, [pc, #488]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	2b21      	cmp	r3, #33	; 0x21
 800055e:	d801      	bhi.n	8000564 <HAL_UART_RxCpltCallback+0xc4>
 8000560:	f000 fcaf 	bl	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
			{
				for(uint8_t cc = 0; cc < 17; cc++)
 8000564:	2317      	movs	r3, #23
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e016      	b.n	800059c <HAL_UART_RxCpltCallback+0xfc>
				{
					meter_records[row][cc] = rx_string_esp[cc+17];
 800056e:	2517      	movs	r5, #23
 8000570:	197b      	adds	r3, r7, r5
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3311      	adds	r3, #17
 8000576:	4a77      	ldr	r2, [pc, #476]	; (8000754 <HAL_UART_RxCpltCallback+0x2b4>)
 8000578:	8812      	ldrh	r2, [r2, #0]
 800057a:	0010      	movs	r0, r2
 800057c:	197a      	adds	r2, r7, r5
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	4971      	ldr	r1, [pc, #452]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000582:	5ccc      	ldrb	r4, [r1, r3]
 8000584:	4974      	ldr	r1, [pc, #464]	; (8000758 <HAL_UART_RxCpltCallback+0x2b8>)
 8000586:	0003      	movs	r3, r0
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	181b      	adds	r3, r3, r0
 800058c:	18cb      	adds	r3, r1, r3
 800058e:	1c21      	adds	r1, r4, #0
 8000590:	5499      	strb	r1, [r3, r2]
				for(uint8_t cc = 0; cc < 17; cc++)
 8000592:	197b      	adds	r3, r7, r5
 8000594:	781a      	ldrb	r2, [r3, #0]
 8000596:	197b      	adds	r3, r7, r5
 8000598:	3201      	adds	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	2317      	movs	r3, #23
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b10      	cmp	r3, #16
 80005a4:	d9e3      	bls.n	800056e <HAL_UART_RxCpltCallback+0xce>
				}

				row++;
 80005a6:	4b6b      	ldr	r3, [pc, #428]	; (8000754 <HAL_UART_RxCpltCallback+0x2b4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b69      	ldr	r3, [pc, #420]	; (8000754 <HAL_UART_RxCpltCallback+0x2b4>)
 80005b0:	801a      	strh	r2, [r3, #0]

				sequence_char[0] = rx_string_esp[18];
 80005b2:	4b65      	ldr	r3, [pc, #404]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80005b4:	7c9a      	ldrb	r2, [r3, #18]
 80005b6:	4b69      	ldr	r3, [pc, #420]	; (800075c <HAL_UART_RxCpltCallback+0x2bc>)
 80005b8:	701a      	strb	r2, [r3, #0]
				sequence_char[1] = rx_string_esp[19];
 80005ba:	4b63      	ldr	r3, [pc, #396]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80005bc:	7cda      	ldrb	r2, [r3, #19]
 80005be:	4b67      	ldr	r3, [pc, #412]	; (800075c <HAL_UART_RxCpltCallback+0x2bc>)
 80005c0:	705a      	strb	r2, [r3, #1]
				rx_string_esp[16] = 0;
 80005c2:	4b61      	ldr	r3, [pc, #388]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	741a      	strb	r2, [r3, #16]

				esp_plus_enable = 1;
 80005c8:	4b61      	ldr	r3, [pc, #388]	; (8000750 <HAL_UART_RxCpltCallback+0x2b0>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
			if(rx_esp_counter > 33)
 80005ce:	f000 fc78 	bl	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
			}
		}
		////+INDICATE:0,2,4,4,[06][00][01][01] //// model 923
		else if(ble_get_data_flag && meter_model[0]=='9' && meter_model[1]=='2' && meter_model[2]=='3' && rx_string_esp[1]=='I' && rx_string_esp[2]=='N' && rx_string_esp[3]=='D' && rx_string_esp[4]=='I' && rx_string_esp[5]=='C' && rx_string_esp[6]=='A' && rx_string_esp[7]=='T' && rx_string_esp[8]=='E' && rx_string_esp[12]=='2' && rx_string_esp[14]=='4' && rx_string_esp[16]=='4' && rx_string_esp[18]==0x06 && rx_string_esp[19]==0x00 && rx_string_esp[rx_esp_counter]==0x0D)
 80005d2:	4b5e      	ldr	r3, [pc, #376]	; (800074c <HAL_UART_RxCpltCallback+0x2ac>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d04e      	beq.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 80005da:	4b61      	ldr	r3, [pc, #388]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b39      	cmp	r3, #57	; 0x39
 80005e0:	d14a      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	2b32      	cmp	r3, #50	; 0x32
 80005e8:	d146      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b33      	cmp	r3, #51	; 0x33
 80005f0:	d142      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 80005f2:	4b55      	ldr	r3, [pc, #340]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	2b49      	cmp	r3, #73	; 0x49
 80005f8:	d13e      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 80005fa:	4b53      	ldr	r3, [pc, #332]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	2b4e      	cmp	r3, #78	; 0x4e
 8000600:	d13a      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b44      	cmp	r3, #68	; 0x44
 8000608:	d136      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800060a:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	2b49      	cmp	r3, #73	; 0x49
 8000610:	d132      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000614:	795b      	ldrb	r3, [r3, #5]
 8000616:	2b43      	cmp	r3, #67	; 0x43
 8000618:	d12e      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800061a:	4b4b      	ldr	r3, [pc, #300]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	2b41      	cmp	r3, #65	; 0x41
 8000620:	d12a      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000622:	4b49      	ldr	r3, [pc, #292]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000624:	79db      	ldrb	r3, [r3, #7]
 8000626:	2b54      	cmp	r3, #84	; 0x54
 8000628:	d126      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800062a:	4b47      	ldr	r3, [pc, #284]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800062c:	7a1b      	ldrb	r3, [r3, #8]
 800062e:	2b45      	cmp	r3, #69	; 0x45
 8000630:	d122      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000632:	4b45      	ldr	r3, [pc, #276]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000634:	7b1b      	ldrb	r3, [r3, #12]
 8000636:	2b32      	cmp	r3, #50	; 0x32
 8000638:	d11e      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800063a:	4b43      	ldr	r3, [pc, #268]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800063c:	7b9b      	ldrb	r3, [r3, #14]
 800063e:	2b34      	cmp	r3, #52	; 0x34
 8000640:	d11a      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000642:	4b41      	ldr	r3, [pc, #260]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	2b34      	cmp	r3, #52	; 0x34
 8000648:	d116      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800064a:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800064c:	7c9b      	ldrb	r3, [r3, #18]
 800064e:	2b06      	cmp	r3, #6
 8000650:	d112      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000654:	7cdb      	ldrb	r3, [r3, #19]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d10e      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
 800065a:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	001a      	movs	r2, r3
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000662:	5c9b      	ldrb	r3, [r3, r2]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d107      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x1d8>
		{
			rx_string_esp[rx_esp_counter] = 0;
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	001a      	movs	r2, r3
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000670:	2100      	movs	r1, #0
 8000672:	5499      	strb	r1, [r3, r2]
 8000674:	f000 fc25 	bl	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
		}
		////+INDICATE:0,2,4,4,[05][00]M[00]//// model 923
		else if(ble_get_data_flag && meter_model[0]=='9' && meter_model[1]=='2' && meter_model[2]=='3' && rx_string_esp[1]=='I' && rx_string_esp[2]=='N' && rx_string_esp[3]=='D' && rx_string_esp[4]=='I' && rx_string_esp[5]=='C' && rx_string_esp[6]=='A' && rx_string_esp[7]=='T' && rx_string_esp[8]=='E' && rx_string_esp[12]=='2' && rx_string_esp[14]=='4' && rx_string_esp[16]=='4' && rx_string_esp[18]==0x05 && rx_string_esp[19]==0x00 && rx_string_esp[rx_esp_counter]==0x0D)
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <HAL_UART_RxCpltCallback+0x2ac>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <HAL_UART_RxCpltCallback+0x1e2>
 8000680:	e072      	b.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 8000682:	4b37      	ldr	r3, [pc, #220]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b39      	cmp	r3, #57	; 0x39
 8000688:	d000      	beq.n	800068c <HAL_UART_RxCpltCallback+0x1ec>
 800068a:	e06d      	b.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	2b32      	cmp	r3, #50	; 0x32
 8000692:	d000      	beq.n	8000696 <HAL_UART_RxCpltCallback+0x1f6>
 8000694:	e068      	b.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <HAL_UART_RxCpltCallback+0x2c0>)
 8000698:	789b      	ldrb	r3, [r3, #2]
 800069a:	2b33      	cmp	r3, #51	; 0x33
 800069c:	d000      	beq.n	80006a0 <HAL_UART_RxCpltCallback+0x200>
 800069e:	e063      	b.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	2b49      	cmp	r3, #73	; 0x49
 80006a6:	d15f      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006aa:	789b      	ldrb	r3, [r3, #2]
 80006ac:	2b4e      	cmp	r3, #78	; 0x4e
 80006ae:	d15b      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	2b44      	cmp	r3, #68	; 0x44
 80006b6:	d157      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	2b49      	cmp	r3, #73	; 0x49
 80006be:	d153      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	2b43      	cmp	r3, #67	; 0x43
 80006c6:	d14f      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006ca:	799b      	ldrb	r3, [r3, #6]
 80006cc:	2b41      	cmp	r3, #65	; 0x41
 80006ce:	d14b      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006d2:	79db      	ldrb	r3, [r3, #7]
 80006d4:	2b54      	cmp	r3, #84	; 0x54
 80006d6:	d147      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006da:	7a1b      	ldrb	r3, [r3, #8]
 80006dc:	2b45      	cmp	r3, #69	; 0x45
 80006de:	d143      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006e2:	7b1b      	ldrb	r3, [r3, #12]
 80006e4:	2b32      	cmp	r3, #50	; 0x32
 80006e6:	d13f      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006ea:	7b9b      	ldrb	r3, [r3, #14]
 80006ec:	2b34      	cmp	r3, #52	; 0x34
 80006ee:	d13b      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006f2:	7c1b      	ldrb	r3, [r3, #16]
 80006f4:	2b34      	cmp	r3, #52	; 0x34
 80006f6:	d137      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 80006fa:	7c9b      	ldrb	r3, [r3, #18]
 80006fc:	2b05      	cmp	r3, #5
 80006fe:	d133      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000702:	7cdb      	ldrb	r3, [r3, #19]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d12f      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	001a      	movs	r2, r3
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	d128      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x2c8>
		{
			char_total_record[0] = rx_string_esp[20];
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000718:	7d1a      	ldrb	r2, [r3, #20]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_UART_RxCpltCallback+0x2c4>)
 800071c:	701a      	strb	r2, [r3, #0]
			char_total_record[1] = rx_string_esp[21];
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 8000720:	7d5a      	ldrb	r2, [r3, #21]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_UART_RxCpltCallback+0x2c4>)
 8000724:	705a      	strb	r2, [r3, #1]
			rx_string_esp[rx_esp_counter] = 0;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <HAL_UART_RxCpltCallback+0x2a4>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	001a      	movs	r2, r3
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_UART_RxCpltCallback+0x2a8>)
 800072e:	2100      	movs	r1, #0
 8000730:	5499      	strb	r1, [r3, r2]
 8000732:	f000 fbc6 	bl	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40013800 	.word	0x40013800
 800073c:	200002d6 	.word	0x200002d6
 8000740:	200019c4 	.word	0x200019c4
 8000744:	200002e4 	.word	0x200002e4
 8000748:	200002f8 	.word	0x200002f8
 800074c:	20001752 	.word	0x20001752
 8000750:	2000006d 	.word	0x2000006d
 8000754:	20001744 	.word	0x20001744
 8000758:	200010a0 	.word	0x200010a0
 800075c:	200002d8 	.word	0x200002d8
 8000760:	20000e00 	.word	0x20000e00
 8000764:	200006e0 	.word	0x200006e0
		}
		////+INDICATE:0,2,3,4,[06][00][01][01] //// model 897
		else if(ble_get_data_flag && meter_model[0]=='8' && meter_model[1]=='9' && meter_model[2]=='7' && rx_string_esp[1]=='I' && rx_string_esp[2]=='N' && rx_string_esp[3]=='D' && rx_string_esp[4]=='I' && rx_string_esp[5]=='C' && rx_string_esp[6]=='A' && rx_string_esp[7]=='T' && rx_string_esp[8]=='E' && rx_string_esp[12]=='2' && rx_string_esp[14]=='3' && rx_string_esp[16]=='4' && rx_string_esp[18]==0x06 && rx_string_esp[19]==0x00 && rx_string_esp[rx_esp_counter]==0x0D)
 8000768:	4bc3      	ldr	r3, [pc, #780]	; (8000a78 <HAL_UART_RxCpltCallback+0x5d8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d04e      	beq.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000770:	4bc2      	ldr	r3, [pc, #776]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b38      	cmp	r3, #56	; 0x38
 8000776:	d14a      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000778:	4bc0      	ldr	r3, [pc, #768]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	2b39      	cmp	r3, #57	; 0x39
 800077e:	d146      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000780:	4bbe      	ldr	r3, [pc, #760]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 8000782:	789b      	ldrb	r3, [r3, #2]
 8000784:	2b37      	cmp	r3, #55	; 0x37
 8000786:	d142      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000788:	4bbd      	ldr	r3, [pc, #756]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 800078a:	785b      	ldrb	r3, [r3, #1]
 800078c:	2b49      	cmp	r3, #73	; 0x49
 800078e:	d13e      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000790:	4bbb      	ldr	r3, [pc, #748]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	2b4e      	cmp	r3, #78	; 0x4e
 8000796:	d13a      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 8000798:	4bb9      	ldr	r3, [pc, #740]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 800079a:	78db      	ldrb	r3, [r3, #3]
 800079c:	2b44      	cmp	r3, #68	; 0x44
 800079e:	d136      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007a0:	4bb7      	ldr	r3, [pc, #732]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	2b49      	cmp	r3, #73	; 0x49
 80007a6:	d132      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007a8:	4bb5      	ldr	r3, [pc, #724]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b43      	cmp	r3, #67	; 0x43
 80007ae:	d12e      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007b0:	4bb3      	ldr	r3, [pc, #716]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007b2:	799b      	ldrb	r3, [r3, #6]
 80007b4:	2b41      	cmp	r3, #65	; 0x41
 80007b6:	d12a      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007b8:	4bb1      	ldr	r3, [pc, #708]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007ba:	79db      	ldrb	r3, [r3, #7]
 80007bc:	2b54      	cmp	r3, #84	; 0x54
 80007be:	d126      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007c0:	4baf      	ldr	r3, [pc, #700]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	2b45      	cmp	r3, #69	; 0x45
 80007c6:	d122      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007c8:	4bad      	ldr	r3, [pc, #692]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007ca:	7b1b      	ldrb	r3, [r3, #12]
 80007cc:	2b32      	cmp	r3, #50	; 0x32
 80007ce:	d11e      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007d0:	4bab      	ldr	r3, [pc, #684]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007d2:	7b9b      	ldrb	r3, [r3, #14]
 80007d4:	2b33      	cmp	r3, #51	; 0x33
 80007d6:	d11a      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007d8:	4ba9      	ldr	r3, [pc, #676]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007da:	7c1b      	ldrb	r3, [r3, #16]
 80007dc:	2b34      	cmp	r3, #52	; 0x34
 80007de:	d116      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007e0:	4ba7      	ldr	r3, [pc, #668]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007e2:	7c9b      	ldrb	r3, [r3, #18]
 80007e4:	2b06      	cmp	r3, #6
 80007e6:	d112      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007e8:	4ba5      	ldr	r3, [pc, #660]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007ea:	7cdb      	ldrb	r3, [r3, #19]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10e      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
 80007f0:	4ba4      	ldr	r3, [pc, #656]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	001a      	movs	r2, r3
 80007f6:	4ba2      	ldr	r3, [pc, #648]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80007f8:	5c9b      	ldrb	r3, [r3, r2]
 80007fa:	2b0d      	cmp	r3, #13
 80007fc:	d107      	bne.n	800080e <HAL_UART_RxCpltCallback+0x36e>
		{
			rx_string_esp[rx_esp_counter] = 0;
 80007fe:	4ba1      	ldr	r3, [pc, #644]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	001a      	movs	r2, r3
 8000804:	4b9e      	ldr	r3, [pc, #632]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000806:	2100      	movs	r1, #0
 8000808:	5499      	strb	r1, [r3, r2]
 800080a:	f000 fb5a 	bl	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
		}
		////+INDICATE:0,2,3,4,[05][00][0E][00]//// model 897
		else if(ble_get_data_flag && meter_model[0]=='8' && meter_model[1]=='9' && meter_model[2]=='7' && rx_string_esp[1]=='I' && rx_string_esp[2]=='N' && rx_string_esp[3]=='D' && rx_string_esp[4]=='I' && rx_string_esp[5]=='C' && rx_string_esp[6]=='A' && rx_string_esp[7]=='T' && rx_string_esp[8]=='E' && rx_string_esp[12]=='2' && rx_string_esp[14]=='3' && rx_string_esp[16]=='4' && rx_string_esp[18]==0x05 && rx_string_esp[19]==0x00 && rx_string_esp[rx_esp_counter]==0x0D)
 800080e:	4b9a      	ldr	r3, [pc, #616]	; (8000a78 <HAL_UART_RxCpltCallback+0x5d8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d055      	beq.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000816:	4b99      	ldr	r3, [pc, #612]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b38      	cmp	r3, #56	; 0x38
 800081c:	d151      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800081e:	4b97      	ldr	r3, [pc, #604]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 8000820:	785b      	ldrb	r3, [r3, #1]
 8000822:	2b39      	cmp	r3, #57	; 0x39
 8000824:	d14d      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000826:	4b95      	ldr	r3, [pc, #596]	; (8000a7c <HAL_UART_RxCpltCallback+0x5dc>)
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	2b37      	cmp	r3, #55	; 0x37
 800082c:	d149      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800082e:	4b94      	ldr	r3, [pc, #592]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000830:	785b      	ldrb	r3, [r3, #1]
 8000832:	2b49      	cmp	r3, #73	; 0x49
 8000834:	d145      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000836:	4b92      	ldr	r3, [pc, #584]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	2b4e      	cmp	r3, #78	; 0x4e
 800083c:	d141      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800083e:	4b90      	ldr	r3, [pc, #576]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000840:	78db      	ldrb	r3, [r3, #3]
 8000842:	2b44      	cmp	r3, #68	; 0x44
 8000844:	d13d      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000846:	4b8e      	ldr	r3, [pc, #568]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	2b49      	cmp	r3, #73	; 0x49
 800084c:	d139      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800084e:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	2b43      	cmp	r3, #67	; 0x43
 8000854:	d135      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000856:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000858:	799b      	ldrb	r3, [r3, #6]
 800085a:	2b41      	cmp	r3, #65	; 0x41
 800085c:	d131      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800085e:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000860:	79db      	ldrb	r3, [r3, #7]
 8000862:	2b54      	cmp	r3, #84	; 0x54
 8000864:	d12d      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000866:	4b86      	ldr	r3, [pc, #536]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000868:	7a1b      	ldrb	r3, [r3, #8]
 800086a:	2b45      	cmp	r3, #69	; 0x45
 800086c:	d129      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800086e:	4b84      	ldr	r3, [pc, #528]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000870:	7b1b      	ldrb	r3, [r3, #12]
 8000872:	2b32      	cmp	r3, #50	; 0x32
 8000874:	d125      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000876:	4b82      	ldr	r3, [pc, #520]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000878:	7b9b      	ldrb	r3, [r3, #14]
 800087a:	2b33      	cmp	r3, #51	; 0x33
 800087c:	d121      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800087e:	4b80      	ldr	r3, [pc, #512]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000880:	7c1b      	ldrb	r3, [r3, #16]
 8000882:	2b34      	cmp	r3, #52	; 0x34
 8000884:	d11d      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000886:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000888:	7c9b      	ldrb	r3, [r3, #18]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d119      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 800088e:	4b7c      	ldr	r3, [pc, #496]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000890:	7cdb      	ldrb	r3, [r3, #19]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d115      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
 8000896:	4b7b      	ldr	r3, [pc, #492]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	001a      	movs	r2, r3
 800089c:	4b78      	ldr	r3, [pc, #480]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 800089e:	5c9b      	ldrb	r3, [r3, r2]
 80008a0:	2b0d      	cmp	r3, #13
 80008a2:	d10e      	bne.n	80008c2 <HAL_UART_RxCpltCallback+0x422>
		{
			char_total_record[0] = rx_string_esp[20];
 80008a4:	4b76      	ldr	r3, [pc, #472]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008a6:	7d1a      	ldrb	r2, [r3, #20]
 80008a8:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <HAL_UART_RxCpltCallback+0x5e8>)
 80008aa:	701a      	strb	r2, [r3, #0]
			char_total_record[1] = rx_string_esp[21];
 80008ac:	4b74      	ldr	r3, [pc, #464]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008ae:	7d5a      	ldrb	r2, [r3, #21]
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <HAL_UART_RxCpltCallback+0x5e8>)
 80008b2:	705a      	strb	r2, [r3, #1]
			rx_string_esp[rx_esp_counter] = 0;
 80008b4:	4b73      	ldr	r3, [pc, #460]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	001a      	movs	r2, r3
 80008ba:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008bc:	2100      	movs	r1, #0
 80008be:	5499      	strb	r1, [r3, r2]
 80008c0:	e2ff      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
		}
		//+#WIFI#ssid,pswd;
		else if(rx_string_esp[1]=='#' && rx_string_esp[2]=='W' && rx_string_esp[3]=='I' && rx_string_esp[4]=='F' && rx_string_esp[5]=='I' && rx_string_esp[6]=='#' && rx_string_esp[rx_esp_counter]==';')
 80008c2:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	2b23      	cmp	r3, #35	; 0x23
 80008c8:	d000      	beq.n	80008cc <HAL_UART_RxCpltCallback+0x42c>
 80008ca:	e096      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008cc:	4b6c      	ldr	r3, [pc, #432]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2b57      	cmp	r3, #87	; 0x57
 80008d2:	d000      	beq.n	80008d6 <HAL_UART_RxCpltCallback+0x436>
 80008d4:	e091      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008d6:	4b6a      	ldr	r3, [pc, #424]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008d8:	78db      	ldrb	r3, [r3, #3]
 80008da:	2b49      	cmp	r3, #73	; 0x49
 80008dc:	d000      	beq.n	80008e0 <HAL_UART_RxCpltCallback+0x440>
 80008de:	e08c      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008e0:	4b67      	ldr	r3, [pc, #412]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	2b46      	cmp	r3, #70	; 0x46
 80008e6:	d000      	beq.n	80008ea <HAL_UART_RxCpltCallback+0x44a>
 80008e8:	e087      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008ea:	4b65      	ldr	r3, [pc, #404]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	2b49      	cmp	r3, #73	; 0x49
 80008f0:	d000      	beq.n	80008f4 <HAL_UART_RxCpltCallback+0x454>
 80008f2:	e082      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008f4:	4b62      	ldr	r3, [pc, #392]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80008f6:	799b      	ldrb	r3, [r3, #6]
 80008f8:	2b23      	cmp	r3, #35	; 0x23
 80008fa:	d000      	beq.n	80008fe <HAL_UART_RxCpltCallback+0x45e>
 80008fc:	e07d      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
 80008fe:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	001a      	movs	r2, r3
 8000904:	4b5e      	ldr	r3, [pc, #376]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000906:	5c9b      	ldrb	r3, [r3, r2]
 8000908:	2b3b      	cmp	r3, #59	; 0x3b
 800090a:	d000      	beq.n	800090e <HAL_UART_RxCpltCallback+0x46e>
 800090c:	e075      	b.n	80009fa <HAL_UART_RxCpltCallback+0x55a>
		{
			for(uint8_t i = 0; i < 60; i++)
 800090e:	2316      	movs	r3, #22
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e00f      	b.n	8000938 <HAL_UART_RxCpltCallback+0x498>
			{
				wifi_ssid[i] = 0;
 8000918:	2016      	movs	r0, #22
 800091a:	183b      	adds	r3, r7, r0
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4a5b      	ldr	r2, [pc, #364]	; (8000a8c <HAL_UART_RxCpltCallback+0x5ec>)
 8000920:	2100      	movs	r1, #0
 8000922:	54d1      	strb	r1, [r2, r3]
				wifi_pswd[i] = 0;
 8000924:	183b      	adds	r3, r7, r0
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4a59      	ldr	r2, [pc, #356]	; (8000a90 <HAL_UART_RxCpltCallback+0x5f0>)
 800092a:	2100      	movs	r1, #0
 800092c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 60; i++)
 800092e:	183b      	adds	r3, r7, r0
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	183b      	adds	r3, r7, r0
 8000934:	3201      	adds	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	2316      	movs	r3, #22
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b3b      	cmp	r3, #59	; 0x3b
 8000940:	d9ea      	bls.n	8000918 <HAL_UART_RxCpltCallback+0x478>
			}

			loop_counter = 7;
 8000942:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 8000944:	2207      	movs	r2, #7
 8000946:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; rx_string_esp[loop_counter]!=',' && rx_string_esp[loop_counter]!=';'; i++)
 8000948:	2315      	movs	r3, #21
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	e012      	b.n	8000978 <HAL_UART_RxCpltCallback+0x4d8>
			{
				wifi_ssid[i] = rx_string_esp[loop_counter++];
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	4a4e      	ldr	r2, [pc, #312]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 800095c:	7011      	strb	r1, [r2, #0]
 800095e:	0019      	movs	r1, r3
 8000960:	2015      	movs	r0, #21
 8000962:	183b      	adds	r3, r7, r0
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000968:	5c51      	ldrb	r1, [r2, r1]
 800096a:	4a48      	ldr	r2, [pc, #288]	; (8000a8c <HAL_UART_RxCpltCallback+0x5ec>)
 800096c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; rx_string_esp[loop_counter]!=',' && rx_string_esp[loop_counter]!=';'; i++)
 800096e:	183b      	adds	r3, r7, r0
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	183b      	adds	r3, r7, r0
 8000974:	3201      	adds	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
 8000978:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	001a      	movs	r2, r3
 800097e:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000980:	5c9b      	ldrb	r3, [r3, r2]
 8000982:	2b2c      	cmp	r3, #44	; 0x2c
 8000984:	d006      	beq.n	8000994 <HAL_UART_RxCpltCallback+0x4f4>
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001a      	movs	r2, r3
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 800098e:	5c9b      	ldrb	r3, [r3, r2]
 8000990:	2b3b      	cmp	r3, #59	; 0x3b
 8000992:	d1de      	bne.n	8000952 <HAL_UART_RxCpltCallback+0x4b2>
			}

			if(rx_string_esp[loop_counter]!=';')
 8000994:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	001a      	movs	r2, r3
 800099a:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 800099c:	5c9b      	ldrb	r3, [r3, r2]
 800099e:	2b3b      	cmp	r3, #59	; 0x3b
 80009a0:	d024      	beq.n	80009ec <HAL_UART_RxCpltCallback+0x54c>
			{
				loop_counter++;
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 80009ac:	701a      	strb	r2, [r3, #0]

				for(uint8_t i = 0; rx_string_esp[loop_counter]!=';'; i++)
 80009ae:	2314      	movs	r3, #20
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e012      	b.n	80009de <HAL_UART_RxCpltCallback+0x53e>
				{
					wifi_pswd[i] = rx_string_esp[loop_counter++];
 80009b8:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	b2d1      	uxtb	r1, r2
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 80009c2:	7011      	strb	r1, [r2, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	2014      	movs	r0, #20
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80009ce:	5c51      	ldrb	r1, [r2, r1]
 80009d0:	4a2f      	ldr	r2, [pc, #188]	; (8000a90 <HAL_UART_RxCpltCallback+0x5f0>)
 80009d2:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i = 0; rx_string_esp[loop_counter]!=';'; i++)
 80009d4:	183b      	adds	r3, r7, r0
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	183b      	adds	r3, r7, r0
 80009da:	3201      	adds	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	001a      	movs	r2, r3
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80009e6:	5c9b      	ldrb	r3, [r3, r2]
 80009e8:	2b3b      	cmp	r3, #59	; 0x3b
 80009ea:	d1e5      	bne.n	80009b8 <HAL_UART_RxCpltCallback+0x518>
				}
			}

			connect_wifi_network_flag = 1;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <HAL_UART_RxCpltCallback+0x5f8>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
			send_softap_response_flag = 1;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <HAL_UART_RxCpltCallback+0x5fc>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
 80009f8:	e263      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
		}

		//+#PAIR#897364;
		else if(rx_string_esp[1]=='#' && rx_string_esp[2]=='P' && rx_string_esp[3]=='A' && rx_string_esp[4]=='I' && rx_string_esp[5]=='R' && rx_string_esp[6]=='#' && rx_string_esp[rx_esp_counter]==';')
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	2b23      	cmp	r3, #35	; 0x23
 8000a00:	d000      	beq.n	8000a04 <HAL_UART_RxCpltCallback+0x564>
 8000a02:	e072      	b.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	2b50      	cmp	r3, #80	; 0x50
 8000a0a:	d000      	beq.n	8000a0e <HAL_UART_RxCpltCallback+0x56e>
 8000a0c:	e06d      	b.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a10:	78db      	ldrb	r3, [r3, #3]
 8000a12:	2b41      	cmp	r3, #65	; 0x41
 8000a14:	d169      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	2b49      	cmp	r3, #73	; 0x49
 8000a1c:	d165      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	2b52      	cmp	r3, #82	; 0x52
 8000a24:	d161      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	2b23      	cmp	r3, #35	; 0x23
 8000a2c:	d15d      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_RxCpltCallback+0x5e4>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	001a      	movs	r2, r3
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_RxCpltCallback+0x5e0>)
 8000a36:	5c9b      	ldrb	r3, [r3, r2]
 8000a38:	2b3b      	cmp	r3, #59	; 0x3b
 8000a3a:	d156      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x64a>
		{
			for(uint8_t i = 0; i < 10; i++)
 8000a3c:	2313      	movs	r3, #19
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e00a      	b.n	8000a5c <HAL_UART_RxCpltCallback+0x5bc>
			{
				ble_pairing_key[i] = 0;
 8000a46:	2013      	movs	r0, #19
 8000a48:	183b      	adds	r3, r7, r0
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_UART_RxCpltCallback+0x600>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 10; i++)
 8000a52:	183b      	adds	r3, r7, r0
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	183b      	adds	r3, r7, r0
 8000a58:	3201      	adds	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	2313      	movs	r3, #19
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b09      	cmp	r3, #9
 8000a64:	d9ef      	bls.n	8000a46 <HAL_UART_RxCpltCallback+0x5a6>
			}

			loop_counter = 7;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_UART_RxCpltCallback+0x5f4>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 10 && rx_string_esp[loop_counter]!=';'; i++)
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e029      	b.n	8000aca <HAL_UART_RxCpltCallback+0x62a>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	20001752 	.word	0x20001752
 8000a7c:	20000e00 	.word	0x20000e00
 8000a80:	200002f8 	.word	0x200002f8
 8000a84:	200002e4 	.word	0x200002e4
 8000a88:	200006e0 	.word	0x200006e0
 8000a8c:	200006e4 	.word	0x200006e4
 8000a90:	20000720 	.word	0x20000720
 8000a94:	200002d7 	.word	0x200002d7
 8000a98:	2000174d 	.word	0x2000174d
 8000a9c:	2000174e 	.word	0x2000174e
 8000aa0:	2000075c 	.word	0x2000075c
			{
				ble_pairing_key[i] = rx_string_esp[loop_counter++];
 8000aa4:	4b98      	ldr	r3, [pc, #608]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	b2d1      	uxtb	r1, r2
 8000aac:	4a96      	ldr	r2, [pc, #600]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000aae:	7011      	strb	r1, [r2, #0]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	2012      	movs	r0, #18
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4a94      	ldr	r2, [pc, #592]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000aba:	5c51      	ldrb	r1, [r2, r1]
 8000abc:	4a94      	ldr	r2, [pc, #592]	; (8000d10 <HAL_UART_RxCpltCallback+0x870>)
 8000abe:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 10 && rx_string_esp[loop_counter]!=';'; i++)
 8000ac0:	183b      	adds	r3, r7, r0
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	183b      	adds	r3, r7, r0
 8000ac6:	3201      	adds	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	2312      	movs	r3, #18
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b09      	cmp	r3, #9
 8000ad2:	d806      	bhi.n	8000ae2 <HAL_UART_RxCpltCallback+0x642>
 8000ad4:	4b8c      	ldr	r3, [pc, #560]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000adc:	5c9b      	ldrb	r3, [r3, r2]
 8000ade:	2b3b      	cmp	r3, #59	; 0x3b
 8000ae0:	d1e0      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x604>
			}

			ble_start_pairing_flag = 1;
 8000ae2:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <HAL_UART_RxCpltCallback+0x874>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e1eb      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>

		}
		//+#APN#airtelgprs.com;
		else if(rx_string_esp[1]=='#' && rx_string_esp[2]=='A' && rx_string_esp[3]=='P' && rx_string_esp[4]=='N' && rx_string_esp[5]=='#' && rx_string_esp[rx_esp_counter]==';')
 8000aea:	4b88      	ldr	r3, [pc, #544]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000aec:	785b      	ldrb	r3, [r3, #1]
 8000aee:	2b23      	cmp	r3, #35	; 0x23
 8000af0:	d156      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
 8000af2:	4b86      	ldr	r3, [pc, #536]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000af4:	789b      	ldrb	r3, [r3, #2]
 8000af6:	2b41      	cmp	r3, #65	; 0x41
 8000af8:	d152      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
 8000afa:	4b84      	ldr	r3, [pc, #528]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000afc:	78db      	ldrb	r3, [r3, #3]
 8000afe:	2b50      	cmp	r3, #80	; 0x50
 8000b00:	d14e      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
 8000b02:	4b82      	ldr	r3, [pc, #520]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	2b4e      	cmp	r3, #78	; 0x4e
 8000b08:	d14a      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
 8000b0a:	4b80      	ldr	r3, [pc, #512]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000b0c:	795b      	ldrb	r3, [r3, #5]
 8000b0e:	2b23      	cmp	r3, #35	; 0x23
 8000b10:	d146      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
 8000b12:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <HAL_UART_RxCpltCallback+0x878>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	4b7c      	ldr	r3, [pc, #496]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000b1a:	5c9b      	ldrb	r3, [r3, r2]
 8000b1c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b1e:	d13f      	bne.n	8000ba0 <HAL_UART_RxCpltCallback+0x700>
		{
			for(uint8_t i = 0; i < 40; i++)
 8000b20:	2311      	movs	r3, #17
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e00a      	b.n	8000b40 <HAL_UART_RxCpltCallback+0x6a0>
			{
				apn[i] = 0;
 8000b2a:	2011      	movs	r0, #17
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4a7a      	ldr	r2, [pc, #488]	; (8000d1c <HAL_UART_RxCpltCallback+0x87c>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 40; i++)
 8000b36:	183b      	adds	r3, r7, r0
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	3201      	adds	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	2311      	movs	r3, #17
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b27      	cmp	r3, #39	; 0x27
 8000b48:	d9ef      	bls.n	8000b2a <HAL_UART_RxCpltCallback+0x68a>
			}

			loop_counter = 6;
 8000b4a:	4b6f      	ldr	r3, [pc, #444]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000b4c:	2206      	movs	r2, #6
 8000b4e:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 40 && rx_string_esp[loop_counter]!=';'; i++)
 8000b50:	2310      	movs	r3, #16
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e012      	b.n	8000b80 <HAL_UART_RxCpltCallback+0x6e0>
			{
				apn[i] = rx_string_esp[loop_counter++];
 8000b5a:	4b6b      	ldr	r3, [pc, #428]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	b2d1      	uxtb	r1, r2
 8000b62:	4a69      	ldr	r2, [pc, #420]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000b64:	7011      	strb	r1, [r2, #0]
 8000b66:	0019      	movs	r1, r3
 8000b68:	2010      	movs	r0, #16
 8000b6a:	183b      	adds	r3, r7, r0
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4a67      	ldr	r2, [pc, #412]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000b70:	5c51      	ldrb	r1, [r2, r1]
 8000b72:	4a6a      	ldr	r2, [pc, #424]	; (8000d1c <HAL_UART_RxCpltCallback+0x87c>)
 8000b74:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 40 && rx_string_esp[loop_counter]!=';'; i++)
 8000b76:	183b      	adds	r3, r7, r0
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	183b      	adds	r3, r7, r0
 8000b7c:	3201      	adds	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	2310      	movs	r3, #16
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b27      	cmp	r3, #39	; 0x27
 8000b88:	d806      	bhi.n	8000b98 <HAL_UART_RxCpltCallback+0x6f8>
 8000b8a:	4b5f      	ldr	r3, [pc, #380]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001a      	movs	r2, r3
 8000b90:	4b5e      	ldr	r3, [pc, #376]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000b92:	5c9b      	ldrb	r3, [r3, r2]
 8000b94:	2b3b      	cmp	r3, #59	; 0x3b
 8000b96:	d1e0      	bne.n	8000b5a <HAL_UART_RxCpltCallback+0x6ba>
			}

			new_apn_flag = 1;
 8000b98:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <HAL_UART_RxCpltCallback+0x880>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e190      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>

		}
		//+#SN#HH0202000001;
		else if(rx_string_esp[1]=='#' && rx_string_esp[2]=='S' && rx_string_esp[3]=='N' && rx_string_esp[4]=='#' && rx_string_esp[rx_esp_counter]==';')
 8000ba0:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	2b23      	cmp	r3, #35	; 0x23
 8000ba6:	d152      	bne.n	8000c4e <HAL_UART_RxCpltCallback+0x7ae>
 8000ba8:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b53      	cmp	r3, #83	; 0x53
 8000bae:	d14e      	bne.n	8000c4e <HAL_UART_RxCpltCallback+0x7ae>
 8000bb0:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000bb2:	78db      	ldrb	r3, [r3, #3]
 8000bb4:	2b4e      	cmp	r3, #78	; 0x4e
 8000bb6:	d14a      	bne.n	8000c4e <HAL_UART_RxCpltCallback+0x7ae>
 8000bb8:	4b54      	ldr	r3, [pc, #336]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000bba:	791b      	ldrb	r3, [r3, #4]
 8000bbc:	2b23      	cmp	r3, #35	; 0x23
 8000bbe:	d146      	bne.n	8000c4e <HAL_UART_RxCpltCallback+0x7ae>
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <HAL_UART_RxCpltCallback+0x878>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000bc8:	5c9b      	ldrb	r3, [r3, r2]
 8000bca:	2b3b      	cmp	r3, #59	; 0x3b
 8000bcc:	d13f      	bne.n	8000c4e <HAL_UART_RxCpltCallback+0x7ae>
		{
			for(uint8_t i = 0; i < 13; i++)
 8000bce:	230f      	movs	r3, #15
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e00a      	b.n	8000bee <HAL_UART_RxCpltCallback+0x74e>
			{
				device_id[i] = 0;
 8000bd8:	200f      	movs	r0, #15
 8000bda:	183b      	adds	r3, r7, r0
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <HAL_UART_RxCpltCallback+0x884>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 13; i++)
 8000be4:	183b      	adds	r3, r7, r0
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	3201      	adds	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b0c      	cmp	r3, #12
 8000bf6:	d9ef      	bls.n	8000bd8 <HAL_UART_RxCpltCallback+0x738>
			}

			loop_counter = 5;
 8000bf8:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; i < 12 && rx_string_esp[loop_counter]!=';'; i++)
 8000bfe:	230e      	movs	r3, #14
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e012      	b.n	8000c2e <HAL_UART_RxCpltCallback+0x78e>
			{
				device_id[i] = rx_string_esp[loop_counter++];
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	1c5a      	adds	r2, r3, #1
 8000c0e:	b2d1      	uxtb	r1, r2
 8000c10:	4a3d      	ldr	r2, [pc, #244]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000c12:	7011      	strb	r1, [r2, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	200e      	movs	r0, #14
 8000c18:	183b      	adds	r3, r7, r0
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4a3b      	ldr	r2, [pc, #236]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c1e:	5c51      	ldrb	r1, [r2, r1]
 8000c20:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <HAL_UART_RxCpltCallback+0x884>)
 8000c22:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; i < 12 && rx_string_esp[loop_counter]!=';'; i++)
 8000c24:	183b      	adds	r3, r7, r0
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	183b      	adds	r3, r7, r0
 8000c2a:	3201      	adds	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	230e      	movs	r3, #14
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b0b      	cmp	r3, #11
 8000c36:	d806      	bhi.n	8000c46 <HAL_UART_RxCpltCallback+0x7a6>
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c40:	5c9b      	ldrb	r3, [r3, r2]
 8000c42:	2b3b      	cmp	r3, #59	; 0x3b
 8000c44:	d1e0      	bne.n	8000c08 <HAL_UART_RxCpltCallback+0x768>
			}

			new_device_id_flag = 1;
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <HAL_UART_RxCpltCallback+0x888>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e139      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>

		}
		//// +BLEENCDEV:0,9c:1d:58:9c:06:1e
		else if(rx_string_esp[1]=='B' && rx_string_esp[2]=='L' && rx_string_esp[3]=='E' && rx_string_esp[4]=='E' && rx_string_esp[5]=='N' && rx_string_esp[6]=='C' && rx_string_esp[7]=='D' && rx_string_esp[8]=='E' && rx_string_esp[9]=='V' && rx_string_esp[10]==':' && rx_string_esp[11]=='0' && rx_string_esp[12]==',' && rx_string_esp[rx_esp_counter]==0x0D)
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c50:	785b      	ldrb	r3, [r3, #1]
 8000c52:	2b42      	cmp	r3, #66	; 0x42
 8000c54:	d000      	beq.n	8000c58 <HAL_UART_RxCpltCallback+0x7b8>
 8000c56:	e06b      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	2b4c      	cmp	r3, #76	; 0x4c
 8000c5e:	d000      	beq.n	8000c62 <HAL_UART_RxCpltCallback+0x7c2>
 8000c60:	e066      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c64:	78db      	ldrb	r3, [r3, #3]
 8000c66:	2b45      	cmp	r3, #69	; 0x45
 8000c68:	d162      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c6c:	791b      	ldrb	r3, [r3, #4]
 8000c6e:	2b45      	cmp	r3, #69	; 0x45
 8000c70:	d15e      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	2b4e      	cmp	r3, #78	; 0x4e
 8000c78:	d15a      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c7c:	799b      	ldrb	r3, [r3, #6]
 8000c7e:	2b43      	cmp	r3, #67	; 0x43
 8000c80:	d156      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c84:	79db      	ldrb	r3, [r3, #7]
 8000c86:	2b44      	cmp	r3, #68	; 0x44
 8000c88:	d152      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c8c:	7a1b      	ldrb	r3, [r3, #8]
 8000c8e:	2b45      	cmp	r3, #69	; 0x45
 8000c90:	d14e      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c94:	7a5b      	ldrb	r3, [r3, #9]
 8000c96:	2b56      	cmp	r3, #86	; 0x56
 8000c98:	d14a      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000c9c:	7a9b      	ldrb	r3, [r3, #10]
 8000c9e:	2b3a      	cmp	r3, #58	; 0x3a
 8000ca0:	d146      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000ca4:	7adb      	ldrb	r3, [r3, #11]
 8000ca6:	2b30      	cmp	r3, #48	; 0x30
 8000ca8:	d142      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000cac:	7b1b      	ldrb	r3, [r3, #12]
 8000cae:	2b2c      	cmp	r3, #44	; 0x2c
 8000cb0:	d13e      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_UART_RxCpltCallback+0x878>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	2b0d      	cmp	r3, #13
 8000cbe:	d137      	bne.n	8000d30 <HAL_UART_RxCpltCallback+0x890>
//			for(uint8_t i = 0; i < 18; i++)
//			{
//				ble_paired_device[i] = 0;
//			}

			loop_counter = 13;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000cc2:	220d      	movs	r2, #13
 8000cc4:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; rx_string_esp[loop_counter]!=0x0D; i++)
 8000cc6:	230d      	movs	r3, #13
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e012      	b.n	8000cf6 <HAL_UART_RxCpltCallback+0x856>
			{
				ble_paired_device[i] = rx_string_esp[loop_counter++];
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	b2d1      	uxtb	r1, r2
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000cda:	7011      	strb	r1, [r2, #0]
 8000cdc:	0019      	movs	r1, r3
 8000cde:	200d      	movs	r0, #13
 8000ce0:	183b      	adds	r3, r7, r0
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000ce6:	5c51      	ldrb	r1, [r2, r1]
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_RxCpltCallback+0x88c>)
 8000cea:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; rx_string_esp[loop_counter]!=0x0D; i++)
 8000cec:	183b      	adds	r3, r7, r0
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	183b      	adds	r3, r7, r0
 8000cf2:	3201      	adds	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_UART_RxCpltCallback+0x868>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_UART_RxCpltCallback+0x86c>)
 8000cfe:	5c9b      	ldrb	r3, [r3, r2]
 8000d00:	2b0d      	cmp	r3, #13
 8000d02:	d1e5      	bne.n	8000cd0 <HAL_UART_RxCpltCallback+0x830>
 8000d04:	e0dd      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	200002d7 	.word	0x200002d7
 8000d0c:	200002f8 	.word	0x200002f8
 8000d10:	2000075c 	.word	0x2000075c
 8000d14:	20001750 	.word	0x20001750
 8000d18:	200002e4 	.word	0x200002e4
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	2000175f 	.word	0x2000175f
 8000d24:	20000028 	.word	0x20000028
 8000d28:	20001763 	.word	0x20001763
 8000d2c:	20000768 	.word	0x20000768
		}
		//+BLESCAN:9c:1d:58:9c:06:1e,-55,020104030208180f096d657465722b3032333535303335,,0
		//+BLESCAN:9c:1d:58:9c:06:1e,-55,020104030208180f09 6d65746572 2b3032333535303335,,0
		//0123456789012345678901234567890123456789012345678 9012345678 9012345678901234567890

		else if(ble_scan_meter_flag && rx_esp_counter > 70 && rx_string_esp[1]=='B' && rx_string_esp[2]=='L' && rx_string_esp[3]=='E' && rx_string_esp[4]=='S' && rx_string_esp[5]=='C' && rx_string_esp[6]=='A' && rx_string_esp[7]=='N' && rx_string_esp[8]==':' && rx_string_esp[rx_esp_counter]==',' && rx_string_esp[49]=='6' && rx_string_esp[50]=='d' && rx_string_esp[51]=='6' && rx_string_esp[52]=='5' && rx_string_esp[53]=='7' && rx_string_esp[54]=='4' && rx_string_esp[55]=='6' && rx_string_esp[56]=='5' && rx_string_esp[57]=='7' && rx_string_esp[58]=='2')
 8000d30:	4bb8      	ldr	r3, [pc, #736]	; (8001014 <HAL_UART_RxCpltCallback+0xb74>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d100      	bne.n	8000d3a <HAL_UART_RxCpltCallback+0x89a>
 8000d38:	e089      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d3a:	4bb7      	ldr	r3, [pc, #732]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	2b46      	cmp	r3, #70	; 0x46
 8000d40:	d800      	bhi.n	8000d44 <HAL_UART_RxCpltCallback+0x8a4>
 8000d42:	e084      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d44:	4bb5      	ldr	r3, [pc, #724]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2b42      	cmp	r3, #66	; 0x42
 8000d4a:	d000      	beq.n	8000d4e <HAL_UART_RxCpltCallback+0x8ae>
 8000d4c:	e07f      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d4e:	4bb3      	ldr	r3, [pc, #716]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	2b4c      	cmp	r3, #76	; 0x4c
 8000d54:	d000      	beq.n	8000d58 <HAL_UART_RxCpltCallback+0x8b8>
 8000d56:	e07a      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d58:	4bb0      	ldr	r3, [pc, #704]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d5a:	78db      	ldrb	r3, [r3, #3]
 8000d5c:	2b45      	cmp	r3, #69	; 0x45
 8000d5e:	d000      	beq.n	8000d62 <HAL_UART_RxCpltCallback+0x8c2>
 8000d60:	e075      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d62:	4bae      	ldr	r3, [pc, #696]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	2b53      	cmp	r3, #83	; 0x53
 8000d68:	d000      	beq.n	8000d6c <HAL_UART_RxCpltCallback+0x8cc>
 8000d6a:	e070      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d6c:	4bab      	ldr	r3, [pc, #684]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d6e:	795b      	ldrb	r3, [r3, #5]
 8000d70:	2b43      	cmp	r3, #67	; 0x43
 8000d72:	d000      	beq.n	8000d76 <HAL_UART_RxCpltCallback+0x8d6>
 8000d74:	e06b      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d76:	4ba9      	ldr	r3, [pc, #676]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d78:	799b      	ldrb	r3, [r3, #6]
 8000d7a:	2b41      	cmp	r3, #65	; 0x41
 8000d7c:	d000      	beq.n	8000d80 <HAL_UART_RxCpltCallback+0x8e0>
 8000d7e:	e066      	b.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d80:	4ba6      	ldr	r3, [pc, #664]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d82:	79db      	ldrb	r3, [r3, #7]
 8000d84:	2b4e      	cmp	r3, #78	; 0x4e
 8000d86:	d162      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d88:	4ba4      	ldr	r3, [pc, #656]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d8a:	7a1b      	ldrb	r3, [r3, #8]
 8000d8c:	2b3a      	cmp	r3, #58	; 0x3a
 8000d8e:	d15e      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d90:	4ba1      	ldr	r3, [pc, #644]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	001a      	movs	r2, r3
 8000d96:	4ba1      	ldr	r3, [pc, #644]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000d98:	5c9b      	ldrb	r3, [r3, r2]
 8000d9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000d9c:	d157      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000d9e:	4b9f      	ldr	r3, [pc, #636]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000da0:	2231      	movs	r2, #49	; 0x31
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	2b36      	cmp	r3, #54	; 0x36
 8000da6:	d152      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000da8:	4b9c      	ldr	r3, [pc, #624]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000daa:	2232      	movs	r2, #50	; 0x32
 8000dac:	5c9b      	ldrb	r3, [r3, r2]
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d14d      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000db2:	4b9a      	ldr	r3, [pc, #616]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000db4:	2233      	movs	r2, #51	; 0x33
 8000db6:	5c9b      	ldrb	r3, [r3, r2]
 8000db8:	2b36      	cmp	r3, #54	; 0x36
 8000dba:	d148      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000dbc:	4b97      	ldr	r3, [pc, #604]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	2b35      	cmp	r3, #53	; 0x35
 8000dc4:	d143      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000dc6:	4b95      	ldr	r3, [pc, #596]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000dc8:	2235      	movs	r2, #53	; 0x35
 8000dca:	5c9b      	ldrb	r3, [r3, r2]
 8000dcc:	2b37      	cmp	r3, #55	; 0x37
 8000dce:	d13e      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000dd0:	4b92      	ldr	r3, [pc, #584]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000dd2:	2236      	movs	r2, #54	; 0x36
 8000dd4:	5c9b      	ldrb	r3, [r3, r2]
 8000dd6:	2b34      	cmp	r3, #52	; 0x34
 8000dd8:	d139      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000dda:	4b90      	ldr	r3, [pc, #576]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000ddc:	2237      	movs	r2, #55	; 0x37
 8000dde:	5c9b      	ldrb	r3, [r3, r2]
 8000de0:	2b36      	cmp	r3, #54	; 0x36
 8000de2:	d134      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000de4:	4b8d      	ldr	r3, [pc, #564]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000de6:	2238      	movs	r2, #56	; 0x38
 8000de8:	5c9b      	ldrb	r3, [r3, r2]
 8000dea:	2b35      	cmp	r3, #53	; 0x35
 8000dec:	d12f      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000dee:	4b8b      	ldr	r3, [pc, #556]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000df0:	2239      	movs	r2, #57	; 0x39
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	2b37      	cmp	r3, #55	; 0x37
 8000df6:	d12a      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
 8000df8:	4b88      	ldr	r3, [pc, #544]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000dfa:	223a      	movs	r2, #58	; 0x3a
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	2b32      	cmp	r3, #50	; 0x32
 8000e00:	d125      	bne.n	8000e4e <HAL_UART_RxCpltCallback+0x9ae>
//			for(uint8_t i = 0; i < 18; i++)
//			{
//				ble_available_device[i] = 0;
//			}

			loop_counter = 9;
 8000e02:	4b87      	ldr	r3, [pc, #540]	; (8001020 <HAL_UART_RxCpltCallback+0xb80>)
 8000e04:	2209      	movs	r2, #9
 8000e06:	701a      	strb	r2, [r3, #0]

			for(uint8_t i = 0; rx_string_esp[loop_counter]!=','; i++)
 8000e08:	230c      	movs	r3, #12
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e012      	b.n	8000e38 <HAL_UART_RxCpltCallback+0x998>
			{
				ble_available_device[i] = rx_string_esp[loop_counter++];
 8000e12:	4b83      	ldr	r3, [pc, #524]	; (8001020 <HAL_UART_RxCpltCallback+0xb80>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	b2d1      	uxtb	r1, r2
 8000e1a:	4a81      	ldr	r2, [pc, #516]	; (8001020 <HAL_UART_RxCpltCallback+0xb80>)
 8000e1c:	7011      	strb	r1, [r2, #0]
 8000e1e:	0019      	movs	r1, r3
 8000e20:	200c      	movs	r0, #12
 8000e22:	183b      	adds	r3, r7, r0
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4a7d      	ldr	r2, [pc, #500]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e28:	5c51      	ldrb	r1, [r2, r1]
 8000e2a:	4a7e      	ldr	r2, [pc, #504]	; (8001024 <HAL_UART_RxCpltCallback+0xb84>)
 8000e2c:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0; rx_string_esp[loop_counter]!=','; i++)
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	183b      	adds	r3, r7, r0
 8000e34:	3201      	adds	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	4b79      	ldr	r3, [pc, #484]	; (8001020 <HAL_UART_RxCpltCallback+0xb80>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b77      	ldr	r3, [pc, #476]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e40:	5c9b      	ldrb	r3, [r3, r2]
 8000e42:	2b2c      	cmp	r3, #44	; 0x2c
 8000e44:	d1e5      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0x972>
			}

			ble_scan_meter_flag = 0;
 8000e46:	4b73      	ldr	r3, [pc, #460]	; (8001014 <HAL_UART_RxCpltCallback+0xb74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e039      	b.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>

		}

		///+BLEDISCONN:0,"9c:1d:58:9c:06:1e"
		else if(rx_string_esp[1]=='B' && rx_string_esp[2]=='L' && rx_string_esp[3]=='E' && rx_string_esp[4]=='D' && rx_string_esp[5]=='I' && rx_string_esp[6]=='S' && rx_string_esp[7]=='C' && rx_string_esp[8]=='O' && rx_string_esp[9]=='N' && rx_string_esp[10]=='N' && rx_string_esp[11]==':' && rx_string_esp[12]=='0' && rx_string_esp[rx_esp_counter]==0x0D)
 8000e4e:	4b73      	ldr	r3, [pc, #460]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	2b42      	cmp	r3, #66	; 0x42
 8000e54:	d135      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e56:	4b71      	ldr	r3, [pc, #452]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e58:	789b      	ldrb	r3, [r3, #2]
 8000e5a:	2b4c      	cmp	r3, #76	; 0x4c
 8000e5c:	d131      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e5e:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e60:	78db      	ldrb	r3, [r3, #3]
 8000e62:	2b45      	cmp	r3, #69	; 0x45
 8000e64:	d12d      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e66:	4b6d      	ldr	r3, [pc, #436]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	2b44      	cmp	r3, #68	; 0x44
 8000e6c:	d129      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e6e:	4b6b      	ldr	r3, [pc, #428]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	2b49      	cmp	r3, #73	; 0x49
 8000e74:	d125      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e76:	4b69      	ldr	r3, [pc, #420]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e78:	799b      	ldrb	r3, [r3, #6]
 8000e7a:	2b53      	cmp	r3, #83	; 0x53
 8000e7c:	d121      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e7e:	4b67      	ldr	r3, [pc, #412]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e80:	79db      	ldrb	r3, [r3, #7]
 8000e82:	2b43      	cmp	r3, #67	; 0x43
 8000e84:	d11d      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e86:	4b65      	ldr	r3, [pc, #404]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	2b4f      	cmp	r3, #79	; 0x4f
 8000e8c:	d119      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e8e:	4b63      	ldr	r3, [pc, #396]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e90:	7a5b      	ldrb	r3, [r3, #9]
 8000e92:	2b4e      	cmp	r3, #78	; 0x4e
 8000e94:	d115      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e96:	4b61      	ldr	r3, [pc, #388]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000e98:	7a9b      	ldrb	r3, [r3, #10]
 8000e9a:	2b4e      	cmp	r3, #78	; 0x4e
 8000e9c:	d111      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000ea0:	7adb      	ldrb	r3, [r3, #11]
 8000ea2:	2b3a      	cmp	r3, #58	; 0x3a
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000ea8:	7b1b      	ldrb	r3, [r3, #12]
 8000eaa:	2b30      	cmp	r3, #48	; 0x30
 8000eac:	d109      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
 8000eae:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000eb6:	5c9b      	ldrb	r3, [r3, r2]
 8000eb8:	2b0d      	cmp	r3, #13
 8000eba:	d102      	bne.n	8000ec2 <HAL_UART_RxCpltCallback+0xa22>
		{
			ble_device_connected_flag = 0;
 8000ebc:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <HAL_UART_RxCpltCallback+0xb88>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]

		}

		if(rx_string_esp[rx_esp_counter]=='+' && esp_plus_enable)
 8000ec2:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	4b54      	ldr	r3, [pc, #336]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b2b      	cmp	r3, #43	; 0x2b
 8000ece:	d10c      	bne.n	8000eea <HAL_UART_RxCpltCallback+0xa4a>
 8000ed0:	4b56      	ldr	r3, [pc, #344]	; (800102c <HAL_UART_RxCpltCallback+0xb8c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <HAL_UART_RxCpltCallback+0xa4a>
			{
				rx_esp_counter=0;
 8000ed8:	4b4f      	ldr	r3, [pc, #316]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	801a      	strh	r2, [r3, #0]
				rx_string_esp[rx_esp_counter]='+';
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <HAL_UART_RxCpltCallback+0xb7c>)
 8000ee6:	212b      	movs	r1, #43	; 0x2b
 8000ee8:	5499      	strb	r1, [r3, r2]
			}

	 if(rx_esp_counter>=290)
 8000eea:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	2391      	movs	r3, #145	; 0x91
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d302      	bcc.n	8000efc <HAL_UART_RxCpltCallback+0xa5c>
		 rx_esp_counter=0;
 8000ef6:	4b48      	ldr	r3, [pc, #288]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	801a      	strh	r2, [r3, #0]

		rx_esp_counter++;
 8000efc:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b44      	ldr	r3, [pc, #272]	; (8001018 <HAL_UART_RxCpltCallback+0xb78>)
 8000f06:	801a      	strh	r2, [r3, #0]


	}

	if (huart->Instance == USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a48      	ldr	r2, [pc, #288]	; (8001030 <HAL_UART_RxCpltCallback+0xb90>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d000      	beq.n	8000f14 <HAL_UART_RxCpltCallback+0xa74>
 8000f12:	e0c9      	b.n	80010a8 <HAL_UART_RxCpltCallback+0xc08>
	{
		HAL_UART_Receive_IT(&huart2, &gsm, 1);
 8000f14:	4947      	ldr	r1, [pc, #284]	; (8001034 <HAL_UART_RxCpltCallback+0xb94>)
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <HAL_UART_RxCpltCallback+0xb98>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f00c fc94 	bl	800d848 <HAL_UART_Receive_IT>

		gsm_data[gsm_count]=gsm;
 8000f20:	4b46      	ldr	r3, [pc, #280]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	001a      	movs	r2, r3
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <HAL_UART_RxCpltCallback+0xb94>)
 8000f28:	7819      	ldrb	r1, [r3, #0]
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000f2c:	5499      	strb	r1, [r3, r2]


		if(json_response_flag && gsm_data[gsm_count] == '{')///////////// JSON DATA START CONDITION
 8000f2e:	4b45      	ldr	r3, [pc, #276]	; (8001044 <HAL_UART_RxCpltCallback+0xba4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d031      	beq.n	8000f9a <HAL_UART_RxCpltCallback+0xafa>
 8000f36:	4b41      	ldr	r3, [pc, #260]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000f3e:	5c9b      	ldrb	r3, [r3, r2]
 8000f40:	2b7b      	cmp	r3, #123	; 0x7b
 8000f42:	d12a      	bne.n	8000f9a <HAL_UART_RxCpltCallback+0xafa>
		{
			curly_brace_count++;
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000f4e:	801a      	strh	r2, [r3, #0]

			if(curly_brace_count==1)///// { START CONDITION
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d111      	bne.n	8000f7c <HAL_UART_RxCpltCallback+0xadc>
			{
				gsm_data[gsm_count] = 0;
 8000f58:	4b38      	ldr	r3, [pc, #224]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	5499      	strb	r1, [r3, r2]

				gsm_count = 0;
 8000f64:	4b35      	ldr	r3, [pc, #212]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	801a      	strh	r2, [r3, #0]
				json_count = 0;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	801a      	strh	r2, [r3, #0]
				plus_enable = 0;
 8000f70:	4b37      	ldr	r3, [pc, #220]	; (8001050 <HAL_UART_RxCpltCallback+0xbb0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]

				gsm_data[0] = '{';
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000f78:	227b      	movs	r2, #123	; 0x7b
 8000f7a:	701a      	strb	r2, [r3, #0]
			}

			json_response[json_count++] = gsm_data[gsm_count];
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	0019      	movs	r1, r3
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	b290      	uxth	r0, r2
 8000f8a:	4a30      	ldr	r2, [pc, #192]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000f8c:	8010      	strh	r0, [r2, #0]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000f92:	5c59      	ldrb	r1, [r3, r1]
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_UART_RxCpltCallback+0xbb4>)
 8000f96:	5499      	strb	r1, [r3, r2]
 8000f98:	e063      	b.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
		}
		else if(json_response_flag && gsm_data[0] == '{')/////////// JSON DATA CAPTURE AND END CONDITION
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_UART_RxCpltCallback+0xba4>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d05f      	beq.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b7b      	cmp	r3, #123	; 0x7b
 8000fa8:	d15b      	bne.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
		{
			if(json_count < 599)
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_UART_RxCpltCallback+0xbb8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d853      	bhi.n	800105c <HAL_UART_RxCpltCallback+0xbbc>
			{
				json_response[json_count] = gsm_data[gsm_count];
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	0019      	movs	r1, r3
 8000fba:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000fc2:	5c59      	ldrb	r1, [r3, r1]
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <HAL_UART_RxCpltCallback+0xbb4>)
 8000fc6:	5499      	strb	r1, [r3, r2]

				if(gsm_data[gsm_count] == '}')////// } END CONDITION
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_UART_RxCpltCallback+0xb9c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_RxCpltCallback+0xba0>)
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	2b7d      	cmp	r3, #125	; 0x7d
 8000fd4:	d117      	bne.n	8001006 <HAL_UART_RxCpltCallback+0xb66>
				{
					curly_brace_count--;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000fe0:	801a      	strh	r2, [r3, #0]

					if(curly_brace_count==0)
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_UART_RxCpltCallback+0xba8>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d106      	bne.n	8000ff8 <HAL_UART_RxCpltCallback+0xb58>
					{
						json_response_flag = 0;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_UART_RxCpltCallback+0xba4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
						plus_enable = 1;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_UART_RxCpltCallback+0xbb0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e034      	b.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
					}
					else
						json_count++;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	e02d      	b.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
				}
				else
					json_count++;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_UART_RxCpltCallback+0xbac>)
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	e026      	b.n	8001062 <HAL_UART_RxCpltCallback+0xbc2>
 8001014:	2000174f 	.word	0x2000174f
 8001018:	200002e4 	.word	0x200002e4
 800101c:	200002f8 	.word	0x200002f8
 8001020:	200002d7 	.word	0x200002d7
 8001024:	2000077c 	.word	0x2000077c
 8001028:	20001751 	.word	0x20001751
 800102c:	2000006d 	.word	0x2000006d
 8001030:	40004400 	.word	0x40004400
 8001034:	20001ab0 	.word	0x20001ab0
 8001038:	20001b18 	.word	0x20001b18
 800103c:	200002de 	.word	0x200002de
 8001040:	200005b4 	.word	0x200005b4
 8001044:	20001754 	.word	0x20001754
 8001048:	200002f0 	.word	0x200002f0
 800104c:	200002ee 	.word	0x200002ee
 8001050:	2000006c 	.word	0x2000006c
 8001054:	20000790 	.word	0x20000790
 8001058:	00000256 	.word	0x00000256
			}
			else
				json_response_flag = 0;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_UART_RxCpltCallback+0xc10>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
		}




		if(plus_enable)
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_UART_RxCpltCallback+0xc14>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00f      	beq.n	800108a <HAL_UART_RxCpltCallback+0xbea>
   {
      if(gsm_data[gsm_count]=='+')
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	001a      	movs	r2, r3
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_UART_RxCpltCallback+0xc1c>)
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	2b2b      	cmp	r3, #43	; 0x2b
 8001076:	d108      	bne.n	800108a <HAL_UART_RxCpltCallback+0xbea>
			{
				gsm_count=0;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
				gsm_data[gsm_count]='+';
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	001a      	movs	r2, r3
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_UART_RxCpltCallback+0xc1c>)
 8001086:	212b      	movs	r1, #43	; 0x2b
 8001088:	5499      	strb	r1, [r3, r2]
			}
   }

	 if(gsm_count>=290)
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	2391      	movs	r3, #145	; 0x91
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	429a      	cmp	r2, r3
 8001094:	d302      	bcc.n	800109c <HAL_UART_RxCpltCallback+0xbfc>
		 gsm_count=0;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 8001098:	2200      	movs	r2, #0
 800109a:	801a      	strh	r2, [r3, #0]

   gsm_count++;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <HAL_UART_RxCpltCallback+0xc18>)
 80010a6:	801a      	strh	r2, [r3, #0]

	}
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b006      	add	sp, #24
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}
 80010b0:	20001754 	.word	0x20001754
 80010b4:	2000006c 	.word	0x2000006c
 80010b8:	200002de 	.word	0x200002de
 80010bc:	200005b4 	.word	0x200005b4

080010c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6) // 1ms
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a40      	ldr	r2, [pc, #256]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d11e      	bne.n	8001110 <HAL_TIM_PeriodElapsedCallback+0x50>
		if(watchdog_refill_flag)
		{
//			HAL_WWDG_Refresh(&hwwdg);
		}

		timer_ms++;
 80010d2:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010dc:	801a      	strh	r2, [r3, #0]

		if(timer_ms>9000)
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d902      	bls.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x2e>
			timer_ms=9000;
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010ec:	801a      	strh	r2, [r3, #0]

		if(green_led_timer>0)
 80010ee:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x42>
			green_led_timer--;
 80010f6:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001100:	801a      	strh	r2, [r3, #0]

		if(enable_green_led_handler)
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d05d      	beq.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			green_led_handler();
 800110a:	f004 fea7 	bl	8005e5c <green_led_handler>
		}
		else
			check_paired_device_timer++;

	}
}
 800110e:	e05a      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x106>
	else if(htim->Instance==TIM7)  //1 sec
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d155      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x106>
		if(!server_clock_update)
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	4053      	eors	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_TIM_PeriodElapsedCallback+0x72>
			server_clock++;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001130:	601a      	str	r2, [r3, #0]
		if(enable_yellow_led_handler)
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_TIM_PeriodElapsedCallback+0x7e>
			yellow_led_handler();
 800113a:	f004 ff01 	bl	8005f40 <yellow_led_handler>
		if(enable_red_led_handler)
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_TIM_PeriodElapsedCallback+0x8a>
			red_led_handler();
 8001146:	f004 fedd 	bl	8005f04 <red_led_handler>
		if(timer_cmd < 400)
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	23c8      	movs	r3, #200	; 0xc8
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	429a      	cmp	r2, r3
 8001154:	d205      	bcs.n	8001162 <HAL_TIM_PeriodElapsedCallback+0xa2>
			timer_cmd++;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001160:	801a      	strh	r2, [r3, #0]
		if(timer_cmd_esp < 400)
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	23c8      	movs	r3, #200	; 0xc8
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	429a      	cmp	r2, r3
 800116c:	d205      	bcs.n	800117a <HAL_TIM_PeriodElapsedCallback+0xba>
			timer_cmd_esp++;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001178:	801a      	strh	r2, [r3, #0]
		if(softap_mode_timer<320)
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	429a      	cmp	r2, r3
 8001184:	d205      	bcs.n	8001192 <HAL_TIM_PeriodElapsedCallback+0xd2>
			softap_mode_timer++;
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001190:	801a      	strh	r2, [r3, #0]
		if(softap_mode_timer==AP_MODE_TIMEOUT_DURATION)
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001194:	881a      	ldrh	r2, [r3, #0]
 8001196:	2396      	movs	r3, #150	; 0x96
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	429a      	cmp	r2, r3
 800119c:	d102      	bne.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0xe4>
			softap_mode_timeup_flag=1;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
		if(check_paired_device_timer > 2)
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d906      	bls.n	80011ba <HAL_TIM_PeriodElapsedCallback+0xfa>
			check_paired_device_timer = 0;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	801a      	strh	r2, [r3, #0]
			ble_connect_paired_meter_flag = 1;
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	e005      	b.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x106>
			check_paired_device_timer++;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80011c4:	801a      	strh	r2, [r3, #0]
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40001000 	.word	0x40001000
 80011d4:	200002dc 	.word	0x200002dc
 80011d8:	00002328 	.word	0x00002328
 80011dc:	20000062 	.word	0x20000062
 80011e0:	2000006e 	.word	0x2000006e
 80011e4:	40001400 	.word	0x40001400
 80011e8:	20001760 	.word	0x20001760
 80011ec:	20001748 	.word	0x20001748
 80011f0:	20000070 	.word	0x20000070
 80011f4:	2000006f 	.word	0x2000006f
 80011f8:	200002e0 	.word	0x200002e0
 80011fc:	200002e2 	.word	0x200002e2
 8001200:	200002f2 	.word	0x200002f2
 8001204:	2000175d 	.word	0x2000175d
 8001208:	200002e6 	.word	0x200002e6
 800120c:	20001753 	.word	0x20001753

08001210 <convert_to_epoch>:
time_t epoch_time=0;
epoch_time = convert_to_epoch(date, time1);
*/

time_t convert_to_epoch(unsigned char* __date, unsigned char* __time)
{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b095      	sub	sp, #84	; 0x54
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	struct tm t;

	time_t t_of_day;

	unsigned char yr[5]={0}, mon[3]={0}, day[3]={0}, hr[3]={0}, min[3]={0}, sec[3]={0};
 800121a:	201c      	movs	r0, #28
 800121c:	183b      	adds	r3, r7, r0
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	711a      	strb	r2, [r3, #4]
 8001226:	2518      	movs	r5, #24
 8001228:	197b      	adds	r3, r7, r5
 800122a:	4a52      	ldr	r2, [pc, #328]	; (8001374 <convert_to_epoch+0x164>)
 800122c:	8812      	ldrh	r2, [r2, #0]
 800122e:	801a      	strh	r2, [r3, #0]
 8001230:	2202      	movs	r2, #2
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]
 8001236:	2414      	movs	r4, #20
 8001238:	193b      	adds	r3, r7, r4
 800123a:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <convert_to_epoch+0x164>)
 800123c:	8812      	ldrh	r2, [r2, #0]
 800123e:	801a      	strh	r2, [r3, #0]
 8001240:	2202      	movs	r2, #2
 8001242:	2100      	movs	r1, #0
 8001244:	5499      	strb	r1, [r3, r2]
 8001246:	2310      	movs	r3, #16
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <convert_to_epoch+0x164>)
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	801a      	strh	r2, [r3, #0]
 8001250:	2202      	movs	r2, #2
 8001252:	2100      	movs	r1, #0
 8001254:	5499      	strb	r1, [r3, r2]
 8001256:	220c      	movs	r2, #12
 8001258:	18bb      	adds	r3, r7, r2
 800125a:	4a46      	ldr	r2, [pc, #280]	; (8001374 <convert_to_epoch+0x164>)
 800125c:	8812      	ldrh	r2, [r2, #0]
 800125e:	801a      	strh	r2, [r3, #0]
 8001260:	2202      	movs	r2, #2
 8001262:	2100      	movs	r1, #0
 8001264:	5499      	strb	r1, [r3, r2]
 8001266:	2108      	movs	r1, #8
 8001268:	187b      	adds	r3, r7, r1
 800126a:	4a42      	ldr	r2, [pc, #264]	; (8001374 <convert_to_epoch+0x164>)
 800126c:	8812      	ldrh	r2, [r2, #0]
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	2202      	movs	r2, #2
 8001272:	2100      	movs	r1, #0
 8001274:	5499      	strb	r1, [r3, r2]

	 yr[0] = '2';
 8001276:	0001      	movs	r1, r0
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2232      	movs	r2, #50	; 0x32
 800127c:	701a      	strb	r2, [r3, #0]
	 yr[1] = '0';
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2230      	movs	r2, #48	; 0x30
 8001282:	705a      	strb	r2, [r3, #1]
	 yr[2] = __date[4];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	791a      	ldrb	r2, [r3, #4]
 8001288:	187b      	adds	r3, r7, r1
 800128a:	709a      	strb	r2, [r3, #2]
	 yr[3] = __date[5];
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	795a      	ldrb	r2, [r3, #5]
 8001290:	187b      	adds	r3, r7, r1
 8001292:	70da      	strb	r2, [r3, #3]

	 mon[0] = __date[2];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	789a      	ldrb	r2, [r3, #2]
 8001298:	197b      	adds	r3, r7, r5
 800129a:	701a      	strb	r2, [r3, #0]
	 mon[1] = __date[3];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	78da      	ldrb	r2, [r3, #3]
 80012a0:	197b      	adds	r3, r7, r5
 80012a2:	705a      	strb	r2, [r3, #1]

	 day[0] = __date[0];
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	701a      	strb	r2, [r3, #0]
	 day[1] = __date[1];
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	785a      	ldrb	r2, [r3, #1]
 80012b0:	0026      	movs	r6, r4
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	705a      	strb	r2, [r3, #1]

	 hr[0] = __time[0];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	2010      	movs	r0, #16
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	701a      	strb	r2, [r3, #0]
	 hr[1] = __time[1];
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	785a      	ldrb	r2, [r3, #1]
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	705a      	strb	r2, [r3, #1]

	 min[0] = __time[2];
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	789a      	ldrb	r2, [r3, #2]
 80012cc:	240c      	movs	r4, #12
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	701a      	strb	r2, [r3, #0]
	 min[1] = __time[3];
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	78da      	ldrb	r2, [r3, #3]
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	705a      	strb	r2, [r3, #1]

	 sec[0] = __time[4];
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	791a      	ldrb	r2, [r3, #4]
 80012de:	2408      	movs	r4, #8
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	701a      	strb	r2, [r3, #0]
	 sec[1] = __time[5];
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	795a      	ldrb	r2, [r3, #5]
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	705a      	strb	r2, [r3, #1]

	 t.tm_year = atoi((char*)yr)-1900;  // Year - 1970
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	0018      	movs	r0, r3
 80012f0:	f011 fd12 	bl	8012d18 <atoi>
 80012f4:	0003      	movs	r3, r0
 80012f6:	4a20      	ldr	r2, [pc, #128]	; (8001378 <convert_to_epoch+0x168>)
 80012f8:	189a      	adds	r2, r3, r2
 80012fa:	2424      	movs	r4, #36	; 0x24
 80012fc:	193b      	adds	r3, r7, r4
 80012fe:	615a      	str	r2, [r3, #20]
		t.tm_mon = atoi((char*)mon)-1;           // Month, where 0 = jan
 8001300:	197b      	adds	r3, r7, r5
 8001302:	0018      	movs	r0, r3
 8001304:	f011 fd08 	bl	8012d18 <atoi>
 8001308:	0003      	movs	r3, r0
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	193b      	adds	r3, r7, r4
 800130e:	611a      	str	r2, [r3, #16]
		t.tm_mday = atoi((char*)day);          // Day of the month
 8001310:	19bb      	adds	r3, r7, r6
 8001312:	0018      	movs	r0, r3
 8001314:	f011 fd00 	bl	8012d18 <atoi>
 8001318:	0002      	movs	r2, r0
 800131a:	193b      	adds	r3, r7, r4
 800131c:	60da      	str	r2, [r3, #12]
		t.tm_hour = atoi((char*)hr);
 800131e:	2010      	movs	r0, #16
 8001320:	183b      	adds	r3, r7, r0
 8001322:	0018      	movs	r0, r3
 8001324:	f011 fcf8 	bl	8012d18 <atoi>
 8001328:	0002      	movs	r2, r0
 800132a:	193b      	adds	r3, r7, r4
 800132c:	609a      	str	r2, [r3, #8]
		t.tm_min = atoi((char*)min);
 800132e:	230c      	movs	r3, #12
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	0018      	movs	r0, r3
 8001334:	f011 fcf0 	bl	8012d18 <atoi>
 8001338:	0002      	movs	r2, r0
 800133a:	193b      	adds	r3, r7, r4
 800133c:	605a      	str	r2, [r3, #4]
		t.tm_sec = atoi((char*)sec);
 800133e:	2308      	movs	r3, #8
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	0018      	movs	r0, r3
 8001344:	f011 fce8 	bl	8012d18 <atoi>
 8001348:	0002      	movs	r2, r0
 800134a:	193b      	adds	r3, r7, r4
 800134c:	601a      	str	r2, [r3, #0]
		t.tm_isdst = 0;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 800134e:	193b      	adds	r3, r7, r4
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
		t_of_day = mktime(&t);
 8001354:	193b      	adds	r3, r7, r4
 8001356:	0018      	movs	r0, r3
 8001358:	f011 fde2 	bl	8012f20 <mktime>
 800135c:	0002      	movs	r2, r0
 800135e:	000b      	movs	r3, r1
 8001360:	64ba      	str	r2, [r7, #72]	; 0x48
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c

		return t_of_day;
 8001364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 8001368:	0010      	movs	r0, r2
 800136a:	0019      	movs	r1, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b015      	add	sp, #84	; 0x54
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	08014b20 	.word	0x08014b20
 8001378:	fffff894 	.word	0xfffff894

0800137c <send_text_to_uart1>:

	at_cmd_send_esp("ATE0\r\n\0","OK\r\n","ERROR",5,0);
}

void send_text_to_uart1(uint8_t *str)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint16_t i=0;
 8001384:	210e      	movs	r1, #14
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2200      	movs	r2, #0
 800138a:	801a      	strh	r2, [r3, #0]
	for(i=0; i<400 && str[i]!=0; i++);
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2200      	movs	r2, #0
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	e005      	b.n	80013a0 <send_text_to_uart1+0x24>
 8001394:	210e      	movs	r1, #14
 8001396:	187b      	adds	r3, r7, r1
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	187b      	adds	r3, r7, r1
 800139c:	3201      	adds	r2, #1
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	210e      	movs	r1, #14
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	23c8      	movs	r3, #200	; 0xc8
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d206      	bcs.n	80013bc <send_text_to_uart1+0x40>
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1eb      	bne.n	8001394 <send_text_to_uart1+0x18>

	HAL_UART_Transmit_IT(&huart1, str, i);
 80013bc:	240e      	movs	r4, #14
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <send_text_to_uart1+0x68>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f00c f9d0 	bl	800d76c <HAL_UART_Transmit_IT>

	HAL_Delay(i*3);
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	0013      	movs	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	189b      	adds	r3, r3, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f006 ffac 	bl	8008334 <HAL_Delay>

}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b005      	add	sp, #20
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	200019c4 	.word	0x200019c4

080013e8 <send_text_to_uart2>:

void send_text_to_uart2(uint8_t *str)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	uint16_t i=0;
 80013f0:	210e      	movs	r1, #14
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	801a      	strh	r2, [r3, #0]
	for(i=0; i<400 && str[i]!=0; i++);
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	e005      	b.n	800140c <send_text_to_uart2+0x24>
 8001400:	210e      	movs	r1, #14
 8001402:	187b      	adds	r3, r7, r1
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	187b      	adds	r3, r7, r1
 8001408:	3201      	adds	r2, #1
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	210e      	movs	r1, #14
 800140e:	187b      	adds	r3, r7, r1
 8001410:	881a      	ldrh	r2, [r3, #0]
 8001412:	23c8      	movs	r3, #200	; 0xc8
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	d206      	bcs.n	8001428 <send_text_to_uart2+0x40>
 800141a:	187b      	adds	r3, r7, r1
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1eb      	bne.n	8001400 <send_text_to_uart2+0x18>

	HAL_UART_Transmit_IT(&huart2, str, i);
 8001428:	240e      	movs	r4, #14
 800142a:	193b      	adds	r3, r7, r4
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <send_text_to_uart2+0x68>)
 8001432:	0018      	movs	r0, r3
 8001434:	f00c f99a 	bl	800d76c <HAL_UART_Transmit_IT>

	HAL_Delay(i*3);
 8001438:	193b      	adds	r3, r7, r4
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	0013      	movs	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	189b      	adds	r3, r3, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f006 ff76 	bl	8008334 <HAL_Delay>

}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b005      	add	sp, #20
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	20001b18 	.word	0x20001b18

08001454 <send_text_to_usb>:

void send_text_to_usb(char *str)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	#if USB_ENABLED
	uint16_t i=0;
 800145c:	210e      	movs	r1, #14
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	801a      	strh	r2, [r3, #0]
	for(i=0; i<400 && str[i]!=0; i++);
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	e005      	b.n	8001478 <send_text_to_usb+0x24>
 800146c:	210e      	movs	r1, #14
 800146e:	187b      	adds	r3, r7, r1
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	187b      	adds	r3, r7, r1
 8001474:	3201      	adds	r2, #1
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	210e      	movs	r1, #14
 800147a:	187b      	adds	r3, r7, r1
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	23c8      	movs	r3, #200	; 0xc8
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	429a      	cmp	r2, r3
 8001484:	d206      	bcs.n	8001494 <send_text_to_usb+0x40>
 8001486:	187b      	adds	r3, r7, r1
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1eb      	bne.n	800146c <send_text_to_usb+0x18>

	CDC_Transmit_FS((uint8_t*) str, i);
 8001494:	240e      	movs	r4, #14
 8001496:	193b      	adds	r3, r7, r4
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0011      	movs	r1, r2
 800149e:	0018      	movs	r0, r3
 80014a0:	f010 ff7e 	bl	80123a0 <CDC_Transmit_FS>

	HAL_Delay(i*3);
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	0013      	movs	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	189b      	adds	r3, r3, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f006 ff40 	bl	8008334 <HAL_Delay>
	#endif

}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b005      	add	sp, #20
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <flush_array>:

void flush_array(char *str, uint16_t len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	000a      	movs	r2, r1
 80014c6:	1cbb      	adds	r3, r7, #2
 80014c8:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i < len; i++)
 80014ca:	230e      	movs	r3, #14
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	2200      	movs	r2, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	e00b      	b.n	80014ec <flush_array+0x30>
	{
		str[i] = 0;
 80014d4:	210e      	movs	r1, #14
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < len; i++)
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	3201      	adds	r2, #1
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	230e      	movs	r3, #14
 80014ee:	18fa      	adds	r2, r7, r3
 80014f0:	1cbb      	adds	r3, r7, #2
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3ec      	bcc.n	80014d4 <flush_array+0x18>
	}
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b004      	add	sp, #16
 8001502:	bd80      	pop	{r7, pc}

08001504 <flush_tx_string>:

void flush_tx_string(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	flush_array((char*)tx_string, 400);
 8001508:	23c8      	movs	r3, #200	; 0xc8
 800150a:	005a      	lsls	r2, r3, #1
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <flush_tx_string+0x18>)
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ffd3 	bl	80014bc <flush_array>
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000424 	.word	0x20000424

08001520 <high_priority_tasks>:

void high_priority_tasks(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <wait_ms>:

void wait_ms(uint16_t t)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	801a      	strh	r2, [r3, #0]
	timer_ms = 0;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <wait_ms+0x34>)
 800153a:	2200      	movs	r2, #0
 800153c:	801a      	strh	r2, [r3, #0]

	while(timer_ms < t)
 800153e:	e004      	b.n	800154a <wait_ms+0x1e>
	{
		HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f006 fef7 	bl	8008334 <HAL_Delay>
		high_priority_tasks(); // HIGH PRIORITY TASKS
 8001546:	f7ff ffeb 	bl	8001520 <high_priority_tasks>
	while(timer_ms < t)
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <wait_ms+0x34>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	1dba      	adds	r2, r7, #6
 8001550:	8812      	ldrh	r2, [r2, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8f4      	bhi.n	8001540 <wait_ms+0x14>
	}
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002dc 	.word	0x200002dc

08001564 <flush_gsm_array>:

//this function clears previously stored data of gsm commands from variable array
void flush_gsm_array(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800156a:	1dbb      	adds	r3, r7, #6
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<295; i++)
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
 8001576:	e009      	b.n	800158c <flush_gsm_array+0x28>
	gsm_data[i] = 0;
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <flush_gsm_array+0x44>)
 800157e:	2100      	movs	r1, #0
 8001580:	54d1      	strb	r1, [r2, r3]
  for(i=0; i<295; i++)
 8001582:	1dbb      	adds	r3, r7, #6
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	1dbb      	adds	r3, r7, #6
 8001588:	3201      	adds	r2, #1
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	2393      	movs	r3, #147	; 0x93
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	429a      	cmp	r2, r3
 8001596:	d9ef      	bls.n	8001578 <flush_gsm_array+0x14>
  gsm_count = 0;
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <flush_gsm_array+0x48>)
 800159a:	2200      	movs	r2, #0
 800159c:	801a      	strh	r2, [r3, #0]
}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	200005b4 	.word	0x200005b4
 80015ac:	200002de 	.word	0x200002de

080015b0 <ble_initialize_gatt_client>:

_Bool ble_initialize_gatt_client(char* str)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
	if(at_cmd_send_esp("AT+BLEINIT=0\r\n\0","OK\r\n","ERROR",5,0))
 80015b8:	4a18      	ldr	r2, [pc, #96]	; (800161c <ble_initialize_gatt_client+0x6c>)
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <ble_initialize_gatt_client+0x70>)
 80015bc:	4819      	ldr	r0, [pc, #100]	; (8001624 <ble_initialize_gatt_client+0x74>)
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2305      	movs	r3, #5
 80015c4:	f000 fe5a 	bl	800227c <at_cmd_send_esp>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d022      	beq.n	8001612 <ble_initialize_gatt_client+0x62>
		if(at_cmd_send_esp("AT+BLEINIT=1\r\n\0","OK\r\n","ERROR",5,0))
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <ble_initialize_gatt_client+0x6c>)
 80015ce:	4914      	ldr	r1, [pc, #80]	; (8001620 <ble_initialize_gatt_client+0x70>)
 80015d0:	4815      	ldr	r0, [pc, #84]	; (8001628 <ble_initialize_gatt_client+0x78>)
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2305      	movs	r3, #5
 80015d8:	f000 fe50 	bl	800227c <at_cmd_send_esp>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d018      	beq.n	8001612 <ble_initialize_gatt_client+0x62>
		{
			flush_array((char*)tx_string,400);
 80015e0:	23c8      	movs	r3, #200	; 0xc8
 80015e2:	005a      	lsls	r2, r3, #1
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <ble_initialize_gatt_client+0x7c>)
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ff67 	bl	80014bc <flush_array>
			sprintf((char*)tx_string,"AT+BLENAME=\"%s\"\r\n\0", str);
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	490f      	ldr	r1, [pc, #60]	; (8001630 <ble_initialize_gatt_client+0x80>)
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <ble_initialize_gatt_client+0x7c>)
 80015f4:	0018      	movs	r0, r3
 80015f6:	f011 fe5b 	bl	80132b0 <siprintf>
			if(at_cmd_send_esp((char*)tx_string,"OK\r\n","ERROR",5,0))
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <ble_initialize_gatt_client+0x6c>)
 80015fc:	4908      	ldr	r1, [pc, #32]	; (8001620 <ble_initialize_gatt_client+0x70>)
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <ble_initialize_gatt_client+0x7c>)
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2305      	movs	r3, #5
 8001606:	f000 fe39 	bl	800227c <at_cmd_send_esp>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <ble_initialize_gatt_client+0x62>
				return 1;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <ble_initialize_gatt_client+0x64>
		}
	return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	08014b24 	.word	0x08014b24
 8001620:	08014b2c 	.word	0x08014b2c
 8001624:	08014b3c 	.word	0x08014b3c
 8001628:	08014b4c 	.word	0x08014b4c
 800162c:	20000424 	.word	0x20000424
 8001630:	08014b5c 	.word	0x08014b5c

08001634 <activate_pdp>:

_Bool activate_pdp(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af02      	add	r7, sp, #8
	if(at_cmd_send("AT+QIACT=1\r\n\0","OK\r\n","ERROR",160,0))
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <activate_pdp+0x28>)
 800163c:	4908      	ldr	r1, [pc, #32]	; (8001660 <activate_pdp+0x2c>)
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <activate_pdp+0x30>)
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	f000 fdbf 	bl	80021c8 <at_cmd_send>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <activate_pdp+0x1e>
	{
		return 1;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <activate_pdp+0x20>
	}

	return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	08014b24 	.word	0x08014b24
 8001660:	08014b2c 	.word	0x08014b2c
 8001664:	08014b70 	.word	0x08014b70

08001668 <deactivate_pdp>:

_Bool deactivate_pdp(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af02      	add	r7, sp, #8
	if(at_cmd_send("AT+QIDEACT=1\r\n\0","OK\r\n","ERROR",50,0))
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <deactivate_pdp+0x28>)
 8001670:	4908      	ldr	r1, [pc, #32]	; (8001694 <deactivate_pdp+0x2c>)
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <deactivate_pdp+0x30>)
 8001674:	2300      	movs	r3, #0
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2332      	movs	r3, #50	; 0x32
 800167a:	f000 fda5 	bl	80021c8 <at_cmd_send>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <deactivate_pdp+0x1e>
	{
		return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <deactivate_pdp+0x20>
	}

	return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	08014b24 	.word	0x08014b24
 8001694:	08014b2c 	.word	0x08014b2c
 8001698:	08014b80 	.word	0x08014b80

0800169c <esp_power_on>:


void esp_power_on(void)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af02      	add	r7, sp, #8
	if(!at_cmd_send_esp("AT\r\n\0","OK\r\n","ERROR",5,0))
 80016a2:	4a3b      	ldr	r2, [pc, #236]	; (8001790 <esp_power_on+0xf4>)
 80016a4:	493b      	ldr	r1, [pc, #236]	; (8001794 <esp_power_on+0xf8>)
 80016a6:	483c      	ldr	r0, [pc, #240]	; (8001798 <esp_power_on+0xfc>)
 80016a8:	2300      	movs	r3, #0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2305      	movs	r3, #5
 80016ae:	f000 fde5 	bl	800227c <at_cmd_send_esp>
 80016b2:	0003      	movs	r3, r0
 80016b4:	001a      	movs	r2, r3
 80016b6:	2301      	movs	r3, #1
 80016b8:	4053      	eors	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d053      	beq.n	8001768 <esp_power_on+0xcc>
	{

//	send_text_to_uart1("\r\nESP Power Pin High\r\n");
		ESP_POWER_OFF;
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <esp_power_on+0x100>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	2104      	movs	r1, #4
 80016c6:	0018      	movs	r0, r3
 80016c8:	f007 fc28 	bl	8008f1c <HAL_GPIO_WritePin>

		HAL_Delay(3000);
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <esp_power_on+0x104>)
 80016ce:	0018      	movs	r0, r3
 80016d0:	f006 fe30 	bl	8008334 <HAL_Delay>

//		send_text_to_uart1("\r\nESP EN Pin High\r\n");
		//ESP PWR ON
		ESP_DISABLED;
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <esp_power_on+0x100>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	2104      	movs	r1, #4
 80016da:	0018      	movs	r0, r3
 80016dc:	f007 fc1e 	bl	8008f1c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80016e0:	23fa      	movs	r3, #250	; 0xfa
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f006 fe25 	bl	8008334 <HAL_Delay>

//		send_text_to_uart1("\r\nESP Power Pin Low\r\n");
		ESP_POWER_ON;
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <esp_power_on+0x100>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	2104      	movs	r1, #4
 80016f0:	0018      	movs	r0, r3
 80016f2:	f007 fc13 	bl	8008f1c <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 80016f6:	23fa      	movs	r3, #250	; 0xfa
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f006 fe1a 	bl	8008334 <HAL_Delay>

		timer_cmd_esp=0;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <esp_power_on+0x108>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]
		uint16_t ret=0;
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
		flush_array((char*)rx_string_esp, 300);
 800170c:	2396      	movs	r3, #150	; 0x96
 800170e:	005a      	lsls	r2, r3, #1
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <esp_power_on+0x10c>)
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fed1 	bl	80014bc <flush_array>
		rx_esp_counter = 0;
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <esp_power_on+0x110>)
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]

		char *searchStr = {0};
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
		searchStr = "ready";
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <esp_power_on+0x114>)
 8001726:	603b      	str	r3, [r7, #0]

//		send_text_to_uart1("\r\nESP EN Pin Low\r\n");
		ESP_ENABLED;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <esp_power_on+0x100>)
 800172a:	2200      	movs	r2, #0
 800172c:	2104      	movs	r1, #4
 800172e:	0018      	movs	r0, r3
 8001730:	f007 fbf4 	bl	8008f1c <HAL_GPIO_WritePin>
//		HAL_Delay(1200);

		while(timer_cmd_esp<5)
 8001734:	e012      	b.n	800175c <esp_power_on+0xc0>
		{
			ret = getIndexOf(searchStr, strlen(searchStr), (char*)rx_string_esp, 299);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	0018      	movs	r0, r3
 800173a:	f7fe fce5 	bl	8000108 <strlen>
 800173e:	0003      	movs	r3, r0
 8001740:	b299      	uxth	r1, r3
 8001742:	1dbc      	adds	r4, r7, #6
 8001744:	232c      	movs	r3, #44	; 0x2c
 8001746:	33ff      	adds	r3, #255	; 0xff
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <esp_power_on+0x10c>)
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f001 f82c 	bl	80027a8 <getIndexOf>
 8001750:	0003      	movs	r3, r0
 8001752:	8023      	strh	r3, [r4, #0]

			if(ret > 0)
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d104      	bne.n	8001766 <esp_power_on+0xca>
		while(timer_cmd_esp<5)
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <esp_power_on+0x108>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d9e8      	bls.n	8001736 <esp_power_on+0x9a>
 8001764:	e000      	b.n	8001768 <esp_power_on+0xcc>
			{
				break;
 8001766:	46c0      	nop			; (mov r8, r8)
//		HAL_GPIO_WritePin(ESP_EN_GPIO_Port,ESP_EN_Pin,GPIO_PIN_SET);
//		HAL_Delay(3000);
	}


	at_cmd_send_esp("AT\r\n\0","OK\r\n","ERROR",5,0);
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <esp_power_on+0xf4>)
 800176a:	490a      	ldr	r1, [pc, #40]	; (8001794 <esp_power_on+0xf8>)
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <esp_power_on+0xfc>)
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2305      	movs	r3, #5
 8001774:	f000 fd82 	bl	800227c <at_cmd_send_esp>
	at_cmd_send_esp("ATE0\r\n\0","OK\r\n","ERROR",5,0);
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <esp_power_on+0xf4>)
 800177a:	4906      	ldr	r1, [pc, #24]	; (8001794 <esp_power_on+0xf8>)
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <esp_power_on+0x118>)
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2305      	movs	r3, #5
 8001784:	f000 fd7a 	bl	800227c <at_cmd_send_esp>
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b003      	add	sp, #12
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	08014b24 	.word	0x08014b24
 8001794:	08014b2c 	.word	0x08014b2c
 8001798:	08014b90 	.word	0x08014b90
 800179c:	48000400 	.word	0x48000400
 80017a0:	00000bb8 	.word	0x00000bb8
 80017a4:	200002e2 	.word	0x200002e2
 80017a8:	200002f8 	.word	0x200002f8
 80017ac:	200002e4 	.word	0x200002e4
 80017b0:	08014b98 	.word	0x08014b98
 80017b4:	08014b34 	.word	0x08014b34

080017b8 <store_runtime_parameters_to_flash>:


void store_runtime_parameters_to_flash(uint32_t sect_address)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
 80017be:	6078      	str	r0, [r7, #4]
	uint32_t loc = sect_address;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60fb      	str	r3, [r7, #12]

	flush_array((char*)stored_parameters, 100);
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <store_runtime_parameters_to_flash+0xb4>)
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fe77 	bl	80014bc <flush_array>

	sprintf((char*)stored_parameters, "#SET,%u,%u,%u,%u*\0",
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <store_runtime_parameters_to_flash+0xb8>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	001d      	movs	r5, r3
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <store_runtime_parameters_to_flash+0xbc>)
 80017d6:	681c      	ldr	r4, [r3, #0]
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <store_runtime_parameters_to_flash+0xc0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <store_runtime_parameters_to_flash+0xc4>)
 80017de:	8812      	ldrh	r2, [r2, #0]
 80017e0:	4927      	ldr	r1, [pc, #156]	; (8001880 <store_runtime_parameters_to_flash+0xc8>)
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <store_runtime_parameters_to_flash+0xb4>)
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	0023      	movs	r3, r4
 80017ea:	002a      	movs	r2, r5
 80017ec:	f011 fd60 	bl	80132b0 <siprintf>
	meter_sequence_number, mem_write_address, mem_read_address, total_downloaded_records_meter);

	///// ERASE SECTOR IN FLASH
	sFLASH_EraseSector(sect_address);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f006 fc28 	bl	8008048 <sFLASH_EraseSector>

	for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 80017f8:	230a      	movs	r3, #10
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
 8001800:	e017      	b.n	8001832 <store_runtime_parameters_to_flash+0x7a>
	{
		if(stored_settings[i]==0)
 8001802:	210a      	movs	r1, #10
 8001804:	187b      	adds	r3, r7, r1
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <store_runtime_parameters_to_flash+0xcc>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <store_runtime_parameters_to_flash+0x90>
			break;

		sFLASH_WriteByte(loc++, stored_parameters[i]);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60fa      	str	r2, [r7, #12]
 8001816:	000c      	movs	r4, r1
 8001818:	187a      	adds	r2, r7, r1
 800181a:	8812      	ldrh	r2, [r2, #0]
 800181c:	4913      	ldr	r1, [pc, #76]	; (800186c <store_runtime_parameters_to_flash+0xb4>)
 800181e:	5c8a      	ldrb	r2, [r1, r2]
 8001820:	0011      	movs	r1, r2
 8001822:	0018      	movs	r0, r3
 8001824:	f006 fc4e 	bl	80080c4 <sFLASH_WriteByte>
	for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 8001828:	193b      	adds	r3, r7, r4
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	193b      	adds	r3, r7, r4
 800182e:	3201      	adds	r2, #1
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	230a      	movs	r3, #10
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	881c      	ldrh	r4, [r3, #0]
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <store_runtime_parameters_to_flash+0xb4>)
 800183a:	0018      	movs	r0, r3
 800183c:	f7fe fc64 	bl	8000108 <strlen>
 8001840:	0003      	movs	r3, r0
 8001842:	429c      	cmp	r4, r3
 8001844:	d3dd      	bcc.n	8001802 <store_runtime_parameters_to_flash+0x4a>
 8001846:	e000      	b.n	800184a <store_runtime_parameters_to_flash+0x92>
			break;
 8001848:	46c0      	nop			; (mov r8, r8)
	}

	//// TTL
	flush_tx_string();
 800184a:	f7ff fe5b 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\n+STORED: %s\r\n\0", stored_parameters);
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <store_runtime_parameters_to_flash+0xb4>)
 8001850:	490d      	ldr	r1, [pc, #52]	; (8001888 <store_runtime_parameters_to_flash+0xd0>)
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <store_runtime_parameters_to_flash+0xd4>)
 8001854:	0018      	movs	r0, r3
 8001856:	f011 fd2b 	bl	80132b0 <siprintf>
//	send_text_to_uart2(tx_string);
	send_text_to_usb((char*)tx_string);
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <store_runtime_parameters_to_flash+0xd4>)
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff fdf9 	bl	8001454 <send_text_to_usb>

}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bdb0      	pop	{r4, r5, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20001010 	.word	0x20001010
 8001870:	200002ea 	.word	0x200002ea
 8001874:	20000064 	.word	0x20000064
 8001878:	20000068 	.word	0x20000068
 800187c:	200002ec 	.word	0x200002ec
 8001880:	08014ba0 	.word	0x08014ba0
 8001884:	20000ee4 	.word	0x20000ee4
 8001888:	08014bb4 	.word	0x08014bb4
 800188c:	20000424 	.word	0x20000424

08001890 <read_runtime_parameters_from_flash>:


_Bool read_runtime_parameters_from_flash(uint32_t sect_address)
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	46c6      	mov	lr, r8
 8001894:	b500      	push	{lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af04      	add	r7, sp, #16
 800189a:	6078      	str	r0, [r7, #4]
	uint32_t loc = sect_address;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60fb      	str	r3, [r7, #12]
	uint16_t i=0;
 80018a0:	240a      	movs	r4, #10
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]

	flush_array((char*)stored_parameters, 100);
 80018a8:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 80018aa:	2164      	movs	r1, #100	; 0x64
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fe05 	bl	80014bc <flush_array>

	for(i=0; i<100; i++)
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2200      	movs	r2, #0
 80018b6:	801a      	strh	r2, [r3, #0]
 80018b8:	e01d      	b.n	80018f6 <read_runtime_parameters_from_flash+0x66>
	{
		stored_parameters[i] = sFLASH_ReadByte1(loc++);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60fa      	str	r2, [r7, #12]
 80018c0:	250a      	movs	r5, #10
 80018c2:	197a      	adds	r2, r7, r5
 80018c4:	8814      	ldrh	r4, [r2, #0]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f006 fc28 	bl	800811c <sFLASH_ReadByte1>
 80018cc:	0003      	movs	r3, r0
 80018ce:	001a      	movs	r2, r3
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 80018d2:	551a      	strb	r2, [r3, r4]

		if(stored_parameters[i]=='*' || stored_parameters[i]==0xff)
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	2b2a      	cmp	r3, #42	; 0x2a
 80018de:	d00f      	beq.n	8001900 <read_runtime_parameters_from_flash+0x70>
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	4a63      	ldr	r2, [pc, #396]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d009      	beq.n	8001900 <read_runtime_parameters_from_flash+0x70>
	for(i=0; i<100; i++)
 80018ec:	197b      	adds	r3, r7, r5
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	3201      	adds	r2, #1
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	230a      	movs	r3, #10
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b63      	cmp	r3, #99	; 0x63
 80018fe:	d9dc      	bls.n	80018ba <read_runtime_parameters_from_flash+0x2a>
			break;
	}

	//// TTL
	flush_tx_string();
 8001900:	f7ff fe00 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\n+READ: %s\r\n\0", stored_parameters);
 8001904:	4a5b      	ldr	r2, [pc, #364]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 8001906:	495c      	ldr	r1, [pc, #368]	; (8001a78 <read_runtime_parameters_from_flash+0x1e8>)
 8001908:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 800190a:	0018      	movs	r0, r3
 800190c:	f011 fcd0 	bl	80132b0 <siprintf>
	send_text_to_uart2(tx_string);
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fd68 	bl	80013e8 <send_text_to_uart2>
	send_text_to_usb((char*)tx_string);
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fd9a 	bl	8001454 <send_text_to_usb>



	if(stored_parameters[0]=='#' && stored_parameters[i]=='*')
 8001920:	4b54      	ldr	r3, [pc, #336]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b23      	cmp	r3, #35	; 0x23
 8001926:	d000      	beq.n	800192a <read_runtime_parameters_from_flash+0x9a>
 8001928:	e09c      	b.n	8001a64 <read_runtime_parameters_from_flash+0x1d4>
 800192a:	230a      	movs	r3, #10
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	2b2a      	cmp	r3, #42	; 0x2a
 8001936:	d000      	beq.n	800193a <read_runtime_parameters_from_flash+0xaa>
 8001938:	e094      	b.n	8001a64 <read_runtime_parameters_from_flash+0x1d4>
	{
		explode_string(stored_parameters, 100, 1, ',', ',', 5, '*'); //////  meter_sequence_number
 800193a:	484e      	ldr	r0, [pc, #312]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 800193c:	232a      	movs	r3, #42	; 0x2a
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2305      	movs	r3, #5
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	232c      	movs	r3, #44	; 0x2c
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	232c      	movs	r3, #44	; 0x2c
 800194a:	2201      	movs	r2, #1
 800194c:	2164      	movs	r1, #100	; 0x64
 800194e:	f000 f933 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001952:	4b4b      	ldr	r3, [pc, #300]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <read_runtime_parameters_from_flash+0xda>
		{
			meter_sequence_number = atol((char*)temp_data);
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 800195c:	0018      	movs	r0, r3
 800195e:	f011 f9e1 	bl	8012d24 <atol>
 8001962:	0003      	movs	r3, r0
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <read_runtime_parameters_from_flash+0x1f4>)
 8001968:	801a      	strh	r2, [r3, #0]
		}


		explode_string(stored_parameters, 100, 2, ',', ',', 8, '*');//////  mem_write_address
 800196a:	4842      	ldr	r0, [pc, #264]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 800196c:	232a      	movs	r3, #42	; 0x2a
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2308      	movs	r3, #8
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	232c      	movs	r3, #44	; 0x2c
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	232c      	movs	r3, #44	; 0x2c
 800197a:	2202      	movs	r2, #2
 800197c:	2164      	movs	r1, #100	; 0x64
 800197e:	f000 f91b 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <read_runtime_parameters_from_flash+0x10a>
		{
			mem_write_address = atol((char*)temp_data);
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 800198c:	0018      	movs	r0, r3
 800198e:	f011 f9c9 	bl	8012d24 <atol>
 8001992:	0003      	movs	r3, r0
 8001994:	001a      	movs	r2, r3
 8001996:	4b3c      	ldr	r3, [pc, #240]	; (8001a88 <read_runtime_parameters_from_flash+0x1f8>)
 8001998:	601a      	str	r2, [r3, #0]
		}


		explode_string(stored_parameters, 100, 3, ',', ',', 8, '*');//////  mem_read_address
 800199a:	4836      	ldr	r0, [pc, #216]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 800199c:	232a      	movs	r3, #42	; 0x2a
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2308      	movs	r3, #8
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	232c      	movs	r3, #44	; 0x2c
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	232c      	movs	r3, #44	; 0x2c
 80019aa:	2203      	movs	r2, #3
 80019ac:	2164      	movs	r1, #100	; 0x64
 80019ae:	f000 f903 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <read_runtime_parameters_from_flash+0x13a>
		{
			mem_read_address = atol((char*)temp_data);
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f011 f9b1 	bl	8012d24 <atol>
 80019c2:	0003      	movs	r3, r0
 80019c4:	001a      	movs	r2, r3
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <read_runtime_parameters_from_flash+0x1fc>)
 80019c8:	601a      	str	r2, [r3, #0]
		}

		explode_string(stored_parameters, 100, 4, ',', ',', 5, '*');//////  total_downloaded_records_meter
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <read_runtime_parameters_from_flash+0x1e4>)
 80019cc:	232a      	movs	r3, #42	; 0x2a
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	2305      	movs	r3, #5
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	232c      	movs	r3, #44	; 0x2c
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	232c      	movs	r3, #44	; 0x2c
 80019da:	2204      	movs	r2, #4
 80019dc:	2164      	movs	r1, #100	; 0x64
 80019de:	f000 f8eb 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <read_runtime_parameters_from_flash+0x16a>
		{
			total_downloaded_records_meter = atol((char*)temp_data);
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <read_runtime_parameters_from_flash+0x1f0>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f011 f999 	bl	8012d24 <atol>
 80019f2:	0003      	movs	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <read_runtime_parameters_from_flash+0x200>)
 80019f8:	801a      	strh	r2, [r3, #0]
		}


		//// TTL
		flush_tx_string();
 80019fa:	f7ff fd83 	bl	8001504 <flush_tx_string>

		sprintf((char*)tx_string, "+PARSED: LSN:%u\nWA:%u  Rem:%u\nRA:%u  Rem:%u\nTDRM:%u\r\n\r\n\0",
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <read_runtime_parameters_from_flash+0x1f4>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4698      	mov	r8, r3
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <read_runtime_parameters_from_flash+0x1f8>)
 8001a06:	681d      	ldr	r5, [r3, #0]
			meter_sequence_number, mem_write_address,(mem_write_address-LOGS_START_ADDRESS)%17, mem_read_address, (mem_read_address-LOGS_START_ADDRESS)%17, total_downloaded_records_meter);
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <read_runtime_parameters_from_flash+0x1f8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <read_runtime_parameters_from_flash+0x204>)
 8001a0e:	4694      	mov	ip, r2
 8001a10:	4463      	add	r3, ip
		sprintf((char*)tx_string, "+PARSED: LSN:%u\nWA:%u  Rem:%u\nRA:%u  Rem:%u\nTDRM:%u\r\n\r\n\0",
 8001a12:	2111      	movs	r1, #17
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe fc19 	bl	800024c <__aeabi_uidivmod>
 8001a1a:	000b      	movs	r3, r1
 8001a1c:	001e      	movs	r6, r3
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <read_runtime_parameters_from_flash+0x1fc>)
 8001a20:	681c      	ldr	r4, [r3, #0]
			meter_sequence_number, mem_write_address,(mem_write_address-LOGS_START_ADDRESS)%17, mem_read_address, (mem_read_address-LOGS_START_ADDRESS)%17, total_downloaded_records_meter);
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <read_runtime_parameters_from_flash+0x1fc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <read_runtime_parameters_from_flash+0x204>)
 8001a28:	4694      	mov	ip, r2
 8001a2a:	4463      	add	r3, ip
		sprintf((char*)tx_string, "+PARSED: LSN:%u\nWA:%u  Rem:%u\nRA:%u  Rem:%u\nTDRM:%u\r\n\r\n\0",
 8001a2c:	2111      	movs	r1, #17
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fc0c 	bl	800024c <__aeabi_uidivmod>
 8001a34:	000b      	movs	r3, r1
 8001a36:	001a      	movs	r2, r3
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <read_runtime_parameters_from_flash+0x200>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	4916      	ldr	r1, [pc, #88]	; (8001a98 <read_runtime_parameters_from_flash+0x208>)
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	9401      	str	r4, [sp, #4]
 8001a46:	9600      	str	r6, [sp, #0]
 8001a48:	002b      	movs	r3, r5
 8001a4a:	4642      	mov	r2, r8
 8001a4c:	f011 fc30 	bl	80132b0 <siprintf>

		send_text_to_uart2(tx_string);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff fcc8 	bl	80013e8 <send_text_to_uart2>
		send_text_to_usb((char*)tx_string);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <read_runtime_parameters_from_flash+0x1ec>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fcfa 	bl	8001454 <send_text_to_usb>

		return 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <read_runtime_parameters_from_flash+0x1d6>
	}

	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	46b8      	mov	r8, r7
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	20001010 	.word	0x20001010
 8001a78:	08014bc8 	.word	0x08014bc8
 8001a7c:	20000424 	.word	0x20000424
 8001a80:	200009fc 	.word	0x200009fc
 8001a84:	200002ea 	.word	0x200002ea
 8001a88:	20000064 	.word	0x20000064
 8001a8c:	20000068 	.word	0x20000068
 8001a90:	200002ec 	.word	0x200002ec
 8001a94:	ffffb000 	.word	0xffffb000
 8001a98:	08014bd8 	.word	0x08014bd8

08001a9c <store_settings_to_flash>:


void store_settings_to_flash(uint32_t sect_address)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b091      	sub	sp, #68	; 0x44
 8001aa0:	af0c      	add	r7, sp, #48	; 0x30
 8001aa2:	6078      	str	r0, [r7, #4]
	uint32_t loc = sect_address;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]

	flush_array((char*)stored_settings, 300);
 8001aa8:	2396      	movs	r3, #150	; 0x96
 8001aaa:	005a      	lsls	r2, r3, #1
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fd03 	bl	80014bc <flush_array>

	sprintf((char*)stored_settings, "#SET,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s*\0",
 8001ab6:	4c30      	ldr	r4, [pc, #192]	; (8001b78 <store_settings_to_flash+0xdc>)
 8001ab8:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <store_settings_to_flash+0xe0>)
 8001aba:	4931      	ldr	r1, [pc, #196]	; (8001b80 <store_settings_to_flash+0xe4>)
 8001abc:	482d      	ldr	r0, [pc, #180]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <store_settings_to_flash+0xe8>)
 8001ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <store_settings_to_flash+0xec>)
 8001ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <store_settings_to_flash+0xf0>)
 8001ac8:	9308      	str	r3, [sp, #32]
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <store_settings_to_flash+0xf4>)
 8001acc:	9307      	str	r3, [sp, #28]
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <store_settings_to_flash+0xf8>)
 8001ad0:	9306      	str	r3, [sp, #24]
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <store_settings_to_flash+0xfc>)
 8001ad4:	9305      	str	r3, [sp, #20]
 8001ad6:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <store_settings_to_flash+0x100>)
 8001ad8:	9304      	str	r3, [sp, #16]
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <store_settings_to_flash+0x104>)
 8001adc:	9303      	str	r3, [sp, #12]
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <store_settings_to_flash+0x108>)
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <store_settings_to_flash+0x10c>)
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <store_settings_to_flash+0x110>)
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	0023      	movs	r3, r4
 8001aec:	f011 fbe0 	bl	80132b0 <siprintf>
	apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password,
	mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id);

	///// ERASE SECTOR IN FLASH
	sFLASH_EraseSector(sect_address);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f006 faa8 	bl	8008048 <sFLASH_EraseSector>

	for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 8001af8:	230a      	movs	r3, #10
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2200      	movs	r2, #0
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	e017      	b.n	8001b32 <store_settings_to_flash+0x96>
	{
		if(stored_settings[i]==0)
 8001b02:	210a      	movs	r1, #10
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01b      	beq.n	8001b48 <store_settings_to_flash+0xac>
			break;

		sFLASH_WriteByte(loc++, stored_settings[i]);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60fa      	str	r2, [r7, #12]
 8001b16:	000c      	movs	r4, r1
 8001b18:	187a      	adds	r2, r7, r1
 8001b1a:	8812      	ldrh	r2, [r2, #0]
 8001b1c:	4915      	ldr	r1, [pc, #84]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001b1e:	5c8a      	ldrb	r2, [r1, r2]
 8001b20:	0011      	movs	r1, r2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f006 face 	bl	80080c4 <sFLASH_WriteByte>
	for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	3201      	adds	r2, #1
 8001b30:	801a      	strh	r2, [r3, #0]
 8001b32:	230a      	movs	r3, #10
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	881c      	ldrh	r4, [r3, #0]
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fae4 	bl	8000108 <strlen>
 8001b40:	0003      	movs	r3, r0
 8001b42:	429c      	cmp	r4, r3
 8001b44:	d3dd      	bcc.n	8001b02 <store_settings_to_flash+0x66>
 8001b46:	e000      	b.n	8001b4a <store_settings_to_flash+0xae>
			break;
 8001b48:	46c0      	nop			; (mov r8, r8)
	}

	//// TTL
	flush_tx_string();
 8001b4a:	f7ff fcdb 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\n+STORED: %s\r\n\0", stored_settings);
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <store_settings_to_flash+0xd8>)
 8001b50:	4917      	ldr	r1, [pc, #92]	; (8001bb0 <store_settings_to_flash+0x114>)
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <store_settings_to_flash+0x118>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f011 fbab 	bl	80132b0 <siprintf>
	send_text_to_uart2(tx_string);
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <store_settings_to_flash+0x118>)
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fc43 	bl	80013e8 <send_text_to_uart2>
	send_text_to_usb((char*)tx_string);
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <store_settings_to_flash+0x118>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff fc75 	bl	8001454 <send_text_to_usb>

}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b005      	add	sp, #20
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	20000ee4 	.word	0x20000ee4
 8001b78:	20000038 	.word	0x20000038
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	08014c14 	.word	0x08014c14
 8001b84:	20000028 	.word	0x20000028
 8001b88:	20000044 	.word	0x20000044
 8001b8c:	20000d9c 	.word	0x20000d9c
 8001b90:	20000d38 	.word	0x20000d38
 8001b94:	20000cd4 	.word	0x20000cd4
 8001b98:	20000c70 	.word	0x20000c70
 8001b9c:	20000c0c 	.word	0x20000c0c
 8001ba0:	20000bd8 	.word	0x20000bd8
 8001ba4:	20000b74 	.word	0x20000b74
 8001ba8:	20000b6c 	.word	0x20000b6c
 8001bac:	20000b08 	.word	0x20000b08
 8001bb0:	08014bb4 	.word	0x08014bb4
 8001bb4:	20000424 	.word	0x20000424

08001bb8 <explode_string>:
//*************************************************************
// FUNCTION CAPTURE DATA FIELDS FROM A COMMA SEPERATED STRING
// STRING END CHAR *    STRING SEPERATOR ,
//*************************************************************
void explode_string(unsigned char* buffer, uint16_t buffer_len, uint8_t sequence_number, uint8_t separator, uint8_t end_char_field, uint16_t field_len, uint8_t end_char_string)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	000c      	movs	r4, r1
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	1cbb      	adds	r3, r7, #2
 8001bc8:	1c22      	adds	r2, r4, #0
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	1c7b      	adds	r3, r7, #1
 8001bce:	1c02      	adds	r2, r0, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	003b      	movs	r3, r7
 8001bd4:	1c0a      	adds	r2, r1, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
	uint8_t comma_count=0;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
	uint16_t i=0, j=0;
 8001be0:	240c      	movs	r4, #12
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2200      	movs	r2, #0
 8001be6:	801a      	strh	r2, [r3, #0]
 8001be8:	230a      	movs	r3, #10
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2200      	movs	r2, #0
 8001bee:	801a      	strh	r2, [r3, #0]

	flush_array((char*)temp_data,255);
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <explode_string+0x140>)
 8001bf2:	21ff      	movs	r1, #255	; 0xff
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff fc61 	bl	80014bc <flush_array>

	for(i=0; i< buffer_len; i++)
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]
 8001c00:	e069      	b.n	8001cd6 <explode_string+0x11e>
	{
		if(buffer[i]==separator)
 8001c02:	230c      	movs	r3, #12
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	003a      	movs	r2, r7
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d105      	bne.n	8001c22 <explode_string+0x6a>
			comma_count++;
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	3201      	adds	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]

		if(buffer[i]==end_char_string)
 8001c22:	230c      	movs	r3, #12
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2228      	movs	r2, #40	; 0x28
 8001c30:	18ba      	adds	r2, r7, r2
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d057      	beq.n	8001ce8 <explode_string+0x130>
			break;

		if(comma_count==sequence_number)//// if sequence found. Note: sequence number of data fields starts from 0
 8001c38:	230f      	movs	r3, #15
 8001c3a:	18fa      	adds	r2, r7, r3
 8001c3c:	1c7b      	adds	r3, r7, #1
 8001c3e:	7812      	ldrb	r2, [r2, #0]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d141      	bne.n	8001cca <explode_string+0x112>
		{
			for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 8001c46:	230a      	movs	r3, #10
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	e033      	b.n	8001cb8 <explode_string+0x100>
			{
				if(buffer[i+1+j]==end_char_field || buffer[i+1+j]==end_char_string)/// stop copy when , or * reached
 8001c50:	200c      	movs	r0, #12
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	210a      	movs	r1, #10
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	18d3      	adds	r3, r2, r3
 8001c60:	001a      	movs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	189b      	adds	r3, r3, r2
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	2320      	movs	r3, #32
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d03c      	beq.n	8001cec <explode_string+0x134>
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	187b      	adds	r3, r7, r1
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	18d3      	adds	r3, r2, r3
 8001c7e:	001a      	movs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2228      	movs	r2, #40	; 0x28
 8001c88:	18ba      	adds	r2, r7, r2
 8001c8a:	7812      	ldrb	r2, [r2, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d02d      	beq.n	8001cec <explode_string+0x134>
					break;

				temp_data[j] = buffer[i+1+j];/////i+1+j  because already , at index i
 8001c90:	183b      	adds	r3, r7, r0
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	189a      	adds	r2, r3, r2
 8001ca2:	0008      	movs	r0, r1
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	7811      	ldrb	r1, [r2, #0]
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <explode_string+0x140>)
 8001cac:	54d1      	strb	r1, [r2, r3]
			for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	183b      	adds	r3, r7, r0
 8001cb4:	3201      	adds	r2, #1
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	230a      	movs	r3, #10
 8001cba:	18fa      	adds	r2, r7, r3
 8001cbc:	2324      	movs	r3, #36	; 0x24
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3c3      	bcc.n	8001c50 <explode_string+0x98>
			}

			break;
 8001cc8:	e010      	b.n	8001cec <explode_string+0x134>
	for(i=0; i< buffer_len; i++)
 8001cca:	210c      	movs	r1, #12
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	881a      	ldrh	r2, [r3, #0]
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	3201      	adds	r2, #1
 8001cd4:	801a      	strh	r2, [r3, #0]
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	18fa      	adds	r2, r7, r3
 8001cda:	1cbb      	adds	r3, r7, #2
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d200      	bcs.n	8001ce6 <explode_string+0x12e>
 8001ce4:	e78d      	b.n	8001c02 <explode_string+0x4a>
		}
	}
}
 8001ce6:	e002      	b.n	8001cee <explode_string+0x136>
			break;
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	e000      	b.n	8001cee <explode_string+0x136>
			break;
 8001cec:	46c0      	nop			; (mov r8, r8)
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b005      	add	sp, #20
 8001cf4:	bd90      	pop	{r4, r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	200009fc 	.word	0x200009fc

08001cfc <read_settings_from_flash>:


_Bool read_settings_from_flash(uint32_t sect_address)
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af0c      	add	r7, sp, #48	; 0x30
 8001d02:	6078      	str	r0, [r7, #4]
	uint32_t loc = sect_address;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60fb      	str	r3, [r7, #12]
	uint16_t i=0;
 8001d08:	240a      	movs	r4, #10
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]

	flush_array((char*)stored_settings, 300);
 8001d10:	2396      	movs	r3, #150	; 0x96
 8001d12:	005a      	lsls	r2, r3, #1
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <read_settings_from_flash+0x2c>)
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fbcf 	bl	80014bc <flush_array>

	for(i=0; i<300; i++)
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2200      	movs	r2, #0
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e020      	b.n	8001d68 <read_settings_from_flash+0x6c>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000ee4 	.word	0x20000ee4
	{
		stored_settings[i] = sFLASH_ReadByte1(loc++);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60fa      	str	r2, [r7, #12]
 8001d32:	250a      	movs	r5, #10
 8001d34:	197a      	adds	r2, r7, r5
 8001d36:	8814      	ldrh	r4, [r2, #0]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f006 f9ef 	bl	800811c <sFLASH_ReadByte1>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	001a      	movs	r2, r3
 8001d42:	4be6      	ldr	r3, [pc, #920]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001d44:	551a      	strb	r2, [r3, r4]

		if(stored_settings[i]=='*' || stored_settings[i]==0xff)
 8001d46:	197b      	adds	r3, r7, r5
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	4ae4      	ldr	r2, [pc, #912]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d50:	d011      	beq.n	8001d76 <read_settings_from_flash+0x7a>
 8001d52:	197b      	adds	r3, r7, r5
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4ae1      	ldr	r2, [pc, #900]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d00b      	beq.n	8001d76 <read_settings_from_flash+0x7a>
	for(i=0; i<300; i++)
 8001d5e:	197b      	adds	r3, r7, r5
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	197b      	adds	r3, r7, r5
 8001d64:	3201      	adds	r2, #1
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	230a      	movs	r3, #10
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	2396      	movs	r3, #150	; 0x96
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3da      	bcc.n	8001d2c <read_settings_from_flash+0x30>
			break;
	}

	//// TTL
	flush_tx_string();
 8001d76:	f7ff fbc5 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\n+READ: %s\r\n\0", stored_settings);
 8001d7a:	4ad8      	ldr	r2, [pc, #864]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001d7c:	49d8      	ldr	r1, [pc, #864]	; (80020e0 <read_settings_from_flash+0x3e4>)
 8001d7e:	4bd9      	ldr	r3, [pc, #868]	; (80020e4 <read_settings_from_flash+0x3e8>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f011 fa95 	bl	80132b0 <siprintf>
	send_text_to_uart2(tx_string);
 8001d86:	4bd7      	ldr	r3, [pc, #860]	; (80020e4 <read_settings_from_flash+0x3e8>)
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fb2d 	bl	80013e8 <send_text_to_uart2>
	send_text_to_usb((char*)tx_string);
 8001d8e:	4bd5      	ldr	r3, [pc, #852]	; (80020e4 <read_settings_from_flash+0x3e8>)
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff fb5f 	bl	8001454 <send_text_to_usb>



	if(stored_settings[0]=='#' && stored_settings[i]=='*')
 8001d96:	4bd1      	ldr	r3, [pc, #836]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b23      	cmp	r3, #35	; 0x23
 8001d9c:	d000      	beq.n	8001da0 <read_settings_from_flash+0xa4>
 8001d9e:	e1c3      	b.n	8002128 <read_settings_from_flash+0x42c>
 8001da0:	230a      	movs	r3, #10
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	4acd      	ldr	r2, [pc, #820]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	2b2a      	cmp	r3, #42	; 0x2a
 8001dac:	d000      	beq.n	8001db0 <read_settings_from_flash+0xb4>
 8001dae:	e1bb      	b.n	8002128 <read_settings_from_flash+0x42c>
	{
		explode_string(stored_settings, 300, 1, ',', ',', 40, '*');//////  APN
 8001db0:	2396      	movs	r3, #150	; 0x96
 8001db2:	0059      	lsls	r1, r3, #1
 8001db4:	48c9      	ldr	r0, [pc, #804]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001db6:	232a      	movs	r3, #42	; 0x2a
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2328      	movs	r3, #40	; 0x28
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	232c      	movs	r3, #44	; 0x2c
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	232c      	movs	r3, #44	; 0x2c
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f7ff fef7 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001dca:	4bc7      	ldr	r3, [pc, #796]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <read_settings_from_flash+0xec>
		{
			flush_array((char*)apn, 40);
 8001dd2:	4bc6      	ldr	r3, [pc, #792]	; (80020ec <read_settings_from_flash+0x3f0>)
 8001dd4:	2128      	movs	r1, #40	; 0x28
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7ff fb70 	bl	80014bc <flush_array>
			sprintf((char*)apn, "%s", temp_data);
 8001ddc:	4ac2      	ldr	r2, [pc, #776]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001dde:	49c4      	ldr	r1, [pc, #784]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001de0:	4bc2      	ldr	r3, [pc, #776]	; (80020ec <read_settings_from_flash+0x3f0>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f011 fa64 	bl	80132b0 <siprintf>
		}


		explode_string(stored_settings, 300, 2, ',', ',', 10, '*');//////  Configuration Version
 8001de8:	2396      	movs	r3, #150	; 0x96
 8001dea:	0059      	lsls	r1, r3, #1
 8001dec:	48bb      	ldr	r0, [pc, #748]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001dee:	232a      	movs	r3, #42	; 0x2a
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	230a      	movs	r3, #10
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	232c      	movs	r3, #44	; 0x2c
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	232c      	movs	r3, #44	; 0x2c
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f7ff fedb 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001e02:	4bb9      	ldr	r3, [pc, #740]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <read_settings_from_flash+0x124>
		{
			flush_array((char*)configuration_version, 10);
 8001e0a:	4bba      	ldr	r3, [pc, #744]	; (80020f4 <read_settings_from_flash+0x3f8>)
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff fb54 	bl	80014bc <flush_array>
			sprintf((char*)configuration_version, "%s", temp_data);
 8001e14:	4ab4      	ldr	r2, [pc, #720]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e16:	49b6      	ldr	r1, [pc, #728]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001e18:	4bb6      	ldr	r3, [pc, #728]	; (80020f4 <read_settings_from_flash+0x3f8>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f011 fa48 	bl	80132b0 <siprintf>
		}


		explode_string(stored_settings, 300, 3, ',', ',', 100, '*');//////  mqtt_server
 8001e20:	2396      	movs	r3, #150	; 0x96
 8001e22:	0059      	lsls	r1, r3, #1
 8001e24:	48ad      	ldr	r0, [pc, #692]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001e26:	232a      	movs	r3, #42	; 0x2a
 8001e28:	9302      	str	r3, [sp, #8]
 8001e2a:	2364      	movs	r3, #100	; 0x64
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	232c      	movs	r3, #44	; 0x2c
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	232c      	movs	r3, #44	; 0x2c
 8001e34:	2203      	movs	r2, #3
 8001e36:	f7ff febf 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001e3a:	4bab      	ldr	r3, [pc, #684]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <read_settings_from_flash+0x15c>
		{
			flush_array((char*)mqtt_server, 100);
 8001e42:	4bad      	ldr	r3, [pc, #692]	; (80020f8 <read_settings_from_flash+0x3fc>)
 8001e44:	2164      	movs	r1, #100	; 0x64
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff fb38 	bl	80014bc <flush_array>
			sprintf((char*)mqtt_server, "%s", temp_data);
 8001e4c:	4aa6      	ldr	r2, [pc, #664]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e4e:	49a8      	ldr	r1, [pc, #672]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001e50:	4ba9      	ldr	r3, [pc, #676]	; (80020f8 <read_settings_from_flash+0x3fc>)
 8001e52:	0018      	movs	r0, r3
 8001e54:	f011 fa2c 	bl	80132b0 <siprintf>
		}


		explode_string(stored_settings, 300, 4, ',', ',', 7, '*');//////  mqtt_port
 8001e58:	2396      	movs	r3, #150	; 0x96
 8001e5a:	0059      	lsls	r1, r3, #1
 8001e5c:	489f      	ldr	r0, [pc, #636]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001e5e:	232a      	movs	r3, #42	; 0x2a
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	2307      	movs	r3, #7
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	232c      	movs	r3, #44	; 0x2c
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	232c      	movs	r3, #44	; 0x2c
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	f7ff fea3 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001e72:	4b9d      	ldr	r3, [pc, #628]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <read_settings_from_flash+0x194>
		{
			flush_array((char*)mqtt_port, 7);
 8001e7a:	4ba0      	ldr	r3, [pc, #640]	; (80020fc <read_settings_from_flash+0x400>)
 8001e7c:	2107      	movs	r1, #7
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fb1c 	bl	80014bc <flush_array>
			sprintf((char*)mqtt_port, "%s", temp_data);
 8001e84:	4a98      	ldr	r2, [pc, #608]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001e86:	499a      	ldr	r1, [pc, #616]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <read_settings_from_flash+0x400>)
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f011 fa10 	bl	80132b0 <siprintf>
		}


		explode_string(stored_settings, 300, 5, ',', ',', 100, '*');//////  mqtt_username
 8001e90:	2396      	movs	r3, #150	; 0x96
 8001e92:	0059      	lsls	r1, r3, #1
 8001e94:	4891      	ldr	r0, [pc, #580]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001e96:	232a      	movs	r3, #42	; 0x2a
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	232c      	movs	r3, #44	; 0x2c
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	232c      	movs	r3, #44	; 0x2c
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f7ff fe87 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001eaa:	4b8f      	ldr	r3, [pc, #572]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <read_settings_from_flash+0x1cc>
		{
			flush_array((char*)mqtt_username, 100);
 8001eb2:	4b93      	ldr	r3, [pc, #588]	; (8002100 <read_settings_from_flash+0x404>)
 8001eb4:	2164      	movs	r1, #100	; 0x64
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff fb00 	bl	80014bc <flush_array>
			sprintf((char*)mqtt_username, "%s", temp_data);
 8001ebc:	4a8a      	ldr	r2, [pc, #552]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001ebe:	498c      	ldr	r1, [pc, #560]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <read_settings_from_flash+0x404>)
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f011 f9f4 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 6, ',', ',', 50, '*');//////  mqtt_password
 8001ec8:	2396      	movs	r3, #150	; 0x96
 8001eca:	0059      	lsls	r1, r3, #1
 8001ecc:	4883      	ldr	r0, [pc, #524]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001ece:	232a      	movs	r3, #42	; 0x2a
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	2332      	movs	r3, #50	; 0x32
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	232c      	movs	r3, #44	; 0x2c
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	232c      	movs	r3, #44	; 0x2c
 8001edc:	2206      	movs	r2, #6
 8001ede:	f7ff fe6b 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <read_settings_from_flash+0x204>
		{
			flush_array((char*)mqtt_password, 50);
 8001eea:	4b86      	ldr	r3, [pc, #536]	; (8002104 <read_settings_from_flash+0x408>)
 8001eec:	2132      	movs	r1, #50	; 0x32
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff fae4 	bl	80014bc <flush_array>
			sprintf((char*)mqtt_password, "%s", temp_data);
 8001ef4:	4a7c      	ldr	r2, [pc, #496]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001ef6:	497e      	ldr	r1, [pc, #504]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001ef8:	4b82      	ldr	r3, [pc, #520]	; (8002104 <read_settings_from_flash+0x408>)
 8001efa:	0018      	movs	r0, r3
 8001efc:	f011 f9d8 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 7, ',', ',', 100, '*');//////  mqtt_client_id
 8001f00:	2396      	movs	r3, #150	; 0x96
 8001f02:	0059      	lsls	r1, r3, #1
 8001f04:	4875      	ldr	r0, [pc, #468]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001f06:	232a      	movs	r3, #42	; 0x2a
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	2364      	movs	r3, #100	; 0x64
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	232c      	movs	r3, #44	; 0x2c
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	232c      	movs	r3, #44	; 0x2c
 8001f14:	2207      	movs	r2, #7
 8001f16:	f7ff fe4f 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <read_settings_from_flash+0x23c>
		{
			flush_array((char*)mqtt_client_id, 100);
 8001f22:	4b79      	ldr	r3, [pc, #484]	; (8002108 <read_settings_from_flash+0x40c>)
 8001f24:	2164      	movs	r1, #100	; 0x64
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff fac8 	bl	80014bc <flush_array>
			sprintf((char*)mqtt_client_id, "%s", temp_data);
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f2e:	4970      	ldr	r1, [pc, #448]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001f30:	4b75      	ldr	r3, [pc, #468]	; (8002108 <read_settings_from_flash+0x40c>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f011 f9bc 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 8, ',', ',', 100, '*');//////  twin_sb
 8001f38:	2396      	movs	r3, #150	; 0x96
 8001f3a:	0059      	lsls	r1, r3, #1
 8001f3c:	4867      	ldr	r0, [pc, #412]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001f3e:	232a      	movs	r3, #42	; 0x2a
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	2364      	movs	r3, #100	; 0x64
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	232c      	movs	r3, #44	; 0x2c
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	232c      	movs	r3, #44	; 0x2c
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	f7ff fe33 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001f52:	4b65      	ldr	r3, [pc, #404]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <read_settings_from_flash+0x274>
		{
			flush_array((char*)twin_sb, 100);
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <read_settings_from_flash+0x410>)
 8001f5c:	2164      	movs	r1, #100	; 0x64
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff faac 	bl	80014bc <flush_array>
			sprintf((char*)twin_sb, "%s", temp_data);
 8001f64:	4a60      	ldr	r2, [pc, #384]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f66:	4962      	ldr	r1, [pc, #392]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001f68:	4b68      	ldr	r3, [pc, #416]	; (800210c <read_settings_from_flash+0x410>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f011 f9a0 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 9, ',', ',', 100, '*');//////  twin_pb
 8001f70:	2396      	movs	r3, #150	; 0x96
 8001f72:	0059      	lsls	r1, r3, #1
 8001f74:	4859      	ldr	r0, [pc, #356]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001f76:	232a      	movs	r3, #42	; 0x2a
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	2364      	movs	r3, #100	; 0x64
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	232c      	movs	r3, #44	; 0x2c
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	232c      	movs	r3, #44	; 0x2c
 8001f84:	2209      	movs	r2, #9
 8001f86:	f7ff fe17 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <read_settings_from_flash+0x2ac>
		{
			flush_array((char*)twin_pb, 100);
 8001f92:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <read_settings_from_flash+0x414>)
 8001f94:	2164      	movs	r1, #100	; 0x64
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff fa90 	bl	80014bc <flush_array>
			sprintf((char*)twin_pb, "%s", temp_data);
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001f9e:	4954      	ldr	r1, [pc, #336]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001fa0:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <read_settings_from_flash+0x414>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f011 f984 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 10, ',', ',', 100, '*');//////  twin_rp
 8001fa8:	2396      	movs	r3, #150	; 0x96
 8001faa:	0059      	lsls	r1, r3, #1
 8001fac:	484b      	ldr	r0, [pc, #300]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001fae:	232a      	movs	r3, #42	; 0x2a
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	2364      	movs	r3, #100	; 0x64
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	232c      	movs	r3, #44	; 0x2c
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	232c      	movs	r3, #44	; 0x2c
 8001fbc:	220a      	movs	r2, #10
 8001fbe:	f7ff fdfb 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001fc2:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <read_settings_from_flash+0x2e4>
		{
			flush_array((char*)twin_rp, 100);
 8001fca:	4b52      	ldr	r3, [pc, #328]	; (8002114 <read_settings_from_flash+0x418>)
 8001fcc:	2164      	movs	r1, #100	; 0x64
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fa74 	bl	80014bc <flush_array>
			sprintf((char*)twin_rp, "%s", temp_data);
 8001fd4:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001fd6:	4946      	ldr	r1, [pc, #280]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <read_settings_from_flash+0x418>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f011 f968 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 11, ',', ',', 100, '*');//////  read_pb
 8001fe0:	2396      	movs	r3, #150	; 0x96
 8001fe2:	0059      	lsls	r1, r3, #1
 8001fe4:	483d      	ldr	r0, [pc, #244]	; (80020dc <read_settings_from_flash+0x3e0>)
 8001fe6:	232a      	movs	r3, #42	; 0x2a
 8001fe8:	9302      	str	r3, [sp, #8]
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	232c      	movs	r3, #44	; 0x2c
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	232c      	movs	r3, #44	; 0x2c
 8001ff4:	220b      	movs	r2, #11
 8001ff6:	f7ff fddf 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <read_settings_from_flash+0x31c>
		{
			flush_array((char*)read_pb, 100);
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <read_settings_from_flash+0x41c>)
 8002004:	2164      	movs	r1, #100	; 0x64
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fa58 	bl	80014bc <flush_array>
			sprintf((char*)read_pb, "%s", temp_data);
 800200c:	4a36      	ldr	r2, [pc, #216]	; (80020e8 <read_settings_from_flash+0x3ec>)
 800200e:	4938      	ldr	r1, [pc, #224]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <read_settings_from_flash+0x41c>)
 8002012:	0018      	movs	r0, r3
 8002014:	f011 f94c 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 12, ',', ',', 5, '*');//////  protocol_version
 8002018:	2396      	movs	r3, #150	; 0x96
 800201a:	0059      	lsls	r1, r3, #1
 800201c:	482f      	ldr	r0, [pc, #188]	; (80020dc <read_settings_from_flash+0x3e0>)
 800201e:	232a      	movs	r3, #42	; 0x2a
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2305      	movs	r3, #5
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	232c      	movs	r3, #44	; 0x2c
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	232c      	movs	r3, #44	; 0x2c
 800202c:	220c      	movs	r2, #12
 800202e:	f7ff fdc3 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <read_settings_from_flash+0x354>
		{
			flush_array((char*)protocol_version, 5);
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <read_settings_from_flash+0x420>)
 800203c:	2105      	movs	r1, #5
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff fa3c 	bl	80014bc <flush_array>
			sprintf((char*)protocol_version, "%s", temp_data);
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <read_settings_from_flash+0x3ec>)
 8002046:	492a      	ldr	r1, [pc, #168]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <read_settings_from_flash+0x420>)
 800204a:	0018      	movs	r0, r3
 800204c:	f011 f930 	bl	80132b0 <siprintf>
		}

		explode_string(stored_settings, 300, 13, ',', ',', 12, '*');//////  device_id
 8002050:	2396      	movs	r3, #150	; 0x96
 8002052:	0059      	lsls	r1, r3, #1
 8002054:	4821      	ldr	r0, [pc, #132]	; (80020dc <read_settings_from_flash+0x3e0>)
 8002056:	232a      	movs	r3, #42	; 0x2a
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	230c      	movs	r3, #12
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	232c      	movs	r3, #44	; 0x2c
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	232c      	movs	r3, #44	; 0x2c
 8002064:	220d      	movs	r2, #13
 8002066:	f7ff fda7 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <read_settings_from_flash+0x3ec>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <read_settings_from_flash+0x38c>
		{
			flush_array((char*)device_id, 12);
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <read_settings_from_flash+0x424>)
 8002074:	210c      	movs	r1, #12
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff fa20 	bl	80014bc <flush_array>
			sprintf((char*)device_id, "%s", temp_data);
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <read_settings_from_flash+0x3ec>)
 800207e:	491c      	ldr	r1, [pc, #112]	; (80020f0 <read_settings_from_flash+0x3f4>)
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <read_settings_from_flash+0x424>)
 8002082:	0018      	movs	r0, r3
 8002084:	f011 f914 	bl	80132b0 <siprintf>
		}

		//// TTL
		flush_tx_string();
 8002088:	f7ff fa3c 	bl	8001504 <flush_tx_string>

		sprintf((char*)tx_string, "\r\n+PARSED: APN:%s\nCV:%s\nSERVER:%s\nPORT:%s\nUSER:%s\nPASWD:%s\nCLIENT:%s\nTWIN_SB:%s\nTWIN_PB:%s\nTWIN_RP:%s\nREAD_PB:%s\nPV:%s\nDEVICE_ID:%s\r\n\0",
 800208c:	4c19      	ldr	r4, [pc, #100]	; (80020f4 <read_settings_from_flash+0x3f8>)
 800208e:	4a17      	ldr	r2, [pc, #92]	; (80020ec <read_settings_from_flash+0x3f0>)
 8002090:	4924      	ldr	r1, [pc, #144]	; (8002124 <read_settings_from_flash+0x428>)
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <read_settings_from_flash+0x3e8>)
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <read_settings_from_flash+0x424>)
 8002096:	930a      	str	r3, [sp, #40]	; 0x28
 8002098:	4b20      	ldr	r3, [pc, #128]	; (800211c <read_settings_from_flash+0x420>)
 800209a:	9309      	str	r3, [sp, #36]	; 0x24
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <read_settings_from_flash+0x41c>)
 800209e:	9308      	str	r3, [sp, #32]
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <read_settings_from_flash+0x418>)
 80020a2:	9307      	str	r3, [sp, #28]
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <read_settings_from_flash+0x414>)
 80020a6:	9306      	str	r3, [sp, #24]
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <read_settings_from_flash+0x410>)
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <read_settings_from_flash+0x40c>)
 80020ae:	9304      	str	r3, [sp, #16]
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <read_settings_from_flash+0x408>)
 80020b2:	9303      	str	r3, [sp, #12]
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <read_settings_from_flash+0x404>)
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	4b10      	ldr	r3, [pc, #64]	; (80020fc <read_settings_from_flash+0x400>)
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <read_settings_from_flash+0x3fc>)
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	0023      	movs	r3, r4
 80020c2:	f011 f8f5 	bl	80132b0 <siprintf>
	apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password,
	mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id);

		send_text_to_uart2(tx_string);
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <read_settings_from_flash+0x3e8>)
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff f98d 	bl	80013e8 <send_text_to_uart2>
		send_text_to_usb((char*)tx_string);
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <read_settings_from_flash+0x3e8>)
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff f9bf 	bl	8001454 <send_text_to_usb>

		return 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e027      	b.n	800212a <read_settings_from_flash+0x42e>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	20000ee4 	.word	0x20000ee4
 80020e0:	08014bc8 	.word	0x08014bc8
 80020e4:	20000424 	.word	0x20000424
 80020e8:	200009fc 	.word	0x200009fc
 80020ec:	20000000 	.word	0x20000000
 80020f0:	08014c44 	.word	0x08014c44
 80020f4:	20000038 	.word	0x20000038
 80020f8:	20000b08 	.word	0x20000b08
 80020fc:	20000b6c 	.word	0x20000b6c
 8002100:	20000b74 	.word	0x20000b74
 8002104:	20000bd8 	.word	0x20000bd8
 8002108:	20000c0c 	.word	0x20000c0c
 800210c:	20000c70 	.word	0x20000c70
 8002110:	20000cd4 	.word	0x20000cd4
 8002114:	20000d38 	.word	0x20000d38
 8002118:	20000d9c 	.word	0x20000d9c
 800211c:	20000044 	.word	0x20000044
 8002120:	20000028 	.word	0x20000028
 8002124:	08014c48 	.word	0x08014c48
	}

	return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)

08002134 <ble_get_paired_device>:


void ble_get_paired_device(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af02      	add	r7, sp, #8
	flush_array((char*)ble_paired_device,18);
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <ble_get_paired_device+0x28>)
 800213c:	2112      	movs	r1, #18
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff f9bc 	bl	80014bc <flush_array>
	at_cmd_send_esp("AT+BLEENCDEV?\r\n\0","OK\r\n","ERROR",5,0);
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <ble_get_paired_device+0x2c>)
 8002146:	4907      	ldr	r1, [pc, #28]	; (8002164 <ble_get_paired_device+0x30>)
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <ble_get_paired_device+0x34>)
 800214a:	2300      	movs	r3, #0
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2305      	movs	r3, #5
 8002150:	f000 f894 	bl	800227c <at_cmd_send_esp>
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	20000768 	.word	0x20000768
 8002160:	08014b24 	.word	0x08014b24
 8002164:	08014b2c 	.word	0x08014b2c
 8002168:	08014cd0 	.word	0x08014cd0

0800216c <ble_scan_available_device>:

void ble_scan_available_device(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af02      	add	r7, sp, #8
	flush_array((char*)ble_available_device,18);
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <ble_scan_available_device+0x44>)
 8002174:	2112      	movs	r1, #18
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff f9a0 	bl	80014bc <flush_array>
	at_cmd_send_esp("AT+BLESCANPARAM=0,0,0,100,50\r\n\0", "OK\r\n", "ERROR", 5, 0);
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <ble_scan_available_device+0x48>)
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <ble_scan_available_device+0x4c>)
 8002180:	480e      	ldr	r0, [pc, #56]	; (80021bc <ble_scan_available_device+0x50>)
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2305      	movs	r3, #5
 8002188:	f000 f878 	bl	800227c <at_cmd_send_esp>

	ble_scan_meter_flag = 1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <ble_scan_available_device+0x54>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	at_cmd_send_esp("AT+BLESCAN=1,1\r\n\0","OK\r\n", "ERROR", 3, 0);
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <ble_scan_available_device+0x48>)
 8002194:	4908      	ldr	r1, [pc, #32]	; (80021b8 <ble_scan_available_device+0x4c>)
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <ble_scan_available_device+0x58>)
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2303      	movs	r3, #3
 800219e:	f000 f86d 	bl	800227c <at_cmd_send_esp>
	ble_scan_meter_flag = 0;
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <ble_scan_available_device+0x54>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	2000077c 	.word	0x2000077c
 80021b4:	08014b24 	.word	0x08014b24
 80021b8:	08014b2c 	.word	0x08014b2c
 80021bc:	08014ce4 	.word	0x08014ce4
 80021c0:	2000174f 	.word	0x2000174f
 80021c4:	08014d04 	.word	0x08014d04

080021c8 <at_cmd_send>:



///FUNCTION TO SEND AT COMMANDS AND LISTEN TO RESPONSE
_Bool at_cmd_send(char *at_command, char *success_response,char *error_response, uint16_t delay, _Bool receive_sms_flag)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	001a      	movs	r2, r3
 80021d6:	1cbb      	adds	r3, r7, #2
 80021d8:	801a      	strh	r2, [r3, #0]
//	wait_ms(300);
	HAL_UART_Receive_IT(&huart2, &gsm, 1);
 80021da:	4922      	ldr	r1, [pc, #136]	; (8002264 <at_cmd_send+0x9c>)
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <at_cmd_send+0xa0>)
 80021de:	2201      	movs	r2, #1
 80021e0:	0018      	movs	r0, r3
 80021e2:	f00b fb31 	bl	800d848 <HAL_UART_Receive_IT>
		flush_gsm_array();
 80021e6:	f7ff f9bd 	bl	8001564 <flush_gsm_array>
	send_text_to_uart2((uint8_t*)at_command);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7ff f8fb 	bl	80013e8 <send_text_to_uart2>

	timer_cmd=0;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <at_cmd_send+0xa4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	801a      	strh	r2, [r3, #0]

	while(timer_cmd < delay)
 80021f8:	e028      	b.n	800224c <at_cmd_send+0x84>
		{
			if(strstr((char*)gsm_data, (char*)success_response))
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <at_cmd_send+0xa8>)
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f011 f875 	bl	80132f0 <strstr>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d004      	beq.n	8002214 <at_cmd_send+0x4c>
				{
					bg96_power_flag=1;
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <at_cmd_send+0xac>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
//					gsm_proper_run = 1;
					return 1;
 8002210:	2301      	movs	r3, #1
 8002212:	e022      	b.n	800225a <at_cmd_send+0x92>
				}

			if(strstr((char*)gsm_data, (char*)"ERROR") || strstr((char*)gsm_data, (char*)error_response))
 8002214:	4a18      	ldr	r2, [pc, #96]	; (8002278 <at_cmd_send+0xb0>)
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <at_cmd_send+0xa8>)
 8002218:	0011      	movs	r1, r2
 800221a:	0018      	movs	r0, r3
 800221c:	f011 f868 	bl	80132f0 <strstr>
 8002220:	1e03      	subs	r3, r0, #0
 8002222:	d107      	bne.n	8002234 <at_cmd_send+0x6c>
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <at_cmd_send+0xa8>)
 8002228:	0011      	movs	r1, r2
 800222a:	0018      	movs	r0, r3
 800222c:	f011 f860 	bl	80132f0 <strstr>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d004      	beq.n	800223e <at_cmd_send+0x76>
				{
					bg96_power_flag=1;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <at_cmd_send+0xac>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
//					gsm_proper_run = 1;
					return 0;
 800223a:	2300      	movs	r3, #0
 800223c:	e00d      	b.n	800225a <at_cmd_send+0x92>
				}

			if(receive_sms_flag)
 800223e:	2318      	movs	r3, #24
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <at_cmd_send+0x84>
				high_priority_tasks(); /////High Priority Task
 8002248:	f7ff f96a 	bl	8001520 <high_priority_tasks>
	while(timer_cmd < delay)
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <at_cmd_send+0xa4>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	1cba      	adds	r2, r7, #2
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8d0      	bhi.n	80021fa <at_cmd_send+0x32>

		}
	return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b004      	add	sp, #16
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20001ab0 	.word	0x20001ab0
 8002268:	20001b18 	.word	0x20001b18
 800226c:	200002e0 	.word	0x200002e0
 8002270:	200005b4 	.word	0x200005b4
 8002274:	2000175e 	.word	0x2000175e
 8002278:	08014b24 	.word	0x08014b24

0800227c <at_cmd_send_esp>:

///FUNCTION TO SEND AT COMMANDS AND LISTEN TO RESPONSE FROM ESP MODULE
_Bool at_cmd_send_esp(char *at_command, char *success_response,char *error_response, uint16_t delay, _Bool high_prioity_task)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	001a      	movs	r2, r3
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	801a      	strh	r2, [r3, #0]
//	wait_ms(300);
	HAL_UART_Receive_IT(&huart1, &rx_esp, 1);
 800228e:	4923      	ldr	r1, [pc, #140]	; (800231c <at_cmd_send_esp+0xa0>)
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <at_cmd_send_esp+0xa4>)
 8002292:	2201      	movs	r2, #1
 8002294:	0018      	movs	r0, r3
 8002296:	f00b fad7 	bl	800d848 <HAL_UART_Receive_IT>
	flush_array((char*)rx_string_esp, 300);
 800229a:	2396      	movs	r3, #150	; 0x96
 800229c:	005a      	lsls	r2, r3, #1
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <at_cmd_send_esp+0xa8>)
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff f90a 	bl	80014bc <flush_array>
	rx_esp_counter = 0;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <at_cmd_send_esp+0xac>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]
	send_text_to_uart1((uint8_t*)at_command);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff f863 	bl	800137c <send_text_to_uart1>

	timer_cmd_esp=0;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <at_cmd_send_esp+0xb0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	801a      	strh	r2, [r3, #0]

	while(timer_cmd_esp < delay)
 80022bc:	e022      	b.n	8002304 <at_cmd_send_esp+0x88>
		{
			if(strstr((char*)rx_string_esp, (char*)success_response))
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <at_cmd_send_esp+0xa8>)
 80022c2:	0011      	movs	r1, r2
 80022c4:	0018      	movs	r0, r3
 80022c6:	f011 f813 	bl	80132f0 <strstr>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <at_cmd_send_esp+0x56>
				{
//					gsm_proper_run = 1;
					return 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01f      	b.n	8002312 <at_cmd_send_esp+0x96>
				}

			if(strstr((char*)rx_string_esp, (char*)"ERROR") || strstr((char*)rx_string_esp, (char*)error_response))
 80022d2:	4a17      	ldr	r2, [pc, #92]	; (8002330 <at_cmd_send_esp+0xb4>)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <at_cmd_send_esp+0xa8>)
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f011 f809 	bl	80132f0 <strstr>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d107      	bne.n	80022f2 <at_cmd_send_esp+0x76>
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <at_cmd_send_esp+0xa8>)
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f011 f801 	bl	80132f0 <strstr>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d001      	beq.n	80022f6 <at_cmd_send_esp+0x7a>
				{
//					gsm_proper_run = 1;
					return 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e00d      	b.n	8002312 <at_cmd_send_esp+0x96>
				}

			if(high_prioity_task)
 80022f6:	2318      	movs	r3, #24
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <at_cmd_send_esp+0x88>
				high_priority_tasks(); /////High Priority Task
 8002300:	f7ff f90e 	bl	8001520 <high_priority_tasks>
	while(timer_cmd_esp < delay)
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <at_cmd_send_esp+0xb0>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	1cba      	adds	r2, r7, #2
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8d6      	bhi.n	80022be <at_cmd_send_esp+0x42>

		}
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	200002d6 	.word	0x200002d6
 8002320:	200019c4 	.word	0x200019c4
 8002324:	200002f8 	.word	0x200002f8
 8002328:	200002e4 	.word	0x200002e4
 800232c:	200002e2 	.word	0x200002e2
 8002330:	08014b24 	.word	0x08014b24

08002334 <check_gprs_network_registration>:

void check_gprs_network_registration(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af02      	add	r7, sp, #8


//	flush_gsm_array();
//	wait_ms(300);

	at_cmd_send("AT+CGREG?\r\n\0","OK\r\n","ERROR",5,0);
 800233a:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <check_gprs_network_registration+0xb4>)
 800233c:	492b      	ldr	r1, [pc, #172]	; (80023ec <check_gprs_network_registration+0xb8>)
 800233e:	482c      	ldr	r0, [pc, #176]	; (80023f0 <check_gprs_network_registration+0xbc>)
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2305      	movs	r3, #5
 8002346:	f7ff ff3f 	bl	80021c8 <at_cmd_send>
	wait_ms(300);
 800234a:	2396      	movs	r3, #150	; 0x96
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff f8ec 	bl	800152c <wait_ms>
	at_cmd_send("AT+CEREG?\r\n\0","OK\r\n","ERROR",5,0);
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <check_gprs_network_registration+0xb4>)
 8002356:	4925      	ldr	r1, [pc, #148]	; (80023ec <check_gprs_network_registration+0xb8>)
 8002358:	4826      	ldr	r0, [pc, #152]	; (80023f4 <check_gprs_network_registration+0xc0>)
 800235a:	2300      	movs	r3, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2305      	movs	r3, #5
 8002360:	f7ff ff32 	bl	80021c8 <at_cmd_send>
	wait_ms(300);
 8002364:	2396      	movs	r3, #150	; 0x96
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff f8df 	bl	800152c <wait_ms>
	at_cmd_send("AT+QCSQ\r\n\0","OK\r\n","ERROR",5,0);
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <check_gprs_network_registration+0xb4>)
 8002370:	491e      	ldr	r1, [pc, #120]	; (80023ec <check_gprs_network_registration+0xb8>)
 8002372:	4821      	ldr	r0, [pc, #132]	; (80023f8 <check_gprs_network_registration+0xc4>)
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2305      	movs	r3, #5
 800237a:	f7ff ff25 	bl	80021c8 <at_cmd_send>
	wait_ms(300);
 800237e:	2396      	movs	r3, #150	; 0x96
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff f8d2 	bl	800152c <wait_ms>

	//+CGREG: 0,1
	//+CGREG: 0,5

	//if(gsm_data[10] == '1' || gsm_data[10] == '5')
	if(at_cmd_send("AT+COPS?\r\n\0","COPS: 0,0","ERROR",5,0))//+COPS: 0,0,"airtel airtel",0
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <check_gprs_network_registration+0xb4>)
 800238a:	491c      	ldr	r1, [pc, #112]	; (80023fc <check_gprs_network_registration+0xc8>)
 800238c:	481c      	ldr	r0, [pc, #112]	; (8002400 <check_gprs_network_registration+0xcc>)
 800238e:	2300      	movs	r3, #0
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2305      	movs	r3, #5
 8002394:	f7ff ff18 	bl	80021c8 <at_cmd_send>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d012      	beq.n	80023c2 <check_gprs_network_registration+0x8e>
	{
		if(!registered_to_gprs_network)
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <check_gprs_network_registration+0xd0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4053      	eors	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <check_gprs_network_registration+0x7e>
			send_text_to_usb("REG 1\n\r\0");
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <check_gprs_network_registration+0xd4>)
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff f851 	bl	8001454 <send_text_to_usb>

		registered_to_gprs_network=1;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <check_gprs_network_registration+0xd0>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
		wait_ms(3000);
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <check_gprs_network_registration+0xd8>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff f8b6 	bl	800152c <wait_ms>

		registered_to_gprs_network = 0;
		wait_ms(4000);
	}

}
 80023c0:	e00f      	b.n	80023e2 <check_gprs_network_registration+0xae>
		if(registered_to_gprs_network)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <check_gprs_network_registration+0xd0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <check_gprs_network_registration+0x9e>
			send_text_to_usb("REG 0\n\r\0");
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <check_gprs_network_registration+0xdc>)
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff f841 	bl	8001454 <send_text_to_usb>
		registered_to_gprs_network = 0;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <check_gprs_network_registration+0xd0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
		wait_ms(4000);
 80023d8:	23fa      	movs	r3, #250	; 0xfa
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	0018      	movs	r0, r3
 80023de:	f7ff f8a5 	bl	800152c <wait_ms>
}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	08014b24 	.word	0x08014b24
 80023ec:	08014b2c 	.word	0x08014b2c
 80023f0:	08014d18 	.word	0x08014d18
 80023f4:	08014d28 	.word	0x08014d28
 80023f8:	08014d38 	.word	0x08014d38
 80023fc:	08014d44 	.word	0x08014d44
 8002400:	08014d50 	.word	0x08014d50
 8002404:	2000174c 	.word	0x2000174c
 8002408:	08014d5c 	.word	0x08014d5c
 800240c:	00000bb8 	.word	0x00000bb8
 8002410:	08014d68 	.word	0x08014d68

08002414 <__ROM_Page_Erase_>:

_Bool __ROM_Page_Erase_(uint32_t page_address, uint32_t number_of_pages)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]

	uint32_t page_error=0;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]

	FLASH_EraseInitTypeDef settings_flash;
	settings_flash.NbPages = number_of_pages;
 8002422:	2408      	movs	r4, #8
 8002424:	193b      	adds	r3, r7, r4
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	609a      	str	r2, [r3, #8]
	settings_flash.PageAddress = page_address;
 800242a:	193b      	adds	r3, r7, r4
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	605a      	str	r2, [r3, #4]
	settings_flash.TypeErase = FLASH_TYPEERASE_PAGES;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]


	HAL_FLASH_Unlock();
 8002436:	f006 f9c5 	bl	80087c4 <HAL_FLASH_Unlock>

	if(HAL_FLASHEx_Erase(&settings_flash, &page_error) == HAL_OK)
 800243a:	2314      	movs	r3, #20
 800243c:	18fa      	adds	r2, r7, r3
 800243e:	193b      	adds	r3, r7, r4
 8002440:	0011      	movs	r1, r2
 8002442:	0018      	movs	r0, r3
 8002444:	f006 fa7e 	bl	8008944 <HAL_FLASHEx_Erase>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d103      	bne.n	8002454 <__ROM_Page_Erase_+0x40>
	{
		HAL_FLASH_Lock();
 800244c:	f006 f9e0 	bl	8008810 <HAL_FLASH_Lock>
		return 1;
 8002450:	2301      	movs	r3, #1
 8002452:	e002      	b.n	800245a <__ROM_Page_Erase_+0x46>
	}

	HAL_FLASH_Lock();
 8002454:	f006 f9dc 	bl	8008810 <HAL_FLASH_Lock>
	return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b007      	add	sp, #28
 8002460:	bd90      	pop	{r4, r7, pc}

08002462 <__ROM_Write_32bit_>:

void __ROM_Write_32bit_(uint32_t Address, uint64_t Data)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	603a      	str	r2, [r7, #0]
 800246c:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 800246e:	f006 f9a9 	bl	80087c4 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data);
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	2003      	movs	r0, #3
 800247a:	f006 f90d 	bl	8008698 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 800247e:	f006 f9c7 	bl	8008810 <HAL_FLASH_Lock>
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b004      	add	sp, #16
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <__Call_BootLoader_>:

void __Call_BootLoader_(uint64_t file_id, uint64_t file_size1)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60b8      	str	r0, [r7, #8]
 8002494:	60f9      	str	r1, [r7, #12]
 8002496:	603a      	str	r2, [r7, #0]
 8002498:	607b      	str	r3, [r7, #4]
	send_text_to_uart2((uint8_t*)"Call Bootloader\r\n\0");
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <__Call_BootLoader_+0x50>)
 800249c:	0018      	movs	r0, r3
 800249e:	f7fe ffa3 	bl	80013e8 <send_text_to_uart2>
	HAL_UART_DeInit(&huart2);
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <__Call_BootLoader_+0x54>)
 80024a4:	0018      	movs	r0, r3
 80024a6:	f00b f927 	bl	800d6f8 <HAL_UART_DeInit>

	if(__ROM_Page_Erase_((uint32_t)0x08002800,1))//6th page of settings
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <__Call_BootLoader_+0x58>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7ff ffb0 	bl	8002414 <__ROM_Page_Erase_>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d00d      	beq.n	80024d4 <__Call_BootLoader_+0x48>
	{
		__ROM_Write_32bit_((uint32_t)0x08002800, file_id);
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4909      	ldr	r1, [pc, #36]	; (80024e4 <__Call_BootLoader_+0x58>)
 80024be:	0008      	movs	r0, r1
 80024c0:	f7ff ffcf 	bl	8002462 <__ROM_Write_32bit_>
		__ROM_Write_32bit_((uint32_t)0x08002808, file_size1);
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__Call_BootLoader_+0x5c>)
 80024ca:	0008      	movs	r0, r1
 80024cc:	f7ff ffc9 	bl	8002462 <__ROM_Write_32bit_>

//		__ROM_Write_32bit_((uint32_t)0x08002008, (uint64_t)134072);

		NVIC_SystemReset();
 80024d0:	f7fd ffd4 	bl	800047c <__NVIC_SystemReset>
		HAL_Delay(5000);
	}

//*((__IO uint32_t*)0x2000049Cu)=99;

}
 80024d4:	46c0      	nop			; (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b004      	add	sp, #16
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	08014d74 	.word	0x08014d74
 80024e0:	20001b18 	.word	0x20001b18
 80024e4:	08002800 	.word	0x08002800
 80024e8:	08002808 	.word	0x08002808

080024ec <Be_SecondFW>:
}



void Be_SecondFW(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
	  __IO uint32_t *VectorTable = (volatile uint32_t *)0x20000000U;
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	059b      	lsls	r3, r3, #22
 80024f6:	60bb      	str	r3, [r7, #8]
    uint32_t ui32_VectorIndex = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
    for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e00e      	b.n	8002520 <Be_SecondFW+0x34>
    {
        VectorTable[ui32_VectorIndex] = *(__IO uint32_t*)((uint32_t)0x08003000U + (ui32_VectorIndex << 2));
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <Be_SecondFW+0x80>)
 8002508:	4694      	mov	ip, r2
 800250a:	4463      	add	r3, ip
 800250c:	001a      	movs	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	18cb      	adds	r3, r1, r3
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	601a      	str	r2, [r3, #0]
    for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b2f      	cmp	r3, #47	; 0x2f
 8002524:	d9ed      	bls.n	8002502 <Be_SecondFW+0x16>
    }
    __HAL_RCC_AHB_FORCE_RESET();
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <Be_SecondFW+0x84>)
 8002528:	2201      	movs	r2, #1
 800252a:	4252      	negs	r2, r2
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <Be_SecondFW+0x84>)
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <Be_SecondFW+0x84>)
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	619a      	str	r2, [r3, #24]
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <Be_SecondFW+0x84>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_AHB_RELEASE_RESET();
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <Be_SecondFW+0x84>)
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <Be_SecondFW+0x88>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <Be_SecondFW+0x88>)
 8002552:	2103      	movs	r1, #3
 8002554:	438a      	bics	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <Be_SecondFW+0x88>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <Be_SecondFW+0x88>)
 800255e:	2103      	movs	r1, #3
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
//  /* Enable the SYSCFG peripheral clock*/
//  __HAL_RCC_SYSCFG_CLK_ENABLE();
//  /* Remap SRAM at 0x00000000 */
//  __HAL_SYSCFG_REMAPMEMORY_SRAM();

}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08003000 	.word	0x08003000
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000

08002578 <esp_enable_softap_mode>:

_Bool esp_enable_softap_mode(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af02      	add	r7, sp, #8
	//Set ssid and password
	if(at_cmd_send_esp("AT\r\n\0","OK\r\n","ERROR",5,0))
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <esp_enable_softap_mode+0xa4>)
 8002580:	4927      	ldr	r1, [pc, #156]	; (8002620 <esp_enable_softap_mode+0xa8>)
 8002582:	4828      	ldr	r0, [pc, #160]	; (8002624 <esp_enable_softap_mode+0xac>)
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2305      	movs	r3, #5
 800258a:	f7ff fe77 	bl	800227c <at_cmd_send_esp>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d03f      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
	{
		sprintf((char*)ble_ssid_name, "BlipGo+%s\0", device_id);
 8002592:	4a25      	ldr	r2, [pc, #148]	; (8002628 <esp_enable_softap_mode+0xb0>)
 8002594:	4925      	ldr	r1, [pc, #148]	; (800262c <esp_enable_softap_mode+0xb4>)
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <esp_enable_softap_mode+0xb8>)
 8002598:	0018      	movs	r0, r3
 800259a:	f010 fe89 	bl	80132b0 <siprintf>

		sprintf((char*)tx_string, "AT+CWSAP=\"%s\",\"1234567890\",5,3\r\n\0", ble_ssid_name);
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <esp_enable_softap_mode+0xb8>)
 80025a0:	4924      	ldr	r1, [pc, #144]	; (8002634 <esp_enable_softap_mode+0xbc>)
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <esp_enable_softap_mode+0xc0>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f010 fe83 	bl	80132b0 <siprintf>
		//set wifi mode to SoftAP+Station
		if(at_cmd_send_esp((char*)tx_string,"OK\r\n","ERROR",5,0))
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <esp_enable_softap_mode+0xa4>)
 80025ac:	491c      	ldr	r1, [pc, #112]	; (8002620 <esp_enable_softap_mode+0xa8>)
 80025ae:	4822      	ldr	r0, [pc, #136]	; (8002638 <esp_enable_softap_mode+0xc0>)
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2305      	movs	r3, #5
 80025b6:	f7ff fe61 	bl	800227c <at_cmd_send_esp>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d029      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
		{
			//Set SoftAP IP and default gateway
			if(at_cmd_send_esp("AT+CIPAP=\"192.168.50.1\",\"192.168.50.1\",\"255.255.255.0\"\r\n\0","OK\r\n","ERROR",5,0))
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <esp_enable_softap_mode+0xa4>)
 80025c0:	4917      	ldr	r1, [pc, #92]	; (8002620 <esp_enable_softap_mode+0xa8>)
 80025c2:	481e      	ldr	r0, [pc, #120]	; (800263c <esp_enable_softap_mode+0xc4>)
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2305      	movs	r3, #5
 80025ca:	f7ff fe57 	bl	800227c <at_cmd_send_esp>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d01f      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
			{
				//Check IP settings
				if(at_cmd_send_esp("AT+CIPAP?\r\n\0","OK\r\n","ERROR",5,0))
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <esp_enable_softap_mode+0xa4>)
 80025d4:	4912      	ldr	r1, [pc, #72]	; (8002620 <esp_enable_softap_mode+0xa8>)
 80025d6:	481a      	ldr	r0, [pc, #104]	; (8002640 <esp_enable_softap_mode+0xc8>)
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2305      	movs	r3, #5
 80025de:	f7ff fe4d 	bl	800227c <at_cmd_send_esp>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d015      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
				{
					//Turn on multiplexing, it is required
					if(at_cmd_send_esp("AT+CIPMUX=1\r\n\0","OK\r\n","ERROR",5,0))
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <esp_enable_softap_mode+0xa4>)
 80025e8:	490d      	ldr	r1, [pc, #52]	; (8002620 <esp_enable_softap_mode+0xa8>)
 80025ea:	4816      	ldr	r0, [pc, #88]	; (8002644 <esp_enable_softap_mode+0xcc>)
 80025ec:	2300      	movs	r3, #0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2305      	movs	r3, #5
 80025f2:	f7ff fe43 	bl	800227c <at_cmd_send_esp>
 80025f6:	1e03      	subs	r3, r0, #0
 80025f8:	d00b      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
					{
						//Start server on port 9001 or any port
						if(at_cmd_send_esp("AT+CIPSERVER=1,9001\r\n\0","OK\r\n","ERROR",5,0))
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <esp_enable_softap_mode+0xa4>)
 80025fc:	4908      	ldr	r1, [pc, #32]	; (8002620 <esp_enable_softap_mode+0xa8>)
 80025fe:	4812      	ldr	r0, [pc, #72]	; (8002648 <esp_enable_softap_mode+0xd0>)
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2305      	movs	r3, #5
 8002606:	f7ff fe39 	bl	800227c <at_cmd_send_esp>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <esp_enable_softap_mode+0x9a>
						{
							return 1;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <esp_enable_softap_mode+0x9c>
				}
			}
		}
	}

	return 0;
 8002612:	2300      	movs	r3, #0

}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	08014b24 	.word	0x08014b24
 8002620:	08014b2c 	.word	0x08014b2c
 8002624:	08014b90 	.word	0x08014b90
 8002628:	20000028 	.word	0x20000028
 800262c:	08014f44 	.word	0x08014f44
 8002630:	20000e80 	.word	0x20000e80
 8002634:	08014f50 	.word	0x08014f50
 8002638:	20000424 	.word	0x20000424
 800263c:	08014f74 	.word	0x08014f74
 8002640:	08014fb0 	.word	0x08014fb0
 8002644:	08014fc0 	.word	0x08014fc0
 8002648:	08014fd0 	.word	0x08014fd0

0800264c <ble_is_available_device_paired>:


_Bool ble_is_available_device_paired(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < 18; i++)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e018      	b.n	800268c <ble_is_available_device_paired+0x40>
	{
		if(ble_available_device[i] != ble_paired_device[i] || ble_available_device[0]==0 || ble_paired_device[0]==0)
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <ble_is_available_device_paired+0x54>)
 8002660:	5cd2      	ldrb	r2, [r2, r3]
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	490f      	ldr	r1, [pc, #60]	; (80026a4 <ble_is_available_device_paired+0x58>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	429a      	cmp	r2, r3
 800266c:	d107      	bne.n	800267e <ble_is_available_device_paired+0x32>
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <ble_is_available_device_paired+0x54>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <ble_is_available_device_paired+0x32>
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <ble_is_available_device_paired+0x58>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <ble_is_available_device_paired+0x36>
			return 0;
 800267e:	2300      	movs	r3, #0
 8002680:	e009      	b.n	8002696 <ble_is_available_device_paired+0x4a>
	for(uint8_t i=0; i < 18; i++)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	3201      	adds	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b11      	cmp	r3, #17
 8002692:	d9e2      	bls.n	800265a <ble_is_available_device_paired+0xe>
	}

	return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	2000077c 	.word	0x2000077c
 80026a4:	20000768 	.word	0x20000768

080026a8 <beep>:

void beep(uint8_t duration)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	0002      	movs	r2, r0
 80026b0:	1dfb      	adds	r3, r7, #7
 80026b2:	701a      	strb	r2, [r3, #0]
	//BUZZOR ON
	HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_SET);
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <beep+0x54>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	2120      	movs	r1, #32
 80026ba:	0018      	movs	r0, r3
 80026bc:	f006 fc2e 	bl	8008f1c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);//// PWM Buzzer ON
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <beep+0x58>)
 80026c2:	2100      	movs	r1, #0
 80026c4:	0018      	movs	r0, r3
 80026c6:	f00a f99f 	bl	800ca08 <HAL_TIM_PWM_Start>
	htim16.Instance->CCR1 = 500;/// 50% duty cycle
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <beep+0x58>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	22fa      	movs	r2, #250	; 0xfa
 80026d0:	0052      	lsls	r2, r2, #1
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_Delay(duration);
 80026d4:	1dfb      	adds	r3, r7, #7
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	0018      	movs	r0, r3
 80026da:	f005 fe2b 	bl	8008334 <HAL_Delay>

	//BUZZOR OFF
	HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_RESET);
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <beep+0x54>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	2120      	movs	r1, #32
 80026e4:	0018      	movs	r0, r3
 80026e6:	f006 fc19 	bl	8008f1c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);/// PWM Buzzer OFF
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <beep+0x58>)
 80026ec:	2100      	movs	r1, #0
 80026ee:	0018      	movs	r0, r3
 80026f0:	f00a fa3c 	bl	800cb6c <HAL_TIM_PWM_Stop>
//			HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
//			HAL_Delay(500);
//			HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
//			HAL_Delay(500);

}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	48000400 	.word	0x48000400
 8002700:	20001b9c 	.word	0x20001b9c

08002704 <send_softap_response>:

_Bool send_softap_response(char* str, uint16_t len)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b0e9      	sub	sp, #420	; 0x1a4
 8002708:	af02      	add	r7, sp, #8
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	000a      	movs	r2, r1
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <send_softap_response+0x88>)
 8002710:	21cc      	movs	r1, #204	; 0xcc
 8002712:	0049      	lsls	r1, r1, #1
 8002714:	468c      	mov	ip, r1
 8002716:	44bc      	add	ip, r7
 8002718:	4463      	add	r3, ip
 800271a:	801a      	strh	r2, [r3, #0]
	unsigned char ap_tx_string[400]={0};
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <send_softap_response+0x8c>)
 800271e:	22cc      	movs	r2, #204	; 0xcc
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	4694      	mov	ip, r2
 8002724:	44bc      	add	ip, r7
 8002726:	4463      	add	r3, ip
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	3304      	adds	r3, #4
 800272e:	22c6      	movs	r2, #198	; 0xc6
 8002730:	0052      	lsls	r2, r2, #1
 8002732:	2100      	movs	r1, #0
 8002734:	0018      	movs	r0, r3
 8002736:	f010 fb25 	bl	8012d84 <memset>

	sprintf((char*)ap_tx_string, "AT+CIPSEND=0,%u\r\n\0", len);
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <send_softap_response+0x88>)
 800273c:	22cc      	movs	r2, #204	; 0xcc
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	4694      	mov	ip, r2
 8002742:	44bc      	add	ip, r7
 8002744:	4463      	add	r3, ip
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	4912      	ldr	r1, [pc, #72]	; (8002794 <send_softap_response+0x90>)
 800274a:	2408      	movs	r4, #8
 800274c:	193b      	adds	r3, r7, r4
 800274e:	0018      	movs	r0, r3
 8002750:	f010 fdae 	bl	80132b0 <siprintf>

	if(at_cmd_send_esp((char*)ap_tx_string,">","ERROR",5,0))
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <send_softap_response+0x94>)
 8002756:	4911      	ldr	r1, [pc, #68]	; (800279c <send_softap_response+0x98>)
 8002758:	1938      	adds	r0, r7, r4
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2305      	movs	r3, #5
 8002760:	f7ff fd8c 	bl	800227c <at_cmd_send_esp>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d00b      	beq.n	8002780 <send_softap_response+0x7c>
	{
		if(at_cmd_send_esp(str ,"SEND OK\r\n","SEND FAIL",5,0))
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <send_softap_response+0x9c>)
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <send_softap_response+0xa0>)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	2300      	movs	r3, #0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2305      	movs	r3, #5
 8002774:	f7ff fd82 	bl	800227c <at_cmd_send_esp>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d001      	beq.n	8002780 <send_softap_response+0x7c>
		{
			return 1;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <send_softap_response+0x7e>
		}
	}

	return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b067      	add	sp, #412	; 0x19c
 8002788:	bd90      	pop	{r4, r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	fffffe6a 	.word	0xfffffe6a
 8002790:	fffffe70 	.word	0xfffffe70
 8002794:	08014fe8 	.word	0x08014fe8
 8002798:	08014b24 	.word	0x08014b24
 800279c:	08014ffc 	.word	0x08014ffc
 80027a0:	08015000 	.word	0x08015000
 80027a4:	0801500c 	.word	0x0801500c

080027a8 <getIndexOf>:
	*	@RETURN
	*							Found - returns INDEX OF LAST CHAR OF SEARCH STRING IN A GIVEN MAIN STRING
	*							Not Found - returns 0
	*/
uint16_t getIndexOf(char *searchStr, uint16_t searchStrLength, char *mainStr, uint16_t mainStrLength)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	0008      	movs	r0, r1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	0019      	movs	r1, r3
 80027b6:	230a      	movs	r3, #10
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	2308      	movs	r3, #8
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	1c0a      	adds	r2, r1, #0
 80027c4:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i<(mainStrLength-searchStrLength+1); i++)
 80027c6:	2316      	movs	r3, #22
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2200      	movs	r2, #0
 80027cc:	801a      	strh	r2, [r3, #0]
 80027ce:	e049      	b.n	8002864 <getIndexOf+0xbc>
	{
		if(searchStr[0]==mainStr[i])/////1st char matched
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	2016      	movs	r0, #22
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	18cb      	adds	r3, r1, r3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d139      	bne.n	8002858 <getIndexOf+0xb0>
		{
			for(uint16_t j=1, k=i+1; j<searchStrLength; j++, k++)
 80027e4:	2314      	movs	r3, #20
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2201      	movs	r2, #1
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	2312      	movs	r3, #18
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	183a      	adds	r2, r7, r0
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	3201      	adds	r2, #1
 80027f6:	801a      	strh	r2, [r3, #0]
 80027f8:	e024      	b.n	8002844 <getIndexOf+0x9c>
			{
				if(searchStr[j]==mainStr[k])
 80027fa:	2414      	movs	r4, #20
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	18d3      	adds	r3, r2, r3
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	2012      	movs	r0, #18
 8002808:	183b      	adds	r3, r7, r0
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	18cb      	adds	r3, r1, r3
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d11f      	bne.n	8002856 <getIndexOf+0xae>
				{
					if(j==(searchStrLength-1))
 8002816:	193b      	adds	r3, r7, r4
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	230a      	movs	r3, #10
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	3b01      	subs	r3, #1
 8002822:	429a      	cmp	r2, r3
 8002824:	d102      	bne.n	800282c <getIndexOf+0x84>
					{
						return k;///i is start index k is end index
 8002826:	183b      	adds	r3, r7, r0
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	e028      	b.n	800287e <getIndexOf+0xd6>
			for(uint16_t j=1, k=i+1; j<searchStrLength; j++, k++)
 800282c:	2114      	movs	r1, #20
 800282e:	187b      	adds	r3, r7, r1
 8002830:	881a      	ldrh	r2, [r3, #0]
 8002832:	187b      	adds	r3, r7, r1
 8002834:	3201      	adds	r2, #1
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	2112      	movs	r1, #18
 800283a:	187b      	adds	r3, r7, r1
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	187b      	adds	r3, r7, r1
 8002840:	3201      	adds	r2, #1
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	2314      	movs	r3, #20
 8002846:	18fa      	adds	r2, r7, r3
 8002848:	230a      	movs	r3, #10
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d3d2      	bcc.n	80027fa <getIndexOf+0x52>
 8002854:	e000      	b.n	8002858 <getIndexOf+0xb0>
					}
				}
				else
				{
					break;
 8002856:	46c0      	nop			; (mov r8, r8)
	for(uint16_t i=0; i<(mainStrLength-searchStrLength+1); i++)
 8002858:	2116      	movs	r1, #22
 800285a:	187b      	adds	r3, r7, r1
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	187b      	adds	r3, r7, r1
 8002860:	3201      	adds	r2, #1
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	2308      	movs	r3, #8
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	230a      	movs	r3, #10
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	2316      	movs	r3, #22
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	daa9      	bge.n	80027d0 <getIndexOf+0x28>
				}
			}
		}
	}

	return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b007      	add	sp, #28
 8002884:	bd90      	pop	{r4, r7, pc}
	...

08002888 <update_module_firmware>:

_Bool update_module_firmware(void)
{
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b0ad      	sub	sp, #180	; 0xb4
 800288c:	af02      	add	r7, sp, #8
	//////////   Module Firmware Update ////////
	deactivate_pdp();
 800288e:	f7fe feeb 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8002892:	4ae1      	ldr	r2, [pc, #900]	; (8002c18 <update_module_firmware+0x390>)
 8002894:	49e1      	ldr	r1, [pc, #900]	; (8002c1c <update_module_firmware+0x394>)
 8002896:	48e2      	ldr	r0, [pc, #904]	; (8002c20 <update_module_firmware+0x398>)
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2305      	movs	r3, #5
 800289e:	f7ff fc93 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 80028a2:	4add      	ldr	r2, [pc, #884]	; (8002c18 <update_module_firmware+0x390>)
 80028a4:	49dd      	ldr	r1, [pc, #884]	; (8002c1c <update_module_firmware+0x394>)
 80028a6:	48df      	ldr	r0, [pc, #892]	; (8002c24 <update_module_firmware+0x39c>)
 80028a8:	2300      	movs	r3, #0
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2305      	movs	r3, #5
 80028ae:	f7ff fc8b 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 80028b2:	f7fe fe27 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 80028b6:	4adc      	ldr	r2, [pc, #880]	; (8002c28 <update_module_firmware+0x3a0>)
 80028b8:	49dc      	ldr	r1, [pc, #880]	; (8002c2c <update_module_firmware+0x3a4>)
 80028ba:	4bdd      	ldr	r3, [pc, #884]	; (8002c30 <update_module_firmware+0x3a8>)
 80028bc:	0018      	movs	r0, r3
 80028be:	f010 fcf7 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 80028c2:	4ad5      	ldr	r2, [pc, #852]	; (8002c18 <update_module_firmware+0x390>)
 80028c4:	49d5      	ldr	r1, [pc, #852]	; (8002c1c <update_module_firmware+0x394>)
 80028c6:	48da      	ldr	r0, [pc, #872]	; (8002c30 <update_module_firmware+0x3a8>)
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2305      	movs	r3, #5
 80028ce:	f7ff fc7b 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 80028d2:	f7fe feaf 	bl	8001634 <activate_pdp>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d100      	bne.n	80028dc <update_module_firmware+0x54>
 80028da:	e224      	b.n	8002d26 <update_module_firmware+0x49e>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 80028dc:	4ace      	ldr	r2, [pc, #824]	; (8002c18 <update_module_firmware+0x390>)
 80028de:	49cf      	ldr	r1, [pc, #828]	; (8002c1c <update_module_firmware+0x394>)
 80028e0:	48d4      	ldr	r0, [pc, #848]	; (8002c34 <update_module_firmware+0x3ac>)
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2305      	movs	r3, #5
 80028e8:	f7ff fc6e 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 80028ec:	4aca      	ldr	r2, [pc, #808]	; (8002c18 <update_module_firmware+0x390>)
 80028ee:	49d2      	ldr	r1, [pc, #840]	; (8002c38 <update_module_firmware+0x3b0>)
 80028f0:	48d2      	ldr	r0, [pc, #840]	; (8002c3c <update_module_firmware+0x3b4>)
 80028f2:	2300      	movs	r3, #0
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2346      	movs	r3, #70	; 0x46
 80028f8:	f7ff fc66 	bl	80021c8 <at_cmd_send>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d100      	bne.n	8002902 <update_module_firmware+0x7a>
 8002900:	e211      	b.n	8002d26 <update_module_firmware+0x49e>
		{

			flush_tx_string();
 8002902:	f7fe fdff 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/mu?token=%s", device_id, http_token);
 8002906:	4bce      	ldr	r3, [pc, #824]	; (8002c40 <update_module_firmware+0x3b8>)
 8002908:	4ace      	ldr	r2, [pc, #824]	; (8002c44 <update_module_firmware+0x3bc>)
 800290a:	49cf      	ldr	r1, [pc, #828]	; (8002c48 <update_module_firmware+0x3c0>)
 800290c:	48c8      	ldr	r0, [pc, #800]	; (8002c30 <update_module_firmware+0x3a8>)
 800290e:	f010 fccf 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 8002912:	4ac1      	ldr	r2, [pc, #772]	; (8002c18 <update_module_firmware+0x390>)
 8002914:	49c1      	ldr	r1, [pc, #772]	; (8002c1c <update_module_firmware+0x394>)
 8002916:	48c6      	ldr	r0, [pc, #792]	; (8002c30 <update_module_firmware+0x3a8>)
 8002918:	2300      	movs	r3, #0
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2346      	movs	r3, #70	; 0x46
 800291e:	f7ff fc53 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8002922:	4abd      	ldr	r2, [pc, #756]	; (8002c18 <update_module_firmware+0x390>)
 8002924:	49bd      	ldr	r1, [pc, #756]	; (8002c1c <update_module_firmware+0x394>)
 8002926:	48c9      	ldr	r0, [pc, #804]	; (8002c4c <update_module_firmware+0x3c4>)
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2305      	movs	r3, #5
 800292e:	f7ff fc4b 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 8002932:	4ab9      	ldr	r2, [pc, #740]	; (8002c18 <update_module_firmware+0x390>)
 8002934:	49c6      	ldr	r1, [pc, #792]	; (8002c50 <update_module_firmware+0x3c8>)
 8002936:	48c7      	ldr	r0, [pc, #796]	; (8002c54 <update_module_firmware+0x3cc>)
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2346      	movs	r3, #70	; 0x46
 800293e:	f7ff fc43 	bl	80021c8 <at_cmd_send>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d100      	bne.n	8002948 <update_module_firmware+0xc0>
 8002946:	e1ee      	b.n	8002d26 <update_module_firmware+0x49e>
			{
				HAL_Delay(10);
 8002948:	200a      	movs	r0, #10
 800294a:	f005 fcf3 	bl	8008334 <HAL_Delay>


				plus_enable=0;
 800294e:	4bc2      	ldr	r3, [pc, #776]	; (8002c58 <update_module_firmware+0x3d0>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]


				if(at_cmd_send("AT+QHTTPREAD=80\r\n\0","QHTTPREAD: 0\r\n","ERROR", 20, 0))//+QHTTPREAD: 0
 8002954:	4ab0      	ldr	r2, [pc, #704]	; (8002c18 <update_module_firmware+0x390>)
 8002956:	49c1      	ldr	r1, [pc, #772]	; (8002c5c <update_module_firmware+0x3d4>)
 8002958:	48c1      	ldr	r0, [pc, #772]	; (8002c60 <update_module_firmware+0x3d8>)
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2314      	movs	r3, #20
 8002960:	f7ff fc32 	bl	80021c8 <at_cmd_send>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d100      	bne.n	800296a <update_module_firmware+0xe2>
 8002968:	e1da      	b.n	8002d20 <update_module_firmware+0x498>
					+QHTTPREAD: 0
					*/

					//fetch url code tested online:  https://onlinegdb.com/HkRttS0Ow

					if(strstr((char*)gsm_data, "Unauthorized"))
 800296a:	4abe      	ldr	r2, [pc, #760]	; (8002c64 <update_module_firmware+0x3dc>)
 800296c:	4bbe      	ldr	r3, [pc, #760]	; (8002c68 <update_module_firmware+0x3e0>)
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f010 fcbd 	bl	80132f0 <strstr>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d007      	beq.n	800298a <update_module_firmware+0x102>
					{
						ping_service_flag=1;
 800297a:	4bbc      	ldr	r3, [pc, #752]	; (8002c6c <update_module_firmware+0x3e4>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
						plus_enable=1;
 8002980:	4bb5      	ldr	r3, [pc, #724]	; (8002c58 <update_module_firmware+0x3d0>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
						return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e1ce      	b.n	8002d28 <update_module_firmware+0x4a0>
					}

					unsigned char update_url[150]={0};
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	3304      	adds	r3, #4
 8002992:	2292      	movs	r2, #146	; 0x92
 8002994:	2100      	movs	r1, #0
 8002996:	0018      	movs	r0, r3
 8002998:	f010 f9f4 	bl	8012d84 <memset>
					char *searchStr = {0};
 800299c:	2300      	movs	r3, #0
 800299e:	26a0      	movs	r6, #160	; 0xa0
 80029a0:	19ba      	adds	r2, r7, r6
 80029a2:	6013      	str	r3, [r2, #0]
					uint16_t startIndex = 0, endIndex = 0;
 80029a4:	249e      	movs	r4, #158	; 0x9e
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2200      	movs	r2, #0
 80029aa:	801a      	strh	r2, [r3, #0]
 80029ac:	239c      	movs	r3, #156	; 0x9c
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	801a      	strh	r2, [r3, #0]

					searchStr = "CONNECT";
 80029b4:	4bae      	ldr	r3, [pc, #696]	; (8002c70 <update_module_firmware+0x3e8>)
 80029b6:	19b9      	adds	r1, r7, r6
 80029b8:	600b      	str	r3, [r1, #0]
					startIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, (uint16_t)strlen((char*)gsm_data));
 80029ba:	19b9      	adds	r1, r7, r6
 80029bc:	680b      	ldr	r3, [r1, #0]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7fd fba2 	bl	8000108 <strlen>
 80029c4:	0003      	movs	r3, r0
 80029c6:	b29d      	uxth	r5, r3
 80029c8:	4ba7      	ldr	r3, [pc, #668]	; (8002c68 <update_module_firmware+0x3e0>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fd fb9c 	bl	8000108 <strlen>
 80029d0:	0003      	movs	r3, r0
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	193c      	adds	r4, r7, r4
 80029d6:	4aa4      	ldr	r2, [pc, #656]	; (8002c68 <update_module_firmware+0x3e0>)
 80029d8:	19b9      	adds	r1, r7, r6
 80029da:	6808      	ldr	r0, [r1, #0]
 80029dc:	0029      	movs	r1, r5
 80029de:	f7ff fee3 	bl	80027a8 <getIndexOf>
 80029e2:	0003      	movs	r3, r0
 80029e4:	8023      	strh	r3, [r4, #0]

					searchStr = "OK";
 80029e6:	4ba3      	ldr	r3, [pc, #652]	; (8002c74 <update_module_firmware+0x3ec>)
 80029e8:	19b9      	adds	r1, r7, r6
 80029ea:	600b      	str	r3, [r1, #0]
					endIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, (uint16_t)strlen((char*)gsm_data));
 80029ec:	19b9      	adds	r1, r7, r6
 80029ee:	680b      	ldr	r3, [r1, #0]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7fd fb89 	bl	8000108 <strlen>
 80029f6:	0003      	movs	r3, r0
 80029f8:	b29d      	uxth	r5, r3
 80029fa:	4b9b      	ldr	r3, [pc, #620]	; (8002c68 <update_module_firmware+0x3e0>)
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7fd fb83 	bl	8000108 <strlen>
 8002a02:	0003      	movs	r3, r0
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	229c      	movs	r2, #156	; 0x9c
 8002a08:	18bc      	adds	r4, r7, r2
 8002a0a:	4a97      	ldr	r2, [pc, #604]	; (8002c68 <update_module_firmware+0x3e0>)
 8002a0c:	19b9      	adds	r1, r7, r6
 8002a0e:	6808      	ldr	r0, [r1, #0]
 8002a10:	0029      	movs	r1, r5
 8002a12:	f7ff fec9 	bl	80027a8 <getIndexOf>
 8002a16:	0003      	movs	r3, r0
 8002a18:	8023      	strh	r3, [r4, #0]


					if(startIndex > 0)
 8002a1a:	249e      	movs	r4, #158	; 0x9e
 8002a1c:	193b      	adds	r3, r7, r4
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d100      	bne.n	8002a26 <update_module_firmware+0x19e>
 8002a24:	e17c      	b.n	8002d20 <update_module_firmware+0x498>
					{

						////////FETCH UPDATE URL
						for(uint16_t j=0, index=(startIndex+3); index<(endIndex-3); j++, index++)
 8002a26:	23a6      	movs	r3, #166	; 0xa6
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	801a      	strh	r2, [r3, #0]
 8002a2e:	23a4      	movs	r3, #164	; 0xa4
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	193a      	adds	r2, r7, r4
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	3203      	adds	r2, #3
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	e013      	b.n	8002a64 <update_module_firmware+0x1dc>
						{
							update_url[j] = gsm_data[index];
 8002a3c:	20a4      	movs	r0, #164	; 0xa4
 8002a3e:	183b      	adds	r3, r7, r0
 8002a40:	881a      	ldrh	r2, [r3, #0]
 8002a42:	24a6      	movs	r4, #166	; 0xa6
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	4987      	ldr	r1, [pc, #540]	; (8002c68 <update_module_firmware+0x3e0>)
 8002a4a:	5c89      	ldrb	r1, [r1, r2]
 8002a4c:	1d3a      	adds	r2, r7, #4
 8002a4e:	54d1      	strb	r1, [r2, r3]
						for(uint16_t j=0, index=(startIndex+3); index<(endIndex-3); j++, index++)
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	3201      	adds	r2, #1
 8002a58:	801a      	strh	r2, [r3, #0]
 8002a5a:	183b      	adds	r3, r7, r0
 8002a5c:	881a      	ldrh	r2, [r3, #0]
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	3201      	adds	r2, #1
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	23a4      	movs	r3, #164	; 0xa4
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	239c      	movs	r3, #156	; 0x9c
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	429a      	cmp	r2, r3
 8002a74:	dbe2      	blt.n	8002a3c <update_module_firmware+0x1b4>
						}

						send_text_to_usb("\r\nUpdating BG96 Firmware Please Wait!\r\n\0");
 8002a76:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <update_module_firmware+0x3f0>)
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fe fceb 	bl	8001454 <send_text_to_usb>

						flush_tx_string();
 8002a7e:	f7fe fd41 	bl	8001504 <flush_tx_string>
						sprintf((char*)tx_string, "AT+QFOTADL=\"%s\"\r\n\0", update_url);
 8002a82:	1d3a      	adds	r2, r7, #4
 8002a84:	497d      	ldr	r1, [pc, #500]	; (8002c7c <update_module_firmware+0x3f4>)
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <update_module_firmware+0x3a8>)
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f010 fc11 	bl	80132b0 <siprintf>



						plus_enable=0;
 8002a8e:	4b72      	ldr	r3, [pc, #456]	; (8002c58 <update_module_firmware+0x3d0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

						if(at_cmd_send((char*)tx_string,"HTTPSTART","ERROR", 600, 0))
 8002a94:	2396      	movs	r3, #150	; 0x96
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4a5f      	ldr	r2, [pc, #380]	; (8002c18 <update_module_firmware+0x390>)
 8002a9a:	4979      	ldr	r1, [pc, #484]	; (8002c80 <update_module_firmware+0x3f8>)
 8002a9c:	4864      	ldr	r0, [pc, #400]	; (8002c30 <update_module_firmware+0x3a8>)
 8002a9e:	2400      	movs	r4, #0
 8002aa0:	9400      	str	r4, [sp, #0]
 8002aa2:	f7ff fb91 	bl	80021c8 <at_cmd_send>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d100      	bne.n	8002aac <update_module_firmware+0x224>
 8002aaa:	e136      	b.n	8002d1a <update_module_firmware+0x492>
						{
							uint16_t searchIndex=0;
 8002aac:	239a      	movs	r3, #154	; 0x9a
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	801a      	strh	r2, [r3, #0]

							plus_enable=1;
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <update_module_firmware+0x3d0>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]

							searchStr = "\"HTTPEND\"";
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <update_module_firmware+0x3fc>)
 8002abc:	22a0      	movs	r2, #160	; 0xa0
 8002abe:	18ba      	adds	r2, r7, r2
 8002ac0:	6013      	str	r3, [r2, #0]

							while(1)
							{
								searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002ac2:	25a0      	movs	r5, #160	; 0xa0
 8002ac4:	197b      	adds	r3, r7, r5
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fd fb1d 	bl	8000108 <strlen>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <update_module_firmware+0x400>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	269a      	movs	r6, #154	; 0x9a
 8002adc:	19bc      	adds	r4, r7, r6
 8002ade:	4a62      	ldr	r2, [pc, #392]	; (8002c68 <update_module_firmware+0x3e0>)
 8002ae0:	1978      	adds	r0, r7, r5
 8002ae2:	6800      	ldr	r0, [r0, #0]
 8002ae4:	f7ff fe60 	bl	80027a8 <getIndexOf>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	8023      	strh	r3, [r4, #0]

								if(searchIndex!=0)
 8002aec:	0034      	movs	r4, r6
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0e5      	beq.n	8002ac2 <update_module_firmware+0x23a>
								{
									plus_enable=0;
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <update_module_firmware+0x3d0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
									break;
 8002afc:	46c0      	nop			; (mov r8, r8)
								}
							}

							HAL_Delay(10);
 8002afe:	200a      	movs	r0, #10
 8002b00:	f005 fc18 	bl	8008334 <HAL_Delay>

							searchStr = "\"HTTPEND\",0";
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <update_module_firmware+0x404>)
 8002b06:	197a      	adds	r2, r7, r5
 8002b08:	6013      	str	r3, [r2, #0]
							searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7fd fafa 	bl	8000108 <strlen>
 8002b14:	0003      	movs	r3, r0
 8002b16:	b299      	uxth	r1, r3
 8002b18:	4b5b      	ldr	r3, [pc, #364]	; (8002c88 <update_module_firmware+0x400>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	0026      	movs	r6, r4
 8002b22:	193c      	adds	r4, r7, r4
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <update_module_firmware+0x3e0>)
 8002b26:	1978      	adds	r0, r7, r5
 8002b28:	6800      	ldr	r0, [r0, #0]
 8002b2a:	f7ff fe3d 	bl	80027a8 <getIndexOf>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	8023      	strh	r3, [r4, #0]



							if(searchIndex==0)
 8002b32:	19bb      	adds	r3, r7, r6
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d117      	bne.n	8002b6a <update_module_firmware+0x2e2>
							{
								flush_array((char*)temp_data, sizeof(temp_data)/sizeof(temp_data[0]));
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <update_module_firmware+0x408>)
 8002b3c:	21ff      	movs	r1, #255	; 0xff
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f7fe fcbc 	bl	80014bc <flush_array>
								sprintf((char*)temp_data, "\r\nFail\r\nSearch:%s  Index:%u  gsmdata:%s\r\n\0", searchStr, searchIndex, gsm_data);
 8002b44:	239a      	movs	r3, #154	; 0x9a
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	881c      	ldrh	r4, [r3, #0]
 8002b4a:	23a0      	movs	r3, #160	; 0xa0
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4950      	ldr	r1, [pc, #320]	; (8002c94 <update_module_firmware+0x40c>)
 8002b52:	484f      	ldr	r0, [pc, #316]	; (8002c90 <update_module_firmware+0x408>)
 8002b54:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <update_module_firmware+0x3e0>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	0023      	movs	r3, r4
 8002b5a:	f010 fba9 	bl	80132b0 <siprintf>
								send_text_to_usb((char*)temp_data);
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <update_module_firmware+0x408>)
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7fe fc77 	bl	8001454 <send_text_to_usb>

								return 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e0de      	b.n	8002d28 <update_module_firmware+0x4a0>
							}

							plus_enable=1;
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <update_module_firmware+0x3d0>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]

							searchStr = "\"END\"";
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <update_module_firmware+0x410>)
 8002b72:	22a0      	movs	r2, #160	; 0xa0
 8002b74:	18ba      	adds	r2, r7, r2
 8002b76:	6013      	str	r3, [r2, #0]

							while(1)
							{
								searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002b78:	25a0      	movs	r5, #160	; 0xa0
 8002b7a:	197b      	adds	r3, r7, r5
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7fd fac2 	bl	8000108 <strlen>
 8002b84:	0003      	movs	r3, r0
 8002b86:	b299      	uxth	r1, r3
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <update_module_firmware+0x400>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	269a      	movs	r6, #154	; 0x9a
 8002b92:	19bc      	adds	r4, r7, r6
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <update_module_firmware+0x3e0>)
 8002b96:	1978      	adds	r0, r7, r5
 8002b98:	6800      	ldr	r0, [r0, #0]
 8002b9a:	f7ff fe05 	bl	80027a8 <getIndexOf>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	8023      	strh	r3, [r4, #0]

//								flush_array((char*)temp_data, sizeof(temp_data)/sizeof(temp_data[0]));
//								sprintf((char*)temp_data, "\r\nwhile\r\nSearch:%s  Index:%u  gsmdata:%s\r\n\0", searchStr, searchIndex, gsm_data);
//								send_text_to_usb((char*)temp_data);

								if(searchIndex!=0)
 8002ba2:	19bb      	adds	r3, r7, r6
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d100      	bne.n	8002bac <update_module_firmware+0x324>
								searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002baa:	e7e5      	b.n	8002b78 <update_module_firmware+0x2f0>
								{
									break;
 8002bac:	46c0      	nop			; (mov r8, r8)
//								HAL_Delay(100);
							}



							HAL_Delay(10);
 8002bae:	200a      	movs	r0, #10
 8002bb0:	f005 fbc0 	bl	8008334 <HAL_Delay>

							searchStr = "\"END\",0";
 8002bb4:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <update_module_firmware+0x414>)
 8002bb6:	25a0      	movs	r5, #160	; 0xa0
 8002bb8:	197a      	adds	r2, r7, r5
 8002bba:	6013      	str	r3, [r2, #0]
							searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7fd faa1 	bl	8000108 <strlen>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <update_module_firmware+0x400>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	269a      	movs	r6, #154	; 0x9a
 8002bd4:	19bc      	adds	r4, r7, r6
 8002bd6:	4a24      	ldr	r2, [pc, #144]	; (8002c68 <update_module_firmware+0x3e0>)
 8002bd8:	1978      	adds	r0, r7, r5
 8002bda:	6800      	ldr	r0, [r0, #0]
 8002bdc:	f7ff fde4 	bl	80027a8 <getIndexOf>
 8002be0:	0003      	movs	r3, r0
 8002be2:	8023      	strh	r3, [r4, #0]

							if(searchIndex==0)
 8002be4:	19bb      	adds	r3, r7, r6
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d159      	bne.n	8002ca0 <update_module_firmware+0x418>
							{
								flush_array((char*)temp_data, sizeof(temp_data)/sizeof(temp_data[0]));
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <update_module_firmware+0x408>)
 8002bee:	21ff      	movs	r1, #255	; 0xff
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe fc63 	bl	80014bc <flush_array>
								sprintf((char*)temp_data, "\r\nFail\r\nSearch:%s  Index:%u  gsmdata:%s\r\n\0", searchStr, searchIndex, gsm_data);
 8002bf6:	19bb      	adds	r3, r7, r6
 8002bf8:	881c      	ldrh	r4, [r3, #0]
 8002bfa:	197b      	adds	r3, r7, r5
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4925      	ldr	r1, [pc, #148]	; (8002c94 <update_module_firmware+0x40c>)
 8002c00:	4823      	ldr	r0, [pc, #140]	; (8002c90 <update_module_firmware+0x408>)
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <update_module_firmware+0x3e0>)
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	0023      	movs	r3, r4
 8002c08:	f010 fb52 	bl	80132b0 <siprintf>
								send_text_to_usb((char*)temp_data);
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <update_module_firmware+0x408>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7fe fc20 	bl	8001454 <send_text_to_usb>

								return 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e087      	b.n	8002d28 <update_module_firmware+0x4a0>
 8002c18:	08014b24 	.word	0x08014b24
 8002c1c:	08014b2c 	.word	0x08014b2c
 8002c20:	08015018 	.word	0x08015018
 8002c24:	08015038 	.word	0x08015038
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	08014d88 	.word	0x08014d88
 8002c30:	20000424 	.word	0x20000424
 8002c34:	08014db0 	.word	0x08014db0
 8002c38:	0801505c 	.word	0x0801505c
 8002c3c:	08015068 	.word	0x08015068
 8002c40:	200009e8 	.word	0x200009e8
 8002c44:	20000028 	.word	0x20000028
 8002c48:	08015080 	.word	0x08015080
 8002c4c:	080150b0 	.word	0x080150b0
 8002c50:	080150c0 	.word	0x080150c0
 8002c54:	080150cc 	.word	0x080150cc
 8002c58:	2000006c 	.word	0x2000006c
 8002c5c:	080150e0 	.word	0x080150e0
 8002c60:	080150f0 	.word	0x080150f0
 8002c64:	08015104 	.word	0x08015104
 8002c68:	200005b4 	.word	0x200005b4
 8002c6c:	2000175c 	.word	0x2000175c
 8002c70:	08015114 	.word	0x08015114
 8002c74:	0801511c 	.word	0x0801511c
 8002c78:	08015120 	.word	0x08015120
 8002c7c:	0801514c 	.word	0x0801514c
 8002c80:	08015160 	.word	0x08015160
 8002c84:	0801516c 	.word	0x0801516c
 8002c88:	200002de 	.word	0x200002de
 8002c8c:	08015178 	.word	0x08015178
 8002c90:	200009fc 	.word	0x200009fc
 8002c94:	08015184 	.word	0x08015184
 8002c98:	080151b0 	.word	0x080151b0
 8002c9c:	080151b8 	.word	0x080151b8
							}

							flush_gsm_array();
 8002ca0:	f7fe fc60 	bl	8001564 <flush_gsm_array>

							plus_enable=0;
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <update_module_firmware+0x4a8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]

							searchStr = "APP RDY";
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <update_module_firmware+0x4ac>)
 8002cac:	22a0      	movs	r2, #160	; 0xa0
 8002cae:	18ba      	adds	r2, r7, r2
 8002cb0:	6013      	str	r3, [r2, #0]

							while(1)
							{
								searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002cb2:	25a0      	movs	r5, #160	; 0xa0
 8002cb4:	197b      	adds	r3, r7, r5
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7fd fa25 	bl	8000108 <strlen>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	b299      	uxth	r1, r3
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <update_module_firmware+0x4b0>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	269a      	movs	r6, #154	; 0x9a
 8002ccc:	19bc      	adds	r4, r7, r6
 8002cce:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <update_module_firmware+0x4b4>)
 8002cd0:	1978      	adds	r0, r7, r5
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	f7ff fd68 	bl	80027a8 <getIndexOf>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	8023      	strh	r3, [r4, #0]

								flush_array((char*)temp_data, sizeof(temp_data)/sizeof(temp_data[0]));
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <update_module_firmware+0x4b8>)
 8002cde:	21ff      	movs	r1, #255	; 0xff
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe fbeb 	bl	80014bc <flush_array>
								sprintf((char*)temp_data, "\r\nwhile\r\nSearch:%s  Index:%u  gsmdata:%s\r\n\0", searchStr, searchIndex, gsm_data);
 8002ce6:	19bb      	adds	r3, r7, r6
 8002ce8:	881c      	ldrh	r4, [r3, #0]
 8002cea:	197b      	adds	r3, r7, r5
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4915      	ldr	r1, [pc, #84]	; (8002d44 <update_module_firmware+0x4bc>)
 8002cf0:	4813      	ldr	r0, [pc, #76]	; (8002d40 <update_module_firmware+0x4b8>)
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <update_module_firmware+0x4b4>)
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	0023      	movs	r3, r4
 8002cf8:	f010 fada 	bl	80132b0 <siprintf>
								send_text_to_usb((char*)temp_data);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <update_module_firmware+0x4b8>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fe fba8 	bl	8001454 <send_text_to_usb>

								if(searchIndex!=0)
 8002d04:	19bb      	adds	r3, r7, r6
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d100      	bne.n	8002d0e <update_module_firmware+0x486>
								searchIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, gsm_count+1);
 8002d0c:	e7d1      	b.n	8002cb2 <update_module_firmware+0x42a>
								{
									break;
 8002d0e:	46c0      	nop			; (mov r8, r8)
								}

//								HAL_Delay(100);
							}

							plus_enable=1;
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <update_module_firmware+0x4a8>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
							return 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e006      	b.n	8002d28 <update_module_firmware+0x4a0>
						}

						plus_enable=1;
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <update_module_firmware+0x4a8>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
					}
				}

				plus_enable=1;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <update_module_firmware+0x4a8>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return 0;
 8002d26:	2300      	movs	r3, #0

}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b02b      	add	sp, #172	; 0xac
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d30:	2000006c 	.word	0x2000006c
 8002d34:	080151c0 	.word	0x080151c0
 8002d38:	200002de 	.word	0x200002de
 8002d3c:	200005b4 	.word	0x200005b4
 8002d40:	200009fc 	.word	0x200009fc
 8002d44:	080151c8 	.word	0x080151c8

08002d48 <update_device_firmware>:


_Bool update_device_firmware(void)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	46c6      	mov	lr, r8
 8002d4c:	b500      	push	{lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
	//////////   Device Firmware Update ////////
	deactivate_pdp();
 8002d52:	f7fe fc89 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8002d56:	4a91      	ldr	r2, [pc, #580]	; (8002f9c <update_device_firmware+0x254>)
 8002d58:	4991      	ldr	r1, [pc, #580]	; (8002fa0 <update_device_firmware+0x258>)
 8002d5a:	4892      	ldr	r0, [pc, #584]	; (8002fa4 <update_device_firmware+0x25c>)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2305      	movs	r3, #5
 8002d62:	f7ff fa31 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 8002d66:	4a8d      	ldr	r2, [pc, #564]	; (8002f9c <update_device_firmware+0x254>)
 8002d68:	498d      	ldr	r1, [pc, #564]	; (8002fa0 <update_device_firmware+0x258>)
 8002d6a:	488f      	ldr	r0, [pc, #572]	; (8002fa8 <update_device_firmware+0x260>)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2305      	movs	r3, #5
 8002d72:	f7ff fa29 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 8002d76:	f7fe fbc5 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8002d7a:	4a8c      	ldr	r2, [pc, #560]	; (8002fac <update_device_firmware+0x264>)
 8002d7c:	498c      	ldr	r1, [pc, #560]	; (8002fb0 <update_device_firmware+0x268>)
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <update_device_firmware+0x26c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f010 fa95 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8002d86:	4a85      	ldr	r2, [pc, #532]	; (8002f9c <update_device_firmware+0x254>)
 8002d88:	4985      	ldr	r1, [pc, #532]	; (8002fa0 <update_device_firmware+0x258>)
 8002d8a:	488a      	ldr	r0, [pc, #552]	; (8002fb4 <update_device_firmware+0x26c>)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2305      	movs	r3, #5
 8002d92:	f7ff fa19 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8002d96:	f7fe fc4d 	bl	8001634 <activate_pdp>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d100      	bne.n	8002da0 <update_device_firmware+0x58>
 8002d9e:	e0f6      	b.n	8002f8e <update_device_firmware+0x246>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8002da0:	4a7e      	ldr	r2, [pc, #504]	; (8002f9c <update_device_firmware+0x254>)
 8002da2:	497f      	ldr	r1, [pc, #508]	; (8002fa0 <update_device_firmware+0x258>)
 8002da4:	4884      	ldr	r0, [pc, #528]	; (8002fb8 <update_device_firmware+0x270>)
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2305      	movs	r3, #5
 8002dac:	f7ff fa0c 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 8002db0:	4a7a      	ldr	r2, [pc, #488]	; (8002f9c <update_device_firmware+0x254>)
 8002db2:	4982      	ldr	r1, [pc, #520]	; (8002fbc <update_device_firmware+0x274>)
 8002db4:	4882      	ldr	r0, [pc, #520]	; (8002fc0 <update_device_firmware+0x278>)
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2346      	movs	r3, #70	; 0x46
 8002dbc:	f7ff fa04 	bl	80021c8 <at_cmd_send>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d100      	bne.n	8002dc6 <update_device_firmware+0x7e>
 8002dc4:	e0e3      	b.n	8002f8e <update_device_firmware+0x246>
		{

			flush_tx_string();
 8002dc6:	f7fe fb9d 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/df?token=%s", device_id, http_token);
 8002dca:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <update_device_firmware+0x27c>)
 8002dcc:	4a7e      	ldr	r2, [pc, #504]	; (8002fc8 <update_device_firmware+0x280>)
 8002dce:	497f      	ldr	r1, [pc, #508]	; (8002fcc <update_device_firmware+0x284>)
 8002dd0:	4878      	ldr	r0, [pc, #480]	; (8002fb4 <update_device_firmware+0x26c>)
 8002dd2:	f010 fa6d 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 8002dd6:	4a71      	ldr	r2, [pc, #452]	; (8002f9c <update_device_firmware+0x254>)
 8002dd8:	4971      	ldr	r1, [pc, #452]	; (8002fa0 <update_device_firmware+0x258>)
 8002dda:	4876      	ldr	r0, [pc, #472]	; (8002fb4 <update_device_firmware+0x26c>)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2346      	movs	r3, #70	; 0x46
 8002de2:	f7ff f9f1 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8002de6:	4a6d      	ldr	r2, [pc, #436]	; (8002f9c <update_device_firmware+0x254>)
 8002de8:	496d      	ldr	r1, [pc, #436]	; (8002fa0 <update_device_firmware+0x258>)
 8002dea:	4879      	ldr	r0, [pc, #484]	; (8002fd0 <update_device_firmware+0x288>)
 8002dec:	2300      	movs	r3, #0
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2305      	movs	r3, #5
 8002df2:	f7ff f9e9 	bl	80021c8 <at_cmd_send>

			plus_enable=1;
 8002df6:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <update_device_firmware+0x28c>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0,200","ERROR",70,0))
 8002dfc:	4a67      	ldr	r2, [pc, #412]	; (8002f9c <update_device_firmware+0x254>)
 8002dfe:	4976      	ldr	r1, [pc, #472]	; (8002fd8 <update_device_firmware+0x290>)
 8002e00:	4876      	ldr	r0, [pc, #472]	; (8002fdc <update_device_firmware+0x294>)
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2346      	movs	r3, #70	; 0x46
 8002e08:	f7ff f9de 	bl	80021c8 <at_cmd_send>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d100      	bne.n	8002e12 <update_device_firmware+0xca>
 8002e10:	e0bd      	b.n	8002f8e <update_device_firmware+0x246>
			{
				HAL_Delay(20);
 8002e12:	2014      	movs	r0, #20
 8002e14:	f005 fa8e 	bl	8008334 <HAL_Delay>

				// To fetch file sizeof from response +QHTTPGET: 0,200,45268
				unsigned char response_size[8]={0};
 8002e18:	003b      	movs	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
					char *searchStr = {0};
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
					uint16_t startIndex = 0, endIndex = 0;
 8002e26:	260a      	movs	r6, #10
 8002e28:	19bb      	adds	r3, r7, r6
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	2308      	movs	r3, #8
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	801a      	strh	r2, [r3, #0]
					_Bool valid_file_size=0;
 8002e36:	2117      	movs	r1, #23
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]

					searchStr = "0,200,";
 8002e3e:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <update_device_firmware+0x298>)
 8002e40:	60fb      	str	r3, [r7, #12]
					startIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, (uint16_t)strlen((char*)gsm_data));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fd f95f 	bl	8000108 <strlen>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4688      	mov	r8, r1
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <update_device_firmware+0x29c>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7fd f958 	bl	8000108 <strlen>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	19be      	adds	r6, r7, r6
 8002e5e:	4a61      	ldr	r2, [pc, #388]	; (8002fe4 <update_device_firmware+0x29c>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	4641      	mov	r1, r8
 8002e64:	f7ff fca0 	bl	80027a8 <getIndexOf>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	8033      	strh	r3, [r6, #0]

					searchStr = "\r\n";
 8002e6c:	4b5e      	ldr	r3, [pc, #376]	; (8002fe8 <update_device_firmware+0x2a0>)
 8002e6e:	60fb      	str	r3, [r7, #12]
					endIndex = getIndexOf(searchStr, (uint16_t)strlen(searchStr), (char*)gsm_data, (uint16_t)strlen((char*)gsm_data));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd f948 	bl	8000108 <strlen>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	b299      	uxth	r1, r3
 8002e7c:	4688      	mov	r8, r1
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <update_device_firmware+0x29c>)
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd f941 	bl	8000108 <strlen>
 8002e86:	0003      	movs	r3, r0
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	18be      	adds	r6, r7, r2
 8002e8e:	4a55      	ldr	r2, [pc, #340]	; (8002fe4 <update_device_firmware+0x29c>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	4641      	mov	r1, r8
 8002e94:	f7ff fc88 	bl	80027a8 <getIndexOf>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	8033      	strh	r3, [r6, #0]


					if(startIndex > 0)
 8002e9c:	260a      	movs	r6, #10
 8002e9e:	19bb      	adds	r3, r7, r6
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d03c      	beq.n	8002f20 <update_device_firmware+0x1d8>
					{

						////////FETCH UPDATE URL
						for(uint16_t j=0, index=(startIndex+1); index<(endIndex-1); j++, index++)
 8002ea6:	2314      	movs	r3, #20
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	2312      	movs	r3, #18
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	19ba      	adds	r2, r7, r6
 8002eb4:	8812      	ldrh	r2, [r2, #0]
 8002eb6:	3201      	adds	r2, #1
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	e013      	b.n	8002ee4 <update_device_firmware+0x19c>
						{
							response_size[j] = gsm_data[index];
 8002ebc:	2012      	movs	r0, #18
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	2614      	movs	r6, #20
 8002ec4:	19bb      	adds	r3, r7, r6
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	4946      	ldr	r1, [pc, #280]	; (8002fe4 <update_device_firmware+0x29c>)
 8002eca:	5c89      	ldrb	r1, [r1, r2]
 8002ecc:	003a      	movs	r2, r7
 8002ece:	54d1      	strb	r1, [r2, r3]
						for(uint16_t j=0, index=(startIndex+1); index<(endIndex-1); j++, index++)
 8002ed0:	19bb      	adds	r3, r7, r6
 8002ed2:	881a      	ldrh	r2, [r3, #0]
 8002ed4:	19bb      	adds	r3, r7, r6
 8002ed6:	3201      	adds	r2, #1
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	183b      	adds	r3, r7, r0
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	3201      	adds	r2, #1
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	2312      	movs	r3, #18
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	2308      	movs	r3, #8
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe2      	blt.n	8002ebc <update_device_firmware+0x174>
						}

						file_size = atol((char*)response_size);
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f00f ff13 	bl	8012d24 <atol>
 8002efe:	0003      	movs	r3, r0
 8002f00:	001a      	movs	r2, r3
 8002f02:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <update_device_firmware+0x2a4>)
 8002f04:	601a      	str	r2, [r3, #0]

						//// if file size is valid  i.e. > 30000 bytes
						if(file_size > 30000)
 8002f06:	4b39      	ldr	r3, [pc, #228]	; (8002fec <update_device_firmware+0x2a4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <update_device_firmware+0x2a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d904      	bls.n	8002f1a <update_device_firmware+0x1d2>
						{
							valid_file_size = 1;
 8002f10:	2317      	movs	r3, #23
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e002      	b.n	8002f20 <update_device_firmware+0x1d8>
						}
						else
						{
							update_device_firmware_flag = 0;
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <update_device_firmware+0x2ac>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
						}
					}

				plus_enable=0;
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <update_device_firmware+0x28c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]

				if(valid_file_size)
 8002f26:	2317      	movs	r3, #23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02b      	beq.n	8002f88 <update_device_firmware+0x240>
				{
					///// DELETE OLD FILE
					at_cmd_send("AT+QFDEL=\"blipgo.bin\"\r\n\0","OK\r\n","ERROR",5,0); ///////DELETE OLD FILE
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <update_device_firmware+0x254>)
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <update_device_firmware+0x258>)
 8002f34:	4830      	ldr	r0, [pc, #192]	; (8002ff8 <update_device_firmware+0x2b0>)
 8002f36:	2300      	movs	r3, #0
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	f7ff f944 	bl	80021c8 <at_cmd_send>

					////// download the bin file content to a file directly
					if(at_cmd_send("AT+QHTTPREADFILE=\"blipgo.bin\",80\r\n\0","QHTTPREADFILE: 0\r\n","ERROR", 120, 0))//+QHTTPREAD: 0
 8002f40:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <update_device_firmware+0x254>)
 8002f42:	492e      	ldr	r1, [pc, #184]	; (8002ffc <update_device_firmware+0x2b4>)
 8002f44:	482e      	ldr	r0, [pc, #184]	; (8003000 <update_device_firmware+0x2b8>)
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2378      	movs	r3, #120	; 0x78
 8002f4c:	f7ff f93c 	bl	80021c8 <at_cmd_send>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d019      	beq.n	8002f88 <update_device_firmware+0x240>
					{
						/// add cfun 0
						at_cmd_send("AT+CFUN=0\r\n\0","OK\r\n","ERROR",10,0);/////////////MINIMUM FUNCTIONALITY MODE
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <update_device_firmware+0x254>)
 8002f56:	4912      	ldr	r1, [pc, #72]	; (8002fa0 <update_device_firmware+0x258>)
 8002f58:	482a      	ldr	r0, [pc, #168]	; (8003004 <update_device_firmware+0x2bc>)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	230a      	movs	r3, #10
 8002f60:	f7ff f932 	bl	80021c8 <at_cmd_send>

						//// IF FILE DOWNLOAD COMPLETE THEN FIRMWARE WILL BE UPDATED
						update_device_firmware_flag=0;
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <update_device_firmware+0x2ac>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

						// UPDATE CV IF ALL CHANGES DONE
						update_cv_value();
 8002f6a:	f003 f90f 	bl	800618c <update_cv_value>

						__Call_BootLoader_(1 , (uint64_t)file_size);
 8002f6e:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <update_device_firmware+0x2a4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	001c      	movs	r4, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	001d      	movs	r5, r3
 8002f78:	0022      	movs	r2, r4
 8002f7a:	002b      	movs	r3, r5
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f7ff fa84 	bl	800248c <__Call_BootLoader_>
						return 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e003      	b.n	8002f90 <update_device_firmware+0x248>
					}
				}
				plus_enable=1;
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <update_device_firmware+0x28c>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
//				while(1);
			}
		}
	}

	return 0;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b006      	add	sp, #24
 8002f96:	bc80      	pop	{r7}
 8002f98:	46b8      	mov	r8, r7
 8002f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9c:	08014b24 	.word	0x08014b24
 8002fa0:	08014b2c 	.word	0x08014b2c
 8002fa4:	08015018 	.word	0x08015018
 8002fa8:	08015038 	.word	0x08015038
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	08014d88 	.word	0x08014d88
 8002fb4:	20000424 	.word	0x20000424
 8002fb8:	08014db0 	.word	0x08014db0
 8002fbc:	0801505c 	.word	0x0801505c
 8002fc0:	08015068 	.word	0x08015068
 8002fc4:	200009e8 	.word	0x200009e8
 8002fc8:	20000028 	.word	0x20000028
 8002fcc:	080151f4 	.word	0x080151f4
 8002fd0:	080150b0 	.word	0x080150b0
 8002fd4:	2000006c 	.word	0x2000006c
 8002fd8:	08015224 	.word	0x08015224
 8002fdc:	080150cc 	.word	0x080150cc
 8002fe0:	08015234 	.word	0x08015234
 8002fe4:	200005b4 	.word	0x200005b4
 8002fe8:	0801523c 	.word	0x0801523c
 8002fec:	200002f4 	.word	0x200002f4
 8002ff0:	00007530 	.word	0x00007530
 8002ff4:	20001765 	.word	0x20001765
 8002ff8:	08015240 	.word	0x08015240
 8002ffc:	0801525c 	.word	0x0801525c
 8003000:	08015270 	.word	0x08015270
 8003004:	08014f08 	.word	0x08014f08

08003008 <ping_service>:


_Bool ping_service(void)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b091      	sub	sp, #68	; 0x44
 800300c:	af08      	add	r7, sp, #32
	//////////   PING SERVICE ////////
	deactivate_pdp();
 800300e:	f7fe fb2b 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8003012:	4a79      	ldr	r2, [pc, #484]	; (80031f8 <ping_service+0x1f0>)
 8003014:	4979      	ldr	r1, [pc, #484]	; (80031fc <ping_service+0x1f4>)
 8003016:	487a      	ldr	r0, [pc, #488]	; (8003200 <ping_service+0x1f8>)
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2305      	movs	r3, #5
 800301e:	f7ff f8d3 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",1\r\n\0","OK\r\n","ERROR",5,0);
 8003022:	4a75      	ldr	r2, [pc, #468]	; (80031f8 <ping_service+0x1f0>)
 8003024:	4975      	ldr	r1, [pc, #468]	; (80031fc <ping_service+0x1f4>)
 8003026:	4877      	ldr	r0, [pc, #476]	; (8003204 <ping_service+0x1fc>)
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2305      	movs	r3, #5
 800302e:	f7ff f8cb 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 8003032:	f7fe fa67 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003036:	4a74      	ldr	r2, [pc, #464]	; (8003208 <ping_service+0x200>)
 8003038:	4974      	ldr	r1, [pc, #464]	; (800320c <ping_service+0x204>)
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <ping_service+0x208>)
 800303c:	0018      	movs	r0, r3
 800303e:	f010 f937 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8003042:	4a6d      	ldr	r2, [pc, #436]	; (80031f8 <ping_service+0x1f0>)
 8003044:	496d      	ldr	r1, [pc, #436]	; (80031fc <ping_service+0x1f4>)
 8003046:	4872      	ldr	r0, [pc, #456]	; (8003210 <ping_service+0x208>)
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2305      	movs	r3, #5
 800304e:	f7ff f8bb 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8003052:	f7fe faef 	bl	8001634 <activate_pdp>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d100      	bne.n	800305c <ping_service+0x54>
 800305a:	e219      	b.n	8003490 <ping_service+0x488>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 800305c:	4a66      	ldr	r2, [pc, #408]	; (80031f8 <ping_service+0x1f0>)
 800305e:	4967      	ldr	r1, [pc, #412]	; (80031fc <ping_service+0x1f4>)
 8003060:	486c      	ldr	r0, [pc, #432]	; (8003214 <ping_service+0x20c>)
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2305      	movs	r3, #5
 8003068:	f7ff f8ae 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=27,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 800306c:	4a62      	ldr	r2, [pc, #392]	; (80031f8 <ping_service+0x1f0>)
 800306e:	496a      	ldr	r1, [pc, #424]	; (8003218 <ping_service+0x210>)
 8003070:	486a      	ldr	r0, [pc, #424]	; (800321c <ping_service+0x214>)
 8003072:	2300      	movs	r3, #0
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2346      	movs	r3, #70	; 0x46
 8003078:	f7ff f8a6 	bl	80021c8 <at_cmd_send>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d100      	bne.n	8003082 <ping_service+0x7a>
 8003080:	e206      	b.n	8003490 <ping_service+0x488>
		{
			at_cmd_send("https://shark.carematix.com\r\n\0","OK\r\n","ERROR",70,0);
 8003082:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <ping_service+0x1f0>)
 8003084:	495d      	ldr	r1, [pc, #372]	; (80031fc <ping_service+0x1f4>)
 8003086:	4866      	ldr	r0, [pc, #408]	; (8003220 <ping_service+0x218>)
 8003088:	2300      	movs	r3, #0
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2346      	movs	r3, #70	; 0x46
 800308e:	f7ff f89b 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8003092:	4a59      	ldr	r2, [pc, #356]	; (80031f8 <ping_service+0x1f0>)
 8003094:	4959      	ldr	r1, [pc, #356]	; (80031fc <ping_service+0x1f4>)
 8003096:	4863      	ldr	r0, [pc, #396]	; (8003224 <ping_service+0x21c>)
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2305      	movs	r3, #5
 800309e:	f7ff f893 	bl	80021c8 <at_cmd_send>


				flush_tx_string();
 80030a2:	f7fe fa2f 	bl	8001504 <flush_tx_string>
				sprintf((char*)tx_string, "POST /cs/%s HTTP/1.1\r\n\0", device_id);///////////// DEVICE ID
 80030a6:	4a60      	ldr	r2, [pc, #384]	; (8003228 <ping_service+0x220>)
 80030a8:	4960      	ldr	r1, [pc, #384]	; (800322c <ping_service+0x224>)
 80030aa:	4b59      	ldr	r3, [pc, #356]	; (8003210 <ping_service+0x208>)
 80030ac:	0018      	movs	r0, r3
 80030ae:	f010 f8ff 	bl	80132b0 <siprintf>
				sprintf((char*)tx_string, "%sHost: shark.carematix.com\r\n\0", tx_string);
 80030b2:	4a57      	ldr	r2, [pc, #348]	; (8003210 <ping_service+0x208>)
 80030b4:	495e      	ldr	r1, [pc, #376]	; (8003230 <ping_service+0x228>)
 80030b6:	4b56      	ldr	r3, [pc, #344]	; (8003210 <ping_service+0x208>)
 80030b8:	0018      	movs	r0, r3
 80030ba:	f010 f8f9 	bl	80132b0 <siprintf>
				sprintf((char*)tx_string, "%sContent-Type: application/json\r\n\0", tx_string);
 80030be:	4a54      	ldr	r2, [pc, #336]	; (8003210 <ping_service+0x208>)
 80030c0:	495c      	ldr	r1, [pc, #368]	; (8003234 <ping_service+0x22c>)
 80030c2:	4b53      	ldr	r3, [pc, #332]	; (8003210 <ping_service+0x208>)
 80030c4:	0018      	movs	r0, r3
 80030c6:	f010 f8f3 	bl	80132b0 <siprintf>
				sprintf((char*)tx_string, "%sContent-Length: 160\r\n\0", tx_string);
 80030ca:	4a51      	ldr	r2, [pc, #324]	; (8003210 <ping_service+0x208>)
 80030cc:	495a      	ldr	r1, [pc, #360]	; (8003238 <ping_service+0x230>)
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <ping_service+0x208>)
 80030d0:	0018      	movs	r0, r3
 80030d2:	f010 f8ed 	bl	80132b0 <siprintf>
				sprintf((char*)tx_string, "%sAuthorization: Basic Y2FyZW1hdGl4OnBhc3N3b3Jk\r\n\r\n\0", tx_string);
 80030d6:	4a4e      	ldr	r2, [pc, #312]	; (8003210 <ping_service+0x208>)
 80030d8:	4958      	ldr	r1, [pc, #352]	; (800323c <ping_service+0x234>)
 80030da:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <ping_service+0x208>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f010 f8e7 	bl	80132b0 <siprintf>

				/*
				{�model�:�600�,"sim":"898604051918C0024877","imei":"866425038410462","imsi":"460042513904877",�cv�:1, �fv�:�1.0�,�pv�:�1.1�,�mv�:�01.017�}
				*/
				sprintf((char*)tx_string, "%s{\"model\":\"%s\",\"sim\":\"%s\",\"imei\":\"%s\",\"imsi\":\"%s\",\"cv\":%s,\"fv\":\"%s\",\"pv\":\"%s\",\"mv\":\"%s\"}\r\n\0",
 80030e2:	4c57      	ldr	r4, [pc, #348]	; (8003240 <ping_service+0x238>)
 80030e4:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <ping_service+0x208>)
 80030e6:	4957      	ldr	r1, [pc, #348]	; (8003244 <ping_service+0x23c>)
 80030e8:	4849      	ldr	r0, [pc, #292]	; (8003210 <ping_service+0x208>)
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <ping_service+0x240>)
 80030ec:	9306      	str	r3, [sp, #24]
 80030ee:	4b57      	ldr	r3, [pc, #348]	; (800324c <ping_service+0x244>)
 80030f0:	9305      	str	r3, [sp, #20]
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <ping_service+0x248>)
 80030f4:	9304      	str	r3, [sp, #16]
 80030f6:	4b57      	ldr	r3, [pc, #348]	; (8003254 <ping_service+0x24c>)
 80030f8:	9303      	str	r3, [sp, #12]
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <ping_service+0x250>)
 80030fc:	9302      	str	r3, [sp, #8]
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <ping_service+0x254>)
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <ping_service+0x258>)
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	0023      	movs	r3, r4
 8003108:	f010 f8d2 	bl	80132b0 <siprintf>
					tx_string, blipgo_model, ccid, imei, imsi, configuration_version, firmware_version, protocol_version, module_firmware_version);


				unsigned char at_command[30]={0};
 800310c:	003b      	movs	r3, r7
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	3304      	adds	r3, #4
 8003114:	221a      	movs	r2, #26
 8003116:	2100      	movs	r1, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f00f fe33 	bl	8012d84 <memset>

//				sprintf((char*)at_command, "at+qhttpget=80,%u\r\n\0", strlen((char*)tx_string));
				sprintf((char*)at_command, "at+qhttppost=%u,80,80\r\n\0", strlen((char*)tx_string));
 800311e:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <ping_service+0x208>)
 8003120:	0018      	movs	r0, r3
 8003122:	f7fc fff1 	bl	8000108 <strlen>
 8003126:	0002      	movs	r2, r0
 8003128:	494e      	ldr	r1, [pc, #312]	; (8003264 <ping_service+0x25c>)
 800312a:	003b      	movs	r3, r7
 800312c:	0018      	movs	r0, r3
 800312e:	f010 f8bf 	bl	80132b0 <siprintf>

			if(at_cmd_send((char*)at_command,"CONNECT\r\n","ERROR",70,0))
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <ping_service+0x1f0>)
 8003134:	4938      	ldr	r1, [pc, #224]	; (8003218 <ping_service+0x210>)
 8003136:	0038      	movs	r0, r7
 8003138:	2300      	movs	r3, #0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2346      	movs	r3, #70	; 0x46
 800313e:	f7ff f843 	bl	80021c8 <at_cmd_send>
 8003142:	1e03      	subs	r3, r0, #0
 8003144:	d100      	bne.n	8003148 <ping_service+0x140>
 8003146:	e1a3      	b.n	8003490 <ping_service+0x488>
			{
				HAL_Delay(10);
 8003148:	200a      	movs	r0, #10
 800314a:	f005 f8f3 	bl	8008334 <HAL_Delay>

				if(at_cmd_send((char*)tx_string, "QHTTPPOST: 0", "ERROR", 70, 0))//+QHTTPGET: 0,200,80
 800314e:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <ping_service+0x1f0>)
 8003150:	4945      	ldr	r1, [pc, #276]	; (8003268 <ping_service+0x260>)
 8003152:	482f      	ldr	r0, [pc, #188]	; (8003210 <ping_service+0x208>)
 8003154:	2300      	movs	r3, #0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2346      	movs	r3, #70	; 0x46
 800315a:	f7ff f835 	bl	80021c8 <at_cmd_send>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d100      	bne.n	8003164 <ping_service+0x15c>
 8003162:	e195      	b.n	8003490 <ping_service+0x488>
				{

					flush_array((char*)json_response, 600);
 8003164:	2396      	movs	r3, #150	; 0x96
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	4b40      	ldr	r3, [pc, #256]	; (800326c <ping_service+0x264>)
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7fe f9a5 	bl	80014bc <flush_array>
					json_response_flag = 1;
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <ping_service+0x268>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]

					if(at_cmd_send("AT+QHTTPREAD=80\r\n\0","QHTTPREAD: 0\r\n","ERROR",70,0))///+QHTTPREAD: 0
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <ping_service+0x1f0>)
 800317a:	493e      	ldr	r1, [pc, #248]	; (8003274 <ping_service+0x26c>)
 800317c:	483e      	ldr	r0, [pc, #248]	; (8003278 <ping_service+0x270>)
 800317e:	2300      	movs	r3, #0
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	2346      	movs	r3, #70	; 0x46
 8003184:	f7ff f820 	bl	80021c8 <at_cmd_send>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d100      	bne.n	800318e <ping_service+0x186>
 800318c:	e17d      	b.n	800348a <ping_service+0x482>
					{
						json_response_flag = 0;
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <ping_service+0x268>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]

						if(json_response[0] == 0)
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <ping_service+0x264>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <ping_service+0x19a>
						{
							json_response[0] = '0';
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <ping_service+0x264>)
 800319e:	2230      	movs	r2, #48	; 0x30
 80031a0:	701a      	strb	r2, [r3, #0]
						}

						send_text_to_usb("\r\nJSON Response: \0");
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <ping_service+0x274>)
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fe f955 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)json_response);
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <ping_service+0x264>)
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fe f951 	bl	8001454 <send_text_to_usb>
						send_text_to_usb("\r\n\0");
 80031b2:	4b33      	ldr	r3, [pc, #204]	; (8003280 <ping_service+0x278>)
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fe f94d 	bl	8001454 <send_text_to_usb>

						if(json_get_value("st", 2, 1, (char*)temp_data, 100))/////// GET STATUS VALUE FROM JSON RESPONSE
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <ping_service+0x27c>)
 80031bc:	4832      	ldr	r0, [pc, #200]	; (8003288 <ping_service+0x280>)
 80031be:	2264      	movs	r2, #100	; 0x64
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	2102      	movs	r1, #2
 80031c6:	f000 ffaf 	bl	8004128 <json_get_value>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d011      	beq.n	80031f2 <ping_service+0x1ea>
						{
							send_text_to_usb("\r\nStatus: \0");
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <ping_service+0x284>)
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7fe f93f 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <ping_service+0x27c>)
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fe f93b 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <ping_service+0x278>)
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7fe f937 	bl	8001454 <send_text_to_usb>
						else
						{
							return 0;
						}

						if(temp_data[0] == '1')////////////// IF STATUS is 1
 80031e6:	4b27      	ldr	r3, [pc, #156]	; (8003284 <ping_service+0x27c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b31      	cmp	r3, #49	; 0x31
 80031ec:	d000      	beq.n	80031f0 <ping_service+0x1e8>
 80031ee:	e12e      	b.n	800344e <ping_service+0x446>
 80031f0:	e04e      	b.n	8003290 <ping_service+0x288>
							return 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e14d      	b.n	8003492 <ping_service+0x48a>
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	08014b24 	.word	0x08014b24
 80031fc:	08014b2c 	.word	0x08014b2c
 8003200:	08015018 	.word	0x08015018
 8003204:	08015294 	.word	0x08015294
 8003208:	20000000 	.word	0x20000000
 800320c:	08014d88 	.word	0x08014d88
 8003210:	20000424 	.word	0x20000424
 8003214:	08014db0 	.word	0x08014db0
 8003218:	0801505c 	.word	0x0801505c
 800321c:	080152b8 	.word	0x080152b8
 8003220:	080152d0 	.word	0x080152d0
 8003224:	080150b0 	.word	0x080150b0
 8003228:	20000028 	.word	0x20000028
 800322c:	080152f0 	.word	0x080152f0
 8003230:	08015308 	.word	0x08015308
 8003234:	08015328 	.word	0x08015328
 8003238:	0801534c 	.word	0x0801534c
 800323c:	08015368 	.word	0x08015368
 8003240:	20000058 	.word	0x20000058
 8003244:	080153a0 	.word	0x080153a0
 8003248:	20000e58 	.word	0x20000e58
 800324c:	20000044 	.word	0x20000044
 8003250:	2000004c 	.word	0x2000004c
 8003254:	20000038 	.word	0x20000038
 8003258:	20000e30 	.word	0x20000e30
 800325c:	20000e20 	.word	0x20000e20
 8003260:	20000e40 	.word	0x20000e40
 8003264:	08015400 	.word	0x08015400
 8003268:	0801541c 	.word	0x0801541c
 800326c:	20000790 	.word	0x20000790
 8003270:	20001754 	.word	0x20001754
 8003274:	080150e0 	.word	0x080150e0
 8003278:	080150f0 	.word	0x080150f0
 800327c:	0801542c 	.word	0x0801542c
 8003280:	08015440 	.word	0x08015440
 8003284:	200009fc 	.word	0x200009fc
 8003288:	08015444 	.word	0x08015444
 800328c:	08015448 	.word	0x08015448
						{
							if(json_get_value("cv", 2, 1, (char*)temp_data, 10))/////// GET SERVER CONFIGURATION VERSION VALUE FROM JSON RESPONSE
 8003290:	4b82      	ldr	r3, [pc, #520]	; (800349c <ping_service+0x494>)
 8003292:	4883      	ldr	r0, [pc, #524]	; (80034a0 <ping_service+0x498>)
 8003294:	220a      	movs	r2, #10
 8003296:	9200      	str	r2, [sp, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	2102      	movs	r1, #2
 800329c:	f000 ff44 	bl	8004128 <json_get_value>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d00b      	beq.n	80032bc <ping_service+0x2b4>
							{
								send_text_to_usb("Server Configuration Version: \0");
 80032a4:	4b7f      	ldr	r3, [pc, #508]	; (80034a4 <ping_service+0x49c>)
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fe f8d4 	bl	8001454 <send_text_to_usb>
								send_text_to_usb((char*)temp_data);
 80032ac:	4b7b      	ldr	r3, [pc, #492]	; (800349c <ping_service+0x494>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7fe f8d0 	bl	8001454 <send_text_to_usb>
								send_text_to_usb("\r\n\0");
 80032b4:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <ping_service+0x4a0>)
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fe f8cc 	bl	8001454 <send_text_to_usb>
							}

							if(configuration_version[0]!=temp_data[0] || configuration_version[1]!=temp_data[1] || configuration_version[2]!=temp_data[2])
 80032bc:	4b7b      	ldr	r3, [pc, #492]	; (80034ac <ping_service+0x4a4>)
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	4b76      	ldr	r3, [pc, #472]	; (800349c <ping_service+0x494>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d10c      	bne.n	80032e2 <ping_service+0x2da>
 80032c8:	4b78      	ldr	r3, [pc, #480]	; (80034ac <ping_service+0x4a4>)
 80032ca:	785a      	ldrb	r2, [r3, #1]
 80032cc:	4b73      	ldr	r3, [pc, #460]	; (800349c <ping_service+0x494>)
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d106      	bne.n	80032e2 <ping_service+0x2da>
 80032d4:	4b75      	ldr	r3, [pc, #468]	; (80034ac <ping_service+0x4a4>)
 80032d6:	789a      	ldrb	r2, [r3, #2]
 80032d8:	4b70      	ldr	r3, [pc, #448]	; (800349c <ping_service+0x494>)
 80032da:	789b      	ldrb	r3, [r3, #2]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d100      	bne.n	80032e2 <ping_service+0x2da>
 80032e0:	e0b1      	b.n	8003446 <ping_service+0x43e>
							{
								sprintf((char*)hold_cv_value, "%s\0", (char*)temp_data);///// HOLD CV VALUE IN TEMP VARIABLE
 80032e2:	4a6e      	ldr	r2, [pc, #440]	; (800349c <ping_service+0x494>)
 80032e4:	4972      	ldr	r1, [pc, #456]	; (80034b0 <ping_service+0x4a8>)
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <ping_service+0x4ac>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f00f ffe1 	bl	80132b0 <siprintf>

								if(json_get_value("tk", 2, 1, (char*)http_token, 17))/////// GET HTTP TOKEN VALUE FROM JSON RESPONSE
 80032ee:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <ping_service+0x4b0>)
 80032f0:	4872      	ldr	r0, [pc, #456]	; (80034bc <ping_service+0x4b4>)
 80032f2:	2211      	movs	r2, #17
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	2102      	movs	r1, #2
 80032fa:	f000 ff15 	bl	8004128 <json_get_value>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d00b      	beq.n	800331a <ping_service+0x312>
								{
									send_text_to_usb("HTTP Token: \0");
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <ping_service+0x4b8>)
 8003304:	0018      	movs	r0, r3
 8003306:	f7fe f8a5 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)http_token);
 800330a:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <ping_service+0x4b0>)
 800330c:	0018      	movs	r0, r3
 800330e:	f7fe f8a1 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 8003312:	4b65      	ldr	r3, [pc, #404]	; (80034a8 <ping_service+0x4a0>)
 8003314:	0018      	movs	r0, r3
 8003316:	f7fe f89d 	bl	8001454 <send_text_to_usb>
								}

								if(json_get_value("ca", 2, 1, (char*)temp_data, 100))/////// GET ROOT CA VALUE FROM JSON RESPONSE
 800331a:	4b60      	ldr	r3, [pc, #384]	; (800349c <ping_service+0x494>)
 800331c:	4869      	ldr	r0, [pc, #420]	; (80034c4 <ping_service+0x4bc>)
 800331e:	2264      	movs	r2, #100	; 0x64
 8003320:	9200      	str	r2, [sp, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	2102      	movs	r1, #2
 8003326:	f000 feff 	bl	8004128 <json_get_value>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d00e      	beq.n	800334c <ping_service+0x344>
								{
									send_text_to_usb("Root CA: \0");
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <ping_service+0x4c0>)
 8003330:	0018      	movs	r0, r3
 8003332:	f7fe f88f 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 8003336:	4b59      	ldr	r3, [pc, #356]	; (800349c <ping_service+0x494>)
 8003338:	0018      	movs	r0, r3
 800333a:	f7fe f88b 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 800333e:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <ping_service+0x4a0>)
 8003340:	0018      	movs	r0, r3
 8003342:	f7fe f887 	bl	8001454 <send_text_to_usb>

									ca_certificate_flag = 1;
 8003346:	4b61      	ldr	r3, [pc, #388]	; (80034cc <ping_service+0x4c4>)
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
								}

								if(json_get_value("cc", 2, 1, (char*)temp_data, 100))/////// GET CLIENT CERTIFICATE VALUE FROM JSON RESPONSE
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <ping_service+0x494>)
 800334e:	4860      	ldr	r0, [pc, #384]	; (80034d0 <ping_service+0x4c8>)
 8003350:	2264      	movs	r2, #100	; 0x64
 8003352:	9200      	str	r2, [sp, #0]
 8003354:	2201      	movs	r2, #1
 8003356:	2102      	movs	r1, #2
 8003358:	f000 fee6 	bl	8004128 <json_get_value>
 800335c:	1e03      	subs	r3, r0, #0
 800335e:	d00e      	beq.n	800337e <ping_service+0x376>
								{
									send_text_to_usb("Client Certificate: \0");
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <ping_service+0x4cc>)
 8003362:	0018      	movs	r0, r3
 8003364:	f7fe f876 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 8003368:	4b4c      	ldr	r3, [pc, #304]	; (800349c <ping_service+0x494>)
 800336a:	0018      	movs	r0, r3
 800336c:	f7fe f872 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <ping_service+0x4a0>)
 8003372:	0018      	movs	r0, r3
 8003374:	f7fe f86e 	bl	8001454 <send_text_to_usb>

									client_certificate_flag = 1;
 8003378:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <ping_service+0x4d0>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
								}

								if(json_get_value("ck", 2, 1, (char*)temp_data, 100))/////// GET CLIENT KEY VALUE FROM JSON RESPONSE
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <ping_service+0x494>)
 8003380:	4856      	ldr	r0, [pc, #344]	; (80034dc <ping_service+0x4d4>)
 8003382:	2264      	movs	r2, #100	; 0x64
 8003384:	9200      	str	r2, [sp, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	2102      	movs	r1, #2
 800338a:	f000 fecd 	bl	8004128 <json_get_value>
 800338e:	1e03      	subs	r3, r0, #0
 8003390:	d00e      	beq.n	80033b0 <ping_service+0x3a8>
								{
									send_text_to_usb("Client Key: \0");
 8003392:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <ping_service+0x4d8>)
 8003394:	0018      	movs	r0, r3
 8003396:	f7fe f85d 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 800339a:	4b40      	ldr	r3, [pc, #256]	; (800349c <ping_service+0x494>)
 800339c:	0018      	movs	r0, r3
 800339e:	f7fe f859 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <ping_service+0x4a0>)
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7fe f855 	bl	8001454 <send_text_to_usb>

									client_key_flag = 1;
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <ping_service+0x4dc>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
								}

								if(json_get_value("sc", 2, 1, (char*)temp_data, 100))/////// GET SERVER CONFIGURATION VALUE FROM JSON RESPONSE
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <ping_service+0x494>)
 80033b2:	484d      	ldr	r0, [pc, #308]	; (80034e8 <ping_service+0x4e0>)
 80033b4:	2264      	movs	r2, #100	; 0x64
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	2201      	movs	r2, #1
 80033ba:	2102      	movs	r1, #2
 80033bc:	f000 feb4 	bl	8004128 <json_get_value>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d00e      	beq.n	80033e2 <ping_service+0x3da>
								{
									send_text_to_usb("Server Configuration: \0");
 80033c4:	4b49      	ldr	r3, [pc, #292]	; (80034ec <ping_service+0x4e4>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fe f844 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 80033cc:	4b33      	ldr	r3, [pc, #204]	; (800349c <ping_service+0x494>)
 80033ce:	0018      	movs	r0, r3
 80033d0:	f7fe f840 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 80033d4:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <ping_service+0x4a0>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe f83c 	bl	8001454 <send_text_to_usb>

									configuration_service_flag = 1;
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <ping_service+0x4e8>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
								}

								if(json_get_value("fv", 2, 1, (char*)temp_data, 100))/////// GET Firmware Version VALUE FROM JSON RESPONSE
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <ping_service+0x494>)
 80033e4:	4843      	ldr	r0, [pc, #268]	; (80034f4 <ping_service+0x4ec>)
 80033e6:	2264      	movs	r2, #100	; 0x64
 80033e8:	9200      	str	r2, [sp, #0]
 80033ea:	2201      	movs	r2, #1
 80033ec:	2102      	movs	r1, #2
 80033ee:	f000 fe9b 	bl	8004128 <json_get_value>
 80033f2:	1e03      	subs	r3, r0, #0
 80033f4:	d00e      	beq.n	8003414 <ping_service+0x40c>
								{
									send_text_to_usb("Device Firmware Version: \0");
 80033f6:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <ping_service+0x4f0>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fe f82b 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <ping_service+0x494>)
 8003400:	0018      	movs	r0, r3
 8003402:	f7fe f827 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 8003406:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <ping_service+0x4a0>)
 8003408:	0018      	movs	r0, r3
 800340a:	f7fe f823 	bl	8001454 <send_text_to_usb>

									update_device_firmware_flag = 1;
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <ping_service+0x4f4>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
								}

								if(json_get_value("mv", 2, 1, (char*)temp_data, 100))/////// GET Module Version VALUE FROM JSON RESPONSE
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <ping_service+0x494>)
 8003416:	483a      	ldr	r0, [pc, #232]	; (8003500 <ping_service+0x4f8>)
 8003418:	2264      	movs	r2, #100	; 0x64
 800341a:	9200      	str	r2, [sp, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	2102      	movs	r1, #2
 8003420:	f000 fe82 	bl	8004128 <json_get_value>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d00e      	beq.n	8003446 <ping_service+0x43e>
								{
									send_text_to_usb("Module Firmware Version: \0");
 8003428:	4b36      	ldr	r3, [pc, #216]	; (8003504 <ping_service+0x4fc>)
 800342a:	0018      	movs	r0, r3
 800342c:	f7fe f812 	bl	8001454 <send_text_to_usb>
									send_text_to_usb((char*)temp_data);
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <ping_service+0x494>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7fe f80e 	bl	8001454 <send_text_to_usb>
									send_text_to_usb("\r\n\0");
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <ping_service+0x4a0>)
 800343a:	0018      	movs	r0, r3
 800343c:	f7fe f80a 	bl	8001454 <send_text_to_usb>

									update_module_firmware_flag = 1;
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <ping_service+0x500>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
								}
							}

							update_device_twin_flag=1;
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <ping_service+0x504>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e01b      	b.n	8003486 <ping_service+0x47e>
						}
						else if(temp_data[0] == '0')////////////// IF STATUS is 0 ///// Added 25.04.2021
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <ping_service+0x494>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b30      	cmp	r3, #48	; 0x30
 8003454:	d117      	bne.n	8003486 <ping_service+0x47e>
						{

							ca_certificate_flag = 0;
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <ping_service+0x4c4>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
							client_certificate_flag = 0;
 800345c:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <ping_service+0x4d0>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
							client_key_flag = 0;
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <ping_service+0x4dc>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
							configuration_service_flag = 0;
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <ping_service+0x4e8>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
							update_device_firmware_flag = 0;
 800346e:	4b23      	ldr	r3, [pc, #140]	; (80034fc <ping_service+0x4f4>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
							update_module_firmware_flag = 0;
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <ping_service+0x500>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
							update_device_firmware_flag = 0;
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <ping_service+0x4f4>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]

							update_device_twin_flag=1;
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <ping_service+0x504>)
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
						}

						return 1;
 8003486:	2301      	movs	r3, #1
 8003488:	e003      	b.n	8003492 <ping_service+0x48a>
					}

					json_response_flag = 0;
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <ping_service+0x508>)
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return 0;
 8003490:	2300      	movs	r3, #0
	////////// PING SERVICE END ////////
}
 8003492:	0018      	movs	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	b009      	add	sp, #36	; 0x24
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200009fc 	.word	0x200009fc
 80034a0:	08015454 	.word	0x08015454
 80034a4:	08015458 	.word	0x08015458
 80034a8:	08015440 	.word	0x08015440
 80034ac:	20000038 	.word	0x20000038
 80034b0:	08015478 	.word	0x08015478
 80034b4:	20000afc 	.word	0x20000afc
 80034b8:	200009e8 	.word	0x200009e8
 80034bc:	0801547c 	.word	0x0801547c
 80034c0:	08015480 	.word	0x08015480
 80034c4:	08015490 	.word	0x08015490
 80034c8:	08015494 	.word	0x08015494
 80034cc:	20001756 	.word	0x20001756
 80034d0:	080154a0 	.word	0x080154a0
 80034d4:	080154a4 	.word	0x080154a4
 80034d8:	20001757 	.word	0x20001757
 80034dc:	080154bc 	.word	0x080154bc
 80034e0:	080154c0 	.word	0x080154c0
 80034e4:	20001758 	.word	0x20001758
 80034e8:	080154d0 	.word	0x080154d0
 80034ec:	080154d4 	.word	0x080154d4
 80034f0:	20001755 	.word	0x20001755
 80034f4:	080154ec 	.word	0x080154ec
 80034f8:	080154f0 	.word	0x080154f0
 80034fc:	20001765 	.word	0x20001765
 8003500:	0801550c 	.word	0x0801550c
 8003504:	08015510 	.word	0x08015510
 8003508:	20001764 	.word	0x20001764
 800350c:	20001759 	.word	0x20001759
 8003510:	20001754 	.word	0x20001754

08003514 <configuration_service>:


_Bool configuration_service(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af02      	add	r7, sp, #8
	//////////   CONFIGURATION SERVICE ////////
	deactivate_pdp();
 800351a:	f7fe f8a5 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 800351e:	4ad9      	ldr	r2, [pc, #868]	; (8003884 <configuration_service+0x370>)
 8003520:	49d9      	ldr	r1, [pc, #868]	; (8003888 <configuration_service+0x374>)
 8003522:	48da      	ldr	r0, [pc, #872]	; (800388c <configuration_service+0x378>)
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2305      	movs	r3, #5
 800352a:	f7fe fe4d 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 800352e:	4ad5      	ldr	r2, [pc, #852]	; (8003884 <configuration_service+0x370>)
 8003530:	49d5      	ldr	r1, [pc, #852]	; (8003888 <configuration_service+0x374>)
 8003532:	48d7      	ldr	r0, [pc, #860]	; (8003890 <configuration_service+0x37c>)
 8003534:	2300      	movs	r3, #0
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2305      	movs	r3, #5
 800353a:	f7fe fe45 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 800353e:	f7fd ffe1 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003542:	4ad4      	ldr	r2, [pc, #848]	; (8003894 <configuration_service+0x380>)
 8003544:	49d4      	ldr	r1, [pc, #848]	; (8003898 <configuration_service+0x384>)
 8003546:	4bd5      	ldr	r3, [pc, #852]	; (800389c <configuration_service+0x388>)
 8003548:	0018      	movs	r0, r3
 800354a:	f00f feb1 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 800354e:	4acd      	ldr	r2, [pc, #820]	; (8003884 <configuration_service+0x370>)
 8003550:	49cd      	ldr	r1, [pc, #820]	; (8003888 <configuration_service+0x374>)
 8003552:	48d2      	ldr	r0, [pc, #840]	; (800389c <configuration_service+0x388>)
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2305      	movs	r3, #5
 800355a:	f7fe fe35 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 800355e:	f7fe f869 	bl	8001634 <activate_pdp>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d100      	bne.n	8003568 <configuration_service+0x54>
 8003566:	e20c      	b.n	8003982 <configuration_service+0x46e>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8003568:	4ac6      	ldr	r2, [pc, #792]	; (8003884 <configuration_service+0x370>)
 800356a:	49c7      	ldr	r1, [pc, #796]	; (8003888 <configuration_service+0x374>)
 800356c:	48cc      	ldr	r0, [pc, #816]	; (80038a0 <configuration_service+0x38c>)
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2305      	movs	r3, #5
 8003574:	f7fe fe28 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 8003578:	4ac2      	ldr	r2, [pc, #776]	; (8003884 <configuration_service+0x370>)
 800357a:	49ca      	ldr	r1, [pc, #808]	; (80038a4 <configuration_service+0x390>)
 800357c:	48ca      	ldr	r0, [pc, #808]	; (80038a8 <configuration_service+0x394>)
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2346      	movs	r3, #70	; 0x46
 8003584:	f7fe fe20 	bl	80021c8 <at_cmd_send>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d100      	bne.n	800358e <configuration_service+0x7a>
 800358c:	e1f9      	b.n	8003982 <configuration_service+0x46e>
		{

			flush_tx_string();
 800358e:	f7fd ffb9 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/sc?token=%s", device_id, http_token);
 8003592:	4bc6      	ldr	r3, [pc, #792]	; (80038ac <configuration_service+0x398>)
 8003594:	4ac6      	ldr	r2, [pc, #792]	; (80038b0 <configuration_service+0x39c>)
 8003596:	49c7      	ldr	r1, [pc, #796]	; (80038b4 <configuration_service+0x3a0>)
 8003598:	48c0      	ldr	r0, [pc, #768]	; (800389c <configuration_service+0x388>)
 800359a:	f00f fe89 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 800359e:	4ab9      	ldr	r2, [pc, #740]	; (8003884 <configuration_service+0x370>)
 80035a0:	49b9      	ldr	r1, [pc, #740]	; (8003888 <configuration_service+0x374>)
 80035a2:	48be      	ldr	r0, [pc, #760]	; (800389c <configuration_service+0x388>)
 80035a4:	2300      	movs	r3, #0
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	2346      	movs	r3, #70	; 0x46
 80035aa:	f7fe fe0d 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 80035ae:	4ab5      	ldr	r2, [pc, #724]	; (8003884 <configuration_service+0x370>)
 80035b0:	49b5      	ldr	r1, [pc, #724]	; (8003888 <configuration_service+0x374>)
 80035b2:	48c1      	ldr	r0, [pc, #772]	; (80038b8 <configuration_service+0x3a4>)
 80035b4:	2300      	movs	r3, #0
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2305      	movs	r3, #5
 80035ba:	f7fe fe05 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 80035be:	4ab1      	ldr	r2, [pc, #708]	; (8003884 <configuration_service+0x370>)
 80035c0:	49be      	ldr	r1, [pc, #760]	; (80038bc <configuration_service+0x3a8>)
 80035c2:	48bf      	ldr	r0, [pc, #764]	; (80038c0 <configuration_service+0x3ac>)
 80035c4:	2300      	movs	r3, #0
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2346      	movs	r3, #70	; 0x46
 80035ca:	f7fe fdfd 	bl	80021c8 <at_cmd_send>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d100      	bne.n	80035d4 <configuration_service+0xc0>
 80035d2:	e1d6      	b.n	8003982 <configuration_service+0x46e>
			{
				HAL_Delay(10);
 80035d4:	200a      	movs	r0, #10
 80035d6:	f004 fead 	bl	8008334 <HAL_Delay>


					flush_array((char*)json_response, 600);
 80035da:	2396      	movs	r3, #150	; 0x96
 80035dc:	009a      	lsls	r2, r3, #2
 80035de:	4bb9      	ldr	r3, [pc, #740]	; (80038c4 <configuration_service+0x3b0>)
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd ff6a 	bl	80014bc <flush_array>
					json_response_flag = 1;
 80035e8:	4bb7      	ldr	r3, [pc, #732]	; (80038c8 <configuration_service+0x3b4>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]

					if(at_cmd_send("AT+QHTTPREAD=80\r\n\0","QHTTPREAD: 0\r\n","ERROR",70,0))///+QHTTPREAD: 0
 80035ee:	4aa5      	ldr	r2, [pc, #660]	; (8003884 <configuration_service+0x370>)
 80035f0:	49b6      	ldr	r1, [pc, #728]	; (80038cc <configuration_service+0x3b8>)
 80035f2:	48b7      	ldr	r0, [pc, #732]	; (80038d0 <configuration_service+0x3bc>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2346      	movs	r3, #70	; 0x46
 80035fa:	f7fe fde5 	bl	80021c8 <at_cmd_send>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d100      	bne.n	8003604 <configuration_service+0xf0>
 8003602:	e1bb      	b.n	800397c <configuration_service+0x468>
					{

						if(strstr((char*)gsm_data, "Unauthorized"))
 8003604:	4ab3      	ldr	r2, [pc, #716]	; (80038d4 <configuration_service+0x3c0>)
 8003606:	4bb4      	ldr	r3, [pc, #720]	; (80038d8 <configuration_service+0x3c4>)
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f00f fe70 	bl	80132f0 <strstr>
 8003610:	1e03      	subs	r3, r0, #0
 8003612:	d004      	beq.n	800361e <configuration_service+0x10a>
						{
							ping_service_flag=1;
 8003614:	4bb1      	ldr	r3, [pc, #708]	; (80038dc <configuration_service+0x3c8>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
							return 0;
 800361a:	2300      	movs	r3, #0
 800361c:	e1b2      	b.n	8003984 <configuration_service+0x470>
						}

						json_response_flag = 0;
 800361e:	4baa      	ldr	r3, [pc, #680]	; (80038c8 <configuration_service+0x3b4>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

						send_text_to_usb("\r\nJSON Response: \0");
 8003624:	4bae      	ldr	r3, [pc, #696]	; (80038e0 <configuration_service+0x3cc>)
 8003626:	0018      	movs	r0, r3
 8003628:	f7fd ff14 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)json_response);
 800362c:	4ba5      	ldr	r3, [pc, #660]	; (80038c4 <configuration_service+0x3b0>)
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd ff10 	bl	8001454 <send_text_to_usb>
						send_text_to_usb("\r\n\0");
 8003634:	4bab      	ldr	r3, [pc, #684]	; (80038e4 <configuration_service+0x3d0>)
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd ff0c 	bl	8001454 <send_text_to_usb>

						if(json_get_value("mqtt", 4, 1, (char*)temp_data, 100))/////// GET MQTT VERSION VALUE FROM JSON RESPONSE
 800363c:	4baa      	ldr	r3, [pc, #680]	; (80038e8 <configuration_service+0x3d4>)
 800363e:	48ab      	ldr	r0, [pc, #684]	; (80038ec <configuration_service+0x3d8>)
 8003640:	2264      	movs	r2, #100	; 0x64
 8003642:	9200      	str	r2, [sp, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	2104      	movs	r1, #4
 8003648:	f000 fd6e 	bl	8004128 <json_get_value>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d00b      	beq.n	8003668 <configuration_service+0x154>
						{
							send_text_to_usb("\r\nMQTT Protocol Version: \0");
 8003650:	4ba7      	ldr	r3, [pc, #668]	; (80038f0 <configuration_service+0x3dc>)
 8003652:	0018      	movs	r0, r3
 8003654:	f7fd fefe 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 8003658:	4ba3      	ldr	r3, [pc, #652]	; (80038e8 <configuration_service+0x3d4>)
 800365a:	0018      	movs	r0, r3
 800365c:	f7fd fefa 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003660:	4ba0      	ldr	r3, [pc, #640]	; (80038e4 <configuration_service+0x3d0>)
 8003662:	0018      	movs	r0, r3
 8003664:	f7fd fef6 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("tls", 3, 1, (char*)temp_data, 100))/////// GET TLS VERSION VALUE FROM JSON RESPONSE
 8003668:	4b9f      	ldr	r3, [pc, #636]	; (80038e8 <configuration_service+0x3d4>)
 800366a:	48a2      	ldr	r0, [pc, #648]	; (80038f4 <configuration_service+0x3e0>)
 800366c:	2264      	movs	r2, #100	; 0x64
 800366e:	9200      	str	r2, [sp, #0]
 8003670:	2201      	movs	r2, #1
 8003672:	2103      	movs	r1, #3
 8003674:	f000 fd58 	bl	8004128 <json_get_value>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d00b      	beq.n	8003694 <configuration_service+0x180>
						{
							send_text_to_usb("TLS Version: \0");
 800367c:	4b9e      	ldr	r3, [pc, #632]	; (80038f8 <configuration_service+0x3e4>)
 800367e:	0018      	movs	r0, r3
 8003680:	f7fd fee8 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 8003684:	4b98      	ldr	r3, [pc, #608]	; (80038e8 <configuration_service+0x3d4>)
 8003686:	0018      	movs	r0, r3
 8003688:	f7fd fee4 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 800368c:	4b95      	ldr	r3, [pc, #596]	; (80038e4 <configuration_service+0x3d0>)
 800368e:	0018      	movs	r0, r3
 8003690:	f7fd fee0 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("did", 3, 1, (char*)temp_data, 100))/////// GET DEVICE ID VALUE FROM JSON RESPONSE
 8003694:	4b94      	ldr	r3, [pc, #592]	; (80038e8 <configuration_service+0x3d4>)
 8003696:	4899      	ldr	r0, [pc, #612]	; (80038fc <configuration_service+0x3e8>)
 8003698:	2264      	movs	r2, #100	; 0x64
 800369a:	9200      	str	r2, [sp, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	2103      	movs	r1, #3
 80036a0:	f000 fd42 	bl	8004128 <json_get_value>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d00b      	beq.n	80036c0 <configuration_service+0x1ac>
						{
							send_text_to_usb("Device ID: \0");
 80036a8:	4b95      	ldr	r3, [pc, #596]	; (8003900 <configuration_service+0x3ec>)
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7fd fed2 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 80036b0:	4b8d      	ldr	r3, [pc, #564]	; (80038e8 <configuration_service+0x3d4>)
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fd fece 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 80036b8:	4b8a      	ldr	r3, [pc, #552]	; (80038e4 <configuration_service+0x3d0>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fd feca 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("svr", 3, 1, (char*)mqtt_server, 100))/////// GET SERVER HOST NAME VALUE FROM JSON RESPONSE
 80036c0:	4b90      	ldr	r3, [pc, #576]	; (8003904 <configuration_service+0x3f0>)
 80036c2:	4891      	ldr	r0, [pc, #580]	; (8003908 <configuration_service+0x3f4>)
 80036c4:	2264      	movs	r2, #100	; 0x64
 80036c6:	9200      	str	r2, [sp, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	2103      	movs	r1, #3
 80036cc:	f000 fd2c 	bl	8004128 <json_get_value>
 80036d0:	1e03      	subs	r3, r0, #0
 80036d2:	d00b      	beq.n	80036ec <configuration_service+0x1d8>
						{
							send_text_to_usb("Server Host Name: \0");
 80036d4:	4b8d      	ldr	r3, [pc, #564]	; (800390c <configuration_service+0x3f8>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7fd febc 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)mqtt_server);
 80036dc:	4b89      	ldr	r3, [pc, #548]	; (8003904 <configuration_service+0x3f0>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fd feb8 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 80036e4:	4b7f      	ldr	r3, [pc, #508]	; (80038e4 <configuration_service+0x3d0>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fd feb4 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("prt", 3, 1, (char*)mqtt_port, 7))/////// GET PORT VALUE FROM JSON RESPONSE
 80036ec:	4b88      	ldr	r3, [pc, #544]	; (8003910 <configuration_service+0x3fc>)
 80036ee:	4889      	ldr	r0, [pc, #548]	; (8003914 <configuration_service+0x400>)
 80036f0:	2207      	movs	r2, #7
 80036f2:	9200      	str	r2, [sp, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	2103      	movs	r1, #3
 80036f8:	f000 fd16 	bl	8004128 <json_get_value>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d00b      	beq.n	8003718 <configuration_service+0x204>
						{
							send_text_to_usb("Port Number: \0");
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <configuration_service+0x404>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7fd fea6 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)mqtt_port);
 8003708:	4b81      	ldr	r3, [pc, #516]	; (8003910 <configuration_service+0x3fc>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fd fea2 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <configuration_service+0x3d0>)
 8003712:	0018      	movs	r0, r3
 8003714:	f7fd fe9e 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("un", 2, 1, (char*)mqtt_username, 100))/////// GET USERNAME VALUE FROM JSON RESPONSE
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <configuration_service+0x408>)
 800371a:	4881      	ldr	r0, [pc, #516]	; (8003920 <configuration_service+0x40c>)
 800371c:	2264      	movs	r2, #100	; 0x64
 800371e:	9200      	str	r2, [sp, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	2102      	movs	r1, #2
 8003724:	f000 fd00 	bl	8004128 <json_get_value>
 8003728:	1e03      	subs	r3, r0, #0
 800372a:	d00b      	beq.n	8003744 <configuration_service+0x230>
						{
							send_text_to_usb("User Name: \0");
 800372c:	4b7d      	ldr	r3, [pc, #500]	; (8003924 <configuration_service+0x410>)
 800372e:	0018      	movs	r0, r3
 8003730:	f7fd fe90 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)mqtt_username);
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <configuration_service+0x408>)
 8003736:	0018      	movs	r0, r3
 8003738:	f7fd fe8c 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <configuration_service+0x3d0>)
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fe88 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("pd", 2, 1, (char*)mqtt_password, 50))/////// GET PASSWORD VALUE FROM JSON RESPONSE
 8003744:	4b78      	ldr	r3, [pc, #480]	; (8003928 <configuration_service+0x414>)
 8003746:	4879      	ldr	r0, [pc, #484]	; (800392c <configuration_service+0x418>)
 8003748:	2232      	movs	r2, #50	; 0x32
 800374a:	9200      	str	r2, [sp, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	2102      	movs	r1, #2
 8003750:	f000 fcea 	bl	8004128 <json_get_value>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d00b      	beq.n	8003770 <configuration_service+0x25c>
						{
							send_text_to_usb("Password: \0");
 8003758:	4b75      	ldr	r3, [pc, #468]	; (8003930 <configuration_service+0x41c>)
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd fe7a 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)mqtt_password);
 8003760:	4b71      	ldr	r3, [pc, #452]	; (8003928 <configuration_service+0x414>)
 8003762:	0018      	movs	r0, r3
 8003764:	f7fd fe76 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003768:	4b5e      	ldr	r3, [pc, #376]	; (80038e4 <configuration_service+0x3d0>)
 800376a:	0018      	movs	r0, r3
 800376c:	f7fd fe72 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("cid", 3, 1, (char*)mqtt_client_id, 100))/////// GET CLIENT ID VALUE FROM JSON RESPONSE
 8003770:	4b70      	ldr	r3, [pc, #448]	; (8003934 <configuration_service+0x420>)
 8003772:	4871      	ldr	r0, [pc, #452]	; (8003938 <configuration_service+0x424>)
 8003774:	2264      	movs	r2, #100	; 0x64
 8003776:	9200      	str	r2, [sp, #0]
 8003778:	2201      	movs	r2, #1
 800377a:	2103      	movs	r1, #3
 800377c:	f000 fcd4 	bl	8004128 <json_get_value>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d00b      	beq.n	800379c <configuration_service+0x288>
						{
							send_text_to_usb("Client ID: \0");
 8003784:	4b6d      	ldr	r3, [pc, #436]	; (800393c <configuration_service+0x428>)
 8003786:	0018      	movs	r0, r3
 8003788:	f7fd fe64 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)mqtt_client_id);
 800378c:	4b69      	ldr	r3, [pc, #420]	; (8003934 <configuration_service+0x420>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fd fe60 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <configuration_service+0x3d0>)
 8003796:	0018      	movs	r0, r3
 8003798:	f7fd fe5c 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("qos", 3, 1, (char*)temp_data, 100))/////// GET QOS VALUE FROM JSON RESPONSE
 800379c:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <configuration_service+0x3d4>)
 800379e:	4868      	ldr	r0, [pc, #416]	; (8003940 <configuration_service+0x42c>)
 80037a0:	2264      	movs	r2, #100	; 0x64
 80037a2:	9200      	str	r2, [sp, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	2103      	movs	r1, #3
 80037a8:	f000 fcbe 	bl	8004128 <json_get_value>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d00b      	beq.n	80037c8 <configuration_service+0x2b4>
						{
							send_text_to_usb("QoS in MQTT: \0");
 80037b0:	4b64      	ldr	r3, [pc, #400]	; (8003944 <configuration_service+0x430>)
 80037b2:	0018      	movs	r0, r3
 80037b4:	f7fd fe4e 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <configuration_service+0x3d4>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7fd fe4a 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 80037c0:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <configuration_service+0x3d0>)
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7fd fe46 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("twin_sb", 7, 1, (char*)twin_sb, 100))/////// GET SUBSCRIBE TOPIC VALUE FROM JSON RESPONSE
 80037c8:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <configuration_service+0x434>)
 80037ca:	4860      	ldr	r0, [pc, #384]	; (800394c <configuration_service+0x438>)
 80037cc:	2264      	movs	r2, #100	; 0x64
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	2107      	movs	r1, #7
 80037d4:	f000 fca8 	bl	8004128 <json_get_value>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d00b      	beq.n	80037f4 <configuration_service+0x2e0>
						{
							send_text_to_usb("twin_sb: \0");
 80037dc:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <configuration_service+0x43c>)
 80037de:	0018      	movs	r0, r3
 80037e0:	f7fd fe38 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)twin_sb);
 80037e4:	4b58      	ldr	r3, [pc, #352]	; (8003948 <configuration_service+0x434>)
 80037e6:	0018      	movs	r0, r3
 80037e8:	f7fd fe34 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 80037ec:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <configuration_service+0x3d0>)
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7fd fe30 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("twin_pb", 7, 1, (char*)twin_pb, 100))/////// GET PUBLISH TOPIC FOR NULL DATA VALUE FROM JSON RESPONSE
 80037f4:	4b57      	ldr	r3, [pc, #348]	; (8003954 <configuration_service+0x440>)
 80037f6:	4858      	ldr	r0, [pc, #352]	; (8003958 <configuration_service+0x444>)
 80037f8:	2264      	movs	r2, #100	; 0x64
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	2107      	movs	r1, #7
 8003800:	f000 fc92 	bl	8004128 <json_get_value>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d00b      	beq.n	8003820 <configuration_service+0x30c>
						{
							send_text_to_usb("twin_pb: \0");
 8003808:	4b54      	ldr	r3, [pc, #336]	; (800395c <configuration_service+0x448>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fd fe22 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)twin_pb);
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <configuration_service+0x440>)
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fe1e 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <configuration_service+0x3d0>)
 800381a:	0018      	movs	r0, r3
 800381c:	f7fd fe1a 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("twin_rp", 7, 1, (char*)twin_rp, 100))/////// GET PUBLISH TOPIC TO REPORT META DATA VALUE FROM JSON RESPONSE
 8003820:	4b4f      	ldr	r3, [pc, #316]	; (8003960 <configuration_service+0x44c>)
 8003822:	4850      	ldr	r0, [pc, #320]	; (8003964 <configuration_service+0x450>)
 8003824:	2264      	movs	r2, #100	; 0x64
 8003826:	9200      	str	r2, [sp, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	2107      	movs	r1, #7
 800382c:	f000 fc7c 	bl	8004128 <json_get_value>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d00b      	beq.n	800384c <configuration_service+0x338>
						{
							send_text_to_usb("twin_rp: \0");
 8003834:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <configuration_service+0x454>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fe0c 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)twin_rp);
 800383c:	4b48      	ldr	r3, [pc, #288]	; (8003960 <configuration_service+0x44c>)
 800383e:	0018      	movs	r0, r3
 8003840:	f7fd fe08 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <configuration_service+0x3d0>)
 8003846:	0018      	movs	r0, r3
 8003848:	f7fd fe04 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("read_pb", 7, 1, (char*)read_pb, 100))/////// GET PUBLISH TOPIC FOR MEASUREMENT DATA VALUE FROM JSON RESPONSE
 800384c:	4b47      	ldr	r3, [pc, #284]	; (800396c <configuration_service+0x458>)
 800384e:	4848      	ldr	r0, [pc, #288]	; (8003970 <configuration_service+0x45c>)
 8003850:	2264      	movs	r2, #100	; 0x64
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	2201      	movs	r2, #1
 8003856:	2107      	movs	r1, #7
 8003858:	f000 fc66 	bl	8004128 <json_get_value>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d00b      	beq.n	8003878 <configuration_service+0x364>
						{
							send_text_to_usb("read_pb: \0");
 8003860:	4b44      	ldr	r3, [pc, #272]	; (8003974 <configuration_service+0x460>)
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd fdf6 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)read_pb);
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <configuration_service+0x458>)
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fdf2 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <configuration_service+0x3d0>)
 8003872:	0018      	movs	r0, r3
 8003874:	f7fd fdee 	bl	8001454 <send_text_to_usb>
						}

						update_device_twin_flag = 1;/////// IF NEW CONFIGURATION THEN UPDATE DEVICE TWIN
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <configuration_service+0x464>)
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]

						return 1;
 800387e:	2301      	movs	r3, #1
 8003880:	e080      	b.n	8003984 <configuration_service+0x470>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	08014b24 	.word	0x08014b24
 8003888:	08014b2c 	.word	0x08014b2c
 800388c:	08015018 	.word	0x08015018
 8003890:	08015038 	.word	0x08015038
 8003894:	20000000 	.word	0x20000000
 8003898:	08014d88 	.word	0x08014d88
 800389c:	20000424 	.word	0x20000424
 80038a0:	08014db0 	.word	0x08014db0
 80038a4:	0801505c 	.word	0x0801505c
 80038a8:	08015068 	.word	0x08015068
 80038ac:	200009e8 	.word	0x200009e8
 80038b0:	20000028 	.word	0x20000028
 80038b4:	0801552c 	.word	0x0801552c
 80038b8:	080150b0 	.word	0x080150b0
 80038bc:	080150c0 	.word	0x080150c0
 80038c0:	080150cc 	.word	0x080150cc
 80038c4:	20000790 	.word	0x20000790
 80038c8:	20001754 	.word	0x20001754
 80038cc:	080150e0 	.word	0x080150e0
 80038d0:	080150f0 	.word	0x080150f0
 80038d4:	08015104 	.word	0x08015104
 80038d8:	200005b4 	.word	0x200005b4
 80038dc:	2000175c 	.word	0x2000175c
 80038e0:	0801542c 	.word	0x0801542c
 80038e4:	08015440 	.word	0x08015440
 80038e8:	200009fc 	.word	0x200009fc
 80038ec:	0801555c 	.word	0x0801555c
 80038f0:	08015564 	.word	0x08015564
 80038f4:	08015580 	.word	0x08015580
 80038f8:	08015584 	.word	0x08015584
 80038fc:	08015594 	.word	0x08015594
 8003900:	08015598 	.word	0x08015598
 8003904:	20000b08 	.word	0x20000b08
 8003908:	080155a8 	.word	0x080155a8
 800390c:	080155ac 	.word	0x080155ac
 8003910:	20000b6c 	.word	0x20000b6c
 8003914:	080155c0 	.word	0x080155c0
 8003918:	080155c4 	.word	0x080155c4
 800391c:	20000b74 	.word	0x20000b74
 8003920:	080155d4 	.word	0x080155d4
 8003924:	080155d8 	.word	0x080155d8
 8003928:	20000bd8 	.word	0x20000bd8
 800392c:	080155e8 	.word	0x080155e8
 8003930:	080155ec 	.word	0x080155ec
 8003934:	20000c0c 	.word	0x20000c0c
 8003938:	080155f8 	.word	0x080155f8
 800393c:	080155fc 	.word	0x080155fc
 8003940:	0801560c 	.word	0x0801560c
 8003944:	08015610 	.word	0x08015610
 8003948:	20000c70 	.word	0x20000c70
 800394c:	08015620 	.word	0x08015620
 8003950:	08015628 	.word	0x08015628
 8003954:	20000cd4 	.word	0x20000cd4
 8003958:	08015634 	.word	0x08015634
 800395c:	0801563c 	.word	0x0801563c
 8003960:	20000d38 	.word	0x20000d38
 8003964:	08015648 	.word	0x08015648
 8003968:	08015650 	.word	0x08015650
 800396c:	20000d9c 	.word	0x20000d9c
 8003970:	0801565c 	.word	0x0801565c
 8003974:	08015664 	.word	0x08015664
 8003978:	20001759 	.word	0x20001759
					}

					json_response_flag = 0;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <configuration_service+0x478>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return 0;
 8003982:	2300      	movs	r3, #0
	////////// CONFIGURATION SERVICE END ////////
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	20001754 	.word	0x20001754

08003990 <get_root_ca_certificate>:


_Bool get_root_ca_certificate(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af02      	add	r7, sp, #8
	//////////   ROOT CA CERTIFICATE SERVICE ////////
	deactivate_pdp();
 8003996:	f7fd fe67 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 800399a:	4a35      	ldr	r2, [pc, #212]	; (8003a70 <get_root_ca_certificate+0xe0>)
 800399c:	4935      	ldr	r1, [pc, #212]	; (8003a74 <get_root_ca_certificate+0xe4>)
 800399e:	4836      	ldr	r0, [pc, #216]	; (8003a78 <get_root_ca_certificate+0xe8>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2305      	movs	r3, #5
 80039a6:	f7fe fc0f 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 80039aa:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <get_root_ca_certificate+0xe0>)
 80039ac:	4931      	ldr	r1, [pc, #196]	; (8003a74 <get_root_ca_certificate+0xe4>)
 80039ae:	4833      	ldr	r0, [pc, #204]	; (8003a7c <get_root_ca_certificate+0xec>)
 80039b0:	2300      	movs	r3, #0
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2305      	movs	r3, #5
 80039b6:	f7fe fc07 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 80039ba:	f7fd fda3 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 80039be:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <get_root_ca_certificate+0xf0>)
 80039c0:	4930      	ldr	r1, [pc, #192]	; (8003a84 <get_root_ca_certificate+0xf4>)
 80039c2:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <get_root_ca_certificate+0xf8>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f00f fc73 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <get_root_ca_certificate+0xe0>)
 80039cc:	4929      	ldr	r1, [pc, #164]	; (8003a74 <get_root_ca_certificate+0xe4>)
 80039ce:	482e      	ldr	r0, [pc, #184]	; (8003a88 <get_root_ca_certificate+0xf8>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2305      	movs	r3, #5
 80039d6:	f7fe fbf7 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 80039da:	f7fd fe2b 	bl	8001634 <activate_pdp>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d042      	beq.n	8003a68 <get_root_ca_certificate+0xd8>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <get_root_ca_certificate+0xe0>)
 80039e4:	4923      	ldr	r1, [pc, #140]	; (8003a74 <get_root_ca_certificate+0xe4>)
 80039e6:	4829      	ldr	r0, [pc, #164]	; (8003a8c <get_root_ca_certificate+0xfc>)
 80039e8:	2300      	movs	r3, #0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2305      	movs	r3, #5
 80039ee:	f7fe fbeb 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <get_root_ca_certificate+0xe0>)
 80039f4:	4926      	ldr	r1, [pc, #152]	; (8003a90 <get_root_ca_certificate+0x100>)
 80039f6:	4827      	ldr	r0, [pc, #156]	; (8003a94 <get_root_ca_certificate+0x104>)
 80039f8:	2300      	movs	r3, #0
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2346      	movs	r3, #70	; 0x46
 80039fe:	f7fe fbe3 	bl	80021c8 <at_cmd_send>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d030      	beq.n	8003a68 <get_root_ca_certificate+0xd8>
		{

			flush_tx_string();
 8003a06:	f7fd fd7d 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/ca?token=%s", device_id, http_token);
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <get_root_ca_certificate+0x108>)
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <get_root_ca_certificate+0x10c>)
 8003a0e:	4924      	ldr	r1, [pc, #144]	; (8003aa0 <get_root_ca_certificate+0x110>)
 8003a10:	481d      	ldr	r0, [pc, #116]	; (8003a88 <get_root_ca_certificate+0xf8>)
 8003a12:	f00f fc4d 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <get_root_ca_certificate+0xe0>)
 8003a18:	4916      	ldr	r1, [pc, #88]	; (8003a74 <get_root_ca_certificate+0xe4>)
 8003a1a:	481b      	ldr	r0, [pc, #108]	; (8003a88 <get_root_ca_certificate+0xf8>)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2346      	movs	r3, #70	; 0x46
 8003a22:	f7fe fbd1 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <get_root_ca_certificate+0xe0>)
 8003a28:	4912      	ldr	r1, [pc, #72]	; (8003a74 <get_root_ca_certificate+0xe4>)
 8003a2a:	481e      	ldr	r0, [pc, #120]	; (8003aa4 <get_root_ca_certificate+0x114>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2305      	movs	r3, #5
 8003a32:	f7fe fbc9 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <get_root_ca_certificate+0xe0>)
 8003a38:	491b      	ldr	r1, [pc, #108]	; (8003aa8 <get_root_ca_certificate+0x118>)
 8003a3a:	481c      	ldr	r0, [pc, #112]	; (8003aac <get_root_ca_certificate+0x11c>)
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2346      	movs	r3, #70	; 0x46
 8003a42:	f7fe fbc1 	bl	80021c8 <at_cmd_send>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d00e      	beq.n	8003a68 <get_root_ca_certificate+0xd8>
			{
				HAL_Delay(10);
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f004 fc72 	bl	8008334 <HAL_Delay>

//						at_cmd_send("AT+QFDEL=\"UFS:security/CaCert.crt\"\r\n\0","OK\r\n","ERROR", 10, 0);

						if(at_cmd_send("at+qhttpreadfile=\"UFS:security/CaCert.crt\",80\r\n\0","QHTTPREADFILE: 0\r\n","ERROR", 20, 0))//+QHTTPREADFILE: 0
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <get_root_ca_certificate+0xe0>)
 8003a52:	4917      	ldr	r1, [pc, #92]	; (8003ab0 <get_root_ca_certificate+0x120>)
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <get_root_ca_certificate+0x124>)
 8003a56:	2300      	movs	r3, #0
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2314      	movs	r3, #20
 8003a5c:	f7fe fbb4 	bl	80021c8 <at_cmd_send>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d001      	beq.n	8003a68 <get_root_ca_certificate+0xd8>
						{
							return 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <get_root_ca_certificate+0xda>
			}
		}

	}

	return 0;
 8003a68:	2300      	movs	r3, #0
	////////// ROOT CA CERTIFICATE SERVICE END ////////
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	08014b24 	.word	0x08014b24
 8003a74:	08014b2c 	.word	0x08014b2c
 8003a78:	08015018 	.word	0x08015018
 8003a7c:	08015038 	.word	0x08015038
 8003a80:	20000000 	.word	0x20000000
 8003a84:	08014d88 	.word	0x08014d88
 8003a88:	20000424 	.word	0x20000424
 8003a8c:	08014db0 	.word	0x08014db0
 8003a90:	0801505c 	.word	0x0801505c
 8003a94:	08015068 	.word	0x08015068
 8003a98:	200009e8 	.word	0x200009e8
 8003a9c:	20000028 	.word	0x20000028
 8003aa0:	08015670 	.word	0x08015670
 8003aa4:	080150b0 	.word	0x080150b0
 8003aa8:	080150c0 	.word	0x080150c0
 8003aac:	080150cc 	.word	0x080150cc
 8003ab0:	0801525c 	.word	0x0801525c
 8003ab4:	080156a0 	.word	0x080156a0

08003ab8 <get_client_certificate>:

_Bool get_client_certificate(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af02      	add	r7, sp, #8
	//////////   CLIENT CERTIFICATE SERVICE ////////
	deactivate_pdp();
 8003abe:	f7fd fdd3 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8003ac2:	4a35      	ldr	r2, [pc, #212]	; (8003b98 <get_client_certificate+0xe0>)
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <get_client_certificate+0xe4>)
 8003ac6:	4836      	ldr	r0, [pc, #216]	; (8003ba0 <get_client_certificate+0xe8>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2305      	movs	r3, #5
 8003ace:	f7fe fb7b 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 8003ad2:	4a31      	ldr	r2, [pc, #196]	; (8003b98 <get_client_certificate+0xe0>)
 8003ad4:	4931      	ldr	r1, [pc, #196]	; (8003b9c <get_client_certificate+0xe4>)
 8003ad6:	4833      	ldr	r0, [pc, #204]	; (8003ba4 <get_client_certificate+0xec>)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2305      	movs	r3, #5
 8003ade:	f7fe fb73 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 8003ae2:	f7fd fd0f 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003ae6:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <get_client_certificate+0xf0>)
 8003ae8:	4930      	ldr	r1, [pc, #192]	; (8003bac <get_client_certificate+0xf4>)
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <get_client_certificate+0xf8>)
 8003aec:	0018      	movs	r0, r3
 8003aee:	f00f fbdf 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8003af2:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <get_client_certificate+0xe0>)
 8003af4:	4929      	ldr	r1, [pc, #164]	; (8003b9c <get_client_certificate+0xe4>)
 8003af6:	482e      	ldr	r0, [pc, #184]	; (8003bb0 <get_client_certificate+0xf8>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2305      	movs	r3, #5
 8003afe:	f7fe fb63 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8003b02:	f7fd fd97 	bl	8001634 <activate_pdp>
 8003b06:	1e03      	subs	r3, r0, #0
 8003b08:	d042      	beq.n	8003b90 <get_client_certificate+0xd8>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8003b0a:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <get_client_certificate+0xe0>)
 8003b0c:	4923      	ldr	r1, [pc, #140]	; (8003b9c <get_client_certificate+0xe4>)
 8003b0e:	4829      	ldr	r0, [pc, #164]	; (8003bb4 <get_client_certificate+0xfc>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2305      	movs	r3, #5
 8003b16:	f7fe fb57 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 8003b1a:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <get_client_certificate+0xe0>)
 8003b1c:	4926      	ldr	r1, [pc, #152]	; (8003bb8 <get_client_certificate+0x100>)
 8003b1e:	4827      	ldr	r0, [pc, #156]	; (8003bbc <get_client_certificate+0x104>)
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2346      	movs	r3, #70	; 0x46
 8003b26:	f7fe fb4f 	bl	80021c8 <at_cmd_send>
 8003b2a:	1e03      	subs	r3, r0, #0
 8003b2c:	d030      	beq.n	8003b90 <get_client_certificate+0xd8>
		{

			flush_tx_string();
 8003b2e:	f7fd fce9 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/cc?token=%s", device_id, http_token);
 8003b32:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <get_client_certificate+0x108>)
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <get_client_certificate+0x10c>)
 8003b36:	4924      	ldr	r1, [pc, #144]	; (8003bc8 <get_client_certificate+0x110>)
 8003b38:	481d      	ldr	r0, [pc, #116]	; (8003bb0 <get_client_certificate+0xf8>)
 8003b3a:	f00f fbb9 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <get_client_certificate+0xe0>)
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <get_client_certificate+0xe4>)
 8003b42:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <get_client_certificate+0xf8>)
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2346      	movs	r3, #70	; 0x46
 8003b4a:	f7fe fb3d 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <get_client_certificate+0xe0>)
 8003b50:	4912      	ldr	r1, [pc, #72]	; (8003b9c <get_client_certificate+0xe4>)
 8003b52:	481e      	ldr	r0, [pc, #120]	; (8003bcc <get_client_certificate+0x114>)
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2305      	movs	r3, #5
 8003b5a:	f7fe fb35 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <get_client_certificate+0xe0>)
 8003b60:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <get_client_certificate+0x118>)
 8003b62:	481c      	ldr	r0, [pc, #112]	; (8003bd4 <get_client_certificate+0x11c>)
 8003b64:	2300      	movs	r3, #0
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2346      	movs	r3, #70	; 0x46
 8003b6a:	f7fe fb2d 	bl	80021c8 <at_cmd_send>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d00e      	beq.n	8003b90 <get_client_certificate+0xd8>
			{
				HAL_Delay(10);
 8003b72:	200a      	movs	r0, #10
 8003b74:	f004 fbde 	bl	8008334 <HAL_Delay>

//						at_cmd_send("AT+QFDEL=\"UFS:security/Client.crt\"\r\n\0","OK\r\n","ERROR", 10, 0);

						if(at_cmd_send("at+qhttpreadfile=\"UFS:security/Client.crt\",80\r\n\0","QHTTPREADFILE: 0\r\n","ERROR", 20, 0))//+QHTTPREADFILE: 0
 8003b78:	4a07      	ldr	r2, [pc, #28]	; (8003b98 <get_client_certificate+0xe0>)
 8003b7a:	4917      	ldr	r1, [pc, #92]	; (8003bd8 <get_client_certificate+0x120>)
 8003b7c:	4817      	ldr	r0, [pc, #92]	; (8003bdc <get_client_certificate+0x124>)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2314      	movs	r3, #20
 8003b84:	f7fe fb20 	bl	80021c8 <at_cmd_send>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <get_client_certificate+0xd8>
						{
							return 1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <get_client_certificate+0xda>
			}
		}

	}

	return 0;
 8003b90:	2300      	movs	r3, #0
	////////// CLIENT CERTIFICATE SERVICE END ////////
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	08014b24 	.word	0x08014b24
 8003b9c:	08014b2c 	.word	0x08014b2c
 8003ba0:	08015018 	.word	0x08015018
 8003ba4:	08015038 	.word	0x08015038
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	08014d88 	.word	0x08014d88
 8003bb0:	20000424 	.word	0x20000424
 8003bb4:	08014db0 	.word	0x08014db0
 8003bb8:	0801505c 	.word	0x0801505c
 8003bbc:	08015068 	.word	0x08015068
 8003bc0:	200009e8 	.word	0x200009e8
 8003bc4:	20000028 	.word	0x20000028
 8003bc8:	080156d4 	.word	0x080156d4
 8003bcc:	080150b0 	.word	0x080150b0
 8003bd0:	080150c0 	.word	0x080150c0
 8003bd4:	080150cc 	.word	0x080150cc
 8003bd8:	0801525c 	.word	0x0801525c
 8003bdc:	08015704 	.word	0x08015704

08003be0 <get_client_key>:

_Bool get_client_key(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af02      	add	r7, sp, #8
	//////////   CLIENT KEY SERVICE ////////
	deactivate_pdp();
 8003be6:	f7fd fd3f 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8003bea:	4a35      	ldr	r2, [pc, #212]	; (8003cc0 <get_client_key+0xe0>)
 8003bec:	4935      	ldr	r1, [pc, #212]	; (8003cc4 <get_client_key+0xe4>)
 8003bee:	4836      	ldr	r0, [pc, #216]	; (8003cc8 <get_client_key+0xe8>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	2305      	movs	r3, #5
 8003bf6:	f7fe fae7 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <get_client_key+0xe0>)
 8003bfc:	4931      	ldr	r1, [pc, #196]	; (8003cc4 <get_client_key+0xe4>)
 8003bfe:	4833      	ldr	r0, [pc, #204]	; (8003ccc <get_client_key+0xec>)
 8003c00:	2300      	movs	r3, #0
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2305      	movs	r3, #5
 8003c06:	f7fe fadf 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 8003c0a:	f7fd fc7b 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <get_client_key+0xf0>)
 8003c10:	4930      	ldr	r1, [pc, #192]	; (8003cd4 <get_client_key+0xf4>)
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <get_client_key+0xf8>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f00f fb4b 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8003c1a:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <get_client_key+0xe0>)
 8003c1c:	4929      	ldr	r1, [pc, #164]	; (8003cc4 <get_client_key+0xe4>)
 8003c1e:	482e      	ldr	r0, [pc, #184]	; (8003cd8 <get_client_key+0xf8>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2305      	movs	r3, #5
 8003c26:	f7fe facf 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8003c2a:	f7fd fd03 	bl	8001634 <activate_pdp>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d042      	beq.n	8003cb8 <get_client_key+0xd8>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8003c32:	4a23      	ldr	r2, [pc, #140]	; (8003cc0 <get_client_key+0xe0>)
 8003c34:	4923      	ldr	r1, [pc, #140]	; (8003cc4 <get_client_key+0xe4>)
 8003c36:	4829      	ldr	r0, [pc, #164]	; (8003cdc <get_client_key+0xfc>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	f7fe fac3 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=68,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <get_client_key+0xe0>)
 8003c44:	4926      	ldr	r1, [pc, #152]	; (8003ce0 <get_client_key+0x100>)
 8003c46:	4827      	ldr	r0, [pc, #156]	; (8003ce4 <get_client_key+0x104>)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2346      	movs	r3, #70	; 0x46
 8003c4e:	f7fe fabb 	bl	80021c8 <at_cmd_send>
 8003c52:	1e03      	subs	r3, r0, #0
 8003c54:	d030      	beq.n	8003cb8 <get_client_key+0xd8>
		{

			flush_tx_string();
 8003c56:	f7fd fc55 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "https://shark.carematix.com/cs/%s/ck?token=%s", device_id, http_token);
 8003c5a:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <get_client_key+0x108>)
 8003c5c:	4a23      	ldr	r2, [pc, #140]	; (8003cec <get_client_key+0x10c>)
 8003c5e:	4924      	ldr	r1, [pc, #144]	; (8003cf0 <get_client_key+0x110>)
 8003c60:	481d      	ldr	r0, [pc, #116]	; (8003cd8 <get_client_key+0xf8>)
 8003c62:	f00f fb25 	bl	80132b0 <siprintf>

			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",70,0);
 8003c66:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <get_client_key+0xe0>)
 8003c68:	4916      	ldr	r1, [pc, #88]	; (8003cc4 <get_client_key+0xe4>)
 8003c6a:	481b      	ldr	r0, [pc, #108]	; (8003cd8 <get_client_key+0xf8>)
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2346      	movs	r3, #70	; 0x46
 8003c72:	f7fe faa9 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <get_client_key+0xe0>)
 8003c78:	4912      	ldr	r1, [pc, #72]	; (8003cc4 <get_client_key+0xe4>)
 8003c7a:	481e      	ldr	r0, [pc, #120]	; (8003cf4 <get_client_key+0x114>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2305      	movs	r3, #5
 8003c82:	f7fe faa1 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <get_client_key+0xe0>)
 8003c88:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <get_client_key+0x118>)
 8003c8a:	481c      	ldr	r0, [pc, #112]	; (8003cfc <get_client_key+0x11c>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2346      	movs	r3, #70	; 0x46
 8003c92:	f7fe fa99 	bl	80021c8 <at_cmd_send>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d00e      	beq.n	8003cb8 <get_client_key+0xd8>
			{
				HAL_Delay(10);
 8003c9a:	200a      	movs	r0, #10
 8003c9c:	f004 fb4a 	bl	8008334 <HAL_Delay>

//						at_cmd_send("AT+QFDEL=\"UFS:security/key.pem\"\r\n\0","OK\r\n","ERROR", 10, 0);

						if(at_cmd_send("at+qhttpreadfile=\"UFS:security/key.pem\",80\r\n\0","QHTTPREADFILE: 0","ERROR", 20, 0))//+QHTTPREADFILE: 0
 8003ca0:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <get_client_key+0xe0>)
 8003ca2:	4917      	ldr	r1, [pc, #92]	; (8003d00 <get_client_key+0x120>)
 8003ca4:	4817      	ldr	r0, [pc, #92]	; (8003d04 <get_client_key+0x124>)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2314      	movs	r3, #20
 8003cac:	f7fe fa8c 	bl	80021c8 <at_cmd_send>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <get_client_key+0xd8>
						{
							return 1;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <get_client_key+0xda>
			}
		}

	}

	return 0;
 8003cb8:	2300      	movs	r3, #0
	////////// CLIENT KEY SERVICE END ////////
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	08014b24 	.word	0x08014b24
 8003cc4:	08014b2c 	.word	0x08014b2c
 8003cc8:	08015018 	.word	0x08015018
 8003ccc:	08015038 	.word	0x08015038
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	08014d88 	.word	0x08014d88
 8003cd8:	20000424 	.word	0x20000424
 8003cdc:	08014db0 	.word	0x08014db0
 8003ce0:	0801505c 	.word	0x0801505c
 8003ce4:	08015068 	.word	0x08015068
 8003ce8:	200009e8 	.word	0x200009e8
 8003cec:	20000028 	.word	0x20000028
 8003cf0:	08015738 	.word	0x08015738
 8003cf4:	080150b0 	.word	0x080150b0
 8003cf8:	080150c0 	.word	0x080150c0
 8003cfc:	080150cc 	.word	0x080150cc
 8003d00:	08015768 	.word	0x08015768
 8003d04:	0801577c 	.word	0x0801577c

08003d08 <get_server_clock>:


_Bool get_server_clock(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af02      	add	r7, sp, #8
	//////////   SERVER CLOCK SERVICE ////////
	deactivate_pdp();
 8003d0e:	f7fd fcab 	bl	8001668 <deactivate_pdp>

	at_cmd_send("AT+QHTTPCFG=\"contextid\",1\r\n\0","OK\r\n","ERROR",5,0);
 8003d12:	4a6d      	ldr	r2, [pc, #436]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d14:	496d      	ldr	r1, [pc, #436]	; (8003ecc <get_server_clock+0x1c4>)
 8003d16:	486e      	ldr	r0, [pc, #440]	; (8003ed0 <get_server_clock+0x1c8>)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	2305      	movs	r3, #5
 8003d1e:	f7fe fa53 	bl	80021c8 <at_cmd_send>

	at_cmd_send("at+qhttpcfg=\"requestheader\",0\r\n\0","OK\r\n","ERROR",5,0);
 8003d22:	4a69      	ldr	r2, [pc, #420]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d24:	4969      	ldr	r1, [pc, #420]	; (8003ecc <get_server_clock+0x1c4>)
 8003d26:	486b      	ldr	r0, [pc, #428]	; (8003ed4 <get_server_clock+0x1cc>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	f7fe fa4b 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 8003d32:	f7fd fbe7 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003d36:	4a68      	ldr	r2, [pc, #416]	; (8003ed8 <get_server_clock+0x1d0>)
 8003d38:	4968      	ldr	r1, [pc, #416]	; (8003edc <get_server_clock+0x1d4>)
 8003d3a:	4b69      	ldr	r3, [pc, #420]	; (8003ee0 <get_server_clock+0x1d8>)
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f00f fab7 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8003d42:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d44:	4961      	ldr	r1, [pc, #388]	; (8003ecc <get_server_clock+0x1c4>)
 8003d46:	4866      	ldr	r0, [pc, #408]	; (8003ee0 <get_server_clock+0x1d8>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	f7fe fa3b 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8003d52:	f7fd fc6f 	bl	8001634 <activate_pdp>
 8003d56:	1e03      	subs	r3, r0, #0
 8003d58:	d100      	bne.n	8003d5c <get_server_clock+0x54>
 8003d5a:	e0af      	b.n	8003ebc <get_server_clock+0x1b4>
	{

		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8003d5c:	4a5a      	ldr	r2, [pc, #360]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d5e:	495b      	ldr	r1, [pc, #364]	; (8003ecc <get_server_clock+0x1c4>)
 8003d60:	4860      	ldr	r0, [pc, #384]	; (8003ee4 <get_server_clock+0x1dc>)
 8003d62:	2300      	movs	r3, #0
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2305      	movs	r3, #5
 8003d68:	f7fe fa2e 	bl	80021c8 <at_cmd_send>


		if(at_cmd_send("at+qhttpurl=33,80\r\n\0","CONNECT\r\n","ERROR",70,0))
 8003d6c:	4a56      	ldr	r2, [pc, #344]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d6e:	495e      	ldr	r1, [pc, #376]	; (8003ee8 <get_server_clock+0x1e0>)
 8003d70:	485e      	ldr	r0, [pc, #376]	; (8003eec <get_server_clock+0x1e4>)
 8003d72:	2300      	movs	r3, #0
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2346      	movs	r3, #70	; 0x46
 8003d78:	f7fe fa26 	bl	80021c8 <at_cmd_send>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d100      	bne.n	8003d82 <get_server_clock+0x7a>
 8003d80:	e09c      	b.n	8003ebc <get_server_clock+0x1b4>
		{
			at_cmd_send("https://shark.carematix.com/cs/dt","OK\r\n","ERROR",70,0);
 8003d82:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d84:	4951      	ldr	r1, [pc, #324]	; (8003ecc <get_server_clock+0x1c4>)
 8003d86:	485a      	ldr	r0, [pc, #360]	; (8003ef0 <get_server_clock+0x1e8>)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2346      	movs	r3, #70	; 0x46
 8003d8e:	f7fe fa1b 	bl	80021c8 <at_cmd_send>

			at_cmd_send("at+qhttpurl?\r\n\0","OK\r\n","ERROR",5,0);
 8003d92:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <get_server_clock+0x1c0>)
 8003d94:	494d      	ldr	r1, [pc, #308]	; (8003ecc <get_server_clock+0x1c4>)
 8003d96:	4857      	ldr	r0, [pc, #348]	; (8003ef4 <get_server_clock+0x1ec>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	f7fe fa13 	bl	80021c8 <at_cmd_send>

			if(at_cmd_send("at+qhttpget=80\r\n\0","QHTTPGET: 0","ERROR",70,0))
 8003da2:	4a49      	ldr	r2, [pc, #292]	; (8003ec8 <get_server_clock+0x1c0>)
 8003da4:	4954      	ldr	r1, [pc, #336]	; (8003ef8 <get_server_clock+0x1f0>)
 8003da6:	4855      	ldr	r0, [pc, #340]	; (8003efc <get_server_clock+0x1f4>)
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2346      	movs	r3, #70	; 0x46
 8003dae:	f7fe fa0b 	bl	80021c8 <at_cmd_send>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d100      	bne.n	8003db8 <get_server_clock+0xb0>
 8003db6:	e081      	b.n	8003ebc <get_server_clock+0x1b4>
			{
				HAL_Delay(10);
 8003db8:	200a      	movs	r0, #10
 8003dba:	f004 fabb 	bl	8008334 <HAL_Delay>

				plus_enable = 0;
 8003dbe:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <get_server_clock+0x1f8>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]

				if(at_cmd_send("AT+QHTTPREAD=80\r\n\0","QHTTPREAD: 0\r\n","ERROR",70,0))///+QHTTPREAD: 0
 8003dc4:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <get_server_clock+0x1c0>)
 8003dc6:	494f      	ldr	r1, [pc, #316]	; (8003f04 <get_server_clock+0x1fc>)
 8003dc8:	484f      	ldr	r0, [pc, #316]	; (8003f08 <get_server_clock+0x200>)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2346      	movs	r3, #70	; 0x46
 8003dd0:	f7fe f9fa 	bl	80021c8 <at_cmd_send>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d06e      	beq.n	8003eb6 <get_server_clock+0x1ae>
				{
					flush_array((char*)temp_data,100);
 8003dd8:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <get_server_clock+0x204>)
 8003dda:	2164      	movs	r1, #100	; 0x64
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fd fb6d 	bl	80014bc <flush_array>
					uint8_t z=0,j=0;
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]

					for(z=0; z < 50; z++)
 8003dee:	1dfb      	adds	r3, r7, #7
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e00a      	b.n	8003e0c <get_server_clock+0x104>
					{
						if(gsm_data[z] == 'T')////CONNECT search T
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4a45      	ldr	r2, [pc, #276]	; (8003f10 <get_server_clock+0x208>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	2b54      	cmp	r3, #84	; 0x54
 8003e00:	d009      	beq.n	8003e16 <get_server_clock+0x10e>
					for(z=0; z < 50; z++)
 8003e02:	1dfb      	adds	r3, r7, #7
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	3201      	adds	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b31      	cmp	r3, #49	; 0x31
 8003e12:	d9f0      	bls.n	8003df6 <get_server_clock+0xee>
 8003e14:	e000      	b.n	8003e18 <get_server_clock+0x110>
							break;
 8003e16:	46c0      	nop			; (mov r8, r8)
					}

					for(z=z+3; z < 50; z++)
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	1dfa      	adds	r2, r7, #7
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	3203      	adds	r2, #3
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e016      	b.n	8003e52 <get_server_clock+0x14a>
					{
						if(gsm_data[z] == 0x0D)
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4a39      	ldr	r2, [pc, #228]	; (8003f10 <get_server_clock+0x208>)
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	2b0d      	cmp	r3, #13
 8003e2e:	d015      	beq.n	8003e5c <get_server_clock+0x154>
							break;

						temp_data[j++] = gsm_data[z];
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	1db9      	adds	r1, r7, #6
 8003e3a:	1c58      	adds	r0, r3, #1
 8003e3c:	7008      	strb	r0, [r1, #0]
 8003e3e:	0019      	movs	r1, r3
 8003e40:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <get_server_clock+0x208>)
 8003e42:	5c9a      	ldrb	r2, [r3, r2]
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <get_server_clock+0x204>)
 8003e46:	545a      	strb	r2, [r3, r1]
					for(z=z+3; z < 50; z++)
 8003e48:	1dfb      	adds	r3, r7, #7
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	3201      	adds	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b31      	cmp	r3, #49	; 0x31
 8003e58:	d9e4      	bls.n	8003e24 <get_server_clock+0x11c>
 8003e5a:	e000      	b.n	8003e5e <get_server_clock+0x156>
							break;
 8003e5c:	46c0      	nop			; (mov r8, r8)
					}

					plus_enable = 1;
 8003e5e:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <get_server_clock+0x1f8>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
					server_clock_update=1;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <get_server_clock+0x20c>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]

					send_text_to_usb("\r\nServer Clock: \0");
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <get_server_clock+0x210>)
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fd faf1 	bl	8001454 <send_text_to_usb>
					send_text_to_usb((char*)temp_data);
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <get_server_clock+0x204>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fd faed 	bl	8001454 <send_text_to_usb>
					send_text_to_usb("\r\n\0");
 8003e7a:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <get_server_clock+0x214>)
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fd fae9 	bl	8001454 <send_text_to_usb>

					server_clock = atol((char*)temp_data);
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <get_server_clock+0x204>)
 8003e84:	0018      	movs	r0, r3
 8003e86:	f00e ff4d 	bl	8012d24 <atol>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <get_server_clock+0x218>)
 8003e90:	601a      	str	r2, [r3, #0]

					server_clock_update=0;
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <get_server_clock+0x20c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]

					flush_tx_string();
 8003e98:	f7fd fb34 	bl	8001504 <flush_tx_string>
					sprintf((char*)tx_string, "\r\nServer Clock: %u\r\n\0", server_clock);
 8003e9c:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <get_server_clock+0x218>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4920      	ldr	r1, [pc, #128]	; (8003f24 <get_server_clock+0x21c>)
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <get_server_clock+0x1d8>)
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f00f fa03 	bl	80132b0 <siprintf>
					send_text_to_usb((char*)tx_string);
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <get_server_clock+0x1d8>)
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fd fad1 	bl	8001454 <send_text_to_usb>

					return 1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e003      	b.n	8003ebe <get_server_clock+0x1b6>
				}

				plus_enable = 1;
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <get_server_clock+0x1f8>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
			}
		}

	}

	return 0;
 8003ebc:	2300      	movs	r3, #0
	////////// SERVER CLOCK SERVICE END ////////
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	08014b24 	.word	0x08014b24
 8003ecc:	08014b2c 	.word	0x08014b2c
 8003ed0:	08015018 	.word	0x08015018
 8003ed4:	08015038 	.word	0x08015038
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	08014d88 	.word	0x08014d88
 8003ee0:	20000424 	.word	0x20000424
 8003ee4:	08014db0 	.word	0x08014db0
 8003ee8:	0801505c 	.word	0x0801505c
 8003eec:	080157ac 	.word	0x080157ac
 8003ef0:	080157c4 	.word	0x080157c4
 8003ef4:	080150b0 	.word	0x080150b0
 8003ef8:	080150c0 	.word	0x080150c0
 8003efc:	080150cc 	.word	0x080150cc
 8003f00:	2000006c 	.word	0x2000006c
 8003f04:	080150e0 	.word	0x080150e0
 8003f08:	080150f0 	.word	0x080150f0
 8003f0c:	200009fc 	.word	0x200009fc
 8003f10:	200005b4 	.word	0x200005b4
 8003f14:	20001760 	.word	0x20001760
 8003f18:	080157e8 	.word	0x080157e8
 8003f1c:	08015440 	.word	0x08015440
 8003f20:	20001748 	.word	0x20001748
 8003f24:	080157fc 	.word	0x080157fc

08003f28 <get_ntp_clock>:

_Bool get_ntp_clock(void)
{
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b096      	sub	sp, #88	; 0x58
 8003f2c:	af04      	add	r7, sp, #16
	/* Code tested in online editor
			https://onlinegdb.com/d_Vrn2Fpx
	*/
	//////////   NTP CLOCK SERVICE ////////
	deactivate_pdp();
 8003f2e:	f7fd fb9b 	bl	8001668 <deactivate_pdp>

	flush_tx_string();
 8003f32:	f7fd fae7 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8003f36:	4a6a      	ldr	r2, [pc, #424]	; (80040e0 <get_ntp_clock+0x1b8>)
 8003f38:	496a      	ldr	r1, [pc, #424]	; (80040e4 <get_ntp_clock+0x1bc>)
 8003f3a:	4b6b      	ldr	r3, [pc, #428]	; (80040e8 <get_ntp_clock+0x1c0>)
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f00f f9b7 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8003f42:	4a6a      	ldr	r2, [pc, #424]	; (80040ec <get_ntp_clock+0x1c4>)
 8003f44:	496a      	ldr	r1, [pc, #424]	; (80040f0 <get_ntp_clock+0x1c8>)
 8003f46:	4868      	ldr	r0, [pc, #416]	; (80040e8 <get_ntp_clock+0x1c0>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2305      	movs	r3, #5
 8003f4e:	f7fe f93b 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 8003f52:	f7fd fb6f 	bl	8001634 <activate_pdp>
 8003f56:	1e03      	subs	r3, r0, #0
 8003f58:	d100      	bne.n	8003f5c <get_ntp_clock+0x34>
 8003f5a:	e0bc      	b.n	80040d6 <get_ntp_clock+0x1ae>
	{
		HAL_Delay(300);
 8003f5c:	2396      	movs	r3, #150	; 0x96
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	0018      	movs	r0, r3
 8003f62:	f004 f9e7 	bl	8008334 <HAL_Delay>

		plus_enable=1;
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <get_ntp_clock+0x1cc>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]

		//at+qntp=1,�0.us.pool.ntp.org�
		if(at_cmd_send("at+qntp=1,\"0.us.pool.ntp.org\"\r\n\0","QNTP:","ERROR",130,0))
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <get_ntp_clock+0x1c4>)
 8003f6e:	4962      	ldr	r1, [pc, #392]	; (80040f8 <get_ntp_clock+0x1d0>)
 8003f70:	4862      	ldr	r0, [pc, #392]	; (80040fc <get_ntp_clock+0x1d4>)
 8003f72:	2300      	movs	r3, #0
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2382      	movs	r3, #130	; 0x82
 8003f78:	f7fe f926 	bl	80021c8 <at_cmd_send>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d100      	bne.n	8003f82 <get_ntp_clock+0x5a>
 8003f80:	e0a9      	b.n	80040d6 <get_ntp_clock+0x1ae>
		{
			plus_enable=0;
 8003f82:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <get_ntp_clock+0x1cc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8003f88:	2064      	movs	r0, #100	; 0x64
 8003f8a:	f004 f9d3 	bl	8008334 <HAL_Delay>
			plus_enable=1;
 8003f8e:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <get_ntp_clock+0x1cc>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]

			if(strstr((char*)gsm_data, "QNTP: 0"))
 8003f94:	4a5a      	ldr	r2, [pc, #360]	; (8004100 <get_ntp_clock+0x1d8>)
 8003f96:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <get_ntp_clock+0x1dc>)
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f00f f9a8 	bl	80132f0 <strstr>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d100      	bne.n	8003fa6 <get_ntp_clock+0x7e>
 8003fa4:	e097      	b.n	80040d6 <get_ntp_clock+0x1ae>
			{

				unsigned char ntp_format[50]={0}, ntp_date[7]={0}, ntp_time[7]={0};
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	3304      	adds	r3, #4
 8003fae:	222e      	movs	r2, #46	; 0x2e
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f00e fee6 	bl	8012d84 <memset>
 8003fb8:	2440      	movs	r4, #64	; 0x40
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f00e fedc 	bl	8012d84 <memset>
 8003fcc:	2538      	movs	r5, #56	; 0x38
 8003fce:	197b      	adds	r3, r7, r5
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	2100      	movs	r1, #0
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f00e fed2 	bl	8012d84 <memset>

				explode_string(gsm_data, strlen((char*)gsm_data), 1, ',', '\r', 25, '\r');
 8003fe0:	4b48      	ldr	r3, [pc, #288]	; (8004104 <get_ntp_clock+0x1dc>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fc f890 	bl	8000108 <strlen>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	b299      	uxth	r1, r3
 8003fec:	4845      	ldr	r0, [pc, #276]	; (8004104 <get_ntp_clock+0x1dc>)
 8003fee:	230d      	movs	r3, #13
 8003ff0:	9302      	str	r3, [sp, #8]
 8003ff2:	2319      	movs	r3, #25
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	230d      	movs	r3, #13
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	232c      	movs	r3, #44	; 0x2c
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f7fd fddb 	bl	8001bb8 <explode_string>

				sprintf((char*)ntp_format, "%s\0", temp_data);
 8004002:	4a41      	ldr	r2, [pc, #260]	; (8004108 <get_ntp_clock+0x1e0>)
 8004004:	4941      	ldr	r1, [pc, #260]	; (800410c <get_ntp_clock+0x1e4>)
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	0018      	movs	r0, r3
 800400a:	f00f f951 	bl	80132b0 <siprintf>

				ntp_date[0] = ntp_format[9];
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	7a5a      	ldrb	r2, [r3, #9]
 8004012:	0021      	movs	r1, r4
 8004014:	187b      	adds	r3, r7, r1
 8004016:	701a      	strb	r2, [r3, #0]
				ntp_date[1] = ntp_format[10];
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	7a9a      	ldrb	r2, [r3, #10]
 800401c:	187b      	adds	r3, r7, r1
 800401e:	705a      	strb	r2, [r3, #1]
				ntp_date[2] = ntp_format[6];
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	799a      	ldrb	r2, [r3, #6]
 8004024:	187b      	adds	r3, r7, r1
 8004026:	709a      	strb	r2, [r3, #2]
				ntp_date[3] = ntp_format[7];
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	79da      	ldrb	r2, [r3, #7]
 800402c:	187b      	adds	r3, r7, r1
 800402e:	70da      	strb	r2, [r3, #3]
				ntp_date[4] = ntp_format[3];
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	78da      	ldrb	r2, [r3, #3]
 8004034:	187b      	adds	r3, r7, r1
 8004036:	711a      	strb	r2, [r3, #4]
				ntp_date[5] = ntp_format[4];
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	791a      	ldrb	r2, [r3, #4]
 800403c:	187b      	adds	r3, r7, r1
 800403e:	715a      	strb	r2, [r3, #5]


				ntp_time[0] = ntp_format[12];
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	7b1a      	ldrb	r2, [r3, #12]
 8004044:	0028      	movs	r0, r5
 8004046:	183b      	adds	r3, r7, r0
 8004048:	701a      	strb	r2, [r3, #0]
				ntp_time[1] = ntp_format[13];
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	7b5a      	ldrb	r2, [r3, #13]
 800404e:	183b      	adds	r3, r7, r0
 8004050:	705a      	strb	r2, [r3, #1]
				ntp_time[2] = ntp_format[15];
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	7bda      	ldrb	r2, [r3, #15]
 8004056:	183b      	adds	r3, r7, r0
 8004058:	709a      	strb	r2, [r3, #2]
				ntp_time[3] = ntp_format[16];
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	7c1a      	ldrb	r2, [r3, #16]
 800405e:	183b      	adds	r3, r7, r0
 8004060:	70da      	strb	r2, [r3, #3]
				ntp_time[4] = ntp_format[18];
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	7c9a      	ldrb	r2, [r3, #18]
 8004066:	183b      	adds	r3, r7, r0
 8004068:	711a      	strb	r2, [r3, #4]
				ntp_time[5] = ntp_format[19];
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	7cda      	ldrb	r2, [r3, #19]
 800406e:	183b      	adds	r3, r7, r0
 8004070:	715a      	strb	r2, [r3, #5]

				server_clock_update = 1;
 8004072:	4b27      	ldr	r3, [pc, #156]	; (8004110 <get_ntp_clock+0x1e8>)
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
				server_clock = convert_to_epoch(ntp_date, ntp_time);
 8004078:	183a      	adds	r2, r7, r0
 800407a:	187b      	adds	r3, r7, r1
 800407c:	0011      	movs	r1, r2
 800407e:	0018      	movs	r0, r3
 8004080:	f7fd f8c6 	bl	8001210 <convert_to_epoch>
 8004084:	0002      	movs	r2, r0
 8004086:	000b      	movs	r3, r1
 8004088:	4b22      	ldr	r3, [pc, #136]	; (8004114 <get_ntp_clock+0x1ec>)
 800408a:	601a      	str	r2, [r3, #0]
				server_clock_update = 0;
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <get_ntp_clock+0x1e8>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]

	//			send_text_to_usb("\r\nGSM Data: \0");
	//			send_text_to_usb((char*)gsm_data);
	//			send_text_to_usb("\r\n\0");

				send_text_to_usb("\r\nNTP Clock: \0");
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <get_ntp_clock+0x1f0>)
 8004094:	0018      	movs	r0, r3
 8004096:	f7fd f9dd 	bl	8001454 <send_text_to_usb>
				send_text_to_usb((char*)ntp_format);
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	0018      	movs	r0, r3
 800409e:	f7fd f9d9 	bl	8001454 <send_text_to_usb>
				send_text_to_usb("\r\n\0");
 80040a2:	4b1e      	ldr	r3, [pc, #120]	; (800411c <get_ntp_clock+0x1f4>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fd f9d5 	bl	8001454 <send_text_to_usb>

				send_text_to_usb("\r\nEpoch Time: \0");
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <get_ntp_clock+0x1f8>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fd f9d1 	bl	8001454 <send_text_to_usb>
				sprintf((char*)temp_data, "%ld\0", (long) server_clock);
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <get_ntp_clock+0x1ec>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	001a      	movs	r2, r3
 80040b8:	491a      	ldr	r1, [pc, #104]	; (8004124 <get_ntp_clock+0x1fc>)
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <get_ntp_clock+0x1e0>)
 80040bc:	0018      	movs	r0, r3
 80040be:	f00f f8f7 	bl	80132b0 <siprintf>
				send_text_to_usb((char*)temp_data);
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <get_ntp_clock+0x1e0>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7fd f9c5 	bl	8001454 <send_text_to_usb>
				send_text_to_usb("\r\n\0");
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <get_ntp_clock+0x1f4>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fd f9c1 	bl	8001454 <send_text_to_usb>

				return 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <get_ntp_clock+0x1b0>
			}
		}
	}

	return 0;
 80040d6:	2300      	movs	r3, #0
	////////// NTP CLOCK SERVICE END ////////
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b012      	add	sp, #72	; 0x48
 80040de:	bdb0      	pop	{r4, r5, r7, pc}
 80040e0:	20000000 	.word	0x20000000
 80040e4:	08014d88 	.word	0x08014d88
 80040e8:	20000424 	.word	0x20000424
 80040ec:	08014b24 	.word	0x08014b24
 80040f0:	08014b2c 	.word	0x08014b2c
 80040f4:	2000006c 	.word	0x2000006c
 80040f8:	08015814 	.word	0x08015814
 80040fc:	0801581c 	.word	0x0801581c
 8004100:	08015840 	.word	0x08015840
 8004104:	200005b4 	.word	0x200005b4
 8004108:	200009fc 	.word	0x200009fc
 800410c:	08015478 	.word	0x08015478
 8004110:	20001760 	.word	0x20001760
 8004114:	20001748 	.word	0x20001748
 8004118:	08015848 	.word	0x08015848
 800411c:	08015440 	.word	0x08015440
 8004120:	08015858 	.word	0x08015858
 8004124:	08015868 	.word	0x08015868

08004128 <json_get_value>:
///////// JSON PARSER  /////////

///{"st":1,"ca":1260,"ck":1678,"cc":1479,"sc":398,"cv":"1","tk":"wCCgqF6gDTWC3qWg"}
//// occurance is added to get value in case of multiple occurance
_Bool json_get_value(char* parameter, uint8_t parameter_length, uint8_t occurance, char* variable, uint8_t variable_size)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	0008      	movs	r0, r1
 8004132:	0011      	movs	r1, r2
 8004134:	607b      	str	r3, [r7, #4]
 8004136:	230b      	movs	r3, #11
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	1c02      	adds	r2, r0, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	230a      	movs	r3, #10
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	1c0a      	adds	r2, r1, #0
 8004144:	701a      	strb	r2, [r3, #0]
	uint8_t parameter_index=0, variable_index=0, occurance_count=0;
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	2316      	movs	r3, #22
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	2315      	movs	r3, #21
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2200      	movs	r2, #0
 800415c:	701a      	strb	r2, [r3, #0]
	_Bool bracket_flag=0;
 800415e:	2314      	movs	r3, #20
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]

	for(uint16_t i=0; i <= json_count; i++)
 8004166:	2312      	movs	r3, #18
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2200      	movs	r2, #0
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e0e8      	b.n	8004342 <json_get_value+0x21a>
	{
		if(json_response[i]==parameter[parameter_index])
 8004170:	2312      	movs	r3, #18
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	4a79      	ldr	r2, [pc, #484]	; (800435c <json_get_value+0x234>)
 8004178:	5cd2      	ldrb	r2, [r2, r3]
 800417a:	2017      	movs	r0, #23
 800417c:	183b      	adds	r3, r7, r0
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	68f9      	ldr	r1, [r7, #12]
 8004182:	18cb      	adds	r3, r1, r3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d000      	beq.n	800418c <json_get_value+0x64>
 800418a:	e0cd      	b.n	8004328 <json_get_value+0x200>
		{
			if(parameter_index == parameter_length-1)////// PARAMETER FOUND CONDITION
 800418c:	183b      	adds	r3, r7, r0
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	230b      	movs	r3, #11
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	429a      	cmp	r2, r3
 800419a:	d000      	beq.n	800419e <json_get_value+0x76>
 800419c:	e0bd      	b.n	800431a <json_get_value+0x1f2>
			{
				occurance_count++;
 800419e:	2115      	movs	r1, #21
 80041a0:	187b      	adds	r3, r7, r1
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	3201      	adds	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]

				if(occurance_count==occurance)
 80041aa:	187a      	adds	r2, r7, r1
 80041ac:	230a      	movs	r3, #10
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d000      	beq.n	80041ba <json_get_value+0x92>
 80041b8:	e0b8      	b.n	800432c <json_get_value+0x204>
				{
					for(uint8_t j=0; j<variable_size; j++)/////// FLUSH VARIABLE
 80041ba:	2311      	movs	r3, #17
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e00b      	b.n	80041dc <json_get_value+0xb4>
					{
						variable[j] = 0;
 80041c4:	2111      	movs	r1, #17
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	18d3      	adds	r3, r2, r3
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
					for(uint8_t j=0; j<variable_size; j++)/////// FLUSH VARIABLE
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	3201      	adds	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	2311      	movs	r3, #17
 80041de:	18fa      	adds	r2, r7, r3
 80041e0:	2320      	movs	r3, #32
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d3eb      	bcc.n	80041c4 <json_get_value+0x9c>
					}

					if(json_response[i+3]==' ')//////////// CONDITION FOR space after semicolon "sd": "123123"
 80041ec:	2112      	movs	r1, #18
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	3303      	adds	r3, #3
 80041f4:	4a59      	ldr	r2, [pc, #356]	; (800435c <json_get_value+0x234>)
 80041f6:	5cd3      	ldrb	r3, [r2, r3]
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d104      	bne.n	8004206 <json_get_value+0xde>
						i = i+1;
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	187a      	adds	r2, r7, r1
 8004200:	8812      	ldrh	r2, [r2, #0]
 8004202:	3201      	adds	r2, #1
 8004204:	801a      	strh	r2, [r3, #0]

					if(json_response[i+3]=='"')//////////// CONDITION FOR NUMERIC OR STRING VALUE
 8004206:	2112      	movs	r1, #18
 8004208:	187b      	adds	r3, r7, r1
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	3303      	adds	r3, #3
 800420e:	4a53      	ldr	r2, [pc, #332]	; (800435c <json_get_value+0x234>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	2b22      	cmp	r3, #34	; 0x22
 8004214:	d105      	bne.n	8004222 <json_get_value+0xfa>
						i = i+4;
 8004216:	187b      	adds	r3, r7, r1
 8004218:	187a      	adds	r2, r7, r1
 800421a:	8812      	ldrh	r2, [r2, #0]
 800421c:	3204      	adds	r2, #4
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	e012      	b.n	8004248 <json_get_value+0x120>
					else if(json_response[i+3]=='{')//////////// CONDITION FOR "desired": { }
 8004222:	2312      	movs	r3, #18
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	3303      	adds	r3, #3
 800422a:	4a4c      	ldr	r2, [pc, #304]	; (800435c <json_get_value+0x234>)
 800422c:	5cd3      	ldrb	r3, [r2, r3]
 800422e:	2b7b      	cmp	r3, #123	; 0x7b
 8004230:	d104      	bne.n	800423c <json_get_value+0x114>
						bracket_flag = 1;
 8004232:	2314      	movs	r3, #20
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e005      	b.n	8004248 <json_get_value+0x120>
					else
						i = i+3;
 800423c:	2212      	movs	r2, #18
 800423e:	18bb      	adds	r3, r7, r2
 8004240:	18ba      	adds	r2, r7, r2
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	3203      	adds	r2, #3
 8004246:	801a      	strh	r2, [r3, #0]

					for(i=i; i <= json_count; i++)/////// COPY PARAMETER VALUE TO VARIABLE
 8004248:	2212      	movs	r2, #18
 800424a:	18bb      	adds	r3, r7, r2
 800424c:	18ba      	adds	r2, r7, r2
 800424e:	8812      	ldrh	r2, [r2, #0]
 8004250:	801a      	strh	r2, [r3, #0]
 8004252:	e05b      	b.n	800430c <json_get_value+0x1e4>
					{
						if(bracket_flag && json_response[i]=='}')////// COPY COMPLETE CONDITION IN CASE OF "desired": { }
 8004254:	2314      	movs	r3, #20
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01d      	beq.n	800429a <json_get_value+0x172>
 800425e:	2012      	movs	r0, #18
 8004260:	183b      	adds	r3, r7, r0
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	4a3d      	ldr	r2, [pc, #244]	; (800435c <json_get_value+0x234>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	2b7d      	cmp	r3, #125	; 0x7d
 800426a:	d116      	bne.n	800429a <json_get_value+0x172>
						{
							if(variable_index < variable_size)////////  TO AVOID BUFFER OVERFLOW
 800426c:	2116      	movs	r1, #22
 800426e:	187a      	adds	r2, r7, r1
 8004270:	2320      	movs	r3, #32
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20c      	bcs.n	8004296 <json_get_value+0x16e>
								variable[variable_index++] = json_response[i];
 800427c:	183b      	adds	r3, r7, r0
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	187b      	adds	r3, r7, r1
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	1879      	adds	r1, r7, r1
 8004286:	1c58      	adds	r0, r3, #1
 8004288:	7008      	strb	r0, [r1, #0]
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	185b      	adds	r3, r3, r1
 8004290:	4932      	ldr	r1, [pc, #200]	; (800435c <json_get_value+0x234>)
 8004292:	5c8a      	ldrb	r2, [r1, r2]
 8004294:	701a      	strb	r2, [r3, #0]
							return 1;
 8004296:	2301      	movs	r3, #1
 8004298:	e05c      	b.n	8004354 <json_get_value+0x22c>
						}
						else if(!bracket_flag && (json_response[i]=='"' || json_response[i]==',' || json_response[i]=='}'))////// COPY COMPLETE CONDITION
 800429a:	2314      	movs	r3, #20
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	4053      	eors	r3, r2
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <json_get_value+0x1ac>
 80042aa:	2112      	movs	r1, #18
 80042ac:	187b      	adds	r3, r7, r1
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <json_get_value+0x234>)
 80042b2:	5cd3      	ldrb	r3, [r2, r3]
 80042b4:	2b22      	cmp	r3, #34	; 0x22
 80042b6:	d00b      	beq.n	80042d0 <json_get_value+0x1a8>
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	4a27      	ldr	r2, [pc, #156]	; (800435c <json_get_value+0x234>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	2b2c      	cmp	r3, #44	; 0x2c
 80042c2:	d005      	beq.n	80042d0 <json_get_value+0x1a8>
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	4a24      	ldr	r2, [pc, #144]	; (800435c <json_get_value+0x234>)
 80042ca:	5cd3      	ldrb	r3, [r2, r3]
 80042cc:	2b7d      	cmp	r3, #125	; 0x7d
 80042ce:	d101      	bne.n	80042d4 <json_get_value+0x1ac>
						{
							return 1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e03f      	b.n	8004354 <json_get_value+0x22c>
						}
						else
						{
							if(variable_index < variable_size)////////  TO AVOID BUFFER OVERFLOW
 80042d4:	2116      	movs	r1, #22
 80042d6:	187a      	adds	r2, r7, r1
 80042d8:	2320      	movs	r3, #32
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d20d      	bcs.n	8004300 <json_get_value+0x1d8>
								variable[variable_index++] = json_response[i];
 80042e4:	2312      	movs	r3, #18
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	1879      	adds	r1, r7, r1
 80042f0:	1c58      	adds	r0, r3, #1
 80042f2:	7008      	strb	r0, [r1, #0]
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	185b      	adds	r3, r3, r1
 80042fa:	4918      	ldr	r1, [pc, #96]	; (800435c <json_get_value+0x234>)
 80042fc:	5c8a      	ldrb	r2, [r1, r2]
 80042fe:	701a      	strb	r2, [r3, #0]
					for(i=i; i <= json_count; i++)/////// COPY PARAMETER VALUE TO VARIABLE
 8004300:	2112      	movs	r1, #18
 8004302:	187b      	adds	r3, r7, r1
 8004304:	881a      	ldrh	r2, [r3, #0]
 8004306:	187b      	adds	r3, r7, r1
 8004308:	3201      	adds	r2, #1
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <json_get_value+0x238>)
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	2212      	movs	r2, #18
 8004312:	18ba      	adds	r2, r7, r2
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d99c      	bls.n	8004254 <json_get_value+0x12c>
				{
					goto SEARCH_AGAIN;
				}
			}

			parameter_index++;
 800431a:	2117      	movs	r1, #23
 800431c:	187b      	adds	r3, r7, r1
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	187b      	adds	r3, r7, r1
 8004322:	3201      	adds	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e006      	b.n	8004336 <json_get_value+0x20e>
		}
		else
		{
			SEARCH_AGAIN:
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	e000      	b.n	800432e <json_get_value+0x206>
					goto SEARCH_AGAIN;
 800432c:	46c0      	nop			; (mov r8, r8)
			parameter_index = 0;
 800432e:	2317      	movs	r3, #23
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i <= json_count; i++)
 8004336:	2112      	movs	r1, #18
 8004338:	187b      	adds	r3, r7, r1
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	187b      	adds	r3, r7, r1
 800433e:	3201      	adds	r2, #1
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <json_get_value+0x238>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	2212      	movs	r2, #18
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d800      	bhi.n	8004352 <json_get_value+0x22a>
 8004350:	e70e      	b.n	8004170 <json_get_value+0x48>
		}
	}

	return 0;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000790 	.word	0x20000790
 8004360:	200002ee 	.word	0x200002ee

08004364 <connect_mqtt_server>:
//////// JSON PARSER END ////////


_Bool connect_mqtt_server(void)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b083      	sub	sp, #12
 8004368:	af02      	add	r7, sp, #8
	deactivate_pdp();
 800436a:	f7fd f97d 	bl	8001668 <deactivate_pdp>

	flush_tx_string();
 800436e:	f7fd f8c9 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8004372:	4a44      	ldr	r2, [pc, #272]	; (8004484 <connect_mqtt_server+0x120>)
 8004374:	4944      	ldr	r1, [pc, #272]	; (8004488 <connect_mqtt_server+0x124>)
 8004376:	4b45      	ldr	r3, [pc, #276]	; (800448c <connect_mqtt_server+0x128>)
 8004378:	0018      	movs	r0, r3
 800437a:	f00e ff99 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 800437e:	4a44      	ldr	r2, [pc, #272]	; (8004490 <connect_mqtt_server+0x12c>)
 8004380:	4944      	ldr	r1, [pc, #272]	; (8004494 <connect_mqtt_server+0x130>)
 8004382:	4842      	ldr	r0, [pc, #264]	; (800448c <connect_mqtt_server+0x128>)
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2305      	movs	r3, #5
 800438a:	f7fd ff1d 	bl	80021c8 <at_cmd_send>

	if(activate_pdp())
 800438e:	f7fd f951 	bl	8001634 <activate_pdp>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d070      	beq.n	8004478 <connect_mqtt_server+0x114>
	{
		at_cmd_send("AT+QIACT?\r\n\0","OK\r\n","ERROR",5,0);
 8004396:	4a3e      	ldr	r2, [pc, #248]	; (8004490 <connect_mqtt_server+0x12c>)
 8004398:	493e      	ldr	r1, [pc, #248]	; (8004494 <connect_mqtt_server+0x130>)
 800439a:	483f      	ldr	r0, [pc, #252]	; (8004498 <connect_mqtt_server+0x134>)
 800439c:	2300      	movs	r3, #0
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2305      	movs	r3, #5
 80043a2:	f7fd ff11 	bl	80021c8 <at_cmd_send>

		at_cmd_send("at+qmtcfg=\"SSL\",0,1,2\r\n\0","OK\r\n","ERROR",5,0);
 80043a6:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <connect_mqtt_server+0x12c>)
 80043a8:	493a      	ldr	r1, [pc, #232]	; (8004494 <connect_mqtt_server+0x130>)
 80043aa:	483c      	ldr	r0, [pc, #240]	; (800449c <connect_mqtt_server+0x138>)
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2305      	movs	r3, #5
 80043b2:	f7fd ff09 	bl	80021c8 <at_cmd_send>

		at_cmd_send("at+qmtcfg=\"version\",0,4\r\n\0","OK\r\n","ERROR",5,0);
 80043b6:	4a36      	ldr	r2, [pc, #216]	; (8004490 <connect_mqtt_server+0x12c>)
 80043b8:	4936      	ldr	r1, [pc, #216]	; (8004494 <connect_mqtt_server+0x130>)
 80043ba:	4839      	ldr	r0, [pc, #228]	; (80044a0 <connect_mqtt_server+0x13c>)
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2305      	movs	r3, #5
 80043c2:	f7fd ff01 	bl	80021c8 <at_cmd_send>

		at_cmd_send("at+qsslcfg=\"seclevel\",2,2\r\n\0","OK\r\n","ERROR",5,0);
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <connect_mqtt_server+0x12c>)
 80043c8:	4932      	ldr	r1, [pc, #200]	; (8004494 <connect_mqtt_server+0x130>)
 80043ca:	4836      	ldr	r0, [pc, #216]	; (80044a4 <connect_mqtt_server+0x140>)
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	2305      	movs	r3, #5
 80043d2:	f7fd fef9 	bl	80021c8 <at_cmd_send>

		at_cmd_send("at+qsslcfg=\"sslversion\",2,4\r\n\0","OK\r\n","ERROR",5,0);
 80043d6:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <connect_mqtt_server+0x12c>)
 80043d8:	492e      	ldr	r1, [pc, #184]	; (8004494 <connect_mqtt_server+0x130>)
 80043da:	4833      	ldr	r0, [pc, #204]	; (80044a8 <connect_mqtt_server+0x144>)
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2305      	movs	r3, #5
 80043e2:	f7fd fef1 	bl	80021c8 <at_cmd_send>

		at_cmd_send("at+qsslcfg=\"ciphersuite\",2,0xFFFF\r\n\0","OK\r\n","ERROR",5,0);
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <connect_mqtt_server+0x12c>)
 80043e8:	492a      	ldr	r1, [pc, #168]	; (8004494 <connect_mqtt_server+0x130>)
 80043ea:	4830      	ldr	r0, [pc, #192]	; (80044ac <connect_mqtt_server+0x148>)
 80043ec:	2300      	movs	r3, #0
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2305      	movs	r3, #5
 80043f2:	f7fd fee9 	bl	80021c8 <at_cmd_send>

		at_cmd_send("AT+QSSLCFG=\"cacert\",2,\"security/CaCert.crt\"\r\n\0","OK\r\n","ERROR",5,0);
 80043f6:	4a26      	ldr	r2, [pc, #152]	; (8004490 <connect_mqtt_server+0x12c>)
 80043f8:	4926      	ldr	r1, [pc, #152]	; (8004494 <connect_mqtt_server+0x130>)
 80043fa:	482d      	ldr	r0, [pc, #180]	; (80044b0 <connect_mqtt_server+0x14c>)
 80043fc:	2300      	movs	r3, #0
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2305      	movs	r3, #5
 8004402:	f7fd fee1 	bl	80021c8 <at_cmd_send>

		at_cmd_send("AT+QSSLCFG=\"clientcert\",2,\"security/Client.crt\"\r\n\0","OK\r\n","ERROR",5,0);
 8004406:	4a22      	ldr	r2, [pc, #136]	; (8004490 <connect_mqtt_server+0x12c>)
 8004408:	4922      	ldr	r1, [pc, #136]	; (8004494 <connect_mqtt_server+0x130>)
 800440a:	482a      	ldr	r0, [pc, #168]	; (80044b4 <connect_mqtt_server+0x150>)
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2305      	movs	r3, #5
 8004412:	f7fd fed9 	bl	80021c8 <at_cmd_send>

		at_cmd_send("AT+QSSLCFG=\"clientkey\",2,\"security/key.pem\"\r\n\0","OK\r\n","ERROR",5,0);
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <connect_mqtt_server+0x12c>)
 8004418:	491e      	ldr	r1, [pc, #120]	; (8004494 <connect_mqtt_server+0x130>)
 800441a:	4827      	ldr	r0, [pc, #156]	; (80044b8 <connect_mqtt_server+0x154>)
 800441c:	2300      	movs	r3, #0
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2305      	movs	r3, #5
 8004422:	f7fd fed1 	bl	80021c8 <at_cmd_send>

		flush_tx_string();
 8004426:	f7fd f86d 	bl	8001504 <flush_tx_string>
		sprintf((char*)tx_string, "at+qmtopen=0,\"%s\",%s\r\n\0", mqtt_server, mqtt_port);/////OPEN NETWORK FOR MQTT CLIENT
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <connect_mqtt_server+0x158>)
 800442c:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <connect_mqtt_server+0x15c>)
 800442e:	4925      	ldr	r1, [pc, #148]	; (80044c4 <connect_mqtt_server+0x160>)
 8004430:	4816      	ldr	r0, [pc, #88]	; (800448c <connect_mqtt_server+0x128>)
 8004432:	f00e ff3d 	bl	80132b0 <siprintf>
		if(at_cmd_send((char*)tx_string,"QMTOPEN: 0,0\r\n","ERROR",80,0))/// +QMTOPEN: 0,0
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <connect_mqtt_server+0x12c>)
 8004438:	4923      	ldr	r1, [pc, #140]	; (80044c8 <connect_mqtt_server+0x164>)
 800443a:	4814      	ldr	r0, [pc, #80]	; (800448c <connect_mqtt_server+0x128>)
 800443c:	2300      	movs	r3, #0
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2350      	movs	r3, #80	; 0x50
 8004442:	f7fd fec1 	bl	80021c8 <at_cmd_send>
 8004446:	1e03      	subs	r3, r0, #0
 8004448:	d016      	beq.n	8004478 <connect_mqtt_server+0x114>
		{
			flush_tx_string();
 800444a:	f7fd f85b 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "at+qmtconn=0,\"%s\",\"%s\",\"%s\"\r\n\0", mqtt_client_id, mqtt_username, mqtt_password);/////CONNECT CLIENT TO MQTT SERVER
 800444e:	4c1f      	ldr	r4, [pc, #124]	; (80044cc <connect_mqtt_server+0x168>)
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <connect_mqtt_server+0x16c>)
 8004452:	4920      	ldr	r1, [pc, #128]	; (80044d4 <connect_mqtt_server+0x170>)
 8004454:	480d      	ldr	r0, [pc, #52]	; (800448c <connect_mqtt_server+0x128>)
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <connect_mqtt_server+0x174>)
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	0023      	movs	r3, r4
 800445c:	f00e ff28 	bl	80132b0 <siprintf>
			if(at_cmd_send((char*)tx_string,"QMTCONN: 0,0,0\r\n","ERROR",20,0))///+QMTCONN: 0,0,0
 8004460:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <connect_mqtt_server+0x12c>)
 8004462:	491e      	ldr	r1, [pc, #120]	; (80044dc <connect_mqtt_server+0x178>)
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <connect_mqtt_server+0x128>)
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2314      	movs	r3, #20
 800446c:	f7fd feac 	bl	80021c8 <at_cmd_send>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <connect_mqtt_server+0x114>
			{
				return 1;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <connect_mqtt_server+0x116>
			}
		}

	}

	return 0;
 8004478:	2300      	movs	r3, #0
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b001      	add	sp, #4
 8004480:	bd90      	pop	{r4, r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	20000000 	.word	0x20000000
 8004488:	08014d88 	.word	0x08014d88
 800448c:	20000424 	.word	0x20000424
 8004490:	08014b24 	.word	0x08014b24
 8004494:	08014b2c 	.word	0x08014b2c
 8004498:	08014db0 	.word	0x08014db0
 800449c:	08015870 	.word	0x08015870
 80044a0:	0801588c 	.word	0x0801588c
 80044a4:	080158a8 	.word	0x080158a8
 80044a8:	080158c8 	.word	0x080158c8
 80044ac:	080158e8 	.word	0x080158e8
 80044b0:	08015910 	.word	0x08015910
 80044b4:	08015940 	.word	0x08015940
 80044b8:	08015974 	.word	0x08015974
 80044bc:	20000b6c 	.word	0x20000b6c
 80044c0:	20000b08 	.word	0x20000b08
 80044c4:	080159a4 	.word	0x080159a4
 80044c8:	080159bc 	.word	0x080159bc
 80044cc:	20000b74 	.word	0x20000b74
 80044d0:	20000c0c 	.word	0x20000c0c
 80044d4:	080159cc 	.word	0x080159cc
 80044d8:	20000bd8 	.word	0x20000bd8
 80044dc:	080159ec 	.word	0x080159ec

080044e0 <disconnect_mqtt_connection>:

void disconnect_mqtt_connection(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af02      	add	r7, sp, #8
	at_cmd_send("AT+QMTDISC=0\r\n\0","QMTDISC: 0,0\r\n","ERROR",20,0);//+QMTDISC: 0,0
 80044e6:	4a07      	ldr	r2, [pc, #28]	; (8004504 <disconnect_mqtt_connection+0x24>)
 80044e8:	4907      	ldr	r1, [pc, #28]	; (8004508 <disconnect_mqtt_connection+0x28>)
 80044ea:	4808      	ldr	r0, [pc, #32]	; (800450c <disconnect_mqtt_connection+0x2c>)
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2314      	movs	r3, #20
 80044f2:	f7fd fe69 	bl	80021c8 <at_cmd_send>
	connected_to_mqtt_server_flag=0;
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <disconnect_mqtt_connection+0x30>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	08014b24 	.word	0x08014b24
 8004508:	08015a00 	.word	0x08015a00
 800450c:	08015a10 	.word	0x08015a10
 8004510:	2000175a 	.word	0x2000175a

08004514 <power_down_bg96>:

void power_down_bg96(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af02      	add	r7, sp, #8
	#if BG96
	send_text_to_usb((char*)"\r\nTURNING OFF BG96\r\n\0");
	#elif BG95
	send_text_to_usb((char*)"\r\nTURNING OFF BG95\r\n\0");
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <power_down_bg96+0x24>)
 800451c:	0018      	movs	r0, r3
 800451e:	f7fc ff99 	bl	8001454 <send_text_to_usb>
	#endif

	at_cmd_send("AT+QPOWD\r\n\0","pdpdeact","ERROR",10,0);
 8004522:	4a06      	ldr	r2, [pc, #24]	; (800453c <power_down_bg96+0x28>)
 8004524:	4906      	ldr	r1, [pc, #24]	; (8004540 <power_down_bg96+0x2c>)
 8004526:	4807      	ldr	r0, [pc, #28]	; (8004544 <power_down_bg96+0x30>)
 8004528:	2300      	movs	r3, #0
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	230a      	movs	r3, #10
 800452e:	f7fd fe4b 	bl	80021c8 <at_cmd_send>
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08015a20 	.word	0x08015a20
 800453c:	08014b24 	.word	0x08014b24
 8004540:	08015a38 	.word	0x08015a38
 8004544:	08015a44 	.word	0x08015a44

08004548 <power_down_bg96_handler>:

void power_down_bg96_handler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	if(bg96_power_flag && (mem_write_address==mem_read_address || mqtt_server_connection_fail_counter>=2) && !server_clock_flag && !ping_service_flag && !configuration_service_flag && !update_device_twin_flag && !ca_certificate_flag && !client_certificate_flag && !client_key_flag)
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <power_down_bg96_handler+0x94>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03f      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <power_down_bg96_handler+0x98>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <power_down_bg96_handler+0x9c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d003      	beq.n	8004568 <power_down_bg96_handler+0x20>
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <power_down_bg96_handler+0xa0>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d935      	bls.n	80045d4 <power_down_bg96_handler+0x8c>
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <power_down_bg96_handler+0xa4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4053      	eors	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <power_down_bg96_handler+0xa8>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	4053      	eors	r3, r2
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d027      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <power_down_bg96_handler+0xac>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2201      	movs	r2, #1
 800458a:	4053      	eors	r3, r2
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <power_down_bg96_handler+0xb0>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	4053      	eors	r3, r2
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d019      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 80045a0:	4b16      	ldr	r3, [pc, #88]	; (80045fc <power_down_bg96_handler+0xb4>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	4053      	eors	r3, r2
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d012      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <power_down_bg96_handler+0xb8>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	4053      	eors	r3, r2
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <power_down_bg96_handler+0xbc>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4053      	eors	r3, r2
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <power_down_bg96_handler+0x8c>
	{
		power_down_bg96();
 80045ca:	f7ff ffa3 	bl	8004514 <power_down_bg96>
		bg96_power_flag=0;
 80045ce:	4b03      	ldr	r3, [pc, #12]	; (80045dc <power_down_bg96_handler+0x94>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
	}
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	2000175e 	.word	0x2000175e
 80045e0:	20000064 	.word	0x20000064
 80045e4:	20000068 	.word	0x20000068
 80045e8:	200002da 	.word	0x200002da
 80045ec:	2000175b 	.word	0x2000175b
 80045f0:	2000175c 	.word	0x2000175c
 80045f4:	20001755 	.word	0x20001755
 80045f8:	20001759 	.word	0x20001759
 80045fc:	20001756 	.word	0x20001756
 8004600:	20001757 	.word	0x20001757
 8004604:	20001758 	.word	0x20001758

08004608 <power_on_bg96>:

void power_on_bg96(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af02      	add	r7, sp, #8
	if(!at_cmd_send("AT\r\n\0","OK\r\n","ERROR",2,0))
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <power_on_bg96+0xa0>)
 8004610:	4926      	ldr	r1, [pc, #152]	; (80046ac <power_on_bg96+0xa4>)
 8004612:	4827      	ldr	r0, [pc, #156]	; (80046b0 <power_on_bg96+0xa8>)
 8004614:	2300      	movs	r3, #0
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2302      	movs	r3, #2
 800461a:	f7fd fdd5 	bl	80021c8 <at_cmd_send>
 800461e:	0003      	movs	r3, r0
 8004620:	001a      	movs	r2, r3
 8004622:	2301      	movs	r3, #1
 8004624:	4053      	eors	r3, r2
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d03a      	beq.n	80046a2 <power_on_bg96+0x9a>
	{
		#if BG96
		send_text_to_usb((char*)"\r\nTURNING ON BG96\r\n\0");
		#elif BG95
		send_text_to_usb((char*)"\r\nTURNING ON BG95\r\n\0");
 800462c:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <power_on_bg96+0xac>)
 800462e:	0018      	movs	r0, r3
 8004630:	f7fc ff10 	bl	8001454 <send_text_to_usb>
		#endif


		//GSM  PWRKEY
		HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port,GSM_PWRKEY_Pin,GPIO_PIN_SET);
 8004634:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <power_on_bg96+0xb0>)
 8004636:	2201      	movs	r2, #1
 8004638:	2101      	movs	r1, #1
 800463a:	0018      	movs	r0, r3
 800463c:	f004 fc6e 	bl	8008f1c <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <power_on_bg96+0xb4>)
 8004642:	0018      	movs	r0, r3
 8004644:	f003 fe76 	bl	8008334 <HAL_Delay>
		HAL_GPIO_WritePin(GSM_PWRKEY_GPIO_Port,GSM_PWRKEY_Pin,GPIO_PIN_RESET);
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <power_on_bg96+0xb0>)
 800464a:	2200      	movs	r2, #0
 800464c:	2101      	movs	r1, #1
 800464e:	0018      	movs	r0, r3
 8004650:	f004 fc64 	bl	8008f1c <HAL_GPIO_WritePin>

		timer_cmd = 0;
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <power_on_bg96+0xb8>)
 8004656:	2200      	movs	r2, #0
 8004658:	801a      	strh	r2, [r3, #0]

		while(timer_cmd <= 30)
 800465a:	e014      	b.n	8004686 <power_on_bg96+0x7e>
		{
			if(strstr((char*)gsm_data, (char*)"CPIN: NOT INSERTED"))
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <power_on_bg96+0xbc>)
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <power_on_bg96+0xc0>)
 8004660:	0011      	movs	r1, r2
 8004662:	0018      	movs	r0, r3
 8004664:	f00e fe44 	bl	80132f0 <strstr>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d004      	beq.n	8004676 <power_on_bg96+0x6e>
			{
				send_text_to_usb((char*)"\r\nSIM NOT INSERTED\r\n\0");
 800466c:	4b17      	ldr	r3, [pc, #92]	; (80046cc <power_on_bg96+0xc4>)
 800466e:	0018      	movs	r0, r3
 8004670:	f7fc fef0 	bl	8001454 <send_text_to_usb>
				break;
 8004674:	e00d      	b.n	8004692 <power_on_bg96+0x8a>
			if(strstr((char*)gsm_data, (char*)"SMS DONE"))
			{
				break;
			}
			#elif BG95
			if(strstr((char*)gsm_data, (char*)"APP RDY"))
 8004676:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <power_on_bg96+0xc8>)
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <power_on_bg96+0xc0>)
 800467a:	0011      	movs	r1, r2
 800467c:	0018      	movs	r0, r3
 800467e:	f00e fe37 	bl	80132f0 <strstr>
 8004682:	1e03      	subs	r3, r0, #0
 8004684:	d104      	bne.n	8004690 <power_on_bg96+0x88>
		while(timer_cmd <= 30)
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <power_on_bg96+0xb8>)
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b1e      	cmp	r3, #30
 800468c:	d9e6      	bls.n	800465c <power_on_bg96+0x54>
 800468e:	e000      	b.n	8004692 <power_on_bg96+0x8a>
			{
				break;
 8004690:	46c0      	nop			; (mov r8, r8)
			}
			#endif

		}

		at_cmd_send("ATE0\r\n\0","OK\r\n","ERROR",2,0);
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <power_on_bg96+0xa0>)
 8004694:	4905      	ldr	r1, [pc, #20]	; (80046ac <power_on_bg96+0xa4>)
 8004696:	480f      	ldr	r0, [pc, #60]	; (80046d4 <power_on_bg96+0xcc>)
 8004698:	2300      	movs	r3, #0
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2302      	movs	r3, #2
 800469e:	f7fd fd93 	bl	80021c8 <at_cmd_send>
	}
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	08014b24 	.word	0x08014b24
 80046ac:	08014b2c 	.word	0x08014b2c
 80046b0:	08014b90 	.word	0x08014b90
 80046b4:	08015a50 	.word	0x08015a50
 80046b8:	48000400 	.word	0x48000400
 80046bc:	000005dc 	.word	0x000005dc
 80046c0:	200002e0 	.word	0x200002e0
 80046c4:	08015a68 	.word	0x08015a68
 80046c8:	200005b4 	.word	0x200005b4
 80046cc:	08015a7c 	.word	0x08015a7c
 80046d0:	080151c0 	.word	0x080151c0
 80046d4:	08014b34 	.word	0x08014b34

080046d8 <erase_all_records>:

void erase_all_records(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
	sFLASH_EraseBulk(LOGS_START_ADDRESS);
 80046dc:	23a0      	movs	r3, #160	; 0xa0
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	0018      	movs	r0, r3
 80046e2:	f003 fcd5 	bl	8008090 <sFLASH_EraseBulk>

	mem_write_address=LOGS_START_ADDRESS;
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <erase_all_records+0x38>)
 80046e8:	22a0      	movs	r2, #160	; 0xa0
 80046ea:	01d2      	lsls	r2, r2, #7
 80046ec:	601a      	str	r2, [r3, #0]
	mem_read_address=LOGS_START_ADDRESS;
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <erase_all_records+0x3c>)
 80046f0:	22a0      	movs	r2, #160	; 0xa0
 80046f2:	01d2      	lsls	r2, r2, #7
 80046f4:	601a      	str	r2, [r3, #0]

	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 80046f6:	23c0      	movs	r3, #192	; 0xc0
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7fd f85c 	bl	80017b8 <store_runtime_parameters_to_flash>
	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	0018      	movs	r0, r3
 8004706:	f7fd f857 	bl	80017b8 <store_runtime_parameters_to_flash>
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000064 	.word	0x20000064
 8004714:	20000068 	.word	0x20000068

08004718 <get_gsm_signal_strength>:

_Bool get_gsm_signal_strength(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af02      	add	r7, sp, #8
	if(at_cmd_send("AT+CSQ\r\n\0", "OK\r\n", "ERROR\r\n", 5, 0))
 800471e:	4a2e      	ldr	r2, [pc, #184]	; (80047d8 <get_gsm_signal_strength+0xc0>)
 8004720:	492e      	ldr	r1, [pc, #184]	; (80047dc <get_gsm_signal_strength+0xc4>)
 8004722:	482f      	ldr	r0, [pc, #188]	; (80047e0 <get_gsm_signal_strength+0xc8>)
 8004724:	2300      	movs	r3, #0
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2305      	movs	r3, #5
 800472a:	f7fd fd4d 	bl	80021c8 <at_cmd_send>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d04d      	beq.n	80047ce <get_gsm_signal_strength+0xb6>
		{
			//+CSQ: 28,99

			unsigned char temp_signal[3]={0};
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <get_gsm_signal_strength+0xcc>)
 8004736:	8812      	ldrh	r2, [r2, #0]
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	2202      	movs	r2, #2
 800473c:	2100      	movs	r1, #0
 800473e:	5499      	strb	r1, [r3, r2]
			uint8_t start = 0;
 8004740:	1dfb      	adds	r3, r7, #7
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
			for(; start<15; start++)
 8004746:	e03e      	b.n	80047c6 <get_gsm_signal_strength+0xae>
			{
				if(gsm_data[start]=='C')
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <get_gsm_signal_strength+0xd0>)
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	2b43      	cmp	r3, #67	; 0x43
 8004752:	d133      	bne.n	80047bc <get_gsm_signal_strength+0xa4>
				{
					if(gsm_data[start+2]=='Q')
 8004754:	1dfb      	adds	r3, r7, #7
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	3302      	adds	r3, #2
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <get_gsm_signal_strength+0xd0>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	2b51      	cmp	r3, #81	; 0x51
 8004760:	d12c      	bne.n	80047bc <get_gsm_signal_strength+0xa4>
					{
						temp_signal[0] = gsm_data[start+5];
 8004762:	1dfb      	adds	r3, r7, #7
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3305      	adds	r3, #5
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <get_gsm_signal_strength+0xd0>)
 800476a:	5cd2      	ldrb	r2, [r2, r3]
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	701a      	strb	r2, [r3, #0]

						if(gsm_data[start+6]!=',')
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	3306      	adds	r3, #6
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <get_gsm_signal_strength+0xd0>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	2b2c      	cmp	r3, #44	; 0x2c
 800477c:	d006      	beq.n	800478c <get_gsm_signal_strength+0x74>
						{
							temp_signal[1] = gsm_data[start+6];
 800477e:	1dfb      	adds	r3, r7, #7
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	3306      	adds	r3, #6
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <get_gsm_signal_strength+0xd0>)
 8004786:	5cd2      	ldrb	r2, [r2, r3]
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	705a      	strb	r2, [r3, #1]
						}

						gsm_signal_strength = atoi((char*)temp_signal);
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	0018      	movs	r0, r3
 8004790:	f00e fac2 	bl	8012d18 <atoi>
 8004794:	0003      	movs	r3, r0
 8004796:	b2da      	uxtb	r2, r3
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <get_gsm_signal_strength+0xd4>)
 800479a:	701a      	strb	r2, [r3, #0]

						flush_tx_string();
 800479c:	f7fc feb2 	bl	8001504 <flush_tx_string>
						sprintf((char*)tx_string, "\r\nSignal Strength : %u\r\n\0", gsm_signal_strength);
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <get_gsm_signal_strength+0xd4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	4912      	ldr	r1, [pc, #72]	; (80047f0 <get_gsm_signal_strength+0xd8>)
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <get_gsm_signal_strength+0xdc>)
 80047aa:	0018      	movs	r0, r3
 80047ac:	f00e fd80 	bl	80132b0 <siprintf>
						send_text_to_usb((char*)tx_string);
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <get_gsm_signal_strength+0xdc>)
 80047b2:	0018      	movs	r0, r3
 80047b4:	f7fc fe4e 	bl	8001454 <send_text_to_usb>

						return 1;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e009      	b.n	80047d0 <get_gsm_signal_strength+0xb8>
			for(; start<15; start++)
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	1dfb      	adds	r3, r7, #7
 80047c2:	3201      	adds	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b0e      	cmp	r3, #14
 80047cc:	d9bc      	bls.n	8004748 <get_gsm_signal_strength+0x30>
					}
				}
			}
		}

		return 0;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	08015a94 	.word	0x08015a94
 80047dc:	08014b2c 	.word	0x08014b2c
 80047e0:	08015a9c 	.word	0x08015a9c
 80047e4:	08014b20 	.word	0x08014b20
 80047e8:	200005b4 	.word	0x200005b4
 80047ec:	200002d5 	.word	0x200002d5
 80047f0:	08015aa8 	.word	0x08015aa8
 80047f4:	20000424 	.word	0x20000424

080047f8 <publish_meter_readings>:

_Bool publish_meter_readings(void)
{
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	4cda      	ldr	r4, [pc, #872]	; (8004b64 <publish_meter_readings+0x36c>)
 80047fc:	44a5      	add	sp, r4
 80047fe:	af06      	add	r7, sp, #24
	///////////// PUBLISH READING DATA

	while(mem_write_address>mem_read_address)
 8004800:	f000 fc48 	bl	8005094 <publish_meter_readings+0x89c>
	{


		flush_tx_string();
 8004804:	f7fc fe7e 	bl	8001504 <flush_tx_string>

		sprintf((char*)tx_string, "at+qmtpub=0,1,1,0,\"%s\"\r\n\0", read_pb);/////PUBLISH TO READ_PB TOPIC
 8004808:	4ad7      	ldr	r2, [pc, #860]	; (8004b68 <publish_meter_readings+0x370>)
 800480a:	49d8      	ldr	r1, [pc, #864]	; (8004b6c <publish_meter_readings+0x374>)
 800480c:	4bd8      	ldr	r3, [pc, #864]	; (8004b70 <publish_meter_readings+0x378>)
 800480e:	0018      	movs	r0, r3
 8004810:	f00e fd4e 	bl	80132b0 <siprintf>

		if(at_cmd_send((char*)tx_string,">","ERROR",20,0))/// >
 8004814:	4ad7      	ldr	r2, [pc, #860]	; (8004b74 <publish_meter_readings+0x37c>)
 8004816:	49d8      	ldr	r1, [pc, #864]	; (8004b78 <publish_meter_readings+0x380>)
 8004818:	48d5      	ldr	r0, [pc, #852]	; (8004b70 <publish_meter_readings+0x378>)
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2314      	movs	r3, #20
 8004820:	f7fd fcd2 	bl	80021c8 <at_cmd_send>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d101      	bne.n	800482c <publish_meter_readings+0x34>
 8004828:	f000 fc25 	bl	8005076 <publish_meter_readings+0x87e>
		{
			struct DataField serial_number, timestamp, model_number, meter_id, raw_data, signal_strength;
			unsigned char string1[100]={0}, string2[100]={0}, string3[100]={0}, string4[100]={0}, string5[100]={0}, string6[100]={0},
 800482c:	4bd3      	ldr	r3, [pc, #844]	; (8004b7c <publish_meter_readings+0x384>)
 800482e:	2284      	movs	r2, #132	; 0x84
 8004830:	00d2      	lsls	r2, r2, #3
 8004832:	4694      	mov	ip, r2
 8004834:	44bc      	add	ip, r7
 8004836:	4463      	add	r3, ip
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	3304      	adds	r3, #4
 800483e:	2260      	movs	r2, #96	; 0x60
 8004840:	2100      	movs	r1, #0
 8004842:	0018      	movs	r0, r3
 8004844:	f00e fa9e 	bl	8012d84 <memset>
 8004848:	4bcd      	ldr	r3, [pc, #820]	; (8004b80 <publish_meter_readings+0x388>)
 800484a:	2284      	movs	r2, #132	; 0x84
 800484c:	00d2      	lsls	r2, r2, #3
 800484e:	4694      	mov	ip, r2
 8004850:	44bc      	add	ip, r7
 8004852:	4463      	add	r3, ip
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	3304      	adds	r3, #4
 800485a:	2260      	movs	r2, #96	; 0x60
 800485c:	2100      	movs	r1, #0
 800485e:	0018      	movs	r0, r3
 8004860:	f00e fa90 	bl	8012d84 <memset>
 8004864:	4bc7      	ldr	r3, [pc, #796]	; (8004b84 <publish_meter_readings+0x38c>)
 8004866:	2284      	movs	r2, #132	; 0x84
 8004868:	00d2      	lsls	r2, r2, #3
 800486a:	4694      	mov	ip, r2
 800486c:	44bc      	add	ip, r7
 800486e:	4463      	add	r3, ip
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	2260      	movs	r2, #96	; 0x60
 8004878:	2100      	movs	r1, #0
 800487a:	0018      	movs	r0, r3
 800487c:	f00e fa82 	bl	8012d84 <memset>
 8004880:	4bc1      	ldr	r3, [pc, #772]	; (8004b88 <publish_meter_readings+0x390>)
 8004882:	2284      	movs	r2, #132	; 0x84
 8004884:	00d2      	lsls	r2, r2, #3
 8004886:	4694      	mov	ip, r2
 8004888:	44bc      	add	ip, r7
 800488a:	4463      	add	r3, ip
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	3304      	adds	r3, #4
 8004892:	2260      	movs	r2, #96	; 0x60
 8004894:	2100      	movs	r1, #0
 8004896:	0018      	movs	r0, r3
 8004898:	f00e fa74 	bl	8012d84 <memset>
 800489c:	4bbb      	ldr	r3, [pc, #748]	; (8004b8c <publish_meter_readings+0x394>)
 800489e:	2284      	movs	r2, #132	; 0x84
 80048a0:	00d2      	lsls	r2, r2, #3
 80048a2:	4694      	mov	ip, r2
 80048a4:	44bc      	add	ip, r7
 80048a6:	4463      	add	r3, ip
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2260      	movs	r2, #96	; 0x60
 80048b0:	2100      	movs	r1, #0
 80048b2:	0018      	movs	r0, r3
 80048b4:	f00e fa66 	bl	8012d84 <memset>
 80048b8:	23d2      	movs	r3, #210	; 0xd2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2260      	movs	r2, #96	; 0x60
 80048c6:	2100      	movs	r1, #0
 80048c8:	0018      	movs	r0, r3
 80048ca:	f00e fa5b 	bl	8012d84 <memset>
				packet_length[2]={0}, string7[100]={0};
 80048ce:	4bb0      	ldr	r3, [pc, #704]	; (8004b90 <publish_meter_readings+0x398>)
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	23eb      	movs	r3, #235	; 0xeb
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2260      	movs	r2, #96	; 0x60
 80048e4:	2100      	movs	r1, #0
 80048e6:	0018      	movs	r0, r3
 80048e8:	f00e fa4c 	bl	8012d84 <memset>
			uint16_t total_length=0;
 80048ec:	4aa9      	ldr	r2, [pc, #676]	; (8004b94 <publish_meter_readings+0x39c>)
 80048ee:	18bb      	adds	r3, r7, r2
 80048f0:	2200      	movs	r2, #0
 80048f2:	801a      	strh	r2, [r3, #0]

			////// BLIPGO SERIAL NUMBER
			serial_number.dataId=0x1A;
 80048f4:	4ba8      	ldr	r3, [pc, #672]	; (8004b98 <publish_meter_readings+0x3a0>)
 80048f6:	2184      	movs	r1, #132	; 0x84
 80048f8:	00c9      	lsls	r1, r1, #3
 80048fa:	468c      	mov	ip, r1
 80048fc:	44bc      	add	ip, r7
 80048fe:	4463      	add	r3, ip
 8004900:	221a      	movs	r2, #26
 8004902:	701a      	strb	r2, [r3, #0]
			serial_number.dataType='1';
 8004904:	4ba4      	ldr	r3, [pc, #656]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004906:	2184      	movs	r1, #132	; 0x84
 8004908:	00c9      	lsls	r1, r1, #3
 800490a:	468c      	mov	ip, r1
 800490c:	44bc      	add	ip, r7
 800490e:	4463      	add	r3, ip
 8004910:	2231      	movs	r2, #49	; 0x31
 8004912:	705a      	strb	r2, [r3, #1]
			serial_number.decimalPlace='0';
 8004914:	4ba0      	ldr	r3, [pc, #640]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004916:	2184      	movs	r1, #132	; 0x84
 8004918:	00c9      	lsls	r1, r1, #3
 800491a:	468c      	mov	ip, r1
 800491c:	44bc      	add	ip, r7
 800491e:	4463      	add	r3, ip
 8004920:	2235      	movs	r2, #53	; 0x35
 8004922:	2130      	movs	r1, #48	; 0x30
 8004924:	5499      	strb	r1, [r3, r2]
			sprintf((char*)serial_number.dataValue, "%s\0", device_id);
 8004926:	4a9d      	ldr	r2, [pc, #628]	; (8004b9c <publish_meter_readings+0x3a4>)
 8004928:	499d      	ldr	r1, [pc, #628]	; (8004ba0 <publish_meter_readings+0x3a8>)
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	3303      	adds	r3, #3
 800492e:	0018      	movs	r0, r3
 8004930:	f00e fcbe 	bl	80132b0 <siprintf>
			serial_number.dataLength=strlen((char*)serial_number.dataValue);
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	3303      	adds	r3, #3
 8004938:	0018      	movs	r0, r3
 800493a:	f7fb fbe5 	bl	8000108 <strlen>
 800493e:	0003      	movs	r3, r0
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b95      	ldr	r3, [pc, #596]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004944:	2184      	movs	r1, #132	; 0x84
 8004946:	00c9      	lsls	r1, r1, #3
 8004948:	468c      	mov	ip, r1
 800494a:	44bc      	add	ip, r7
 800494c:	4463      	add	r3, ip
 800494e:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string2, "%02X%c%02X%s%c\0",
				serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 8004950:	4b91      	ldr	r3, [pc, #580]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004952:	2184      	movs	r1, #132	; 0x84
 8004954:	00c9      	lsls	r1, r1, #3
 8004956:	468c      	mov	ip, r1
 8004958:	44bc      	add	ip, r7
 800495a:	4463      	add	r3, ip
 800495c:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string2, "%02X%c%02X%s%c\0",
 800495e:	001d      	movs	r5, r3
				serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 8004960:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004962:	2184      	movs	r1, #132	; 0x84
 8004964:	00c9      	lsls	r1, r1, #3
 8004966:	468c      	mov	ip, r1
 8004968:	44bc      	add	ip, r7
 800496a:	4463      	add	r3, ip
 800496c:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string2, "%02X%c%02X%s%c\0",
 800496e:	001e      	movs	r6, r3
				serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 8004970:	4b89      	ldr	r3, [pc, #548]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004972:	2184      	movs	r1, #132	; 0x84
 8004974:	00c9      	lsls	r1, r1, #3
 8004976:	468c      	mov	ip, r1
 8004978:	44bc      	add	ip, r7
 800497a:	4463      	add	r3, ip
 800497c:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string2, "%02X%c%02X%s%c\0",
 800497e:	001c      	movs	r4, r3
			serial_number.decimalPlace);
 8004980:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <publish_meter_readings+0x3a0>)
 8004982:	2184      	movs	r1, #132	; 0x84
 8004984:	00c9      	lsls	r1, r1, #3
 8004986:	468c      	mov	ip, r1
 8004988:	44bc      	add	ip, r7
 800498a:	4463      	add	r3, ip
 800498c:	2235      	movs	r2, #53	; 0x35
 800498e:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string2, "%02X%c%02X%s%c\0",
 8004990:	4984      	ldr	r1, [pc, #528]	; (8004ba4 <publish_meter_readings+0x3ac>)
 8004992:	20dc      	movs	r0, #220	; 0xdc
 8004994:	0040      	lsls	r0, r0, #1
 8004996:	1838      	adds	r0, r7, r0
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	1d3b      	adds	r3, r7, #4
 800499c:	3303      	adds	r3, #3
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	9400      	str	r4, [sp, #0]
 80049a2:	0033      	movs	r3, r6
 80049a4:	002a      	movs	r2, r5
 80049a6:	f00e fc83 	bl	80132b0 <siprintf>

			total_length=strlen((char*)string2);///// length of serial number
 80049aa:	20dc      	movs	r0, #220	; 0xdc
 80049ac:	0040      	lsls	r0, r0, #1
 80049ae:	183b      	adds	r3, r7, r0
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fba9 	bl	8000108 <strlen>
 80049b6:	0002      	movs	r2, r0
 80049b8:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <publish_meter_readings+0x39c>)
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	801a      	strh	r2, [r3, #0]

			////////////////////////// Read stored clock value record, if it is clock record
			read_clock_from_flash();
 80049be:	f001 f839 	bl	8005a34 <read_clock_from_flash>

			////// TIMESTAMP
			timestamp.dataId=0x1C;
 80049c2:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <publish_meter_readings+0x3b0>)
 80049c4:	2184      	movs	r1, #132	; 0x84
 80049c6:	00c9      	lsls	r1, r1, #3
 80049c8:	468c      	mov	ip, r1
 80049ca:	44bc      	add	ip, r7
 80049cc:	4463      	add	r3, ip
 80049ce:	221c      	movs	r2, #28
 80049d0:	701a      	strb	r2, [r3, #0]
			timestamp.dataType='2';
 80049d2:	4b75      	ldr	r3, [pc, #468]	; (8004ba8 <publish_meter_readings+0x3b0>)
 80049d4:	2184      	movs	r1, #132	; 0x84
 80049d6:	00c9      	lsls	r1, r1, #3
 80049d8:	468c      	mov	ip, r1
 80049da:	44bc      	add	ip, r7
 80049dc:	4463      	add	r3, ip
 80049de:	2232      	movs	r2, #50	; 0x32
 80049e0:	705a      	strb	r2, [r3, #1]
			timestamp.decimalPlace='0';
 80049e2:	4b71      	ldr	r3, [pc, #452]	; (8004ba8 <publish_meter_readings+0x3b0>)
 80049e4:	2184      	movs	r1, #132	; 0x84
 80049e6:	00c9      	lsls	r1, r1, #3
 80049e8:	468c      	mov	ip, r1
 80049ea:	44bc      	add	ip, r7
 80049ec:	4463      	add	r3, ip
 80049ee:	2235      	movs	r2, #53	; 0x35
 80049f0:	2130      	movs	r1, #48	; 0x30
 80049f2:	5499      	strb	r1, [r3, r2]

			///convert timestamp to hex
			uint32_t t = atol((char*)read_clock);
 80049f4:	4b6d      	ldr	r3, [pc, #436]	; (8004bac <publish_meter_readings+0x3b4>)
 80049f6:	0018      	movs	r0, r3
 80049f8:	f00e f994 	bl	8012d24 <atol>
 80049fc:	0003      	movs	r3, r0
 80049fe:	2083      	movs	r0, #131	; 0x83
 8004a00:	00c0      	lsls	r0, r0, #3
 8004a02:	1839      	adds	r1, r7, r0
 8004a04:	600b      	str	r3, [r1, #0]
			unsigned char bytes[4]={0};
 8004a06:	2182      	movs	r1, #130	; 0x82
 8004a08:	00c9      	lsls	r1, r1, #3
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
			bytes[0] = (t >> 24) & 0xFF;
 8004a10:	183c      	adds	r4, r7, r0
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	701a      	strb	r2, [r3, #0]
			bytes[1] = (t >> 16) & 0xFF;
 8004a1c:	183c      	adds	r4, r7, r0
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	705a      	strb	r2, [r3, #1]
			bytes[2] = (t >> 8) & 0xFF;
 8004a28:	183c      	adds	r4, r7, r0
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	709a      	strb	r2, [r3, #2]
			bytes[3] = t & 0xFF;
 8004a34:	1838      	adds	r0, r7, r0
 8004a36:	6803      	ldr	r3, [r0, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	187b      	adds	r3, r7, r1
 8004a3c:	70da      	strb	r2, [r3, #3]

			sprintf((char*)timestamp.dataValue, "%02X%02X%02X%02X\0", bytes[0], bytes[1], bytes[2], bytes[3]);
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	001d      	movs	r5, r3
 8004a44:	187b      	adds	r3, r7, r1
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	001e      	movs	r6, r3
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	789b      	ldrb	r3, [r3, #2]
 8004a4e:	001a      	movs	r2, r3
 8004a50:	187b      	adds	r3, r7, r1
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	001c      	movs	r4, r3
 8004a56:	4956      	ldr	r1, [pc, #344]	; (8004bb0 <publish_meter_readings+0x3b8>)
 8004a58:	203c      	movs	r0, #60	; 0x3c
 8004a5a:	183b      	adds	r3, r7, r0
 8004a5c:	1cd8      	adds	r0, r3, #3
 8004a5e:	9401      	str	r4, [sp, #4]
 8004a60:	9200      	str	r2, [sp, #0]
 8004a62:	0033      	movs	r3, r6
 8004a64:	002a      	movs	r2, r5
 8004a66:	f00e fc23 	bl	80132b0 <siprintf>
			timestamp.dataLength=strlen((char*)timestamp.dataValue);
 8004a6a:	203c      	movs	r0, #60	; 0x3c
 8004a6c:	183b      	adds	r3, r7, r0
 8004a6e:	3303      	adds	r3, #3
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fb fb49 	bl	8000108 <strlen>
 8004a76:	0003      	movs	r3, r0
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <publish_meter_readings+0x3b0>)
 8004a7c:	2184      	movs	r1, #132	; 0x84
 8004a7e:	00c9      	lsls	r1, r1, #3
 8004a80:	468c      	mov	ip, r1
 8004a82:	44bc      	add	ip, r7
 8004a84:	4463      	add	r3, ip
 8004a86:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string3, "%02X%c%02X%s%c\0",
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 8004a88:	4b47      	ldr	r3, [pc, #284]	; (8004ba8 <publish_meter_readings+0x3b0>)
 8004a8a:	2184      	movs	r1, #132	; 0x84
 8004a8c:	00c9      	lsls	r1, r1, #3
 8004a8e:	468c      	mov	ip, r1
 8004a90:	44bc      	add	ip, r7
 8004a92:	4463      	add	r3, ip
 8004a94:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string3, "%02X%c%02X%s%c\0",
 8004a96:	001d      	movs	r5, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <publish_meter_readings+0x3b0>)
 8004a9a:	2184      	movs	r1, #132	; 0x84
 8004a9c:	00c9      	lsls	r1, r1, #3
 8004a9e:	468c      	mov	ip, r1
 8004aa0:	44bc      	add	ip, r7
 8004aa2:	4463      	add	r3, ip
 8004aa4:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string3, "%02X%c%02X%s%c\0",
 8004aa6:	001e      	movs	r6, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <publish_meter_readings+0x3b0>)
 8004aaa:	2184      	movs	r1, #132	; 0x84
 8004aac:	00c9      	lsls	r1, r1, #3
 8004aae:	468c      	mov	ip, r1
 8004ab0:	44bc      	add	ip, r7
 8004ab2:	4463      	add	r3, ip
 8004ab4:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string3, "%02X%c%02X%s%c\0",
 8004ab6:	001c      	movs	r4, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 8004ab8:	4b3b      	ldr	r3, [pc, #236]	; (8004ba8 <publish_meter_readings+0x3b0>)
 8004aba:	2184      	movs	r1, #132	; 0x84
 8004abc:	00c9      	lsls	r1, r1, #3
 8004abe:	468c      	mov	ip, r1
 8004ac0:	44bc      	add	ip, r7
 8004ac2:	4463      	add	r3, ip
 8004ac4:	2235      	movs	r2, #53	; 0x35
 8004ac6:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string3, "%02X%c%02X%s%c\0",
 8004ac8:	4936      	ldr	r1, [pc, #216]	; (8004ba4 <publish_meter_readings+0x3ac>)
 8004aca:	2087      	movs	r0, #135	; 0x87
 8004acc:	0080      	lsls	r0, r0, #2
 8004ace:	1838      	adds	r0, r7, r0
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	233c      	movs	r3, #60	; 0x3c
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	3303      	adds	r3, #3
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	9400      	str	r4, [sp, #0]
 8004adc:	0033      	movs	r3, r6
 8004ade:	002a      	movs	r2, r5
 8004ae0:	f00e fbe6 	bl	80132b0 <siprintf>

			total_length=total_length+strlen((char*)string3);///// length of timestamp
 8004ae4:	2087      	movs	r0, #135	; 0x87
 8004ae6:	0080      	lsls	r0, r0, #2
 8004ae8:	183b      	adds	r3, r7, r0
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7fb fb0c 	bl	8000108 <strlen>
 8004af0:	0003      	movs	r3, r0
 8004af2:	b299      	uxth	r1, r3
 8004af4:	4a27      	ldr	r2, [pc, #156]	; (8004b94 <publish_meter_readings+0x39c>)
 8004af6:	18bb      	adds	r3, r7, r2
 8004af8:	18ba      	adds	r2, r7, r2
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	188a      	adds	r2, r1, r2
 8004afe:	801a      	strh	r2, [r3, #0]


			////// model_number
			model_number.dataId=0x02;
 8004b00:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <publish_meter_readings+0x3bc>)
 8004b02:	2284      	movs	r2, #132	; 0x84
 8004b04:	00d2      	lsls	r2, r2, #3
 8004b06:	4694      	mov	ip, r2
 8004b08:	44bc      	add	ip, r7
 8004b0a:	4463      	add	r3, ip
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	701a      	strb	r2, [r3, #0]
			model_number.dataType='2';
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <publish_meter_readings+0x3bc>)
 8004b12:	2284      	movs	r2, #132	; 0x84
 8004b14:	00d2      	lsls	r2, r2, #3
 8004b16:	4694      	mov	ip, r2
 8004b18:	44bc      	add	ip, r7
 8004b1a:	4463      	add	r3, ip
 8004b1c:	2232      	movs	r2, #50	; 0x32
 8004b1e:	705a      	strb	r2, [r3, #1]
			model_number.decimalPlace='0';
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <publish_meter_readings+0x3bc>)
 8004b22:	2284      	movs	r2, #132	; 0x84
 8004b24:	00d2      	lsls	r2, r2, #3
 8004b26:	4694      	mov	ip, r2
 8004b28:	44bc      	add	ip, r7
 8004b2a:	4463      	add	r3, ip
 8004b2c:	2235      	movs	r2, #53	; 0x35
 8004b2e:	2130      	movs	r1, #48	; 0x30
 8004b30:	5499      	strb	r1, [r3, r2]

			if(atol((char*)read_meter_model)==923 || atol((char*)read_meter_model)==897)//// if accu check meter
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <publish_meter_readings+0x3c0>)
 8004b34:	0018      	movs	r0, r3
 8004b36:	f00e f8f5 	bl	8012d24 <atol>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <publish_meter_readings+0x3c4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <publish_meter_readings+0x35a>
 8004b42:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <publish_meter_readings+0x3c0>)
 8004b44:	0018      	movs	r0, r3
 8004b46:	f00e f8ed 	bl	8012d24 <atol>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <publish_meter_readings+0x3c8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d13a      	bne.n	8004bc8 <publish_meter_readings+0x3d0>
			{
				sprintf((char*)model_number.dataValue, "262\0");
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <publish_meter_readings+0x3cc>)
 8004b54:	2374      	movs	r3, #116	; 0x74
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	3303      	adds	r3, #3
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f00e fba7 	bl	80132b0 <siprintf>
 8004b62:	e039      	b.n	8004bd8 <publish_meter_readings+0x3e0>
 8004b64:	fffffbc4 	.word	0xfffffbc4
 8004b68:	20000d9c 	.word	0x20000d9c
 8004b6c:	08015ac4 	.word	0x08015ac4
 8004b70:	20000424 	.word	0x20000424
 8004b74:	08014b24 	.word	0x08014b24
 8004b78:	08014ffc 	.word	0x08014ffc
 8004b7c:	fffffd34 	.word	0xfffffd34
 8004b80:	fffffd98 	.word	0xfffffd98
 8004b84:	fffffdfc 	.word	0xfffffdfc
 8004b88:	fffffe60 	.word	0xfffffe60
 8004b8c:	fffffec4 	.word	0xfffffec4
 8004b90:	00000414 	.word	0x00000414
 8004b94:	0000041c 	.word	0x0000041c
 8004b98:	fffffbe4 	.word	0xfffffbe4
 8004b9c:	20000028 	.word	0x20000028
 8004ba0:	08015478 	.word	0x08015478
 8004ba4:	08015ae0 	.word	0x08015ae0
 8004ba8:	fffffc1c 	.word	0xfffffc1c
 8004bac:	20001074 	.word	0x20001074
 8004bb0:	08015af0 	.word	0x08015af0
 8004bb4:	fffffc54 	.word	0xfffffc54
 8004bb8:	20001080 	.word	0x20001080
 8004bbc:	0000039b 	.word	0x0000039b
 8004bc0:	00000381 	.word	0x00000381
 8004bc4:	08015b04 	.word	0x08015b04
			}
			else
			{
				sprintf((char*)model_number.dataValue, "%s\0", read_meter_model);/// if other meter
 8004bc8:	4a6f      	ldr	r2, [pc, #444]	; (8004d88 <publish_meter_readings+0x590>)
 8004bca:	4970      	ldr	r1, [pc, #448]	; (8004d8c <publish_meter_readings+0x594>)
 8004bcc:	2374      	movs	r3, #116	; 0x74
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f00e fb6c 	bl	80132b0 <siprintf>
			}

			model_number.dataLength=strlen((char*)model_number.dataValue);
 8004bd8:	2374      	movs	r3, #116	; 0x74
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	3303      	adds	r3, #3
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7fb fa92 	bl	8000108 <strlen>
 8004be4:	0003      	movs	r3, r0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b69      	ldr	r3, [pc, #420]	; (8004d90 <publish_meter_readings+0x598>)
 8004bea:	2184      	movs	r1, #132	; 0x84
 8004bec:	00c9      	lsls	r1, r1, #3
 8004bee:	468c      	mov	ip, r1
 8004bf0:	44bc      	add	ip, r7
 8004bf2:	4463      	add	r3, ip
 8004bf4:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string4, "%02X%c%02X%s%c\0",
				model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 8004bf6:	4b66      	ldr	r3, [pc, #408]	; (8004d90 <publish_meter_readings+0x598>)
 8004bf8:	2284      	movs	r2, #132	; 0x84
 8004bfa:	00d2      	lsls	r2, r2, #3
 8004bfc:	4694      	mov	ip, r2
 8004bfe:	44bc      	add	ip, r7
 8004c00:	4463      	add	r3, ip
 8004c02:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8004c04:	001d      	movs	r5, r3
				model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 8004c06:	4b62      	ldr	r3, [pc, #392]	; (8004d90 <publish_meter_readings+0x598>)
 8004c08:	2284      	movs	r2, #132	; 0x84
 8004c0a:	00d2      	lsls	r2, r2, #3
 8004c0c:	4694      	mov	ip, r2
 8004c0e:	44bc      	add	ip, r7
 8004c10:	4463      	add	r3, ip
 8004c12:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8004c14:	001e      	movs	r6, r3
				model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 8004c16:	4b5e      	ldr	r3, [pc, #376]	; (8004d90 <publish_meter_readings+0x598>)
 8004c18:	2284      	movs	r2, #132	; 0x84
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	4694      	mov	ip, r2
 8004c1e:	44bc      	add	ip, r7
 8004c20:	4463      	add	r3, ip
 8004c22:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8004c24:	001c      	movs	r4, r3
			model_number.decimalPlace);
 8004c26:	4b5a      	ldr	r3, [pc, #360]	; (8004d90 <publish_meter_readings+0x598>)
 8004c28:	2284      	movs	r2, #132	; 0x84
 8004c2a:	00d2      	lsls	r2, r2, #3
 8004c2c:	4694      	mov	ip, r2
 8004c2e:	44bc      	add	ip, r7
 8004c30:	4463      	add	r3, ip
 8004c32:	2235      	movs	r2, #53	; 0x35
 8004c34:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8004c36:	4957      	ldr	r1, [pc, #348]	; (8004d94 <publish_meter_readings+0x59c>)
 8004c38:	22a0      	movs	r2, #160	; 0xa0
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	18b8      	adds	r0, r7, r2
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	2374      	movs	r3, #116	; 0x74
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	3303      	adds	r3, #3
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	9400      	str	r4, [sp, #0]
 8004c4a:	0033      	movs	r3, r6
 8004c4c:	002a      	movs	r2, r5
 8004c4e:	f00e fb2f 	bl	80132b0 <siprintf>

			total_length=total_length+strlen((char*)string4);///// length of model_number
 8004c52:	22a0      	movs	r2, #160	; 0xa0
 8004c54:	0092      	lsls	r2, r2, #2
 8004c56:	18bb      	adds	r3, r7, r2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fb fa55 	bl	8000108 <strlen>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	b299      	uxth	r1, r3
 8004c62:	4a4d      	ldr	r2, [pc, #308]	; (8004d98 <publish_meter_readings+0x5a0>)
 8004c64:	18bb      	adds	r3, r7, r2
 8004c66:	18ba      	adds	r2, r7, r2
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	188a      	adds	r2, r1, r2
 8004c6c:	801a      	strh	r2, [r3, #0]


			////// meter_id or serial no
			meter_id.dataId=0x01;
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004c70:	2184      	movs	r1, #132	; 0x84
 8004c72:	00c9      	lsls	r1, r1, #3
 8004c74:	468c      	mov	ip, r1
 8004c76:	44bc      	add	ip, r7
 8004c78:	4463      	add	r3, ip
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
			meter_id.dataType='1';//ascii
 8004c7e:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004c80:	2184      	movs	r1, #132	; 0x84
 8004c82:	00c9      	lsls	r1, r1, #3
 8004c84:	468c      	mov	ip, r1
 8004c86:	44bc      	add	ip, r7
 8004c88:	4463      	add	r3, ip
 8004c8a:	2231      	movs	r2, #49	; 0x31
 8004c8c:	705a      	strb	r2, [r3, #1]
			meter_id.decimalPlace='0';
 8004c8e:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004c90:	2184      	movs	r1, #132	; 0x84
 8004c92:	00c9      	lsls	r1, r1, #3
 8004c94:	468c      	mov	ip, r1
 8004c96:	44bc      	add	ip, r7
 8004c98:	4463      	add	r3, ip
 8004c9a:	2235      	movs	r2, #53	; 0x35
 8004c9c:	2130      	movs	r1, #48	; 0x30
 8004c9e:	5499      	strb	r1, [r3, r2]
			sprintf((char*)meter_id.dataValue, "%s\0", read_meter_serial_no);
 8004ca0:	4a3f      	ldr	r2, [pc, #252]	; (8004da0 <publish_meter_readings+0x5a8>)
 8004ca2:	493a      	ldr	r1, [pc, #232]	; (8004d8c <publish_meter_readings+0x594>)
 8004ca4:	24ac      	movs	r4, #172	; 0xac
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	3303      	adds	r3, #3
 8004caa:	0018      	movs	r0, r3
 8004cac:	f00e fb00 	bl	80132b0 <siprintf>
			meter_id.dataLength=strlen((char*)meter_id.dataValue);
 8004cb0:	193b      	adds	r3, r7, r4
 8004cb2:	3303      	adds	r3, #3
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fb fa27 	bl	8000108 <strlen>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004cc0:	2184      	movs	r1, #132	; 0x84
 8004cc2:	00c9      	lsls	r1, r1, #3
 8004cc4:	468c      	mov	ip, r1
 8004cc6:	44bc      	add	ip, r7
 8004cc8:	4463      	add	r3, ip
 8004cca:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string5, "%02X%c%02X%s%c\0",
				meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004cce:	2184      	movs	r1, #132	; 0x84
 8004cd0:	00c9      	lsls	r1, r1, #3
 8004cd2:	468c      	mov	ip, r1
 8004cd4:	44bc      	add	ip, r7
 8004cd6:	4463      	add	r3, ip
 8004cd8:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string5, "%02X%c%02X%s%c\0",
 8004cda:	001d      	movs	r5, r3
				meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004cde:	2184      	movs	r1, #132	; 0x84
 8004ce0:	00c9      	lsls	r1, r1, #3
 8004ce2:	468c      	mov	ip, r1
 8004ce4:	44bc      	add	ip, r7
 8004ce6:	4463      	add	r3, ip
 8004ce8:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string5, "%02X%c%02X%s%c\0",
 8004cea:	001e      	movs	r6, r3
				meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 8004cec:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004cee:	2184      	movs	r1, #132	; 0x84
 8004cf0:	00c9      	lsls	r1, r1, #3
 8004cf2:	468c      	mov	ip, r1
 8004cf4:	44bc      	add	ip, r7
 8004cf6:	4463      	add	r3, ip
 8004cf8:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string5, "%02X%c%02X%s%c\0",
 8004cfa:	001c      	movs	r4, r3
			meter_id.decimalPlace);
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <publish_meter_readings+0x5a4>)
 8004cfe:	2184      	movs	r1, #132	; 0x84
 8004d00:	00c9      	lsls	r1, r1, #3
 8004d02:	468c      	mov	ip, r1
 8004d04:	44bc      	add	ip, r7
 8004d06:	4463      	add	r3, ip
 8004d08:	2235      	movs	r2, #53	; 0x35
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string5, "%02X%c%02X%s%c\0",
 8004d0c:	4921      	ldr	r1, [pc, #132]	; (8004d94 <publish_meter_readings+0x59c>)
 8004d0e:	20b9      	movs	r0, #185	; 0xb9
 8004d10:	0080      	lsls	r0, r0, #2
 8004d12:	1838      	adds	r0, r7, r0
 8004d14:	9302      	str	r3, [sp, #8]
 8004d16:	23ac      	movs	r3, #172	; 0xac
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	3303      	adds	r3, #3
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	9400      	str	r4, [sp, #0]
 8004d20:	0033      	movs	r3, r6
 8004d22:	002a      	movs	r2, r5
 8004d24:	f00e fac4 	bl	80132b0 <siprintf>

			total_length=total_length+strlen((char*)string5);///// length of meter_id
 8004d28:	20b9      	movs	r0, #185	; 0xb9
 8004d2a:	0080      	lsls	r0, r0, #2
 8004d2c:	183b      	adds	r3, r7, r0
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f7fb f9ea 	bl	8000108 <strlen>
 8004d34:	0003      	movs	r3, r0
 8004d36:	b299      	uxth	r1, r3
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <publish_meter_readings+0x5a0>)
 8004d3a:	18bb      	adds	r3, r7, r2
 8004d3c:	18ba      	adds	r2, r7, r2
 8004d3e:	8812      	ldrh	r2, [r2, #0]
 8004d40:	188a      	adds	r2, r1, r2
 8004d42:	801a      	strh	r2, [r3, #0]


			////////////// raw_data
			raw_data.dataId=0x1B;
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <publish_meter_readings+0x5ac>)
 8004d46:	2284      	movs	r2, #132	; 0x84
 8004d48:	00d2      	lsls	r2, r2, #3
 8004d4a:	4694      	mov	ip, r2
 8004d4c:	44bc      	add	ip, r7
 8004d4e:	4463      	add	r3, ip
 8004d50:	221b      	movs	r2, #27
 8004d52:	701a      	strb	r2, [r3, #0]
			raw_data.dataType='2';///ascii hex
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <publish_meter_readings+0x5ac>)
 8004d56:	2284      	movs	r2, #132	; 0x84
 8004d58:	00d2      	lsls	r2, r2, #3
 8004d5a:	4694      	mov	ip, r2
 8004d5c:	44bc      	add	ip, r7
 8004d5e:	4463      	add	r3, ip
 8004d60:	2232      	movs	r2, #50	; 0x32
 8004d62:	705a      	strb	r2, [r3, #1]
			raw_data.decimalPlace='0';
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <publish_meter_readings+0x5ac>)
 8004d66:	2284      	movs	r2, #132	; 0x84
 8004d68:	00d2      	lsls	r2, r2, #3
 8004d6a:	4694      	mov	ip, r2
 8004d6c:	44bc      	add	ip, r7
 8004d6e:	4463      	add	r3, ip
 8004d70:	2235      	movs	r2, #53	; 0x35
 8004d72:	2130      	movs	r1, #48	; 0x30
 8004d74:	5499      	strb	r1, [r3, r2]

			/////////////////////////////// For sending raw data in ascii hex   length 34 bytes 0x22
			uint8_t data_byte=0;
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <publish_meter_readings+0x5b0>)
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
			for(uint8_t zz=0; zz<17; zz++)
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <publish_meter_readings+0x5b4>)
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e033      	b.n	8004df0 <publish_meter_readings+0x5f8>
 8004d88:	20001080 	.word	0x20001080
 8004d8c:	08015478 	.word	0x08015478
 8004d90:	fffffc54 	.word	0xfffffc54
 8004d94:	08015ae0 	.word	0x08015ae0
 8004d98:	0000041c 	.word	0x0000041c
 8004d9c:	fffffc8c 	.word	0xfffffc8c
 8004da0:	2000108c 	.word	0x2000108c
 8004da4:	fffffcc4 	.word	0xfffffcc4
 8004da8:	00000417 	.word	0x00000417
 8004dac:	0000041f 	.word	0x0000041f
			{
				data_byte = sFLASH_ReadByte1(mem_read_address++);////// read data from flash
 8004db0:	4bbf      	ldr	r3, [pc, #764]	; (80050b0 <publish_meter_readings+0x8b8>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	1c51      	adds	r1, r2, #1
 8004db6:	4bbe      	ldr	r3, [pc, #760]	; (80050b0 <publish_meter_readings+0x8b8>)
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	4dbe      	ldr	r5, [pc, #760]	; (80050b4 <publish_meter_readings+0x8bc>)
 8004dbc:	197c      	adds	r4, r7, r5
 8004dbe:	0010      	movs	r0, r2
 8004dc0:	f003 f9ac 	bl	800811c <sFLASH_ReadByte1>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	7023      	strb	r3, [r4, #0]

				sprintf((char*)(raw_data.dataValue+zz*2), "%02X", data_byte);
 8004dc8:	4cbb      	ldr	r4, [pc, #748]	; (80050b8 <publish_meter_readings+0x8c0>)
 8004dca:	193b      	adds	r3, r7, r4
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	23e4      	movs	r3, #228	; 0xe4
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	3303      	adds	r3, #3
 8004dd8:	1898      	adds	r0, r3, r2
 8004dda:	197b      	adds	r3, r7, r5
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	4bb7      	ldr	r3, [pc, #732]	; (80050bc <publish_meter_readings+0x8c4>)
 8004de0:	0019      	movs	r1, r3
 8004de2:	f00e fa65 	bl	80132b0 <siprintf>
			for(uint8_t zz=0; zz<17; zz++)
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	193b      	adds	r3, r7, r4
 8004dec:	3201      	adds	r2, #1
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	4bb1      	ldr	r3, [pc, #708]	; (80050b8 <publish_meter_readings+0x8c0>)
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d9da      	bls.n	8004db0 <publish_meter_readings+0x5b8>

			}

			raw_data.dataLength=strlen((char*)raw_data.dataValue);
 8004dfa:	23e4      	movs	r3, #228	; 0xe4
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	3303      	adds	r3, #3
 8004e00:	0018      	movs	r0, r3
 8004e02:	f7fb f981 	bl	8000108 <strlen>
 8004e06:	0003      	movs	r3, r0
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4bad      	ldr	r3, [pc, #692]	; (80050c0 <publish_meter_readings+0x8c8>)
 8004e0c:	2184      	movs	r1, #132	; 0x84
 8004e0e:	00c9      	lsls	r1, r1, #3
 8004e10:	468c      	mov	ip, r1
 8004e12:	44bc      	add	ip, r7
 8004e14:	4463      	add	r3, ip
 8004e16:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string6, "%02X%c%02X%s%c\0",
				raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8004e18:	4ba9      	ldr	r3, [pc, #676]	; (80050c0 <publish_meter_readings+0x8c8>)
 8004e1a:	2284      	movs	r2, #132	; 0x84
 8004e1c:	00d2      	lsls	r2, r2, #3
 8004e1e:	4694      	mov	ip, r2
 8004e20:	44bc      	add	ip, r7
 8004e22:	4463      	add	r3, ip
 8004e24:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8004e26:	001d      	movs	r5, r3
				raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8004e28:	4ba5      	ldr	r3, [pc, #660]	; (80050c0 <publish_meter_readings+0x8c8>)
 8004e2a:	2284      	movs	r2, #132	; 0x84
 8004e2c:	00d2      	lsls	r2, r2, #3
 8004e2e:	4694      	mov	ip, r2
 8004e30:	44bc      	add	ip, r7
 8004e32:	4463      	add	r3, ip
 8004e34:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8004e36:	001e      	movs	r6, r3
				raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8004e38:	4ba1      	ldr	r3, [pc, #644]	; (80050c0 <publish_meter_readings+0x8c8>)
 8004e3a:	2284      	movs	r2, #132	; 0x84
 8004e3c:	00d2      	lsls	r2, r2, #3
 8004e3e:	4694      	mov	ip, r2
 8004e40:	44bc      	add	ip, r7
 8004e42:	4463      	add	r3, ip
 8004e44:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8004e46:	001c      	movs	r4, r3
			raw_data.decimalPlace);
 8004e48:	4b9d      	ldr	r3, [pc, #628]	; (80050c0 <publish_meter_readings+0x8c8>)
 8004e4a:	2284      	movs	r2, #132	; 0x84
 8004e4c:	00d2      	lsls	r2, r2, #3
 8004e4e:	4694      	mov	ip, r2
 8004e50:	44bc      	add	ip, r7
 8004e52:	4463      	add	r3, ip
 8004e54:	2235      	movs	r2, #53	; 0x35
 8004e56:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8004e58:	499a      	ldr	r1, [pc, #616]	; (80050c4 <publish_meter_readings+0x8cc>)
 8004e5a:	22d2      	movs	r2, #210	; 0xd2
 8004e5c:	0092      	lsls	r2, r2, #2
 8004e5e:	18b8      	adds	r0, r7, r2
 8004e60:	9302      	str	r3, [sp, #8]
 8004e62:	23e4      	movs	r3, #228	; 0xe4
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	3303      	adds	r3, #3
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	9400      	str	r4, [sp, #0]
 8004e6c:	0033      	movs	r3, r6
 8004e6e:	002a      	movs	r2, r5
 8004e70:	f00e fa1e 	bl	80132b0 <siprintf>

			total_length=total_length+strlen((char*)string6);///// length of raw_data
 8004e74:	22d2      	movs	r2, #210	; 0xd2
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	18bb      	adds	r3, r7, r2
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fb f944 	bl	8000108 <strlen>
 8004e80:	0003      	movs	r3, r0
 8004e82:	b299      	uxth	r1, r3
 8004e84:	4890      	ldr	r0, [pc, #576]	; (80050c8 <publish_meter_readings+0x8d0>)
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	183a      	adds	r2, r7, r0
 8004e8a:	8812      	ldrh	r2, [r2, #0]
 8004e8c:	188a      	adds	r2, r1, r2
 8004e8e:	801a      	strh	r2, [r3, #0]



			////////////////// signal strength
			signal_strength.dataId=0x15;
 8004e90:	4b8e      	ldr	r3, [pc, #568]	; (80050cc <publish_meter_readings+0x8d4>)
 8004e92:	2184      	movs	r1, #132	; 0x84
 8004e94:	00c9      	lsls	r1, r1, #3
 8004e96:	468c      	mov	ip, r1
 8004e98:	44bc      	add	ip, r7
 8004e9a:	4463      	add	r3, ip
 8004e9c:	2215      	movs	r2, #21
 8004e9e:	701a      	strb	r2, [r3, #0]
			signal_strength.dataType='2';
 8004ea0:	4b8a      	ldr	r3, [pc, #552]	; (80050cc <publish_meter_readings+0x8d4>)
 8004ea2:	2184      	movs	r1, #132	; 0x84
 8004ea4:	00c9      	lsls	r1, r1, #3
 8004ea6:	468c      	mov	ip, r1
 8004ea8:	44bc      	add	ip, r7
 8004eaa:	4463      	add	r3, ip
 8004eac:	2232      	movs	r2, #50	; 0x32
 8004eae:	705a      	strb	r2, [r3, #1]
			signal_strength.decimalPlace='0';
 8004eb0:	4b86      	ldr	r3, [pc, #536]	; (80050cc <publish_meter_readings+0x8d4>)
 8004eb2:	2184      	movs	r1, #132	; 0x84
 8004eb4:	00c9      	lsls	r1, r1, #3
 8004eb6:	468c      	mov	ip, r1
 8004eb8:	44bc      	add	ip, r7
 8004eba:	4463      	add	r3, ip
 8004ebc:	2235      	movs	r2, #53	; 0x35
 8004ebe:	2130      	movs	r1, #48	; 0x30
 8004ec0:	5499      	strb	r1, [r3, r2]

			sprintf((char*)signal_strength.dataValue, "%02X\0", gsm_signal_strength);
 8004ec2:	4b83      	ldr	r3, [pc, #524]	; (80050d0 <publish_meter_readings+0x8d8>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	001a      	movs	r2, r3
 8004ec8:	4982      	ldr	r1, [pc, #520]	; (80050d4 <publish_meter_readings+0x8dc>)
 8004eca:	248e      	movs	r4, #142	; 0x8e
 8004ecc:	0064      	lsls	r4, r4, #1
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f00e f9ec 	bl	80132b0 <siprintf>

			signal_strength.dataLength=strlen((char*)signal_strength.dataValue);
 8004ed8:	193b      	adds	r3, r7, r4
 8004eda:	3303      	adds	r3, #3
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7fb f913 	bl	8000108 <strlen>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b79      	ldr	r3, [pc, #484]	; (80050cc <publish_meter_readings+0x8d4>)
 8004ee8:	2184      	movs	r1, #132	; 0x84
 8004eea:	00c9      	lsls	r1, r1, #3
 8004eec:	468c      	mov	ip, r1
 8004eee:	44bc      	add	ip, r7
 8004ef0:	4463      	add	r3, ip
 8004ef2:	709a      	strb	r2, [r3, #2]

			sprintf((char*)string7, "%02X%c%02X%s%c\0",
				signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 8004ef4:	4b75      	ldr	r3, [pc, #468]	; (80050cc <publish_meter_readings+0x8d4>)
 8004ef6:	2184      	movs	r1, #132	; 0x84
 8004ef8:	00c9      	lsls	r1, r1, #3
 8004efa:	468c      	mov	ip, r1
 8004efc:	44bc      	add	ip, r7
 8004efe:	4463      	add	r3, ip
 8004f00:	781b      	ldrb	r3, [r3, #0]
			sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8004f02:	001d      	movs	r5, r3
				signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 8004f04:	4b71      	ldr	r3, [pc, #452]	; (80050cc <publish_meter_readings+0x8d4>)
 8004f06:	2184      	movs	r1, #132	; 0x84
 8004f08:	00c9      	lsls	r1, r1, #3
 8004f0a:	468c      	mov	ip, r1
 8004f0c:	44bc      	add	ip, r7
 8004f0e:	4463      	add	r3, ip
 8004f10:	785b      	ldrb	r3, [r3, #1]
			sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8004f12:	001e      	movs	r6, r3
				signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 8004f14:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <publish_meter_readings+0x8d4>)
 8004f16:	2184      	movs	r1, #132	; 0x84
 8004f18:	00c9      	lsls	r1, r1, #3
 8004f1a:	468c      	mov	ip, r1
 8004f1c:	44bc      	add	ip, r7
 8004f1e:	4463      	add	r3, ip
 8004f20:	789b      	ldrb	r3, [r3, #2]
			sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8004f22:	001c      	movs	r4, r3
			signal_strength.decimalPlace);
 8004f24:	4b69      	ldr	r3, [pc, #420]	; (80050cc <publish_meter_readings+0x8d4>)
 8004f26:	2184      	movs	r1, #132	; 0x84
 8004f28:	00c9      	lsls	r1, r1, #3
 8004f2a:	468c      	mov	ip, r1
 8004f2c:	44bc      	add	ip, r7
 8004f2e:	4463      	add	r3, ip
 8004f30:	2235      	movs	r2, #53	; 0x35
 8004f32:	5c9b      	ldrb	r3, [r3, r2]
			sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8004f34:	4963      	ldr	r1, [pc, #396]	; (80050c4 <publish_meter_readings+0x8cc>)
 8004f36:	22eb      	movs	r2, #235	; 0xeb
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	18b8      	adds	r0, r7, r2
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	238e      	movs	r3, #142	; 0x8e
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	3303      	adds	r3, #3
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	9400      	str	r4, [sp, #0]
 8004f4a:	0033      	movs	r3, r6
 8004f4c:	002a      	movs	r2, r5
 8004f4e:	f00e f9af 	bl	80132b0 <siprintf>

			total_length=total_length+strlen((char*)string7);///// length of signal_strength
 8004f52:	25eb      	movs	r5, #235	; 0xeb
 8004f54:	00ad      	lsls	r5, r5, #2
 8004f56:	197b      	adds	r3, r7, r5
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7fb f8d5 	bl	8000108 <strlen>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	b299      	uxth	r1, r3
 8004f62:	4859      	ldr	r0, [pc, #356]	; (80050c8 <publish_meter_readings+0x8d0>)
 8004f64:	183b      	adds	r3, r7, r0
 8004f66:	183a      	adds	r2, r7, r0
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	188a      	adds	r2, r1, r2
 8004f6c:	801a      	strh	r2, [r3, #0]


			total_length=total_length+6+1;
 8004f6e:	0001      	movs	r1, r0
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	187a      	adds	r2, r7, r1
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	3207      	adds	r2, #7
 8004f78:	801a      	strh	r2, [r3, #0]

			///// covert length into 16 bit hex
			packet_length[0] = total_length & 0xFF;
 8004f7a:	187b      	adds	r3, r7, r1
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	4855      	ldr	r0, [pc, #340]	; (80050d8 <publish_meter_readings+0x8e0>)
 8004f82:	183b      	adds	r3, r7, r0
 8004f84:	701a      	strb	r2, [r3, #0]
			packet_length[1] = total_length >> 8;
 8004f86:	187b      	adds	r3, r7, r1
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	183b      	adds	r3, r7, r0
 8004f92:	705a      	strb	r2, [r3, #1]

			//// convert length into ascii hex
			sprintf((char*)string1, "{'data':'S3%02X%02X\0", packet_length[1], packet_length[0]);////// length 6 bytes
 8004f94:	183b      	adds	r3, r7, r0
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	001a      	movs	r2, r3
 8004f9a:	183b      	adds	r3, r7, r0
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	494f      	ldr	r1, [pc, #316]	; (80050dc <publish_meter_readings+0x8e4>)
 8004fa0:	26aa      	movs	r6, #170	; 0xaa
 8004fa2:	0076      	lsls	r6, r6, #1
 8004fa4:	19b8      	adds	r0, r7, r6
 8004fa6:	f00e f983 	bl	80132b0 <siprintf>

			//// send string1+string2
			flush_tx_string();
 8004faa:	f7fc faab 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "%s%s%s%s%s%s%sZ'}\r\n%c\0", string1, string2, string3, string4, string5, string6, string7, 0x1A);
 8004fae:	21dc      	movs	r1, #220	; 0xdc
 8004fb0:	0049      	lsls	r1, r1, #1
 8004fb2:	187c      	adds	r4, r7, r1
 8004fb4:	19ba      	adds	r2, r7, r6
 8004fb6:	494a      	ldr	r1, [pc, #296]	; (80050e0 <publish_meter_readings+0x8e8>)
 8004fb8:	484a      	ldr	r0, [pc, #296]	; (80050e4 <publish_meter_readings+0x8ec>)
 8004fba:	231a      	movs	r3, #26
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	197b      	adds	r3, r7, r5
 8004fc0:	9304      	str	r3, [sp, #16]
 8004fc2:	23d2      	movs	r3, #210	; 0xd2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	9303      	str	r3, [sp, #12]
 8004fca:	23b9      	movs	r3, #185	; 0xb9
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	23a0      	movs	r3, #160	; 0xa0
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	2387      	movs	r3, #135	; 0x87
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	0023      	movs	r3, r4
 8004fe4:	f00e f964 	bl	80132b0 <siprintf>
//												HAL_Delay(1);
//
//											}


			if(at_cmd_send((char*)tx_string,"QMTPUB: 0,1,0\r\n","ERROR",30,0))///+QMTPUB: 0,1,0
 8004fe8:	4a3f      	ldr	r2, [pc, #252]	; (80050e8 <publish_meter_readings+0x8f0>)
 8004fea:	4940      	ldr	r1, [pc, #256]	; (80050ec <publish_meter_readings+0x8f4>)
 8004fec:	483d      	ldr	r0, [pc, #244]	; (80050e4 <publish_meter_readings+0x8ec>)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	231e      	movs	r3, #30
 8004ff4:	f7fd f8e8 	bl	80021c8 <at_cmd_send>
 8004ff8:	1e03      	subs	r3, r0, #0
 8004ffa:	d03a      	beq.n	8005072 <publish_meter_readings+0x87a>
			{
				store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8004ffc:	23c0      	movs	r3, #192	; 0xc0
 8004ffe:	019b      	lsls	r3, r3, #6
 8005000:	0018      	movs	r0, r3
 8005002:	f7fc fbd9 	bl	80017b8 <store_runtime_parameters_to_flash>
				store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	01db      	lsls	r3, r3, #7
 800500a:	0018      	movs	r0, r3
 800500c:	f7fc fbd4 	bl	80017b8 <store_runtime_parameters_to_flash>
				beep(1);
 8005010:	2001      	movs	r0, #1
 8005012:	f7fd fb49 	bl	80026a8 <beep>
		{
			return 0;
		}

		////Debug TTL
		flush_tx_string();
 8005016:	f7fc fa75 	bl	8001504 <flush_tx_string>
		sprintf((char*)tx_string, "\r\nWA:%u    Rem:%u    RA:%u    Rem:%u\r\n\0", mem_write_address, (mem_write_address-LOGS_START_ADDRESS)%17,
 800501a:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <publish_meter_readings+0x8f8>)
 800501c:	681d      	ldr	r5, [r3, #0]
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <publish_meter_readings+0x8f8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <publish_meter_readings+0x8fc>)
 8005024:	4694      	mov	ip, r2
 8005026:	4463      	add	r3, ip
 8005028:	2111      	movs	r1, #17
 800502a:	0018      	movs	r0, r3
 800502c:	f7fb f90e 	bl	800024c <__aeabi_uidivmod>
 8005030:	000b      	movs	r3, r1
 8005032:	001e      	movs	r6, r3
 8005034:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <publish_meter_readings+0x8b8>)
 8005036:	681c      	ldr	r4, [r3, #0]
		mem_read_address, (mem_read_address-LOGS_START_ADDRESS)%17);
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <publish_meter_readings+0x8b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2d      	ldr	r2, [pc, #180]	; (80050f4 <publish_meter_readings+0x8fc>)
 800503e:	4694      	mov	ip, r2
 8005040:	4463      	add	r3, ip
		sprintf((char*)tx_string, "\r\nWA:%u    Rem:%u    RA:%u    Rem:%u\r\n\0", mem_write_address, (mem_write_address-LOGS_START_ADDRESS)%17,
 8005042:	2111      	movs	r1, #17
 8005044:	0018      	movs	r0, r3
 8005046:	f7fb f901 	bl	800024c <__aeabi_uidivmod>
 800504a:	000b      	movs	r3, r1
 800504c:	492a      	ldr	r1, [pc, #168]	; (80050f8 <publish_meter_readings+0x900>)
 800504e:	4825      	ldr	r0, [pc, #148]	; (80050e4 <publish_meter_readings+0x8ec>)
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	9400      	str	r4, [sp, #0]
 8005054:	0033      	movs	r3, r6
 8005056:	002a      	movs	r2, r5
 8005058:	f00e f92a 	bl	80132b0 <siprintf>
		send_text_to_usb((char*)tx_string);
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <publish_meter_readings+0x8ec>)
 800505e:	0018      	movs	r0, r3
 8005060:	f7fc f9f8 	bl	8001454 <send_text_to_usb>


		if(mem_write_address==mem_read_address)
 8005064:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <publish_meter_readings+0x8f8>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <publish_meter_readings+0x8b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d004      	beq.n	800507a <publish_meter_readings+0x882>
 8005070:	e010      	b.n	8005094 <publish_meter_readings+0x89c>
				return 0;
 8005072:	2300      	movs	r3, #0
 8005074:	e017      	b.n	80050a6 <publish_meter_readings+0x8ae>
			return 0;
 8005076:	2300      	movs	r3, #0
 8005078:	e015      	b.n	80050a6 <publish_meter_readings+0x8ae>
		{
			erase_all_records();
 800507a:	f7ff fb2d 	bl	80046d8 <erase_all_records>

			beep(20);
 800507e:	2014      	movs	r0, #20
 8005080:	f7fd fb12 	bl	80026a8 <beep>
			HAL_Delay(100);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f003 f955 	bl	8008334 <HAL_Delay>
			beep(30);
 800508a:	201e      	movs	r0, #30
 800508c:	f7fd fb0c 	bl	80026a8 <beep>
			return 1;
 8005090:	2301      	movs	r3, #1
 8005092:	e008      	b.n	80050a6 <publish_meter_readings+0x8ae>
	while(mem_write_address>mem_read_address)
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <publish_meter_readings+0x8f8>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <publish_meter_readings+0x8b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d901      	bls.n	80050a4 <publish_meter_readings+0x8ac>
 80050a0:	f7ff fbb0 	bl	8004804 <publish_meter_readings+0xc>
		}

	}

	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <publish_meter_readings+0x904>)
 80050ac:	449d      	add	sp, r3
 80050ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b0:	20000068 	.word	0x20000068
 80050b4:	00000417 	.word	0x00000417
 80050b8:	0000041f 	.word	0x0000041f
 80050bc:	08015b0c 	.word	0x08015b0c
 80050c0:	fffffcc4 	.word	0xfffffcc4
 80050c4:	08015ae0 	.word	0x08015ae0
 80050c8:	0000041c 	.word	0x0000041c
 80050cc:	fffffcfc 	.word	0xfffffcfc
 80050d0:	200002d5 	.word	0x200002d5
 80050d4:	08015b14 	.word	0x08015b14
 80050d8:	00000414 	.word	0x00000414
 80050dc:	08015b1c 	.word	0x08015b1c
 80050e0:	08015b34 	.word	0x08015b34
 80050e4:	20000424 	.word	0x20000424
 80050e8:	08014b24 	.word	0x08014b24
 80050ec:	08015b4c 	.word	0x08015b4c
 80050f0:	20000064 	.word	0x20000064
 80050f4:	ffffb000 	.word	0xffffb000
 80050f8:	08015b5c 	.word	0x08015b5c
 80050fc:	00000424 	.word	0x00000424

08005100 <read_device_twin>:

_Bool read_device_twin(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af02      	add	r7, sp, #8
	flush_tx_string();
 8005106:	f7fc f9fd 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "at+qmtsub=0,1,\"%s\",0\r\n\0", twin_sb);/////SUBSCRIBE TO TWIN_SB TOPIC
 800510a:	4a73      	ldr	r2, [pc, #460]	; (80052d8 <read_device_twin+0x1d8>)
 800510c:	4973      	ldr	r1, [pc, #460]	; (80052dc <read_device_twin+0x1dc>)
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <read_device_twin+0x1e0>)
 8005110:	0018      	movs	r0, r3
 8005112:	f00e f8cd 	bl	80132b0 <siprintf>
	if(at_cmd_send((char*)tx_string,"QMTSUB: 0,1,0,0\r\n","ERROR",20,0))/// +QMTSUB: 0,1,0,0
 8005116:	4a73      	ldr	r2, [pc, #460]	; (80052e4 <read_device_twin+0x1e4>)
 8005118:	4973      	ldr	r1, [pc, #460]	; (80052e8 <read_device_twin+0x1e8>)
 800511a:	4871      	ldr	r0, [pc, #452]	; (80052e0 <read_device_twin+0x1e0>)
 800511c:	2300      	movs	r3, #0
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2314      	movs	r3, #20
 8005122:	f7fd f851 	bl	80021c8 <at_cmd_send>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	d100      	bne.n	800512c <read_device_twin+0x2c>
 800512a:	e0d0      	b.n	80052ce <read_device_twin+0x1ce>
	{
		flush_tx_string();
 800512c:	f7fc f9ea 	bl	8001504 <flush_tx_string>
		sprintf((char*)tx_string, "at+qmtpub=0,1,1,0,\"%s\"\r\n\0", twin_pb);/////PUBLISH TO TWIN_PB TOPIC
 8005130:	4a6e      	ldr	r2, [pc, #440]	; (80052ec <read_device_twin+0x1ec>)
 8005132:	496f      	ldr	r1, [pc, #444]	; (80052f0 <read_device_twin+0x1f0>)
 8005134:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <read_device_twin+0x1e0>)
 8005136:	0018      	movs	r0, r3
 8005138:	f00e f8ba 	bl	80132b0 <siprintf>
		if(at_cmd_send((char*)tx_string,">","ERROR",20,0))/// >
 800513c:	4a69      	ldr	r2, [pc, #420]	; (80052e4 <read_device_twin+0x1e4>)
 800513e:	496d      	ldr	r1, [pc, #436]	; (80052f4 <read_device_twin+0x1f4>)
 8005140:	4867      	ldr	r0, [pc, #412]	; (80052e0 <read_device_twin+0x1e0>)
 8005142:	2300      	movs	r3, #0
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2314      	movs	r3, #20
 8005148:	f7fd f83e 	bl	80021c8 <at_cmd_send>
 800514c:	1e03      	subs	r3, r0, #0
 800514e:	d100      	bne.n	8005152 <read_device_twin+0x52>
 8005150:	e0bd      	b.n	80052ce <read_device_twin+0x1ce>
		{
			HAL_UART_Transmit_IT(&huart2, 0x00, 1);/////// SEND NULL
 8005152:	4b69      	ldr	r3, [pc, #420]	; (80052f8 <read_device_twin+0x1f8>)
 8005154:	2201      	movs	r2, #1
 8005156:	2100      	movs	r1, #0
 8005158:	0018      	movs	r0, r3
 800515a:	f008 fb07 	bl	800d76c <HAL_UART_Transmit_IT>
			HAL_Delay(2);
 800515e:	2002      	movs	r0, #2
 8005160:	f003 f8e8 	bl	8008334 <HAL_Delay>
			send_text_to_uart2((uint8_t*)"\r\n\0");/////// PRESS ENTER
 8005164:	4b65      	ldr	r3, [pc, #404]	; (80052fc <read_device_twin+0x1fc>)
 8005166:	0018      	movs	r0, r3
 8005168:	f7fc f93e 	bl	80013e8 <send_text_to_uart2>
			flush_tx_string();
 800516c:	f7fc f9ca 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "%c\0", 0x1A);/////// CTRL+Z
 8005170:	4963      	ldr	r1, [pc, #396]	; (8005300 <read_device_twin+0x200>)
 8005172:	4b5b      	ldr	r3, [pc, #364]	; (80052e0 <read_device_twin+0x1e0>)
 8005174:	221a      	movs	r2, #26
 8005176:	0018      	movs	r0, r3
 8005178:	f00e f89a 	bl	80132b0 <siprintf>

			flush_array((char*)json_response, 600);
 800517c:	2396      	movs	r3, #150	; 0x96
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	4b60      	ldr	r3, [pc, #384]	; (8005304 <read_device_twin+0x204>)
 8005182:	0011      	movs	r1, r2
 8005184:	0018      	movs	r0, r3
 8005186:	f7fc f999 	bl	80014bc <flush_array>

			if(at_cmd_send((char*)tx_string,"QMTPUB: 0,1,0\r\n","ERROR",20,0))///+QMTPUB: 0,1,0
 800518a:	4a56      	ldr	r2, [pc, #344]	; (80052e4 <read_device_twin+0x1e4>)
 800518c:	495e      	ldr	r1, [pc, #376]	; (8005308 <read_device_twin+0x208>)
 800518e:	4854      	ldr	r0, [pc, #336]	; (80052e0 <read_device_twin+0x1e0>)
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2314      	movs	r3, #20
 8005196:	f7fd f817 	bl	80021c8 <at_cmd_send>
 800519a:	1e03      	subs	r3, r0, #0
 800519c:	d100      	bne.n	80051a0 <read_device_twin+0xa0>
 800519e:	e096      	b.n	80052ce <read_device_twin+0x1ce>
			{
				json_response_flag = 1;
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <read_device_twin+0x20c>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]

				timer_cmd=0;
 80051a6:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <read_device_twin+0x210>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	801a      	strh	r2, [r3, #0]

				while(timer_cmd < 20)
 80051ac:	e087      	b.n	80052be <read_device_twin+0x1be>
				{
					if(strstr((char*)gsm_data, (char*)"QMTRECV:"))
 80051ae:	4a59      	ldr	r2, [pc, #356]	; (8005314 <read_device_twin+0x214>)
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <read_device_twin+0x218>)
 80051b2:	0011      	movs	r1, r2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f00e f89b 	bl	80132f0 <strstr>
 80051ba:	1e03      	subs	r3, r0, #0
 80051bc:	d100      	bne.n	80051c0 <read_device_twin+0xc0>
 80051be:	e07e      	b.n	80052be <read_device_twin+0x1be>
					{
						HAL_Delay(100);
 80051c0:	2064      	movs	r0, #100	; 0x64
 80051c2:	f003 f8b7 	bl	8008334 <HAL_Delay>
						json_response_flag = 0;
 80051c6:	4b51      	ldr	r3, [pc, #324]	; (800530c <read_device_twin+0x20c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
									"$version": 296
								}
							}"
						*/

						uint16_t desired_cv=0, reported_cv=0;
 80051cc:	1dbb      	adds	r3, r7, #6
 80051ce:	2200      	movs	r2, #0
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	1d3b      	adds	r3, r7, #4
 80051d4:	2200      	movs	r2, #0
 80051d6:	801a      	strh	r2, [r3, #0]

						send_text_to_usb("\r\nTwin Response: \0");
 80051d8:	4b50      	ldr	r3, [pc, #320]	; (800531c <read_device_twin+0x21c>)
 80051da:	0018      	movs	r0, r3
 80051dc:	f7fc f93a 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)json_response);
 80051e0:	4b48      	ldr	r3, [pc, #288]	; (8005304 <read_device_twin+0x204>)
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7fc f936 	bl	8001454 <send_text_to_usb>
						send_text_to_usb("\r\n\0");
 80051e8:	4b44      	ldr	r3, [pc, #272]	; (80052fc <read_device_twin+0x1fc>)
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7fc f932 	bl	8001454 <send_text_to_usb>

						if(json_get_value("sd", 2, 1, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <read_device_twin+0x220>)
 80051f2:	484c      	ldr	r0, [pc, #304]	; (8005324 <read_device_twin+0x224>)
 80051f4:	2264      	movs	r2, #100	; 0x64
 80051f6:	9200      	str	r2, [sp, #0]
 80051f8:	2201      	movs	r2, #1
 80051fa:	2102      	movs	r1, #2
 80051fc:	f7fe ff94 	bl	8004128 <json_get_value>
 8005200:	1e03      	subs	r3, r0, #0
 8005202:	d00b      	beq.n	800521c <read_device_twin+0x11c>
						{
							send_text_to_usb("\r\nSetup Data: \0");
 8005204:	4b48      	ldr	r3, [pc, #288]	; (8005328 <read_device_twin+0x228>)
 8005206:	0018      	movs	r0, r3
 8005208:	f7fc f924 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 800520c:	4b44      	ldr	r3, [pc, #272]	; (8005320 <read_device_twin+0x220>)
 800520e:	0018      	movs	r0, r3
 8005210:	f7fc f920 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <read_device_twin+0x1fc>)
 8005216:	0018      	movs	r0, r3
 8005218:	f7fc f91c 	bl	8001454 <send_text_to_usb>
						}

						if(json_get_value("cv", 2, 1, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 800521c:	4b40      	ldr	r3, [pc, #256]	; (8005320 <read_device_twin+0x220>)
 800521e:	4843      	ldr	r0, [pc, #268]	; (800532c <read_device_twin+0x22c>)
 8005220:	2264      	movs	r2, #100	; 0x64
 8005222:	9200      	str	r2, [sp, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	2102      	movs	r1, #2
 8005228:	f7fe ff7e 	bl	8004128 <json_get_value>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d00b      	beq.n	8005248 <read_device_twin+0x148>
						{
							send_text_to_usb("\r\nDesired Configuration Version: \0");
 8005230:	4b3f      	ldr	r3, [pc, #252]	; (8005330 <read_device_twin+0x230>)
 8005232:	0018      	movs	r0, r3
 8005234:	f7fc f90e 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <read_device_twin+0x220>)
 800523a:	0018      	movs	r0, r3
 800523c:	f7fc f90a 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 8005240:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <read_device_twin+0x1fc>)
 8005242:	0018      	movs	r0, r3
 8005244:	f7fc f906 	bl	8001454 <send_text_to_usb>
						}

						desired_cv = atol((char*)temp_data);
 8005248:	4b35      	ldr	r3, [pc, #212]	; (8005320 <read_device_twin+0x220>)
 800524a:	0018      	movs	r0, r3
 800524c:	f00d fd6a 	bl	8012d24 <atol>
 8005250:	0002      	movs	r2, r0
 8005252:	1dbb      	adds	r3, r7, #6
 8005254:	801a      	strh	r2, [r3, #0]

						if(json_get_value("cv", 2, 2, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 8005256:	4b32      	ldr	r3, [pc, #200]	; (8005320 <read_device_twin+0x220>)
 8005258:	4834      	ldr	r0, [pc, #208]	; (800532c <read_device_twin+0x22c>)
 800525a:	2264      	movs	r2, #100	; 0x64
 800525c:	9200      	str	r2, [sp, #0]
 800525e:	2202      	movs	r2, #2
 8005260:	2102      	movs	r1, #2
 8005262:	f7fe ff61 	bl	8004128 <json_get_value>
 8005266:	1e03      	subs	r3, r0, #0
 8005268:	d00b      	beq.n	8005282 <read_device_twin+0x182>
						{
							send_text_to_usb("\r\nReported Configuration Version: \0");
 800526a:	4b32      	ldr	r3, [pc, #200]	; (8005334 <read_device_twin+0x234>)
 800526c:	0018      	movs	r0, r3
 800526e:	f7fc f8f1 	bl	8001454 <send_text_to_usb>
							send_text_to_usb((char*)temp_data);
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <read_device_twin+0x220>)
 8005274:	0018      	movs	r0, r3
 8005276:	f7fc f8ed 	bl	8001454 <send_text_to_usb>
							send_text_to_usb("\r\n\0");
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <read_device_twin+0x1fc>)
 800527c:	0018      	movs	r0, r3
 800527e:	f7fc f8e9 	bl	8001454 <send_text_to_usb>
						}

						reported_cv = atol((char*)temp_data);
 8005282:	4b27      	ldr	r3, [pc, #156]	; (8005320 <read_device_twin+0x220>)
 8005284:	0018      	movs	r0, r3
 8005286:	f00d fd4d 	bl	8012d24 <atol>
 800528a:	0002      	movs	r2, r0
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	801a      	strh	r2, [r3, #0]

						if(desired_cv==reported_cv)
 8005290:	1dba      	adds	r2, r7, #6
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	8812      	ldrh	r2, [r2, #0]
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d107      	bne.n	80052ac <read_device_twin+0x1ac>
						{
							send_text_to_usb("\r\nDesired Reported CV Matched\r\n\0");
 800529c:	4b26      	ldr	r3, [pc, #152]	; (8005338 <read_device_twin+0x238>)
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fc f8d8 	bl	8001454 <send_text_to_usb>
							desired_reported_cv_matched_flag=1;
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <read_device_twin+0x23c>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e006      	b.n	80052ba <read_device_twin+0x1ba>
						}
						else
						{
							send_text_to_usb("\r\nDesired Reported CV NOT Matched\r\n\0");
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <read_device_twin+0x240>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7fc f8d0 	bl	8001454 <send_text_to_usb>
							desired_reported_cv_matched_flag=0;
 80052b4:	4b21      	ldr	r3, [pc, #132]	; (800533c <read_device_twin+0x23c>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
						}


						return 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e008      	b.n	80052d0 <read_device_twin+0x1d0>
				while(timer_cmd < 20)
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <read_device_twin+0x210>)
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	2b13      	cmp	r3, #19
 80052c4:	d800      	bhi.n	80052c8 <read_device_twin+0x1c8>
 80052c6:	e772      	b.n	80051ae <read_device_twin+0xae>
					}
				}

				json_response_flag = 0;
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <read_device_twin+0x20c>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	return 0;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000c70 	.word	0x20000c70
 80052dc:	08015b84 	.word	0x08015b84
 80052e0:	20000424 	.word	0x20000424
 80052e4:	08014b24 	.word	0x08014b24
 80052e8:	08015b9c 	.word	0x08015b9c
 80052ec:	20000cd4 	.word	0x20000cd4
 80052f0:	08015ac4 	.word	0x08015ac4
 80052f4:	08014ffc 	.word	0x08014ffc
 80052f8:	20001b18 	.word	0x20001b18
 80052fc:	08015440 	.word	0x08015440
 8005300:	08015bb0 	.word	0x08015bb0
 8005304:	20000790 	.word	0x20000790
 8005308:	08015b4c 	.word	0x08015b4c
 800530c:	20001754 	.word	0x20001754
 8005310:	200002e0 	.word	0x200002e0
 8005314:	08015bb4 	.word	0x08015bb4
 8005318:	200005b4 	.word	0x200005b4
 800531c:	08015bc0 	.word	0x08015bc0
 8005320:	200009fc 	.word	0x200009fc
 8005324:	08015bd4 	.word	0x08015bd4
 8005328:	08015bd8 	.word	0x08015bd8
 800532c:	08015454 	.word	0x08015454
 8005330:	08015be8 	.word	0x08015be8
 8005334:	08015c0c 	.word	0x08015c0c
 8005338:	08015c30 	.word	0x08015c30
 800533c:	2000176a 	.word	0x2000176a
 8005340:	08015c54 	.word	0x08015c54

08005344 <update_device_twin>:

_Bool update_device_twin(void)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b087      	sub	sp, #28
 8005348:	af06      	add	r7, sp, #24
	flush_tx_string();
 800534a:	f7fc f8db 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "at+qmtpub=0,1,1,0,\"%s\"\r\n\0", twin_rp);/////PUBLISH TO TWIN_RP TOPIC
 800534e:	4a23      	ldr	r2, [pc, #140]	; (80053dc <update_device_twin+0x98>)
 8005350:	4923      	ldr	r1, [pc, #140]	; (80053e0 <update_device_twin+0x9c>)
 8005352:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <update_device_twin+0xa0>)
 8005354:	0018      	movs	r0, r3
 8005356:	f00d ffab 	bl	80132b0 <siprintf>
	if(at_cmd_send((char*)tx_string,">","ERROR",20,0))/// >
 800535a:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <update_device_twin+0xa4>)
 800535c:	4923      	ldr	r1, [pc, #140]	; (80053ec <update_device_twin+0xa8>)
 800535e:	4821      	ldr	r0, [pc, #132]	; (80053e4 <update_device_twin+0xa0>)
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	2314      	movs	r3, #20
 8005366:	f7fc ff2f 	bl	80021c8 <at_cmd_send>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d031      	beq.n	80053d2 <update_device_twin+0x8e>
	{
		flush_tx_string();
 800536e:	f7fc f8c9 	bl	8001504 <flush_tx_string>
		sprintf((char*)tx_string, "{\"fv\":\"%s\",\"pv\":\"%s\",\"cv\":\"%s\",\"mv\":\"%s\",\"sim\":\"%s\",\"imei\":\"%s\",\"imsi\":\"%s\"}\r\n%c\0",
 8005372:	4c1f      	ldr	r4, [pc, #124]	; (80053f0 <update_device_twin+0xac>)
 8005374:	4a1f      	ldr	r2, [pc, #124]	; (80053f4 <update_device_twin+0xb0>)
 8005376:	4920      	ldr	r1, [pc, #128]	; (80053f8 <update_device_twin+0xb4>)
 8005378:	481a      	ldr	r0, [pc, #104]	; (80053e4 <update_device_twin+0xa0>)
 800537a:	231a      	movs	r3, #26
 800537c:	9305      	str	r3, [sp, #20]
 800537e:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <update_device_twin+0xb8>)
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <update_device_twin+0xbc>)
 8005384:	9303      	str	r3, [sp, #12]
 8005386:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <update_device_twin+0xc0>)
 8005388:	9302      	str	r3, [sp, #8]
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <update_device_twin+0xc4>)
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	4b1f      	ldr	r3, [pc, #124]	; (800540c <update_device_twin+0xc8>)
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	0023      	movs	r3, r4
 8005394:	f00d ff8c 	bl	80132b0 <siprintf>
			firmware_version, protocol_version, configuration_version, module_firmware_version, ccid, imei, imsi, 0x1A);/////PUBLISH TO TWIN_RP TOPIC
		if(at_cmd_send((char*)tx_string,"QMTPUB: 0,1,0","ERROR",20,0))///+QMTPUB: 0,1,0
 8005398:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <update_device_twin+0xa4>)
 800539a:	491d      	ldr	r1, [pc, #116]	; (8005410 <update_device_twin+0xcc>)
 800539c:	4811      	ldr	r0, [pc, #68]	; (80053e4 <update_device_twin+0xa0>)
 800539e:	2300      	movs	r3, #0
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	2314      	movs	r3, #20
 80053a4:	f7fc ff10 	bl	80021c8 <at_cmd_send>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d012      	beq.n	80053d2 <update_device_twin+0x8e>
		{
			HAL_Delay(1000);
 80053ac:	23fa      	movs	r3, #250	; 0xfa
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	0018      	movs	r0, r3
 80053b2:	f002 ffbf 	bl	8008334 <HAL_Delay>

			send_text_to_usb("\r\nPublish Data: \0");
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <update_device_twin+0xd0>)
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7fc f84b 	bl	8001454 <send_text_to_usb>
			send_text_to_usb((char*)tx_string);
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <update_device_twin+0xa0>)
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7fc f847 	bl	8001454 <send_text_to_usb>
			send_text_to_usb("\r\n\0");
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <update_device_twin+0xd4>)
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7fc f843 	bl	8001454 <send_text_to_usb>

			return 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <update_device_twin+0x90>
		}
	}

	return 0;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b001      	add	sp, #4
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	20000d38 	.word	0x20000d38
 80053e0:	08015ac4 	.word	0x08015ac4
 80053e4:	20000424 	.word	0x20000424
 80053e8:	08014b24 	.word	0x08014b24
 80053ec:	08014ffc 	.word	0x08014ffc
 80053f0:	20000044 	.word	0x20000044
 80053f4:	2000004c 	.word	0x2000004c
 80053f8:	08015c7c 	.word	0x08015c7c
 80053fc:	20000e30 	.word	0x20000e30
 8005400:	20000e20 	.word	0x20000e20
 8005404:	20000e40 	.word	0x20000e40
 8005408:	20000e58 	.word	0x20000e58
 800540c:	20000038 	.word	0x20000038
 8005410:	08015cd0 	.word	0x08015cd0
 8005414:	08015ce0 	.word	0x08015ce0
 8005418:	08015440 	.word	0x08015440

0800541c <server_clock_handler>:

void server_clock_handler(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
	if(server_clock_flag)
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <server_clock_handler+0x50>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01e      	beq.n	8005466 <server_clock_handler+0x4a>
	{
		power_on_bg96();
 8005428:	f7ff f8ee 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 800542c:	f000 fe14 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 8005430:	f7fc ff80 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network)
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <server_clock_handler+0x54>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00f      	beq.n	800545c <server_clock_handler+0x40>
			{
				if(get_ntp_clock())//// get clock from NTP server
 800543c:	f7fe fd74 	bl	8003f28 <get_ntp_clock>
 8005440:	1e03      	subs	r3, r0, #0
 8005442:	d003      	beq.n	800544c <server_clock_handler+0x30>
				{
					server_clock_flag=0;
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <server_clock_handler+0x50>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
					break;
 800544a:	e00c      	b.n	8005466 <server_clock_handler+0x4a>
				}
				else
				{
					if(get_server_clock())///// if NTP clock request failed then get clock from carematix server
 800544c:	f7fe fc5c 	bl	8003d08 <get_server_clock>
 8005450:	1e03      	subs	r3, r0, #0
 8005452:	d0eb      	beq.n	800542c <server_clock_handler+0x10>
					{
						server_clock_flag=0;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <server_clock_handler+0x50>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
						break;
 800545a:	e004      	b.n	8005466 <server_clock_handler+0x4a>
					}
				}

			}
			else
				HAL_Delay(10000);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <server_clock_handler+0x58>)
 800545e:	0018      	movs	r0, r3
 8005460:	f002 ff68 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 8005464:	e7e2      	b.n	800542c <server_clock_handler+0x10>
		}
	}
}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	2000175b 	.word	0x2000175b
 8005470:	2000174c 	.word	0x2000174c
 8005474:	00002710 	.word	0x00002710

08005478 <update_module_firmware_handler>:

void update_module_firmware_handler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
	if(update_module_firmware_flag)
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <update_module_firmware_handler+0x64>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d027      	beq.n	80054d4 <update_module_firmware_handler+0x5c>
	{
		power_on_bg96();
 8005484:	f7ff f8c0 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005488:	f000 fde6 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 800548c:	f7fc ff52 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && update_module_firmware())
 8005490:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <update_module_firmware_handler+0x68>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00f      	beq.n	80054b8 <update_module_firmware_handler+0x40>
 8005498:	f7fd f9f6 	bl	8002888 <update_module_firmware>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d00b      	beq.n	80054b8 <update_module_firmware_handler+0x40>
			{
				update_module_firmware_flag=0;
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <update_module_firmware_handler+0x64>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
				send_text_to_usb("\r\nModule Firmware Update Success\r\n\0");
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <update_module_firmware_handler+0x6c>)
 80054a8:	0018      	movs	r0, r3
 80054aa:	f7fb ffd3 	bl	8001454 <send_text_to_usb>

				get_module_firmware_version();
 80054ae:	f000 fd85 	bl	8005fbc <get_module_firmware_version>

				// UPDATE CV IF ALL CHANGES DONE
				update_cv_value();
 80054b2:	f000 fe6b 	bl	800618c <update_cv_value>

				break;
 80054b6:	e00d      	b.n	80054d4 <update_module_firmware_handler+0x5c>
			}
			else if(registered_to_gprs_network)
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <update_module_firmware_handler+0x68>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <update_module_firmware_handler+0x52>
			{
				send_text_to_usb("\r\nModule Firmware Update Fail\r\n\0");
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <update_module_firmware_handler+0x70>)
 80054c2:	0018      	movs	r0, r3
 80054c4:	f7fb ffc6 	bl	8001454 <send_text_to_usb>
				break;
 80054c8:	e004      	b.n	80054d4 <update_module_firmware_handler+0x5c>
			}
			else
				HAL_Delay(10000);
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <update_module_firmware_handler+0x74>)
 80054cc:	0018      	movs	r0, r3
 80054ce:	f002 ff31 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 80054d2:	e7d9      	b.n	8005488 <update_module_firmware_handler+0x10>
		}
	}
}
 80054d4:	46c0      	nop			; (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20001764 	.word	0x20001764
 80054e0:	2000174c 	.word	0x2000174c
 80054e4:	08015cf4 	.word	0x08015cf4
 80054e8:	08015d18 	.word	0x08015d18
 80054ec:	00002710 	.word	0x00002710

080054f0 <update_device_firmware_handler>:


void update_device_firmware_handler(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
	if(update_device_firmware_flag)
 80054f4:	4b16      	ldr	r3, [pc, #88]	; (8005550 <update_device_firmware_handler+0x60>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d026      	beq.n	800554a <update_device_firmware_handler+0x5a>
	{
		power_on_bg96();
 80054fc:	f7ff f884 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005500:	f000 fdaa 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 8005504:	f7fc ff16 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && update_device_firmware())
 8005508:	4b12      	ldr	r3, [pc, #72]	; (8005554 <update_device_firmware_handler+0x64>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <update_device_firmware_handler+0x38>
 8005510:	f7fd fc1a 	bl	8002d48 <update_device_firmware>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d007      	beq.n	8005528 <update_device_firmware_handler+0x38>
			{
				update_device_firmware_flag=0;
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <update_device_firmware_handler+0x60>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
				send_text_to_usb("\r\nDevice Firmware Update Success\r\n\0");
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <update_device_firmware_handler+0x68>)
 8005520:	0018      	movs	r0, r3
 8005522:	f7fb ff97 	bl	8001454 <send_text_to_usb>

				break;
 8005526:	e010      	b.n	800554a <update_device_firmware_handler+0x5a>
			}
			else if(registered_to_gprs_network)
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <update_device_firmware_handler+0x64>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <update_device_firmware_handler+0x50>
			{
				send_text_to_usb("\r\nDevice Firmware Update Fail\r\n\0");
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <update_device_firmware_handler+0x6c>)
 8005532:	0018      	movs	r0, r3
 8005534:	f7fb ff8e 	bl	8001454 <send_text_to_usb>
				update_device_firmware_flag = 0;
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <update_device_firmware_handler+0x60>)
 800553a:	2200      	movs	r2, #0
 800553c:	701a      	strb	r2, [r3, #0]
				break;
 800553e:	e004      	b.n	800554a <update_device_firmware_handler+0x5a>
			}
			else
				HAL_Delay(10000);
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <update_device_firmware_handler+0x70>)
 8005542:	0018      	movs	r0, r3
 8005544:	f002 fef6 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 8005548:	e7da      	b.n	8005500 <update_device_firmware_handler+0x10>
		}
	}
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20001765 	.word	0x20001765
 8005554:	2000174c 	.word	0x2000174c
 8005558:	08015d3c 	.word	0x08015d3c
 800555c:	08015d60 	.word	0x08015d60
 8005560:	00002710 	.word	0x00002710

08005564 <ping_service_handler>:


void ping_service_handler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
	if(ping_service_flag)
 8005568:	4b20      	ldr	r3, [pc, #128]	; (80055ec <ping_service_handler+0x88>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d039      	beq.n	80055e4 <ping_service_handler+0x80>
	{
		power_on_bg96();
 8005570:	f7ff f84a 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005574:	f000 fd70 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 8005578:	f7fc fedc 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network)
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <ping_service_handler+0x8c>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02a      	beq.n	80055da <ping_service_handler+0x76>
			{
				if(ping_service())
 8005584:	f7fd fd40 	bl	8003008 <ping_service>
 8005588:	1e03      	subs	r3, r0, #0
 800558a:	d004      	beq.n	8005596 <ping_service_handler+0x32>
				{
					ping_service_flag=0;
 800558c:	4b17      	ldr	r3, [pc, #92]	; (80055ec <ping_service_handler+0x88>)
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
					break;
 8005592:	46c0      	nop			; (mov r8, r8)
			}

			HAL_Delay(10000);
		}
	}
}
 8005594:	e026      	b.n	80055e4 <ping_service_handler+0x80>
					power_down_bg96();
 8005596:	f7fe ffbd 	bl	8004514 <power_down_bg96>
					enable_green_led_handler=0;
 800559a:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <ping_service_handler+0x90>)
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
					enable_red_led_handler=0;
 80055a0:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <ping_service_handler+0x94>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
					enable_yellow_led_handler=0;
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <ping_service_handler+0x98>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
					led_green_off;
 80055ac:	4b14      	ldr	r3, [pc, #80]	; (8005600 <ping_service_handler+0x9c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	2108      	movs	r1, #8
 80055b2:	0018      	movs	r0, r3
 80055b4:	f003 fcb2 	bl	8008f1c <HAL_GPIO_WritePin>
					led_yellow_off;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <ping_service_handler+0x9c>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	0018      	movs	r0, r3
 80055c0:	f003 fcac 	bl	8008f1c <HAL_GPIO_WritePin>
					led_red_on;
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <ping_service_handler+0x9c>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	2110      	movs	r1, #16
 80055ca:	0018      	movs	r0, r3
 80055cc:	f003 fca6 	bl	8008f1c <HAL_GPIO_WritePin>
						wifi_command_handler();
 80055d0:	f000 fd42 	bl	8006058 <wifi_command_handler>
						esp_disable_softap_mode_handler();
 80055d4:	f000 fdbc 	bl	8006150 <esp_disable_softap_mode_handler>
						wifi_command_handler();
 80055d8:	e7fa      	b.n	80055d0 <ping_service_handler+0x6c>
			HAL_Delay(10000);
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <ping_service_handler+0xa0>)
 80055dc:	0018      	movs	r0, r3
 80055de:	f002 fea9 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 80055e2:	e7c7      	b.n	8005574 <ping_service_handler+0x10>
}
 80055e4:	46c0      	nop			; (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	2000175c 	.word	0x2000175c
 80055f0:	2000174c 	.word	0x2000174c
 80055f4:	2000006e 	.word	0x2000006e
 80055f8:	2000006f 	.word	0x2000006f
 80055fc:	20000070 	.word	0x20000070
 8005600:	48000400 	.word	0x48000400
 8005604:	00002710 	.word	0x00002710

08005608 <configuration_service_handler>:

void configuration_service_handler(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
	if(configuration_service_flag)
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <configuration_service_handler+0x64>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d028      	beq.n	8005666 <configuration_service_handler+0x5e>
	{
		power_on_bg96();
 8005614:	f7fe fff8 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005618:	f000 fd1e 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 800561c:	f7fc fe8a 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && configuration_service())
 8005620:	4b13      	ldr	r3, [pc, #76]	; (8005670 <configuration_service_handler+0x68>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <configuration_service_handler+0x54>
 8005628:	f7fd ff74 	bl	8003514 <configuration_service>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d015      	beq.n	800565c <configuration_service_handler+0x54>
			{
				configuration_service_flag=0;
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <configuration_service_handler+0x64>)
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
				store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	015b      	lsls	r3, r3, #5
 800563a:	0018      	movs	r0, r3
 800563c:	f7fc fa2e 	bl	8001a9c <store_settings_to_flash>
				store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	019b      	lsls	r3, r3, #6
 8005644:	0018      	movs	r0, r3
 8005646:	f7fc fa29 	bl	8001a9c <store_settings_to_flash>
				read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	015b      	lsls	r3, r3, #5
 800564e:	0018      	movs	r0, r3
 8005650:	f7fc fb54 	bl	8001cfc <read_settings_from_flash>

				// UPDATE CV IF ALL CHANGES DONE
				update_cv_value();
 8005654:	f000 fd9a 	bl	800618c <update_cv_value>
				break;
 8005658:	46c0      	nop			; (mov r8, r8)
			}
			else
				HAL_Delay(10000);
		}
	}
}
 800565a:	e004      	b.n	8005666 <configuration_service_handler+0x5e>
				HAL_Delay(10000);
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <configuration_service_handler+0x6c>)
 800565e:	0018      	movs	r0, r3
 8005660:	f002 fe68 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 8005664:	e7d8      	b.n	8005618 <configuration_service_handler+0x10>
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20001755 	.word	0x20001755
 8005670:	2000174c 	.word	0x2000174c
 8005674:	00002710 	.word	0x00002710

08005678 <ca_certificate_handler>:

void ca_certificate_handler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
	if(ca_certificate_flag)
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <ca_certificate_handler+0x50>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01d      	beq.n	80056c0 <ca_certificate_handler+0x48>
	{
		power_on_bg96();
 8005684:	f7fe ffc0 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005688:	f000 fce6 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 800568c:	f7fc fe52 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && get_root_ca_certificate())
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <ca_certificate_handler+0x54>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <ca_certificate_handler+0x3e>
 8005698:	f7fe f97a 	bl	8003990 <get_root_ca_certificate>
 800569c:	1e03      	subs	r3, r0, #0
 800569e:	d00a      	beq.n	80056b6 <ca_certificate_handler+0x3e>
			{
				ca_certificate_flag = 0;
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <ca_certificate_handler+0x50>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
				send_text_to_usb("\r\nCA Certificate Updated\r\n\0");
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <ca_certificate_handler+0x58>)
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fb fed3 	bl	8001454 <send_text_to_usb>

				// UPDATE CV IF ALL CHANGES DONE
				update_cv_value();
 80056ae:	f000 fd6d 	bl	800618c <update_cv_value>
				break;
 80056b2:	46c0      	nop			; (mov r8, r8)
			}
			else
				HAL_Delay(10000);
		}
	}
}
 80056b4:	e004      	b.n	80056c0 <ca_certificate_handler+0x48>
				HAL_Delay(10000);
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <ca_certificate_handler+0x5c>)
 80056b8:	0018      	movs	r0, r3
 80056ba:	f002 fe3b 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 80056be:	e7e3      	b.n	8005688 <ca_certificate_handler+0x10>
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	20001756 	.word	0x20001756
 80056cc:	2000174c 	.word	0x2000174c
 80056d0:	08015d84 	.word	0x08015d84
 80056d4:	00002710 	.word	0x00002710

080056d8 <client_certificate_handler>:

void client_certificate_handler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	if(client_certificate_flag)
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <client_certificate_handler+0x50>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01d      	beq.n	8005720 <client_certificate_handler+0x48>
	{
		power_on_bg96();
 80056e4:	f7fe ff90 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 80056e8:	f000 fcb6 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 80056ec:	f7fc fe22 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && get_client_certificate())
 80056f0:	4b0e      	ldr	r3, [pc, #56]	; (800572c <client_certificate_handler+0x54>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <client_certificate_handler+0x3e>
 80056f8:	f7fe f9de 	bl	8003ab8 <get_client_certificate>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d00a      	beq.n	8005716 <client_certificate_handler+0x3e>
			{
				client_certificate_flag = 0;
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <client_certificate_handler+0x50>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
				send_text_to_usb("\r\nClient Certificate Updated\r\n\0");
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <client_certificate_handler+0x58>)
 8005708:	0018      	movs	r0, r3
 800570a:	f7fb fea3 	bl	8001454 <send_text_to_usb>

				// UPDATE CV IF ALL CHANGES DONE
				update_cv_value();
 800570e:	f000 fd3d 	bl	800618c <update_cv_value>
				break;
 8005712:	46c0      	nop			; (mov r8, r8)
			}
			else
				HAL_Delay(10000);
		}
	}
}
 8005714:	e004      	b.n	8005720 <client_certificate_handler+0x48>
				HAL_Delay(10000);
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <client_certificate_handler+0x5c>)
 8005718:	0018      	movs	r0, r3
 800571a:	f002 fe0b 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 800571e:	e7e3      	b.n	80056e8 <client_certificate_handler+0x10>
}
 8005720:	46c0      	nop			; (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	20001757 	.word	0x20001757
 800572c:	2000174c 	.word	0x2000174c
 8005730:	08015da0 	.word	0x08015da0
 8005734:	00002710 	.word	0x00002710

08005738 <client_key_handler>:

void client_key_handler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
	if(client_key_flag)
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <client_key_handler+0x50>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01d      	beq.n	8005780 <client_key_handler+0x48>
	{
		power_on_bg96();
 8005744:	f7fe ff60 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 8005748:	f000 fc86 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 800574c:	f7fc fdf2 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && get_client_key())
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <client_key_handler+0x54>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <client_key_handler+0x3e>
 8005758:	f7fe fa42 	bl	8003be0 <get_client_key>
 800575c:	1e03      	subs	r3, r0, #0
 800575e:	d00a      	beq.n	8005776 <client_key_handler+0x3e>
			{
				client_key_flag = 0;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <client_key_handler+0x50>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
				send_text_to_usb("\r\nClient Key Updated\r\n\0");
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <client_key_handler+0x58>)
 8005768:	0018      	movs	r0, r3
 800576a:	f7fb fe73 	bl	8001454 <send_text_to_usb>

				// UPDATE CV IF ALL CHANGES DONE
				update_cv_value();
 800576e:	f000 fd0d 	bl	800618c <update_cv_value>
				break;
 8005772:	46c0      	nop			; (mov r8, r8)
			}
			else
				HAL_Delay(10000);
		}
	}
}
 8005774:	e004      	b.n	8005780 <client_key_handler+0x48>
				HAL_Delay(10000);
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <client_key_handler+0x5c>)
 8005778:	0018      	movs	r0, r3
 800577a:	f002 fddb 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 800577e:	e7e3      	b.n	8005748 <client_key_handler+0x10>
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	20001758 	.word	0x20001758
 800578c:	2000174c 	.word	0x2000174c
 8005790:	08015dc0 	.word	0x08015dc0
 8005794:	00002710 	.word	0x00002710

08005798 <device_twin_handler>:

void device_twin_handler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
	if(update_device_twin_flag)
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <device_twin_handler+0x74>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02f      	beq.n	8005804 <device_twin_handler+0x6c>
	{
		power_on_bg96();
 80057a4:	f7fe ff30 	bl	8004608 <power_on_bg96>

		while(1)
		{
			wifi_command_handler();
 80057a8:	f000 fc56 	bl	8006058 <wifi_command_handler>

			check_gprs_network_registration();
 80057ac:	f7fc fdc2 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && connect_mqtt_server())
 80057b0:	4b17      	ldr	r3, [pc, #92]	; (8005810 <device_twin_handler+0x78>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <device_twin_handler+0x62>
 80057b8:	f7fe fdd4 	bl	8004364 <connect_mqtt_server>
 80057bc:	1e03      	subs	r3, r0, #0
 80057be:	d01c      	beq.n	80057fa <device_twin_handler+0x62>
			{
				send_text_to_usb("\r\nConnected to MQTT Server\r\n\0");
 80057c0:	4b14      	ldr	r3, [pc, #80]	; (8005814 <device_twin_handler+0x7c>)
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7fb fe46 	bl	8001454 <send_text_to_usb>

				connected_to_mqtt_server_flag = 1;
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <device_twin_handler+0x80>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]

				if(read_device_twin())
 80057ce:	f7ff fc97 	bl	8005100 <read_device_twin>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d00e      	beq.n	80057f4 <device_twin_handler+0x5c>
				{
					if(update_device_twin())
 80057d6:	f7ff fdb5 	bl	8005344 <update_device_twin>
 80057da:	1e03      	subs	r3, r0, #0
 80057dc:	d00a      	beq.n	80057f4 <device_twin_handler+0x5c>
					{
						update_device_twin_flag = 0;
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <device_twin_handler+0x74>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
						get_gsm_signal_strength();
 80057e4:	f7fe ff98 	bl	8004718 <get_gsm_signal_strength>

						if(publish_meter_readings())
 80057e8:	f7ff f806 	bl	80047f8 <publish_meter_readings>
						{

						}

						disconnect_mqtt_connection();
 80057ec:	f7fe fe78 	bl	80044e0 <disconnect_mqtt_connection>
						break;
 80057f0:	46c0      	nop			; (mov r8, r8)
			}
			else
				HAL_Delay(10000);
		}
	}
}
 80057f2:	e007      	b.n	8005804 <device_twin_handler+0x6c>
				disconnect_mqtt_connection();
 80057f4:	f7fe fe74 	bl	80044e0 <disconnect_mqtt_connection>
 80057f8:	e003      	b.n	8005802 <device_twin_handler+0x6a>
				HAL_Delay(10000);
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <device_twin_handler+0x84>)
 80057fc:	0018      	movs	r0, r3
 80057fe:	f002 fd99 	bl	8008334 <HAL_Delay>
			wifi_command_handler();
 8005802:	e7d1      	b.n	80057a8 <device_twin_handler+0x10>
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	20001759 	.word	0x20001759
 8005810:	2000174c 	.word	0x2000174c
 8005814:	08015dd8 	.word	0x08015dd8
 8005818:	2000175a 	.word	0x2000175a
 800581c:	00002710 	.word	0x00002710

08005820 <publish_meter_readings_handler>:

void publish_meter_readings_handler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
	if(mem_write_address>mem_read_address && !ping_service_flag && mqtt_server_connection_fail_counter<2)
 8005824:	4b40      	ldr	r3, [pc, #256]	; (8005928 <publish_meter_readings_handler+0x108>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <publish_meter_readings_handler+0x10c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d800      	bhi.n	8005832 <publish_meter_readings_handler+0x12>
 8005830:	e076      	b.n	8005920 <publish_meter_readings_handler+0x100>
 8005832:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <publish_meter_readings_handler+0x110>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2201      	movs	r2, #1
 8005838:	4053      	eors	r3, r2
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d100      	bne.n	8005842 <publish_meter_readings_handler+0x22>
 8005840:	e06e      	b.n	8005920 <publish_meter_readings_handler+0x100>
 8005842:	4b3c      	ldr	r3, [pc, #240]	; (8005934 <publish_meter_readings_handler+0x114>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d900      	bls.n	800584c <publish_meter_readings_handler+0x2c>
 800584a:	e069      	b.n	8005920 <publish_meter_readings_handler+0x100>
	{
		power_on_bg96();
 800584c:	f7fe fedc 	bl	8004608 <power_on_bg96>
		sending_data_to_server_flag=1;
 8005850:	4b39      	ldr	r3, [pc, #228]	; (8005938 <publish_meter_readings_handler+0x118>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]

		while(1)
		{
			// ICD 2 flow for data transmission
			if(bootup_complete_flag)
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <publish_meter_readings_handler+0x11c>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <publish_meter_readings_handler+0x48>
			{
				server_clock_flag = 1;
 800585e:	4b38      	ldr	r3, [pc, #224]	; (8005940 <publish_meter_readings_handler+0x120>)
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]
				server_clock_handler();
 8005864:	f7ff fdda 	bl	800541c <server_clock_handler>
			}

			check_gprs_network_registration();
 8005868:	f7fc fd64 	bl	8002334 <check_gprs_network_registration>

			if(registered_to_gprs_network && connect_mqtt_server())
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <publish_meter_readings_handler+0x124>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d033      	beq.n	80058dc <publish_meter_readings_handler+0xbc>
 8005874:	f7fe fd76 	bl	8004364 <connect_mqtt_server>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d02f      	beq.n	80058dc <publish_meter_readings_handler+0xbc>
			{
				mqtt_server_connection_fail_counter=0;
 800587c:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <publish_meter_readings_handler+0x114>)
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]

				send_text_to_usb("\r\nConnected to MQTT Server\r\n\0");
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <publish_meter_readings_handler+0x128>)
 8005884:	0018      	movs	r0, r3
 8005886:	f7fb fde5 	bl	8001454 <send_text_to_usb>

				connected_to_mqtt_server_flag = 1;
 800588a:	4b30      	ldr	r3, [pc, #192]	; (800594c <publish_meter_readings_handler+0x12c>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
				get_gsm_signal_strength();
 8005890:	f7fe ff42 	bl	8004718 <get_gsm_signal_strength>

				// ICD 2 flow for data transmission
				if(bootup_complete_flag)
 8005894:	4b29      	ldr	r3, [pc, #164]	; (800593c <publish_meter_readings_handler+0x11c>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00f      	beq.n	80058bc <publish_meter_readings_handler+0x9c>
				{
					read_device_twin();//// READ TWIN
 800589c:	f7ff fc30 	bl	8005100 <read_device_twin>

					if(desired_reported_cv_matched_flag)///// IF DESIRED AND REPORTED CV IS SAME THEN DO NOT UPDATE TWIN
 80058a0:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <publish_meter_readings_handler+0x130>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <publish_meter_readings_handler+0x90>
					{
						desired_reported_cv_matched_flag=0;
 80058a8:	4b29      	ldr	r3, [pc, #164]	; (8005950 <publish_meter_readings_handler+0x130>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e005      	b.n	80058bc <publish_meter_readings_handler+0x9c>
					}
					else///// IF DESIRED AND REPORTED CV IS NOT SAME THEN CALL PING SERVICE
					{
						ping_service_flag=1;
 80058b0:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <publish_meter_readings_handler+0x110>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
						disconnect_mqtt_connection();
 80058b6:	f7fe fe13 	bl	80044e0 <disconnect_mqtt_connection>
						break;
 80058ba:	e031      	b.n	8005920 <publish_meter_readings_handler+0x100>
					}

				}

				if(publish_meter_readings())
 80058bc:	f7fe ff9c 	bl	80047f8 <publish_meter_readings>
 80058c0:	1e03      	subs	r3, r0, #0
 80058c2:	d005      	beq.n	80058d0 <publish_meter_readings_handler+0xb0>
//					if(bootup_complete_flag)
//					{
//						update_device_twin();
//					}

					disconnect_mqtt_connection();
 80058c4:	f7fe fe0c 	bl	80044e0 <disconnect_mqtt_connection>
//					server_clock_flag=1;
					sending_data_to_server_flag=0;
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <publish_meter_readings_handler+0x118>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
					break;
 80058ce:	e027      	b.n	8005920 <publish_meter_readings_handler+0x100>
				}
				else//30.10.2020
				{
					sending_data_to_server_flag=0;
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <publish_meter_readings_handler+0x118>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
					disconnect_mqtt_connection();
 80058d6:	f7fe fe03 	bl	80044e0 <disconnect_mqtt_connection>
					break;
 80058da:	e021      	b.n	8005920 <publish_meter_readings_handler+0x100>
				}
			}
			else if(registered_to_gprs_network)//mqtt connection failure condition
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <publish_meter_readings_handler+0x124>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <publish_meter_readings_handler+0xf6>
			{
				mqtt_server_connection_fail_counter++;
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <publish_meter_readings_handler+0x114>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <publish_meter_readings_handler+0x114>)
 80058ee:	701a      	strb	r2, [r3, #0]

				if(mqtt_server_connection_fail_counter==2)
 80058f0:	4b10      	ldr	r3, [pc, #64]	; (8005934 <publish_meter_readings_handler+0x114>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d103      	bne.n	8005900 <publish_meter_readings_handler+0xe0>
				{
					sending_data_to_server_flag=0;
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <publish_meter_readings_handler+0x118>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
					break;
 80058fe:	e00f      	b.n	8005920 <publish_meter_readings_handler+0x100>
				}

				if(mqtt_server_connection_fail_counter==1)
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <publish_meter_readings_handler+0x114>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d1a6      	bne.n	8005856 <publish_meter_readings_handler+0x36>
				{
					ping_service_flag=1;
 8005908:	4b09      	ldr	r3, [pc, #36]	; (8005930 <publish_meter_readings_handler+0x110>)
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
					sending_data_to_server_flag=0;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <publish_meter_readings_handler+0x118>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
					break;
 8005914:	e004      	b.n	8005920 <publish_meter_readings_handler+0x100>
				}
			}
			else
				HAL_Delay(10000);
 8005916:	4b0f      	ldr	r3, [pc, #60]	; (8005954 <publish_meter_readings_handler+0x134>)
 8005918:	0018      	movs	r0, r3
 800591a:	f002 fd0b 	bl	8008334 <HAL_Delay>
			if(bootup_complete_flag)
 800591e:	e79a      	b.n	8005856 <publish_meter_readings_handler+0x36>
		}
	}
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	20000064 	.word	0x20000064
 800592c:	20000068 	.word	0x20000068
 8005930:	2000175c 	.word	0x2000175c
 8005934:	200002da 	.word	0x200002da
 8005938:	20001761 	.word	0x20001761
 800593c:	20001769 	.word	0x20001769
 8005940:	2000175b 	.word	0x2000175b
 8005944:	2000174c 	.word	0x2000174c
 8005948:	08015dd8 	.word	0x08015dd8
 800594c:	2000175a 	.word	0x2000175a
 8005950:	2000176a 	.word	0x2000176a
 8005954:	00002710 	.word	0x00002710

08005958 <store_clock_to_flash>:


void store_clock_to_flash(void)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
	unsigned char server_clock_format[18]={0};
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	3304      	adds	r3, #4
 8005966:	220e      	movs	r2, #14
 8005968:	2100      	movs	r1, #0
 800596a:	0018      	movs	r0, r3
 800596c:	f00d fa0a 	bl	8012d84 <memset>

	if(server_clock>1000000000)
 8005970:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <store_clock_to_flash+0xc4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <store_clock_to_flash+0xc8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d94b      	bls.n	8005a12 <store_clock_to_flash+0xba>
	{
		sprintf((char*)server_clock_format, "#clock%u*\0", server_clock);
 800597a:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <store_clock_to_flash+0xc4>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4929      	ldr	r1, [pc, #164]	; (8005a24 <store_clock_to_flash+0xcc>)
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	0018      	movs	r0, r3
 8005984:	f00d fc94 	bl	80132b0 <siprintf>
//		send_text_to_uart2(server_clock_format);// Debug TTL

		for(uint8_t i=0; i<17; i++)
 8005988:	2317      	movs	r3, #23
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
 8005990:	e012      	b.n	80059b8 <store_clock_to_flash+0x60>
		{
			sFLASH_WriteByte(mem_write_address++, server_clock_format[i]);
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <store_clock_to_flash+0xd0>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	1c51      	adds	r1, r2, #1
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <store_clock_to_flash+0xd0>)
 800599a:	6019      	str	r1, [r3, #0]
 800599c:	2417      	movs	r4, #23
 800599e:	193b      	adds	r3, r7, r4
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	1d39      	adds	r1, r7, #4
 80059a4:	5ccb      	ldrb	r3, [r1, r3]
 80059a6:	0019      	movs	r1, r3
 80059a8:	0010      	movs	r0, r2
 80059aa:	f002 fb8b 	bl	80080c4 <sFLASH_WriteByte>
		for(uint8_t i=0; i<17; i++)
 80059ae:	193b      	adds	r3, r7, r4
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	193b      	adds	r3, r7, r4
 80059b4:	3201      	adds	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	2317      	movs	r3, #23
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b10      	cmp	r3, #16
 80059c0:	d9e7      	bls.n	8005992 <store_clock_to_flash+0x3a>
		}

		flush_array((char*)server_clock_format, 18);
 80059c2:	1d3b      	adds	r3, r7, #4
 80059c4:	2112      	movs	r1, #18
 80059c6:	0018      	movs	r0, r3
 80059c8:	f7fb fd78 	bl	80014bc <flush_array>
		sprintf((char*)server_clock_format, "#msrl%s*\0", meter_serial_no);
 80059cc:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <store_clock_to_flash+0xd4>)
 80059ce:	4918      	ldr	r1, [pc, #96]	; (8005a30 <store_clock_to_flash+0xd8>)
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	0018      	movs	r0, r3
 80059d4:	f00d fc6c 	bl	80132b0 <siprintf>
//		send_text_to_uart2(server_clock_format);// Debug TTL

		for(uint8_t i=0; i<17; i++)
 80059d8:	2316      	movs	r3, #22
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e012      	b.n	8005a08 <store_clock_to_flash+0xb0>
		{
			sFLASH_WriteByte(mem_write_address++, server_clock_format[i]);
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <store_clock_to_flash+0xd0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	1c51      	adds	r1, r2, #1
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <store_clock_to_flash+0xd0>)
 80059ea:	6019      	str	r1, [r3, #0]
 80059ec:	2416      	movs	r4, #22
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	1d39      	adds	r1, r7, #4
 80059f4:	5ccb      	ldrb	r3, [r1, r3]
 80059f6:	0019      	movs	r1, r3
 80059f8:	0010      	movs	r0, r2
 80059fa:	f002 fb63 	bl	80080c4 <sFLASH_WriteByte>
		for(uint8_t i=0; i<17; i++)
 80059fe:	193b      	adds	r3, r7, r4
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	193b      	adds	r3, r7, r4
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	2316      	movs	r3, #22
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d9e7      	bls.n	80059e2 <store_clock_to_flash+0x8a>
		}

	}
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b007      	add	sp, #28
 8005a18:	bd90      	pop	{r4, r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	20001748 	.word	0x20001748
 8005a20:	3b9aca00 	.word	0x3b9aca00
 8005a24:	08015df8 	.word	0x08015df8
 8005a28:	20000064 	.word	0x20000064
 8005a2c:	20000e0c 	.word	0x20000e0c
 8005a30:	08015e04 	.word	0x08015e04

08005a34 <read_clock_from_flash>:

void read_clock_from_flash(void)
{
 8005a34:	b5b0      	push	{r4, r5, r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
	unsigned char server_clock_format[18]={0};
 8005a3a:	003b      	movs	r3, r7
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	3304      	adds	r3, #4
 8005a42:	220e      	movs	r2, #14
 8005a44:	2100      	movs	r1, #0
 8005a46:	0018      	movs	r0, r3
 8005a48:	f00d f99c 	bl	8012d84 <memset>

	server_clock_format[0] = sFLASH_ReadByte1(mem_read_address);
 8005a4c:	4bcf      	ldr	r3, [pc, #828]	; (8005d8c <read_clock_from_flash+0x358>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f002 fb63 	bl	800811c <sFLASH_ReadByte1>
 8005a56:	0003      	movs	r3, r0
 8005a58:	001a      	movs	r2, r3
 8005a5a:	003b      	movs	r3, r7
 8005a5c:	701a      	strb	r2, [r3, #0]

	if(server_clock_format[0]=='#')//////////////////// read clock
 8005a5e:	003b      	movs	r3, r7
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b23      	cmp	r3, #35	; 0x23
 8005a64:	d000      	beq.n	8005a68 <read_clock_from_flash+0x34>
 8005a66:	e0d1      	b.n	8005c0c <read_clock_from_flash+0x1d8>
	{
		for(uint8_t i=1; i<17; i++)
 8005a68:	231f      	movs	r3, #31
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e013      	b.n	8005a9a <read_clock_from_flash+0x66>
		{
			server_clock_format[i] = sFLASH_ReadByte1(mem_read_address+i);
 8005a72:	251f      	movs	r5, #31
 8005a74:	197b      	adds	r3, r7, r5
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	4bc4      	ldr	r3, [pc, #784]	; (8005d8c <read_clock_from_flash+0x358>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	18d2      	adds	r2, r2, r3
 8005a7e:	197b      	adds	r3, r7, r5
 8005a80:	781c      	ldrb	r4, [r3, #0]
 8005a82:	0010      	movs	r0, r2
 8005a84:	f002 fb4a 	bl	800811c <sFLASH_ReadByte1>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	003b      	movs	r3, r7
 8005a8e:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=1; i<17; i++)
 8005a90:	197b      	adds	r3, r7, r5
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	3201      	adds	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	231f      	movs	r3, #31
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d9e6      	bls.n	8005a72 <read_clock_from_flash+0x3e>
		}

		if(server_clock_format[1]=='c' && server_clock_format[2]=='l' && server_clock_format[3]=='o' && server_clock_format[4]=='c' && server_clock_format[5]=='k' && server_clock_format[16]=='*')
 8005aa4:	003b      	movs	r3, r7
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b63      	cmp	r3, #99	; 0x63
 8005aaa:	d000      	beq.n	8005aae <read_clock_from_flash+0x7a>
 8005aac:	e0ae      	b.n	8005c0c <read_clock_from_flash+0x1d8>
 8005aae:	003b      	movs	r3, r7
 8005ab0:	789b      	ldrb	r3, [r3, #2]
 8005ab2:	2b6c      	cmp	r3, #108	; 0x6c
 8005ab4:	d000      	beq.n	8005ab8 <read_clock_from_flash+0x84>
 8005ab6:	e0a9      	b.n	8005c0c <read_clock_from_flash+0x1d8>
 8005ab8:	003b      	movs	r3, r7
 8005aba:	78db      	ldrb	r3, [r3, #3]
 8005abc:	2b6f      	cmp	r3, #111	; 0x6f
 8005abe:	d000      	beq.n	8005ac2 <read_clock_from_flash+0x8e>
 8005ac0:	e0a4      	b.n	8005c0c <read_clock_from_flash+0x1d8>
 8005ac2:	003b      	movs	r3, r7
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	2b63      	cmp	r3, #99	; 0x63
 8005ac8:	d000      	beq.n	8005acc <read_clock_from_flash+0x98>
 8005aca:	e09f      	b.n	8005c0c <read_clock_from_flash+0x1d8>
 8005acc:	003b      	movs	r3, r7
 8005ace:	795b      	ldrb	r3, [r3, #5]
 8005ad0:	2b6b      	cmp	r3, #107	; 0x6b
 8005ad2:	d000      	beq.n	8005ad6 <read_clock_from_flash+0xa2>
 8005ad4:	e09a      	b.n	8005c0c <read_clock_from_flash+0x1d8>
 8005ad6:	003b      	movs	r3, r7
 8005ad8:	7c1b      	ldrb	r3, [r3, #16]
 8005ada:	2b2a      	cmp	r3, #42	; 0x2a
 8005adc:	d000      	beq.n	8005ae0 <read_clock_from_flash+0xac>
 8005ade:	e095      	b.n	8005c0c <read_clock_from_flash+0x1d8>
		{
			flush_array((char*)read_clock, 11);
 8005ae0:	4bab      	ldr	r3, [pc, #684]	; (8005d90 <read_clock_from_flash+0x35c>)
 8005ae2:	210b      	movs	r1, #11
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fb fce9 	bl	80014bc <flush_array>

			for(uint8_t i=0; i<10; i++)
 8005aea:	231e      	movs	r3, #30
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e00e      	b.n	8005b12 <read_clock_from_flash+0xde>
			{
				read_clock[i] = server_clock_format[i+6];
 8005af4:	201e      	movs	r0, #30
 8005af6:	183b      	adds	r3, r7, r0
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	1d9a      	adds	r2, r3, #6
 8005afc:	183b      	adds	r3, r7, r0
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	0039      	movs	r1, r7
 8005b02:	5c89      	ldrb	r1, [r1, r2]
 8005b04:	4aa2      	ldr	r2, [pc, #648]	; (8005d90 <read_clock_from_flash+0x35c>)
 8005b06:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i=0; i<10; i++)
 8005b08:	183b      	adds	r3, r7, r0
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	183b      	adds	r3, r7, r0
 8005b0e:	3201      	adds	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	231e      	movs	r3, #30
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b09      	cmp	r3, #9
 8005b1a:	d9eb      	bls.n	8005af4 <read_clock_from_flash+0xc0>
			}

			mem_read_address=mem_read_address+17;///// total 17 bytes string
 8005b1c:	4b9b      	ldr	r3, [pc, #620]	; (8005d8c <read_clock_from_flash+0x358>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3311      	adds	r3, #17
 8005b22:	001a      	movs	r2, r3
 8005b24:	4b99      	ldr	r3, [pc, #612]	; (8005d8c <read_clock_from_flash+0x358>)
 8005b26:	601a      	str	r2, [r3, #0]
			read_clock_flag=1;///////// flag set once will never reset
 8005b28:	4b9a      	ldr	r3, [pc, #616]	; (8005d94 <read_clock_from_flash+0x360>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]

			server_clock_format[0] = sFLASH_ReadByte1(mem_read_address);
 8005b2e:	4b97      	ldr	r3, [pc, #604]	; (8005d8c <read_clock_from_flash+0x358>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f002 faf2 	bl	800811c <sFLASH_ReadByte1>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	003b      	movs	r3, r7
 8005b3e:	701a      	strb	r2, [r3, #0]

			if(server_clock_format[0]=='#')////////////// read meter serial no.
 8005b40:	003b      	movs	r3, r7
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b23      	cmp	r3, #35	; 0x23
 8005b46:	d161      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
			{
				for(uint8_t i=1; i<17; i++)
 8005b48:	231d      	movs	r3, #29
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e013      	b.n	8005b7a <read_clock_from_flash+0x146>
				{
					server_clock_format[i] = sFLASH_ReadByte1(mem_read_address+i);
 8005b52:	251d      	movs	r5, #29
 8005b54:	197b      	adds	r3, r7, r5
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	4b8c      	ldr	r3, [pc, #560]	; (8005d8c <read_clock_from_flash+0x358>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	18d2      	adds	r2, r2, r3
 8005b5e:	197b      	adds	r3, r7, r5
 8005b60:	781c      	ldrb	r4, [r3, #0]
 8005b62:	0010      	movs	r0, r2
 8005b64:	f002 fada 	bl	800811c <sFLASH_ReadByte1>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	001a      	movs	r2, r3
 8005b6c:	003b      	movs	r3, r7
 8005b6e:	551a      	strb	r2, [r3, r4]
				for(uint8_t i=1; i<17; i++)
 8005b70:	197b      	adds	r3, r7, r5
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	197b      	adds	r3, r7, r5
 8005b76:	3201      	adds	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	231d      	movs	r3, #29
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d9e6      	bls.n	8005b52 <read_clock_from_flash+0x11e>
				}

				if(server_clock_format[1]=='m' && server_clock_format[2]=='s' && server_clock_format[3]=='r' && server_clock_format[4]=='l' && server_clock_format[16]=='*')
 8005b84:	003b      	movs	r3, r7
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b6d      	cmp	r3, #109	; 0x6d
 8005b8a:	d13f      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
 8005b8c:	003b      	movs	r3, r7
 8005b8e:	789b      	ldrb	r3, [r3, #2]
 8005b90:	2b73      	cmp	r3, #115	; 0x73
 8005b92:	d13b      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
 8005b94:	003b      	movs	r3, r7
 8005b96:	78db      	ldrb	r3, [r3, #3]
 8005b98:	2b72      	cmp	r3, #114	; 0x72
 8005b9a:	d137      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
 8005b9c:	003b      	movs	r3, r7
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	2b6c      	cmp	r3, #108	; 0x6c
 8005ba2:	d133      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
 8005ba4:	003b      	movs	r3, r7
 8005ba6:	7c1b      	ldrb	r3, [r3, #16]
 8005ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8005baa:	d12f      	bne.n	8005c0c <read_clock_from_flash+0x1d8>
				{
					flush_array((char*)read_meter_serial_no, 20);
 8005bac:	4b7a      	ldr	r3, [pc, #488]	; (8005d98 <read_clock_from_flash+0x364>)
 8005bae:	2114      	movs	r1, #20
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7fb fc83 	bl	80014bc <flush_array>

					for(uint8_t i=0; i<11; i++)
 8005bb6:	231c      	movs	r3, #28
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e00e      	b.n	8005bde <read_clock_from_flash+0x1aa>
					{
						read_meter_serial_no[i] = server_clock_format[i+5];
 8005bc0:	201c      	movs	r0, #28
 8005bc2:	183b      	adds	r3, r7, r0
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	1d5a      	adds	r2, r3, #5
 8005bc8:	183b      	adds	r3, r7, r0
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	0039      	movs	r1, r7
 8005bce:	5c89      	ldrb	r1, [r1, r2]
 8005bd0:	4a71      	ldr	r2, [pc, #452]	; (8005d98 <read_clock_from_flash+0x364>)
 8005bd2:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i=0; i<11; i++)
 8005bd4:	183b      	adds	r3, r7, r0
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	183b      	adds	r3, r7, r0
 8005bda:	3201      	adds	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	231c      	movs	r3, #28
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b0a      	cmp	r3, #10
 8005be6:	d9eb      	bls.n	8005bc0 <read_clock_from_flash+0x18c>
					}

					read_meter_model[0] = read_meter_serial_no[0];
 8005be8:	4b6b      	ldr	r3, [pc, #428]	; (8005d98 <read_clock_from_flash+0x364>)
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	4b6b      	ldr	r3, [pc, #428]	; (8005d9c <read_clock_from_flash+0x368>)
 8005bee:	701a      	strb	r2, [r3, #0]
					read_meter_model[1] = read_meter_serial_no[1];
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <read_clock_from_flash+0x364>)
 8005bf2:	785a      	ldrb	r2, [r3, #1]
 8005bf4:	4b69      	ldr	r3, [pc, #420]	; (8005d9c <read_clock_from_flash+0x368>)
 8005bf6:	705a      	strb	r2, [r3, #1]
					read_meter_model[2] = read_meter_serial_no[2];
 8005bf8:	4b67      	ldr	r3, [pc, #412]	; (8005d98 <read_clock_from_flash+0x364>)
 8005bfa:	789a      	ldrb	r2, [r3, #2]
 8005bfc:	4b67      	ldr	r3, [pc, #412]	; (8005d9c <read_clock_from_flash+0x368>)
 8005bfe:	709a      	strb	r2, [r3, #2]

					mem_read_address=mem_read_address+17;///// total 17 bytes string
 8005c00:	4b62      	ldr	r3, [pc, #392]	; (8005d8c <read_clock_from_flash+0x358>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3311      	adds	r3, #17
 8005c06:	001a      	movs	r2, r3
 8005c08:	4b60      	ldr	r3, [pc, #384]	; (8005d8c <read_clock_from_flash+0x358>)
 8005c0a:	601a      	str	r2, [r3, #0]
		}
	}


	///// Read clock data if clock not read even once and current address is not clock data
	if(!read_clock_flag)
 8005c0c:	4b61      	ldr	r3, [pc, #388]	; (8005d94 <read_clock_from_flash+0x360>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	4053      	eors	r3, r2
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d100      	bne.n	8005c1c <read_clock_from_flash+0x1e8>
 8005c1a:	e116      	b.n	8005e4a <read_clock_from_flash+0x416>
	{
		_Bool clockDataFoundFlag = 0;
 8005c1c:	231b      	movs	r3, #27
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
		uint32_t addr = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]

		/// search for clock data
		for(addr = mem_read_address; addr>=LOGS_START_ADDRESS; addr=addr-17)
 8005c28:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <read_clock_from_flash+0x358>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e020      	b.n	8005c72 <read_clock_from_flash+0x23e>
		{
			server_clock_format[0] = sFLASH_ReadByte1(addr);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f002 fa72 	bl	800811c <sFLASH_ReadByte1>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	003b      	movs	r3, r7
 8005c3e:	701a      	strb	r2, [r3, #0]

			if(server_clock_format[0]=='#')//// search for hash #
 8005c40:	003b      	movs	r3, r7
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b23      	cmp	r3, #35	; 0x23
 8005c46:	d111      	bne.n	8005c6c <read_clock_from_flash+0x238>
			{
				server_clock_format[0] = sFLASH_ReadByte1(addr+1);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f002 fa65 	bl	800811c <sFLASH_ReadByte1>
 8005c52:	0003      	movs	r3, r0
 8005c54:	001a      	movs	r2, r3
 8005c56:	003b      	movs	r3, r7
 8005c58:	701a      	strb	r2, [r3, #0]

				if(server_clock_format[0]=='c')////// search for c
 8005c5a:	003b      	movs	r3, r7
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b63      	cmp	r3, #99	; 0x63
 8005c60:	d104      	bne.n	8005c6c <read_clock_from_flash+0x238>
				{
					clockDataFoundFlag = 1;
 8005c62:	231b      	movs	r3, #27
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
					break;
 8005c6a:	e007      	b.n	8005c7c <read_clock_from_flash+0x248>
		for(addr = mem_read_address; addr>=LOGS_START_ADDRESS; addr=addr-17)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3b11      	subs	r3, #17
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	23a0      	movs	r3, #160	; 0xa0
 8005c76:	01db      	lsls	r3, r3, #7
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d2d9      	bcs.n	8005c30 <read_clock_from_flash+0x1fc>

		}


		/// read clock data and meter serial
		if(clockDataFoundFlag)
 8005c7c:	231b      	movs	r3, #27
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d100      	bne.n	8005c88 <read_clock_from_flash+0x254>
 8005c86:	e0e0      	b.n	8005e4a <read_clock_from_flash+0x416>
		{
			uint8_t i=0;
 8005c88:	2413      	movs	r4, #19
 8005c8a:	193b      	adds	r3, r7, r4
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
			server_clock_format[0] = sFLASH_ReadByte1(addr);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	0018      	movs	r0, r3
 8005c94:	f002 fa42 	bl	800811c <sFLASH_ReadByte1>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	003b      	movs	r3, r7
 8005c9e:	701a      	strb	r2, [r3, #0]

			if(server_clock_format[0]=='#')//////////////////// read clock
 8005ca0:	003b      	movs	r3, r7
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b23      	cmp	r3, #35	; 0x23
 8005ca6:	d000      	beq.n	8005caa <read_clock_from_flash+0x276>
 8005ca8:	e0cf      	b.n	8005e4a <read_clock_from_flash+0x416>
			{
				for(i=1; i<17; i++)
 8005caa:	193b      	adds	r3, r7, r4
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e012      	b.n	8005cd8 <read_clock_from_flash+0x2a4>
				{
					server_clock_format[i] = sFLASH_ReadByte1(addr+i);
 8005cb2:	2513      	movs	r5, #19
 8005cb4:	197b      	adds	r3, r7, r5
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	18d2      	adds	r2, r2, r3
 8005cbc:	197b      	adds	r3, r7, r5
 8005cbe:	781c      	ldrb	r4, [r3, #0]
 8005cc0:	0010      	movs	r0, r2
 8005cc2:	f002 fa2b 	bl	800811c <sFLASH_ReadByte1>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	001a      	movs	r2, r3
 8005cca:	003b      	movs	r3, r7
 8005ccc:	551a      	strb	r2, [r3, r4]
				for(i=1; i<17; i++)
 8005cce:	197b      	adds	r3, r7, r5
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	3201      	adds	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	2213      	movs	r2, #19
 8005cda:	18bb      	adds	r3, r7, r2
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d9e7      	bls.n	8005cb2 <read_clock_from_flash+0x27e>
				}

				if(server_clock_format[1]=='c' && server_clock_format[2]=='l' && server_clock_format[3]=='o' && server_clock_format[4]=='c' && server_clock_format[5]=='k' && server_clock_format[16]=='*')
 8005ce2:	003b      	movs	r3, r7
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b63      	cmp	r3, #99	; 0x63
 8005ce8:	d000      	beq.n	8005cec <read_clock_from_flash+0x2b8>
 8005cea:	e0ae      	b.n	8005e4a <read_clock_from_flash+0x416>
 8005cec:	003b      	movs	r3, r7
 8005cee:	789b      	ldrb	r3, [r3, #2]
 8005cf0:	2b6c      	cmp	r3, #108	; 0x6c
 8005cf2:	d000      	beq.n	8005cf6 <read_clock_from_flash+0x2c2>
 8005cf4:	e0a9      	b.n	8005e4a <read_clock_from_flash+0x416>
 8005cf6:	003b      	movs	r3, r7
 8005cf8:	78db      	ldrb	r3, [r3, #3]
 8005cfa:	2b6f      	cmp	r3, #111	; 0x6f
 8005cfc:	d000      	beq.n	8005d00 <read_clock_from_flash+0x2cc>
 8005cfe:	e0a4      	b.n	8005e4a <read_clock_from_flash+0x416>
 8005d00:	003b      	movs	r3, r7
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	2b63      	cmp	r3, #99	; 0x63
 8005d06:	d000      	beq.n	8005d0a <read_clock_from_flash+0x2d6>
 8005d08:	e09f      	b.n	8005e4a <read_clock_from_flash+0x416>
 8005d0a:	003b      	movs	r3, r7
 8005d0c:	795b      	ldrb	r3, [r3, #5]
 8005d0e:	2b6b      	cmp	r3, #107	; 0x6b
 8005d10:	d000      	beq.n	8005d14 <read_clock_from_flash+0x2e0>
 8005d12:	e09a      	b.n	8005e4a <read_clock_from_flash+0x416>
 8005d14:	003b      	movs	r3, r7
 8005d16:	7c1b      	ldrb	r3, [r3, #16]
 8005d18:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1a:	d000      	beq.n	8005d1e <read_clock_from_flash+0x2ea>
 8005d1c:	e095      	b.n	8005e4a <read_clock_from_flash+0x416>
				{
					addr = addr+i;//// addr incremented to check meter serial number
 8005d1e:	0014      	movs	r4, r2
 8005d20:	18bb      	adds	r3, r7, r2
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	18d3      	adds	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]

					flush_array((char*)read_clock, 11);
 8005d2a:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <read_clock_from_flash+0x35c>)
 8005d2c:	210b      	movs	r1, #11
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f7fb fbc4 	bl	80014bc <flush_array>

					for(i=0; i<10; i++)
 8005d34:	193b      	adds	r3, r7, r4
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	e00e      	b.n	8005d5a <read_clock_from_flash+0x326>
					{
						read_clock[i] = server_clock_format[i+6];
 8005d3c:	2013      	movs	r0, #19
 8005d3e:	183b      	adds	r3, r7, r0
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	1d9a      	adds	r2, r3, #6
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	0039      	movs	r1, r7
 8005d4a:	5c89      	ldrb	r1, [r1, r2]
 8005d4c:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <read_clock_from_flash+0x35c>)
 8005d4e:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<10; i++)
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	3201      	adds	r2, #1
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	2413      	movs	r4, #19
 8005d5c:	193b      	adds	r3, r7, r4
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d9eb      	bls.n	8005d3c <read_clock_from_flash+0x308>
					}

					read_clock_flag=1;///////// flag set once will never reset
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <read_clock_from_flash+0x360>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]

					server_clock_format[0] = sFLASH_ReadByte1(addr);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f002 f9d5 	bl	800811c <sFLASH_ReadByte1>
 8005d72:	0003      	movs	r3, r0
 8005d74:	001a      	movs	r2, r3
 8005d76:	003b      	movs	r3, r7
 8005d78:	701a      	strb	r2, [r3, #0]

					if(server_clock_format[0]=='#')////////////// read meter serial no.
 8005d7a:	003b      	movs	r3, r7
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b23      	cmp	r3, #35	; 0x23
 8005d80:	d163      	bne.n	8005e4a <read_clock_from_flash+0x416>
					{
						for(i=1; i<17; i++)
 8005d82:	193b      	adds	r3, r7, r4
 8005d84:	2201      	movs	r2, #1
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e01d      	b.n	8005dc6 <read_clock_from_flash+0x392>
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	20000068 	.word	0x20000068
 8005d90:	20001074 	.word	0x20001074
 8005d94:	20001768 	.word	0x20001768
 8005d98:	2000108c 	.word	0x2000108c
 8005d9c:	20001080 	.word	0x20001080
						{
							server_clock_format[i] = sFLASH_ReadByte1(addr+i);
 8005da0:	2513      	movs	r5, #19
 8005da2:	197b      	adds	r3, r7, r5
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	18d2      	adds	r2, r2, r3
 8005daa:	197b      	adds	r3, r7, r5
 8005dac:	781c      	ldrb	r4, [r3, #0]
 8005dae:	0010      	movs	r0, r2
 8005db0:	f002 f9b4 	bl	800811c <sFLASH_ReadByte1>
 8005db4:	0003      	movs	r3, r0
 8005db6:	001a      	movs	r2, r3
 8005db8:	003b      	movs	r3, r7
 8005dba:	551a      	strb	r2, [r3, r4]
						for(i=1; i<17; i++)
 8005dbc:	197b      	adds	r3, r7, r5
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	197b      	adds	r3, r7, r5
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	2413      	movs	r4, #19
 8005dc8:	193b      	adds	r3, r7, r4
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d9e7      	bls.n	8005da0 <read_clock_from_flash+0x36c>
						}

						if(server_clock_format[1]=='m' && server_clock_format[2]=='s' && server_clock_format[3]=='r' && server_clock_format[4]=='l' && server_clock_format[16]=='*')
 8005dd0:	003b      	movs	r3, r7
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b6d      	cmp	r3, #109	; 0x6d
 8005dd6:	d138      	bne.n	8005e4a <read_clock_from_flash+0x416>
 8005dd8:	003b      	movs	r3, r7
 8005dda:	789b      	ldrb	r3, [r3, #2]
 8005ddc:	2b73      	cmp	r3, #115	; 0x73
 8005dde:	d134      	bne.n	8005e4a <read_clock_from_flash+0x416>
 8005de0:	003b      	movs	r3, r7
 8005de2:	78db      	ldrb	r3, [r3, #3]
 8005de4:	2b72      	cmp	r3, #114	; 0x72
 8005de6:	d130      	bne.n	8005e4a <read_clock_from_flash+0x416>
 8005de8:	003b      	movs	r3, r7
 8005dea:	791b      	ldrb	r3, [r3, #4]
 8005dec:	2b6c      	cmp	r3, #108	; 0x6c
 8005dee:	d12c      	bne.n	8005e4a <read_clock_from_flash+0x416>
 8005df0:	003b      	movs	r3, r7
 8005df2:	7c1b      	ldrb	r3, [r3, #16]
 8005df4:	2b2a      	cmp	r3, #42	; 0x2a
 8005df6:	d128      	bne.n	8005e4a <read_clock_from_flash+0x416>
						{
							flush_array((char*)read_meter_serial_no, 20);
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <read_clock_from_flash+0x420>)
 8005dfa:	2114      	movs	r1, #20
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fb fb5d 	bl	80014bc <flush_array>

							for(i=0; i<11; i++)
 8005e02:	193b      	adds	r3, r7, r4
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e00e      	b.n	8005e28 <read_clock_from_flash+0x3f4>
							{
								read_meter_serial_no[i] = server_clock_format[i+5];
 8005e0a:	2013      	movs	r0, #19
 8005e0c:	183b      	adds	r3, r7, r0
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	1d5a      	adds	r2, r3, #5
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	0039      	movs	r1, r7
 8005e18:	5c89      	ldrb	r1, [r1, r2]
 8005e1a:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <read_clock_from_flash+0x420>)
 8005e1c:	54d1      	strb	r1, [r2, r3]
							for(i=0; i<11; i++)
 8005e1e:	183b      	adds	r3, r7, r0
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	183b      	adds	r3, r7, r0
 8005e24:	3201      	adds	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	2313      	movs	r3, #19
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b0a      	cmp	r3, #10
 8005e30:	d9eb      	bls.n	8005e0a <read_clock_from_flash+0x3d6>
							}

							read_meter_model[0] = read_meter_serial_no[0];
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <read_clock_from_flash+0x420>)
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <read_clock_from_flash+0x424>)
 8005e38:	701a      	strb	r2, [r3, #0]
							read_meter_model[1] = read_meter_serial_no[1];
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <read_clock_from_flash+0x420>)
 8005e3c:	785a      	ldrb	r2, [r3, #1]
 8005e3e:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <read_clock_from_flash+0x424>)
 8005e40:	705a      	strb	r2, [r3, #1]
							read_meter_model[2] = read_meter_serial_no[2];
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <read_clock_from_flash+0x420>)
 8005e44:	789a      	ldrb	r2, [r3, #2]
 8005e46:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <read_clock_from_flash+0x424>)
 8005e48:	709a      	strb	r2, [r3, #2]
		}//if(clockDataFoundFlag)

	}///if(!read_clock_flag)


}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b008      	add	sp, #32
 8005e50:	bdb0      	pop	{r4, r5, r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	2000108c 	.word	0x2000108c
 8005e58:	20001080 	.word	0x20001080

08005e5c <green_led_handler>:

void green_led_handler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
	if(green_led_blink_flag)
 8005e60:	4b20      	ldr	r3, [pc, #128]	; (8005ee4 <green_led_handler+0x88>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d021      	beq.n	8005eac <green_led_handler+0x50>
	{
		if(green_led_timer==0)
 8005e68:	4b1f      	ldr	r3, [pc, #124]	; (8005ee8 <green_led_handler+0x8c>)
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d135      	bne.n	8005edc <green_led_handler+0x80>
		{
			if(green_led_on_flag)
 8005e70:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <green_led_handler+0x90>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <green_led_handler+0x36>
			{
				led_green_on;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <green_led_handler+0x94>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	2108      	movs	r1, #8
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f003 f84c 	bl	8008f1c <HAL_GPIO_WritePin>
				green_led_on_flag=0;
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <green_led_handler+0x90>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
				green_led_timer=100;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <green_led_handler+0x8c>)
 8005e8c:	2264      	movs	r2, #100	; 0x64
 8005e8e:	801a      	strh	r2, [r3, #0]
		else
		{
			led_green_off;
		}
	}
}
 8005e90:	e024      	b.n	8005edc <green_led_handler+0x80>
				led_green_off;
 8005e92:	4b17      	ldr	r3, [pc, #92]	; (8005ef0 <green_led_handler+0x94>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	2108      	movs	r1, #8
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f003 f83f 	bl	8008f1c <HAL_GPIO_WritePin>
				green_led_on_flag=1;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <green_led_handler+0x90>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
				green_led_timer=200;
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <green_led_handler+0x8c>)
 8005ea6:	22c8      	movs	r2, #200	; 0xc8
 8005ea8:	801a      	strh	r2, [r3, #0]
}
 8005eaa:	e017      	b.n	8005edc <green_led_handler+0x80>
		if(server_clock > 1000000000 && mem_write_address==mem_read_address)
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <green_led_handler+0x98>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <green_led_handler+0x9c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d90c      	bls.n	8005ed0 <green_led_handler+0x74>
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <green_led_handler+0xa0>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <green_led_handler+0xa4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d106      	bne.n	8005ed0 <green_led_handler+0x74>
			led_green_on;
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <green_led_handler+0x94>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	2108      	movs	r1, #8
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f003 f827 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005ece:	e005      	b.n	8005edc <green_led_handler+0x80>
			led_green_off;
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <green_led_handler+0x94>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2108      	movs	r1, #8
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f003 f820 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	20001766 	.word	0x20001766
 8005ee8:	20000062 	.word	0x20000062
 8005eec:	20001767 	.word	0x20001767
 8005ef0:	48000400 	.word	0x48000400
 8005ef4:	20001748 	.word	0x20001748
 8005ef8:	3b9aca00 	.word	0x3b9aca00
 8005efc:	20000064 	.word	0x20000064
 8005f00:	20000068 	.word	0x20000068

08005f04 <red_led_handler>:

void red_led_handler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
	if(server_clock > 1000000000)
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <red_led_handler+0x30>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <red_led_handler+0x34>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d906      	bls.n	8005f20 <red_led_handler+0x1c>
	{
		led_red_off;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <red_led_handler+0x38>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	2110      	movs	r1, #16
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f002 ffff 	bl	8008f1c <HAL_GPIO_WritePin>
	}
	else
	{
		led_red_on;
	}
}
 8005f1e:	e005      	b.n	8005f2c <red_led_handler+0x28>
		led_red_on;
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <red_led_handler+0x38>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	2110      	movs	r1, #16
 8005f26:	0018      	movs	r0, r3
 8005f28:	f002 fff8 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20001748 	.word	0x20001748
 8005f38:	3b9aca00 	.word	0x3b9aca00
 8005f3c:	48000400 	.word	0x48000400

08005f40 <yellow_led_handler>:

///yellow led
void yellow_led_handler(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
	if(sending_data_to_server_flag)
 8005f44:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <yellow_led_handler+0x68>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d017      	beq.n	8005f7c <yellow_led_handler+0x3c>
	{
		if(led3_on_flag)
 8005f4c:	4b17      	ldr	r3, [pc, #92]	; (8005fac <yellow_led_handler+0x6c>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <yellow_led_handler+0x28>
		{
			led3_on_flag=0;
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <yellow_led_handler+0x6c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
			led_yellow_off;
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <yellow_led_handler+0x70>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2140      	movs	r1, #64	; 0x40
 8005f60:	0018      	movs	r0, r3
 8005f62:	f002 ffdb 	bl	8008f1c <HAL_GPIO_WritePin>
		else
		{
			led_yellow_off;
		}
	}
}
 8005f66:	e01c      	b.n	8005fa2 <yellow_led_handler+0x62>
			led3_on_flag=1;
 8005f68:	4b10      	ldr	r3, [pc, #64]	; (8005fac <yellow_led_handler+0x6c>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
			led_yellow_on;
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <yellow_led_handler+0x70>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	2140      	movs	r1, #64	; 0x40
 8005f74:	0018      	movs	r0, r3
 8005f76:	f002 ffd1 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005f7a:	e012      	b.n	8005fa2 <yellow_led_handler+0x62>
		if(mem_write_address>mem_read_address)
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <yellow_led_handler+0x74>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <yellow_led_handler+0x78>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d906      	bls.n	8005f96 <yellow_led_handler+0x56>
			led_yellow_on;
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <yellow_led_handler+0x70>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f002 ffc4 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005f94:	e005      	b.n	8005fa2 <yellow_led_handler+0x62>
			led_yellow_off;
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <yellow_led_handler+0x70>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2140      	movs	r1, #64	; 0x40
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f002 ffbd 	bl	8008f1c <HAL_GPIO_WritePin>
}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20001761 	.word	0x20001761
 8005fac:	20001762 	.word	0x20001762
 8005fb0:	48000400 	.word	0x48000400
 8005fb4:	20000064 	.word	0x20000064
 8005fb8:	20000068 	.word	0x20000068

08005fbc <get_module_firmware_version>:

_Bool get_module_firmware_version(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af04      	add	r7, sp, #16
	if(at_cmd_send("AT+QGMR\r\n\0","OK\r\n","ERROR",5,0))
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <get_module_firmware_version+0x78>)
 8005fc4:	491c      	ldr	r1, [pc, #112]	; (8006038 <get_module_firmware_version+0x7c>)
 8005fc6:	481d      	ldr	r0, [pc, #116]	; (800603c <get_module_firmware_version+0x80>)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2305      	movs	r3, #5
 8005fce:	f7fc f8fb 	bl	80021c8 <at_cmd_send>
 8005fd2:	1e03      	subs	r3, r0, #0
 8005fd4:	d029      	beq.n	800602a <get_module_firmware_version+0x6e>
	{
		//\r\nBG96MAR02A07M1G_01.014.01.014\r\nOK\r\n
		explode_string(gsm_data, 300, 1, '\n', '\r', 29, 'O');
 8005fd6:	2396      	movs	r3, #150	; 0x96
 8005fd8:	0059      	lsls	r1, r3, #1
 8005fda:	4819      	ldr	r0, [pc, #100]	; (8006040 <get_module_firmware_version+0x84>)
 8005fdc:	234f      	movs	r3, #79	; 0x4f
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	231d      	movs	r3, #29
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	230d      	movs	r3, #13
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	230a      	movs	r3, #10
 8005fea:	2201      	movs	r2, #1
 8005fec:	f7fb fde4 	bl	8001bb8 <explode_string>

		if(temp_data[0]!=0)
 8005ff0:	4b14      	ldr	r3, [pc, #80]	; (8006044 <get_module_firmware_version+0x88>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d018      	beq.n	800602a <get_module_firmware_version+0x6e>
		{
			flush_array((char*)module_firmware_version, 40);
 8005ff8:	4b13      	ldr	r3, [pc, #76]	; (8006048 <get_module_firmware_version+0x8c>)
 8005ffa:	2128      	movs	r1, #40	; 0x28
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f7fb fa5d 	bl	80014bc <flush_array>
			sprintf((char*)module_firmware_version, "%s\0", temp_data);
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <get_module_firmware_version+0x88>)
 8006004:	4911      	ldr	r1, [pc, #68]	; (800604c <get_module_firmware_version+0x90>)
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <get_module_firmware_version+0x8c>)
 8006008:	0018      	movs	r0, r3
 800600a:	f00d f951 	bl	80132b0 <siprintf>

			flush_tx_string();
 800600e:	f7fb fa79 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "\r\nModule Firmware : %s\r\n\0", module_firmware_version);
 8006012:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <get_module_firmware_version+0x8c>)
 8006014:	490e      	ldr	r1, [pc, #56]	; (8006050 <get_module_firmware_version+0x94>)
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <get_module_firmware_version+0x98>)
 8006018:	0018      	movs	r0, r3
 800601a:	f00d f949 	bl	80132b0 <siprintf>
			send_text_to_usb((char*)tx_string);
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <get_module_firmware_version+0x98>)
 8006020:	0018      	movs	r0, r3
 8006022:	f7fb fa17 	bl	8001454 <send_text_to_usb>

			return 1;
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <get_module_firmware_version+0x70>
		}
	}

	return 0;
 800602a:	2300      	movs	r3, #0
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	08014b24 	.word	0x08014b24
 8006038:	08014b2c 	.word	0x08014b2c
 800603c:	08015e10 	.word	0x08015e10
 8006040:	200005b4 	.word	0x200005b4
 8006044:	200009fc 	.word	0x200009fc
 8006048:	20000e58 	.word	0x20000e58
 800604c:	08015478 	.word	0x08015478
 8006050:	08015e1c 	.word	0x08015e1c
 8006054:	20000424 	.word	0x20000424

08006058 <wifi_command_handler>:


void wifi_command_handler(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af02      	add	r7, sp, #8
	if(new_apn_flag)
 800605e:	4b32      	ldr	r3, [pc, #200]	; (8006128 <wifi_command_handler+0xd0>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d034      	beq.n	80060d0 <wifi_command_handler+0x78>
		{
			new_apn_flag=0;
 8006066:	4b30      	ldr	r3, [pc, #192]	; (8006128 <wifi_command_handler+0xd0>)
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]

			store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	015b      	lsls	r3, r3, #5
 8006070:	0018      	movs	r0, r3
 8006072:	f7fb fd13 	bl	8001a9c <store_settings_to_flash>
			store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	019b      	lsls	r3, r3, #6
 800607a:	0018      	movs	r0, r3
 800607c:	f7fb fd0e 	bl	8001a9c <store_settings_to_flash>

			flush_tx_string();
 8006080:	f7fb fa40 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 8006084:	4a29      	ldr	r2, [pc, #164]	; (800612c <wifi_command_handler+0xd4>)
 8006086:	492a      	ldr	r1, [pc, #168]	; (8006130 <wifi_command_handler+0xd8>)
 8006088:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <wifi_command_handler+0xdc>)
 800608a:	0018      	movs	r0, r3
 800608c:	f00d f910 	bl	80132b0 <siprintf>
			at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 8006090:	4a29      	ldr	r2, [pc, #164]	; (8006138 <wifi_command_handler+0xe0>)
 8006092:	492a      	ldr	r1, [pc, #168]	; (800613c <wifi_command_handler+0xe4>)
 8006094:	4827      	ldr	r0, [pc, #156]	; (8006134 <wifi_command_handler+0xdc>)
 8006096:	2300      	movs	r3, #0
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	2305      	movs	r3, #5
 800609c:	f7fc f894 	bl	80021c8 <at_cmd_send>

			flush_tx_string();
 80060a0:	f7fb fa30 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "\r\nNew APN : %s\r\n\0", apn);
 80060a4:	4a21      	ldr	r2, [pc, #132]	; (800612c <wifi_command_handler+0xd4>)
 80060a6:	4926      	ldr	r1, [pc, #152]	; (8006140 <wifi_command_handler+0xe8>)
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <wifi_command_handler+0xdc>)
 80060aa:	0018      	movs	r0, r3
 80060ac:	f00d f900 	bl	80132b0 <siprintf>
			send_softap_response((char*)tx_string, strlen((char*)tx_string));
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <wifi_command_handler+0xdc>)
 80060b2:	0018      	movs	r0, r3
 80060b4:	f7fa f828 	bl	8000108 <strlen>
 80060b8:	0003      	movs	r3, r0
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <wifi_command_handler+0xdc>)
 80060be:	0011      	movs	r1, r2
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7fc fb1f 	bl	8002704 <send_softap_response>
			send_text_to_usb((char*)tx_string);
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <wifi_command_handler+0xdc>)
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7fb f9c3 	bl	8001454 <send_text_to_usb>
			flush_tx_string();
			sprintf((char*)tx_string, "\r\nNew Serial Number : %s\r\n\0", device_id);
			send_softap_response((char*)tx_string, strlen((char*)tx_string));
			send_text_to_usb((char*)tx_string);
		}
}
 80060ce:	e027      	b.n	8006120 <wifi_command_handler+0xc8>
		else if(new_device_id_flag)
 80060d0:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <wifi_command_handler+0xec>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d023      	beq.n	8006120 <wifi_command_handler+0xc8>
			new_device_id_flag=0;
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <wifi_command_handler+0xec>)
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
			store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	015b      	lsls	r3, r3, #5
 80060e2:	0018      	movs	r0, r3
 80060e4:	f7fb fcda 	bl	8001a9c <store_settings_to_flash>
			store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	019b      	lsls	r3, r3, #6
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fb fcd5 	bl	8001a9c <store_settings_to_flash>
			flush_tx_string();
 80060f2:	f7fb fa07 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "\r\nNew Serial Number : %s\r\n\0", device_id);
 80060f6:	4a14      	ldr	r2, [pc, #80]	; (8006148 <wifi_command_handler+0xf0>)
 80060f8:	4914      	ldr	r1, [pc, #80]	; (800614c <wifi_command_handler+0xf4>)
 80060fa:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <wifi_command_handler+0xdc>)
 80060fc:	0018      	movs	r0, r3
 80060fe:	f00d f8d7 	bl	80132b0 <siprintf>
			send_softap_response((char*)tx_string, strlen((char*)tx_string));
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <wifi_command_handler+0xdc>)
 8006104:	0018      	movs	r0, r3
 8006106:	f7f9 ffff 	bl	8000108 <strlen>
 800610a:	0003      	movs	r3, r0
 800610c:	b29a      	uxth	r2, r3
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <wifi_command_handler+0xdc>)
 8006110:	0011      	movs	r1, r2
 8006112:	0018      	movs	r0, r3
 8006114:	f7fc faf6 	bl	8002704 <send_softap_response>
			send_text_to_usb((char*)tx_string);
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <wifi_command_handler+0xdc>)
 800611a:	0018      	movs	r0, r3
 800611c:	f7fb f99a 	bl	8001454 <send_text_to_usb>
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	2000175f 	.word	0x2000175f
 800612c:	20000000 	.word	0x20000000
 8006130:	08014d88 	.word	0x08014d88
 8006134:	20000424 	.word	0x20000424
 8006138:	08014b24 	.word	0x08014b24
 800613c:	08014b2c 	.word	0x08014b2c
 8006140:	08015e38 	.word	0x08015e38
 8006144:	20001763 	.word	0x20001763
 8006148:	20000028 	.word	0x20000028
 800614c:	08015e4c 	.word	0x08015e4c

08006150 <esp_disable_softap_mode_handler>:

void esp_disable_softap_mode_handler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af02      	add	r7, sp, #8
	if(softap_mode_timeup_flag)
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <esp_disable_softap_mode_handler+0x2c>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <esp_disable_softap_mode_handler+0x24>
	{
		softap_mode_timeup_flag=0;
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <esp_disable_softap_mode_handler+0x2c>)
 8006160:	2200      	movs	r2, #0
 8006162:	701a      	strb	r2, [r3, #0]
		at_cmd_send_esp("AT+CWMODE=0\r\n\0","OK\r\n","ERROR",5,0);
 8006164:	4a06      	ldr	r2, [pc, #24]	; (8006180 <esp_disable_softap_mode_handler+0x30>)
 8006166:	4907      	ldr	r1, [pc, #28]	; (8006184 <esp_disable_softap_mode_handler+0x34>)
 8006168:	4807      	ldr	r0, [pc, #28]	; (8006188 <esp_disable_softap_mode_handler+0x38>)
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2305      	movs	r3, #5
 8006170:	f7fc f884 	bl	800227c <at_cmd_send_esp>
	}
}
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	2000175d 	.word	0x2000175d
 8006180:	08014b24 	.word	0x08014b24
 8006184:	08014b2c 	.word	0x08014b2c
 8006188:	08015e68 	.word	0x08015e68

0800618c <update_cv_value>:

//// MAIN PURPOSE IS TO UPDATE CV ONLY IF ALL CHANGES DONE IN CONFIGURATION (AS PER PING RESPONSE)
void update_cv_value(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
	if(!configuration_service_flag && !ca_certificate_flag && !client_certificate_flag && !client_key_flag && !update_device_firmware_flag && !update_module_firmware_flag)
 8006190:	4b20      	ldr	r3, [pc, #128]	; (8006214 <update_cv_value+0x88>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	4053      	eors	r3, r2
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d037      	beq.n	800620e <update_cv_value+0x82>
 800619e:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <update_cv_value+0x8c>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	4053      	eors	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d030      	beq.n	800620e <update_cv_value+0x82>
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <update_cv_value+0x90>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2201      	movs	r2, #1
 80061b2:	4053      	eors	r3, r2
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d029      	beq.n	800620e <update_cv_value+0x82>
 80061ba:	4b19      	ldr	r3, [pc, #100]	; (8006220 <update_cv_value+0x94>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	4053      	eors	r3, r2
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d022      	beq.n	800620e <update_cv_value+0x82>
 80061c8:	4b16      	ldr	r3, [pc, #88]	; (8006224 <update_cv_value+0x98>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2201      	movs	r2, #1
 80061ce:	4053      	eors	r3, r2
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01b      	beq.n	800620e <update_cv_value+0x82>
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <update_cv_value+0x9c>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2201      	movs	r2, #1
 80061dc:	4053      	eors	r3, r2
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d014      	beq.n	800620e <update_cv_value+0x82>
	{
		sprintf((char*)configuration_version, "%s\0", (char*)hold_cv_value);
 80061e4:	4a11      	ldr	r2, [pc, #68]	; (800622c <update_cv_value+0xa0>)
 80061e6:	4912      	ldr	r1, [pc, #72]	; (8006230 <update_cv_value+0xa4>)
 80061e8:	4b12      	ldr	r3, [pc, #72]	; (8006234 <update_cv_value+0xa8>)
 80061ea:	0018      	movs	r0, r3
 80061ec:	f00d f860 	bl	80132b0 <siprintf>
		store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80061f0:	2380      	movs	r3, #128	; 0x80
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7fb fc51 	bl	8001a9c <store_settings_to_flash>
		store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	019b      	lsls	r3, r3, #6
 80061fe:	0018      	movs	r0, r3
 8006200:	f7fb fc4c 	bl	8001a9c <store_settings_to_flash>
		read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	015b      	lsls	r3, r3, #5
 8006208:	0018      	movs	r0, r3
 800620a:	f7fb fd77 	bl	8001cfc <read_settings_from_flash>
	}
}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20001755 	.word	0x20001755
 8006218:	20001756 	.word	0x20001756
 800621c:	20001757 	.word	0x20001757
 8006220:	20001758 	.word	0x20001758
 8006224:	20001765 	.word	0x20001765
 8006228:	20001764 	.word	0x20001764
 800622c:	20000afc 	.word	0x20000afc
 8006230:	08015478 	.word	0x08015478
 8006234:	20000038 	.word	0x20000038

08006238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	46c6      	mov	lr, r8
 800623c:	b500      	push	{lr}
 800623e:	b09e      	sub	sp, #120	; 0x78
 8006240:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006242:	f002 f813 	bl	800826c <HAL_Init>

  /* USER CODE BEGIN Init */
	Be_SecondFW();
 8006246:	f7fc f951 	bl	80024ec <Be_SecondFW>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800624a:	f001 f92d 	bl	80074a8 <SystemClock_Config>
//	HAL_Delay(10000);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800624e:	f001 fb63 	bl	8007918 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8006252:	f001 fb01 	bl	8007858 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006256:	f001 fb2f 	bl	80078b8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800625a:	f001 f991 	bl	8007580 <MX_RTC_Init>
  MX_SPI1_Init();
 800625e:	f001 f9f1 	bl	8007644 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8006262:	f00c f819 	bl	8012298 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8006266:	f001 fa2b 	bl	80076c0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800626a:	f001 fa4b 	bl	8007704 <MX_TIM7_Init>
  MX_TIM16_Init();
 800626e:	f001 fa6d 	bl	800774c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &rx_esp, 1);
 8006272:	49e8      	ldr	r1, [pc, #928]	; (8006614 <main+0x3dc>)
 8006274:	4be8      	ldr	r3, [pc, #928]	; (8006618 <main+0x3e0>)
 8006276:	2201      	movs	r2, #1
 8006278:	0018      	movs	r0, r3
 800627a:	f007 fae5 	bl	800d848 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &gsm, 1);
 800627e:	49e7      	ldr	r1, [pc, #924]	; (800661c <main+0x3e4>)
 8006280:	4be7      	ldr	r3, [pc, #924]	; (8006620 <main+0x3e8>)
 8006282:	2201      	movs	r2, #1
 8006284:	0018      	movs	r0, r3
 8006286:	f007 fadf 	bl	800d848 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim6);
 800628a:	4be6      	ldr	r3, [pc, #920]	; (8006624 <main+0x3ec>)
 800628c:	0018      	movs	r0, r3
 800628e:	f006 fb17 	bl	800c8c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8006292:	4be5      	ldr	r3, [pc, #916]	; (8006628 <main+0x3f0>)
 8006294:	0018      	movs	r0, r3
 8006296:	f006 fb13 	bl	800c8c0 <HAL_TIM_Base_Start_IT>



	GSM_RESET_LOW;//// NORMAL FUNCTION
 800629a:	4be4      	ldr	r3, [pc, #912]	; (800662c <main+0x3f4>)
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	0018      	movs	r0, r3
 80062a2:	f002 fe3b 	bl	8008f1c <HAL_GPIO_WritePin>
	GSM_VCC_ON;///// GSM VCC ENABLED 4.2V SUPPLY ENABLE FOR LEDs
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	0219      	lsls	r1, r3, #8
 80062aa:	2390      	movs	r3, #144	; 0x90
 80062ac:	05db      	lsls	r3, r3, #23
 80062ae:	2201      	movs	r2, #1
 80062b0:	0018      	movs	r0, r3
 80062b2:	f002 fe33 	bl	8008f1c <HAL_GPIO_WritePin>

	enable_green_led_handler=0;
 80062b6:	4bde      	ldr	r3, [pc, #888]	; (8006630 <main+0x3f8>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
	enable_red_led_handler=0;
 80062bc:	4bdd      	ldr	r3, [pc, #884]	; (8006634 <main+0x3fc>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
	enable_yellow_led_handler=0;
 80062c2:	4bdd      	ldr	r3, [pc, #884]	; (8006638 <main+0x400>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]

	led_green_on;
 80062c8:	4bd8      	ldr	r3, [pc, #864]	; (800662c <main+0x3f4>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	2108      	movs	r1, #8
 80062ce:	0018      	movs	r0, r3
 80062d0:	f002 fe24 	bl	8008f1c <HAL_GPIO_WritePin>
	led_red_on;
 80062d4:	4bd5      	ldr	r3, [pc, #852]	; (800662c <main+0x3f4>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	2110      	movs	r1, #16
 80062da:	0018      	movs	r0, r3
 80062dc:	f002 fe1e 	bl	8008f1c <HAL_GPIO_WritePin>
	led_yellow_on;
 80062e0:	4bd2      	ldr	r3, [pc, #840]	; (800662c <main+0x3f4>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	0018      	movs	r0, r3
 80062e8:	f002 fe18 	bl	8008f1c <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 80062ec:	23fa      	movs	r3, #250	; 0xfa
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	0018      	movs	r0, r3
 80062f2:	f002 f81f 	bl	8008334 <HAL_Delay>

	led_green_off;
 80062f6:	4bcd      	ldr	r3, [pc, #820]	; (800662c <main+0x3f4>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	2108      	movs	r1, #8
 80062fc:	0018      	movs	r0, r3
 80062fe:	f002 fe0d 	bl	8008f1c <HAL_GPIO_WritePin>
	led_red_off;
 8006302:	4bca      	ldr	r3, [pc, #808]	; (800662c <main+0x3f4>)
 8006304:	2200      	movs	r2, #0
 8006306:	2110      	movs	r1, #16
 8006308:	0018      	movs	r0, r3
 800630a:	f002 fe07 	bl	8008f1c <HAL_GPIO_WritePin>
	led_yellow_off;
 800630e:	4bc7      	ldr	r3, [pc, #796]	; (800662c <main+0x3f4>)
 8006310:	2200      	movs	r2, #0
 8006312:	2140      	movs	r1, #64	; 0x40
 8006314:	0018      	movs	r0, r3
 8006316:	f002 fe01 	bl	8008f1c <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 800631a:	23fa      	movs	r3, #250	; 0xfa
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	0018      	movs	r0, r3
 8006320:	f002 f808 	bl	8008334 <HAL_Delay>

	enable_green_led_handler=1;
 8006324:	4bc2      	ldr	r3, [pc, #776]	; (8006630 <main+0x3f8>)
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
	enable_red_led_handler=1;
 800632a:	4bc2      	ldr	r3, [pc, #776]	; (8006634 <main+0x3fc>)
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
	enable_yellow_led_handler=1;
 8006330:	4bc1      	ldr	r3, [pc, #772]	; (8006638 <main+0x400>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]

	#if USA
	sprintf((char*)tx_string, "\r\nBlipGo %s  USA\r\n\0", firmware_version);
 8006336:	4ac1      	ldr	r2, [pc, #772]	; (800663c <main+0x404>)
 8006338:	49c1      	ldr	r1, [pc, #772]	; (8006640 <main+0x408>)
 800633a:	4bc2      	ldr	r3, [pc, #776]	; (8006644 <main+0x40c>)
 800633c:	0018      	movs	r0, r3
 800633e:	f00c ffb7 	bl	80132b0 <siprintf>
	send_text_to_usb((char*)tx_string);
 8006342:	4bc0      	ldr	r3, [pc, #768]	; (8006644 <main+0x40c>)
 8006344:	0018      	movs	r0, r3
 8006346:	f7fb f885 	bl	8001454 <send_text_to_usb>
//	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);//// PWM Buzzer ON
//	htim16.Instance->CCR1 = 500;/// 50% duty cycle

//	while(1);

	beep(100);/// PWM Beep
 800634a:	2064      	movs	r0, #100	; 0x64
 800634c:	f7fc f9ac 	bl	80026a8 <beep>

	//BUZZOR ON
	HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_SET);
 8006350:	4bb6      	ldr	r3, [pc, #728]	; (800662c <main+0x3f4>)
 8006352:	2201      	movs	r2, #1
 8006354:	2120      	movs	r1, #32
 8006356:	0018      	movs	r0, r3
 8006358:	f002 fde0 	bl	8008f1c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800635c:	2001      	movs	r0, #1
 800635e:	f001 ffe9 	bl	8008334 <HAL_Delay>

	//BUZZOR OFF
	HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_RESET);
 8006362:	4bb2      	ldr	r3, [pc, #712]	; (800662c <main+0x3f4>)
 8006364:	2200      	movs	r2, #0
 8006366:	2120      	movs	r1, #32
 8006368:	0018      	movs	r0, r3
 800636a:	f002 fdd7 	bl	8008f1c <HAL_GPIO_WritePin>


	send_text_to_usb("\r\nESP Turning ON\r\n\0");
 800636e:	4bb6      	ldr	r3, [pc, #728]	; (8006648 <main+0x410>)
 8006370:	0018      	movs	r0, r3
 8006372:	f7fb f86f 	bl	8001454 <send_text_to_usb>


	esp_power_on();
 8006376:	f7fb f991 	bl	800169c <esp_power_on>


	#if BG96
	send_text_to_usb("\r\nBG96 Turning ON\r\n\0");
	#elif BG95
	send_text_to_usb("\r\nBG95 Turning ON\r\n\0");
 800637a:	4bb4      	ldr	r3, [pc, #720]	; (800664c <main+0x414>)
 800637c:	0018      	movs	r0, r3
 800637e:	f7fb f869 	bl	8001454 <send_text_to_usb>
	#endif

	power_on_bg96();
 8006382:	f7fe f941 	bl	8004608 <power_on_bg96>


	sFLASH_Init();
 8006386:	f001 fe4c 	bl	8008022 <sFLASH_Init>
	send_text_to_uart2((uint8_t*)"\r\nFlash Erased !\r\n\0");

	while(1);
	#endif

	flash_data = sFLASH_ReadByte1(0);
 800638a:	2000      	movs	r0, #0
 800638c:	f001 fec6 	bl	800811c <sFLASH_ReadByte1>
 8006390:	0003      	movs	r3, r0
 8006392:	001a      	movs	r2, r3
 8006394:	4bae      	ldr	r3, [pc, #696]	; (8006650 <main+0x418>)
 8006396:	701a      	strb	r2, [r3, #0]

	if(flash_data == 0xff || flash_data == '#')
 8006398:	4bad      	ldr	r3, [pc, #692]	; (8006650 <main+0x418>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2bff      	cmp	r3, #255	; 0xff
 800639e:	d003      	beq.n	80063a8 <main+0x170>
 80063a0:	4bab      	ldr	r3, [pc, #684]	; (8006650 <main+0x418>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b23      	cmp	r3, #35	; 0x23
 80063a6:	d104      	bne.n	80063b2 <main+0x17a>
		send_text_to_usb("\r\nMEMORY OK\r\n\0");
 80063a8:	4baa      	ldr	r3, [pc, #680]	; (8006654 <main+0x41c>)
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7fb f852 	bl	8001454 <send_text_to_usb>
 80063b0:	e003      	b.n	80063ba <main+0x182>
	else
		send_text_to_usb("\r\nMEMORY ERROR\r\n\0");
 80063b2:	4ba9      	ldr	r3, [pc, #676]	; (8006658 <main+0x420>)
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7fb f84d 	bl	8001454 <send_text_to_usb>


	////////// DEVICE SETTINGS FROM FLASH
	if(!read_settings_from_flash(DEVICE_SETTINGS_ADDRESS))
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	015b      	lsls	r3, r3, #5
 80063be:	0018      	movs	r0, r3
 80063c0:	f7fb fc9c 	bl	8001cfc <read_settings_from_flash>
 80063c4:	0003      	movs	r3, r0
 80063c6:	001a      	movs	r2, r3
 80063c8:	2301      	movs	r3, #1
 80063ca:	4053      	eors	r3, r2
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d02a      	beq.n	8006428 <main+0x1f0>
	{
		if(!read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS))
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	019b      	lsls	r3, r3, #6
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7fb fc90 	bl	8001cfc <read_settings_from_flash>
 80063dc:	0003      	movs	r3, r0
 80063de:	001a      	movs	r2, r3
 80063e0:	2301      	movs	r3, #1
 80063e2:	4053      	eors	r3, r2
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d014      	beq.n	8006414 <main+0x1dc>
		{
			store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fb fb54 	bl	8001a9c <store_settings_to_flash>
			store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	019b      	lsls	r3, r3, #6
 80063f8:	0018      	movs	r0, r3
 80063fa:	f7fb fb4f 	bl	8001a9c <store_settings_to_flash>
			read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	015b      	lsls	r3, r3, #5
 8006402:	0018      	movs	r0, r3
 8006404:	f7fb fc7a 	bl	8001cfc <read_settings_from_flash>
			read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	019b      	lsls	r3, r3, #6
 800640c:	0018      	movs	r0, r3
 800640e:	f7fb fc75 	bl	8001cfc <read_settings_from_flash>
 8006412:	e009      	b.n	8006428 <main+0x1f0>
		}
		else
		{
			store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	0018      	movs	r0, r3
 800641a:	f7fb fb3f 	bl	8001a9c <store_settings_to_flash>
			read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 800641e:	2380      	movs	r3, #128	; 0x80
 8006420:	015b      	lsls	r3, r3, #5
 8006422:	0018      	movs	r0, r3
 8006424:	f7fb fc6a 	bl	8001cfc <read_settings_from_flash>
		}
	}

	////////// RUNTIME PARAMETERS
	if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS))
 8006428:	23c0      	movs	r3, #192	; 0xc0
 800642a:	019b      	lsls	r3, r3, #6
 800642c:	0018      	movs	r0, r3
 800642e:	f7fb fa2f 	bl	8001890 <read_runtime_parameters_from_flash>
 8006432:	0003      	movs	r3, r0
 8006434:	001a      	movs	r2, r3
 8006436:	2301      	movs	r3, #1
 8006438:	4053      	eors	r3, r2
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d02a      	beq.n	8006496 <main+0x25e>
	{
		if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS))
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	0018      	movs	r0, r3
 8006446:	f7fb fa23 	bl	8001890 <read_runtime_parameters_from_flash>
 800644a:	0003      	movs	r3, r0
 800644c:	001a      	movs	r2, r3
 800644e:	2301      	movs	r3, #1
 8006450:	4053      	eors	r3, r2
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d014      	beq.n	8006482 <main+0x24a>
		{
			store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8006458:	23c0      	movs	r3, #192	; 0xc0
 800645a:	019b      	lsls	r3, r3, #6
 800645c:	0018      	movs	r0, r3
 800645e:	f7fb f9ab 	bl	80017b8 <store_runtime_parameters_to_flash>
			store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	0018      	movs	r0, r3
 8006468:	f7fb f9a6 	bl	80017b8 <store_runtime_parameters_to_flash>
			read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 800646c:	23c0      	movs	r3, #192	; 0xc0
 800646e:	019b      	lsls	r3, r3, #6
 8006470:	0018      	movs	r0, r3
 8006472:	f7fb fa0d 	bl	8001890 <read_runtime_parameters_from_flash>
			read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	01db      	lsls	r3, r3, #7
 800647a:	0018      	movs	r0, r3
 800647c:	f7fb fa08 	bl	8001890 <read_runtime_parameters_from_flash>
 8006480:	e009      	b.n	8006496 <main+0x25e>
		}
		else
		{
			store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8006482:	23c0      	movs	r3, #192	; 0xc0
 8006484:	019b      	lsls	r3, r3, #6
 8006486:	0018      	movs	r0, r3
 8006488:	f7fb f996 	bl	80017b8 <store_runtime_parameters_to_flash>
			read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 800648c:	23c0      	movs	r3, #192	; 0xc0
 800648e:	019b      	lsls	r3, r3, #6
 8006490:	0018      	movs	r0, r3
 8006492:	f7fb f9fd 	bl	8001890 <read_runtime_parameters_from_flash>
//		}
//		#endif
//	}


	HAL_Delay(1000);
 8006496:	23fa      	movs	r3, #250	; 0xfa
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	0018      	movs	r0, r3
 800649c:	f001 ff4a 	bl	8008334 <HAL_Delay>

	power_on_bg96();
 80064a0:	f7fe f8b2 	bl	8004608 <power_on_bg96>


	send_text_to_uart2("ATE0\r\n\0");
 80064a4:	4b6d      	ldr	r3, [pc, #436]	; (800665c <main+0x424>)
 80064a6:	0018      	movs	r0, r3
 80064a8:	f7fa ff9e 	bl	80013e8 <send_text_to_uart2>
	send_text_to_uart1("ATE0\r\n\0");
 80064ac:	4b6b      	ldr	r3, [pc, #428]	; (800665c <main+0x424>)
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7fa ff64 	bl	800137c <send_text_to_uart1>
	HAL_Delay(300);
 80064b4:	2396      	movs	r3, #150	; 0x96
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	0018      	movs	r0, r3
 80064ba:	f001 ff3b 	bl	8008334 <HAL_Delay>

	if(at_cmd_send_esp("AT\r\n\0","OK\r\n","ERROR",5,0))
 80064be:	4a68      	ldr	r2, [pc, #416]	; (8006660 <main+0x428>)
 80064c0:	4968      	ldr	r1, [pc, #416]	; (8006664 <main+0x42c>)
 80064c2:	4869      	ldr	r0, [pc, #420]	; (8006668 <main+0x430>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	2305      	movs	r3, #5
 80064ca:	f7fb fed7 	bl	800227c <at_cmd_send_esp>
 80064ce:	1e03      	subs	r3, r0, #0
 80064d0:	d008      	beq.n	80064e4 <main+0x2ac>
	{
		send_text_to_usb("\r\nESP Communication OK\r\n\0");
 80064d2:	4b66      	ldr	r3, [pc, #408]	; (800666c <main+0x434>)
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7fa ffbd 	bl	8001454 <send_text_to_usb>
		send_text_to_uart1((uint8_t*)"\r\nESP Communication OK\r\n\0");
 80064da:	4b64      	ldr	r3, [pc, #400]	; (800666c <main+0x434>)
 80064dc:	0018      	movs	r0, r3
 80064de:	f7fa ff4d 	bl	800137c <send_text_to_uart1>
 80064e2:	e007      	b.n	80064f4 <main+0x2bc>
	}
	else
	{
		send_text_to_usb("\r\nESP Communication ERROR\r\n\0");
 80064e4:	4b62      	ldr	r3, [pc, #392]	; (8006670 <main+0x438>)
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fa ffb4 	bl	8001454 <send_text_to_usb>
		send_text_to_uart1((uint8_t*)"\r\nESP Communication ERROR\r\n\0");
 80064ec:	4b60      	ldr	r3, [pc, #384]	; (8006670 <main+0x438>)
 80064ee:	0018      	movs	r0, r3
 80064f0:	f7fa ff44 	bl	800137c <send_text_to_uart1>
	if(at_cmd_send("AT\r\n\0","OK\r\n","ERROR",5,0))
		send_text_to_usb("\r\nBG96 Communication OK\r\n\0");
	else
		send_text_to_usb("\r\nBG96 Communication ERROR\r\n\0");
	#elif BG95
	if(at_cmd_send("AT\r\n\0","OK\r\n","ERROR",5,0))
 80064f4:	4a5a      	ldr	r2, [pc, #360]	; (8006660 <main+0x428>)
 80064f6:	495b      	ldr	r1, [pc, #364]	; (8006664 <main+0x42c>)
 80064f8:	485b      	ldr	r0, [pc, #364]	; (8006668 <main+0x430>)
 80064fa:	2300      	movs	r3, #0
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	2305      	movs	r3, #5
 8006500:	f7fb fe62 	bl	80021c8 <at_cmd_send>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d004      	beq.n	8006512 <main+0x2da>
		send_text_to_usb("\r\nBG95 Communication OK\r\n\0");
 8006508:	4b5a      	ldr	r3, [pc, #360]	; (8006674 <main+0x43c>)
 800650a:	0018      	movs	r0, r3
 800650c:	f7fa ffa2 	bl	8001454 <send_text_to_usb>
 8006510:	e003      	b.n	800651a <main+0x2e2>
	else
		send_text_to_usb("\r\nBG95 Communication ERROR\r\n\0");
 8006512:	4b59      	ldr	r3, [pc, #356]	; (8006678 <main+0x440>)
 8006514:	0018      	movs	r0, r3
 8006516:	f7fa ff9d 	bl	8001454 <send_text_to_usb>
//	flush_tx_string();
//	sprintf((char*)tx_string, "BG96 response: %s\r\n\0", gsm_data);
//	send_text_to_usb((char*)tx_string);


	at_cmd_send("AT+CFUN=1\r\n\0","OK\r\n","ERROR",10,0);/////////////FULL FUNCTIONALITY MODE
 800651a:	4a51      	ldr	r2, [pc, #324]	; (8006660 <main+0x428>)
 800651c:	4951      	ldr	r1, [pc, #324]	; (8006664 <main+0x42c>)
 800651e:	4857      	ldr	r0, [pc, #348]	; (800667c <main+0x444>)
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	230a      	movs	r3, #10
 8006526:	f7fb fe4f 	bl	80021c8 <at_cmd_send>

	flush_tx_string();
 800652a:	f7fa ffeb 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "AT+QICSGP=1,1,\"%s\",\"\",\"\",1\r\n\0", apn);///////////SET APN
 800652e:	4a54      	ldr	r2, [pc, #336]	; (8006680 <main+0x448>)
 8006530:	4954      	ldr	r1, [pc, #336]	; (8006684 <main+0x44c>)
 8006532:	4b44      	ldr	r3, [pc, #272]	; (8006644 <main+0x40c>)
 8006534:	0018      	movs	r0, r3
 8006536:	f00c febb 	bl	80132b0 <siprintf>
	at_cmd_send((char*)tx_string,"OK\r\n","ERROR",5,0);
 800653a:	4a49      	ldr	r2, [pc, #292]	; (8006660 <main+0x428>)
 800653c:	4949      	ldr	r1, [pc, #292]	; (8006664 <main+0x42c>)
 800653e:	4841      	ldr	r0, [pc, #260]	; (8006644 <main+0x40c>)
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2305      	movs	r3, #5
 8006546:	f7fb fe3f 	bl	80021c8 <at_cmd_send>

	at_cmd_send_esp("AT+CWMODE=3\r\n\0","OK\r\n","ERROR",5,0);
 800654a:	4a45      	ldr	r2, [pc, #276]	; (8006660 <main+0x428>)
 800654c:	4945      	ldr	r1, [pc, #276]	; (8006664 <main+0x42c>)
 800654e:	484e      	ldr	r0, [pc, #312]	; (8006688 <main+0x450>)
 8006550:	2300      	movs	r3, #0
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	2305      	movs	r3, #5
 8006556:	f7fb fe91 	bl	800227c <at_cmd_send_esp>
	esp_enable_softap_mode();
 800655a:	f7fc f80d 	bl	8002578 <esp_enable_softap_mode>

	send_text_to_uart2("AT+QURCCFG=\"urcport\",\"uart1\"\r\n\0");
 800655e:	4b4b      	ldr	r3, [pc, #300]	; (800668c <main+0x454>)
 8006560:	0018      	movs	r0, r3
 8006562:	f7fa ff41 	bl	80013e8 <send_text_to_uart2>
	HAL_Delay(300);
 8006566:	2396      	movs	r3, #150	; 0x96
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	0018      	movs	r0, r3
 800656c:	f001 fee2 	bl	8008334 <HAL_Delay>
	// for usa
	//AT+QCFG="nwscanmode",0,1
	//at+qcfg="nwscanseq",020103,1
	//(eMTC -> GSM -> NB-IoT)

	at_cmd_send("AT+QCFG=\"nwscanseq\"\r\n\0","OK\r\n","ERROR",5,0);
 8006570:	4a3b      	ldr	r2, [pc, #236]	; (8006660 <main+0x428>)
 8006572:	493c      	ldr	r1, [pc, #240]	; (8006664 <main+0x42c>)
 8006574:	4846      	ldr	r0, [pc, #280]	; (8006690 <main+0x458>)
 8006576:	2300      	movs	r3, #0
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	2305      	movs	r3, #5
 800657c:	f7fb fe24 	bl	80021c8 <at_cmd_send>
//	at_cmd_send("AT+QCFG=\"iotopmode\",2\r\n\0","OK\r\n","ERROR",5,0);
	#endif



	at_cmd_send("AT+CREG=0\r\n\0","OK\r\n","ERROR",5,0);
 8006580:	4a37      	ldr	r2, [pc, #220]	; (8006660 <main+0x428>)
 8006582:	4938      	ldr	r1, [pc, #224]	; (8006664 <main+0x42c>)
 8006584:	4843      	ldr	r0, [pc, #268]	; (8006694 <main+0x45c>)
 8006586:	2300      	movs	r3, #0
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	2305      	movs	r3, #5
 800658c:	f7fb fe1c 	bl	80021c8 <at_cmd_send>

	at_cmd_send("AT+CGREG=0\r\n\0","OK\r\n","ERROR",5,0);
 8006590:	4a33      	ldr	r2, [pc, #204]	; (8006660 <main+0x428>)
 8006592:	4934      	ldr	r1, [pc, #208]	; (8006664 <main+0x42c>)
 8006594:	4840      	ldr	r0, [pc, #256]	; (8006698 <main+0x460>)
 8006596:	2300      	movs	r3, #0
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	2305      	movs	r3, #5
 800659c:	f7fb fe14 	bl	80021c8 <at_cmd_send>

	at_cmd_send("AT+GSN\r\n\0","OK\r\n","ERROR",5,0);
 80065a0:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <main+0x428>)
 80065a2:	4930      	ldr	r1, [pc, #192]	; (8006664 <main+0x42c>)
 80065a4:	483d      	ldr	r0, [pc, #244]	; (800669c <main+0x464>)
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2305      	movs	r3, #5
 80065ac:	f7fb fe0c 	bl	80021c8 <at_cmd_send>

	for(uint8_t i=0; i<15; i++)//\r\n868446033000023\r\n
 80065b0:	235f      	movs	r3, #95	; 0x5f
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	2200      	movs	r2, #0
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e00e      	b.n	80065d8 <main+0x3a0>
	{
		imei[i] = gsm_data[i+2];
 80065ba:	205f      	movs	r0, #95	; 0x5f
 80065bc:	183b      	adds	r3, r7, r0
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	183b      	adds	r3, r7, r0
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	4936      	ldr	r1, [pc, #216]	; (80066a0 <main+0x468>)
 80065c8:	5c89      	ldrb	r1, [r1, r2]
 80065ca:	4a36      	ldr	r2, [pc, #216]	; (80066a4 <main+0x46c>)
 80065cc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<15; i++)//\r\n868446033000023\r\n
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	183b      	adds	r3, r7, r0
 80065d4:	3201      	adds	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	235f      	movs	r3, #95	; 0x5f
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b0e      	cmp	r3, #14
 80065e0:	d9eb      	bls.n	80065ba <main+0x382>
	}

	flush_tx_string();
 80065e2:	f7fa ff8f 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\nIMEI : %s\r\n\0", imei);
 80065e6:	4a2f      	ldr	r2, [pc, #188]	; (80066a4 <main+0x46c>)
 80065e8:	492f      	ldr	r1, [pc, #188]	; (80066a8 <main+0x470>)
 80065ea:	4b16      	ldr	r3, [pc, #88]	; (8006644 <main+0x40c>)
 80065ec:	0018      	movs	r0, r3
 80065ee:	f00c fe5f 	bl	80132b0 <siprintf>
	send_text_to_usb((char*)tx_string);
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <main+0x40c>)
 80065f4:	0018      	movs	r0, r3
 80065f6:	f7fa ff2d 	bl	8001454 <send_text_to_usb>


	at_cmd_send("AT+CIMI\r\n\0","OK\r\n","ERROR",5,0);
 80065fa:	4a19      	ldr	r2, [pc, #100]	; (8006660 <main+0x428>)
 80065fc:	4919      	ldr	r1, [pc, #100]	; (8006664 <main+0x42c>)
 80065fe:	482b      	ldr	r0, [pc, #172]	; (80066ac <main+0x474>)
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2305      	movs	r3, #5
 8006606:	f7fb fddf 	bl	80021c8 <at_cmd_send>
	for(uint8_t i=0; i<15; i++)
 800660a:	235e      	movs	r3, #94	; 0x5e
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	e05c      	b.n	80066ce <main+0x496>
 8006614:	200002d6 	.word	0x200002d6
 8006618:	200019c4 	.word	0x200019c4
 800661c:	20001ab0 	.word	0x20001ab0
 8006620:	20001b18 	.word	0x20001b18
 8006624:	20001a68 	.word	0x20001a68
 8006628:	20001be4 	.word	0x20001be4
 800662c:	48000400 	.word	0x48000400
 8006630:	2000006e 	.word	0x2000006e
 8006634:	2000006f 	.word	0x2000006f
 8006638:	20000070 	.word	0x20000070
 800663c:	2000004c 	.word	0x2000004c
 8006640:	08015e78 	.word	0x08015e78
 8006644:	20000424 	.word	0x20000424
 8006648:	08015e8c 	.word	0x08015e8c
 800664c:	08015ea0 	.word	0x08015ea0
 8006650:	200002d4 	.word	0x200002d4
 8006654:	08015eb8 	.word	0x08015eb8
 8006658:	08015ec8 	.word	0x08015ec8
 800665c:	08014b34 	.word	0x08014b34
 8006660:	08014b24 	.word	0x08014b24
 8006664:	08014b2c 	.word	0x08014b2c
 8006668:	08014b90 	.word	0x08014b90
 800666c:	08015edc 	.word	0x08015edc
 8006670:	08015ef8 	.word	0x08015ef8
 8006674:	08015f18 	.word	0x08015f18
 8006678:	08015f34 	.word	0x08015f34
 800667c:	08015f54 	.word	0x08015f54
 8006680:	20000000 	.word	0x20000000
 8006684:	08014d88 	.word	0x08014d88
 8006688:	08015f64 	.word	0x08015f64
 800668c:	08015f74 	.word	0x08015f74
 8006690:	08015f94 	.word	0x08015f94
 8006694:	08015fac 	.word	0x08015fac
 8006698:	08015fbc 	.word	0x08015fbc
 800669c:	08015fcc 	.word	0x08015fcc
 80066a0:	200005b4 	.word	0x200005b4
 80066a4:	20000e20 	.word	0x20000e20
 80066a8:	08015fd8 	.word	0x08015fd8
 80066ac:	08015fe8 	.word	0x08015fe8
	{
		imsi[i] = gsm_data[i+2];
 80066b0:	205e      	movs	r0, #94	; 0x5e
 80066b2:	183b      	adds	r3, r7, r0
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	183b      	adds	r3, r7, r0
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	49e9      	ldr	r1, [pc, #932]	; (8006a64 <main+0x82c>)
 80066be:	5c89      	ldrb	r1, [r1, r2]
 80066c0:	4ae9      	ldr	r2, [pc, #932]	; (8006a68 <main+0x830>)
 80066c2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<15; i++)
 80066c4:	183b      	adds	r3, r7, r0
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	183b      	adds	r3, r7, r0
 80066ca:	3201      	adds	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	235e      	movs	r3, #94	; 0x5e
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b0e      	cmp	r3, #14
 80066d6:	d9eb      	bls.n	80066b0 <main+0x478>
	}

	flush_tx_string();
 80066d8:	f7fa ff14 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\nIMSI : %s\r\n\0", imsi);
 80066dc:	4ae2      	ldr	r2, [pc, #904]	; (8006a68 <main+0x830>)
 80066de:	49e3      	ldr	r1, [pc, #908]	; (8006a6c <main+0x834>)
 80066e0:	4be3      	ldr	r3, [pc, #908]	; (8006a70 <main+0x838>)
 80066e2:	0018      	movs	r0, r3
 80066e4:	f00c fde4 	bl	80132b0 <siprintf>
	send_text_to_usb((char*)tx_string);
 80066e8:	4be1      	ldr	r3, [pc, #900]	; (8006a70 <main+0x838>)
 80066ea:	0018      	movs	r0, r3
 80066ec:	f7fa feb2 	bl	8001454 <send_text_to_usb>


	at_cmd_send("AT+QCCID\r\n\0","OK\r\n","ERROR",5,0);
 80066f0:	4ae0      	ldr	r2, [pc, #896]	; (8006a74 <main+0x83c>)
 80066f2:	49e1      	ldr	r1, [pc, #900]	; (8006a78 <main+0x840>)
 80066f4:	48e1      	ldr	r0, [pc, #900]	; (8006a7c <main+0x844>)
 80066f6:	2300      	movs	r3, #0
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	2305      	movs	r3, #5
 80066fc:	f7fb fd64 	bl	80021c8 <at_cmd_send>
	for(uint8_t i=0; i<20; i++)
 8006700:	235d      	movs	r3, #93	; 0x5d
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	2200      	movs	r2, #0
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	e00f      	b.n	800672a <main+0x4f2>
	{
		ccid[i] = gsm_data[i+8];
 800670a:	205d      	movs	r0, #93	; 0x5d
 800670c:	183b      	adds	r3, r7, r0
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	001a      	movs	r2, r3
 8006714:	183b      	adds	r3, r7, r0
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	49d2      	ldr	r1, [pc, #840]	; (8006a64 <main+0x82c>)
 800671a:	5c89      	ldrb	r1, [r1, r2]
 800671c:	4ad8      	ldr	r2, [pc, #864]	; (8006a80 <main+0x848>)
 800671e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<20; i++)
 8006720:	183b      	adds	r3, r7, r0
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	183b      	adds	r3, r7, r0
 8006726:	3201      	adds	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	235d      	movs	r3, #93	; 0x5d
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b13      	cmp	r3, #19
 8006732:	d9ea      	bls.n	800670a <main+0x4d2>
	}

	flush_tx_string();
 8006734:	f7fa fee6 	bl	8001504 <flush_tx_string>
	sprintf((char*)tx_string, "\r\nCCID : %s\r\n\0", ccid);
 8006738:	4ad1      	ldr	r2, [pc, #836]	; (8006a80 <main+0x848>)
 800673a:	49d2      	ldr	r1, [pc, #840]	; (8006a84 <main+0x84c>)
 800673c:	4bcc      	ldr	r3, [pc, #816]	; (8006a70 <main+0x838>)
 800673e:	0018      	movs	r0, r3
 8006740:	f00c fdb6 	bl	80132b0 <siprintf>
	send_text_to_usb((char*)tx_string);
 8006744:	4bca      	ldr	r3, [pc, #808]	; (8006a70 <main+0x838>)
 8006746:	0018      	movs	r0, r3
 8006748:	f7fa fe84 	bl	8001454 <send_text_to_usb>
	//at+qcfg="nwscanseq",020103,1
	//(eMTC -> GSM -> NB-IoT)

//	at_cmd_send("AT+QCFG=\"nwscanseq\"\r\n\0","OK\r\n","ERROR",5,0);

	at_cmd_send("AT+QCFG=\"nwscanmode\",0\r\n\0","OK\r\n","ERROR",5,0);
 800674c:	4ac9      	ldr	r2, [pc, #804]	; (8006a74 <main+0x83c>)
 800674e:	49ca      	ldr	r1, [pc, #808]	; (8006a78 <main+0x840>)
 8006750:	48cd      	ldr	r0, [pc, #820]	; (8006a88 <main+0x850>)
 8006752:	2300      	movs	r3, #0
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	2305      	movs	r3, #5
 8006758:	f7fb fd36 	bl	80021c8 <at_cmd_send>
//	flush_tx_string();
//	sprintf((char*)tx_string, "\r\nSignal Strength : %s\r\n\0", signal_strength);
//	send_text_to_usb((char*)tx_string);


	get_module_firmware_version();
 800675c:	f7ff fc2e 	bl	8005fbc <get_module_firmware_version>


	get_gsm_signal_strength();
 8006760:	f7fd ffda 	bl	8004718 <get_gsm_signal_strength>


	at_cmd_send("AT+COPS?\r\n\0","OK\r\n","ERROR",5,0);
 8006764:	4ac3      	ldr	r2, [pc, #780]	; (8006a74 <main+0x83c>)
 8006766:	49c4      	ldr	r1, [pc, #784]	; (8006a78 <main+0x840>)
 8006768:	48c8      	ldr	r0, [pc, #800]	; (8006a8c <main+0x854>)
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2305      	movs	r3, #5
 8006770:	f7fb fd2a 	bl	80021c8 <at_cmd_send>

	at_cmd_send("AT&W\r\n\0","OK\r\n","ERROR",5,0);
 8006774:	4abf      	ldr	r2, [pc, #764]	; (8006a74 <main+0x83c>)
 8006776:	49c0      	ldr	r1, [pc, #768]	; (8006a78 <main+0x840>)
 8006778:	48c5      	ldr	r0, [pc, #788]	; (8006a90 <main+0x858>)
 800677a:	2300      	movs	r3, #0
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	2305      	movs	r3, #5
 8006780:	f7fb fd22 	bl	80021c8 <at_cmd_send>
	HAL_Delay(500);
 8006784:	23fa      	movs	r3, #250	; 0xfa
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	0018      	movs	r0, r3
 800678a:	f001 fdd3 	bl	8008334 <HAL_Delay>
//	send_text_to_usb("Usb test Data blipgo\r\n\0");


//	erase_all_records();

	HAL_Delay(500);
 800678e:	23fa      	movs	r3, #250	; 0xfa
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	0018      	movs	r0, r3
 8006794:	f001 fdce 	bl	8008334 <HAL_Delay>
	server_clock_flag=1;
 8006798:	4bbe      	ldr	r3, [pc, #760]	; (8006a94 <main+0x85c>)
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
	ping_service_flag=1;
 800679e:	4bbe      	ldr	r3, [pc, #760]	; (8006a98 <main+0x860>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]


	server_clock_handler();
 80067a4:	f7fe fe3a 	bl	800541c <server_clock_handler>

	ping_service_handler();
 80067a8:	f7fe fedc 	bl	8005564 <ping_service_handler>

	configuration_service_handler();
 80067ac:	f7fe ff2c 	bl	8005608 <configuration_service_handler>

	ca_certificate_handler();
 80067b0:	f7fe ff62 	bl	8005678 <ca_certificate_handler>

	client_certificate_handler();
 80067b4:	f7fe ff90 	bl	80056d8 <client_certificate_handler>

	client_key_handler();
 80067b8:	f7fe ffbe 	bl	8005738 <client_key_handler>

	update_module_firmware_handler();
 80067bc:	f7fe fe5c 	bl	8005478 <update_module_firmware_handler>

	update_device_firmware_handler();
 80067c0:	f7fe fe96 	bl	80054f0 <update_device_firmware_handler>

	device_twin_handler();
 80067c4:	f7fe ffe8 	bl	8005798 <device_twin_handler>

	power_down_bg96_handler();
 80067c8:	f7fd febe 	bl	8004548 <power_down_bg96_handler>
//	{
//		HAL_Delay(1000);
//	}
//  }

	esp_enable_softap_mode();
 80067cc:	f7fb fed4 	bl	8002578 <esp_enable_softap_mode>

	HAL_Delay(1000);
 80067d0:	23fa      	movs	r3, #250	; 0xfa
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	0018      	movs	r0, r3
 80067d6:	f001 fdad 	bl	8008334 <HAL_Delay>

	sprintf((char*)ble_ssid_name, "BlipGo+%s\0", device_id);
 80067da:	4ab0      	ldr	r2, [pc, #704]	; (8006a9c <main+0x864>)
 80067dc:	49b0      	ldr	r1, [pc, #704]	; (8006aa0 <main+0x868>)
 80067de:	4bb1      	ldr	r3, [pc, #708]	; (8006aa4 <main+0x86c>)
 80067e0:	0018      	movs	r0, r3
 80067e2:	f00c fd65 	bl	80132b0 <siprintf>

	ble_initialize_gatt_client((char*)ble_ssid_name);
 80067e6:	4baf      	ldr	r3, [pc, #700]	; (8006aa4 <main+0x86c>)
 80067e8:	0018      	movs	r0, r3
 80067ea:	f7fa fee1 	bl	80015b0 <ble_initialize_gatt_client>

	ble_get_paired_device();
 80067ee:	f7fb fca1 	bl	8002134 <ble_get_paired_device>

	send_text_to_uart1("ATE0\r\n\0");
 80067f2:	4bad      	ldr	r3, [pc, #692]	; (8006aa8 <main+0x870>)
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7fa fdc1 	bl	800137c <send_text_to_uart1>


	beep(20);
 80067fa:	2014      	movs	r0, #20
 80067fc:	f7fb ff54 	bl	80026a8 <beep>
	HAL_Delay(100);
 8006800:	2064      	movs	r0, #100	; 0x64
 8006802:	f001 fd97 	bl	8008334 <HAL_Delay>
	beep(30);
 8006806:	201e      	movs	r0, #30
 8006808:	f7fb ff4e 	bl	80026a8 <beep>

	softap_mode_timer=0;
 800680c:	4ba7      	ldr	r3, [pc, #668]	; (8006aac <main+0x874>)
 800680e:	2200      	movs	r2, #0
 8006810:	801a      	strh	r2, [r3, #0]

	bootup_complete_flag = 1;
 8006812:	4ba7      	ldr	r3, [pc, #668]	; (8006ab0 <main+0x878>)
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
//		send_text_to_uart1(data_buf);
//		send_text_to_uart1("\r\n\0");

//		check_gprs_network_registration();

		power_down_bg96_handler();
 8006818:	f7fd fe96 	bl	8004548 <power_down_bg96_handler>

		wifi_command_handler();
 800681c:	f7ff fc1c 	bl	8006058 <wifi_command_handler>



		if(connect_wifi_network_flag)
 8006820:	4ba4      	ldr	r3, [pc, #656]	; (8006ab4 <main+0x87c>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <main+0x62a>
		{
//			restart_esp();

			HAL_Delay(1000);
 8006828:	23fa      	movs	r3, #250	; 0xfa
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	0018      	movs	r0, r3
 800682e:	f001 fd81 	bl	8008334 <HAL_Delay>
//			at_cmd_send_esp("AT+CWMODE=1\r\n\0", "OK\r\n", "ERROR", 10, 0);

			flush_array((char*)tx_string, 400);
 8006832:	23c8      	movs	r3, #200	; 0xc8
 8006834:	005a      	lsls	r2, r3, #1
 8006836:	4b8e      	ldr	r3, [pc, #568]	; (8006a70 <main+0x838>)
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f7fa fe3e 	bl	80014bc <flush_array>

			sprintf((char*)tx_string, "AT+CWJAP=\"%s\",\"%s\"\r\n\0", wifi_ssid, wifi_pswd);
 8006840:	4b9d      	ldr	r3, [pc, #628]	; (8006ab8 <main+0x880>)
 8006842:	4a9e      	ldr	r2, [pc, #632]	; (8006abc <main+0x884>)
 8006844:	499e      	ldr	r1, [pc, #632]	; (8006ac0 <main+0x888>)
 8006846:	488a      	ldr	r0, [pc, #552]	; (8006a70 <main+0x838>)
 8006848:	f00c fd32 	bl	80132b0 <siprintf>
			at_cmd_send_esp((char*)tx_string,"OK\r\n", "ERROR", 10, 0);
 800684c:	4a89      	ldr	r2, [pc, #548]	; (8006a74 <main+0x83c>)
 800684e:	498a      	ldr	r1, [pc, #552]	; (8006a78 <main+0x840>)
 8006850:	4887      	ldr	r0, [pc, #540]	; (8006a70 <main+0x838>)
 8006852:	2300      	movs	r3, #0
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	230a      	movs	r3, #10
 8006858:	f7fb fd10 	bl	800227c <at_cmd_send_esp>
			connect_wifi_network_flag = 0;
 800685c:	4b95      	ldr	r3, [pc, #596]	; (8006ab4 <main+0x87c>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
		}

		if(send_softap_response_flag)
 8006862:	4b98      	ldr	r3, [pc, #608]	; (8006ac4 <main+0x88c>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <main+0x660>
		{
			if(at_cmd_send_esp("AT+CIPSEND=0,4\r\n\0",">","ERROR",5,0))
 800686a:	4a82      	ldr	r2, [pc, #520]	; (8006a74 <main+0x83c>)
 800686c:	4996      	ldr	r1, [pc, #600]	; (8006ac8 <main+0x890>)
 800686e:	4897      	ldr	r0, [pc, #604]	; (8006acc <main+0x894>)
 8006870:	2300      	movs	r3, #0
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	2305      	movs	r3, #5
 8006876:	f7fb fd01 	bl	800227c <at_cmd_send_esp>
 800687a:	1e03      	subs	r3, r0, #0
 800687c:	d00c      	beq.n	8006898 <main+0x660>
			{
				if(at_cmd_send_esp("OK\r\n\0","SEND OK\r\n","SEND FAIL",5,0))
 800687e:	4a94      	ldr	r2, [pc, #592]	; (8006ad0 <main+0x898>)
 8006880:	4994      	ldr	r1, [pc, #592]	; (8006ad4 <main+0x89c>)
 8006882:	4895      	ldr	r0, [pc, #596]	; (8006ad8 <main+0x8a0>)
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2305      	movs	r3, #5
 800688a:	f7fb fcf7 	bl	800227c <at_cmd_send_esp>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d002      	beq.n	8006898 <main+0x660>
				{
					send_softap_response_flag = 0;
 8006892:	4b8c      	ldr	r3, [pc, #560]	; (8006ac4 <main+0x88c>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		//// SCAN AND PAIR WITH METER
		if(ble_start_pairing_flag)
 8006898:	4b90      	ldr	r3, [pc, #576]	; (8006adc <main+0x8a4>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d100      	bne.n	80068a2 <main+0x66a>
 80068a0:	e198      	b.n	8006bd4 <main+0x99c>
		{
			green_led_blink_flag=1;//// blink when communiating with glucometer
 80068a2:	4b8f      	ldr	r3, [pc, #572]	; (8006ae0 <main+0x8a8>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]

			at_cmd_send_esp("AT+BLEENCCLEAR\r\n\0", "OK\r\n", "ERROR", 5, 0);
 80068a8:	4a72      	ldr	r2, [pc, #456]	; (8006a74 <main+0x83c>)
 80068aa:	4973      	ldr	r1, [pc, #460]	; (8006a78 <main+0x840>)
 80068ac:	488d      	ldr	r0, [pc, #564]	; (8006ae4 <main+0x8ac>)
 80068ae:	2300      	movs	r3, #0
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2305      	movs	r3, #5
 80068b4:	f7fb fce2 	bl	800227c <at_cmd_send_esp>

			sprintf((char*)ble_ssid_name, "BlipGo+%s\0", device_id);
 80068b8:	4a78      	ldr	r2, [pc, #480]	; (8006a9c <main+0x864>)
 80068ba:	4979      	ldr	r1, [pc, #484]	; (8006aa0 <main+0x868>)
 80068bc:	4b79      	ldr	r3, [pc, #484]	; (8006aa4 <main+0x86c>)
 80068be:	0018      	movs	r0, r3
 80068c0:	f00c fcf6 	bl	80132b0 <siprintf>

			if(ble_initialize_gatt_client((char*)ble_ssid_name))
 80068c4:	4b77      	ldr	r3, [pc, #476]	; (8006aa4 <main+0x86c>)
 80068c6:	0018      	movs	r0, r3
 80068c8:	f7fa fe72 	bl	80015b0 <ble_initialize_gatt_client>
 80068cc:	1e03      	subs	r3, r0, #0
 80068ce:	d100      	bne.n	80068d2 <main+0x69a>
 80068d0:	e17a      	b.n	8006bc8 <main+0x990>
			{
				ble_scan_available_device();
 80068d2:	f7fb fc4b 	bl	800216c <ble_scan_available_device>

				at_cmd_send_esp("AT+BLESECPARAM=1,4,16,3,3\r\n\0", "OK\r\n", "ERROR", 5, 0);
 80068d6:	4a67      	ldr	r2, [pc, #412]	; (8006a74 <main+0x83c>)
 80068d8:	4967      	ldr	r1, [pc, #412]	; (8006a78 <main+0x840>)
 80068da:	4883      	ldr	r0, [pc, #524]	; (8006ae8 <main+0x8b0>)
 80068dc:	2300      	movs	r3, #0
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2305      	movs	r3, #5
 80068e2:	f7fb fccb 	bl	800227c <at_cmd_send_esp>

				flush_tx_string();
 80068e6:	f7fa fe0d 	bl	8001504 <flush_tx_string>
				sprintf((char*)tx_string, "AT+BLECONN=0,\"%s\"\r\n\0", ble_available_device);
 80068ea:	4a80      	ldr	r2, [pc, #512]	; (8006aec <main+0x8b4>)
 80068ec:	4980      	ldr	r1, [pc, #512]	; (8006af0 <main+0x8b8>)
 80068ee:	4b60      	ldr	r3, [pc, #384]	; (8006a70 <main+0x838>)
 80068f0:	0018      	movs	r0, r3
 80068f2:	f00c fcdd 	bl	80132b0 <siprintf>

				///+BLECONN:0,"9c:1d:58:9c:06:1e"
				unsigned char connection_success_resposne[30] = {0};
 80068f6:	2428      	movs	r4, #40	; 0x28
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	221a      	movs	r2, #26
 8006902:	2100      	movs	r1, #0
 8006904:	0018      	movs	r0, r3
 8006906:	f00c fa3d 	bl	8012d84 <memset>
				sprintf((char*)connection_success_resposne, "BLECONN:0,\"%s\"", ble_available_device);
 800690a:	4a78      	ldr	r2, [pc, #480]	; (8006aec <main+0x8b4>)
 800690c:	4979      	ldr	r1, [pc, #484]	; (8006af4 <main+0x8bc>)
 800690e:	193b      	adds	r3, r7, r4
 8006910:	0018      	movs	r0, r3
 8006912:	f00c fccd 	bl	80132b0 <siprintf>

				at_cmd_send_esp((char*)tx_string, (char*)connection_success_resposne, "BLECONN:0,-1\r\n", 20, 0);
 8006916:	4a78      	ldr	r2, [pc, #480]	; (8006af8 <main+0x8c0>)
 8006918:	1939      	adds	r1, r7, r4
 800691a:	4855      	ldr	r0, [pc, #340]	; (8006a70 <main+0x838>)
 800691c:	2300      	movs	r3, #0
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	2314      	movs	r3, #20
 8006922:	f7fb fcab 	bl	800227c <at_cmd_send_esp>


				//////   GET MODEL AND SERIAL NUMBER OF METER
				at_cmd_send_esp("AT+BLEGATTCPRIMSRV=0\r\n\0", "OK\r\n", "ERROR", 5, 0);///////primary services
 8006926:	4a53      	ldr	r2, [pc, #332]	; (8006a74 <main+0x83c>)
 8006928:	4953      	ldr	r1, [pc, #332]	; (8006a78 <main+0x840>)
 800692a:	4874      	ldr	r0, [pc, #464]	; (8006afc <main+0x8c4>)
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2305      	movs	r3, #5
 8006932:	f7fb fca3 	bl	800227c <at_cmd_send_esp>

				at_cmd_send_esp("AT+BLEGATTCCHAR=0,3\r\n\0", "OK\r\n", "ERROR", 5, 0);//// device information service
 8006936:	4a4f      	ldr	r2, [pc, #316]	; (8006a74 <main+0x83c>)
 8006938:	494f      	ldr	r1, [pc, #316]	; (8006a78 <main+0x840>)
 800693a:	4871      	ldr	r0, [pc, #452]	; (8006b00 <main+0x8c8>)
 800693c:	2300      	movs	r3, #0
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	2305      	movs	r3, #5
 8006942:	f7fb fc9b 	bl	800227c <at_cmd_send_esp>

				at_cmd_send_esp("AT+BLEGATTCRD=0,3,2\r\n\0", "OK\r\n", "ERROR", 2, 0);///// model number
 8006946:	4a4b      	ldr	r2, [pc, #300]	; (8006a74 <main+0x83c>)
 8006948:	494b      	ldr	r1, [pc, #300]	; (8006a78 <main+0x840>)
 800694a:	486e      	ldr	r0, [pc, #440]	; (8006b04 <main+0x8cc>)
 800694c:	2300      	movs	r3, #0
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	2302      	movs	r3, #2
 8006952:	f7fb fc93 	bl	800227c <at_cmd_send_esp>
				explode_string(rx_string_esp,300,2,',','\r',10,'\n');
 8006956:	2396      	movs	r3, #150	; 0x96
 8006958:	0059      	lsls	r1, r3, #1
 800695a:	486b      	ldr	r0, [pc, #428]	; (8006b08 <main+0x8d0>)
 800695c:	230a      	movs	r3, #10
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	230a      	movs	r3, #10
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	230d      	movs	r3, #13
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	232c      	movs	r3, #44	; 0x2c
 800696a:	2202      	movs	r2, #2
 800696c:	f7fb f924 	bl	8001bb8 <explode_string>
				if(temp_data[0]!=0)
 8006970:	4b66      	ldr	r3, [pc, #408]	; (8006b0c <main+0x8d4>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <main+0x756>
				{
					flush_array((char*)meter_model, 10);
 8006978:	4b65      	ldr	r3, [pc, #404]	; (8006b10 <main+0x8d8>)
 800697a:	210a      	movs	r1, #10
 800697c:	0018      	movs	r0, r3
 800697e:	f7fa fd9d 	bl	80014bc <flush_array>
					sprintf((char*)meter_model, "%s\0", temp_data);
 8006982:	4a62      	ldr	r2, [pc, #392]	; (8006b0c <main+0x8d4>)
 8006984:	4963      	ldr	r1, [pc, #396]	; (8006b14 <main+0x8dc>)
 8006986:	4b62      	ldr	r3, [pc, #392]	; (8006b10 <main+0x8d8>)
 8006988:	0018      	movs	r0, r3
 800698a:	f00c fc91 	bl	80132b0 <siprintf>
				}
				send_text_to_usb((char*)"\r\nModel: \0");
 800698e:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <main+0x8e0>)
 8006990:	0018      	movs	r0, r3
 8006992:	f7fa fd5f 	bl	8001454 <send_text_to_usb>
				send_text_to_usb((char*)meter_model);
 8006996:	4b5e      	ldr	r3, [pc, #376]	; (8006b10 <main+0x8d8>)
 8006998:	0018      	movs	r0, r3
 800699a:	f7fa fd5b 	bl	8001454 <send_text_to_usb>
				send_text_to_usb((char*)"\r\n\0");
 800699e:	4b5f      	ldr	r3, [pc, #380]	; (8006b1c <main+0x8e4>)
 80069a0:	0018      	movs	r0, r3
 80069a2:	f7fa fd57 	bl	8001454 <send_text_to_usb>


				at_cmd_send_esp("AT+BLEGATTCRD=0,3,3\r\n\0", "OK\r\n", "ERROR", 2, 0);//// serial number
 80069a6:	4a33      	ldr	r2, [pc, #204]	; (8006a74 <main+0x83c>)
 80069a8:	4933      	ldr	r1, [pc, #204]	; (8006a78 <main+0x840>)
 80069aa:	485d      	ldr	r0, [pc, #372]	; (8006b20 <main+0x8e8>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2302      	movs	r3, #2
 80069b2:	f7fb fc63 	bl	800227c <at_cmd_send_esp>
				explode_string(rx_string_esp,300,2,',','\r',20,'\n');
 80069b6:	2396      	movs	r3, #150	; 0x96
 80069b8:	0059      	lsls	r1, r3, #1
 80069ba:	4853      	ldr	r0, [pc, #332]	; (8006b08 <main+0x8d0>)
 80069bc:	230a      	movs	r3, #10
 80069be:	9302      	str	r3, [sp, #8]
 80069c0:	2314      	movs	r3, #20
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	230d      	movs	r3, #13
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	232c      	movs	r3, #44	; 0x2c
 80069ca:	2202      	movs	r2, #2
 80069cc:	f7fb f8f4 	bl	8001bb8 <explode_string>
				if(temp_data[0]!=0)
 80069d0:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <main+0x8d4>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <main+0x7b6>
				{
					flush_array((char*)meter_serial_no, 20);
 80069d8:	4b52      	ldr	r3, [pc, #328]	; (8006b24 <main+0x8ec>)
 80069da:	2114      	movs	r1, #20
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fa fd6d 	bl	80014bc <flush_array>
					sprintf((char*)meter_serial_no, "%s\0", temp_data);
 80069e2:	4a4a      	ldr	r2, [pc, #296]	; (8006b0c <main+0x8d4>)
 80069e4:	494b      	ldr	r1, [pc, #300]	; (8006b14 <main+0x8dc>)
 80069e6:	4b4f      	ldr	r3, [pc, #316]	; (8006b24 <main+0x8ec>)
 80069e8:	0018      	movs	r0, r3
 80069ea:	f00c fc61 	bl	80132b0 <siprintf>
				}
				send_text_to_usb((char*)"\r\nMeter SN: \0");
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <main+0x8f0>)
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7fa fd2f 	bl	8001454 <send_text_to_usb>
				send_text_to_usb((char*)meter_serial_no);
 80069f6:	4b4b      	ldr	r3, [pc, #300]	; (8006b24 <main+0x8ec>)
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7fa fd2b 	bl	8001454 <send_text_to_usb>
				send_text_to_usb((char*)"\r\n\0");
 80069fe:	4b47      	ldr	r3, [pc, #284]	; (8006b1c <main+0x8e4>)
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fa fd27 	bl	8001454 <send_text_to_usb>





				at_cmd_send_esp("AT+BLEENC=0,3\r\n\0", "BLESECKEYREQ:0", "ERROR", 5, 0);
 8006a06:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <main+0x83c>)
 8006a08:	4948      	ldr	r1, [pc, #288]	; (8006b2c <main+0x8f4>)
 8006a0a:	4849      	ldr	r0, [pc, #292]	; (8006b30 <main+0x8f8>)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	2305      	movs	r3, #5
 8006a12:	f7fb fc33 	bl	800227c <at_cmd_send_esp>
				HAL_Delay(100);
 8006a16:	2064      	movs	r0, #100	; 0x64
 8006a18:	f001 fc8c 	bl	8008334 <HAL_Delay>

				flush_tx_string();
 8006a1c:	f7fa fd72 	bl	8001504 <flush_tx_string>
				sprintf((char*)tx_string, "AT+BLEKEYREPLY=0,%s\r\n\0", ble_pairing_key);
 8006a20:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <main+0x8fc>)
 8006a22:	4945      	ldr	r1, [pc, #276]	; (8006b38 <main+0x900>)
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <main+0x838>)
 8006a26:	0018      	movs	r0, r3
 8006a28:	f00c fc42 	bl	80132b0 <siprintf>

				_Bool pairing_success_flag=0;
 8006a2c:	245c      	movs	r4, #92	; 0x5c
 8006a2e:	193b      	adds	r3, r7, r4
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]

				if(strstr((char*)meter_model, "923\0"))
 8006a34:	4a41      	ldr	r2, [pc, #260]	; (8006b3c <main+0x904>)
 8006a36:	4b36      	ldr	r3, [pc, #216]	; (8006b10 <main+0x8d8>)
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f00c fc58 	bl	80132f0 <strstr>
 8006a40:	1e03      	subs	r3, r0, #0
 8006a42:	d100      	bne.n	8006a46 <main+0x80e>
 8006a44:	e07e      	b.n	8006b44 <main+0x90c>
				{
					if(at_cmd_send_esp((char*)tx_string, "BLECONNPARAM:0,16", "ERROR", 5, 0))///BLECONNPARAM:0,16
 8006a46:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <main+0x83c>)
 8006a48:	493d      	ldr	r1, [pc, #244]	; (8006b40 <main+0x908>)
 8006a4a:	4809      	ldr	r0, [pc, #36]	; (8006a70 <main+0x838>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2305      	movs	r3, #5
 8006a52:	f7fb fc13 	bl	800227c <at_cmd_send_esp>
 8006a56:	1e03      	subs	r3, r0, #0
 8006a58:	d100      	bne.n	8006a5c <main+0x824>
 8006a5a:	e081      	b.n	8006b60 <main+0x928>
						pairing_success_flag=1;
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	2201      	movs	r2, #1
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	e07d      	b.n	8006b60 <main+0x928>
 8006a64:	200005b4 	.word	0x200005b4
 8006a68:	20000e30 	.word	0x20000e30
 8006a6c:	08015ff4 	.word	0x08015ff4
 8006a70:	20000424 	.word	0x20000424
 8006a74:	08014b24 	.word	0x08014b24
 8006a78:	08014b2c 	.word	0x08014b2c
 8006a7c:	08016004 	.word	0x08016004
 8006a80:	20000e40 	.word	0x20000e40
 8006a84:	08016010 	.word	0x08016010
 8006a88:	08016020 	.word	0x08016020
 8006a8c:	08014d50 	.word	0x08014d50
 8006a90:	0801603c 	.word	0x0801603c
 8006a94:	2000175b 	.word	0x2000175b
 8006a98:	2000175c 	.word	0x2000175c
 8006a9c:	20000028 	.word	0x20000028
 8006aa0:	08014f44 	.word	0x08014f44
 8006aa4:	20000e80 	.word	0x20000e80
 8006aa8:	08014b34 	.word	0x08014b34
 8006aac:	200002f2 	.word	0x200002f2
 8006ab0:	20001769 	.word	0x20001769
 8006ab4:	2000174d 	.word	0x2000174d
 8006ab8:	20000720 	.word	0x20000720
 8006abc:	200006e4 	.word	0x200006e4
 8006ac0:	08016044 	.word	0x08016044
 8006ac4:	2000174e 	.word	0x2000174e
 8006ac8:	08014ffc 	.word	0x08014ffc
 8006acc:	0801605c 	.word	0x0801605c
 8006ad0:	08015000 	.word	0x08015000
 8006ad4:	0801500c 	.word	0x0801500c
 8006ad8:	08016070 	.word	0x08016070
 8006adc:	20001750 	.word	0x20001750
 8006ae0:	20001766 	.word	0x20001766
 8006ae4:	08016078 	.word	0x08016078
 8006ae8:	0801608c 	.word	0x0801608c
 8006aec:	2000077c 	.word	0x2000077c
 8006af0:	080160ac 	.word	0x080160ac
 8006af4:	080160c4 	.word	0x080160c4
 8006af8:	080160d4 	.word	0x080160d4
 8006afc:	080160e4 	.word	0x080160e4
 8006b00:	080160fc 	.word	0x080160fc
 8006b04:	08016114 	.word	0x08016114
 8006b08:	200002f8 	.word	0x200002f8
 8006b0c:	200009fc 	.word	0x200009fc
 8006b10:	20000e00 	.word	0x20000e00
 8006b14:	08015478 	.word	0x08015478
 8006b18:	0801612c 	.word	0x0801612c
 8006b1c:	08015440 	.word	0x08015440
 8006b20:	08016138 	.word	0x08016138
 8006b24:	20000e0c 	.word	0x20000e0c
 8006b28:	08016150 	.word	0x08016150
 8006b2c:	08016160 	.word	0x08016160
 8006b30:	08016170 	.word	0x08016170
 8006b34:	2000075c 	.word	0x2000075c
 8006b38:	08016184 	.word	0x08016184
 8006b3c:	0801619c 	.word	0x0801619c
 8006b40:	080161a4 	.word	0x080161a4
				}
				else/// model 897
				{
					if(at_cmd_send_esp((char*)tx_string, "BLEAUTHCMPL:0,0", "ERROR", 5, 0))
 8006b44:	4ae2      	ldr	r2, [pc, #904]	; (8006ed0 <main+0xc98>)
 8006b46:	49e3      	ldr	r1, [pc, #908]	; (8006ed4 <main+0xc9c>)
 8006b48:	48e3      	ldr	r0, [pc, #908]	; (8006ed8 <main+0xca0>)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2305      	movs	r3, #5
 8006b50:	f7fb fb94 	bl	800227c <at_cmd_send_esp>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d003      	beq.n	8006b60 <main+0x928>
						pairing_success_flag=1;
 8006b58:	235c      	movs	r3, #92	; 0x5c
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
				}

				if(pairing_success_flag)
 8006b60:	235c      	movs	r3, #92	; 0x5c
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d025      	beq.n	8006bb6 <main+0x97e>
				{
					HAL_Delay(100);
 8006b6a:	2064      	movs	r0, #100	; 0x64
 8006b6c:	f001 fbe2 	bl	8008334 <HAL_Delay>
					send_softap_response("+#Device Paired;\r\n\0", 18);
 8006b70:	4bda      	ldr	r3, [pc, #872]	; (8006edc <main+0xca4>)
 8006b72:	2112      	movs	r1, #18
 8006b74:	0018      	movs	r0, r3
 8006b76:	f7fb fdc5 	bl	8002704 <send_softap_response>
					send_text_to_usb((char*)"\r\nDevice Paired\r\n\0");
 8006b7a:	4bd9      	ldr	r3, [pc, #868]	; (8006ee0 <main+0xca8>)
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7fa fc69 	bl	8001454 <send_text_to_usb>
					ble_device_connected_flag = 1;
 8006b82:	4bd8      	ldr	r3, [pc, #864]	; (8006ee4 <main+0xcac>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
					ble_get_data_flag = 1;
 8006b88:	4bd7      	ldr	r3, [pc, #860]	; (8006ee8 <main+0xcb0>)
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]

					meter_sequence_number=0;//// reset sequence number to read records from 0
 8006b8e:	4bd7      	ldr	r3, [pc, #860]	; (8006eec <main+0xcb4>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	801a      	strh	r2, [r3, #0]
					total_downloaded_records_meter=0;///// reset
 8006b94:	4bd6      	ldr	r3, [pc, #856]	; (8006ef0 <main+0xcb8>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	801a      	strh	r2, [r3, #0]
					store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8006b9a:	23c0      	movs	r3, #192	; 0xc0
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7fa fe0a 	bl	80017b8 <store_runtime_parameters_to_flash>
					store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8006ba4:	2380      	movs	r3, #128	; 0x80
 8006ba6:	01db      	lsls	r3, r3, #7
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7fa fe05 	bl	80017b8 <store_runtime_parameters_to_flash>

					beep(1);
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7fb fd7a 	bl	80026a8 <beep>
 8006bb4:	e008      	b.n	8006bc8 <main+0x990>
				}
				else
				{
					send_softap_response("+#Pairing Failed;\r\n\0", 19);
 8006bb6:	4bcf      	ldr	r3, [pc, #828]	; (8006ef4 <main+0xcbc>)
 8006bb8:	2113      	movs	r1, #19
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7fb fda2 	bl	8002704 <send_softap_response>
					send_text_to_usb((char*)"\r\nPairing Failed!\nTry Again\r\n\0");
 8006bc0:	4bcd      	ldr	r3, [pc, #820]	; (8006ef8 <main+0xcc0>)
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fa fc46 	bl	8001454 <send_text_to_usb>
				}
			}

			ble_start_pairing_flag = 0;
 8006bc8:	4bcc      	ldr	r3, [pc, #816]	; (8006efc <main+0xcc4>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]

			green_led_blink_flag=0;
 8006bce:	4bcc      	ldr	r3, [pc, #816]	; (8006f00 <main+0xcc8>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]

		}


		/////SEARCH AND CONNECT TO PAIRED METER
		if(ble_connect_paired_meter_flag)
 8006bd4:	4bcb      	ldr	r3, [pc, #812]	; (8006f04 <main+0xccc>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d100      	bne.n	8006bde <main+0x9a6>
 8006bdc:	e0fa      	b.n	8006dd4 <main+0xb9c>
		{
			sprintf((char*)ble_ssid_name, "BlipGo+%s\0", device_id);
 8006bde:	4aca      	ldr	r2, [pc, #808]	; (8006f08 <main+0xcd0>)
 8006be0:	49ca      	ldr	r1, [pc, #808]	; (8006f0c <main+0xcd4>)
 8006be2:	4bcb      	ldr	r3, [pc, #812]	; (8006f10 <main+0xcd8>)
 8006be4:	0018      	movs	r0, r3
 8006be6:	f00c fb63 	bl	80132b0 <siprintf>

			if(ble_initialize_gatt_client((char*)ble_ssid_name))
 8006bea:	4bc9      	ldr	r3, [pc, #804]	; (8006f10 <main+0xcd8>)
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7fa fcdf 	bl	80015b0 <ble_initialize_gatt_client>
 8006bf2:	1e03      	subs	r3, r0, #0
 8006bf4:	d100      	bne.n	8006bf8 <main+0x9c0>
 8006bf6:	e0e7      	b.n	8006dc8 <main+0xb90>
			{
				ble_get_paired_device();
 8006bf8:	f7fb fa9c 	bl	8002134 <ble_get_paired_device>

				if(ble_paired_device[0]!=0)
 8006bfc:	4bc5      	ldr	r3, [pc, #788]	; (8006f14 <main+0xcdc>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d100      	bne.n	8006c06 <main+0x9ce>
 8006c04:	e0e0      	b.n	8006dc8 <main+0xb90>
				{
					ble_scan_available_device();
 8006c06:	f7fb fab1 	bl	800216c <ble_scan_available_device>

					///// IS AVAILABLE DEVICE PAIRED
					if(ble_is_available_device_paired())
 8006c0a:	f7fb fd1f 	bl	800264c <ble_is_available_device_paired>
 8006c0e:	1e03      	subs	r3, r0, #0
 8006c10:	d100      	bne.n	8006c14 <main+0x9dc>
 8006c12:	e0d9      	b.n	8006dc8 <main+0xb90>
					{
						green_led_blink_flag=1;
 8006c14:	4bba      	ldr	r3, [pc, #744]	; (8006f00 <main+0xcc8>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]

						at_cmd_send_esp("AT+BLESECPARAM=13,4,16,3,3\r\n\0", "OK\r\n", "ERROR", 5, 0);
 8006c1a:	4aad      	ldr	r2, [pc, #692]	; (8006ed0 <main+0xc98>)
 8006c1c:	49be      	ldr	r1, [pc, #760]	; (8006f18 <main+0xce0>)
 8006c1e:	48bf      	ldr	r0, [pc, #764]	; (8006f1c <main+0xce4>)
 8006c20:	2300      	movs	r3, #0
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2305      	movs	r3, #5
 8006c26:	f7fb fb29 	bl	800227c <at_cmd_send_esp>

						flush_tx_string();
 8006c2a:	f7fa fc6b 	bl	8001504 <flush_tx_string>
						sprintf((char*)tx_string, "AT+BLECONN=0,\"%s\"\r\n\0", ble_available_device);
 8006c2e:	4abc      	ldr	r2, [pc, #752]	; (8006f20 <main+0xce8>)
 8006c30:	49bc      	ldr	r1, [pc, #752]	; (8006f24 <main+0xcec>)
 8006c32:	4ba9      	ldr	r3, [pc, #676]	; (8006ed8 <main+0xca0>)
 8006c34:	0018      	movs	r0, r3
 8006c36:	f00c fb3b 	bl	80132b0 <siprintf>

						///+BLECONN:0,"9c:1d:58:9c:06:1e"
						unsigned char connection_success_resposne[30] = {0};
 8006c3a:	2408      	movs	r4, #8
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	3304      	adds	r3, #4
 8006c44:	221a      	movs	r2, #26
 8006c46:	2100      	movs	r1, #0
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f00c f89b 	bl	8012d84 <memset>
						sprintf((char*)connection_success_resposne, "BLECONN:0,\"%s\"", ble_available_device);
 8006c4e:	4ab4      	ldr	r2, [pc, #720]	; (8006f20 <main+0xce8>)
 8006c50:	49b5      	ldr	r1, [pc, #724]	; (8006f28 <main+0xcf0>)
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	0018      	movs	r0, r3
 8006c56:	f00c fb2b 	bl	80132b0 <siprintf>

						at_cmd_send_esp((char*)tx_string, (char*)connection_success_resposne, "BLECONN:0,-1\r\n", 20, 0);
 8006c5a:	4ab4      	ldr	r2, [pc, #720]	; (8006f2c <main+0xcf4>)
 8006c5c:	1939      	adds	r1, r7, r4
 8006c5e:	489e      	ldr	r0, [pc, #632]	; (8006ed8 <main+0xca0>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2314      	movs	r3, #20
 8006c66:	f7fb fb09 	bl	800227c <at_cmd_send_esp>
						HAL_Delay(100);
 8006c6a:	2064      	movs	r0, #100	; 0x64
 8006c6c:	f001 fb62 	bl	8008334 <HAL_Delay>


						at_cmd_send_esp("AT+BLEGATTCPRIMSRV=0\r\n\0", "OK\r\n", "ERROR", 5, 0);///////primary services
 8006c70:	4a97      	ldr	r2, [pc, #604]	; (8006ed0 <main+0xc98>)
 8006c72:	49a9      	ldr	r1, [pc, #676]	; (8006f18 <main+0xce0>)
 8006c74:	48ae      	ldr	r0, [pc, #696]	; (8006f30 <main+0xcf8>)
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	2305      	movs	r3, #5
 8006c7c:	f7fb fafe 	bl	800227c <at_cmd_send_esp>

						at_cmd_send_esp("AT+BLEGATTCCHAR=0,3\r\n\0", "OK\r\n", "ERROR", 5, 0);//// device information service
 8006c80:	4a93      	ldr	r2, [pc, #588]	; (8006ed0 <main+0xc98>)
 8006c82:	49a5      	ldr	r1, [pc, #660]	; (8006f18 <main+0xce0>)
 8006c84:	48ab      	ldr	r0, [pc, #684]	; (8006f34 <main+0xcfc>)
 8006c86:	2300      	movs	r3, #0
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	f7fb faf6 	bl	800227c <at_cmd_send_esp>

						at_cmd_send_esp("AT+BLEGATTCRD=0,3,2\r\n\0", "OK\r\n", "ERROR", 2, 0);///// model number
 8006c90:	4a8f      	ldr	r2, [pc, #572]	; (8006ed0 <main+0xc98>)
 8006c92:	49a1      	ldr	r1, [pc, #644]	; (8006f18 <main+0xce0>)
 8006c94:	48a8      	ldr	r0, [pc, #672]	; (8006f38 <main+0xd00>)
 8006c96:	2300      	movs	r3, #0
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	f7fb faee 	bl	800227c <at_cmd_send_esp>

						explode_string(rx_string_esp,300,2,',','\r',10,'\n');
 8006ca0:	2396      	movs	r3, #150	; 0x96
 8006ca2:	0059      	lsls	r1, r3, #1
 8006ca4:	48a5      	ldr	r0, [pc, #660]	; (8006f3c <main+0xd04>)
 8006ca6:	230a      	movs	r3, #10
 8006ca8:	9302      	str	r3, [sp, #8]
 8006caa:	230a      	movs	r3, #10
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	230d      	movs	r3, #13
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	232c      	movs	r3, #44	; 0x2c
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f7fa ff7f 	bl	8001bb8 <explode_string>
						if(temp_data[0]!=0)
 8006cba:	4ba1      	ldr	r3, [pc, #644]	; (8006f40 <main+0xd08>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <main+0xaa0>
						{
							flush_array((char*)meter_model, 10);
 8006cc2:	4ba0      	ldr	r3, [pc, #640]	; (8006f44 <main+0xd0c>)
 8006cc4:	210a      	movs	r1, #10
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7fa fbf8 	bl	80014bc <flush_array>
							sprintf((char*)meter_model, "%s\0", temp_data);
 8006ccc:	4a9c      	ldr	r2, [pc, #624]	; (8006f40 <main+0xd08>)
 8006cce:	499e      	ldr	r1, [pc, #632]	; (8006f48 <main+0xd10>)
 8006cd0:	4b9c      	ldr	r3, [pc, #624]	; (8006f44 <main+0xd0c>)
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f00c faec 	bl	80132b0 <siprintf>
						}
						send_text_to_usb((char*)"\r\nModel: \0");
 8006cd8:	4b9c      	ldr	r3, [pc, #624]	; (8006f4c <main+0xd14>)
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7fa fbba 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)meter_model);
 8006ce0:	4b98      	ldr	r3, [pc, #608]	; (8006f44 <main+0xd0c>)
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f7fa fbb6 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)"\r\n\0");
 8006ce8:	4b99      	ldr	r3, [pc, #612]	; (8006f50 <main+0xd18>)
 8006cea:	0018      	movs	r0, r3
 8006cec:	f7fa fbb2 	bl	8001454 <send_text_to_usb>


						at_cmd_send_esp("AT+BLEGATTCRD=0,3,3\r\n\0", "OK\r\n", "ERROR", 2, 0);//// serial number
 8006cf0:	4a77      	ldr	r2, [pc, #476]	; (8006ed0 <main+0xc98>)
 8006cf2:	4989      	ldr	r1, [pc, #548]	; (8006f18 <main+0xce0>)
 8006cf4:	4897      	ldr	r0, [pc, #604]	; (8006f54 <main+0xd1c>)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	f7fb fabe 	bl	800227c <at_cmd_send_esp>

						explode_string(rx_string_esp,300,2,',','\r',20,'\n');
 8006d00:	2396      	movs	r3, #150	; 0x96
 8006d02:	0059      	lsls	r1, r3, #1
 8006d04:	488d      	ldr	r0, [pc, #564]	; (8006f3c <main+0xd04>)
 8006d06:	230a      	movs	r3, #10
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	2314      	movs	r3, #20
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	230d      	movs	r3, #13
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	232c      	movs	r3, #44	; 0x2c
 8006d14:	2202      	movs	r2, #2
 8006d16:	f7fa ff4f 	bl	8001bb8 <explode_string>
						if(temp_data[0]!=0)
 8006d1a:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <main+0xd08>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <main+0xb00>
						{
							flush_array((char*)meter_serial_no, 20);
 8006d22:	4b8d      	ldr	r3, [pc, #564]	; (8006f58 <main+0xd20>)
 8006d24:	2114      	movs	r1, #20
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fa fbc8 	bl	80014bc <flush_array>
							sprintf((char*)meter_serial_no, "%s\0", temp_data);
 8006d2c:	4a84      	ldr	r2, [pc, #528]	; (8006f40 <main+0xd08>)
 8006d2e:	4986      	ldr	r1, [pc, #536]	; (8006f48 <main+0xd10>)
 8006d30:	4b89      	ldr	r3, [pc, #548]	; (8006f58 <main+0xd20>)
 8006d32:	0018      	movs	r0, r3
 8006d34:	f00c fabc 	bl	80132b0 <siprintf>
						}
						send_text_to_usb((char*)"\r\nMeter SN: \0");
 8006d38:	4b88      	ldr	r3, [pc, #544]	; (8006f5c <main+0xd24>)
 8006d3a:	0018      	movs	r0, r3
 8006d3c:	f7fa fb8a 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)meter_serial_no);
 8006d40:	4b85      	ldr	r3, [pc, #532]	; (8006f58 <main+0xd20>)
 8006d42:	0018      	movs	r0, r3
 8006d44:	f7fa fb86 	bl	8001454 <send_text_to_usb>
						send_text_to_usb((char*)"\r\n\0");
 8006d48:	4b81      	ldr	r3, [pc, #516]	; (8006f50 <main+0xd18>)
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f7fa fb82 	bl	8001454 <send_text_to_usb>



						_Bool connected_flag=0;
 8006d50:	245b      	movs	r4, #91	; 0x5b
 8006d52:	193b      	adds	r3, r7, r4
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]

						if(strstr((char*)meter_model, "923\0"))
 8006d58:	4a81      	ldr	r2, [pc, #516]	; (8006f60 <main+0xd28>)
 8006d5a:	4b7a      	ldr	r3, [pc, #488]	; (8006f44 <main+0xd0c>)
 8006d5c:	0011      	movs	r1, r2
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f00c fac6 	bl	80132f0 <strstr>
 8006d64:	1e03      	subs	r3, r0, #0
 8006d66:	d00d      	beq.n	8006d84 <main+0xb4c>
						{
							if(at_cmd_send_esp("AT+BLEENC=0,3\r\n\0", "BLECONNPARAM:0,16", "ERROR", 5, 0))
 8006d68:	4a59      	ldr	r2, [pc, #356]	; (8006ed0 <main+0xc98>)
 8006d6a:	497e      	ldr	r1, [pc, #504]	; (8006f64 <main+0xd2c>)
 8006d6c:	487e      	ldr	r0, [pc, #504]	; (8006f68 <main+0xd30>)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	2305      	movs	r3, #5
 8006d74:	f7fb fa82 	bl	800227c <at_cmd_send_esp>
 8006d78:	1e03      	subs	r3, r0, #0
 8006d7a:	d011      	beq.n	8006da0 <main+0xb68>
								connected_flag=1;
 8006d7c:	193b      	adds	r3, r7, r4
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	e00d      	b.n	8006da0 <main+0xb68>
						}
						else/// model 897
						{
							if(at_cmd_send_esp("AT+BLEENC=0,3\r\n\0", "OK\r\n", "ERROR", 5, 0))
 8006d84:	4a52      	ldr	r2, [pc, #328]	; (8006ed0 <main+0xc98>)
 8006d86:	4964      	ldr	r1, [pc, #400]	; (8006f18 <main+0xce0>)
 8006d88:	4877      	ldr	r0, [pc, #476]	; (8006f68 <main+0xd30>)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2305      	movs	r3, #5
 8006d90:	f7fb fa74 	bl	800227c <at_cmd_send_esp>
 8006d94:	1e03      	subs	r3, r0, #0
 8006d96:	d003      	beq.n	8006da0 <main+0xb68>
								connected_flag=1;
 8006d98:	235b      	movs	r3, #91	; 0x5b
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	701a      	strb	r2, [r3, #0]
						}


						if(connected_flag)//BLECONNPARAM:0,16
 8006da0:	235b      	movs	r3, #91	; 0x5b
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <main+0xb8a>
						{
							HAL_Delay(100);
 8006daa:	2064      	movs	r0, #100	; 0x64
 8006dac:	f001 fac2 	bl	8008334 <HAL_Delay>
							ble_device_connected_flag = 1;
 8006db0:	4b4c      	ldr	r3, [pc, #304]	; (8006ee4 <main+0xcac>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
							ble_get_data_flag = 1;
 8006db6:	4b4c      	ldr	r3, [pc, #304]	; (8006ee8 <main+0xcb0>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	701a      	strb	r2, [r3, #0]
							beep(1);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f7fb fc73 	bl	80026a8 <beep>
						}

						green_led_blink_flag=0;
 8006dc2:	4b4f      	ldr	r3, [pc, #316]	; (8006f00 <main+0xcc8>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			check_paired_device_timer = 0;
 8006dc8:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <main+0xd34>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	801a      	strh	r2, [r3, #0]
			ble_connect_paired_meter_flag = 0;
 8006dce:	4b4d      	ldr	r3, [pc, #308]	; (8006f04 <main+0xccc>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	701a      	strb	r2, [r3, #0]

		}


		//// GET DATA FROM METER
		if(ble_get_data_flag && ble_device_connected_flag)
 8006dd4:	4b44      	ldr	r3, [pc, #272]	; (8006ee8 <main+0xcb0>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d100      	bne.n	8006dde <main+0xba6>
 8006ddc:	e334      	b.n	8007448 <main+0x1210>
 8006dde:	4b41      	ldr	r3, [pc, #260]	; (8006ee4 <main+0xcac>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d100      	bne.n	8006de8 <main+0xbb0>
 8006de6:	e32f      	b.n	8007448 <main+0x1210>
		{

			green_led_blink_flag=1;
 8006de8:	4b45      	ldr	r3, [pc, #276]	; (8006f00 <main+0xcc8>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]

			at_cmd_send_esp("AT+BLEGATTCPRIMSRV=0\r\n\0", "OK\r\n", "ERROR", 5, 0);///////primary services
 8006dee:	4a38      	ldr	r2, [pc, #224]	; (8006ed0 <main+0xc98>)
 8006df0:	4949      	ldr	r1, [pc, #292]	; (8006f18 <main+0xce0>)
 8006df2:	484f      	ldr	r0, [pc, #316]	; (8006f30 <main+0xcf8>)
 8006df4:	2300      	movs	r3, #0
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	2305      	movs	r3, #5
 8006dfa:	f7fb fa3f 	bl	800227c <at_cmd_send_esp>


			at_cmd_send_esp("AT+BLEGATTCCHAR=0,2\r\n\0", "OK\r\n", "ERROR", 5, 0);
 8006dfe:	4a34      	ldr	r2, [pc, #208]	; (8006ed0 <main+0xc98>)
 8006e00:	4945      	ldr	r1, [pc, #276]	; (8006f18 <main+0xce0>)
 8006e02:	485b      	ldr	r0, [pc, #364]	; (8006f70 <main+0xd38>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	2305      	movs	r3, #5
 8006e0a:	f7fb fa37 	bl	800227c <at_cmd_send_esp>

			at_cmd_send_esp("AT+BLEGATTCWR=0,2,1,1,2\r\n\0", ">", "ERROR", 5, 0);
 8006e0e:	4a30      	ldr	r2, [pc, #192]	; (8006ed0 <main+0xc98>)
 8006e10:	4958      	ldr	r1, [pc, #352]	; (8006f74 <main+0xd3c>)
 8006e12:	4859      	ldr	r0, [pc, #356]	; (8006f78 <main+0xd40>)
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2305      	movs	r3, #5
 8006e1a:	f7fb fa2f 	bl	800227c <at_cmd_send_esp>
			at_cmd_send_esp("1\r\n\0", "OK\r\n", "ERROR", 2, 0);
 8006e1e:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <main+0xc98>)
 8006e20:	493d      	ldr	r1, [pc, #244]	; (8006f18 <main+0xce0>)
 8006e22:	4856      	ldr	r0, [pc, #344]	; (8006f7c <main+0xd44>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	f7fb fa27 	bl	800227c <at_cmd_send_esp>

			if(strstr((char*)meter_model, "923\0"))
 8006e2e:	4a4c      	ldr	r2, [pc, #304]	; (8006f60 <main+0xd28>)
 8006e30:	4b44      	ldr	r3, [pc, #272]	; (8006f44 <main+0xd0c>)
 8006e32:	0011      	movs	r1, r2
 8006e34:	0018      	movs	r0, r3
 8006e36:	f00c fa5b 	bl	80132f0 <strstr>
 8006e3a:	1e03      	subs	r3, r0, #0
 8006e3c:	d020      	beq.n	8006e80 <main+0xc48>
			{
				at_cmd_send_esp("AT+BLEGATTCWR=0,2,2,1,2\r\n\0", ">", "ERROR", 5, 0);
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <main+0xc98>)
 8006e40:	494c      	ldr	r1, [pc, #304]	; (8006f74 <main+0xd3c>)
 8006e42:	484f      	ldr	r0, [pc, #316]	; (8006f80 <main+0xd48>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	2305      	movs	r3, #5
 8006e4a:	f7fb fa17 	bl	800227c <at_cmd_send_esp>
				at_cmd_send_esp("1\r\n\0", "OK\r\n", "ERROR", 2, 0);
 8006e4e:	4a20      	ldr	r2, [pc, #128]	; (8006ed0 <main+0xc98>)
 8006e50:	4931      	ldr	r1, [pc, #196]	; (8006f18 <main+0xce0>)
 8006e52:	484a      	ldr	r0, [pc, #296]	; (8006f7c <main+0xd44>)
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f7fb fa0f 	bl	800227c <at_cmd_send_esp>

				at_cmd_send_esp("AT+BLEGATTCWR=0,2,4,1,2\r\n\0", ">", "ERROR", 5, 0);
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <main+0xc98>)
 8006e60:	4944      	ldr	r1, [pc, #272]	; (8006f74 <main+0xd3c>)
 8006e62:	4848      	ldr	r0, [pc, #288]	; (8006f84 <main+0xd4c>)
 8006e64:	2300      	movs	r3, #0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2305      	movs	r3, #5
 8006e6a:	f7fb fa07 	bl	800227c <at_cmd_send_esp>
				at_cmd_send_esp("2\r\n\0", "OK\r\n", "ERROR", 2, 0);
 8006e6e:	4a18      	ldr	r2, [pc, #96]	; (8006ed0 <main+0xc98>)
 8006e70:	4929      	ldr	r1, [pc, #164]	; (8006f18 <main+0xce0>)
 8006e72:	4845      	ldr	r0, [pc, #276]	; (8006f88 <main+0xd50>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f7fb f9ff 	bl	800227c <at_cmd_send_esp>
 8006e7e:	e00f      	b.n	8006ea0 <main+0xc68>
			}
			else//// model 897
			{
				at_cmd_send_esp("AT+BLEGATTCWR=0,2,3,1,2\r\n\0", ">", "ERROR", 5, 0);
 8006e80:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <main+0xc98>)
 8006e82:	493c      	ldr	r1, [pc, #240]	; (8006f74 <main+0xd3c>)
 8006e84:	4841      	ldr	r0, [pc, #260]	; (8006f8c <main+0xd54>)
 8006e86:	2300      	movs	r3, #0
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	2305      	movs	r3, #5
 8006e8c:	f7fb f9f6 	bl	800227c <at_cmd_send_esp>
				at_cmd_send_esp("2\r\n\0", "OK\r\n", "ERROR", 2, 0);
 8006e90:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <main+0xc98>)
 8006e92:	4921      	ldr	r1, [pc, #132]	; (8006f18 <main+0xce0>)
 8006e94:	483c      	ldr	r0, [pc, #240]	; (8006f88 <main+0xd50>)
 8006e96:	2300      	movs	r3, #0
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	f7fb f9ee 	bl	800227c <at_cmd_send_esp>
//			HAL_Delay(500);

//			at_cmd_send_esp("AT+BLEGATTCRD=0,2,4,1\r\n\0", "OK\r\n", "ERROR", 2, 0);
//			HAL_Delay(500);

			char_total_record[0] = 0;//M
 8006ea0:	4b3b      	ldr	r3, [pc, #236]	; (8006f90 <main+0xd58>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
			char_total_record[1] = 0;//00
 8006ea6:	4b3a      	ldr	r3, [pc, #232]	; (8006f90 <main+0xd58>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	705a      	strb	r2, [r3, #1]

			if(strstr((char*)meter_model, "923\0"))
 8006eac:	4a2c      	ldr	r2, [pc, #176]	; (8006f60 <main+0xd28>)
 8006eae:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <main+0xd0c>)
 8006eb0:	0011      	movs	r1, r2
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f00c fa1c 	bl	80132f0 <strstr>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d06d      	beq.n	8006f98 <main+0xd60>
			{
				at_cmd_send_esp("AT+BLEGATTCWR=0,2,4,,2\r\n\0", ">", "ERROR", 2, 0);
 8006ebc:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <main+0xc98>)
 8006ebe:	492d      	ldr	r1, [pc, #180]	; (8006f74 <main+0xd3c>)
 8006ec0:	4834      	ldr	r0, [pc, #208]	; (8006f94 <main+0xd5c>)
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	f7fb f9d8 	bl	800227c <at_cmd_send_esp>
 8006ecc:	e06c      	b.n	8006fa8 <main+0xd70>
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	08014b24 	.word	0x08014b24
 8006ed4:	080161b8 	.word	0x080161b8
 8006ed8:	20000424 	.word	0x20000424
 8006edc:	080161c8 	.word	0x080161c8
 8006ee0:	080161dc 	.word	0x080161dc
 8006ee4:	20001751 	.word	0x20001751
 8006ee8:	20001752 	.word	0x20001752
 8006eec:	200002ea 	.word	0x200002ea
 8006ef0:	200002ec 	.word	0x200002ec
 8006ef4:	080161f0 	.word	0x080161f0
 8006ef8:	08016208 	.word	0x08016208
 8006efc:	20001750 	.word	0x20001750
 8006f00:	20001766 	.word	0x20001766
 8006f04:	20001753 	.word	0x20001753
 8006f08:	20000028 	.word	0x20000028
 8006f0c:	08014f44 	.word	0x08014f44
 8006f10:	20000e80 	.word	0x20000e80
 8006f14:	20000768 	.word	0x20000768
 8006f18:	08014b2c 	.word	0x08014b2c
 8006f1c:	08016228 	.word	0x08016228
 8006f20:	2000077c 	.word	0x2000077c
 8006f24:	080160ac 	.word	0x080160ac
 8006f28:	080160c4 	.word	0x080160c4
 8006f2c:	080160d4 	.word	0x080160d4
 8006f30:	080160e4 	.word	0x080160e4
 8006f34:	080160fc 	.word	0x080160fc
 8006f38:	08016114 	.word	0x08016114
 8006f3c:	200002f8 	.word	0x200002f8
 8006f40:	200009fc 	.word	0x200009fc
 8006f44:	20000e00 	.word	0x20000e00
 8006f48:	08015478 	.word	0x08015478
 8006f4c:	0801612c 	.word	0x0801612c
 8006f50:	08015440 	.word	0x08015440
 8006f54:	08016138 	.word	0x08016138
 8006f58:	20000e0c 	.word	0x20000e0c
 8006f5c:	08016150 	.word	0x08016150
 8006f60:	0801619c 	.word	0x0801619c
 8006f64:	080161a4 	.word	0x080161a4
 8006f68:	08016170 	.word	0x08016170
 8006f6c:	200002e6 	.word	0x200002e6
 8006f70:	08016248 	.word	0x08016248
 8006f74:	08014ffc 	.word	0x08014ffc
 8006f78:	08016260 	.word	0x08016260
 8006f7c:	0801627c 	.word	0x0801627c
 8006f80:	08016284 	.word	0x08016284
 8006f84:	080162a0 	.word	0x080162a0
 8006f88:	080162bc 	.word	0x080162bc
 8006f8c:	080162c4 	.word	0x080162c4
 8006f90:	200006e0 	.word	0x200006e0
 8006f94:	080162e0 	.word	0x080162e0
			}
			else//model 897
			{
				at_cmd_send_esp("AT+BLEGATTCWR=0,2,3,,2\r\n\0", ">", "ERROR", 2, 0);
 8006f98:	4ad6      	ldr	r2, [pc, #856]	; (80072f4 <main+0x10bc>)
 8006f9a:	49d7      	ldr	r1, [pc, #860]	; (80072f8 <main+0x10c0>)
 8006f9c:	48d7      	ldr	r0, [pc, #860]	; (80072fc <main+0x10c4>)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	f7fb f96a 	bl	800227c <at_cmd_send_esp>
			}


			flush_tx_string();
 8006fa8:	f7fa faac 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "%c%c\0",4, 1);
 8006fac:	49d4      	ldr	r1, [pc, #848]	; (8007300 <main+0x10c8>)
 8006fae:	48d5      	ldr	r0, [pc, #852]	; (8007304 <main+0x10cc>)
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	f00c f97c 	bl	80132b0 <siprintf>
			send_text_to_uart1(tx_string);
 8006fb8:	4bd2      	ldr	r3, [pc, #840]	; (8007304 <main+0x10cc>)
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7fa f9de 	bl	800137c <send_text_to_uart1>
			HAL_Delay(500);
 8006fc0:	23fa      	movs	r3, #250	; 0xfa
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f001 f9b5 	bl	8008334 <HAL_Delay>

			total_records_meter = char_total_record[0] | (char_total_record[1] << 8);
 8006fca:	4bcf      	ldr	r3, [pc, #828]	; (8007308 <main+0x10d0>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b21a      	sxth	r2, r3
 8006fd0:	4bcd      	ldr	r3, [pc, #820]	; (8007308 <main+0x10d0>)
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	021b      	lsls	r3, r3, #8
 8006fd6:	b21b      	sxth	r3, r3
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	4bcb      	ldr	r3, [pc, #812]	; (800730c <main+0x10d4>)
 8006fe0:	801a      	strh	r2, [r3, #0]

			flush_tx_string();
 8006fe2:	f7fa fa8f 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "Total records : %u\r\n\0", total_records_meter);
 8006fe6:	4bc9      	ldr	r3, [pc, #804]	; (800730c <main+0x10d4>)
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	001a      	movs	r2, r3
 8006fec:	49c8      	ldr	r1, [pc, #800]	; (8007310 <main+0x10d8>)
 8006fee:	4bc5      	ldr	r3, [pc, #788]	; (8007304 <main+0x10cc>)
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f00c f95d 	bl	80132b0 <siprintf>
			send_text_to_usb((char*)tx_string);
 8006ff6:	4bc3      	ldr	r3, [pc, #780]	; (8007304 <main+0x10cc>)
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7fa fa2b 	bl	8001454 <send_text_to_usb>

			/////// LABEL
			FETCH_METER_RECORDS:

			row = 0;
 8006ffe:	4bc5      	ldr	r3, [pc, #788]	; (8007314 <main+0x10dc>)
 8007000:	2200      	movs	r2, #0
 8007002:	801a      	strh	r2, [r3, #0]

			//// ERASE LOGS VARIABLE
			for(uint8_t i=0; i<100; i++)
 8007004:	235a      	movs	r3, #90	; 0x5a
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	e021      	b.n	8007052 <main+0xe1a>
			{
				for(uint8_t j=0; j<17; j++)
 800700e:	2359      	movs	r3, #89	; 0x59
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e011      	b.n	800703c <main+0xe04>
				{
					meter_records[i][j] = 0;
 8007018:	235a      	movs	r3, #90	; 0x5a
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	2459      	movs	r4, #89	; 0x59
 8007020:	193b      	adds	r3, r7, r4
 8007022:	7819      	ldrb	r1, [r3, #0]
 8007024:	48bc      	ldr	r0, [pc, #752]	; (8007318 <main+0x10e0>)
 8007026:	0013      	movs	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	189b      	adds	r3, r3, r2
 800702c:	18c3      	adds	r3, r0, r3
 800702e:	2200      	movs	r2, #0
 8007030:	545a      	strb	r2, [r3, r1]
				for(uint8_t j=0; j<17; j++)
 8007032:	193b      	adds	r3, r7, r4
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	193b      	adds	r3, r7, r4
 8007038:	3201      	adds	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	2359      	movs	r3, #89	; 0x59
 800703e:	18fb      	adds	r3, r7, r3
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b10      	cmp	r3, #16
 8007044:	d9e8      	bls.n	8007018 <main+0xde0>
			for(uint8_t i=0; i<100; i++)
 8007046:	215a      	movs	r1, #90	; 0x5a
 8007048:	187b      	adds	r3, r7, r1
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	187b      	adds	r3, r7, r1
 800704e:	3201      	adds	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	235a      	movs	r3, #90	; 0x5a
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b63      	cmp	r3, #99	; 0x63
 800705a:	d9d8      	bls.n	800700e <main+0xdd6>
				}
			}

			/////Sequence number conversion into char[2]
			uint16_t meter_starting_sequence_number = 0, meter_ending_sequence_number = 0;
 800705c:	2156      	movs	r1, #86	; 0x56
 800705e:	187b      	adds	r3, r7, r1
 8007060:	2200      	movs	r2, #0
 8007062:	801a      	strh	r2, [r3, #0]
 8007064:	2350      	movs	r3, #80	; 0x50
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	2200      	movs	r2, #0
 800706a:	801a      	strh	r2, [r3, #0]

			if(meter_sequence_number!=0)
 800706c:	4bab      	ldr	r3, [pc, #684]	; (800731c <main+0x10e4>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <main+0xe46>
			{
				meter_starting_sequence_number = meter_sequence_number+1;
 8007074:	4ba9      	ldr	r3, [pc, #676]	; (800731c <main+0x10e4>)
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	187b      	adds	r3, r7, r1
 800707a:	3201      	adds	r2, #1
 800707c:	801a      	strh	r2, [r3, #0]
			}

			meter_ending_sequence_number = meter_starting_sequence_number + 99;///// 100 records max
 800707e:	2150      	movs	r1, #80	; 0x50
 8007080:	187b      	adds	r3, r7, r1
 8007082:	2056      	movs	r0, #86	; 0x56
 8007084:	183a      	adds	r2, r7, r0
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	3263      	adds	r2, #99	; 0x63
 800708a:	801a      	strh	r2, [r3, #0]


			unsigned char meter_sequence_char[2] = {0}, meter_sequence_char2[2] = {0};
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	2200      	movs	r2, #0
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	003b      	movs	r3, r7
 8007094:	2200      	movs	r2, #0
 8007096:	801a      	strh	r2, [r3, #0]
			meter_sequence_char[0] = meter_starting_sequence_number & 0xFF;
 8007098:	183b      	adds	r3, r7, r0
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b2da      	uxtb	r2, r3
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	701a      	strb	r2, [r3, #0]
			meter_sequence_char[1] = meter_starting_sequence_number >> 8;
 80070a2:	183b      	adds	r3, r7, r0
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	0a1b      	lsrs	r3, r3, #8
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	705a      	strb	r2, [r3, #1]

			meter_sequence_char2[0] = meter_ending_sequence_number & 0xFF;
 80070b0:	187b      	adds	r3, r7, r1
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	003b      	movs	r3, r7
 80070b8:	701a      	strb	r2, [r3, #0]
			meter_sequence_char2[1] = meter_ending_sequence_number >> 8;
 80070ba:	187b      	adds	r3, r7, r1
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	003b      	movs	r3, r7
 80070c6:	705a      	strb	r2, [r3, #1]

			uint8_t racp_opcode = 0x01, racp_operator = 0x04, racp_filter = 0x01;
 80070c8:	234f      	movs	r3, #79	; 0x4f
 80070ca:	18fb      	adds	r3, r7, r3
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	234e      	movs	r3, #78	; 0x4e
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	2204      	movs	r2, #4
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	234d      	movs	r3, #77	; 0x4d
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	2201      	movs	r2, #1
 80070de:	701a      	strb	r2, [r3, #0]
			uint16_t number_of_bytes = 7;///// number of bytes of racp command
 80070e0:	244a      	movs	r4, #74	; 0x4a
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	2207      	movs	r2, #7
 80070e6:	801a      	strh	r2, [r3, #0]

			flush_tx_string();
 80070e8:	f7fa fa0c 	bl	8001504 <flush_tx_string>
			if(strstr((char*)meter_model, "923\0"))
 80070ec:	4a8c      	ldr	r2, [pc, #560]	; (8007320 <main+0x10e8>)
 80070ee:	4b8d      	ldr	r3, [pc, #564]	; (8007324 <main+0x10ec>)
 80070f0:	0011      	movs	r1, r2
 80070f2:	0018      	movs	r0, r3
 80070f4:	f00c f8fc 	bl	80132f0 <strstr>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d007      	beq.n	800710c <main+0xed4>
			{
				sprintf((char*)tx_string, "AT+BLEGATTCWR=0,2,4,,%u\r\n\0" , number_of_bytes);
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	881a      	ldrh	r2, [r3, #0]
 8007100:	4989      	ldr	r1, [pc, #548]	; (8007328 <main+0x10f0>)
 8007102:	4b80      	ldr	r3, [pc, #512]	; (8007304 <main+0x10cc>)
 8007104:	0018      	movs	r0, r3
 8007106:	f00c f8d3 	bl	80132b0 <siprintf>
 800710a:	e007      	b.n	800711c <main+0xee4>
			}
			else///model 897
			{
				sprintf((char*)tx_string, "AT+BLEGATTCWR=0,2,3,,%u\r\n\0" , number_of_bytes);
 800710c:	234a      	movs	r3, #74	; 0x4a
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	4986      	ldr	r1, [pc, #536]	; (800732c <main+0x10f4>)
 8007114:	4b7b      	ldr	r3, [pc, #492]	; (8007304 <main+0x10cc>)
 8007116:	0018      	movs	r0, r3
 8007118:	f00c f8ca 	bl	80132b0 <siprintf>
			}

			at_cmd_send_esp((char*)tx_string, ">", "ERROR", 2, 0);////// 7 bytes to send
 800711c:	4a75      	ldr	r2, [pc, #468]	; (80072f4 <main+0x10bc>)
 800711e:	4976      	ldr	r1, [pc, #472]	; (80072f8 <main+0x10c0>)
 8007120:	4878      	ldr	r0, [pc, #480]	; (8007304 <main+0x10cc>)
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2302      	movs	r3, #2
 8007128:	f7fb f8a8 	bl	800227c <at_cmd_send_esp>

			flush_tx_string();
 800712c:	f7fa f9ea 	bl	8001504 <flush_tx_string>
			//// 01-01  for all records, 01-03-01-28-00 for record greater than or equal to (03) sequence number (01) 40 ( 28-00 )
			///// 01-02-01-28-00   for record less than or equal to (02) sequence number (01) 40 (28-00)

			//sprintf((char*)tx_string, "%c%c%c%c%c\0",racp_opcode, racp_operator, racp_filter, meter_sequence_char[0], meter_sequence_char[1]);//// last char is 0x00 so functions will not work, need to write code in this case

			sprintf((char*)tx_string, "%c%c%c%c%c%c%c\0",racp_opcode, racp_operator, racp_filter, meter_sequence_char[0], meter_sequence_char[1],meter_sequence_char2[0], meter_sequence_char2[1]);
 8007130:	234f      	movs	r3, #79	; 0x4f
 8007132:	18fb      	adds	r3, r7, r3
 8007134:	781c      	ldrb	r4, [r3, #0]
 8007136:	234e      	movs	r3, #78	; 0x4e
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	781d      	ldrb	r5, [r3, #0]
 800713c:	234d      	movs	r3, #77	; 0x4d
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	1d3a      	adds	r2, r7, #4
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	0016      	movs	r6, r2
 8007148:	1d3a      	adds	r2, r7, #4
 800714a:	7852      	ldrb	r2, [r2, #1]
 800714c:	4694      	mov	ip, r2
 800714e:	003a      	movs	r2, r7
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	4690      	mov	r8, r2
 8007154:	003a      	movs	r2, r7
 8007156:	7852      	ldrb	r2, [r2, #1]
 8007158:	4975      	ldr	r1, [pc, #468]	; (8007330 <main+0x10f8>)
 800715a:	486a      	ldr	r0, [pc, #424]	; (8007304 <main+0x10cc>)
 800715c:	9204      	str	r2, [sp, #16]
 800715e:	4642      	mov	r2, r8
 8007160:	9203      	str	r2, [sp, #12]
 8007162:	4662      	mov	r2, ip
 8007164:	9202      	str	r2, [sp, #8]
 8007166:	9601      	str	r6, [sp, #4]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	002b      	movs	r3, r5
 800716c:	0022      	movs	r2, r4
 800716e:	f00c f89f 	bl	80132b0 <siprintf>


			//////AT function
			wait_ms(300);
 8007172:	2396      	movs	r3, #150	; 0x96
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	0018      	movs	r0, r3
 8007178:	f7fa f9d8 	bl	800152c <wait_ms>
			flush_array((char*)rx_string_esp, 300);
 800717c:	2396      	movs	r3, #150	; 0x96
 800717e:	005a      	lsls	r2, r3, #1
 8007180:	4b6c      	ldr	r3, [pc, #432]	; (8007334 <main+0x10fc>)
 8007182:	0011      	movs	r1, r2
 8007184:	0018      	movs	r0, r3
 8007186:	f7fa f999 	bl	80014bc <flush_array>
			rx_esp_counter = 0;
 800718a:	4b6b      	ldr	r3, [pc, #428]	; (8007338 <main+0x1100>)
 800718c:	2200      	movs	r2, #0
 800718e:	801a      	strh	r2, [r3, #0]

			HAL_UART_Transmit_IT(&huart1, tx_string, number_of_bytes);
 8007190:	234a      	movs	r3, #74	; 0x4a
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	881a      	ldrh	r2, [r3, #0]
 8007196:	495b      	ldr	r1, [pc, #364]	; (8007304 <main+0x10cc>)
 8007198:	4b68      	ldr	r3, [pc, #416]	; (800733c <main+0x1104>)
 800719a:	0018      	movs	r0, r3
 800719c:	f006 fae6 	bl	800d76c <HAL_UART_Transmit_IT>
			HAL_Delay(15);
 80071a0:	200f      	movs	r0, #15
 80071a2:	f001 f8c7 	bl	8008334 <HAL_Delay>


			timer_cmd_esp=0;
 80071a6:	4b66      	ldr	r3, [pc, #408]	; (8007340 <main+0x1108>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	801a      	strh	r2, [r3, #0]

			while(timer_cmd_esp < 10)
 80071ac:	e00f      	b.n	80071ce <main+0xf96>
			{
				if(strstr((char*)rx_string_esp, "INDICATE:0,2,4,4,"))
 80071ae:	4a65      	ldr	r2, [pc, #404]	; (8007344 <main+0x110c>)
 80071b0:	4b60      	ldr	r3, [pc, #384]	; (8007334 <main+0x10fc>)
 80071b2:	0011      	movs	r1, r2
 80071b4:	0018      	movs	r0, r3
 80071b6:	f00c f89b 	bl	80132f0 <strstr>
 80071ba:	1e03      	subs	r3, r0, #0
 80071bc:	d10c      	bne.n	80071d8 <main+0xfa0>
				{
					break;
				}

				if(strstr((char*)rx_string_esp, "ERROR"))
 80071be:	4a4d      	ldr	r2, [pc, #308]	; (80072f4 <main+0x10bc>)
 80071c0:	4b5c      	ldr	r3, [pc, #368]	; (8007334 <main+0x10fc>)
 80071c2:	0011      	movs	r1, r2
 80071c4:	0018      	movs	r0, r3
 80071c6:	f00c f893 	bl	80132f0 <strstr>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d106      	bne.n	80071dc <main+0xfa4>
			while(timer_cmd_esp < 10)
 80071ce:	4b5c      	ldr	r3, [pc, #368]	; (8007340 <main+0x1108>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d9eb      	bls.n	80071ae <main+0xf76>
 80071d6:	e002      	b.n	80071de <main+0xfa6>
					break;
 80071d8:	46c0      	nop			; (mov r8, r8)
 80071da:	e000      	b.n	80071de <main+0xfa6>
				{
					break;
 80071dc:	46c0      	nop			; (mov r8, r8)

			//+INDICATE:0,2,4,4,[06][00][01][01]
//			at_cmd_send_esp((char*)tx_string, "INDICATE:0,2,4,4,", "ERROR", 10, 0);
//			HAL_Delay(100);

			at_cmd_send_esp("AT+BLEDISCONN=0\r\n\0", "BLEDISCONN:0,", "ERROR", 10, 0);
 80071de:	4a45      	ldr	r2, [pc, #276]	; (80072f4 <main+0x10bc>)
 80071e0:	4959      	ldr	r1, [pc, #356]	; (8007348 <main+0x1110>)
 80071e2:	485a      	ldr	r0, [pc, #360]	; (800734c <main+0x1114>)
 80071e4:	2300      	movs	r3, #0
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	230a      	movs	r3, #10
 80071ea:	f7fb f847 	bl	800227c <at_cmd_send_esp>
			beep(1);
 80071ee:	2001      	movs	r0, #1
 80071f0:	f7fb fa5a 	bl	80026a8 <beep>
			HAL_Delay(100);
 80071f4:	2064      	movs	r0, #100	; 0x64
 80071f6:	f001 f89d 	bl	8008334 <HAL_Delay>

			if(row>0)
 80071fa:	4b46      	ldr	r3, [pc, #280]	; (8007314 <main+0x10dc>)
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <main+0xfe2>
				meter_sequence_number = sequence_char[0] | (sequence_char[1] << 8);
 8007202:	4b53      	ldr	r3, [pc, #332]	; (8007350 <main+0x1118>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b21a      	sxth	r2, r3
 8007208:	4b51      	ldr	r3, [pc, #324]	; (8007350 <main+0x1118>)
 800720a:	785b      	ldrb	r3, [r3, #1]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	b21b      	sxth	r3, r3
 8007210:	4313      	orrs	r3, r2
 8007212:	b21b      	sxth	r3, r3
 8007214:	b29a      	uxth	r2, r3
 8007216:	4b41      	ldr	r3, [pc, #260]	; (800731c <main+0x10e4>)
 8007218:	801a      	strh	r2, [r3, #0]

			flush_tx_string();
 800721a:	f7fa f973 	bl	8001504 <flush_tx_string>
			sprintf((char*)tx_string, "Last Sequence Number : %u\r\n\0", meter_sequence_number);
 800721e:	4b3f      	ldr	r3, [pc, #252]	; (800731c <main+0x10e4>)
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	001a      	movs	r2, r3
 8007224:	494b      	ldr	r1, [pc, #300]	; (8007354 <main+0x111c>)
 8007226:	4b37      	ldr	r3, [pc, #220]	; (8007304 <main+0x10cc>)
 8007228:	0018      	movs	r0, r3
 800722a:	f00c f841 	bl	80132b0 <siprintf>
			send_text_to_usb((char*)tx_string);
 800722e:	4b35      	ldr	r3, [pc, #212]	; (8007304 <main+0x10cc>)
 8007230:	0018      	movs	r0, r3
 8007232:	f7fa f90f 	bl	8001454 <send_text_to_usb>

			//////// PRINT METER RECORDS
			_Bool write_server_clock_flag=1;
 8007236:	2355      	movs	r3, #85	; 0x55
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]


			for(uint8_t cc = 0; cc < 100; cc++)
 800723e:	2354      	movs	r3, #84	; 0x54
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e0d6      	b.n	80073f6 <main+0x11be>
			{
				if(meter_records[cc][0]!=0)
 8007248:	2354      	movs	r3, #84	; 0x54
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	4932      	ldr	r1, [pc, #200]	; (8007318 <main+0x10e0>)
 8007250:	0013      	movs	r3, r2
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	189b      	adds	r3, r3, r2
 8007256:	5c5b      	ldrb	r3, [r3, r1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d100      	bne.n	800725e <main+0x1026>
 800725c:	e0c5      	b.n	80073ea <main+0x11b2>
				{
					total_downloaded_records_meter++;
 800725e:	4b3e      	ldr	r3, [pc, #248]	; (8007358 <main+0x1120>)
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	4b3c      	ldr	r3, [pc, #240]	; (8007358 <main+0x1120>)
 8007268:	801a      	strh	r2, [r3, #0]

					flush_tx_string();
 800726a:	f7fa f94b 	bl	8001504 <flush_tx_string>
					sprintf((char*)tx_string, "Record No. %u: \0", total_downloaded_records_meter);
 800726e:	4b3a      	ldr	r3, [pc, #232]	; (8007358 <main+0x1120>)
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	001a      	movs	r2, r3
 8007274:	4939      	ldr	r1, [pc, #228]	; (800735c <main+0x1124>)
 8007276:	4b23      	ldr	r3, [pc, #140]	; (8007304 <main+0x10cc>)
 8007278:	0018      	movs	r0, r3
 800727a:	f00c f819 	bl	80132b0 <siprintf>
					send_text_to_usb((char*)tx_string);
 800727e:	4b21      	ldr	r3, [pc, #132]	; (8007304 <main+0x10cc>)
 8007280:	0018      	movs	r0, r3
 8007282:	f7fa f8e7 	bl	8001454 <send_text_to_usb>


					uint8_t data_byte=0;
 8007286:	2349      	movs	r3, #73	; 0x49
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]

					while(1)////// search for blank address to start write
					{
						data_byte=sFLASH_ReadByte1(mem_write_address);
 800728e:	4b34      	ldr	r3, [pc, #208]	; (8007360 <main+0x1128>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2549      	movs	r5, #73	; 0x49
 8007294:	197c      	adds	r4, r7, r5
 8007296:	0018      	movs	r0, r3
 8007298:	f000 ff40 	bl	800811c <sFLASH_ReadByte1>
 800729c:	0003      	movs	r3, r0
 800729e:	7023      	strb	r3, [r4, #0]

						if(data_byte==0xFF && (mem_write_address-LOGS_START_ADDRESS)%17==0)///// if empty address
 80072a0:	197b      	adds	r3, r7, r5
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2bff      	cmp	r3, #255	; 0xff
 80072a6:	d10a      	bne.n	80072be <main+0x1086>
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <main+0x1128>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2d      	ldr	r2, [pc, #180]	; (8007364 <main+0x112c>)
 80072ae:	4694      	mov	ip, r2
 80072b0:	4463      	add	r3, ip
 80072b2:	2111      	movs	r1, #17
 80072b4:	0018      	movs	r0, r3
 80072b6:	f7f8 ffc9 	bl	800024c <__aeabi_uidivmod>
 80072ba:	1e0b      	subs	r3, r1, #0
 80072bc:	d00b      	beq.n	80072d6 <main+0x109e>
							break;
						else
							mem_write_address++;
 80072be:	4b28      	ldr	r3, [pc, #160]	; (8007360 <main+0x1128>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	4b26      	ldr	r3, [pc, #152]	; (8007360 <main+0x1128>)
 80072c6:	601a      	str	r2, [r3, #0]

						if(mem_write_address>=FLASH_LAST_ADDRESS)
 80072c8:	4b25      	ldr	r3, [pc, #148]	; (8007360 <main+0x1128>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a26      	ldr	r2, [pc, #152]	; (8007368 <main+0x1130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d9dd      	bls.n	800728e <main+0x1056>
						{
							erase_all_records();
 80072d2:	f7fd fa01 	bl	80046d8 <erase_all_records>
							break;
						}
					}

					///// write meter data download time
					if(write_server_clock_flag)
 80072d6:	2455      	movs	r4, #85	; 0x55
 80072d8:	193b      	adds	r3, r7, r4
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <main+0x10b2>
					{
						store_clock_to_flash();
 80072e0:	f7fe fb3a 	bl	8005958 <store_clock_to_flash>
						write_server_clock_flag=0;
 80072e4:	193b      	adds	r3, r7, r4
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
					}

					for(uint8_t zz=0; zz<17; zz++)
 80072ea:	2353      	movs	r3, #83	; 0x53
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e067      	b.n	80073c4 <main+0x118c>
 80072f4:	08014b24 	.word	0x08014b24
 80072f8:	08014ffc 	.word	0x08014ffc
 80072fc:	080162fc 	.word	0x080162fc
 8007300:	08016318 	.word	0x08016318
 8007304:	20000424 	.word	0x20000424
 8007308:	200006e0 	.word	0x200006e0
 800730c:	200002e8 	.word	0x200002e8
 8007310:	08016320 	.word	0x08016320
 8007314:	20001744 	.word	0x20001744
 8007318:	200010a0 	.word	0x200010a0
 800731c:	200002ea 	.word	0x200002ea
 8007320:	0801619c 	.word	0x0801619c
 8007324:	20000e00 	.word	0x20000e00
 8007328:	08016338 	.word	0x08016338
 800732c:	08016354 	.word	0x08016354
 8007330:	08016370 	.word	0x08016370
 8007334:	200002f8 	.word	0x200002f8
 8007338:	200002e4 	.word	0x200002e4
 800733c:	200019c4 	.word	0x200019c4
 8007340:	200002e2 	.word	0x200002e2
 8007344:	08016380 	.word	0x08016380
 8007348:	08016394 	.word	0x08016394
 800734c:	080163a4 	.word	0x080163a4
 8007350:	200002d8 	.word	0x200002d8
 8007354:	080163b8 	.word	0x080163b8
 8007358:	200002ec 	.word	0x200002ec
 800735c:	080163d8 	.word	0x080163d8
 8007360:	20000064 	.word	0x20000064
 8007364:	ffffb000 	.word	0xffffb000
 8007368:	002000bc 	.word	0x002000bc
					{
						#if USB_ENABLED
						CDC_Transmit_FS(&meter_records[cc][zz], 1);
 800736c:	2554      	movs	r5, #84	; 0x54
 800736e:	197b      	adds	r3, r7, r5
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	2453      	movs	r4, #83	; 0x53
 8007374:	193b      	adds	r3, r7, r4
 8007376:	7819      	ldrb	r1, [r3, #0]
 8007378:	0013      	movs	r3, r2
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	189b      	adds	r3, r3, r2
 800737e:	185a      	adds	r2, r3, r1
 8007380:	4b40      	ldr	r3, [pc, #256]	; (8007484 <main+0x124c>)
 8007382:	18d3      	adds	r3, r2, r3
 8007384:	2101      	movs	r1, #1
 8007386:	0018      	movs	r0, r3
 8007388:	f00b f80a 	bl	80123a0 <CDC_Transmit_FS>
						HAL_Delay(2);
 800738c:	2002      	movs	r0, #2
 800738e:	f000 ffd1 	bl	8008334 <HAL_Delay>
						#endif

						sFLASH_WriteByte(mem_write_address++, meter_records[cc][zz]);///////// write data to flash
 8007392:	4b3d      	ldr	r3, [pc, #244]	; (8007488 <main+0x1250>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	1c51      	adds	r1, r2, #1
 8007398:	4b3b      	ldr	r3, [pc, #236]	; (8007488 <main+0x1250>)
 800739a:	6019      	str	r1, [r3, #0]
 800739c:	197b      	adds	r3, r7, r5
 800739e:	7819      	ldrb	r1, [r3, #0]
 80073a0:	0025      	movs	r5, r4
 80073a2:	193b      	adds	r3, r7, r4
 80073a4:	7818      	ldrb	r0, [r3, #0]
 80073a6:	4c37      	ldr	r4, [pc, #220]	; (8007484 <main+0x124c>)
 80073a8:	000b      	movs	r3, r1
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	185b      	adds	r3, r3, r1
 80073ae:	18e3      	adds	r3, r4, r3
 80073b0:	5c1b      	ldrb	r3, [r3, r0]
 80073b2:	0019      	movs	r1, r3
 80073b4:	0010      	movs	r0, r2
 80073b6:	f000 fe85 	bl	80080c4 <sFLASH_WriteByte>
					for(uint8_t zz=0; zz<17; zz++)
 80073ba:	197b      	adds	r3, r7, r5
 80073bc:	781a      	ldrb	r2, [r3, #0]
 80073be:	197b      	adds	r3, r7, r5
 80073c0:	3201      	adds	r2, #1
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	2353      	movs	r3, #83	; 0x53
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b10      	cmp	r3, #16
 80073cc:	d9ce      	bls.n	800736c <main+0x1134>
					}


					store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 80073ce:	23c0      	movs	r3, #192	; 0xc0
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	0018      	movs	r0, r3
 80073d4:	f7fa f9f0 	bl	80017b8 <store_runtime_parameters_to_flash>
					store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 80073d8:	2380      	movs	r3, #128	; 0x80
 80073da:	01db      	lsls	r3, r3, #7
 80073dc:	0018      	movs	r0, r3
 80073de:	f7fa f9eb 	bl	80017b8 <store_runtime_parameters_to_flash>

					send_text_to_usb("\r\n\0");
 80073e2:	4b2a      	ldr	r3, [pc, #168]	; (800748c <main+0x1254>)
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7fa f835 	bl	8001454 <send_text_to_usb>
			for(uint8_t cc = 0; cc < 100; cc++)
 80073ea:	2154      	movs	r1, #84	; 0x54
 80073ec:	187b      	adds	r3, r7, r1
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	187b      	adds	r3, r7, r1
 80073f2:	3201      	adds	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	2354      	movs	r3, #84	; 0x54
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b63      	cmp	r3, #99	; 0x63
 80073fe:	d800      	bhi.n	8007402 <main+0x11ca>
 8007400:	e722      	b.n	8007248 <main+0x1010>
//			total_downloaded_records_meter = total_downloaded_records_meter + row;
//
//			store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
//			store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);

			if(total_downloaded_records_meter < total_records_meter && ble_device_connected_flag)
 8007402:	4b23      	ldr	r3, [pc, #140]	; (8007490 <main+0x1258>)
 8007404:	881a      	ldrh	r2, [r3, #0]
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <main+0x125c>)
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d204      	bcs.n	8007418 <main+0x11e0>
 800740e:	4b22      	ldr	r3, [pc, #136]	; (8007498 <main+0x1260>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d000      	beq.n	8007418 <main+0x11e0>
				goto FETCH_METER_RECORDS;
 8007416:	e5f2      	b.n	8006ffe <main+0xdc6>
			else if(total_downloaded_records_meter == total_records_meter)
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <main+0x1258>)
 800741a:	881a      	ldrh	r2, [r3, #0]
 800741c:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <main+0x125c>)
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d10b      	bne.n	800743c <main+0x1204>
			{

				beep(20);
 8007424:	2014      	movs	r0, #20
 8007426:	f7fb f93f 	bl	80026a8 <beep>
				HAL_Delay(100);
 800742a:	2064      	movs	r0, #100	; 0x64
 800742c:	f000 ff82 	bl	8008334 <HAL_Delay>
				beep(30);
 8007430:	201e      	movs	r0, #30
 8007432:	f7fb f939 	bl	80026a8 <beep>

				mqtt_server_connection_fail_counter=0;
 8007436:	4b19      	ldr	r3, [pc, #100]	; (800749c <main+0x1264>)
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
//				if(row>0)
//					server_clock_flag=1;

			}

			ble_get_data_flag = 0;
 800743c:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <main+0x1268>)
 800743e:	2200      	movs	r2, #0
 8007440:	701a      	strb	r2, [r3, #0]

			green_led_blink_flag=0;
 8007442:	4b18      	ldr	r3, [pc, #96]	; (80074a4 <main+0x126c>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(1000);
 8007448:	23fa      	movs	r3, #250	; 0xfa
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	0018      	movs	r0, r3
 800744e:	f000 ff71 	bl	8008334 <HAL_Delay>

//		check_gprs_network_registration();



		server_clock_handler();
 8007452:	f7fd ffe3 	bl	800541c <server_clock_handler>

		ping_service_handler();
 8007456:	f7fe f885 	bl	8005564 <ping_service_handler>

		configuration_service_handler();
 800745a:	f7fe f8d5 	bl	8005608 <configuration_service_handler>

		ca_certificate_handler();
 800745e:	f7fe f90b 	bl	8005678 <ca_certificate_handler>

		client_certificate_handler();
 8007462:	f7fe f939 	bl	80056d8 <client_certificate_handler>

		client_key_handler();
 8007466:	f7fe f967 	bl	8005738 <client_key_handler>

		update_module_firmware_handler();
 800746a:	f7fe f805 	bl	8005478 <update_module_firmware_handler>

		update_device_firmware_handler();
 800746e:	f7fe f83f 	bl	80054f0 <update_device_firmware_handler>

		device_twin_handler();
 8007472:	f7fe f991 	bl	8005798 <device_twin_handler>

		publish_meter_readings_handler();
 8007476:	f7fe f9d3 	bl	8005820 <publish_meter_readings_handler>



		// ESP SOFT AP MODE POWER OFF HANDLER
		esp_disable_softap_mode_handler();
 800747a:	f7fe fe69 	bl	8006150 <esp_disable_softap_mode_handler>
		power_down_bg96_handler();
 800747e:	f7ff f9cb 	bl	8006818 <main+0x5e0>
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	200010a0 	.word	0x200010a0
 8007488:	20000064 	.word	0x20000064
 800748c:	08015440 	.word	0x08015440
 8007490:	200002ec 	.word	0x200002ec
 8007494:	200002e8 	.word	0x200002e8
 8007498:	20001751 	.word	0x20001751
 800749c:	200002da 	.word	0x200002da
 80074a0:	20001752 	.word	0x20001752
 80074a4:	20001766 	.word	0x20001766

080074a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074a8:	b590      	push	{r4, r7, lr}
 80074aa:	b097      	sub	sp, #92	; 0x5c
 80074ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074ae:	2428      	movs	r4, #40	; 0x28
 80074b0:	193b      	adds	r3, r7, r4
 80074b2:	0018      	movs	r0, r3
 80074b4:	2330      	movs	r3, #48	; 0x30
 80074b6:	001a      	movs	r2, r3
 80074b8:	2100      	movs	r1, #0
 80074ba:	f00b fc63 	bl	8012d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074be:	2318      	movs	r3, #24
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	0018      	movs	r0, r3
 80074c4:	2310      	movs	r3, #16
 80074c6:	001a      	movs	r2, r3
 80074c8:	2100      	movs	r1, #0
 80074ca:	f00b fc5b 	bl	8012d84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074ce:	1d3b      	adds	r3, r7, #4
 80074d0:	0018      	movs	r0, r3
 80074d2:	2314      	movs	r3, #20
 80074d4:	001a      	movs	r2, r3
 80074d6:	2100      	movs	r1, #0
 80074d8:	f00b fc54 	bl	8012d84 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80074dc:	0021      	movs	r1, r4
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	2209      	movs	r2, #9
 80074e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	2201      	movs	r2, #1
 80074e8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	2201      	movs	r2, #1
 80074ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	2202      	movs	r2, #2
 80074f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80074f6:	187b      	adds	r3, r7, r1
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	0252      	lsls	r2, r2, #9
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	2280      	movs	r2, #128	; 0x80
 8007502:	02d2      	lsls	r2, r2, #11
 8007504:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007506:	187b      	adds	r3, r7, r1
 8007508:	2200      	movs	r2, #0
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800750c:	187b      	adds	r3, r7, r1
 800750e:	0018      	movs	r0, r3
 8007510:	f003 f9b6 	bl	800a880 <HAL_RCC_OscConfig>
 8007514:	1e03      	subs	r3, r0, #0
 8007516:	d001      	beq.n	800751c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8007518:	f000 fabe 	bl	8007a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800751c:	2118      	movs	r1, #24
 800751e:	187b      	adds	r3, r7, r1
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007524:	187b      	adds	r3, r7, r1
 8007526:	2202      	movs	r2, #2
 8007528:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800752a:	187b      	adds	r3, r7, r1
 800752c:	2200      	movs	r2, #0
 800752e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007530:	187b      	adds	r3, r7, r1
 8007532:	2200      	movs	r2, #0
 8007534:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007536:	187b      	adds	r3, r7, r1
 8007538:	2101      	movs	r1, #1
 800753a:	0018      	movs	r0, r3
 800753c:	f003 fcbe 	bl	800aebc <HAL_RCC_ClockConfig>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d001      	beq.n	8007548 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8007544:	f000 faa8 	bl	8007a98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8007548:	1d3b      	adds	r3, r7, #4
 800754a:	4a0c      	ldr	r2, [pc, #48]	; (800757c <SystemClock_Config+0xd4>)
 800754c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	2200      	movs	r2, #0
 8007552:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	2280      	movs	r2, #128	; 0x80
 8007558:	0092      	lsls	r2, r2, #2
 800755a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800755c:	1d3b      	adds	r3, r7, #4
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	0018      	movs	r0, r3
 8007566:	f003 fdff 	bl	800b168 <HAL_RCCEx_PeriphCLKConfig>
 800756a:	1e03      	subs	r3, r0, #0
 800756c:	d001      	beq.n	8007572 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800756e:	f000 fa93 	bl	8007a98 <Error_Handler>
  }
}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	46bd      	mov	sp, r7
 8007576:	b017      	add	sp, #92	; 0x5c
 8007578:	bd90      	pop	{r4, r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	00030001 	.word	0x00030001

08007580 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007586:	1d3b      	adds	r3, r7, #4
 8007588:	0018      	movs	r0, r3
 800758a:	2314      	movs	r3, #20
 800758c:	001a      	movs	r2, r3
 800758e:	2100      	movs	r1, #0
 8007590:	f00b fbf8 	bl	8012d84 <memset>
  RTC_DateTypeDef sDate = {0};
 8007594:	003b      	movs	r3, r7
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800759a:	4b28      	ldr	r3, [pc, #160]	; (800763c <MX_RTC_Init+0xbc>)
 800759c:	4a28      	ldr	r2, [pc, #160]	; (8007640 <MX_RTC_Init+0xc0>)
 800759e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80075a0:	4b26      	ldr	r3, [pc, #152]	; (800763c <MX_RTC_Init+0xbc>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80075a6:	4b25      	ldr	r3, [pc, #148]	; (800763c <MX_RTC_Init+0xbc>)
 80075a8:	227f      	movs	r2, #127	; 0x7f
 80075aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80075ac:	4b23      	ldr	r3, [pc, #140]	; (800763c <MX_RTC_Init+0xbc>)
 80075ae:	22ff      	movs	r2, #255	; 0xff
 80075b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80075b2:	4b22      	ldr	r3, [pc, #136]	; (800763c <MX_RTC_Init+0xbc>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80075b8:	4b20      	ldr	r3, [pc, #128]	; (800763c <MX_RTC_Init+0xbc>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80075be:	4b1f      	ldr	r3, [pc, #124]	; (800763c <MX_RTC_Init+0xbc>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80075c4:	4b1d      	ldr	r3, [pc, #116]	; (800763c <MX_RTC_Init+0xbc>)
 80075c6:	0018      	movs	r0, r3
 80075c8:	f003 feac 	bl	800b324 <HAL_RTC_Init>
 80075cc:	1e03      	subs	r3, r0, #0
 80075ce:	d001      	beq.n	80075d4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80075d0:	f000 fa62 	bl	8007a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	2200      	movs	r2, #0
 80075de:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	2200      	movs	r2, #0
 80075e4:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80075e6:	1d3b      	adds	r3, r7, #4
 80075e8:	2200      	movs	r2, #0
 80075ea:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	2200      	movs	r2, #0
 80075f0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80075f2:	1d39      	adds	r1, r7, #4
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <MX_RTC_Init+0xbc>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	0018      	movs	r0, r3
 80075fa:	f003 ff27 	bl	800b44c <HAL_RTC_SetTime>
 80075fe:	1e03      	subs	r3, r0, #0
 8007600:	d001      	beq.n	8007606 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8007602:	f000 fa49 	bl	8007a98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007606:	003b      	movs	r3, r7
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800760c:	003b      	movs	r3, r7
 800760e:	2201      	movs	r2, #1
 8007610:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8007612:	003b      	movs	r3, r7
 8007614:	2201      	movs	r2, #1
 8007616:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8007618:	003b      	movs	r3, r7
 800761a:	2200      	movs	r2, #0
 800761c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800761e:	0039      	movs	r1, r7
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <MX_RTC_Init+0xbc>)
 8007622:	2201      	movs	r2, #1
 8007624:	0018      	movs	r0, r3
 8007626:	f003 ffcd 	bl	800b5c4 <HAL_RTC_SetDate>
 800762a:	1e03      	subs	r3, r0, #0
 800762c:	d001      	beq.n	8007632 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800762e:	f000 fa33 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	46bd      	mov	sp, r7
 8007636:	b006      	add	sp, #24
 8007638:	bd80      	pop	{r7, pc}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	20001a48 	.word	0x20001a48
 8007640:	40002800 	.word	0x40002800

08007644 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007648:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <MX_SPI1_Init+0x74>)
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <MX_SPI1_Init+0x78>)
 800764c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800764e:	4b1a      	ldr	r3, [pc, #104]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007650:	2282      	movs	r2, #130	; 0x82
 8007652:	0052      	lsls	r2, r2, #1
 8007654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007658:	2200      	movs	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800765c:	4b16      	ldr	r3, [pc, #88]	; (80076b8 <MX_SPI1_Init+0x74>)
 800765e:	22e0      	movs	r2, #224	; 0xe0
 8007660:	00d2      	lsls	r2, r2, #3
 8007662:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007664:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007666:	2200      	movs	r2, #0
 8007668:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <MX_SPI1_Init+0x74>)
 800766c:	2200      	movs	r2, #0
 800766e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007670:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007672:	2280      	movs	r2, #128	; 0x80
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <MX_SPI1_Init+0x74>)
 800767a:	2208      	movs	r2, #8
 800767c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007680:	2200      	movs	r2, #0
 8007682:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007686:	2200      	movs	r2, #0
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800768a:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <MX_SPI1_Init+0x74>)
 800768c:	2200      	movs	r2, #0
 800768e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007692:	2207      	movs	r2, #7
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <MX_SPI1_Init+0x74>)
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <MX_SPI1_Init+0x74>)
 800769e:	2208      	movs	r2, #8
 80076a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <MX_SPI1_Init+0x74>)
 80076a4:	0018      	movs	r0, r3
 80076a6:	f004 f8a9 	bl	800b7fc <HAL_SPI_Init>
 80076aa:	1e03      	subs	r3, r0, #0
 80076ac:	d001      	beq.n	80076b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80076ae:	f000 f9f3 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20001ab4 	.word	0x20001ab4
 80076bc:	40013000 	.word	0x40013000

080076c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076c6:	4a0e      	ldr	r2, [pc, #56]	; (8007700 <MX_TIM6_Init+0x40>)
 80076c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48;
 80076ca:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076cc:	2230      	movs	r2, #48	; 0x30
 80076ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076d8:	22fa      	movs	r2, #250	; 0xfa
 80076da:	0092      	lsls	r2, r2, #2
 80076dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076de:	4b07      	ldr	r3, [pc, #28]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <MX_TIM6_Init+0x3c>)
 80076e6:	0018      	movs	r0, r3
 80076e8:	f005 f89a 	bl	800c820 <HAL_TIM_Base_Init>
 80076ec:	1e03      	subs	r3, r0, #0
 80076ee:	d001      	beq.n	80076f4 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80076f0:	f000 f9d2 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	20001a68 	.word	0x20001a68
 8007700:	40001000 	.word	0x40001000

08007704 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM7_Init 0 */

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <MX_TIM7_Init+0x3c>)
 800770a:	4a0e      	ldr	r2, [pc, #56]	; (8007744 <MX_TIM7_Init+0x40>)
 800770c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000;
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <MX_TIM7_Init+0x3c>)
 8007710:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <MX_TIM7_Init+0x44>)
 8007712:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <MX_TIM7_Init+0x3c>)
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <MX_TIM7_Init+0x3c>)
 800771c:	22fa      	movs	r2, #250	; 0xfa
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <MX_TIM7_Init+0x3c>)
 8007724:	2200      	movs	r2, #0
 8007726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <MX_TIM7_Init+0x3c>)
 800772a:	0018      	movs	r0, r3
 800772c:	f005 f878 	bl	800c820 <HAL_TIM_Base_Init>
 8007730:	1e03      	subs	r3, r0, #0
 8007732:	d001      	beq.n	8007738 <MX_TIM7_Init+0x34>
  {
    Error_Handler();
 8007734:	f000 f9b0 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007738:	46c0      	nop			; (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	20001be4 	.word	0x20001be4
 8007744:	40001400 	.word	0x40001400
 8007748:	0000bb80 	.word	0x0000bb80

0800774c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b090      	sub	sp, #64	; 0x40
 8007750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007752:	2324      	movs	r3, #36	; 0x24
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	0018      	movs	r0, r3
 8007758:	231c      	movs	r3, #28
 800775a:	001a      	movs	r2, r3
 800775c:	2100      	movs	r1, #0
 800775e:	f00b fb11 	bl	8012d84 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007762:	1d3b      	adds	r3, r7, #4
 8007764:	0018      	movs	r0, r3
 8007766:	2320      	movs	r3, #32
 8007768:	001a      	movs	r2, r3
 800776a:	2100      	movs	r1, #0
 800776c:	f00b fb0a 	bl	8012d84 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8007770:	4b36      	ldr	r3, [pc, #216]	; (800784c <MX_TIM16_Init+0x100>)
 8007772:	4a37      	ldr	r2, [pc, #220]	; (8007850 <MX_TIM16_Init+0x104>)
 8007774:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12-1;
 8007776:	4b35      	ldr	r3, [pc, #212]	; (800784c <MX_TIM16_Init+0x100>)
 8007778:	220b      	movs	r2, #11
 800777a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800777c:	4b33      	ldr	r3, [pc, #204]	; (800784c <MX_TIM16_Init+0x100>)
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8007782:	4b32      	ldr	r3, [pc, #200]	; (800784c <MX_TIM16_Init+0x100>)
 8007784:	4a33      	ldr	r2, [pc, #204]	; (8007854 <MX_TIM16_Init+0x108>)
 8007786:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007788:	4b30      	ldr	r3, [pc, #192]	; (800784c <MX_TIM16_Init+0x100>)
 800778a:	2200      	movs	r2, #0
 800778c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800778e:	4b2f      	ldr	r3, [pc, #188]	; (800784c <MX_TIM16_Init+0x100>)
 8007790:	2200      	movs	r2, #0
 8007792:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <MX_TIM16_Init+0x100>)
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800779a:	4b2c      	ldr	r3, [pc, #176]	; (800784c <MX_TIM16_Init+0x100>)
 800779c:	0018      	movs	r0, r3
 800779e:	f005 f83f 	bl	800c820 <HAL_TIM_Base_Init>
 80077a2:	1e03      	subs	r3, r0, #0
 80077a4:	d001      	beq.n	80077aa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80077a6:	f000 f977 	bl	8007a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80077aa:	4b28      	ldr	r3, [pc, #160]	; (800784c <MX_TIM16_Init+0x100>)
 80077ac:	0018      	movs	r0, r3
 80077ae:	f005 f8d3 	bl	800c958 <HAL_TIM_PWM_Init>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d001      	beq.n	80077ba <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80077b6:	f000 f96f 	bl	8007a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077ba:	2124      	movs	r1, #36	; 0x24
 80077bc:	187b      	adds	r3, r7, r1
 80077be:	2260      	movs	r2, #96	; 0x60
 80077c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80077c2:	187b      	adds	r3, r7, r1
 80077c4:	22fa      	movs	r2, #250	; 0xfa
 80077c6:	0052      	lsls	r2, r2, #1
 80077c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077ca:	187b      	adds	r3, r7, r1
 80077cc:	2200      	movs	r2, #0
 80077ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077d0:	187b      	adds	r3, r7, r1
 80077d2:	2200      	movs	r2, #0
 80077d4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	2200      	movs	r2, #0
 80077da:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80077dc:	187b      	adds	r3, r7, r1
 80077de:	2200      	movs	r2, #0
 80077e0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077e2:	187b      	adds	r3, r7, r1
 80077e4:	2200      	movs	r2, #0
 80077e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80077e8:	1879      	adds	r1, r7, r1
 80077ea:	4b18      	ldr	r3, [pc, #96]	; (800784c <MX_TIM16_Init+0x100>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	0018      	movs	r0, r3
 80077f0:	f005 fb4e 	bl	800ce90 <HAL_TIM_PWM_ConfigChannel>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d001      	beq.n	80077fc <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80077f8:	f000 f94e 	bl	8007a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80077fc:	1d3b      	adds	r3, r7, #4
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	2200      	movs	r2, #0
 8007806:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007808:	1d3b      	adds	r3, r7, #4
 800780a:	2200      	movs	r2, #0
 800780c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800780e:	1d3b      	adds	r3, r7, #4
 8007810:	2200      	movs	r2, #0
 8007812:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	2200      	movs	r2, #0
 8007818:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	2280      	movs	r2, #128	; 0x80
 800781e:	0192      	lsls	r2, r2, #6
 8007820:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	2200      	movs	r2, #0
 8007826:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8007828:	1d3a      	adds	r2, r7, #4
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <MX_TIM16_Init+0x100>)
 800782c:	0011      	movs	r1, r2
 800782e:	0018      	movs	r0, r3
 8007830:	f005 fea0 	bl	800d574 <HAL_TIMEx_ConfigBreakDeadTime>
 8007834:	1e03      	subs	r3, r0, #0
 8007836:	d001      	beq.n	800783c <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8007838:	f000 f92e 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800783c:	4b03      	ldr	r3, [pc, #12]	; (800784c <MX_TIM16_Init+0x100>)
 800783e:	0018      	movs	r0, r3
 8007840:	f000 fa20 	bl	8007c84 <HAL_TIM_MspPostInit>

}
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	46bd      	mov	sp, r7
 8007848:	b010      	add	sp, #64	; 0x40
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20001b9c 	.word	0x20001b9c
 8007850:	40014400 	.word	0x40014400
 8007854:	000003e7 	.word	0x000003e7

08007858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 800785e:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <MX_USART1_UART_Init+0x5c>)
 8007860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007864:	22e1      	movs	r2, #225	; 0xe1
 8007866:	0252      	lsls	r2, r2, #9
 8007868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007872:	2200      	movs	r2, #0
 8007874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007876:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007878:	2200      	movs	r2, #0
 800787a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 800787e:	220c      	movs	r2, #12
 8007880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007884:	2200      	movs	r2, #0
 8007886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 800788a:	2200      	movs	r2, #0
 800788c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800788e:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007890:	2200      	movs	r2, #0
 8007892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 8007896:	2200      	movs	r2, #0
 8007898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <MX_USART1_UART_Init+0x58>)
 800789c:	0018      	movs	r0, r3
 800789e:	f005 fed7 	bl	800d650 <HAL_UART_Init>
 80078a2:	1e03      	subs	r3, r0, #0
 80078a4:	d001      	beq.n	80078aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80078a6:	f000 f8f7 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200019c4 	.word	0x200019c4
 80078b4:	40013800 	.word	0x40013800

080078b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80078bc:	4b14      	ldr	r3, [pc, #80]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078be:	4a15      	ldr	r2, [pc, #84]	; (8007914 <MX_USART2_UART_Init+0x5c>)
 80078c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078c4:	22e1      	movs	r2, #225	; 0xe1
 80078c6:	0252      	lsls	r2, r2, #9
 80078c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078d8:	2200      	movs	r2, #0
 80078da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078de:	220c      	movs	r2, #12
 80078e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <MX_USART2_UART_Init+0x58>)
 80078fc:	0018      	movs	r0, r3
 80078fe:	f005 fea7 	bl	800d650 <HAL_UART_Init>
 8007902:	1e03      	subs	r3, r0, #0
 8007904:	d001      	beq.n	800790a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007906:	f000 f8c7 	bl	8007a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20001b18 	.word	0x20001b18
 8007914:	40004400 	.word	0x40004400

08007918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b08b      	sub	sp, #44	; 0x2c
 800791c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800791e:	2414      	movs	r4, #20
 8007920:	193b      	adds	r3, r7, r4
 8007922:	0018      	movs	r0, r3
 8007924:	2314      	movs	r3, #20
 8007926:	001a      	movs	r2, r3
 8007928:	2100      	movs	r1, #0
 800792a:	f00b fa2b 	bl	8012d84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800792e:	4b53      	ldr	r3, [pc, #332]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	4b52      	ldr	r3, [pc, #328]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	0309      	lsls	r1, r1, #12
 8007938:	430a      	orrs	r2, r1
 800793a:	615a      	str	r2, [r3, #20]
 800793c:	4b4f      	ldr	r3, [pc, #316]	; (8007a7c <MX_GPIO_Init+0x164>)
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	031b      	lsls	r3, r3, #12
 8007944:	4013      	ands	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800794a:	4b4c      	ldr	r3, [pc, #304]	; (8007a7c <MX_GPIO_Init+0x164>)
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	4b4b      	ldr	r3, [pc, #300]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	03c9      	lsls	r1, r1, #15
 8007954:	430a      	orrs	r2, r1
 8007956:	615a      	str	r2, [r3, #20]
 8007958:	4b48      	ldr	r3, [pc, #288]	; (8007a7c <MX_GPIO_Init+0x164>)
 800795a:	695a      	ldr	r2, [r3, #20]
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	03db      	lsls	r3, r3, #15
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007966:	4b45      	ldr	r3, [pc, #276]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	4b44      	ldr	r3, [pc, #272]	; (8007a7c <MX_GPIO_Init+0x164>)
 800796c:	2180      	movs	r1, #128	; 0x80
 800796e:	0289      	lsls	r1, r1, #10
 8007970:	430a      	orrs	r2, r1
 8007972:	615a      	str	r2, [r3, #20]
 8007974:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007976:	695a      	ldr	r2, [r3, #20]
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	4013      	ands	r3, r2
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007982:	4b3e      	ldr	r3, [pc, #248]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	4b3d      	ldr	r3, [pc, #244]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007988:	2180      	movs	r1, #128	; 0x80
 800798a:	02c9      	lsls	r1, r1, #11
 800798c:	430a      	orrs	r2, r1
 800798e:	615a      	str	r2, [r3, #20]
 8007990:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <MX_GPIO_Init+0x164>)
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	2380      	movs	r3, #128	; 0x80
 8007996:	02db      	lsls	r3, r3, #11
 8007998:	4013      	ands	r3, r2
 800799a:	607b      	str	r3, [r7, #4]
 800799c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800799e:	2390      	movs	r3, #144	; 0x90
 80079a0:	05db      	lsls	r3, r3, #23
 80079a2:	2200      	movs	r2, #0
 80079a4:	2110      	movs	r1, #16
 80079a6:	0018      	movs	r0, r3
 80079a8:	f001 fab8 	bl	8008f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_PWRKEY_Pin|ESP_PWR_Pin|GSM_DTR_Pin|ESP_EN_Pin
 80079ac:	4934      	ldr	r1, [pc, #208]	; (8007a80 <MX_GPIO_Init+0x168>)
 80079ae:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <MX_GPIO_Init+0x16c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	0018      	movs	r0, r3
 80079b4:	f001 fab2 	bl	8008f1c <HAL_GPIO_WritePin>
                          |LED1_Pin|LED2_Pin|BUZZOR_Pin|LED3_Pin
                          |GSM_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_VCC_GPIO_Port, GSM_VCC_Pin, GPIO_PIN_SET);
 80079b8:	2380      	movs	r3, #128	; 0x80
 80079ba:	0219      	lsls	r1, r3, #8
 80079bc:	2390      	movs	r3, #144	; 0x90
 80079be:	05db      	lsls	r3, r3, #23
 80079c0:	2201      	movs	r2, #1
 80079c2:	0018      	movs	r0, r3
 80079c4:	f001 faaa 	bl	8008f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80079c8:	193b      	adds	r3, r7, r4
 80079ca:	22e0      	movs	r2, #224	; 0xe0
 80079cc:	0212      	lsls	r2, r2, #8
 80079ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80079d0:	193b      	adds	r3, r7, r4
 80079d2:	2203      	movs	r2, #3
 80079d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079d6:	193b      	adds	r3, r7, r4
 80079d8:	2200      	movs	r2, #0
 80079da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079dc:	193b      	adds	r3, r7, r4
 80079de:	4a2a      	ldr	r2, [pc, #168]	; (8007a88 <MX_GPIO_Init+0x170>)
 80079e0:	0019      	movs	r1, r3
 80079e2:	0010      	movs	r0, r2
 80079e4:	f001 f85a 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA13
                           PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_13
 80079e8:	193b      	adds	r3, r7, r4
 80079ea:	4a28      	ldr	r2, [pc, #160]	; (8007a8c <MX_GPIO_Init+0x174>)
 80079ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80079ee:	193b      	adds	r3, r7, r4
 80079f0:	2203      	movs	r2, #3
 80079f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f4:	193b      	adds	r3, r7, r4
 80079f6:	2200      	movs	r2, #0
 80079f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fa:	193a      	adds	r2, r7, r4
 80079fc:	2390      	movs	r3, #144	; 0x90
 80079fe:	05db      	lsls	r3, r3, #23
 8007a00:	0011      	movs	r1, r2
 8007a02:	0018      	movs	r0, r3
 8007a04:	f001 f84a 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin GSM_VCC_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|GSM_VCC_Pin;
 8007a08:	193b      	adds	r3, r7, r4
 8007a0a:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <MX_GPIO_Init+0x178>)
 8007a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a0e:	193b      	adds	r3, r7, r4
 8007a10:	2201      	movs	r2, #1
 8007a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a14:	193b      	adds	r3, r7, r4
 8007a16:	2200      	movs	r2, #0
 8007a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a1a:	193b      	adds	r3, r7, r4
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a20:	193a      	adds	r2, r7, r4
 8007a22:	2390      	movs	r3, #144	; 0x90
 8007a24:	05db      	lsls	r3, r3, #23
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f001 f837 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_PWRKEY_Pin ESP_PWR_Pin GSM_DTR_Pin ESP_EN_Pin
                           LED1_Pin LED2_Pin BUZZOR_Pin LED3_Pin
                           GSM_RESET_Pin */
  GPIO_InitStruct.Pin = GSM_PWRKEY_Pin|ESP_PWR_Pin|GSM_DTR_Pin|ESP_EN_Pin
 8007a2e:	193b      	adds	r3, r7, r4
 8007a30:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <MX_GPIO_Init+0x168>)
 8007a32:	601a      	str	r2, [r3, #0]
                          |LED1_Pin|LED2_Pin|BUZZOR_Pin|LED3_Pin
                          |GSM_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a34:	193b      	adds	r3, r7, r4
 8007a36:	2201      	movs	r2, #1
 8007a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	193b      	adds	r3, r7, r4
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a40:	193b      	adds	r3, r7, r4
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a46:	193b      	adds	r3, r7, r4
 8007a48:	4a0e      	ldr	r2, [pc, #56]	; (8007a84 <MX_GPIO_Init+0x16c>)
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	0010      	movs	r0, r2
 8007a4e:	f001 f825 	bl	8008a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB13 PB14
                           PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8007a52:	0021      	movs	r1, r4
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <MX_GPIO_Init+0x17c>)
 8007a58:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a5a:	187b      	adds	r3, r7, r1
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a66:	187b      	adds	r3, r7, r1
 8007a68:	4a06      	ldr	r2, [pc, #24]	; (8007a84 <MX_GPIO_Init+0x16c>)
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	0010      	movs	r0, r2
 8007a6e:	f001 f815 	bl	8008a9c <HAL_GPIO_Init>

}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	46bd      	mov	sp, r7
 8007a76:	b00b      	add	sp, #44	; 0x2c
 8007a78:	bd90      	pop	{r4, r7, pc}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	00000cfd 	.word	0x00000cfd
 8007a84:	48000400 	.word	0x48000400
 8007a88:	48000800 	.word	0x48000800
 8007a8c:	00006103 	.word	0x00006103
 8007a90:	00008010 	.word	0x00008010
 8007a94:	0000f202 	.word	0x0000f202

08007a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aaa:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <HAL_MspInit+0x54>)
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <HAL_MspInit+0x54>)
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	619a      	str	r2, [r3, #24]
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <HAL_MspInit+0x54>)
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	2201      	movs	r2, #1
 8007abc:	4013      	ands	r3, r2
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <HAL_MspInit+0x54>)
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <HAL_MspInit+0x54>)
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	0549      	lsls	r1, r1, #21
 8007acc:	430a      	orrs	r2, r1
 8007ace:	61da      	str	r2, [r3, #28]
 8007ad0:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <HAL_MspInit+0x54>)
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	2380      	movs	r3, #128	; 0x80
 8007ad6:	055b      	lsls	r3, r3, #21
 8007ad8:	4013      	ands	r3, r2
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	2004      	movs	r0, #4
 8007ae4:	f000 fd18 	bl	8008518 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007ae8:	2004      	movs	r0, #4
 8007aea:	f000 fd2a 	bl	8008542 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	46bd      	mov	sp, r7
 8007af2:	b002      	add	sp, #8
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	40021000 	.word	0x40021000

08007afc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a06      	ldr	r2, [pc, #24]	; (8007b24 <HAL_RTC_MspInit+0x28>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d106      	bne.n	8007b1c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <HAL_RTC_MspInit+0x2c>)
 8007b10:	6a1a      	ldr	r2, [r3, #32]
 8007b12:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <HAL_RTC_MspInit+0x2c>)
 8007b14:	2180      	movs	r1, #128	; 0x80
 8007b16:	0209      	lsls	r1, r1, #8
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	40002800 	.word	0x40002800
 8007b28:	40021000 	.word	0x40021000

08007b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b2c:	b590      	push	{r4, r7, lr}
 8007b2e:	b08b      	sub	sp, #44	; 0x2c
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b34:	2414      	movs	r4, #20
 8007b36:	193b      	adds	r3, r7, r4
 8007b38:	0018      	movs	r0, r3
 8007b3a:	2314      	movs	r3, #20
 8007b3c:	001a      	movs	r2, r3
 8007b3e:	2100      	movs	r1, #0
 8007b40:	f00b f920 	bl	8012d84 <memset>
  if(hspi->Instance==SPI1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a20      	ldr	r2, [pc, #128]	; (8007bcc <HAL_SPI_MspInit+0xa0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d13a      	bne.n	8007bc4 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b4e:	4b20      	ldr	r3, [pc, #128]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b54:	2180      	movs	r1, #128	; 0x80
 8007b56:	0149      	lsls	r1, r1, #5
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	619a      	str	r2, [r3, #24]
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	2380      	movs	r3, #128	; 0x80
 8007b62:	015b      	lsls	r3, r3, #5
 8007b64:	4013      	ands	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b6a:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b6c:	695a      	ldr	r2, [r3, #20]
 8007b6e:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	0289      	lsls	r1, r1, #10
 8007b74:	430a      	orrs	r2, r1
 8007b76:	615a      	str	r2, [r3, #20]
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <HAL_SPI_MspInit+0xa4>)
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	2380      	movs	r3, #128	; 0x80
 8007b7e:	029b      	lsls	r3, r3, #10
 8007b80:	4013      	ands	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007b86:	0021      	movs	r1, r4
 8007b88:	187b      	adds	r3, r7, r1
 8007b8a:	22e0      	movs	r2, #224	; 0xe0
 8007b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b8e:	187b      	adds	r3, r7, r1
 8007b90:	2202      	movs	r2, #2
 8007b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b94:	187b      	adds	r3, r7, r1
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007ba0:	187b      	adds	r3, r7, r1
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba6:	187a      	adds	r2, r7, r1
 8007ba8:	2390      	movs	r3, #144	; 0x90
 8007baa:	05db      	lsls	r3, r3, #23
 8007bac:	0011      	movs	r1, r2
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 ff74 	bl	8008a9c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	2019      	movs	r0, #25
 8007bba:	f000 fcad 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007bbe:	2019      	movs	r0, #25
 8007bc0:	f000 fcbf 	bl	8008542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007bc4:	46c0      	nop			; (mov r8, r8)
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b00b      	add	sp, #44	; 0x2c
 8007bca:	bd90      	pop	{r4, r7, pc}
 8007bcc:	40013000 	.word	0x40013000
 8007bd0:	40021000 	.word	0x40021000

08007bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <HAL_TIM_Base_MspInit+0xa0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d114      	bne.n	8007c10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007be6:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007be8:	69da      	ldr	r2, [r3, #28]
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007bec:	2110      	movs	r1, #16
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	4b21      	ldr	r3, [pc, #132]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	2210      	movs	r2, #16
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2100      	movs	r1, #0
 8007c02:	2011      	movs	r0, #17
 8007c04:	f000 fc88 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007c08:	2011      	movs	r0, #17
 8007c0a:	f000 fc9a 	bl	8008542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8007c0e:	e02c      	b.n	8007c6a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <HAL_TIM_Base_MspInit+0xa8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d114      	bne.n	8007c44 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c1c:	69da      	ldr	r2, [r3, #28]
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c20:	2120      	movs	r1, #32
 8007c22:	430a      	orrs	r2, r1
 8007c24:	61da      	str	r2, [r3, #28]
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
 8007c30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	2012      	movs	r0, #18
 8007c38:	f000 fc6e 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007c3c:	2012      	movs	r0, #18
 8007c3e:	f000 fc80 	bl	8008542 <HAL_NVIC_EnableIRQ>
}
 8007c42:	e012      	b.n	8007c6a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <HAL_TIM_Base_MspInit+0xac>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d10d      	bne.n	8007c6a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c54:	2180      	movs	r1, #128	; 0x80
 8007c56:	0289      	lsls	r1, r1, #10
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	619a      	str	r2, [r3, #24]
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <HAL_TIM_Base_MspInit+0xa4>)
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	2380      	movs	r3, #128	; 0x80
 8007c62:	029b      	lsls	r3, r3, #10
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b006      	add	sp, #24
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	40001000 	.word	0x40001000
 8007c78:	40021000 	.word	0x40021000
 8007c7c:	40001400 	.word	0x40001400
 8007c80:	40014400 	.word	0x40014400

08007c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c8c:	240c      	movs	r4, #12
 8007c8e:	193b      	adds	r3, r7, r4
 8007c90:	0018      	movs	r0, r3
 8007c92:	2314      	movs	r3, #20
 8007c94:	001a      	movs	r2, r3
 8007c96:	2100      	movs	r1, #0
 8007c98:	f00b f874 	bl	8012d84 <memset>
  if(htim->Instance==TIM16)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <HAL_TIM_MspPostInit+0x74>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d124      	bne.n	8007cf0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <HAL_TIM_MspPostInit+0x78>)
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <HAL_TIM_MspPostInit+0x78>)
 8007cac:	2180      	movs	r1, #128	; 0x80
 8007cae:	02c9      	lsls	r1, r1, #11
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	615a      	str	r2, [r3, #20]
 8007cb4:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <HAL_TIM_MspPostInit+0x78>)
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	02db      	lsls	r3, r3, #11
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007cc2:	193b      	adds	r3, r7, r4
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	0052      	lsls	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cca:	0021      	movs	r1, r4
 8007ccc:	187b      	adds	r3, r7, r1
 8007cce:	2202      	movs	r2, #2
 8007cd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd2:	187b      	adds	r3, r7, r1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd8:	187b      	adds	r3, r7, r1
 8007cda:	2200      	movs	r2, #0
 8007cdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8007cde:	187b      	adds	r3, r7, r1
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ce4:	187b      	adds	r3, r7, r1
 8007ce6:	4a06      	ldr	r2, [pc, #24]	; (8007d00 <HAL_TIM_MspPostInit+0x7c>)
 8007ce8:	0019      	movs	r1, r3
 8007cea:	0010      	movs	r0, r2
 8007cec:	f000 fed6 	bl	8008a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8007cf0:	46c0      	nop			; (mov r8, r8)
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b009      	add	sp, #36	; 0x24
 8007cf6:	bd90      	pop	{r4, r7, pc}
 8007cf8:	40014400 	.word	0x40014400
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	48000400 	.word	0x48000400

08007d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b08d      	sub	sp, #52	; 0x34
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d0c:	241c      	movs	r4, #28
 8007d0e:	193b      	adds	r3, r7, r4
 8007d10:	0018      	movs	r0, r3
 8007d12:	2314      	movs	r3, #20
 8007d14:	001a      	movs	r2, r3
 8007d16:	2100      	movs	r1, #0
 8007d18:	f00b f834 	bl	8012d84 <memset>
  if(huart->Instance==USART1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a41      	ldr	r2, [pc, #260]	; (8007e28 <HAL_UART_MspInit+0x124>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d13c      	bne.n	8007da0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d26:	4b41      	ldr	r3, [pc, #260]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	4b40      	ldr	r3, [pc, #256]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d2c:	2180      	movs	r1, #128	; 0x80
 8007d2e:	01c9      	lsls	r1, r1, #7
 8007d30:	430a      	orrs	r2, r1
 8007d32:	619a      	str	r2, [r3, #24]
 8007d34:	4b3d      	ldr	r3, [pc, #244]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	2380      	movs	r3, #128	; 0x80
 8007d3a:	01db      	lsls	r3, r3, #7
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d42:	4b3a      	ldr	r3, [pc, #232]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d44:	695a      	ldr	r2, [r3, #20]
 8007d46:	4b39      	ldr	r3, [pc, #228]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	0289      	lsls	r1, r1, #10
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	615a      	str	r2, [r3, #20]
 8007d50:	4b36      	ldr	r3, [pc, #216]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007d52:	695a      	ldr	r2, [r3, #20]
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	029b      	lsls	r3, r3, #10
 8007d58:	4013      	ands	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	22c0      	movs	r2, #192	; 0xc0
 8007d62:	00d2      	lsls	r2, r2, #3
 8007d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d66:	0021      	movs	r1, r4
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6e:	187b      	adds	r3, r7, r1
 8007d70:	2200      	movs	r2, #0
 8007d72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	2203      	movs	r2, #3
 8007d78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007d7a:	187b      	adds	r3, r7, r1
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d80:	187a      	adds	r2, r7, r1
 8007d82:	2390      	movs	r3, #144	; 0x90
 8007d84:	05db      	lsls	r3, r3, #23
 8007d86:	0011      	movs	r1, r2
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f000 fe87 	bl	8008a9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	201b      	movs	r0, #27
 8007d94:	f000 fbc0 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d98:	201b      	movs	r0, #27
 8007d9a:	f000 fbd2 	bl	8008542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007d9e:	e03f      	b.n	8007e20 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <HAL_UART_MspInit+0x12c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d13a      	bne.n	8007e20 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007daa:	4b20      	ldr	r3, [pc, #128]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007db0:	2180      	movs	r1, #128	; 0x80
 8007db2:	0289      	lsls	r1, r1, #10
 8007db4:	430a      	orrs	r2, r1
 8007db6:	61da      	str	r2, [r3, #28]
 8007db8:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	029b      	lsls	r3, r3, #10
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007dcc:	2180      	movs	r1, #128	; 0x80
 8007dce:	0289      	lsls	r1, r1, #10
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	615a      	str	r2, [r3, #20]
 8007dd4:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <HAL_UART_MspInit+0x128>)
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	029b      	lsls	r3, r3, #10
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007de2:	211c      	movs	r1, #28
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	220c      	movs	r2, #12
 8007de8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	2202      	movs	r2, #2
 8007dee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	2203      	movs	r2, #3
 8007dfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	2201      	movs	r2, #1
 8007e00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e02:	187a      	adds	r2, r7, r1
 8007e04:	2390      	movs	r3, #144	; 0x90
 8007e06:	05db      	lsls	r3, r3, #23
 8007e08:	0011      	movs	r1, r2
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 fe46 	bl	8008a9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007e10:	2200      	movs	r2, #0
 8007e12:	2100      	movs	r1, #0
 8007e14:	201c      	movs	r0, #28
 8007e16:	f000 fb7f 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007e1a:	201c      	movs	r0, #28
 8007e1c:	f000 fb91 	bl	8008542 <HAL_NVIC_EnableIRQ>
}
 8007e20:	46c0      	nop			; (mov r8, r8)
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b00d      	add	sp, #52	; 0x34
 8007e26:	bd90      	pop	{r4, r7, pc}
 8007e28:	40013800 	.word	0x40013800
 8007e2c:	40021000 	.word	0x40021000
 8007e30:	40004400 	.word	0x40004400

08007e34 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <HAL_UART_MspDeInit+0x68>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d111      	bne.n	8007e6a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8007e46:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <HAL_UART_MspDeInit+0x6c>)
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <HAL_UART_MspDeInit+0x6c>)
 8007e4c:	4915      	ldr	r1, [pc, #84]	; (8007ea4 <HAL_UART_MspDeInit+0x70>)
 8007e4e:	400a      	ands	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8007e52:	23c0      	movs	r3, #192	; 0xc0
 8007e54:	00da      	lsls	r2, r3, #3
 8007e56:	2390      	movs	r3, #144	; 0x90
 8007e58:	05db      	lsls	r3, r3, #23
 8007e5a:	0011      	movs	r1, r2
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 ff8d 	bl	8008d7c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8007e62:	201b      	movs	r0, #27
 8007e64:	f000 fb7d 	bl	8008562 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8007e68:	e013      	b.n	8007e92 <HAL_UART_MspDeInit+0x5e>
  else if(huart->Instance==USART2)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a0e      	ldr	r2, [pc, #56]	; (8007ea8 <HAL_UART_MspDeInit+0x74>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d10e      	bne.n	8007e92 <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_UART_MspDeInit+0x6c>)
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <HAL_UART_MspDeInit+0x6c>)
 8007e7a:	490c      	ldr	r1, [pc, #48]	; (8007eac <HAL_UART_MspDeInit+0x78>)
 8007e7c:	400a      	ands	r2, r1
 8007e7e:	61da      	str	r2, [r3, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007e80:	2390      	movs	r3, #144	; 0x90
 8007e82:	05db      	lsls	r3, r3, #23
 8007e84:	210c      	movs	r1, #12
 8007e86:	0018      	movs	r0, r3
 8007e88:	f000 ff78 	bl	8008d7c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007e8c:	201c      	movs	r0, #28
 8007e8e:	f000 fb68 	bl	8008562 <HAL_NVIC_DisableIRQ>
}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b002      	add	sp, #8
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	40013800 	.word	0x40013800
 8007ea0:	40021000 	.word	0x40021000
 8007ea4:	ffffbfff 	.word	0xffffbfff
 8007ea8:	40004400 	.word	0x40004400
 8007eac:	fffdffff 	.word	0xfffdffff

08007eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007eb4:	46c0      	nop			; (mov r8, r8)
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ebe:	e7fe      	b.n	8007ebe <HardFault_Handler+0x4>

08007ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ed8:	f000 fa10 	bl	80082fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007ef0:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <TIM6_IRQHandler+0x14>)
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f004 feb6 	bl	800cc64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8007ef8:	46c0      	nop			; (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	20001a68 	.word	0x20001a68

08007f04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <TIM7_IRQHandler+0x14>)
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f004 feaa 	bl	800cc64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	20001be4 	.word	0x20001be4

08007f1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007f20:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <SPI1_IRQHandler+0x14>)
 8007f22:	0018      	movs	r0, r3
 8007f24:	f004 f998 	bl	800c258 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	20001ab4 	.word	0x20001ab4

08007f34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007f38:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <USART1_IRQHandler+0x14>)
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f005 fcd4 	bl	800d8e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007f40:	46c0      	nop			; (mov r8, r8)
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	200019c4 	.word	0x200019c4

08007f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <USART2_IRQHandler+0x14>)
 8007f52:	0018      	movs	r0, r3
 8007f54:	f005 fcc8 	bl	800d8e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	20001b18 	.word	0x20001b18

08007f64 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007f68:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <USB_IRQHandler+0x14>)
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f001 f92a 	bl	80091c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	200028e4 	.word	0x200028e4

08007f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f84:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <_sbrk+0x5c>)
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <_sbrk+0x60>)
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f90:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <_sbrk+0x64>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f98:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <_sbrk+0x64>)
 8007f9a:	4a12      	ldr	r2, [pc, #72]	; (8007fe4 <_sbrk+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f9e:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <_sbrk+0x64>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d207      	bcs.n	8007fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fac:	f00a fec0 	bl	8012d30 <__errno>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	220c      	movs	r2, #12
 8007fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	425b      	negs	r3, r3
 8007fba:	e009      	b.n	8007fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <_sbrk+0x64>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <_sbrk+0x64>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	18d2      	adds	r2, r2, r3
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <_sbrk+0x64>)
 8007fcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007fce:	68fb      	ldr	r3, [r7, #12]
}
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b006      	add	sp, #24
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20004000 	.word	0x20004000
 8007fdc:	00000400 	.word	0x00000400
 8007fe0:	20001770 	.word	0x20001770
 8007fe4:	20002be8 	.word	0x20002be8

08007fe8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <sFLASH_CS_LOW>:
// write 1 - 256 bytes in a page
//pages can be erased in a group of 16 (1 sector, 4KB) , 0 - 15
//total 4096 sectors

void sFLASH_CS_LOW(void)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8007ff6:	2390      	movs	r3, #144	; 0x90
 8007ff8:	05db      	lsls	r3, r3, #23
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2110      	movs	r1, #16
 8007ffe:	0018      	movs	r0, r3
 8008000:	f000 ff8c 	bl	8008f1c <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 8008004:	46c0      	nop			; (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 800800e:	2390      	movs	r3, #144	; 0x90
 8008010:	05db      	lsls	r3, r3, #23
 8008012:	2201      	movs	r2, #1
 8008014:	2110      	movs	r1, #16
 8008016:	0018      	movs	r0, r3
 8008018:	f000 ff80 	bl	8008f1c <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 800801c:	46c0      	nop			; (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <sFLASH_Init>:

void sFLASH_Init(void)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	af00      	add	r7, sp, #0
  sFLASH_CS_LOW();
 8008026:	f7ff ffe4 	bl	8007ff2 <sFLASH_CS_LOW>
	sFLASH_SendByte(0x06);
 800802a:	2006      	movs	r0, #6
 800802c:	f000 f8a2 	bl	8008174 <sFLASH_SendByte>
	sFLASH_CS_HIGH();
 8008030:	f7ff ffeb 	bl	800800a <sFLASH_CS_HIGH>

	sFLASH_CS_LOW();
 8008034:	f7ff ffdd 	bl	8007ff2 <sFLASH_CS_LOW>
	sFLASH_SendByte(0x98);
 8008038:	2098      	movs	r0, #152	; 0x98
 800803a:	f000 f89b 	bl	8008174 <sFLASH_SendByte>
	sFLASH_CS_HIGH();
 800803e:	f7ff ffe4 	bl	800800a <sFLASH_CS_HIGH>
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <sFLASH_EraseSector>:

//void sFLASH_EraseSector(uint32_t SectorAddr, _Bool page_erase)
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8008050:	f000 f8b6 	bl	80081c0 <sFLASH_WriteEnable>

  /* Sector Erase */
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8008054:	f7ff ffcd 	bl	8007ff2 <sFLASH_CS_LOW>
  /* Send Sector Erase instruction */
//	if(page_erase)
		sFLASH_SendByte(sFLASH_CMD_SE); //4KB sector erase
 8008058:	2020      	movs	r0, #32
 800805a:	f000 f88b 	bl	8008174 <sFLASH_SendByte>
//	else
//		sFLASH_SendByte(sFLASH_CMD_QE);
  /* Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	0c1b      	lsrs	r3, r3, #16
 8008062:	b2db      	uxtb	r3, r3
 8008064:	0018      	movs	r0, r3
 8008066:	f000 f885 	bl	8008174 <sFLASH_SendByte>
  /* Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	b2db      	uxtb	r3, r3
 8008070:	0018      	movs	r0, r3
 8008072:	f000 f87f 	bl	8008174 <sFLASH_SendByte>
  /* Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	0018      	movs	r0, r3
 800807c:	f000 f87a 	bl	8008174 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8008080:	f7ff ffc3 	bl	800800a <sFLASH_CS_HIGH>

  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8008084:	f000 f8a8 	bl	80081d8 <sFLASH_WaitForWriteEnd>
}
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	46bd      	mov	sp, r7
 800808c:	b002      	add	sp, #8
 800808e:	bd80      	pop	{r7, pc}

08008090 <sFLASH_EraseBulk>:

void sFLASH_EraseBulk(uint32_t addrs)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	//total 512 erasable sectors, 512*4096 = 2097152 = last sector address
	for(addrs = addrs; addrs < 2097341; addrs+=4096)// addrs < LAST_FLASH_ADDR  copy value as per flash size , start from logs_start_address
 8008098:	e009      	b.n	80080ae <sFLASH_EraseBulk+0x1e>
	sFLASH_EraseSector(addrs);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	0018      	movs	r0, r3
 800809e:	f7ff ffd3 	bl	8008048 <sFLASH_EraseSector>
	for(addrs = addrs; addrs < 2097341; addrs+=4096)// addrs < LAST_FLASH_ADDR  copy value as per flash size , start from logs_start_address
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2280      	movs	r2, #128	; 0x80
 80080a6:	0152      	lsls	r2, r2, #5
 80080a8:	4694      	mov	ip, r2
 80080aa:	4463      	add	r3, ip
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <sFLASH_EraseBulk+0x30>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d9f1      	bls.n	800809a <sFLASH_EraseBulk+0xa>
//  /* Deselect the FLASH: Chip Select high */
//  sFLASH_CS_HIGH();

//  /* Wait till the end of Flash writing */
//  sFLASH_WaitForWriteEnd();
}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	46c0      	nop			; (mov r8, r8)
 80080ba:	46bd      	mov	sp, r7
 80080bc:	b002      	add	sp, #8
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	002000bc 	.word	0x002000bc

080080c4 <sFLASH_WriteByte>:
//{
//	sFLASH_WriteByte(WriteAddr, byte);
//}

void sFLASH_WriteByte(uint32_t WriteAddr, uint8_t data_byte)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	000a      	movs	r2, r1
 80080ce:	1cfb      	adds	r3, r7, #3
 80080d0:	701a      	strb	r2, [r3, #0]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80080d2:	f000 f875 	bl	80081c0 <sFLASH_WriteEnable>
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80080d6:	f7ff ff8c 	bl	8007ff2 <sFLASH_CS_LOW>
  /* Send "Byte Program" instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80080da:	2002      	movs	r0, #2
 80080dc:	f000 f84a 	bl	8008174 <sFLASH_SendByte>
  /* Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	0018      	movs	r0, r3
 80080e8:	f000 f844 	bl	8008174 <sFLASH_SendByte>
  /* Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	0a1b      	lsrs	r3, r3, #8
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	0018      	movs	r0, r3
 80080f4:	f000 f83e 	bl	8008174 <sFLASH_SendByte>
  /* Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	0018      	movs	r0, r3
 80080fe:	f000 f839 	bl	8008174 <sFLASH_SendByte>
  /* Send the byte */
  sFLASH_SendByte(data_byte);
 8008102:	1cfb      	adds	r3, r7, #3
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	0018      	movs	r0, r3
 8008108:	f000 f834 	bl	8008174 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800810c:	f7ff ff7d 	bl	800800a <sFLASH_CS_HIGH>
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8008110:	f000 f862 	bl	80081d8 <sFLASH_WaitForWriteEnd>
}
 8008114:	46c0      	nop			; (mov r8, r8)
 8008116:	46bd      	mov	sp, r7
 8008118:	b002      	add	sp, #8
 800811a:	bd80      	pop	{r7, pc}

0800811c <sFLASH_ReadByte1>:

//  sFLASH_CS_HIGH();
//}

uint8_t sFLASH_ReadByte1(uint32_t ReadAddr)
{
 800811c:	b5b0      	push	{r4, r5, r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint8_t aaa=0;
 8008124:	240f      	movs	r4, #15
 8008126:	193b      	adds	r3, r7, r4
 8008128:	2200      	movs	r2, #0
 800812a:	701a      	strb	r2, [r3, #0]
	sFLASH_CS_LOW();
 800812c:	f7ff ff61 	bl	8007ff2 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_READ);
 8008130:	2003      	movs	r0, #3
 8008132:	f000 f81f 	bl	8008174 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	0c1b      	lsrs	r3, r3, #16
 800813a:	b2db      	uxtb	r3, r3
 800813c:	0018      	movs	r0, r3
 800813e:	f000 f819 	bl	8008174 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	b2db      	uxtb	r3, r3
 8008148:	0018      	movs	r0, r3
 800814a:	f000 f813 	bl	8008174 <sFLASH_SendByte>

  sFLASH_SendByte(ReadAddr & 0xFF);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	0018      	movs	r0, r3
 8008154:	f000 f80e 	bl	8008174 <sFLASH_SendByte>


	aaa = sFLASH_ReadByte();
 8008158:	0025      	movs	r5, r4
 800815a:	193c      	adds	r4, r7, r4
 800815c:	f000 f81c 	bl	8008198 <sFLASH_ReadByte>
 8008160:	0003      	movs	r3, r0
 8008162:	7023      	strb	r3, [r4, #0]

  sFLASH_CS_HIGH();
 8008164:	f7ff ff51 	bl	800800a <sFLASH_CS_HIGH>

	return aaa;
 8008168:	197b      	adds	r3, r7, r5
 800816a:	781b      	ldrb	r3, [r3, #0]

}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bdb0      	pop	{r4, r5, r7, pc}

08008174 <sFLASH_SendByte>:

  return (byte[0] << 16) | (byte[1] << 8) | byte[2];
}*/

void sFLASH_SendByte(uint8_t data_byte)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	0002      	movs	r2, r0
 800817c:	1dfb      	adds	r3, r7, #7
 800817e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &data_byte, 1, 10);
 8008180:	1df9      	adds	r1, r7, #7
 8008182:	4804      	ldr	r0, [pc, #16]	; (8008194 <sFLASH_SendByte+0x20>)
 8008184:	230a      	movs	r3, #10
 8008186:	2201      	movs	r2, #1
 8008188:	f003 fbf0 	bl	800b96c <HAL_SPI_Transmit>
}
 800818c:	46c0      	nop			; (mov r8, r8)
 800818e:	46bd      	mov	sp, r7
 8008190:	b002      	add	sp, #8
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20001ab4 	.word	0x20001ab4

08008198 <sFLASH_ReadByte>:

uint8_t sFLASH_ReadByte(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
  uint8_t mem_var=0;
 800819e:	1dfb      	adds	r3, r7, #7
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive(&hspi1, &mem_var, 1, 10);
 80081a4:	1df9      	adds	r1, r7, #7
 80081a6:	4805      	ldr	r0, [pc, #20]	; (80081bc <sFLASH_ReadByte+0x24>)
 80081a8:	230a      	movs	r3, #10
 80081aa:	2201      	movs	r2, #1
 80081ac:	f003 fd36 	bl	800bc1c <HAL_SPI_Receive>
	return mem_var;
 80081b0:	1dfb      	adds	r3, r7, #7
 80081b2:	781b      	ldrb	r3, [r3, #0]
}
 80081b4:	0018      	movs	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b002      	add	sp, #8
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20001ab4 	.word	0x20001ab4

080081c0 <sFLASH_WriteEnable>:

void sFLASH_WriteEnable(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  sFLASH_CS_LOW();
 80081c4:	f7ff ff15 	bl	8007ff2 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80081c8:	2006      	movs	r0, #6
 80081ca:	f7ff ffd3 	bl	8008174 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 80081ce:	f7ff ff1c 	bl	800800a <sFLASH_CS_HIGH>
}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <sFLASH_WaitForWriteEnd>:
  sFLASH_CS_HIGH();
}*/


void sFLASH_WaitForWriteEnd(void)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 80081de:	1dfb      	adds	r3, r7, #7
 80081e0:	2200      	movs	r2, #0
 80081e2:	701a      	strb	r2, [r3, #0]

	sFLASH_CS_LOW();
 80081e4:	f7ff ff05 	bl	8007ff2 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_RDSR1);
 80081e8:	2005      	movs	r0, #5
 80081ea:	f7ff ffc3 	bl	8008174 <sFLASH_SendByte>

	flashstatus = sFLASH_ReadByte();
 80081ee:	1dfc      	adds	r4, r7, #7
 80081f0:	f7ff ffd2 	bl	8008198 <sFLASH_ReadByte>
 80081f4:	0003      	movs	r3, r0
 80081f6:	7023      	strb	r3, [r4, #0]

  do
  {
    flashstatus = sFLASH_ReadByte();
 80081f8:	1dfc      	adds	r4, r7, #7
 80081fa:	f7ff ffcd 	bl	8008198 <sFLASH_ReadByte>
 80081fe:	0003      	movs	r3, r0
 8008200:	7023      	strb	r3, [r4, #0]
  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8008202:	1dfb      	adds	r3, r7, #7
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2201      	movs	r2, #1
 8008208:	4013      	ands	r3, r2
 800820a:	d1f5      	bne.n	80081f8 <sFLASH_WaitForWriteEnd+0x20>

	sFLASH_CS_HIGH();
 800820c:	f7ff fefd 	bl	800800a <sFLASH_CS_HIGH>
}
 8008210:	46c0      	nop			; (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b003      	add	sp, #12
 8008216:	bd90      	pop	{r4, r7, pc}

08008218 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008218:	480d      	ldr	r0, [pc, #52]	; (8008250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800821a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800821c:	480d      	ldr	r0, [pc, #52]	; (8008254 <LoopForever+0x6>)
  ldr r1, =_edata
 800821e:	490e      	ldr	r1, [pc, #56]	; (8008258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008220:	4a0e      	ldr	r2, [pc, #56]	; (800825c <LoopForever+0xe>)
  movs r3, #0
 8008222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008224:	e002      	b.n	800822c <LoopCopyDataInit>

08008226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800822a:	3304      	adds	r3, #4

0800822c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800822c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800822e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008230:	d3f9      	bcc.n	8008226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008234:	4c0b      	ldr	r4, [pc, #44]	; (8008264 <LoopForever+0x16>)
  movs r3, #0
 8008236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008238:	e001      	b.n	800823e <LoopFillZerobss>

0800823a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800823a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800823c:	3204      	adds	r2, #4

0800823e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800823e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008240:	d3fb      	bcc.n	800823a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008242:	f7ff fed1 	bl	8007fe8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8008246:	f00a fd79 	bl	8012d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800824a:	f7fd fff5 	bl	8006238 <main>

0800824e <LoopForever>:

LoopForever:
    b LoopForever
 800824e:	e7fe      	b.n	800824e <LoopForever>
  ldr   r0, =_estack
 8008250:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8008254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008258:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800825c:	08016808 	.word	0x08016808
  ldr r2, =_sbss
 8008260:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8008264:	20002be8 	.word	0x20002be8

08008268 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008268:	e7fe      	b.n	8008268 <ADC1_IRQHandler>
	...

0800826c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <HAL_Init+0x24>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <HAL_Init+0x24>)
 8008276:	2110      	movs	r1, #16
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800827c:	2000      	movs	r0, #0
 800827e:	f000 f809 	bl	8008294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008282:	f7ff fc0f 	bl	8007aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	0018      	movs	r0, r3
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	40022000 	.word	0x40022000

08008294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008294:	b590      	push	{r4, r7, lr}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800829c:	4b14      	ldr	r3, [pc, #80]	; (80082f0 <HAL_InitTick+0x5c>)
 800829e:	681c      	ldr	r4, [r3, #0]
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <HAL_InitTick+0x60>)
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	0019      	movs	r1, r3
 80082a6:	23fa      	movs	r3, #250	; 0xfa
 80082a8:	0098      	lsls	r0, r3, #2
 80082aa:	f7f7 ff49 	bl	8000140 <__udivsi3>
 80082ae:	0003      	movs	r3, r0
 80082b0:	0019      	movs	r1, r3
 80082b2:	0020      	movs	r0, r4
 80082b4:	f7f7 ff44 	bl	8000140 <__udivsi3>
 80082b8:	0003      	movs	r3, r0
 80082ba:	0018      	movs	r0, r3
 80082bc:	f000 f961 	bl	8008582 <HAL_SYSTICK_Config>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e00f      	b.n	80082e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d80b      	bhi.n	80082e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	2301      	movs	r3, #1
 80082d2:	425b      	negs	r3, r3
 80082d4:	2200      	movs	r2, #0
 80082d6:	0018      	movs	r0, r3
 80082d8:	f000 f91e 	bl	8008518 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <HAL_InitTick+0x64>)
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	e000      	b.n	80082e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
}
 80082e8:	0018      	movs	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b003      	add	sp, #12
 80082ee:	bd90      	pop	{r4, r7, pc}
 80082f0:	20000078 	.word	0x20000078
 80082f4:	20000080 	.word	0x20000080
 80082f8:	2000007c 	.word	0x2000007c

080082fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_IncTick+0x1c>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	001a      	movs	r2, r3
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <HAL_IncTick+0x20>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	18d2      	adds	r2, r2, r3
 800830c:	4b03      	ldr	r3, [pc, #12]	; (800831c <HAL_IncTick+0x20>)
 800830e:	601a      	str	r2, [r3, #0]
}
 8008310:	46c0      	nop			; (mov r8, r8)
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	20000080 	.word	0x20000080
 800831c:	20001c2c 	.word	0x20001c2c

08008320 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  return uwTick;
 8008324:	4b02      	ldr	r3, [pc, #8]	; (8008330 <HAL_GetTick+0x10>)
 8008326:	681b      	ldr	r3, [r3, #0]
}
 8008328:	0018      	movs	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	20001c2c 	.word	0x20001c2c

08008334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800833c:	f7ff fff0 	bl	8008320 <HAL_GetTick>
 8008340:	0003      	movs	r3, r0
 8008342:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	d005      	beq.n	800835a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800834e:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <HAL_Delay+0x44>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	001a      	movs	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	189b      	adds	r3, r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	f7ff ffe0 	bl	8008320 <HAL_GetTick>
 8008360:	0002      	movs	r2, r0
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d8f7      	bhi.n	800835c <HAL_Delay+0x28>
  {
  }
}
 800836c:	46c0      	nop			; (mov r8, r8)
 800836e:	46c0      	nop			; (mov r8, r8)
 8008370:	46bd      	mov	sp, r7
 8008372:	b004      	add	sp, #16
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	20000080 	.word	0x20000080

0800837c <__NVIC_EnableIRQ>:
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	0002      	movs	r2, r0
 8008384:	1dfb      	adds	r3, r7, #7
 8008386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008388:	1dfb      	adds	r3, r7, #7
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b7f      	cmp	r3, #127	; 0x7f
 800838e:	d809      	bhi.n	80083a4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008390:	1dfb      	adds	r3, r7, #7
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	001a      	movs	r2, r3
 8008396:	231f      	movs	r3, #31
 8008398:	401a      	ands	r2, r3
 800839a:	4b04      	ldr	r3, [pc, #16]	; (80083ac <__NVIC_EnableIRQ+0x30>)
 800839c:	2101      	movs	r1, #1
 800839e:	4091      	lsls	r1, r2
 80083a0:	000a      	movs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	46c0      	nop			; (mov r8, r8)
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b002      	add	sp, #8
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	e000e100 	.word	0xe000e100

080083b0 <__NVIC_DisableIRQ>:
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	0002      	movs	r2, r0
 80083b8:	1dfb      	adds	r3, r7, #7
 80083ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80083bc:	1dfb      	adds	r3, r7, #7
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b7f      	cmp	r3, #127	; 0x7f
 80083c2:	d810      	bhi.n	80083e6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083c4:	1dfb      	adds	r3, r7, #7
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	001a      	movs	r2, r3
 80083ca:	231f      	movs	r3, #31
 80083cc:	4013      	ands	r3, r2
 80083ce:	4908      	ldr	r1, [pc, #32]	; (80083f0 <__NVIC_DisableIRQ+0x40>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	409a      	lsls	r2, r3
 80083d4:	0013      	movs	r3, r2
 80083d6:	2280      	movs	r2, #128	; 0x80
 80083d8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80083da:	f3bf 8f4f 	dsb	sy
}
 80083de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80083e0:	f3bf 8f6f 	isb	sy
}
 80083e4:	46c0      	nop			; (mov r8, r8)
}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	46bd      	mov	sp, r7
 80083ea:	b002      	add	sp, #8
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	46c0      	nop			; (mov r8, r8)
 80083f0:	e000e100 	.word	0xe000e100

080083f4 <__NVIC_SetPriority>:
{
 80083f4:	b590      	push	{r4, r7, lr}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	0002      	movs	r2, r0
 80083fc:	6039      	str	r1, [r7, #0]
 80083fe:	1dfb      	adds	r3, r7, #7
 8008400:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008402:	1dfb      	adds	r3, r7, #7
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b7f      	cmp	r3, #127	; 0x7f
 8008408:	d828      	bhi.n	800845c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800840a:	4a2f      	ldr	r2, [pc, #188]	; (80084c8 <__NVIC_SetPriority+0xd4>)
 800840c:	1dfb      	adds	r3, r7, #7
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	b25b      	sxtb	r3, r3
 8008412:	089b      	lsrs	r3, r3, #2
 8008414:	33c0      	adds	r3, #192	; 0xc0
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	589b      	ldr	r3, [r3, r2]
 800841a:	1dfa      	adds	r2, r7, #7
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	0011      	movs	r1, r2
 8008420:	2203      	movs	r2, #3
 8008422:	400a      	ands	r2, r1
 8008424:	00d2      	lsls	r2, r2, #3
 8008426:	21ff      	movs	r1, #255	; 0xff
 8008428:	4091      	lsls	r1, r2
 800842a:	000a      	movs	r2, r1
 800842c:	43d2      	mvns	r2, r2
 800842e:	401a      	ands	r2, r3
 8008430:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	019b      	lsls	r3, r3, #6
 8008436:	22ff      	movs	r2, #255	; 0xff
 8008438:	401a      	ands	r2, r3
 800843a:	1dfb      	adds	r3, r7, #7
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	0018      	movs	r0, r3
 8008440:	2303      	movs	r3, #3
 8008442:	4003      	ands	r3, r0
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008448:	481f      	ldr	r0, [pc, #124]	; (80084c8 <__NVIC_SetPriority+0xd4>)
 800844a:	1dfb      	adds	r3, r7, #7
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b25b      	sxtb	r3, r3
 8008450:	089b      	lsrs	r3, r3, #2
 8008452:	430a      	orrs	r2, r1
 8008454:	33c0      	adds	r3, #192	; 0xc0
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	501a      	str	r2, [r3, r0]
}
 800845a:	e031      	b.n	80084c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800845c:	4a1b      	ldr	r2, [pc, #108]	; (80084cc <__NVIC_SetPriority+0xd8>)
 800845e:	1dfb      	adds	r3, r7, #7
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	0019      	movs	r1, r3
 8008464:	230f      	movs	r3, #15
 8008466:	400b      	ands	r3, r1
 8008468:	3b08      	subs	r3, #8
 800846a:	089b      	lsrs	r3, r3, #2
 800846c:	3306      	adds	r3, #6
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	18d3      	adds	r3, r2, r3
 8008472:	3304      	adds	r3, #4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	1dfa      	adds	r2, r7, #7
 8008478:	7812      	ldrb	r2, [r2, #0]
 800847a:	0011      	movs	r1, r2
 800847c:	2203      	movs	r2, #3
 800847e:	400a      	ands	r2, r1
 8008480:	00d2      	lsls	r2, r2, #3
 8008482:	21ff      	movs	r1, #255	; 0xff
 8008484:	4091      	lsls	r1, r2
 8008486:	000a      	movs	r2, r1
 8008488:	43d2      	mvns	r2, r2
 800848a:	401a      	ands	r2, r3
 800848c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	019b      	lsls	r3, r3, #6
 8008492:	22ff      	movs	r2, #255	; 0xff
 8008494:	401a      	ands	r2, r3
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	0018      	movs	r0, r3
 800849c:	2303      	movs	r3, #3
 800849e:	4003      	ands	r3, r0
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084a4:	4809      	ldr	r0, [pc, #36]	; (80084cc <__NVIC_SetPriority+0xd8>)
 80084a6:	1dfb      	adds	r3, r7, #7
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	001c      	movs	r4, r3
 80084ac:	230f      	movs	r3, #15
 80084ae:	4023      	ands	r3, r4
 80084b0:	3b08      	subs	r3, #8
 80084b2:	089b      	lsrs	r3, r3, #2
 80084b4:	430a      	orrs	r2, r1
 80084b6:	3306      	adds	r3, #6
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	18c3      	adds	r3, r0, r3
 80084bc:	3304      	adds	r3, #4
 80084be:	601a      	str	r2, [r3, #0]
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b003      	add	sp, #12
 80084c6:	bd90      	pop	{r4, r7, pc}
 80084c8:	e000e100 	.word	0xe000e100
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	1e5a      	subs	r2, r3, #1
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	045b      	lsls	r3, r3, #17
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d301      	bcc.n	80084e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084e4:	2301      	movs	r3, #1
 80084e6:	e010      	b.n	800850a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <SysTick_Config+0x44>)
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	3a01      	subs	r2, #1
 80084ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084f0:	2301      	movs	r3, #1
 80084f2:	425b      	negs	r3, r3
 80084f4:	2103      	movs	r1, #3
 80084f6:	0018      	movs	r0, r3
 80084f8:	f7ff ff7c 	bl	80083f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <SysTick_Config+0x44>)
 80084fe:	2200      	movs	r2, #0
 8008500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008502:	4b04      	ldr	r3, [pc, #16]	; (8008514 <SysTick_Config+0x44>)
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008508:	2300      	movs	r3, #0
}
 800850a:	0018      	movs	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	b002      	add	sp, #8
 8008510:	bd80      	pop	{r7, pc}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	e000e010 	.word	0xe000e010

08008518 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	210f      	movs	r1, #15
 8008524:	187b      	adds	r3, r7, r1
 8008526:	1c02      	adds	r2, r0, #0
 8008528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	187b      	adds	r3, r7, r1
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b25b      	sxtb	r3, r3
 8008532:	0011      	movs	r1, r2
 8008534:	0018      	movs	r0, r3
 8008536:	f7ff ff5d 	bl	80083f4 <__NVIC_SetPriority>
}
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	46bd      	mov	sp, r7
 800853e:	b004      	add	sp, #16
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	0002      	movs	r2, r0
 800854a:	1dfb      	adds	r3, r7, #7
 800854c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800854e:	1dfb      	adds	r3, r7, #7
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	b25b      	sxtb	r3, r3
 8008554:	0018      	movs	r0, r3
 8008556:	f7ff ff11 	bl	800837c <__NVIC_EnableIRQ>
}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	46bd      	mov	sp, r7
 800855e:	b002      	add	sp, #8
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	0002      	movs	r2, r0
 800856a:	1dfb      	adds	r3, r7, #7
 800856c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800856e:	1dfb      	adds	r3, r7, #7
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b25b      	sxtb	r3, r3
 8008574:	0018      	movs	r0, r3
 8008576:	f7ff ff1b 	bl	80083b0 <__NVIC_DisableIRQ>
}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	46bd      	mov	sp, r7
 800857e:	b002      	add	sp, #8
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	0018      	movs	r0, r3
 800858e:	f7ff ff9f 	bl	80084d0 <SysTick_Config>
 8008592:	0003      	movs	r3, r0
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b002      	add	sp, #8
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2221      	movs	r2, #33	; 0x21
 80085a8:	5c9b      	ldrb	r3, [r3, r2]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d008      	beq.n	80085c2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2204      	movs	r2, #4
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	2100      	movs	r1, #0
 80085bc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e020      	b.n	8008604 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	210e      	movs	r1, #14
 80085ce:	438a      	bics	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2101      	movs	r1, #1
 80085de:	438a      	bics	r2, r1
 80085e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	2101      	movs	r1, #1
 80085ec:	4091      	lsls	r1, r2
 80085ee:	000a      	movs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2221      	movs	r2, #33	; 0x21
 80085f6:	2101      	movs	r1, #1
 80085f8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	2100      	movs	r1, #0
 8008600:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	0018      	movs	r0, r3
 8008606:	46bd      	mov	sp, r7
 8008608:	b002      	add	sp, #8
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008614:	210f      	movs	r1, #15
 8008616:	187b      	adds	r3, r7, r1
 8008618:	2200      	movs	r2, #0
 800861a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2221      	movs	r2, #33	; 0x21
 8008620:	5c9b      	ldrb	r3, [r3, r2]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d006      	beq.n	8008636 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2204      	movs	r2, #4
 800862c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800862e:	187b      	adds	r3, r7, r1
 8008630:	2201      	movs	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e028      	b.n	8008688 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	210e      	movs	r1, #14
 8008642:	438a      	bics	r2, r1
 8008644:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2101      	movs	r1, #1
 8008652:	438a      	bics	r2, r1
 8008654:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	2101      	movs	r1, #1
 8008660:	4091      	lsls	r1, r2
 8008662:	000a      	movs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2221      	movs	r2, #33	; 0x21
 800866a:	2101      	movs	r1, #1
 800866c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	2100      	movs	r1, #0
 8008674:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	0010      	movs	r0, r2
 8008686:	4798      	blx	r3
    } 
  }
  return status;
 8008688:	230f      	movs	r3, #15
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	781b      	ldrb	r3, [r3, #0]
}
 800868e:	0018      	movs	r0, r3
 8008690:	46bd      	mov	sp, r7
 8008692:	b004      	add	sp, #16
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	603a      	str	r2, [r7, #0]
 80086a4:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086a6:	2317      	movs	r3, #23
 80086a8:	18fb      	adds	r3, r7, r3
 80086aa:	2201      	movs	r2, #1
 80086ac:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80086ae:	2316      	movs	r3, #22
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	2200      	movs	r2, #0
 80086b4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80086b6:	2315      	movs	r3, #21
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80086be:	4b3e      	ldr	r3, [pc, #248]	; (80087b8 <HAL_FLASH_Program+0x120>)
 80086c0:	7e1b      	ldrb	r3, [r3, #24]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d101      	bne.n	80086ca <HAL_FLASH_Program+0x32>
 80086c6:	2302      	movs	r3, #2
 80086c8:	e072      	b.n	80087b0 <HAL_FLASH_Program+0x118>
 80086ca:	4b3b      	ldr	r3, [pc, #236]	; (80087b8 <HAL_FLASH_Program+0x120>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80086d0:	2317      	movs	r3, #23
 80086d2:	18fe      	adds	r6, r7, r3
 80086d4:	4b39      	ldr	r3, [pc, #228]	; (80087bc <HAL_FLASH_Program+0x124>)
 80086d6:	0018      	movs	r0, r3
 80086d8:	f000 f8c4 	bl	8008864 <FLASH_WaitForLastOperation>
 80086dc:	0003      	movs	r3, r0
 80086de:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80086e0:	2317      	movs	r3, #23
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d15c      	bne.n	80087a4 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d104      	bne.n	80086fa <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80086f0:	2315      	movs	r3, #21
 80086f2:	18fb      	adds	r3, r7, r3
 80086f4:	2201      	movs	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e00b      	b.n	8008712 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d104      	bne.n	800870a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8008700:	2315      	movs	r3, #21
 8008702:	18fb      	adds	r3, r7, r3
 8008704:	2202      	movs	r2, #2
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	e003      	b.n	8008712 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800870a:	2315      	movs	r3, #21
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	2204      	movs	r2, #4
 8008710:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8008712:	2316      	movs	r3, #22
 8008714:	18fb      	adds	r3, r7, r3
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	e039      	b.n	8008790 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800871c:	2116      	movs	r1, #22
 800871e:	187b      	adds	r3, r7, r1
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	005a      	lsls	r2, r3, #1
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	18d0      	adds	r0, r2, r3
 8008728:	187b      	adds	r3, r7, r1
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	001a      	movs	r2, r3
 8008730:	3a20      	subs	r2, #32
 8008732:	2a00      	cmp	r2, #0
 8008734:	db03      	blt.n	800873e <HAL_FLASH_Program+0xa6>
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	40d1      	lsrs	r1, r2
 800873a:	000c      	movs	r4, r1
 800873c:	e008      	b.n	8008750 <HAL_FLASH_Program+0xb8>
 800873e:	2220      	movs	r2, #32
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4091      	lsls	r1, r2
 8008746:	000a      	movs	r2, r1
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	40d9      	lsrs	r1, r3
 800874c:	000c      	movs	r4, r1
 800874e:	4314      	orrs	r4, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	40da      	lsrs	r2, r3
 8008754:	0015      	movs	r5, r2
 8008756:	b2a3      	uxth	r3, r4
 8008758:	0019      	movs	r1, r3
 800875a:	f000 f867 	bl	800882c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800875e:	2317      	movs	r3, #23
 8008760:	18fe      	adds	r6, r7, r3
 8008762:	4b16      	ldr	r3, [pc, #88]	; (80087bc <HAL_FLASH_Program+0x124>)
 8008764:	0018      	movs	r0, r3
 8008766:	f000 f87d 	bl	8008864 <FLASH_WaitForLastOperation>
 800876a:	0003      	movs	r3, r0
 800876c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <HAL_FLASH_Program+0x128>)
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <HAL_FLASH_Program+0x128>)
 8008774:	2101      	movs	r1, #1
 8008776:	438a      	bics	r2, r1
 8008778:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800877a:	2317      	movs	r3, #23
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10e      	bne.n	80087a2 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8008784:	2116      	movs	r1, #22
 8008786:	187b      	adds	r3, r7, r1
 8008788:	781a      	ldrb	r2, [r3, #0]
 800878a:	187b      	adds	r3, r7, r1
 800878c:	3201      	adds	r2, #1
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	2316      	movs	r3, #22
 8008792:	18fa      	adds	r2, r7, r3
 8008794:	2315      	movs	r3, #21
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	7812      	ldrb	r2, [r2, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d3bd      	bcc.n	800871c <HAL_FLASH_Program+0x84>
 80087a0:	e000      	b.n	80087a4 <HAL_FLASH_Program+0x10c>
      {
        break;
 80087a2:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80087a4:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <HAL_FLASH_Program+0x120>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	761a      	strb	r2, [r3, #24]

  return status;
 80087aa:	2317      	movs	r3, #23
 80087ac:	18fb      	adds	r3, r7, r3
 80087ae:	781b      	ldrb	r3, [r3, #0]
}
 80087b0:	0018      	movs	r0, r3
 80087b2:	46bd      	mov	sp, r7
 80087b4:	b007      	add	sp, #28
 80087b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b8:	20001c30 	.word	0x20001c30
 80087bc:	0000c350 	.word	0x0000c350
 80087c0:	40022000 	.word	0x40022000

080087c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80087ca:	1dfb      	adds	r3, r7, #7
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <HAL_FLASH_Unlock+0x40>)
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2280      	movs	r2, #128	; 0x80
 80087d6:	4013      	ands	r3, r2
 80087d8:	d00d      	beq.n	80087f6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <HAL_FLASH_Unlock+0x40>)
 80087dc:	4a0a      	ldr	r2, [pc, #40]	; (8008808 <HAL_FLASH_Unlock+0x44>)
 80087de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80087e0:	4b08      	ldr	r3, [pc, #32]	; (8008804 <HAL_FLASH_Unlock+0x40>)
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <HAL_FLASH_Unlock+0x48>)
 80087e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <HAL_FLASH_Unlock+0x40>)
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2280      	movs	r2, #128	; 0x80
 80087ec:	4013      	ands	r3, r2
 80087ee:	d002      	beq.n	80087f6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80087f0:	1dfb      	adds	r3, r7, #7
 80087f2:	2201      	movs	r2, #1
 80087f4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80087f6:	1dfb      	adds	r3, r7, #7
 80087f8:	781b      	ldrb	r3, [r3, #0]
}
 80087fa:	0018      	movs	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	b002      	add	sp, #8
 8008800:	bd80      	pop	{r7, pc}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	40022000 	.word	0x40022000
 8008808:	45670123 	.word	0x45670123
 800880c:	cdef89ab 	.word	0xcdef89ab

08008810 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <HAL_FLASH_Lock+0x18>)
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <HAL_FLASH_Lock+0x18>)
 800881a:	2180      	movs	r1, #128	; 0x80
 800881c:	430a      	orrs	r2, r1
 800881e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008820:	2300      	movs	r3, #0
}
 8008822:	0018      	movs	r0, r3
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40022000 	.word	0x40022000

0800882c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	000a      	movs	r2, r1
 8008836:	1cbb      	adds	r3, r7, #2
 8008838:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <FLASH_Program_HalfWord+0x30>)
 800883c:	2200      	movs	r2, #0
 800883e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008840:	4b07      	ldr	r3, [pc, #28]	; (8008860 <FLASH_Program_HalfWord+0x34>)
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	4b06      	ldr	r3, [pc, #24]	; (8008860 <FLASH_Program_HalfWord+0x34>)
 8008846:	2101      	movs	r1, #1
 8008848:	430a      	orrs	r2, r1
 800884a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	1cba      	adds	r2, r7, #2
 8008850:	8812      	ldrh	r2, [r2, #0]
 8008852:	801a      	strh	r2, [r3, #0]
}
 8008854:	46c0      	nop			; (mov r8, r8)
 8008856:	46bd      	mov	sp, r7
 8008858:	b002      	add	sp, #8
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20001c30 	.word	0x20001c30
 8008860:	40022000 	.word	0x40022000

08008864 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800886c:	f7ff fd58 	bl	8008320 <HAL_GetTick>
 8008870:	0003      	movs	r3, r0
 8008872:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008874:	e00f      	b.n	8008896 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3301      	adds	r3, #1
 800887a:	d00c      	beq.n	8008896 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <FLASH_WaitForLastOperation+0x2e>
 8008882:	f7ff fd4d 	bl	8008320 <HAL_GetTick>
 8008886:	0002      	movs	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d201      	bcs.n	8008896 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e01f      	b.n	80088d6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008896:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <FLASH_WaitForLastOperation+0x7c>)
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	4013      	ands	r3, r2
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d0e9      	beq.n	8008876 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <FLASH_WaitForLastOperation+0x7c>)
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	4013      	ands	r3, r2
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d102      	bne.n	80088b4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <FLASH_WaitForLastOperation+0x7c>)
 80088b0:	2220      	movs	r2, #32
 80088b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80088b4:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <FLASH_WaitForLastOperation+0x7c>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2210      	movs	r2, #16
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d005      	beq.n	80088cc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <FLASH_WaitForLastOperation+0x7c>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2204      	movs	r2, #4
 80088c6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d103      	bne.n	80088d4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80088cc:	f000 f80a 	bl	80088e4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	0018      	movs	r0, r3
 80088d8:	46bd      	mov	sp, r7
 80088da:	b004      	add	sp, #16
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	40022000 	.word	0x40022000

080088e4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <FLASH_SetErrorCode+0x58>)
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2210      	movs	r2, #16
 80088f4:	4013      	ands	r3, r2
 80088f6:	2b10      	cmp	r3, #16
 80088f8:	d109      	bne.n	800890e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80088fa:	4b11      	ldr	r3, [pc, #68]	; (8008940 <FLASH_SetErrorCode+0x5c>)
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	2202      	movs	r2, #2
 8008900:	431a      	orrs	r2, r3
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <FLASH_SetErrorCode+0x5c>)
 8008904:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2210      	movs	r2, #16
 800890a:	4313      	orrs	r3, r2
 800890c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <FLASH_SetErrorCode+0x58>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2204      	movs	r2, #4
 8008914:	4013      	ands	r3, r2
 8008916:	2b04      	cmp	r3, #4
 8008918:	d109      	bne.n	800892e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <FLASH_SetErrorCode+0x5c>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	2201      	movs	r2, #1
 8008920:	431a      	orrs	r2, r3
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <FLASH_SetErrorCode+0x5c>)
 8008924:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2204      	movs	r2, #4
 800892a:	4313      	orrs	r3, r2
 800892c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800892e:	4b03      	ldr	r3, [pc, #12]	; (800893c <FLASH_SetErrorCode+0x58>)
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
}  
 8008934:	46c0      	nop			; (mov r8, r8)
 8008936:	46bd      	mov	sp, r7
 8008938:	b002      	add	sp, #8
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40022000 	.word	0x40022000
 8008940:	20001c30 	.word	0x20001c30

08008944 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800894e:	230f      	movs	r3, #15
 8008950:	18fb      	adds	r3, r7, r3
 8008952:	2201      	movs	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <HAL_FLASHEx_Erase+0xe0>)
 800895c:	7e1b      	ldrb	r3, [r3, #24]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_FLASHEx_Erase+0x22>
 8008962:	2302      	movs	r3, #2
 8008964:	e05a      	b.n	8008a1c <HAL_FLASHEx_Erase+0xd8>
 8008966:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <HAL_FLASHEx_Erase+0xe0>)
 8008968:	2201      	movs	r2, #1
 800896a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d116      	bne.n	80089a2 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008974:	4b2c      	ldr	r3, [pc, #176]	; (8008a28 <HAL_FLASHEx_Erase+0xe4>)
 8008976:	0018      	movs	r0, r3
 8008978:	f7ff ff74 	bl	8008864 <FLASH_WaitForLastOperation>
 800897c:	1e03      	subs	r3, r0, #0
 800897e:	d147      	bne.n	8008a10 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8008980:	f000 f856 	bl	8008a30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008984:	230f      	movs	r3, #15
 8008986:	18fc      	adds	r4, r7, r3
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <HAL_FLASHEx_Erase+0xe4>)
 800898a:	0018      	movs	r0, r3
 800898c:	f7ff ff6a 	bl	8008864 <FLASH_WaitForLastOperation>
 8008990:	0003      	movs	r3, r0
 8008992:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <HAL_FLASHEx_Erase+0xe8>)
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	4b24      	ldr	r3, [pc, #144]	; (8008a2c <HAL_FLASHEx_Erase+0xe8>)
 800899a:	2104      	movs	r1, #4
 800899c:	438a      	bics	r2, r1
 800899e:	611a      	str	r2, [r3, #16]
 80089a0:	e036      	b.n	8008a10 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80089a2:	4b21      	ldr	r3, [pc, #132]	; (8008a28 <HAL_FLASHEx_Erase+0xe4>)
 80089a4:	0018      	movs	r0, r3
 80089a6:	f7ff ff5d 	bl	8008864 <FLASH_WaitForLastOperation>
 80089aa:	1e03      	subs	r3, r0, #0
 80089ac:	d130      	bne.n	8008a10 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2201      	movs	r2, #1
 80089b2:	4252      	negs	r2, r2
 80089b4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	e01f      	b.n	80089fe <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	0018      	movs	r0, r3
 80089c2:	f000 f84d 	bl	8008a60 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089c6:	250f      	movs	r5, #15
 80089c8:	197c      	adds	r4, r7, r5
 80089ca:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <HAL_FLASHEx_Erase+0xe4>)
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7ff ff49 	bl	8008864 <FLASH_WaitForLastOperation>
 80089d2:	0003      	movs	r3, r0
 80089d4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80089d6:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <HAL_FLASHEx_Erase+0xe8>)
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <HAL_FLASHEx_Erase+0xe8>)
 80089dc:	2102      	movs	r1, #2
 80089de:	438a      	bics	r2, r1
 80089e0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80089e2:	197b      	adds	r3, r7, r5
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	601a      	str	r2, [r3, #0]
            break;
 80089f0:	e00e      	b.n	8008a10 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2280      	movs	r2, #128	; 0x80
 80089f6:	0112      	lsls	r2, r2, #4
 80089f8:	4694      	mov	ip, r2
 80089fa:	4463      	add	r3, ip
 80089fc:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	02da      	lsls	r2, r3, #11
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d3d6      	bcc.n	80089be <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_FLASHEx_Erase+0xe0>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	761a      	strb	r2, [r3, #24]

  return status;
 8008a16:	230f      	movs	r3, #15
 8008a18:	18fb      	adds	r3, r7, r3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
}
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b004      	add	sp, #16
 8008a22:	bdb0      	pop	{r4, r5, r7, pc}
 8008a24:	20001c30 	.word	0x20001c30
 8008a28:	0000c350 	.word	0x0000c350
 8008a2c:	40022000 	.word	0x40022000

08008a30 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008a34:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <FLASH_MassErase+0x28>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008a3a:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <FLASH_MassErase+0x2c>)
 8008a3c:	691a      	ldr	r2, [r3, #16]
 8008a3e:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <FLASH_MassErase+0x2c>)
 8008a40:	2104      	movs	r1, #4
 8008a42:	430a      	orrs	r2, r1
 8008a44:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <FLASH_MassErase+0x2c>)
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <FLASH_MassErase+0x2c>)
 8008a4c:	2140      	movs	r1, #64	; 0x40
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	611a      	str	r2, [r3, #16]
}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20001c30 	.word	0x20001c30
 8008a5c:	40022000 	.word	0x40022000

08008a60 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <FLASH_PageErase+0x34>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <FLASH_PageErase+0x38>)
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <FLASH_PageErase+0x38>)
 8008a74:	2102      	movs	r1, #2
 8008a76:	430a      	orrs	r2, r1
 8008a78:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <FLASH_PageErase+0x38>)
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <FLASH_PageErase+0x38>)
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <FLASH_PageErase+0x38>)
 8008a86:	2140      	movs	r1, #64	; 0x40
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	611a      	str	r2, [r3, #16]
}
 8008a8c:	46c0      	nop			; (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b002      	add	sp, #8
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20001c30 	.word	0x20001c30
 8008a98:	40022000 	.word	0x40022000

08008a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008aaa:	e14f      	b.n	8008d4c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4091      	lsls	r1, r2
 8008ab6:	000a      	movs	r2, r1
 8008ab8:	4013      	ands	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d100      	bne.n	8008ac4 <HAL_GPIO_Init+0x28>
 8008ac2:	e140      	b.n	8008d46 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d00b      	beq.n	8008ae4 <HAL_GPIO_Init+0x48>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d007      	beq.n	8008ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008ad8:	2b11      	cmp	r3, #17
 8008ada:	d003      	beq.n	8008ae4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	2b12      	cmp	r3, #18
 8008ae2:	d130      	bne.n	8008b46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	2203      	movs	r2, #3
 8008af0:	409a      	lsls	r2, r3
 8008af2:	0013      	movs	r3, r2
 8008af4:	43da      	mvns	r2, r3
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4013      	ands	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	005b      	lsls	r3, r3, #1
 8008b04:	409a      	lsls	r2, r3
 8008b06:	0013      	movs	r3, r2
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	409a      	lsls	r2, r3
 8008b20:	0013      	movs	r3, r2
 8008b22:	43da      	mvns	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4013      	ands	r3, r2
 8008b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	2201      	movs	r2, #1
 8008b32:	401a      	ands	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	409a      	lsls	r2, r3
 8008b38:	0013      	movs	r3, r2
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	2203      	movs	r2, #3
 8008b52:	409a      	lsls	r2, r3
 8008b54:	0013      	movs	r3, r2
 8008b56:	43da      	mvns	r2, r3
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	409a      	lsls	r2, r3
 8008b68:	0013      	movs	r3, r2
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d003      	beq.n	8008b86 <HAL_GPIO_Init+0xea>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b12      	cmp	r3, #18
 8008b84:	d123      	bne.n	8008bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	08da      	lsrs	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3208      	adds	r2, #8
 8008b8e:	0092      	lsls	r2, r2, #2
 8008b90:	58d3      	ldr	r3, [r2, r3]
 8008b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2207      	movs	r2, #7
 8008b98:	4013      	ands	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	220f      	movs	r2, #15
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	0013      	movs	r3, r2
 8008ba2:	43da      	mvns	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2107      	movs	r1, #7
 8008bb2:	400b      	ands	r3, r1
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	0013      	movs	r3, r2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	08da      	lsrs	r2, r3, #3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3208      	adds	r2, #8
 8008bc8:	0092      	lsls	r2, r2, #2
 8008bca:	6939      	ldr	r1, [r7, #16]
 8008bcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	2203      	movs	r2, #3
 8008bda:	409a      	lsls	r2, r3
 8008bdc:	0013      	movs	r3, r2
 8008bde:	43da      	mvns	r2, r3
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4013      	ands	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	2203      	movs	r2, #3
 8008bec:	401a      	ands	r2, r3
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	0013      	movs	r3, r2
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	2380      	movs	r3, #128	; 0x80
 8008c08:	055b      	lsls	r3, r3, #21
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	d100      	bne.n	8008c10 <HAL_GPIO_Init+0x174>
 8008c0e:	e09a      	b.n	8008d46 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c10:	4b54      	ldr	r3, [pc, #336]	; (8008d64 <HAL_GPIO_Init+0x2c8>)
 8008c12:	699a      	ldr	r2, [r3, #24]
 8008c14:	4b53      	ldr	r3, [pc, #332]	; (8008d64 <HAL_GPIO_Init+0x2c8>)
 8008c16:	2101      	movs	r1, #1
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	619a      	str	r2, [r3, #24]
 8008c1c:	4b51      	ldr	r3, [pc, #324]	; (8008d64 <HAL_GPIO_Init+0x2c8>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2201      	movs	r2, #1
 8008c22:	4013      	ands	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008c28:	4a4f      	ldr	r2, [pc, #316]	; (8008d68 <HAL_GPIO_Init+0x2cc>)
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	089b      	lsrs	r3, r3, #2
 8008c2e:	3302      	adds	r3, #2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	589b      	ldr	r3, [r3, r2]
 8008c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	220f      	movs	r2, #15
 8008c40:	409a      	lsls	r2, r3
 8008c42:	0013      	movs	r3, r2
 8008c44:	43da      	mvns	r2, r3
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	2390      	movs	r3, #144	; 0x90
 8008c50:	05db      	lsls	r3, r3, #23
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d013      	beq.n	8008c7e <HAL_GPIO_Init+0x1e2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a44      	ldr	r2, [pc, #272]	; (8008d6c <HAL_GPIO_Init+0x2d0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d00d      	beq.n	8008c7a <HAL_GPIO_Init+0x1de>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a43      	ldr	r2, [pc, #268]	; (8008d70 <HAL_GPIO_Init+0x2d4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d007      	beq.n	8008c76 <HAL_GPIO_Init+0x1da>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a42      	ldr	r2, [pc, #264]	; (8008d74 <HAL_GPIO_Init+0x2d8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d101      	bne.n	8008c72 <HAL_GPIO_Init+0x1d6>
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e006      	b.n	8008c80 <HAL_GPIO_Init+0x1e4>
 8008c72:	2305      	movs	r3, #5
 8008c74:	e004      	b.n	8008c80 <HAL_GPIO_Init+0x1e4>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e002      	b.n	8008c80 <HAL_GPIO_Init+0x1e4>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <HAL_GPIO_Init+0x1e4>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	2103      	movs	r1, #3
 8008c84:	400a      	ands	r2, r1
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	4093      	lsls	r3, r2
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c90:	4935      	ldr	r1, [pc, #212]	; (8008d68 <HAL_GPIO_Init+0x2cc>)
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	089b      	lsrs	r3, r3, #2
 8008c96:	3302      	adds	r3, #2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c9e:	4b36      	ldr	r3, [pc, #216]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	43da      	mvns	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	4013      	ands	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	025b      	lsls	r3, r3, #9
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d003      	beq.n	8008cc2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008cc2:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008cc8:	4b2b      	ldr	r3, [pc, #172]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	43da      	mvns	r2, r3
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d003      	beq.n	8008cec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008cec:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cf2:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	43da      	mvns	r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	2380      	movs	r3, #128	; 0x80
 8008d08:	035b      	lsls	r3, r3, #13
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008d16:	4b18      	ldr	r3, [pc, #96]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008d1c:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	43da      	mvns	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	039b      	lsls	r3, r3, #14
 8008d34:	4013      	ands	r3, r2
 8008d36:	d003      	beq.n	8008d40 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008d40:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <HAL_GPIO_Init+0x2dc>)
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	40da      	lsrs	r2, r3
 8008d54:	1e13      	subs	r3, r2, #0
 8008d56:	d000      	beq.n	8008d5a <HAL_GPIO_Init+0x2be>
 8008d58:	e6a8      	b.n	8008aac <HAL_GPIO_Init+0x10>
  } 
}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	46c0      	nop			; (mov r8, r8)
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b006      	add	sp, #24
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40021000 	.word	0x40021000
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	48000400 	.word	0x48000400
 8008d70:	48000800 	.word	0x48000800
 8008d74:	48000c00 	.word	0x48000c00
 8008d78:	40010400 	.word	0x40010400

08008d7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008d8a:	e0b1      	b.n	8008ef0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	409a      	lsls	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	4013      	ands	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d100      	bne.n	8008da0 <HAL_GPIO_DeInit+0x24>
 8008d9e:	e0a4      	b.n	8008eea <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008da0:	4a59      	ldr	r2, [pc, #356]	; (8008f08 <HAL_GPIO_DeInit+0x18c>)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	089b      	lsrs	r3, r3, #2
 8008da6:	3302      	adds	r3, #2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	589b      	ldr	r3, [r3, r2]
 8008dac:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2203      	movs	r2, #3
 8008db2:	4013      	ands	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	220f      	movs	r2, #15
 8008db8:	409a      	lsls	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	2390      	movs	r3, #144	; 0x90
 8008dc4:	05db      	lsls	r3, r3, #23
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d013      	beq.n	8008df2 <HAL_GPIO_DeInit+0x76>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a4f      	ldr	r2, [pc, #316]	; (8008f0c <HAL_GPIO_DeInit+0x190>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00d      	beq.n	8008dee <HAL_GPIO_DeInit+0x72>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a4e      	ldr	r2, [pc, #312]	; (8008f10 <HAL_GPIO_DeInit+0x194>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d007      	beq.n	8008dea <HAL_GPIO_DeInit+0x6e>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a4d      	ldr	r2, [pc, #308]	; (8008f14 <HAL_GPIO_DeInit+0x198>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d101      	bne.n	8008de6 <HAL_GPIO_DeInit+0x6a>
 8008de2:	2303      	movs	r3, #3
 8008de4:	e006      	b.n	8008df4 <HAL_GPIO_DeInit+0x78>
 8008de6:	2305      	movs	r3, #5
 8008de8:	e004      	b.n	8008df4 <HAL_GPIO_DeInit+0x78>
 8008dea:	2302      	movs	r3, #2
 8008dec:	e002      	b.n	8008df4 <HAL_GPIO_DeInit+0x78>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <HAL_GPIO_DeInit+0x78>
 8008df2:	2300      	movs	r3, #0
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	2103      	movs	r1, #3
 8008df8:	400a      	ands	r2, r1
 8008dfa:	0092      	lsls	r2, r2, #2
 8008dfc:	4093      	lsls	r3, r2
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d132      	bne.n	8008e6a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008e04:	4b44      	ldr	r3, [pc, #272]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	43d9      	mvns	r1, r3
 8008e0c:	4b42      	ldr	r3, [pc, #264]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e0e:	400a      	ands	r2, r1
 8008e10:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e12:	4b41      	ldr	r3, [pc, #260]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	43d9      	mvns	r1, r3
 8008e1a:	4b3f      	ldr	r3, [pc, #252]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e1c:	400a      	ands	r2, r1
 8008e1e:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008e20:	4b3d      	ldr	r3, [pc, #244]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	43d9      	mvns	r1, r3
 8008e28:	4b3b      	ldr	r3, [pc, #236]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e2e:	4b3a      	ldr	r3, [pc, #232]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	43d9      	mvns	r1, r3
 8008e36:	4b38      	ldr	r3, [pc, #224]	; (8008f18 <HAL_GPIO_DeInit+0x19c>)
 8008e38:	400a      	ands	r2, r1
 8008e3a:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	4013      	ands	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	220f      	movs	r2, #15
 8008e46:	409a      	lsls	r2, r3
 8008e48:	0013      	movs	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008e4c:	4a2e      	ldr	r2, [pc, #184]	; (8008f08 <HAL_GPIO_DeInit+0x18c>)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	089b      	lsrs	r3, r3, #2
 8008e52:	3302      	adds	r3, #2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	589a      	ldr	r2, [r3, r2]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	43d9      	mvns	r1, r3
 8008e5c:	482a      	ldr	r0, [pc, #168]	; (8008f08 <HAL_GPIO_DeInit+0x18c>)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	089b      	lsrs	r3, r3, #2
 8008e62:	400a      	ands	r2, r1
 8008e64:	3302      	adds	r3, #2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	0052      	lsls	r2, r2, #1
 8008e72:	2103      	movs	r1, #3
 8008e74:	4091      	lsls	r1, r2
 8008e76:	000a      	movs	r2, r1
 8008e78:	43d2      	mvns	r2, r2
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	08da      	lsrs	r2, r3, #3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3208      	adds	r2, #8
 8008e88:	0092      	lsls	r2, r2, #2
 8008e8a:	58d3      	ldr	r3, [r2, r3]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	2107      	movs	r1, #7
 8008e90:	400a      	ands	r2, r1
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	210f      	movs	r1, #15
 8008e96:	4091      	lsls	r1, r2
 8008e98:	000a      	movs	r2, r1
 8008e9a:	43d1      	mvns	r1, r2
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	08d2      	lsrs	r2, r2, #3
 8008ea0:	4019      	ands	r1, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3208      	adds	r2, #8
 8008ea6:	0092      	lsls	r2, r2, #2
 8008ea8:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	0052      	lsls	r2, r2, #1
 8008eb2:	2103      	movs	r1, #3
 8008eb4:	4091      	lsls	r1, r2
 8008eb6:	000a      	movs	r2, r1
 8008eb8:	43d2      	mvns	r2, r2
 8008eba:	401a      	ands	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4091      	lsls	r1, r2
 8008eca:	000a      	movs	r2, r1
 8008ecc:	43d2      	mvns	r2, r2
 8008ece:	401a      	ands	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	0052      	lsls	r2, r2, #1
 8008edc:	2103      	movs	r1, #3
 8008ede:	4091      	lsls	r1, r2
 8008ee0:	000a      	movs	r2, r1
 8008ee2:	43d2      	mvns	r2, r2
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]

    }

    position++;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3301      	adds	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	40da      	lsrs	r2, r3
 8008ef6:	1e13      	subs	r3, r2, #0
 8008ef8:	d000      	beq.n	8008efc <HAL_GPIO_DeInit+0x180>
 8008efa:	e747      	b.n	8008d8c <HAL_GPIO_DeInit+0x10>
  }
}
 8008efc:	46c0      	nop			; (mov r8, r8)
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b006      	add	sp, #24
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	48000400 	.word	0x48000400
 8008f10:	48000800 	.word	0x48000800
 8008f14:	48000c00 	.word	0x48000c00
 8008f18:	40010400 	.word	0x40010400

08008f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	0008      	movs	r0, r1
 8008f26:	0011      	movs	r1, r2
 8008f28:	1cbb      	adds	r3, r7, #2
 8008f2a:	1c02      	adds	r2, r0, #0
 8008f2c:	801a      	strh	r2, [r3, #0]
 8008f2e:	1c7b      	adds	r3, r7, #1
 8008f30:	1c0a      	adds	r2, r1, #0
 8008f32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f34:	1c7b      	adds	r3, r7, #1
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f3c:	1cbb      	adds	r3, r7, #2
 8008f3e:	881a      	ldrh	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008f44:	e003      	b.n	8008f4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f46:	1cbb      	adds	r3, r7, #2
 8008f48:	881a      	ldrh	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008f4e:	46c0      	nop			; (mov r8, r8)
 8008f50:	46bd      	mov	sp, r7
 8008f52:	b002      	add	sp, #8
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5a:	b08b      	sub	sp, #44	; 0x2c
 8008f5c:	af06      	add	r7, sp, #24
 8008f5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0ff      	b.n	800916a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a81      	ldr	r2, [pc, #516]	; (8009174 <HAL_PCD_Init+0x21c>)
 8008f6e:	5c9b      	ldrb	r3, [r3, r2]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d108      	bne.n	8008f88 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	23aa      	movs	r3, #170	; 0xaa
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	0018      	movs	r0, r3
 8008f84:	f009 fb6a 	bl	801265c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a7a      	ldr	r2, [pc, #488]	; (8009174 <HAL_PCD_Init+0x21c>)
 8008f8c:	2103      	movs	r1, #3
 8008f8e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	0018      	movs	r0, r3
 8008f96:	f005 fbe5 	bl	800e764 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f9a:	230f      	movs	r3, #15
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e058      	b.n	8009056 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008fa4:	200f      	movs	r0, #15
 8008fa6:	183b      	adds	r3, r7, r0
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	0013      	movs	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	189b      	adds	r3, r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	18cb      	adds	r3, r1, r3
 8008fb8:	3301      	adds	r3, #1
 8008fba:	2201      	movs	r2, #1
 8008fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008fbe:	183b      	adds	r3, r7, r0
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	0013      	movs	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	189b      	adds	r3, r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	183a      	adds	r2, r7, r0
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008fd4:	0004      	movs	r4, r0
 8008fd6:	183b      	adds	r3, r7, r0
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	193b      	adds	r3, r7, r4
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b298      	uxth	r0, r3
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	0013      	movs	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	18cb      	adds	r3, r1, r3
 8008fec:	3336      	adds	r3, #54	; 0x36
 8008fee:	1c02      	adds	r2, r0, #0
 8008ff0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ff2:	193b      	adds	r3, r7, r4
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	1c5a      	adds	r2, r3, #1
 8008ffa:	0013      	movs	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	18cb      	adds	r3, r1, r3
 8009004:	3303      	adds	r3, #3
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800900a:	193b      	adds	r3, r7, r4
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	6879      	ldr	r1, [r7, #4]
 8009010:	0013      	movs	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	189b      	adds	r3, r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	18cb      	adds	r3, r1, r3
 800901a:	3338      	adds	r3, #56	; 0x38
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009020:	193b      	adds	r3, r7, r4
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	0013      	movs	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	189b      	adds	r3, r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	18cb      	adds	r3, r1, r3
 8009030:	333c      	adds	r3, #60	; 0x3c
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009036:	193b      	adds	r3, r7, r4
 8009038:	781a      	ldrb	r2, [r3, #0]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	0013      	movs	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	189b      	adds	r3, r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	18cb      	adds	r3, r1, r3
 8009046:	3340      	adds	r3, #64	; 0x40
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800904c:	193b      	adds	r3, r7, r4
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	193b      	adds	r3, r7, r4
 8009052:	3201      	adds	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
 8009056:	210f      	movs	r1, #15
 8009058:	187b      	adds	r3, r7, r1
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d39f      	bcc.n	8008fa4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009064:	187b      	adds	r3, r7, r1
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e056      	b.n	800911a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800906c:	240f      	movs	r4, #15
 800906e:	193b      	adds	r3, r7, r4
 8009070:	781a      	ldrb	r2, [r3, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	236a      	movs	r3, #106	; 0x6a
 8009076:	33ff      	adds	r3, #255	; 0xff
 8009078:	0019      	movs	r1, r3
 800907a:	0013      	movs	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	189b      	adds	r3, r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	18c3      	adds	r3, r0, r3
 8009084:	185b      	adds	r3, r3, r1
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800908a:	193b      	adds	r3, r7, r4
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	23b4      	movs	r3, #180	; 0xb4
 8009092:	0059      	lsls	r1, r3, #1
 8009094:	0013      	movs	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	189b      	adds	r3, r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	18c3      	adds	r3, r0, r3
 800909e:	185b      	adds	r3, r3, r1
 80090a0:	193a      	adds	r2, r7, r4
 80090a2:	7812      	ldrb	r2, [r2, #0]
 80090a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80090a6:	193b      	adds	r3, r7, r4
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	236c      	movs	r3, #108	; 0x6c
 80090ae:	33ff      	adds	r3, #255	; 0xff
 80090b0:	0019      	movs	r1, r3
 80090b2:	0013      	movs	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	00db      	lsls	r3, r3, #3
 80090ba:	18c3      	adds	r3, r0, r3
 80090bc:	185b      	adds	r3, r3, r1
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80090c2:	193b      	adds	r3, r7, r4
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	23bc      	movs	r3, #188	; 0xbc
 80090ca:	0059      	lsls	r1, r3, #1
 80090cc:	0013      	movs	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	189b      	adds	r3, r3, r2
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	18c3      	adds	r3, r0, r3
 80090d6:	185b      	adds	r3, r3, r1
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80090dc:	193b      	adds	r3, r7, r4
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	23be      	movs	r3, #190	; 0xbe
 80090e4:	0059      	lsls	r1, r3, #1
 80090e6:	0013      	movs	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	18c3      	adds	r3, r0, r3
 80090f0:	185b      	adds	r3, r3, r1
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80090f6:	193b      	adds	r3, r7, r4
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	23c0      	movs	r3, #192	; 0xc0
 80090fe:	0059      	lsls	r1, r3, #1
 8009100:	0013      	movs	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	189b      	adds	r3, r3, r2
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	18c3      	adds	r3, r0, r3
 800910a:	185b      	adds	r3, r3, r1
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009110:	193b      	adds	r3, r7, r4
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	193b      	adds	r3, r7, r4
 8009116:	3201      	adds	r2, #1
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	230f      	movs	r3, #15
 800911c:	18fb      	adds	r3, r7, r3
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	429a      	cmp	r2, r3
 8009126:	d3a1      	bcc.n	800906c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	466a      	mov	r2, sp
 8009130:	0011      	movs	r1, r2
 8009132:	001a      	movs	r2, r3
 8009134:	3210      	adds	r2, #16
 8009136:	ca70      	ldmia	r2!, {r4, r5, r6}
 8009138:	c170      	stmia	r1!, {r4, r5, r6}
 800913a:	ca30      	ldmia	r2!, {r4, r5}
 800913c:	c130      	stmia	r1!, {r4, r5}
 800913e:	6859      	ldr	r1, [r3, #4]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f005 fb28 	bl	800e798 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2224      	movs	r2, #36	; 0x24
 800914c:	2100      	movs	r1, #0
 800914e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a08      	ldr	r2, [pc, #32]	; (8009174 <HAL_PCD_Init+0x21c>)
 8009154:	2101      	movs	r1, #1
 8009156:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d103      	bne.n	8009168 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	0018      	movs	r0, r3
 8009164:	f001 fb56 	bl	800a814 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	0018      	movs	r0, r3
 800916c:	46bd      	mov	sp, r7
 800916e:	b005      	add	sp, #20
 8009170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	000002a9 	.word	0x000002a9

08009178 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	23aa      	movs	r3, #170	; 0xaa
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	5cd3      	ldrb	r3, [r2, r3]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_PCD_Start+0x18>
 800918c:	2302      	movs	r3, #2
 800918e:	e014      	b.n	80091ba <HAL_PCD_Start+0x42>
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	23aa      	movs	r3, #170	; 0xaa
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	2101      	movs	r1, #1
 8009198:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	0018      	movs	r0, r3
 80091a0:	f005 faca 	bl	800e738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	0018      	movs	r0, r3
 80091aa:	f007 fa6f 	bl	801068c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	23aa      	movs	r3, #170	; 0xaa
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	2100      	movs	r1, #0
 80091b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b002      	add	sp, #8
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f007 fa71 	bl	80106b8 <USB_ReadInterrupts>
 80091d6:	0002      	movs	r2, r0
 80091d8:	2380      	movs	r3, #128	; 0x80
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	401a      	ands	r2, r3
 80091de:	2380      	movs	r3, #128	; 0x80
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d103      	bne.n	80091ee <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	0018      	movs	r0, r3
 80091ea:	f000 fbbb 	bl	8009964 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	0018      	movs	r0, r3
 80091f4:	f007 fa60 	bl	80106b8 <USB_ReadInterrupts>
 80091f8:	0002      	movs	r2, r0
 80091fa:	2380      	movs	r3, #128	; 0x80
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	401a      	ands	r2, r3
 8009200:	2380      	movs	r3, #128	; 0x80
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	429a      	cmp	r2, r3
 8009206:	d114      	bne.n	8009232 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2244      	movs	r2, #68	; 0x44
 800920e:	5a9b      	ldrh	r3, [r3, r2]
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	49a2      	ldr	r1, [pc, #648]	; (80094a0 <HAL_PCD_IRQHandler+0x2dc>)
 8009218:	400a      	ands	r2, r1
 800921a:	b291      	uxth	r1, r2
 800921c:	2244      	movs	r2, #68	; 0x44
 800921e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	0018      	movs	r0, r3
 8009224:	f009 faa5 	bl	8012772 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2100      	movs	r1, #0
 800922c:	0018      	movs	r0, r3
 800922e:	f000 f945 	bl	80094bc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	0018      	movs	r0, r3
 8009238:	f007 fa3e 	bl	80106b8 <USB_ReadInterrupts>
 800923c:	0002      	movs	r2, r0
 800923e:	2380      	movs	r3, #128	; 0x80
 8009240:	01db      	lsls	r3, r3, #7
 8009242:	401a      	ands	r2, r3
 8009244:	2380      	movs	r3, #128	; 0x80
 8009246:	01db      	lsls	r3, r3, #7
 8009248:	429a      	cmp	r2, r3
 800924a:	d10b      	bne.n	8009264 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2244      	movs	r2, #68	; 0x44
 8009252:	5a9b      	ldrh	r3, [r3, r2]
 8009254:	b29a      	uxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4992      	ldr	r1, [pc, #584]	; (80094a4 <HAL_PCD_IRQHandler+0x2e0>)
 800925c:	400a      	ands	r2, r1
 800925e:	b291      	uxth	r1, r2
 8009260:	2244      	movs	r2, #68	; 0x44
 8009262:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	0018      	movs	r0, r3
 800926a:	f007 fa25 	bl	80106b8 <USB_ReadInterrupts>
 800926e:	0002      	movs	r2, r0
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	019b      	lsls	r3, r3, #6
 8009274:	401a      	ands	r2, r3
 8009276:	2380      	movs	r3, #128	; 0x80
 8009278:	019b      	lsls	r3, r3, #6
 800927a:	429a      	cmp	r2, r3
 800927c:	d10b      	bne.n	8009296 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2244      	movs	r2, #68	; 0x44
 8009284:	5a9b      	ldrh	r3, [r3, r2]
 8009286:	b29a      	uxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4986      	ldr	r1, [pc, #536]	; (80094a8 <HAL_PCD_IRQHandler+0x2e4>)
 800928e:	400a      	ands	r2, r1
 8009290:	b291      	uxth	r1, r2
 8009292:	2244      	movs	r2, #68	; 0x44
 8009294:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	0018      	movs	r0, r3
 800929c:	f007 fa0c 	bl	80106b8 <USB_ReadInterrupts>
 80092a0:	0002      	movs	r2, r0
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	015b      	lsls	r3, r3, #5
 80092a6:	401a      	ands	r2, r3
 80092a8:	2380      	movs	r3, #128	; 0x80
 80092aa:	015b      	lsls	r3, r3, #5
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d137      	bne.n	8009320 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2240      	movs	r2, #64	; 0x40
 80092b6:	5a9b      	ldrh	r3, [r3, r2]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2104      	movs	r1, #4
 80092c0:	438a      	bics	r2, r1
 80092c2:	b291      	uxth	r1, r2
 80092c4:	2240      	movs	r2, #64	; 0x40
 80092c6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2240      	movs	r2, #64	; 0x40
 80092ce:	5a9b      	ldrh	r3, [r3, r2]
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2108      	movs	r1, #8
 80092d8:	438a      	bics	r2, r1
 80092da:	b291      	uxth	r1, r2
 80092dc:	2240      	movs	r2, #64	; 0x40
 80092de:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	23b8      	movs	r3, #184	; 0xb8
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	5cd3      	ldrb	r3, [r2, r3]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d109      	bne.n	8009300 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	23b8      	movs	r3, #184	; 0xb8
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	2100      	movs	r1, #0
 80092f4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2100      	movs	r1, #0
 80092fa:	0018      	movs	r0, r3
 80092fc:	f001 fab4 	bl	800a868 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	0018      	movs	r0, r3
 8009304:	f009 fa76 	bl	80127f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2244      	movs	r2, #68	; 0x44
 800930e:	5a9b      	ldrh	r3, [r3, r2]
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4965      	ldr	r1, [pc, #404]	; (80094ac <HAL_PCD_IRQHandler+0x2e8>)
 8009318:	400a      	ands	r2, r1
 800931a:	b291      	uxth	r1, r2
 800931c:	2244      	movs	r2, #68	; 0x44
 800931e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	0018      	movs	r0, r3
 8009326:	f007 f9c7 	bl	80106b8 <USB_ReadInterrupts>
 800932a:	0002      	movs	r2, r0
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	401a      	ands	r2, r3
 8009332:	2380      	movs	r3, #128	; 0x80
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	429a      	cmp	r2, r3
 8009338:	d127      	bne.n	800938a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2240      	movs	r2, #64	; 0x40
 8009340:	5a9b      	ldrh	r3, [r3, r2]
 8009342:	b29a      	uxth	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2108      	movs	r1, #8
 800934a:	430a      	orrs	r2, r1
 800934c:	b291      	uxth	r1, r2
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2244      	movs	r2, #68	; 0x44
 8009358:	5a9b      	ldrh	r3, [r3, r2]
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4953      	ldr	r1, [pc, #332]	; (80094b0 <HAL_PCD_IRQHandler+0x2ec>)
 8009362:	400a      	ands	r2, r1
 8009364:	b291      	uxth	r1, r2
 8009366:	2244      	movs	r2, #68	; 0x44
 8009368:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2240      	movs	r2, #64	; 0x40
 8009370:	5a9b      	ldrh	r3, [r3, r2]
 8009372:	b29a      	uxth	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2104      	movs	r1, #4
 800937a:	430a      	orrs	r2, r1
 800937c:	b291      	uxth	r1, r2
 800937e:	2240      	movs	r2, #64	; 0x40
 8009380:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0018      	movs	r0, r3
 8009386:	f009 fa19 	bl	80127bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	0018      	movs	r0, r3
 8009390:	f007 f992 	bl	80106b8 <USB_ReadInterrupts>
 8009394:	0003      	movs	r3, r0
 8009396:	2280      	movs	r2, #128	; 0x80
 8009398:	4013      	ands	r3, r2
 800939a:	2b80      	cmp	r3, #128	; 0x80
 800939c:	d145      	bne.n	800942a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2244      	movs	r2, #68	; 0x44
 80093a4:	5a9b      	ldrh	r3, [r3, r2]
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2180      	movs	r1, #128	; 0x80
 80093ae:	438a      	bics	r2, r1
 80093b0:	b291      	uxth	r1, r2
 80093b2:	2244      	movs	r2, #68	; 0x44
 80093b4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	23b8      	movs	r3, #184	; 0xb8
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	5cd3      	ldrb	r3, [r2, r3]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d12f      	bne.n	8009422 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2240      	movs	r2, #64	; 0x40
 80093c8:	5a9b      	ldrh	r3, [r3, r2]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2104      	movs	r1, #4
 80093d2:	430a      	orrs	r2, r1
 80093d4:	b291      	uxth	r1, r2
 80093d6:	2240      	movs	r2, #64	; 0x40
 80093d8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2240      	movs	r2, #64	; 0x40
 80093e0:	5a9b      	ldrh	r3, [r3, r2]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2108      	movs	r1, #8
 80093ea:	430a      	orrs	r2, r1
 80093ec:	b291      	uxth	r1, r2
 80093ee:	2240      	movs	r2, #64	; 0x40
 80093f0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	23b8      	movs	r3, #184	; 0xb8
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	2101      	movs	r1, #1
 80093fa:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2254      	movs	r2, #84	; 0x54
 8009402:	5a9b      	ldrh	r3, [r3, r2]
 8009404:	b29b      	uxth	r3, r3
 8009406:	089b      	lsrs	r3, r3, #2
 8009408:	223c      	movs	r2, #60	; 0x3c
 800940a:	4013      	ands	r3, r2
 800940c:	0019      	movs	r1, r3
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	23b9      	movs	r3, #185	; 0xb9
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2101      	movs	r1, #1
 800941a:	0018      	movs	r0, r3
 800941c:	f001 fa24 	bl	800a868 <HAL_PCDEx_LPM_Callback>
 8009420:	e003      	b.n	800942a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	0018      	movs	r0, r3
 8009426:	f009 f9c9 	bl	80127bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	0018      	movs	r0, r3
 8009430:	f007 f942 	bl	80106b8 <USB_ReadInterrupts>
 8009434:	0002      	movs	r2, r0
 8009436:	2380      	movs	r3, #128	; 0x80
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	401a      	ands	r2, r3
 800943c:	2380      	movs	r3, #128	; 0x80
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	429a      	cmp	r2, r3
 8009442:	d10f      	bne.n	8009464 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2244      	movs	r2, #68	; 0x44
 800944a:	5a9b      	ldrh	r3, [r3, r2]
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4918      	ldr	r1, [pc, #96]	; (80094b4 <HAL_PCD_IRQHandler+0x2f0>)
 8009454:	400a      	ands	r2, r1
 8009456:	b291      	uxth	r1, r2
 8009458:	2244      	movs	r2, #68	; 0x44
 800945a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	0018      	movs	r0, r3
 8009460:	f009 f978 	bl	8012754 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	0018      	movs	r0, r3
 800946a:	f007 f925 	bl	80106b8 <USB_ReadInterrupts>
 800946e:	0002      	movs	r2, r0
 8009470:	2380      	movs	r3, #128	; 0x80
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	401a      	ands	r2, r3
 8009476:	2380      	movs	r3, #128	; 0x80
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	d10b      	bne.n	8009496 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2244      	movs	r2, #68	; 0x44
 8009484:	5a9b      	ldrh	r3, [r3, r2]
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	490a      	ldr	r1, [pc, #40]	; (80094b8 <HAL_PCD_IRQHandler+0x2f4>)
 800948e:	400a      	ands	r2, r1
 8009490:	b291      	uxth	r1, r2
 8009492:	2244      	movs	r2, #68	; 0x44
 8009494:	5299      	strh	r1, [r3, r2]
  }
}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	46bd      	mov	sp, r7
 800949a:	b002      	add	sp, #8
 800949c:	bd80      	pop	{r7, pc}
 800949e:	46c0      	nop			; (mov r8, r8)
 80094a0:	fffffbff 	.word	0xfffffbff
 80094a4:	ffffbfff 	.word	0xffffbfff
 80094a8:	ffffdfff 	.word	0xffffdfff
 80094ac:	ffffefff 	.word	0xffffefff
 80094b0:	fffff7ff 	.word	0xfffff7ff
 80094b4:	fffffdff 	.word	0xfffffdff
 80094b8:	fffffeff 	.word	0xfffffeff

080094bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	000a      	movs	r2, r1
 80094c6:	1cfb      	adds	r3, r7, #3
 80094c8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	23aa      	movs	r3, #170	; 0xaa
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	5cd3      	ldrb	r3, [r2, r3]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_PCD_SetAddress+0x1e>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e017      	b.n	800950a <HAL_PCD_SetAddress+0x4e>
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	23aa      	movs	r3, #170	; 0xaa
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	2101      	movs	r1, #1
 80094e2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	1cfa      	adds	r2, r7, #3
 80094e8:	2124      	movs	r1, #36	; 0x24
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	1cfb      	adds	r3, r7, #3
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	0019      	movs	r1, r3
 80094f8:	0010      	movs	r0, r2
 80094fa:	f007 f8b3 	bl	8010664 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	23aa      	movs	r3, #170	; 0xaa
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	2100      	movs	r1, #0
 8009506:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b002      	add	sp, #8
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009512:	b590      	push	{r4, r7, lr}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	000c      	movs	r4, r1
 800951c:	0010      	movs	r0, r2
 800951e:	0019      	movs	r1, r3
 8009520:	1cfb      	adds	r3, r7, #3
 8009522:	1c22      	adds	r2, r4, #0
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	003b      	movs	r3, r7
 8009528:	1c02      	adds	r2, r0, #0
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	1cbb      	adds	r3, r7, #2
 800952e:	1c0a      	adds	r2, r1, #0
 8009530:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009532:	230b      	movs	r3, #11
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	2200      	movs	r2, #0
 8009538:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800953a:	1cfb      	adds	r3, r7, #3
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b25b      	sxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	da0f      	bge.n	8009564 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009544:	1cfb      	adds	r3, r7, #3
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2207      	movs	r2, #7
 800954a:	4013      	ands	r3, r2
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	0013      	movs	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	189b      	adds	r3, r3, r2
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	18d3      	adds	r3, r2, r3
 800955a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	705a      	strb	r2, [r3, #1]
 8009562:	e00f      	b.n	8009584 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009564:	1cfb      	adds	r3, r7, #3
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2207      	movs	r2, #7
 800956a:	401a      	ands	r2, r3
 800956c:	0013      	movs	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	189b      	adds	r3, r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	3369      	adds	r3, #105	; 0x69
 8009576:	33ff      	adds	r3, #255	; 0xff
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	18d3      	adds	r3, r2, r3
 800957c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009584:	1cfb      	adds	r3, r7, #3
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2207      	movs	r2, #7
 800958a:	4013      	ands	r3, r2
 800958c:	b2da      	uxtb	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009592:	003b      	movs	r3, r7
 8009594:	881a      	ldrh	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1cba      	adds	r2, r7, #2
 800959e:	7812      	ldrb	r2, [r2, #0]
 80095a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80095b4:	1cbb      	adds	r3, r7, #2
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d102      	bne.n	80095c2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	23aa      	movs	r3, #170	; 0xaa
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	5cd3      	ldrb	r3, [r2, r3]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d101      	bne.n	80095d2 <HAL_PCD_EP_Open+0xc0>
 80095ce:	2302      	movs	r3, #2
 80095d0:	e013      	b.n	80095fa <HAL_PCD_EP_Open+0xe8>
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	23aa      	movs	r3, #170	; 0xaa
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	2101      	movs	r1, #1
 80095da:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	0011      	movs	r1, r2
 80095e4:	0018      	movs	r0, r3
 80095e6:	f005 f903 	bl	800e7f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	23aa      	movs	r3, #170	; 0xaa
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	2100      	movs	r1, #0
 80095f2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80095f4:	230b      	movs	r3, #11
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	781b      	ldrb	r3, [r3, #0]
}
 80095fa:	0018      	movs	r0, r3
 80095fc:	46bd      	mov	sp, r7
 80095fe:	b005      	add	sp, #20
 8009600:	bd90      	pop	{r4, r7, pc}

08009602 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	000a      	movs	r2, r1
 800960c:	1cfb      	adds	r3, r7, #3
 800960e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009610:	1cfb      	adds	r3, r7, #3
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	b25b      	sxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	da0f      	bge.n	800963a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800961a:	1cfb      	adds	r3, r7, #3
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2207      	movs	r2, #7
 8009620:	4013      	ands	r3, r2
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	0013      	movs	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	189b      	adds	r3, r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	18d3      	adds	r3, r2, r3
 8009630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2201      	movs	r2, #1
 8009636:	705a      	strb	r2, [r3, #1]
 8009638:	e00f      	b.n	800965a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800963a:	1cfb      	adds	r3, r7, #3
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2207      	movs	r2, #7
 8009640:	401a      	ands	r2, r3
 8009642:	0013      	movs	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	189b      	adds	r3, r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	3369      	adds	r3, #105	; 0x69
 800964c:	33ff      	adds	r3, #255	; 0xff
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	18d3      	adds	r3, r2, r3
 8009652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800965a:	1cfb      	adds	r3, r7, #3
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2207      	movs	r2, #7
 8009660:	4013      	ands	r3, r2
 8009662:	b2da      	uxtb	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	23aa      	movs	r3, #170	; 0xaa
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	5cd3      	ldrb	r3, [r2, r3]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d101      	bne.n	8009678 <HAL_PCD_EP_Close+0x76>
 8009674:	2302      	movs	r3, #2
 8009676:	e011      	b.n	800969c <HAL_PCD_EP_Close+0x9a>
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	23aa      	movs	r3, #170	; 0xaa
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	2101      	movs	r1, #1
 8009680:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	0011      	movs	r1, r2
 800968a:	0018      	movs	r0, r3
 800968c:	f005 fc06 	bl	800ee9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	23aa      	movs	r3, #170	; 0xaa
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	2100      	movs	r1, #0
 8009698:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	0018      	movs	r0, r3
 800969e:	46bd      	mov	sp, r7
 80096a0:	b004      	add	sp, #16
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	200b      	movs	r0, #11
 80096b2:	183b      	adds	r3, r7, r0
 80096b4:	1c0a      	adds	r2, r1, #0
 80096b6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096b8:	0001      	movs	r1, r0
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2207      	movs	r2, #7
 80096c0:	401a      	ands	r2, r3
 80096c2:	0013      	movs	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	189b      	adds	r3, r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	3369      	adds	r3, #105	; 0x69
 80096cc:	33ff      	adds	r3, #255	; 0xff
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	18d3      	adds	r3, r2, r3
 80096d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2200      	movs	r2, #0
 80096e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2200      	movs	r2, #0
 80096ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096ec:	187b      	adds	r3, r7, r1
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2207      	movs	r2, #7
 80096f2:	4013      	ands	r3, r2
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80096fa:	187b      	adds	r3, r7, r1
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2207      	movs	r2, #7
 8009700:	4013      	ands	r3, r2
 8009702:	d107      	bne.n	8009714 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	0011      	movs	r1, r2
 800970c:	0018      	movs	r0, r3
 800970e:	f005 fd85 	bl	800f21c <USB_EPStartXfer>
 8009712:	e006      	b.n	8009722 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	0011      	movs	r1, r2
 800971c:	0018      	movs	r0, r3
 800971e:	f005 fd7d 	bl	800f21c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	0018      	movs	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	b006      	add	sp, #24
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	000a      	movs	r2, r1
 8009736:	1cfb      	adds	r3, r7, #3
 8009738:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800973a:	1cfb      	adds	r3, r7, #3
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2207      	movs	r2, #7
 8009740:	401a      	ands	r2, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	23c2      	movs	r3, #194	; 0xc2
 8009746:	0059      	lsls	r1, r3, #1
 8009748:	0013      	movs	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	189b      	adds	r3, r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	18c3      	adds	r3, r0, r3
 8009752:	185b      	adds	r3, r3, r1
 8009754:	681b      	ldr	r3, [r3, #0]
}
 8009756:	0018      	movs	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	b002      	add	sp, #8
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b086      	sub	sp, #24
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	200b      	movs	r0, #11
 800976c:	183b      	adds	r3, r7, r0
 800976e:	1c0a      	adds	r2, r1, #0
 8009770:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009772:	183b      	adds	r3, r7, r0
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2207      	movs	r2, #7
 8009778:	4013      	ands	r3, r2
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	0013      	movs	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	189b      	adds	r3, r3, r2
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2224      	movs	r2, #36	; 0x24
 800979a:	2101      	movs	r1, #1
 800979c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	2200      	movs	r2, #0
 80097a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2201      	movs	r2, #1
 80097ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097b0:	183b      	adds	r3, r7, r0
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	2207      	movs	r2, #7
 80097b6:	4013      	ands	r3, r2
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097be:	183b      	adds	r3, r7, r0
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2207      	movs	r2, #7
 80097c4:	4013      	ands	r3, r2
 80097c6:	d107      	bne.n	80097d8 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	0011      	movs	r1, r2
 80097d0:	0018      	movs	r0, r3
 80097d2:	f005 fd23 	bl	800f21c <USB_EPStartXfer>
 80097d6:	e006      	b.n	80097e6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	0011      	movs	r1, r2
 80097e0:	0018      	movs	r0, r3
 80097e2:	f005 fd1b 	bl	800f21c <USB_EPStartXfer>
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b006      	add	sp, #24
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	000a      	movs	r2, r1
 80097fa:	1cfb      	adds	r3, r7, #3
 80097fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80097fe:	1cfb      	adds	r3, r7, #3
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2207      	movs	r2, #7
 8009804:	401a      	ands	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d901      	bls.n	8009812 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e046      	b.n	80098a0 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009812:	1cfb      	adds	r3, r7, #3
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b25b      	sxtb	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	da0f      	bge.n	800983c <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800981c:	1cfb      	adds	r3, r7, #3
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2207      	movs	r2, #7
 8009822:	4013      	ands	r3, r2
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	0013      	movs	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	189b      	adds	r3, r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	18d3      	adds	r3, r2, r3
 8009832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	705a      	strb	r2, [r3, #1]
 800983a:	e00d      	b.n	8009858 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800983c:	1cfb      	adds	r3, r7, #3
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	0013      	movs	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	189b      	adds	r3, r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	3369      	adds	r3, #105	; 0x69
 800984a:	33ff      	adds	r3, #255	; 0xff
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	18d3      	adds	r3, r2, r3
 8009850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2201      	movs	r2, #1
 800985c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800985e:	1cfb      	adds	r3, r7, #3
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2207      	movs	r2, #7
 8009864:	4013      	ands	r3, r2
 8009866:	b2da      	uxtb	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	23aa      	movs	r3, #170	; 0xaa
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	5cd3      	ldrb	r3, [r2, r3]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_PCD_EP_SetStall+0x8c>
 8009878:	2302      	movs	r3, #2
 800987a:	e011      	b.n	80098a0 <HAL_PCD_EP_SetStall+0xb0>
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	23aa      	movs	r3, #170	; 0xaa
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	2101      	movs	r1, #1
 8009884:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	0011      	movs	r1, r2
 800988e:	0018      	movs	r0, r3
 8009890:	f006 fde6 	bl	8010460 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	23aa      	movs	r3, #170	; 0xaa
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	2100      	movs	r1, #0
 800989c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	0018      	movs	r0, r3
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b004      	add	sp, #16
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	000a      	movs	r2, r1
 80098b2:	1cfb      	adds	r3, r7, #3
 80098b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80098b6:	1cfb      	adds	r3, r7, #3
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	220f      	movs	r2, #15
 80098bc:	401a      	ands	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d901      	bls.n	80098ca <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e048      	b.n	800995c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80098ca:	1cfb      	adds	r3, r7, #3
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b25b      	sxtb	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	da0f      	bge.n	80098f4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098d4:	1cfb      	adds	r3, r7, #3
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2207      	movs	r2, #7
 80098da:	4013      	ands	r3, r2
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	0013      	movs	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	189b      	adds	r3, r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	18d3      	adds	r3, r2, r3
 80098ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	705a      	strb	r2, [r3, #1]
 80098f2:	e00f      	b.n	8009914 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098f4:	1cfb      	adds	r3, r7, #3
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2207      	movs	r2, #7
 80098fa:	401a      	ands	r2, r3
 80098fc:	0013      	movs	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	189b      	adds	r3, r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	3369      	adds	r3, #105	; 0x69
 8009906:	33ff      	adds	r3, #255	; 0xff
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800991a:	1cfb      	adds	r3, r7, #3
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2207      	movs	r2, #7
 8009920:	4013      	ands	r3, r2
 8009922:	b2da      	uxtb	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	23aa      	movs	r3, #170	; 0xaa
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	5cd3      	ldrb	r3, [r2, r3]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d101      	bne.n	8009938 <HAL_PCD_EP_ClrStall+0x90>
 8009934:	2302      	movs	r3, #2
 8009936:	e011      	b.n	800995c <HAL_PCD_EP_ClrStall+0xb4>
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	23aa      	movs	r3, #170	; 0xaa
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	2101      	movs	r1, #1
 8009940:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	0011      	movs	r1, r2
 800994a:	0018      	movs	r0, r3
 800994c:	f006 fdd8 	bl	8010500 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	23aa      	movs	r3, #170	; 0xaa
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	2100      	movs	r1, #0
 8009958:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	0018      	movs	r0, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	b004      	add	sp, #16
 8009962:	bd80      	pop	{r7, pc}

08009964 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009964:	b5b0      	push	{r4, r5, r7, lr}
 8009966:	b08e      	sub	sp, #56	; 0x38
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800996c:	e31c      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
  {
    wIstr = hpcd->Instance->ISTR;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	202e      	movs	r0, #46	; 0x2e
 8009974:	183b      	adds	r3, r7, r0
 8009976:	2144      	movs	r1, #68	; 0x44
 8009978:	5a52      	ldrh	r2, [r2, r1]
 800997a:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800997c:	183b      	adds	r3, r7, r0
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	242d      	movs	r4, #45	; 0x2d
 8009984:	193b      	adds	r3, r7, r4
 8009986:	210f      	movs	r1, #15
 8009988:	400a      	ands	r2, r1
 800998a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800998c:	193b      	adds	r3, r7, r4
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d000      	beq.n	8009996 <PCD_EP_ISR_Handler+0x32>
 8009994:	e15d      	b.n	8009c52 <PCD_EP_ISR_Handler+0x2ee>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009996:	183b      	adds	r3, r7, r0
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	2210      	movs	r2, #16
 800999c:	4013      	ands	r3, r2
 800999e:	d152      	bne.n	8009a46 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	200e      	movs	r0, #14
 80099aa:	183b      	adds	r3, r7, r0
 80099ac:	49da      	ldr	r1, [pc, #872]	; (8009d18 <PCD_EP_ISR_Handler+0x3b4>)
 80099ae:	400a      	ands	r2, r1
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	183a      	adds	r2, r7, r0
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	49d8      	ldr	r1, [pc, #864]	; (8009d1c <PCD_EP_ISR_Handler+0x3b8>)
 80099bc:	430a      	orrs	r2, r1
 80099be:	b292      	uxth	r2, r2
 80099c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3328      	adds	r3, #40	; 0x28
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2250      	movs	r2, #80	; 0x50
 80099ce:	5a9b      	ldrh	r3, [r3, r2]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	001a      	movs	r2, r3
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	18d2      	adds	r2, r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	18d3      	adds	r3, r2, r3
 80099e2:	4acf      	ldr	r2, [pc, #828]	; (8009d20 <PCD_EP_ISR_Handler+0x3bc>)
 80099e4:	4694      	mov	ip, r2
 80099e6:	4463      	add	r3, ip
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	059b      	lsls	r3, r3, #22
 80099ec:	0d9a      	lsrs	r2, r3, #22
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	695a      	ldr	r2, [r3, #20]
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	18d2      	adds	r2, r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2100      	movs	r1, #0
 8009a04:	0018      	movs	r0, r3
 8009a06:	f008 fe87 	bl	8012718 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	; 0x24
 8009a0e:	5c9b      	ldrb	r3, [r3, r2]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d100      	bne.n	8009a18 <PCD_EP_ISR_Handler+0xb4>
 8009a16:	e2c7      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d000      	beq.n	8009a22 <PCD_EP_ISR_Handler+0xbe>
 8009a20:	e2c2      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2224      	movs	r2, #36	; 0x24
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2280      	movs	r2, #128	; 0x80
 8009a2c:	4252      	negs	r2, r2
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	b291      	uxth	r1, r2
 8009a38:	224c      	movs	r2, #76	; 0x4c
 8009a3a:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2224      	movs	r2, #36	; 0x24
 8009a40:	2100      	movs	r1, #0
 8009a42:	5499      	strb	r1, [r3, r2]
 8009a44:	e2b0      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	3369      	adds	r3, #105	; 0x69
 8009a4a:	33ff      	adds	r3, #255	; 0xff
 8009a4c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	212a      	movs	r1, #42	; 0x2a
 8009a54:	187b      	adds	r3, r7, r1
 8009a56:	8812      	ldrh	r2, [r2, #0]
 8009a58:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009a5a:	187b      	adds	r3, r7, r1
 8009a5c:	881a      	ldrh	r2, [r3, #0]
 8009a5e:	2380      	movs	r3, #128	; 0x80
 8009a60:	011b      	lsls	r3, r3, #4
 8009a62:	4013      	ands	r3, r2
 8009a64:	d037      	beq.n	8009ad6 <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2250      	movs	r2, #80	; 0x50
 8009a6c:	5a9b      	ldrh	r3, [r3, r2]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	001a      	movs	r2, r3
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	18d2      	adds	r2, r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	18d3      	adds	r3, r2, r3
 8009a80:	4aa8      	ldr	r2, [pc, #672]	; (8009d24 <PCD_EP_ISR_Handler+0x3c0>)
 8009a82:	4694      	mov	ip, r2
 8009a84:	4463      	add	r3, ip
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	059b      	lsls	r3, r3, #22
 8009a8a:	0d9a      	lsrs	r2, r3, #22
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	22ac      	movs	r2, #172	; 0xac
 8009a98:	0092      	lsls	r2, r2, #2
 8009a9a:	1899      	adds	r1, r3, r2
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f006 fe59 	bl	801075c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	183b      	adds	r3, r7, r0
 8009ab6:	499c      	ldr	r1, [pc, #624]	; (8009d28 <PCD_EP_ISR_Handler+0x3c4>)
 8009ab8:	400a      	ands	r2, r1
 8009aba:	801a      	strh	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	183a      	adds	r2, r7, r0
 8009ac2:	8812      	ldrh	r2, [r2, #0]
 8009ac4:	2180      	movs	r1, #128	; 0x80
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	b292      	uxth	r2, r2
 8009aca:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f008 fdec 	bl	80126ac <HAL_PCD_SetupStageCallback>
 8009ad4:	e268      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009ad6:	232a      	movs	r3, #42	; 0x2a
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	2200      	movs	r2, #0
 8009adc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	db00      	blt.n	8009ae4 <PCD_EP_ISR_Handler+0x180>
 8009ae2:	e261      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	201c      	movs	r0, #28
 8009aee:	183b      	adds	r3, r7, r0
 8009af0:	498d      	ldr	r1, [pc, #564]	; (8009d28 <PCD_EP_ISR_Handler+0x3c4>)
 8009af2:	400a      	ands	r2, r1
 8009af4:	801a      	strh	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	183a      	adds	r2, r7, r0
 8009afc:	8812      	ldrh	r2, [r2, #0]
 8009afe:	2180      	movs	r1, #128	; 0x80
 8009b00:	430a      	orrs	r2, r1
 8009b02:	b292      	uxth	r2, r2
 8009b04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2250      	movs	r2, #80	; 0x50
 8009b0c:	5a9b      	ldrh	r3, [r3, r2]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	001a      	movs	r2, r3
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	18d2      	adds	r2, r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	18d3      	adds	r3, r2, r3
 8009b20:	4a80      	ldr	r2, [pc, #512]	; (8009d24 <PCD_EP_ISR_Handler+0x3c0>)
 8009b22:	4694      	mov	ip, r2
 8009b24:	4463      	add	r3, ip
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	059b      	lsls	r3, r3, #22
 8009b2a:	0d9a      	lsrs	r2, r3, #22
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01a      	beq.n	8009b6e <PCD_EP_ISR_Handler+0x20a>
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d016      	beq.n	8009b6e <PCD_EP_ISR_Handler+0x20a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	6959      	ldr	r1, [r3, #20]
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	f006 fe03 	bl	801075c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	69db      	ldr	r3, [r3, #28]
 8009b5e:	18d2      	adds	r2, r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2100      	movs	r1, #0
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f008 fdb4 	bl	80126d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	61bb      	str	r3, [r7, #24]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2250      	movs	r2, #80	; 0x50
 8009b7a:	5a9b      	ldrh	r3, [r3, r2]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	001a      	movs	r2, r3
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	189b      	adds	r3, r3, r2
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	4a66      	ldr	r2, [pc, #408]	; (8009d24 <PCD_EP_ISR_Handler+0x3c0>)
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	4463      	add	r3, ip
 8009b8e:	617b      	str	r3, [r7, #20]
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d110      	bne.n	8009bba <PCD_EP_ISR_Handler+0x256>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	4a63      	ldr	r2, [pc, #396]	; (8009d2c <PCD_EP_ISR_Handler+0x3c8>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	4a5b      	ldr	r2, [pc, #364]	; (8009d1c <PCD_EP_ISR_Handler+0x3b8>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	801a      	strh	r2, [r3, #0]
 8009bb8:	e02b      	b.n	8009c12 <PCD_EP_ISR_Handler+0x2ae>
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b3e      	cmp	r3, #62	; 0x3e
 8009bc0:	d812      	bhi.n	8009be8 <PCD_EP_ISR_Handler+0x284>
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	085b      	lsrs	r3, r3, #1
 8009bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	d002      	beq.n	8009bda <PCD_EP_ISR_Handler+0x276>
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	029b      	lsls	r3, r3, #10
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	e014      	b.n	8009c12 <PCD_EP_ISR_Handler+0x2ae>
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	633b      	str	r3, [r7, #48]	; 0x30
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	221f      	movs	r2, #31
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	d102      	bne.n	8009c00 <PCD_EP_ISR_Handler+0x29c>
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	029b      	lsls	r3, r3, #10
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	4a44      	ldr	r2, [pc, #272]	; (8009d1c <PCD_EP_ISR_Handler+0x3b8>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	2012      	movs	r0, #18
 8009c1c:	183b      	adds	r3, r7, r0
 8009c1e:	4944      	ldr	r1, [pc, #272]	; (8009d30 <PCD_EP_ISR_Handler+0x3cc>)
 8009c20:	400a      	ands	r2, r1
 8009c22:	801a      	strh	r2, [r3, #0]
 8009c24:	183b      	adds	r3, r7, r0
 8009c26:	183a      	adds	r2, r7, r0
 8009c28:	8812      	ldrh	r2, [r2, #0]
 8009c2a:	2180      	movs	r1, #128	; 0x80
 8009c2c:	0149      	lsls	r1, r1, #5
 8009c2e:	404a      	eors	r2, r1
 8009c30:	801a      	strh	r2, [r3, #0]
 8009c32:	183b      	adds	r3, r7, r0
 8009c34:	183a      	adds	r2, r7, r0
 8009c36:	8812      	ldrh	r2, [r2, #0]
 8009c38:	2180      	movs	r1, #128	; 0x80
 8009c3a:	0189      	lsls	r1, r1, #6
 8009c3c:	404a      	eors	r2, r1
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	183a      	adds	r2, r7, r0
 8009c46:	8812      	ldrh	r2, [r2, #0]
 8009c48:	493a      	ldr	r1, [pc, #232]	; (8009d34 <PCD_EP_ISR_Handler+0x3d0>)
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	b292      	uxth	r2, r2
 8009c4e:	801a      	strh	r2, [r3, #0]
 8009c50:	e1aa      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	001a      	movs	r2, r3
 8009c58:	202d      	movs	r0, #45	; 0x2d
 8009c5a:	183b      	adds	r3, r7, r0
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	18d2      	adds	r2, r2, r3
 8009c62:	212a      	movs	r1, #42	; 0x2a
 8009c64:	187b      	adds	r3, r7, r1
 8009c66:	8812      	ldrh	r2, [r2, #0]
 8009c68:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009c6a:	187b      	adds	r3, r7, r1
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	db00      	blt.n	8009c76 <PCD_EP_ISR_Handler+0x312>
 8009c74:	e10b      	b.n	8009e8e <PCD_EP_ISR_Handler+0x52a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	183b      	adds	r3, r7, r0
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	18d3      	adds	r3, r2, r3
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	2428      	movs	r4, #40	; 0x28
 8009c8a:	193b      	adds	r3, r7, r4
 8009c8c:	4926      	ldr	r1, [pc, #152]	; (8009d28 <PCD_EP_ISR_Handler+0x3c4>)
 8009c8e:	400a      	ands	r2, r1
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	001a      	movs	r2, r3
 8009c98:	183b      	adds	r3, r7, r0
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	18d3      	adds	r3, r2, r3
 8009ca0:	193a      	adds	r2, r7, r4
 8009ca2:	8812      	ldrh	r2, [r2, #0]
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009cac:	183b      	adds	r3, r7, r0
 8009cae:	781a      	ldrb	r2, [r3, #0]
 8009cb0:	0013      	movs	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	189b      	adds	r3, r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	3369      	adds	r3, #105	; 0x69
 8009cba:	33ff      	adds	r3, #255	; 0xff
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	18d3      	adds	r3, r2, r3
 8009cc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	7b1b      	ldrb	r3, [r3, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d136      	bne.n	8009d38 <PCD_EP_ISR_Handler+0x3d4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2250      	movs	r2, #80	; 0x50
 8009cd0:	5a9b      	ldrh	r3, [r3, r2]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	18d2      	adds	r2, r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	18d3      	adds	r3, r2, r3
 8009ce4:	4a0f      	ldr	r2, [pc, #60]	; (8009d24 <PCD_EP_ISR_Handler+0x3c0>)
 8009ce6:	4694      	mov	ip, r2
 8009ce8:	4463      	add	r3, ip
 8009cea:	881a      	ldrh	r2, [r3, #0]
 8009cec:	2436      	movs	r4, #54	; 0x36
 8009cee:	193b      	adds	r3, r7, r4
 8009cf0:	0592      	lsls	r2, r2, #22
 8009cf2:	0d92      	lsrs	r2, r2, #22
 8009cf4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8009cf6:	193b      	adds	r3, r7, r4
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d100      	bne.n	8009d00 <PCD_EP_ISR_Handler+0x39c>
 8009cfe:	e09e      	b.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	6959      	ldr	r1, [r3, #20]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	88da      	ldrh	r2, [r3, #6]
 8009d0c:	193b      	adds	r3, r7, r4
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	f006 fd24 	bl	801075c <USB_ReadPMA>
 8009d14:	e093      	b.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	ffff8f0f 	.word	0xffff8f0f
 8009d1c:	ffff8000 	.word	0xffff8000
 8009d20:	00000402 	.word	0x00000402
 8009d24:	00000406 	.word	0x00000406
 8009d28:	00000f8f 	.word	0x00000f8f
 8009d2c:	ffff83ff 	.word	0xffff83ff
 8009d30:	ffffbf8f 	.word	0xffffbf8f
 8009d34:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	78db      	ldrb	r3, [r3, #3]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d10c      	bne.n	8009d5a <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009d40:	2336      	movs	r3, #54	; 0x36
 8009d42:	18fc      	adds	r4, r7, r3
 8009d44:	232a      	movs	r3, #42	; 0x2a
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	881a      	ldrh	r2, [r3, #0]
 8009d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f000 f944 	bl	8009fdc <HAL_PCD_EP_DB_Receive>
 8009d54:	0003      	movs	r3, r0
 8009d56:	8023      	strh	r3, [r4, #0]
 8009d58:	e071      	b.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	001a      	movs	r2, r3
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	18d3      	adds	r3, r2, r3
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	2022      	movs	r0, #34	; 0x22
 8009d6e:	183b      	adds	r3, r7, r0
 8009d70:	4994      	ldr	r1, [pc, #592]	; (8009fc4 <PCD_EP_ISR_Handler+0x660>)
 8009d72:	400a      	ands	r2, r1
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	001a      	movs	r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	18d3      	adds	r3, r2, r3
 8009d84:	183a      	adds	r2, r7, r0
 8009d86:	8812      	ldrh	r2, [r2, #0]
 8009d88:	498f      	ldr	r1, [pc, #572]	; (8009fc8 <PCD_EP_ISR_Handler+0x664>)
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	b292      	uxth	r2, r2
 8009d8e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	001a      	movs	r2, r3
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	18d3      	adds	r3, r2, r3
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	001a      	movs	r2, r3
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	01db      	lsls	r3, r3, #7
 8009da8:	4013      	ands	r3, r2
 8009daa:	d024      	beq.n	8009df6 <PCD_EP_ISR_Handler+0x492>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2250      	movs	r2, #80	; 0x50
 8009db2:	5a9b      	ldrh	r3, [r3, r2]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	001a      	movs	r2, r3
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	00db      	lsls	r3, r3, #3
 8009dbe:	18d2      	adds	r2, r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	18d3      	adds	r3, r2, r3
 8009dc6:	4a81      	ldr	r2, [pc, #516]	; (8009fcc <PCD_EP_ISR_Handler+0x668>)
 8009dc8:	4694      	mov	ip, r2
 8009dca:	4463      	add	r3, ip
 8009dcc:	881a      	ldrh	r2, [r3, #0]
 8009dce:	2436      	movs	r4, #54	; 0x36
 8009dd0:	193b      	adds	r3, r7, r4
 8009dd2:	0592      	lsls	r2, r2, #22
 8009dd4:	0d92      	lsrs	r2, r2, #22
 8009dd6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8009dd8:	193b      	adds	r3, r7, r4
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d02e      	beq.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	6959      	ldr	r1, [r3, #20]
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	891a      	ldrh	r2, [r3, #8]
 8009dec:	193b      	adds	r3, r7, r4
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	f006 fcb4 	bl	801075c <USB_ReadPMA>
 8009df4:	e023      	b.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2250      	movs	r2, #80	; 0x50
 8009dfc:	5a9b      	ldrh	r3, [r3, r2]
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	001a      	movs	r2, r3
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	18d2      	adds	r2, r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	18d3      	adds	r3, r2, r3
 8009e10:	4a6f      	ldr	r2, [pc, #444]	; (8009fd0 <PCD_EP_ISR_Handler+0x66c>)
 8009e12:	4694      	mov	ip, r2
 8009e14:	4463      	add	r3, ip
 8009e16:	881a      	ldrh	r2, [r3, #0]
 8009e18:	2436      	movs	r4, #54	; 0x36
 8009e1a:	193b      	adds	r3, r7, r4
 8009e1c:	0592      	lsls	r2, r2, #22
 8009e1e:	0d92      	lsrs	r2, r2, #22
 8009e20:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8009e22:	193b      	adds	r3, r7, r4
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	6959      	ldr	r1, [r3, #20]
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	895a      	ldrh	r2, [r3, #10]
 8009e36:	193b      	adds	r3, r7, r4
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	f006 fc8f 	bl	801075c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	69da      	ldr	r2, [r3, #28]
 8009e42:	2136      	movs	r1, #54	; 0x36
 8009e44:	187b      	adds	r3, r7, r1
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	18d2      	adds	r2, r2, r3
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	695a      	ldr	r2, [r3, #20]
 8009e52:	187b      	adds	r3, r7, r1
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	18d2      	adds	r2, r2, r3
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <PCD_EP_ISR_Handler+0x50c>
 8009e64:	187b      	adds	r3, r7, r1
 8009e66:	881a      	ldrh	r2, [r3, #0]
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d207      	bcs.n	8009e80 <PCD_EP_ISR_Handler+0x51c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f008 fc2c 	bl	80126d6 <HAL_PCD_DataOutStageCallback>
 8009e7e:	e006      	b.n	8009e8e <PCD_EP_ISR_Handler+0x52a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e86:	0011      	movs	r1, r2
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f005 f9c7 	bl	800f21c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009e8e:	242a      	movs	r4, #42	; 0x2a
 8009e90:	193b      	adds	r3, r7, r4
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	2280      	movs	r2, #128	; 0x80
 8009e96:	4013      	ands	r3, r2
 8009e98:	d100      	bne.n	8009e9c <PCD_EP_ISR_Handler+0x538>
 8009e9a:	e085      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[epindex];
 8009e9c:	202d      	movs	r0, #45	; 0x2d
 8009e9e:	183b      	adds	r3, r7, r0
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	0013      	movs	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	189b      	adds	r3, r3, r2
 8009eaa:	00db      	lsls	r3, r3, #3
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	18d3      	adds	r3, r2, r3
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	001a      	movs	r2, r3
 8009eb8:	183b      	adds	r3, r7, r0
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	18d3      	adds	r3, r2, r3
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	2520      	movs	r5, #32
 8009ec6:	197b      	adds	r3, r7, r5
 8009ec8:	4942      	ldr	r1, [pc, #264]	; (8009fd4 <PCD_EP_ISR_Handler+0x670>)
 8009eca:	400a      	ands	r2, r1
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	001a      	movs	r2, r3
 8009ed4:	183b      	adds	r3, r7, r0
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	18d3      	adds	r3, r2, r3
 8009edc:	197a      	adds	r2, r7, r5
 8009ede:	8812      	ldrh	r2, [r2, #0]
 8009ee0:	493d      	ldr	r1, [pc, #244]	; (8009fd8 <PCD_EP_ISR_Handler+0x674>)
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	78db      	ldrb	r3, [r3, #3]
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d109      	bne.n	8009f04 <PCD_EP_ISR_Handler+0x5a0>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d14f      	bne.n	8009f98 <PCD_EP_ISR_Handler+0x634>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8009ef8:	193b      	adds	r3, r7, r4
 8009efa:	881a      	ldrh	r2, [r3, #0]
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4013      	ands	r3, r2
 8009f02:	d149      	bne.n	8009f98 <PCD_EP_ISR_Handler+0x634>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2250      	movs	r2, #80	; 0x50
 8009f0a:	5a9b      	ldrh	r3, [r3, r2]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	001a      	movs	r2, r3
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	18d2      	adds	r2, r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	18d3      	adds	r3, r2, r3
 8009f1e:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <PCD_EP_ISR_Handler+0x668>)
 8009f20:	4694      	mov	ip, r2
 8009f22:	4463      	add	r3, ip
 8009f24:	881a      	ldrh	r2, [r3, #0]
 8009f26:	211e      	movs	r1, #30
 8009f28:	187b      	adds	r3, r7, r1
 8009f2a:	0592      	lsls	r2, r2, #22
 8009f2c:	0d92      	lsrs	r2, r2, #22
 8009f2e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	187b      	adds	r3, r7, r1
 8009f36:	881b      	ldrh	r3, [r3, #0]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d907      	bls.n	8009f4c <PCD_EP_ISR_Handler+0x5e8>
          {
            ep->xfer_len -= TxByteNbre;
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	187b      	adds	r3, r7, r1
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	1ad2      	subs	r2, r2, r3
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	619a      	str	r2, [r3, #24]
 8009f4a:	e002      	b.n	8009f52 <PCD_EP_ISR_Handler+0x5ee>
          }
          else
          {
            ep->xfer_len = 0U;
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	2200      	movs	r2, #0
 8009f50:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d107      	bne.n	8009f6a <PCD_EP_ISR_Handler+0x606>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	781a      	ldrb	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	0011      	movs	r1, r2
 8009f62:	0018      	movs	r0, r3
 8009f64:	f008 fbd8 	bl	8012718 <HAL_PCD_DataInStageCallback>
 8009f68:	e01e      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	695a      	ldr	r2, [r3, #20]
 8009f6e:	211e      	movs	r1, #30
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	18d2      	adds	r2, r2, r3
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	69da      	ldr	r2, [r3, #28]
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	18d2      	adds	r2, r2, r3
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	0011      	movs	r1, r2
 8009f90:	0018      	movs	r0, r3
 8009f92:	f005 f943 	bl	800f21c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8009f96:	e007      	b.n	8009fa8 <PCD_EP_ISR_Handler+0x644>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009f98:	232a      	movs	r3, #42	; 0x2a
 8009f9a:	18fb      	adds	r3, r7, r3
 8009f9c:	881a      	ldrh	r2, [r3, #0]
 8009f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f000 f936 	bl	800a214 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2244      	movs	r2, #68	; 0x44
 8009fae:	5a9b      	ldrh	r3, [r3, r2]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	b21b      	sxth	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da00      	bge.n	8009fba <PCD_EP_ISR_Handler+0x656>
 8009fb8:	e4d9      	b.n	800996e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b00e      	add	sp, #56	; 0x38
 8009fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009fc4:	ffff8f8f 	.word	0xffff8f8f
 8009fc8:	ffff80c0 	.word	0xffff80c0
 8009fcc:	00000402 	.word	0x00000402
 8009fd0:	00000406 	.word	0x00000406
 8009fd4:	ffff8f0f 	.word	0xffff8f0f
 8009fd8:	ffff8000 	.word	0xffff8000

08009fdc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b089      	sub	sp, #36	; 0x24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	1dbb      	adds	r3, r7, #6
 8009fe8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009fea:	1dbb      	adds	r3, r7, #6
 8009fec:	881a      	ldrh	r2, [r3, #0]
 8009fee:	2380      	movs	r3, #128	; 0x80
 8009ff0:	01db      	lsls	r3, r3, #7
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	d100      	bne.n	8009ff8 <HAL_PCD_EP_DB_Receive+0x1c>
 8009ff6:	e07d      	b.n	800a0f4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2250      	movs	r2, #80	; 0x50
 8009ffe:	5a9b      	ldrh	r3, [r3, r2]
 800a000:	b29b      	uxth	r3, r3
 800a002:	001a      	movs	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	18d2      	adds	r2, r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	18d3      	adds	r3, r2, r3
 800a012:	4a7a      	ldr	r2, [pc, #488]	; (800a1fc <HAL_PCD_EP_DB_Receive+0x220>)
 800a014:	4694      	mov	ip, r2
 800a016:	4463      	add	r3, ip
 800a018:	881a      	ldrh	r2, [r3, #0]
 800a01a:	211a      	movs	r1, #26
 800a01c:	187b      	adds	r3, r7, r1
 800a01e:	0592      	lsls	r2, r2, #22
 800a020:	0d92      	lsrs	r2, r2, #22
 800a022:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	699a      	ldr	r2, [r3, #24]
 800a028:	187b      	adds	r3, r7, r1
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d307      	bcc.n	800a040 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	699a      	ldr	r2, [r3, #24]
 800a034:	187b      	adds	r3, r7, r1
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	1ad2      	subs	r2, r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	619a      	str	r2, [r3, #24]
 800a03e:	e002      	b.n	800a046 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d121      	bne.n	800a092 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	001a      	movs	r2, r3
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	18d3      	adds	r3, r2, r3
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	2018      	movs	r0, #24
 800a062:	183b      	adds	r3, r7, r0
 800a064:	4966      	ldr	r1, [pc, #408]	; (800a200 <HAL_PCD_EP_DB_Receive+0x224>)
 800a066:	400a      	ands	r2, r1
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	183b      	adds	r3, r7, r0
 800a06c:	183a      	adds	r2, r7, r0
 800a06e:	8812      	ldrh	r2, [r2, #0]
 800a070:	2180      	movs	r1, #128	; 0x80
 800a072:	0189      	lsls	r1, r1, #6
 800a074:	404a      	eors	r2, r1
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	001a      	movs	r2, r3
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	18d3      	adds	r3, r2, r3
 800a086:	183a      	adds	r2, r7, r0
 800a088:	8812      	ldrh	r2, [r2, #0]
 800a08a:	495e      	ldr	r1, [pc, #376]	; (800a204 <HAL_PCD_EP_DB_Receive+0x228>)
 800a08c:	430a      	orrs	r2, r1
 800a08e:	b292      	uxth	r2, r2
 800a090:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a092:	1dbb      	adds	r3, r7, #6
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	2240      	movs	r2, #64	; 0x40
 800a098:	4013      	ands	r3, r2
 800a09a:	d01a      	beq.n	800a0d2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	001a      	movs	r2, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	18d3      	adds	r3, r2, r3
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	2016      	movs	r0, #22
 800a0b0:	183b      	adds	r3, r7, r0
 800a0b2:	4955      	ldr	r1, [pc, #340]	; (800a208 <HAL_PCD_EP_DB_Receive+0x22c>)
 800a0b4:	400a      	ands	r2, r1
 800a0b6:	801a      	strh	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	001a      	movs	r2, r3
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	18d3      	adds	r3, r2, r3
 800a0c6:	183a      	adds	r2, r7, r0
 800a0c8:	8812      	ldrh	r2, [r2, #0]
 800a0ca:	4950      	ldr	r1, [pc, #320]	; (800a20c <HAL_PCD_EP_DB_Receive+0x230>)
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	b292      	uxth	r2, r2
 800a0d0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800a0d2:	241a      	movs	r4, #26
 800a0d4:	193b      	adds	r3, r7, r4
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d100      	bne.n	800a0de <HAL_PCD_EP_DB_Receive+0x102>
 800a0dc:	e086      	b.n	800a1ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6959      	ldr	r1, [r3, #20]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	891a      	ldrh	r2, [r3, #8]
 800a0ea:	193b      	adds	r3, r7, r4
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	f006 fb35 	bl	801075c <USB_ReadPMA>
 800a0f2:	e07b      	b.n	800a1ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2250      	movs	r2, #80	; 0x50
 800a0fa:	5a9b      	ldrh	r3, [r3, r2]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	001a      	movs	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	18d2      	adds	r2, r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	18d3      	adds	r3, r2, r3
 800a10e:	4a40      	ldr	r2, [pc, #256]	; (800a210 <HAL_PCD_EP_DB_Receive+0x234>)
 800a110:	4694      	mov	ip, r2
 800a112:	4463      	add	r3, ip
 800a114:	881a      	ldrh	r2, [r3, #0]
 800a116:	211a      	movs	r1, #26
 800a118:	187b      	adds	r3, r7, r1
 800a11a:	0592      	lsls	r2, r2, #22
 800a11c:	0d92      	lsrs	r2, r2, #22
 800a11e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	187b      	adds	r3, r7, r1
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d307      	bcc.n	800a13c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	699a      	ldr	r2, [r3, #24]
 800a130:	187b      	adds	r3, r7, r1
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	619a      	str	r2, [r3, #24]
 800a13a:	e002      	b.n	800a142 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2200      	movs	r2, #0
 800a140:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d121      	bne.n	800a18e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	001a      	movs	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	18d3      	adds	r3, r2, r3
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	201e      	movs	r0, #30
 800a15e:	183b      	adds	r3, r7, r0
 800a160:	4927      	ldr	r1, [pc, #156]	; (800a200 <HAL_PCD_EP_DB_Receive+0x224>)
 800a162:	400a      	ands	r2, r1
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	183b      	adds	r3, r7, r0
 800a168:	183a      	adds	r2, r7, r0
 800a16a:	8812      	ldrh	r2, [r2, #0]
 800a16c:	2180      	movs	r1, #128	; 0x80
 800a16e:	0189      	lsls	r1, r1, #6
 800a170:	404a      	eors	r2, r1
 800a172:	801a      	strh	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	001a      	movs	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	18d3      	adds	r3, r2, r3
 800a182:	183a      	adds	r2, r7, r0
 800a184:	8812      	ldrh	r2, [r2, #0]
 800a186:	491f      	ldr	r1, [pc, #124]	; (800a204 <HAL_PCD_EP_DB_Receive+0x228>)
 800a188:	430a      	orrs	r2, r1
 800a18a:	b292      	uxth	r2, r2
 800a18c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a18e:	1dbb      	adds	r3, r7, #6
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	2240      	movs	r2, #64	; 0x40
 800a194:	4013      	ands	r3, r2
 800a196:	d11a      	bne.n	800a1ce <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	001a      	movs	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	18d3      	adds	r3, r2, r3
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	201c      	movs	r0, #28
 800a1ac:	183b      	adds	r3, r7, r0
 800a1ae:	4916      	ldr	r1, [pc, #88]	; (800a208 <HAL_PCD_EP_DB_Receive+0x22c>)
 800a1b0:	400a      	ands	r2, r1
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	18d3      	adds	r3, r2, r3
 800a1c2:	183a      	adds	r2, r7, r0
 800a1c4:	8812      	ldrh	r2, [r2, #0]
 800a1c6:	4911      	ldr	r1, [pc, #68]	; (800a20c <HAL_PCD_EP_DB_Receive+0x230>)
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	b292      	uxth	r2, r2
 800a1cc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800a1ce:	241a      	movs	r4, #26
 800a1d0:	193b      	adds	r3, r7, r4
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d009      	beq.n	800a1ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6959      	ldr	r1, [r3, #20]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	895a      	ldrh	r2, [r3, #10]
 800a1e4:	193b      	adds	r3, r7, r4
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	f006 fab8 	bl	801075c <USB_ReadPMA>
    }
  }

  return count;
 800a1ec:	231a      	movs	r3, #26
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	881b      	ldrh	r3, [r3, #0]
}
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	b009      	add	sp, #36	; 0x24
 800a1f8:	bd90      	pop	{r4, r7, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	00000402 	.word	0x00000402
 800a200:	ffffbf8f 	.word	0xffffbf8f
 800a204:	ffff8080 	.word	0xffff8080
 800a208:	ffff8f8f 	.word	0xffff8f8f
 800a20c:	ffff80c0 	.word	0xffff80c0
 800a210:	00000406 	.word	0x00000406

0800a214 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b094      	sub	sp, #80	; 0x50
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	1dbb      	adds	r3, r7, #6
 800a220:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a222:	1dbb      	adds	r3, r7, #6
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	2240      	movs	r2, #64	; 0x40
 800a228:	4013      	ands	r3, r2
 800a22a:	d100      	bne.n	800a22e <HAL_PCD_EP_DB_Transmit+0x1a>
 800a22c:	e12e      	b.n	800a48c <HAL_PCD_EP_DB_Transmit+0x278>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2250      	movs	r2, #80	; 0x50
 800a234:	5a9b      	ldrh	r3, [r3, r2]
 800a236:	b29b      	uxth	r3, r3
 800a238:	001a      	movs	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	18d2      	adds	r2, r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	18d3      	adds	r3, r2, r3
 800a248:	4abb      	ldr	r2, [pc, #748]	; (800a538 <HAL_PCD_EP_DB_Transmit+0x324>)
 800a24a:	4694      	mov	ip, r2
 800a24c:	4463      	add	r3, ip
 800a24e:	881a      	ldrh	r2, [r3, #0]
 800a250:	2148      	movs	r1, #72	; 0x48
 800a252:	187b      	adds	r3, r7, r1
 800a254:	0592      	lsls	r2, r2, #22
 800a256:	0d92      	lsrs	r2, r2, #22
 800a258:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	699a      	ldr	r2, [r3, #24]
 800a25e:	187b      	adds	r3, r7, r1
 800a260:	881b      	ldrh	r3, [r3, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d907      	bls.n	800a276 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	187b      	adds	r3, r7, r1
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	619a      	str	r2, [r3, #24]
 800a274:	e002      	b.n	800a27c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2200      	movs	r2, #0
 800a27a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d129      	bne.n	800a2d8 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	0011      	movs	r1, r2
 800a28c:	0018      	movs	r0, r3
 800a28e:	f008 fa43 	bl	8012718 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a292:	1dbb      	adds	r3, r7, #6
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	2380      	movs	r3, #128	; 0x80
 800a298:	01db      	lsls	r3, r3, #7
 800a29a:	4013      	ands	r3, r2
 800a29c:	d100      	bne.n	800a2a0 <HAL_PCD_EP_DB_Transmit+0x8c>
 800a29e:	e230      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	001a      	movs	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	18d3      	adds	r3, r2, r3
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	2016      	movs	r0, #22
 800a2b4:	183b      	adds	r3, r7, r0
 800a2b6:	49a1      	ldr	r1, [pc, #644]	; (800a53c <HAL_PCD_EP_DB_Transmit+0x328>)
 800a2b8:	400a      	ands	r2, r1
 800a2ba:	801a      	strh	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	001a      	movs	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	18d3      	adds	r3, r2, r3
 800a2ca:	183a      	adds	r2, r7, r0
 800a2cc:	8812      	ldrh	r2, [r2, #0]
 800a2ce:	499c      	ldr	r1, [pc, #624]	; (800a540 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	b292      	uxth	r2, r2
 800a2d4:	801a      	strh	r2, [r3, #0]
 800a2d6:	e214      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a2d8:	1dbb      	adds	r3, r7, #6
 800a2da:	881a      	ldrh	r2, [r3, #0]
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	01db      	lsls	r3, r3, #7
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	d01a      	beq.n	800a31a <HAL_PCD_EP_DB_Transmit+0x106>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	001a      	movs	r2, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	18d3      	adds	r3, r2, r3
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	202a      	movs	r0, #42	; 0x2a
 800a2f8:	183b      	adds	r3, r7, r0
 800a2fa:	4990      	ldr	r1, [pc, #576]	; (800a53c <HAL_PCD_EP_DB_Transmit+0x328>)
 800a2fc:	400a      	ands	r2, r1
 800a2fe:	801a      	strh	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	001a      	movs	r2, r3
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	18d3      	adds	r3, r2, r3
 800a30e:	183a      	adds	r2, r7, r0
 800a310:	8812      	ldrh	r2, [r2, #0]
 800a312:	498b      	ldr	r1, [pc, #556]	; (800a540 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800a314:	430a      	orrs	r2, r1
 800a316:	b292      	uxth	r2, r2
 800a318:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2224      	movs	r2, #36	; 0x24
 800a31e:	5c9b      	ldrb	r3, [r3, r2]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d000      	beq.n	800a326 <HAL_PCD_EP_DB_Transmit+0x112>
 800a324:	e1ed      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	695a      	ldr	r2, [r3, #20]
 800a32a:	2148      	movs	r1, #72	; 0x48
 800a32c:	187b      	adds	r3, r7, r1
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	18d2      	adds	r2, r2, r3
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	69da      	ldr	r2, [r3, #28]
 800a33a:	187b      	adds	r3, r7, r1
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	18d2      	adds	r2, r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6a1a      	ldr	r2, [r3, #32]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d309      	bcc.n	800a364 <HAL_PCD_EP_DB_Transmit+0x150>
        {
          len = ep->maxpacket;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a35c:	1ad2      	subs	r2, r2, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	621a      	str	r2, [r3, #32]
 800a362:	e016      	b.n	800a392 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else if (ep->xfer_len_db == 0U)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d108      	bne.n	800a37e <HAL_PCD_EP_DB_Transmit+0x16a>
        {
          len = TxByteNbre;
 800a36c:	2348      	movs	r3, #72	; 0x48
 800a36e:	18fb      	adds	r3, r7, r3
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2224      	movs	r2, #36	; 0x24
 800a378:	2100      	movs	r1, #0
 800a37a:	5499      	strb	r1, [r3, r2]
 800a37c:	e009      	b.n	800a392 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2224      	movs	r2, #36	; 0x24
 800a382:	2100      	movs	r1, #0
 800a384:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2200      	movs	r2, #0
 800a390:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d150      	bne.n	800a43c <HAL_PCD_EP_DB_Transmit+0x228>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	61fb      	str	r3, [r7, #28]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2250      	movs	r2, #80	; 0x50
 800a3a6:	5a9b      	ldrh	r3, [r3, r2]
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	001a      	movs	r2, r3
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	189b      	adds	r3, r3, r2
 800a3b0:	61fb      	str	r3, [r7, #28]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	00da      	lsls	r2, r3, #3
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	18d3      	adds	r3, r2, r3
 800a3bc:	4a5e      	ldr	r2, [pc, #376]	; (800a538 <HAL_PCD_EP_DB_Transmit+0x324>)
 800a3be:	4694      	mov	ip, r2
 800a3c0:	4463      	add	r3, ip
 800a3c2:	61bb      	str	r3, [r7, #24]
 800a3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d110      	bne.n	800a3ec <HAL_PCD_EP_DB_Transmit+0x1d8>
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4a5c      	ldr	r2, [pc, #368]	; (800a544 <HAL_PCD_EP_DB_Transmit+0x330>)
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	801a      	strh	r2, [r3, #0]
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4a59      	ldr	r2, [pc, #356]	; (800a548 <HAL_PCD_EP_DB_Transmit+0x334>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	e044      	b.n	800a476 <HAL_PCD_EP_DB_Transmit+0x262>
 800a3ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f0:	d810      	bhi.n	800a414 <HAL_PCD_EP_DB_Transmit+0x200>
 800a3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	d002      	beq.n	800a406 <HAL_PCD_EP_DB_Transmit+0x1f2>
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	3301      	adds	r3, #1
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	b29b      	uxth	r3, r3
 800a40a:	029b      	lsls	r3, r3, #10
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	801a      	strh	r2, [r3, #0]
 800a412:	e030      	b.n	800a476 <HAL_PCD_EP_DB_Transmit+0x262>
 800a414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a41c:	221f      	movs	r2, #31
 800a41e:	4013      	ands	r3, r2
 800a420:	d102      	bne.n	800a428 <HAL_PCD_EP_DB_Transmit+0x214>
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	3b01      	subs	r3, #1
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	029b      	lsls	r3, r3, #10
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4a45      	ldr	r2, [pc, #276]	; (800a548 <HAL_PCD_EP_DB_Transmit+0x334>)
 800a432:	4313      	orrs	r3, r2
 800a434:	b29a      	uxth	r2, r3
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	e01c      	b.n	800a476 <HAL_PCD_EP_DB_Transmit+0x262>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d118      	bne.n	800a476 <HAL_PCD_EP_DB_Transmit+0x262>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2250      	movs	r2, #80	; 0x50
 800a450:	5a9b      	ldrh	r3, [r3, r2]
 800a452:	b29b      	uxth	r3, r3
 800a454:	001a      	movs	r2, r3
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	189b      	adds	r3, r3, r2
 800a45a:	627b      	str	r3, [r7, #36]	; 0x24
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	00da      	lsls	r2, r3, #3
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	18d3      	adds	r3, r2, r3
 800a466:	4a34      	ldr	r2, [pc, #208]	; (800a538 <HAL_PCD_EP_DB_Transmit+0x324>)
 800a468:	4694      	mov	ip, r2
 800a46a:	4463      	add	r3, ip
 800a46c:	623b      	str	r3, [r7, #32]
 800a46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a470:	b29a      	uxth	r2, r3
 800a472:	6a3b      	ldr	r3, [r7, #32]
 800a474:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6818      	ldr	r0, [r3, #0]
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6959      	ldr	r1, [r3, #20]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	891a      	ldrh	r2, [r3, #8]
 800a482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a484:	b29b      	uxth	r3, r3
 800a486:	f006 f925 	bl	80106d4 <USB_WritePMA>
 800a48a:	e13a      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2250      	movs	r2, #80	; 0x50
 800a492:	5a9b      	ldrh	r3, [r3, r2]
 800a494:	b29b      	uxth	r3, r3
 800a496:	001a      	movs	r2, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	18d2      	adds	r2, r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	18d3      	adds	r3, r2, r3
 800a4a6:	4a29      	ldr	r2, [pc, #164]	; (800a54c <HAL_PCD_EP_DB_Transmit+0x338>)
 800a4a8:	4694      	mov	ip, r2
 800a4aa:	4463      	add	r3, ip
 800a4ac:	881a      	ldrh	r2, [r3, #0]
 800a4ae:	2148      	movs	r1, #72	; 0x48
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	0592      	lsls	r2, r2, #22
 800a4b4:	0d92      	lsrs	r2, r2, #22
 800a4b6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	699a      	ldr	r2, [r3, #24]
 800a4bc:	187b      	adds	r3, r7, r1
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d307      	bcc.n	800a4d4 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	187b      	adds	r3, r7, r1
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	619a      	str	r2, [r3, #24]
 800a4d2:	e002      	b.n	800a4da <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d136      	bne.n	800a550 <HAL_PCD_EP_DB_Transmit+0x33c>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	0011      	movs	r1, r2
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f008 f914 	bl	8012718 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a4f0:	1dbb      	adds	r3, r7, #6
 800a4f2:	881a      	ldrh	r2, [r3, #0]
 800a4f4:	2380      	movs	r3, #128	; 0x80
 800a4f6:	01db      	lsls	r3, r3, #7
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	d000      	beq.n	800a4fe <HAL_PCD_EP_DB_Transmit+0x2ea>
 800a4fc:	e101      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	001a      	movs	r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	18d3      	adds	r3, r2, r3
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29a      	uxth	r2, r3
 800a510:	204a      	movs	r0, #74	; 0x4a
 800a512:	183b      	adds	r3, r7, r0
 800a514:	4909      	ldr	r1, [pc, #36]	; (800a53c <HAL_PCD_EP_DB_Transmit+0x328>)
 800a516:	400a      	ands	r2, r1
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	001a      	movs	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	18d3      	adds	r3, r2, r3
 800a528:	183a      	adds	r2, r7, r0
 800a52a:	8812      	ldrh	r2, [r2, #0]
 800a52c:	4904      	ldr	r1, [pc, #16]	; (800a540 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800a52e:	430a      	orrs	r2, r1
 800a530:	b292      	uxth	r2, r2
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	e0e5      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
 800a536:	46c0      	nop			; (mov r8, r8)
 800a538:	00000402 	.word	0x00000402
 800a53c:	ffff8f8f 	.word	0xffff8f8f
 800a540:	ffffc080 	.word	0xffffc080
 800a544:	ffff83ff 	.word	0xffff83ff
 800a548:	ffff8000 	.word	0xffff8000
 800a54c:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a550:	1dbb      	adds	r3, r7, #6
 800a552:	881a      	ldrh	r2, [r3, #0]
 800a554:	2380      	movs	r3, #128	; 0x80
 800a556:	01db      	lsls	r3, r3, #7
 800a558:	4013      	ands	r3, r2
 800a55a:	d11a      	bne.n	800a592 <HAL_PCD_EP_DB_Transmit+0x37e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	001a      	movs	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	18d3      	adds	r3, r2, r3
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	2032      	movs	r0, #50	; 0x32
 800a570:	183b      	adds	r3, r7, r0
 800a572:	497a      	ldr	r1, [pc, #488]	; (800a75c <HAL_PCD_EP_DB_Transmit+0x548>)
 800a574:	400a      	ands	r2, r1
 800a576:	801a      	strh	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	001a      	movs	r2, r3
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	18d3      	adds	r3, r2, r3
 800a586:	183a      	adds	r2, r7, r0
 800a588:	8812      	ldrh	r2, [r2, #0]
 800a58a:	4975      	ldr	r1, [pc, #468]	; (800a760 <HAL_PCD_EP_DB_Transmit+0x54c>)
 800a58c:	430a      	orrs	r2, r1
 800a58e:	b292      	uxth	r2, r2
 800a590:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2224      	movs	r2, #36	; 0x24
 800a596:	5c9b      	ldrb	r3, [r3, r2]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d000      	beq.n	800a59e <HAL_PCD_EP_DB_Transmit+0x38a>
 800a59c:	e0b1      	b.n	800a702 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	695a      	ldr	r2, [r3, #20]
 800a5a2:	2148      	movs	r1, #72	; 0x48
 800a5a4:	187b      	adds	r3, r7, r1
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	18d2      	adds	r2, r2, r3
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	69da      	ldr	r2, [r3, #28]
 800a5b2:	187b      	adds	r3, r7, r1
 800a5b4:	881b      	ldrh	r3, [r3, #0]
 800a5b6:	18d2      	adds	r2, r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	6a1a      	ldr	r2, [r3, #32]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d309      	bcc.n	800a5dc <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6a1a      	ldr	r2, [r3, #32]
 800a5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5d4:	1ad2      	subs	r2, r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	621a      	str	r2, [r3, #32]
 800a5da:	e016      	b.n	800a60a <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else if (ep->xfer_len_db == 0U)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d108      	bne.n	800a5f6 <HAL_PCD_EP_DB_Transmit+0x3e2>
        {
          len = TxByteNbre;
 800a5e4:	2348      	movs	r3, #72	; 0x48
 800a5e6:	18fb      	adds	r3, r7, r3
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	2224      	movs	r2, #36	; 0x24
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	5499      	strb	r1, [r3, r2]
 800a5f4:	e009      	b.n	800a60a <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else
        {
          len = ep->xfer_len_db;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2224      	movs	r2, #36	; 0x24
 800a606:	2100      	movs	r1, #0
 800a608:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	643b      	str	r3, [r7, #64]	; 0x40
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d150      	bne.n	800a6ba <HAL_PCD_EP_DB_Transmit+0x4a6>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2250      	movs	r2, #80	; 0x50
 800a624:	5a9b      	ldrh	r3, [r3, r2]
 800a626:	b29b      	uxth	r3, r3
 800a628:	001a      	movs	r2, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	189b      	adds	r3, r3, r2
 800a62e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	00da      	lsls	r2, r3, #3
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	18d3      	adds	r3, r2, r3
 800a63a:	4a4a      	ldr	r2, [pc, #296]	; (800a764 <HAL_PCD_EP_DB_Transmit+0x550>)
 800a63c:	4694      	mov	ip, r2
 800a63e:	4463      	add	r3, ip
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
 800a642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a644:	2b00      	cmp	r3, #0
 800a646:	d110      	bne.n	800a66a <HAL_PCD_EP_DB_Transmit+0x456>
 800a648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	4a46      	ldr	r2, [pc, #280]	; (800a768 <HAL_PCD_EP_DB_Transmit+0x554>)
 800a650:	4013      	ands	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a656:	801a      	strh	r2, [r3, #0]
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4a43      	ldr	r2, [pc, #268]	; (800a76c <HAL_PCD_EP_DB_Transmit+0x558>)
 800a660:	4313      	orrs	r3, r2
 800a662:	b29a      	uxth	r2, r3
 800a664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a666:	801a      	strh	r2, [r3, #0]
 800a668:	e041      	b.n	800a6ee <HAL_PCD_EP_DB_Transmit+0x4da>
 800a66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66c:	2b3e      	cmp	r3, #62	; 0x3e
 800a66e:	d810      	bhi.n	800a692 <HAL_PCD_EP_DB_Transmit+0x47e>
 800a670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a672:	085b      	lsrs	r3, r3, #1
 800a674:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a678:	2201      	movs	r2, #1
 800a67a:	4013      	ands	r3, r2
 800a67c:	d002      	beq.n	800a684 <HAL_PCD_EP_DB_Transmit+0x470>
 800a67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a680:	3301      	adds	r3, #1
 800a682:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a686:	b29b      	uxth	r3, r3
 800a688:	029b      	lsls	r3, r3, #10
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	801a      	strh	r2, [r3, #0]
 800a690:	e02d      	b.n	800a6ee <HAL_PCD_EP_DB_Transmit+0x4da>
 800a692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a694:	095b      	lsrs	r3, r3, #5
 800a696:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a69a:	221f      	movs	r2, #31
 800a69c:	4013      	ands	r3, r2
 800a69e:	d102      	bne.n	800a6a6 <HAL_PCD_EP_DB_Transmit+0x492>
 800a6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	029b      	lsls	r3, r3, #10
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4a2f      	ldr	r2, [pc, #188]	; (800a76c <HAL_PCD_EP_DB_Transmit+0x558>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e019      	b.n	800a6ee <HAL_PCD_EP_DB_Transmit+0x4da>
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d115      	bne.n	800a6ee <HAL_PCD_EP_DB_Transmit+0x4da>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2250      	movs	r2, #80	; 0x50
 800a6c8:	5a9b      	ldrh	r3, [r3, r2]
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	001a      	movs	r2, r3
 800a6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d0:	189b      	adds	r3, r3, r2
 800a6d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	00da      	lsls	r2, r3, #3
 800a6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6dc:	18d3      	adds	r3, r2, r3
 800a6de:	4a21      	ldr	r2, [pc, #132]	; (800a764 <HAL_PCD_EP_DB_Transmit+0x550>)
 800a6e0:	4694      	mov	ip, r2
 800a6e2:	4463      	add	r3, ip
 800a6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6959      	ldr	r1, [r3, #20]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	895a      	ldrh	r2, [r3, #10]
 800a6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	f005 ffe9 	bl	80106d4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	001a      	movs	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	b29a      	uxth	r2, r3
 800a714:	2014      	movs	r0, #20
 800a716:	183b      	adds	r3, r7, r0
 800a718:	4915      	ldr	r1, [pc, #84]	; (800a770 <HAL_PCD_EP_DB_Transmit+0x55c>)
 800a71a:	400a      	ands	r2, r1
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	183b      	adds	r3, r7, r0
 800a720:	183a      	adds	r2, r7, r0
 800a722:	8812      	ldrh	r2, [r2, #0]
 800a724:	2110      	movs	r1, #16
 800a726:	404a      	eors	r2, r1
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	183b      	adds	r3, r7, r0
 800a72c:	183a      	adds	r2, r7, r0
 800a72e:	8812      	ldrh	r2, [r2, #0]
 800a730:	2120      	movs	r1, #32
 800a732:	404a      	eors	r2, r1
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	001a      	movs	r2, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	18d3      	adds	r3, r2, r3
 800a744:	183a      	adds	r2, r7, r0
 800a746:	8812      	ldrh	r2, [r2, #0]
 800a748:	490a      	ldr	r1, [pc, #40]	; (800a774 <HAL_PCD_EP_DB_Transmit+0x560>)
 800a74a:	430a      	orrs	r2, r1
 800a74c:	b292      	uxth	r2, r2
 800a74e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	0018      	movs	r0, r3
 800a754:	46bd      	mov	sp, r7
 800a756:	b014      	add	sp, #80	; 0x50
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	ffff8f8f 	.word	0xffff8f8f
 800a760:	ffffc080 	.word	0xffffc080
 800a764:	00000406 	.word	0x00000406
 800a768:	ffff83ff 	.word	0xffff83ff
 800a76c:	ffff8000 	.word	0xffff8000
 800a770:	ffff8fbf 	.word	0xffff8fbf
 800a774:	ffff8080 	.word	0xffff8080

0800a778 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	0008      	movs	r0, r1
 800a782:	0011      	movs	r1, r2
 800a784:	607b      	str	r3, [r7, #4]
 800a786:	240a      	movs	r4, #10
 800a788:	193b      	adds	r3, r7, r4
 800a78a:	1c02      	adds	r2, r0, #0
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	2308      	movs	r3, #8
 800a790:	18fb      	adds	r3, r7, r3
 800a792:	1c0a      	adds	r2, r1, #0
 800a794:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a796:	0021      	movs	r1, r4
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	2280      	movs	r2, #128	; 0x80
 800a79e:	4013      	ands	r3, r2
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00c      	beq.n	800a7c0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7a6:	187b      	adds	r3, r7, r1
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	2207      	movs	r2, #7
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	0013      	movs	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	189b      	adds	r3, r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	18d3      	adds	r3, r2, r3
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	e00b      	b.n	800a7d8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a7c0:	230a      	movs	r3, #10
 800a7c2:	18fb      	adds	r3, r7, r3
 800a7c4:	881a      	ldrh	r2, [r3, #0]
 800a7c6:	0013      	movs	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	3369      	adds	r3, #105	; 0x69
 800a7d0:	33ff      	adds	r3, #255	; 0xff
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	18d3      	adds	r3, r2, r3
 800a7d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a7d8:	2308      	movs	r3, #8
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d107      	bne.n	800a7f2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	80da      	strh	r2, [r3, #6]
 800a7f0:	e00b      	b.n	800a80a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	b29a      	uxth	r2, r3
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	0018      	movs	r0, r3
 800a80e:	46bd      	mov	sp, r7
 800a810:	b007      	add	sp, #28
 800a812:	bd90      	pop	{r4, r7, pc}

0800a814 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	23ba      	movs	r3, #186	; 0xba
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	2101      	movs	r1, #1
 800a82a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	23b8      	movs	r3, #184	; 0xb8
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	2100      	movs	r1, #0
 800a834:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2254      	movs	r2, #84	; 0x54
 800a83a:	5a9b      	ldrh	r3, [r3, r2]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2201      	movs	r2, #1
 800a840:	4313      	orrs	r3, r2
 800a842:	b299      	uxth	r1, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2254      	movs	r2, #84	; 0x54
 800a848:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2254      	movs	r2, #84	; 0x54
 800a84e:	5a9b      	ldrh	r3, [r3, r2]
 800a850:	b29b      	uxth	r3, r3
 800a852:	2202      	movs	r2, #2
 800a854:	4313      	orrs	r3, r2
 800a856:	b299      	uxth	r1, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2254      	movs	r2, #84	; 0x54
 800a85c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	0018      	movs	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	b004      	add	sp, #16
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	000a      	movs	r2, r1
 800a872:	1cfb      	adds	r3, r7, #3
 800a874:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	46bd      	mov	sp, r7
 800a87a:	b002      	add	sp, #8
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e305      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2201      	movs	r2, #1
 800a898:	4013      	ands	r3, r2
 800a89a:	d100      	bne.n	800a89e <HAL_RCC_OscConfig+0x1e>
 800a89c:	e08d      	b.n	800a9ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800a89e:	4bc5      	ldr	r3, [pc, #788]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	220c      	movs	r2, #12
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d00e      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a8aa:	4bc2      	ldr	r3, [pc, #776]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	220c      	movs	r2, #12
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	2b08      	cmp	r3, #8
 800a8b4:	d116      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x64>
 800a8b6:	4bbf      	ldr	r3, [pc, #764]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	23c0      	movs	r3, #192	; 0xc0
 800a8bc:	025b      	lsls	r3, r3, #9
 800a8be:	401a      	ands	r2, r3
 800a8c0:	2380      	movs	r3, #128	; 0x80
 800a8c2:	025b      	lsls	r3, r3, #9
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d10d      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8c8:	4bba      	ldr	r3, [pc, #744]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	2380      	movs	r3, #128	; 0x80
 800a8ce:	029b      	lsls	r3, r3, #10
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	d100      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x56>
 800a8d4:	e070      	b.n	800a9b8 <HAL_RCC_OscConfig+0x138>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d000      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x60>
 800a8de:	e06b      	b.n	800a9b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	e2dc      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d107      	bne.n	800a8fc <HAL_RCC_OscConfig+0x7c>
 800a8ec:	4bb1      	ldr	r3, [pc, #708]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4bb0      	ldr	r3, [pc, #704]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a8f2:	2180      	movs	r1, #128	; 0x80
 800a8f4:	0249      	lsls	r1, r1, #9
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e02f      	b.n	800a95c <HAL_RCC_OscConfig+0xdc>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10c      	bne.n	800a91e <HAL_RCC_OscConfig+0x9e>
 800a904:	4bab      	ldr	r3, [pc, #684]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4baa      	ldr	r3, [pc, #680]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a90a:	49ab      	ldr	r1, [pc, #684]	; (800abb8 <HAL_RCC_OscConfig+0x338>)
 800a90c:	400a      	ands	r2, r1
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	4ba8      	ldr	r3, [pc, #672]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	4ba7      	ldr	r3, [pc, #668]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a916:	49a9      	ldr	r1, [pc, #676]	; (800abbc <HAL_RCC_OscConfig+0x33c>)
 800a918:	400a      	ands	r2, r1
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e01e      	b.n	800a95c <HAL_RCC_OscConfig+0xdc>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b05      	cmp	r3, #5
 800a924:	d10e      	bne.n	800a944 <HAL_RCC_OscConfig+0xc4>
 800a926:	4ba3      	ldr	r3, [pc, #652]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4ba2      	ldr	r3, [pc, #648]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a92c:	2180      	movs	r1, #128	; 0x80
 800a92e:	02c9      	lsls	r1, r1, #11
 800a930:	430a      	orrs	r2, r1
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	4b9f      	ldr	r3, [pc, #636]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b9e      	ldr	r3, [pc, #632]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a93a:	2180      	movs	r1, #128	; 0x80
 800a93c:	0249      	lsls	r1, r1, #9
 800a93e:	430a      	orrs	r2, r1
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	e00b      	b.n	800a95c <HAL_RCC_OscConfig+0xdc>
 800a944:	4b9b      	ldr	r3, [pc, #620]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	4b9a      	ldr	r3, [pc, #616]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a94a:	499b      	ldr	r1, [pc, #620]	; (800abb8 <HAL_RCC_OscConfig+0x338>)
 800a94c:	400a      	ands	r2, r1
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	4b98      	ldr	r3, [pc, #608]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b97      	ldr	r3, [pc, #604]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a956:	4999      	ldr	r1, [pc, #612]	; (800abbc <HAL_RCC_OscConfig+0x33c>)
 800a958:	400a      	ands	r2, r1
 800a95a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d014      	beq.n	800a98e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a964:	f7fd fcdc 	bl	8008320 <HAL_GetTick>
 800a968:	0003      	movs	r3, r0
 800a96a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a96c:	e008      	b.n	800a980 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a96e:	f7fd fcd7 	bl	8008320 <HAL_GetTick>
 800a972:	0002      	movs	r2, r0
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	2b64      	cmp	r3, #100	; 0x64
 800a97a:	d901      	bls.n	800a980 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e28e      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a980:	4b8c      	ldr	r3, [pc, #560]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	029b      	lsls	r3, r3, #10
 800a988:	4013      	ands	r3, r2
 800a98a:	d0f0      	beq.n	800a96e <HAL_RCC_OscConfig+0xee>
 800a98c:	e015      	b.n	800a9ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a98e:	f7fd fcc7 	bl	8008320 <HAL_GetTick>
 800a992:	0003      	movs	r3, r0
 800a994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a996:	e008      	b.n	800a9aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a998:	f7fd fcc2 	bl	8008320 <HAL_GetTick>
 800a99c:	0002      	movs	r2, r0
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	2b64      	cmp	r3, #100	; 0x64
 800a9a4:	d901      	bls.n	800a9aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e279      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9aa:	4b82      	ldr	r3, [pc, #520]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	2380      	movs	r3, #128	; 0x80
 800a9b0:	029b      	lsls	r3, r3, #10
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	d1f0      	bne.n	800a998 <HAL_RCC_OscConfig+0x118>
 800a9b6:	e000      	b.n	800a9ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	d100      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x146>
 800a9c4:	e06c      	b.n	800aaa0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800a9c6:	4b7b      	ldr	r3, [pc, #492]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	220c      	movs	r2, #12
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d00e      	beq.n	800a9ee <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a9d0:	4b78      	ldr	r3, [pc, #480]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	220c      	movs	r2, #12
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d11f      	bne.n	800aa1c <HAL_RCC_OscConfig+0x19c>
 800a9dc:	4b75      	ldr	r3, [pc, #468]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	23c0      	movs	r3, #192	; 0xc0
 800a9e2:	025b      	lsls	r3, r3, #9
 800a9e4:	401a      	ands	r2, r3
 800a9e6:	2380      	movs	r3, #128	; 0x80
 800a9e8:	021b      	lsls	r3, r3, #8
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d116      	bne.n	800aa1c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9ee:	4b71      	ldr	r3, [pc, #452]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	d005      	beq.n	800aa04 <HAL_RCC_OscConfig+0x184>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d001      	beq.n	800aa04 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e24c      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa04:	4b6b      	ldr	r3, [pc, #428]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	22f8      	movs	r2, #248	; 0xf8
 800aa0a:	4393      	bics	r3, r2
 800aa0c:	0019      	movs	r1, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	00da      	lsls	r2, r3, #3
 800aa14:	4b67      	ldr	r3, [pc, #412]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa16:	430a      	orrs	r2, r1
 800aa18:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa1a:	e041      	b.n	800aaa0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d024      	beq.n	800aa6e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa24:	4b63      	ldr	r3, [pc, #396]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	4b62      	ldr	r3, [pc, #392]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa30:	f7fd fc76 	bl	8008320 <HAL_GetTick>
 800aa34:	0003      	movs	r3, r0
 800aa36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa38:	e008      	b.n	800aa4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa3a:	f7fd fc71 	bl	8008320 <HAL_GetTick>
 800aa3e:	0002      	movs	r2, r0
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d901      	bls.n	800aa4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e228      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa4c:	4b59      	ldr	r3, [pc, #356]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2202      	movs	r2, #2
 800aa52:	4013      	ands	r3, r2
 800aa54:	d0f1      	beq.n	800aa3a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa56:	4b57      	ldr	r3, [pc, #348]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	22f8      	movs	r2, #248	; 0xf8
 800aa5c:	4393      	bics	r3, r2
 800aa5e:	0019      	movs	r1, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	00da      	lsls	r2, r3, #3
 800aa66:	4b53      	ldr	r3, [pc, #332]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e018      	b.n	800aaa0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa6e:	4b51      	ldr	r3, [pc, #324]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	4b50      	ldr	r3, [pc, #320]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa74:	2101      	movs	r1, #1
 800aa76:	438a      	bics	r2, r1
 800aa78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa7a:	f7fd fc51 	bl	8008320 <HAL_GetTick>
 800aa7e:	0003      	movs	r3, r0
 800aa80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa82:	e008      	b.n	800aa96 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa84:	f7fd fc4c 	bl	8008320 <HAL_GetTick>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e203      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa96:	4b47      	ldr	r3, [pc, #284]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	d1f1      	bne.n	800aa84 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2208      	movs	r2, #8
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d036      	beq.n	800ab18 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d019      	beq.n	800aae6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aab2:	4b40      	ldr	r3, [pc, #256]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aab6:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aab8:	2101      	movs	r1, #1
 800aaba:	430a      	orrs	r2, r1
 800aabc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aabe:	f7fd fc2f 	bl	8008320 <HAL_GetTick>
 800aac2:	0003      	movs	r3, r0
 800aac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aac6:	e008      	b.n	800aada <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aac8:	f7fd fc2a 	bl	8008320 <HAL_GetTick>
 800aacc:	0002      	movs	r2, r0
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d901      	bls.n	800aada <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e1e1      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aada:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2202      	movs	r2, #2
 800aae0:	4013      	ands	r3, r2
 800aae2:	d0f1      	beq.n	800aac8 <HAL_RCC_OscConfig+0x248>
 800aae4:	e018      	b.n	800ab18 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aae6:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaea:	4b32      	ldr	r3, [pc, #200]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aaec:	2101      	movs	r1, #1
 800aaee:	438a      	bics	r2, r1
 800aaf0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaf2:	f7fd fc15 	bl	8008320 <HAL_GetTick>
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aafc:	f7fd fc10 	bl	8008320 <HAL_GetTick>
 800ab00:	0002      	movs	r2, r0
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e1c7      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	2202      	movs	r2, #2
 800ab14:	4013      	ands	r3, r2
 800ab16:	d1f1      	bne.n	800aafc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d100      	bne.n	800ab24 <HAL_RCC_OscConfig+0x2a4>
 800ab22:	e0b5      	b.n	800ac90 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab24:	201f      	movs	r0, #31
 800ab26:	183b      	adds	r3, r7, r0
 800ab28:	2200      	movs	r2, #0
 800ab2a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	2380      	movs	r3, #128	; 0x80
 800ab32:	055b      	lsls	r3, r3, #21
 800ab34:	4013      	ands	r3, r2
 800ab36:	d110      	bne.n	800ab5a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800ab3a:	69da      	ldr	r2, [r3, #28]
 800ab3c:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800ab3e:	2180      	movs	r1, #128	; 0x80
 800ab40:	0549      	lsls	r1, r1, #21
 800ab42:	430a      	orrs	r2, r1
 800ab44:	61da      	str	r2, [r3, #28]
 800ab46:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800ab48:	69da      	ldr	r2, [r3, #28]
 800ab4a:	2380      	movs	r3, #128	; 0x80
 800ab4c:	055b      	lsls	r3, r3, #21
 800ab4e:	4013      	ands	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ab54:	183b      	adds	r3, r7, r0
 800ab56:	2201      	movs	r2, #1
 800ab58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab5a:	4b19      	ldr	r3, [pc, #100]	; (800abc0 <HAL_RCC_OscConfig+0x340>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	2380      	movs	r3, #128	; 0x80
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	4013      	ands	r3, r2
 800ab64:	d11a      	bne.n	800ab9c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab66:	4b16      	ldr	r3, [pc, #88]	; (800abc0 <HAL_RCC_OscConfig+0x340>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <HAL_RCC_OscConfig+0x340>)
 800ab6c:	2180      	movs	r1, #128	; 0x80
 800ab6e:	0049      	lsls	r1, r1, #1
 800ab70:	430a      	orrs	r2, r1
 800ab72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab74:	f7fd fbd4 	bl	8008320 <HAL_GetTick>
 800ab78:	0003      	movs	r3, r0
 800ab7a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab7c:	e008      	b.n	800ab90 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab7e:	f7fd fbcf 	bl	8008320 <HAL_GetTick>
 800ab82:	0002      	movs	r2, r0
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	2b64      	cmp	r3, #100	; 0x64
 800ab8a:	d901      	bls.n	800ab90 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e186      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <HAL_RCC_OscConfig+0x340>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	4013      	ands	r3, r2
 800ab9a:	d0f0      	beq.n	800ab7e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d10f      	bne.n	800abc4 <HAL_RCC_OscConfig+0x344>
 800aba4:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800aba6:	6a1a      	ldr	r2, [r3, #32]
 800aba8:	4b02      	ldr	r3, [pc, #8]	; (800abb4 <HAL_RCC_OscConfig+0x334>)
 800abaa:	2101      	movs	r1, #1
 800abac:	430a      	orrs	r2, r1
 800abae:	621a      	str	r2, [r3, #32]
 800abb0:	e036      	b.n	800ac20 <HAL_RCC_OscConfig+0x3a0>
 800abb2:	46c0      	nop			; (mov r8, r8)
 800abb4:	40021000 	.word	0x40021000
 800abb8:	fffeffff 	.word	0xfffeffff
 800abbc:	fffbffff 	.word	0xfffbffff
 800abc0:	40007000 	.word	0x40007000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10c      	bne.n	800abe6 <HAL_RCC_OscConfig+0x366>
 800abcc:	4bb6      	ldr	r3, [pc, #728]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abce:	6a1a      	ldr	r2, [r3, #32]
 800abd0:	4bb5      	ldr	r3, [pc, #724]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abd2:	2101      	movs	r1, #1
 800abd4:	438a      	bics	r2, r1
 800abd6:	621a      	str	r2, [r3, #32]
 800abd8:	4bb3      	ldr	r3, [pc, #716]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abda:	6a1a      	ldr	r2, [r3, #32]
 800abdc:	4bb2      	ldr	r3, [pc, #712]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abde:	2104      	movs	r1, #4
 800abe0:	438a      	bics	r2, r1
 800abe2:	621a      	str	r2, [r3, #32]
 800abe4:	e01c      	b.n	800ac20 <HAL_RCC_OscConfig+0x3a0>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	2b05      	cmp	r3, #5
 800abec:	d10c      	bne.n	800ac08 <HAL_RCC_OscConfig+0x388>
 800abee:	4bae      	ldr	r3, [pc, #696]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abf0:	6a1a      	ldr	r2, [r3, #32]
 800abf2:	4bad      	ldr	r3, [pc, #692]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abf4:	2104      	movs	r1, #4
 800abf6:	430a      	orrs	r2, r1
 800abf8:	621a      	str	r2, [r3, #32]
 800abfa:	4bab      	ldr	r3, [pc, #684]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800abfc:	6a1a      	ldr	r2, [r3, #32]
 800abfe:	4baa      	ldr	r3, [pc, #680]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac00:	2101      	movs	r1, #1
 800ac02:	430a      	orrs	r2, r1
 800ac04:	621a      	str	r2, [r3, #32]
 800ac06:	e00b      	b.n	800ac20 <HAL_RCC_OscConfig+0x3a0>
 800ac08:	4ba7      	ldr	r3, [pc, #668]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac0a:	6a1a      	ldr	r2, [r3, #32]
 800ac0c:	4ba6      	ldr	r3, [pc, #664]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac0e:	2101      	movs	r1, #1
 800ac10:	438a      	bics	r2, r1
 800ac12:	621a      	str	r2, [r3, #32]
 800ac14:	4ba4      	ldr	r3, [pc, #656]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac16:	6a1a      	ldr	r2, [r3, #32]
 800ac18:	4ba3      	ldr	r3, [pc, #652]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac1a:	2104      	movs	r1, #4
 800ac1c:	438a      	bics	r2, r1
 800ac1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d014      	beq.n	800ac52 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac28:	f7fd fb7a 	bl	8008320 <HAL_GetTick>
 800ac2c:	0003      	movs	r3, r0
 800ac2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac30:	e009      	b.n	800ac46 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac32:	f7fd fb75 	bl	8008320 <HAL_GetTick>
 800ac36:	0002      	movs	r2, r0
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	4a9b      	ldr	r2, [pc, #620]	; (800aeac <HAL_RCC_OscConfig+0x62c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e12b      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac46:	4b98      	ldr	r3, [pc, #608]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	d0f0      	beq.n	800ac32 <HAL_RCC_OscConfig+0x3b2>
 800ac50:	e013      	b.n	800ac7a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac52:	f7fd fb65 	bl	8008320 <HAL_GetTick>
 800ac56:	0003      	movs	r3, r0
 800ac58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac5a:	e009      	b.n	800ac70 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac5c:	f7fd fb60 	bl	8008320 <HAL_GetTick>
 800ac60:	0002      	movs	r2, r0
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	4a91      	ldr	r2, [pc, #580]	; (800aeac <HAL_RCC_OscConfig+0x62c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e116      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac70:	4b8d      	ldr	r3, [pc, #564]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	2202      	movs	r2, #2
 800ac76:	4013      	ands	r3, r2
 800ac78:	d1f0      	bne.n	800ac5c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ac7a:	231f      	movs	r3, #31
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d105      	bne.n	800ac90 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac84:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac86:	69da      	ldr	r2, [r3, #28]
 800ac88:	4b87      	ldr	r3, [pc, #540]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ac8a:	4989      	ldr	r1, [pc, #548]	; (800aeb0 <HAL_RCC_OscConfig+0x630>)
 800ac8c:	400a      	ands	r2, r1
 800ac8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2210      	movs	r2, #16
 800ac96:	4013      	ands	r3, r2
 800ac98:	d063      	beq.n	800ad62 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d12a      	bne.n	800acf8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800aca2:	4b81      	ldr	r3, [pc, #516]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800aca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aca6:	4b80      	ldr	r3, [pc, #512]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800aca8:	2104      	movs	r1, #4
 800acaa:	430a      	orrs	r2, r1
 800acac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800acae:	4b7e      	ldr	r3, [pc, #504]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800acb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acb2:	4b7d      	ldr	r3, [pc, #500]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800acb4:	2101      	movs	r1, #1
 800acb6:	430a      	orrs	r2, r1
 800acb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acba:	f7fd fb31 	bl	8008320 <HAL_GetTick>
 800acbe:	0003      	movs	r3, r0
 800acc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800acc2:	e008      	b.n	800acd6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800acc4:	f7fd fb2c 	bl	8008320 <HAL_GetTick>
 800acc8:	0002      	movs	r2, r0
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d901      	bls.n	800acd6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e0e3      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800acd6:	4b74      	ldr	r3, [pc, #464]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800acd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acda:	2202      	movs	r2, #2
 800acdc:	4013      	ands	r3, r2
 800acde:	d0f1      	beq.n	800acc4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800ace0:	4b71      	ldr	r3, [pc, #452]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ace2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace4:	22f8      	movs	r2, #248	; 0xf8
 800ace6:	4393      	bics	r3, r2
 800ace8:	0019      	movs	r1, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	00da      	lsls	r2, r3, #3
 800acf0:	4b6d      	ldr	r3, [pc, #436]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800acf2:	430a      	orrs	r2, r1
 800acf4:	635a      	str	r2, [r3, #52]	; 0x34
 800acf6:	e034      	b.n	800ad62 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	3305      	adds	r3, #5
 800acfe:	d111      	bne.n	800ad24 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800ad00:	4b69      	ldr	r3, [pc, #420]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad04:	4b68      	ldr	r3, [pc, #416]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad06:	2104      	movs	r1, #4
 800ad08:	438a      	bics	r2, r1
 800ad0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800ad0c:	4b66      	ldr	r3, [pc, #408]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad10:	22f8      	movs	r2, #248	; 0xf8
 800ad12:	4393      	bics	r3, r2
 800ad14:	0019      	movs	r1, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	00da      	lsls	r2, r3, #3
 800ad1c:	4b62      	ldr	r3, [pc, #392]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	635a      	str	r2, [r3, #52]	; 0x34
 800ad22:	e01e      	b.n	800ad62 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800ad24:	4b60      	ldr	r3, [pc, #384]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad28:	4b5f      	ldr	r3, [pc, #380]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	430a      	orrs	r2, r1
 800ad2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800ad30:	4b5d      	ldr	r3, [pc, #372]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad34:	4b5c      	ldr	r3, [pc, #368]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad36:	2101      	movs	r1, #1
 800ad38:	438a      	bics	r2, r1
 800ad3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad3c:	f7fd faf0 	bl	8008320 <HAL_GetTick>
 800ad40:	0003      	movs	r3, r0
 800ad42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800ad46:	f7fd faeb 	bl	8008320 <HAL_GetTick>
 800ad4a:	0002      	movs	r2, r0
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e0a2      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800ad58:	4b53      	ldr	r3, [pc, #332]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	4013      	ands	r3, r2
 800ad60:	d1f1      	bne.n	800ad46 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d100      	bne.n	800ad6c <HAL_RCC_OscConfig+0x4ec>
 800ad6a:	e097      	b.n	800ae9c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad6c:	4b4e      	ldr	r3, [pc, #312]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	220c      	movs	r2, #12
 800ad72:	4013      	ands	r3, r2
 800ad74:	2b08      	cmp	r3, #8
 800ad76:	d100      	bne.n	800ad7a <HAL_RCC_OscConfig+0x4fa>
 800ad78:	e06b      	b.n	800ae52 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d14c      	bne.n	800ae1c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad82:	4b49      	ldr	r3, [pc, #292]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	4b48      	ldr	r3, [pc, #288]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ad88:	494a      	ldr	r1, [pc, #296]	; (800aeb4 <HAL_RCC_OscConfig+0x634>)
 800ad8a:	400a      	ands	r2, r1
 800ad8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad8e:	f7fd fac7 	bl	8008320 <HAL_GetTick>
 800ad92:	0003      	movs	r3, r0
 800ad94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad96:	e008      	b.n	800adaa <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad98:	f7fd fac2 	bl	8008320 <HAL_GetTick>
 800ad9c:	0002      	movs	r2, r0
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d901      	bls.n	800adaa <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e079      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800adaa:	4b3f      	ldr	r3, [pc, #252]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	2380      	movs	r3, #128	; 0x80
 800adb0:	049b      	lsls	r3, r3, #18
 800adb2:	4013      	ands	r3, r2
 800adb4:	d1f0      	bne.n	800ad98 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adb6:	4b3c      	ldr	r3, [pc, #240]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800adb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adba:	220f      	movs	r2, #15
 800adbc:	4393      	bics	r3, r2
 800adbe:	0019      	movs	r1, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc4:	4b38      	ldr	r3, [pc, #224]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800adc6:	430a      	orrs	r2, r1
 800adc8:	62da      	str	r2, [r3, #44]	; 0x2c
 800adca:	4b37      	ldr	r3, [pc, #220]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	4a3a      	ldr	r2, [pc, #232]	; (800aeb8 <HAL_RCC_OscConfig+0x638>)
 800add0:	4013      	ands	r3, r2
 800add2:	0019      	movs	r1, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800addc:	431a      	orrs	r2, r3
 800adde:	4b32      	ldr	r3, [pc, #200]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ade0:	430a      	orrs	r2, r1
 800ade2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ade4:	4b30      	ldr	r3, [pc, #192]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	4b2f      	ldr	r3, [pc, #188]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800adea:	2180      	movs	r1, #128	; 0x80
 800adec:	0449      	lsls	r1, r1, #17
 800adee:	430a      	orrs	r2, r1
 800adf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adf2:	f7fd fa95 	bl	8008320 <HAL_GetTick>
 800adf6:	0003      	movs	r3, r0
 800adf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800adfa:	e008      	b.n	800ae0e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adfc:	f7fd fa90 	bl	8008320 <HAL_GetTick>
 800ae00:	0002      	movs	r2, r0
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	d901      	bls.n	800ae0e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e047      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ae0e:	4b26      	ldr	r3, [pc, #152]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	2380      	movs	r3, #128	; 0x80
 800ae14:	049b      	lsls	r3, r3, #18
 800ae16:	4013      	ands	r3, r2
 800ae18:	d0f0      	beq.n	800adfc <HAL_RCC_OscConfig+0x57c>
 800ae1a:	e03f      	b.n	800ae9c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae1c:	4b22      	ldr	r3, [pc, #136]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	4b21      	ldr	r3, [pc, #132]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae22:	4924      	ldr	r1, [pc, #144]	; (800aeb4 <HAL_RCC_OscConfig+0x634>)
 800ae24:	400a      	ands	r2, r1
 800ae26:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae28:	f7fd fa7a 	bl	8008320 <HAL_GetTick>
 800ae2c:	0003      	movs	r3, r0
 800ae2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae30:	e008      	b.n	800ae44 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae32:	f7fd fa75 	bl	8008320 <HAL_GetTick>
 800ae36:	0002      	movs	r2, r0
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d901      	bls.n	800ae44 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e02c      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ae44:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	2380      	movs	r3, #128	; 0x80
 800ae4a:	049b      	lsls	r3, r3, #18
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	d1f0      	bne.n	800ae32 <HAL_RCC_OscConfig+0x5b2>
 800ae50:	e024      	b.n	800ae9c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e01f      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800ae5e:	4b12      	ldr	r3, [pc, #72]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800ae64:	4b10      	ldr	r3, [pc, #64]	; (800aea8 <HAL_RCC_OscConfig+0x628>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	23c0      	movs	r3, #192	; 0xc0
 800ae6e:	025b      	lsls	r3, r3, #9
 800ae70:	401a      	ands	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d10e      	bne.n	800ae98 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	220f      	movs	r2, #15
 800ae7e:	401a      	ands	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d107      	bne.n	800ae98 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	23f0      	movs	r3, #240	; 0xf0
 800ae8c:	039b      	lsls	r3, r3, #14
 800ae8e:	401a      	ands	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d001      	beq.n	800ae9c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	0018      	movs	r0, r3
 800aea0:	46bd      	mov	sp, r7
 800aea2:	b008      	add	sp, #32
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	46c0      	nop			; (mov r8, r8)
 800aea8:	40021000 	.word	0x40021000
 800aeac:	00001388 	.word	0x00001388
 800aeb0:	efffffff 	.word	0xefffffff
 800aeb4:	feffffff 	.word	0xfeffffff
 800aeb8:	ffc27fff 	.word	0xffc27fff

0800aebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0b3      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aed0:	4b5b      	ldr	r3, [pc, #364]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2201      	movs	r2, #1
 800aed6:	4013      	ands	r3, r2
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d911      	bls.n	800af02 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aede:	4b58      	ldr	r3, [pc, #352]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2201      	movs	r2, #1
 800aee4:	4393      	bics	r3, r2
 800aee6:	0019      	movs	r1, r3
 800aee8:	4b55      	ldr	r3, [pc, #340]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aef0:	4b53      	ldr	r3, [pc, #332]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2201      	movs	r2, #1
 800aef6:	4013      	ands	r3, r2
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d001      	beq.n	800af02 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e09a      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2202      	movs	r2, #2
 800af08:	4013      	ands	r3, r2
 800af0a:	d015      	beq.n	800af38 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2204      	movs	r2, #4
 800af12:	4013      	ands	r3, r2
 800af14:	d006      	beq.n	800af24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800af16:	4b4b      	ldr	r3, [pc, #300]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af1c:	21e0      	movs	r1, #224	; 0xe0
 800af1e:	00c9      	lsls	r1, r1, #3
 800af20:	430a      	orrs	r2, r1
 800af22:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af24:	4b47      	ldr	r3, [pc, #284]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	22f0      	movs	r2, #240	; 0xf0
 800af2a:	4393      	bics	r3, r2
 800af2c:	0019      	movs	r1, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	4b44      	ldr	r3, [pc, #272]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2201      	movs	r2, #1
 800af3e:	4013      	ands	r3, r2
 800af40:	d040      	beq.n	800afc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d107      	bne.n	800af5a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af4a:	4b3e      	ldr	r3, [pc, #248]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	2380      	movs	r3, #128	; 0x80
 800af50:	029b      	lsls	r3, r3, #10
 800af52:	4013      	ands	r3, r2
 800af54:	d114      	bne.n	800af80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e06e      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d107      	bne.n	800af72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af62:	4b38      	ldr	r3, [pc, #224]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	2380      	movs	r3, #128	; 0x80
 800af68:	049b      	lsls	r3, r3, #18
 800af6a:	4013      	ands	r3, r2
 800af6c:	d108      	bne.n	800af80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e062      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af72:	4b34      	ldr	r3, [pc, #208]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2202      	movs	r2, #2
 800af78:	4013      	ands	r3, r2
 800af7a:	d101      	bne.n	800af80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e05b      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800af80:	4b30      	ldr	r3, [pc, #192]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	2203      	movs	r2, #3
 800af86:	4393      	bics	r3, r2
 800af88:	0019      	movs	r1, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	4b2d      	ldr	r3, [pc, #180]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800af90:	430a      	orrs	r2, r1
 800af92:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800af94:	f7fd f9c4 	bl	8008320 <HAL_GetTick>
 800af98:	0003      	movs	r3, r0
 800af9a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af9c:	e009      	b.n	800afb2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af9e:	f7fd f9bf 	bl	8008320 <HAL_GetTick>
 800afa2:	0002      	movs	r2, r0
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	4a27      	ldr	r2, [pc, #156]	; (800b048 <HAL_RCC_ClockConfig+0x18c>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e042      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	220c      	movs	r2, #12
 800afb8:	401a      	ands	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d1ec      	bne.n	800af9e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800afc4:	4b1e      	ldr	r3, [pc, #120]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2201      	movs	r2, #1
 800afca:	4013      	ands	r3, r2
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d211      	bcs.n	800aff6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afd2:	4b1b      	ldr	r3, [pc, #108]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2201      	movs	r2, #1
 800afd8:	4393      	bics	r3, r2
 800afda:	0019      	movs	r1, r3
 800afdc:	4b18      	ldr	r3, [pc, #96]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afe4:	4b16      	ldr	r3, [pc, #88]	; (800b040 <HAL_RCC_ClockConfig+0x184>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2201      	movs	r2, #1
 800afea:	4013      	ands	r3, r2
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d001      	beq.n	800aff6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e020      	b.n	800b038 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2204      	movs	r2, #4
 800affc:	4013      	ands	r3, r2
 800affe:	d009      	beq.n	800b014 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b000:	4b10      	ldr	r3, [pc, #64]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4a11      	ldr	r2, [pc, #68]	; (800b04c <HAL_RCC_ClockConfig+0x190>)
 800b006:	4013      	ands	r3, r2
 800b008:	0019      	movs	r1, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	4b0d      	ldr	r3, [pc, #52]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800b010:	430a      	orrs	r2, r1
 800b012:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800b014:	f000 f820 	bl	800b058 <HAL_RCC_GetSysClockFreq>
 800b018:	0001      	movs	r1, r0
 800b01a:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <HAL_RCC_ClockConfig+0x188>)
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	091b      	lsrs	r3, r3, #4
 800b020:	220f      	movs	r2, #15
 800b022:	4013      	ands	r3, r2
 800b024:	4a0a      	ldr	r2, [pc, #40]	; (800b050 <HAL_RCC_ClockConfig+0x194>)
 800b026:	5cd3      	ldrb	r3, [r2, r3]
 800b028:	000a      	movs	r2, r1
 800b02a:	40da      	lsrs	r2, r3
 800b02c:	4b09      	ldr	r3, [pc, #36]	; (800b054 <HAL_RCC_ClockConfig+0x198>)
 800b02e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800b030:	2000      	movs	r0, #0
 800b032:	f7fd f92f 	bl	8008294 <HAL_InitTick>
  
  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	0018      	movs	r0, r3
 800b03a:	46bd      	mov	sp, r7
 800b03c:	b004      	add	sp, #16
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	40022000 	.word	0x40022000
 800b044:	40021000 	.word	0x40021000
 800b048:	00001388 	.word	0x00001388
 800b04c:	fffff8ff 	.word	0xfffff8ff
 800b050:	08016448 	.word	0x08016448
 800b054:	20000078 	.word	0x20000078

0800b058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b08f      	sub	sp, #60	; 0x3c
 800b05c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800b05e:	2314      	movs	r3, #20
 800b060:	18fb      	adds	r3, r7, r3
 800b062:	4a2c      	ldr	r2, [pc, #176]	; (800b114 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b064:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b066:	c313      	stmia	r3!, {r0, r1, r4}
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800b06c:	1d3b      	adds	r3, r7, #4
 800b06e:	4a2a      	ldr	r2, [pc, #168]	; (800b118 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b070:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b072:	c313      	stmia	r3!, {r0, r1, r4}
 800b074:	6812      	ldr	r2, [r2, #0]
 800b076:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b07c:	2300      	movs	r3, #0
 800b07e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b080:	2300      	movs	r3, #0
 800b082:	637b      	str	r3, [r7, #52]	; 0x34
 800b084:	2300      	movs	r3, #0
 800b086:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800b08c:	4b23      	ldr	r3, [pc, #140]	; (800b11c <HAL_RCC_GetSysClockFreq+0xc4>)
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	220c      	movs	r2, #12
 800b096:	4013      	ands	r3, r2
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d002      	beq.n	800b0a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800b09c:	2b08      	cmp	r3, #8
 800b09e:	d003      	beq.n	800b0a8 <HAL_RCC_GetSysClockFreq+0x50>
 800b0a0:	e02f      	b.n	800b102 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b0a2:	4b1f      	ldr	r3, [pc, #124]	; (800b120 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b0a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b0a6:	e02f      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	0c9b      	lsrs	r3, r3, #18
 800b0ac:	220f      	movs	r2, #15
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	2214      	movs	r2, #20
 800b0b2:	18ba      	adds	r2, r7, r2
 800b0b4:	5cd3      	ldrb	r3, [r2, r3]
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800b0b8:	4b18      	ldr	r3, [pc, #96]	; (800b11c <HAL_RCC_GetSysClockFreq+0xc4>)
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	220f      	movs	r2, #15
 800b0be:	4013      	ands	r3, r2
 800b0c0:	1d3a      	adds	r2, r7, #4
 800b0c2:	5cd3      	ldrb	r3, [r2, r3]
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b0c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c8:	23c0      	movs	r3, #192	; 0xc0
 800b0ca:	025b      	lsls	r3, r3, #9
 800b0cc:	401a      	ands	r2, r3
 800b0ce:	2380      	movs	r3, #128	; 0x80
 800b0d0:	025b      	lsls	r3, r3, #9
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d109      	bne.n	800b0ea <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b0d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0d8:	4811      	ldr	r0, [pc, #68]	; (800b120 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b0da:	f7f5 f831 	bl	8000140 <__udivsi3>
 800b0de:	0003      	movs	r3, r0
 800b0e0:	001a      	movs	r2, r3
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	4353      	muls	r3, r2
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e8:	e008      	b.n	800b0fc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ec:	480d      	ldr	r0, [pc, #52]	; (800b124 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b0ee:	f7f5 f827 	bl	8000140 <__udivsi3>
 800b0f2:	0003      	movs	r3, r0
 800b0f4:	001a      	movs	r2, r3
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	4353      	muls	r3, r2
 800b0fa:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b100:	e002      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b102:	4b08      	ldr	r3, [pc, #32]	; (800b124 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b104:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b106:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800b10a:	0018      	movs	r0, r3
 800b10c:	46bd      	mov	sp, r7
 800b10e:	b00f      	add	sp, #60	; 0x3c
 800b110:	bd90      	pop	{r4, r7, pc}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	080163ec 	.word	0x080163ec
 800b118:	080163fc 	.word	0x080163fc
 800b11c:	40021000 	.word	0x40021000
 800b120:	00f42400 	.word	0x00f42400
 800b124:	007a1200 	.word	0x007a1200

0800b128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <HAL_RCC_GetHCLKFreq+0x10>)
 800b12e:	681b      	ldr	r3, [r3, #0]
}
 800b130:	0018      	movs	r0, r3
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	46c0      	nop			; (mov r8, r8)
 800b138:	20000078 	.word	0x20000078

0800b13c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800b140:	f7ff fff2 	bl	800b128 <HAL_RCC_GetHCLKFreq>
 800b144:	0001      	movs	r1, r0
 800b146:	4b06      	ldr	r3, [pc, #24]	; (800b160 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	0a1b      	lsrs	r3, r3, #8
 800b14c:	2207      	movs	r2, #7
 800b14e:	4013      	ands	r3, r2
 800b150:	4a04      	ldr	r2, [pc, #16]	; (800b164 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b152:	5cd3      	ldrb	r3, [r2, r3]
 800b154:	40d9      	lsrs	r1, r3
 800b156:	000b      	movs	r3, r1
}    
 800b158:	0018      	movs	r0, r3
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	46c0      	nop			; (mov r8, r8)
 800b160:	40021000 	.word	0x40021000
 800b164:	08016458 	.word	0x08016458

0800b168 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	2380      	movs	r3, #128	; 0x80
 800b17e:	025b      	lsls	r3, r3, #9
 800b180:	4013      	ands	r3, r2
 800b182:	d100      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800b184:	e08e      	b.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800b186:	2017      	movs	r0, #23
 800b188:	183b      	adds	r3, r7, r0
 800b18a:	2200      	movs	r2, #0
 800b18c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b18e:	4b5f      	ldr	r3, [pc, #380]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b190:	69da      	ldr	r2, [r3, #28]
 800b192:	2380      	movs	r3, #128	; 0x80
 800b194:	055b      	lsls	r3, r3, #21
 800b196:	4013      	ands	r3, r2
 800b198:	d110      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b19a:	4b5c      	ldr	r3, [pc, #368]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b19c:	69da      	ldr	r2, [r3, #28]
 800b19e:	4b5b      	ldr	r3, [pc, #364]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b1a0:	2180      	movs	r1, #128	; 0x80
 800b1a2:	0549      	lsls	r1, r1, #21
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	61da      	str	r2, [r3, #28]
 800b1a8:	4b58      	ldr	r3, [pc, #352]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b1aa:	69da      	ldr	r2, [r3, #28]
 800b1ac:	2380      	movs	r3, #128	; 0x80
 800b1ae:	055b      	lsls	r3, r3, #21
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	60bb      	str	r3, [r7, #8]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1b6:	183b      	adds	r3, r7, r0
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1bc:	4b54      	ldr	r3, [pc, #336]	; (800b310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	2380      	movs	r3, #128	; 0x80
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	d11a      	bne.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1c8:	4b51      	ldr	r3, [pc, #324]	; (800b310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	4b50      	ldr	r3, [pc, #320]	; (800b310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b1ce:	2180      	movs	r1, #128	; 0x80
 800b1d0:	0049      	lsls	r1, r1, #1
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1d6:	f7fd f8a3 	bl	8008320 <HAL_GetTick>
 800b1da:	0003      	movs	r3, r0
 800b1dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1de:	e008      	b.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1e0:	f7fd f89e 	bl	8008320 <HAL_GetTick>
 800b1e4:	0002      	movs	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b64      	cmp	r3, #100	; 0x64
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e087      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1f2:	4b47      	ldr	r3, [pc, #284]	; (800b310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	2380      	movs	r3, #128	; 0x80
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	d0f0      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b1fe:	4b43      	ldr	r3, [pc, #268]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b200:	6a1a      	ldr	r2, [r3, #32]
 800b202:	23c0      	movs	r3, #192	; 0xc0
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4013      	ands	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d034      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x112>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	23c0      	movs	r3, #192	; 0xc0
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4013      	ands	r3, r2
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d02c      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b220:	4b3a      	ldr	r3, [pc, #232]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	4a3b      	ldr	r2, [pc, #236]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b226:	4013      	ands	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b22a:	4b38      	ldr	r3, [pc, #224]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b22c:	6a1a      	ldr	r2, [r3, #32]
 800b22e:	4b37      	ldr	r3, [pc, #220]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b230:	2180      	movs	r1, #128	; 0x80
 800b232:	0249      	lsls	r1, r1, #9
 800b234:	430a      	orrs	r2, r1
 800b236:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b238:	4b34      	ldr	r3, [pc, #208]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b23a:	6a1a      	ldr	r2, [r3, #32]
 800b23c:	4b33      	ldr	r3, [pc, #204]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b23e:	4936      	ldr	r1, [pc, #216]	; (800b318 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b240:	400a      	ands	r2, r1
 800b242:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b244:	4b31      	ldr	r3, [pc, #196]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	4013      	ands	r3, r2
 800b250:	d013      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b252:	f7fd f865 	bl	8008320 <HAL_GetTick>
 800b256:	0003      	movs	r3, r0
 800b258:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b25a:	e009      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b25c:	f7fd f860 	bl	8008320 <HAL_GetTick>
 800b260:	0002      	movs	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	4a2d      	ldr	r2, [pc, #180]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d901      	bls.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e048      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b270:	4b26      	ldr	r3, [pc, #152]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	2202      	movs	r2, #2
 800b276:	4013      	ands	r3, r2
 800b278:	d0f0      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b27a:	4b24      	ldr	r3, [pc, #144]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	4a25      	ldr	r2, [pc, #148]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b280:	4013      	ands	r3, r2
 800b282:	0019      	movs	r1, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	4b20      	ldr	r3, [pc, #128]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b28a:	430a      	orrs	r2, r1
 800b28c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b28e:	2317      	movs	r3, #23
 800b290:	18fb      	adds	r3, r7, r3
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d105      	bne.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b298:	4b1c      	ldr	r3, [pc, #112]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	4b1b      	ldr	r3, [pc, #108]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b29e:	4920      	ldr	r1, [pc, #128]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b2a0:	400a      	ands	r2, r1
 800b2a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	d009      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b2ae:	4b17      	ldr	r3, [pc, #92]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	4393      	bics	r3, r2
 800b2b6:	0019      	movs	r1, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689a      	ldr	r2, [r3, #8]
 800b2bc:	4b13      	ldr	r3, [pc, #76]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	d009      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d0:	2210      	movs	r2, #16
 800b2d2:	4393      	bics	r3, r2
 800b2d4:	0019      	movs	r1, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	029b      	lsls	r3, r3, #10
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	d009      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b2ec:	4b07      	ldr	r3, [pc, #28]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	2280      	movs	r2, #128	; 0x80
 800b2f2:	4393      	bics	r3, r2
 800b2f4:	0019      	movs	r1, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	691a      	ldr	r2, [r3, #16]
 800b2fa:	4b04      	ldr	r3, [pc, #16]	; (800b30c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	0018      	movs	r0, r3
 800b304:	46bd      	mov	sp, r7
 800b306:	b006      	add	sp, #24
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	40021000 	.word	0x40021000
 800b310:	40007000 	.word	0x40007000
 800b314:	fffffcff 	.word	0xfffffcff
 800b318:	fffeffff 	.word	0xfffeffff
 800b31c:	00001388 	.word	0x00001388
 800b320:	efffffff 	.word	0xefffffff

0800b324 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e081      	b.n	800b43a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	7f5b      	ldrb	r3, [r3, #29]
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	0018      	movs	r0, r3
 800b34a:	f7fc fbd7 	bl	8007afc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2202      	movs	r2, #2
 800b352:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	22ca      	movs	r2, #202	; 0xca
 800b35a:	625a      	str	r2, [r3, #36]	; 0x24
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2253      	movs	r2, #83	; 0x53
 800b362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	0018      	movs	r0, r3
 800b368:	f000 f9fb 	bl	800b762 <RTC_EnterInitMode>
 800b36c:	1e03      	subs	r3, r0, #0
 800b36e:	d008      	beq.n	800b382 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	22ff      	movs	r2, #255	; 0xff
 800b376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2204      	movs	r2, #4
 800b37c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e05b      	b.n	800b43a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	492d      	ldr	r1, [pc, #180]	; (800b444 <HAL_RTC_Init+0x120>)
 800b38e:	400a      	ands	r2, r1
 800b390:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6899      	ldr	r1, [r3, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68d2      	ldr	r2, [r2, #12]
 800b3b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6919      	ldr	r1, [r3, #16]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	041a      	lsls	r2, r3, #16
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68da      	ldr	r2, [r3, #12]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2180      	movs	r1, #128	; 0x80
 800b3da:	438a      	bics	r2, r1
 800b3dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	2220      	movs	r2, #32
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	d10e      	bne.n	800b408 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f000 f98f 	bl	800b710 <HAL_RTC_WaitForSynchro>
 800b3f2:	1e03      	subs	r3, r0, #0
 800b3f4:	d008      	beq.n	800b408 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	22ff      	movs	r2, #255	; 0xff
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2204      	movs	r2, #4
 800b402:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e018      	b.n	800b43a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	490d      	ldr	r1, [pc, #52]	; (800b448 <HAL_RTC_Init+0x124>)
 800b414:	400a      	ands	r2, r1
 800b416:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	699a      	ldr	r2, [r3, #24]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	22ff      	movs	r2, #255	; 0xff
 800b430:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b438:	2300      	movs	r3, #0
  }
}
 800b43a:	0018      	movs	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	b002      	add	sp, #8
 800b440:	bd80      	pop	{r7, pc}
 800b442:	46c0      	nop			; (mov r8, r8)
 800b444:	ff8fffbf 	.word	0xff8fffbf
 800b448:	fffbffff 	.word	0xfffbffff

0800b44c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b44c:	b590      	push	{r4, r7, lr}
 800b44e:	b087      	sub	sp, #28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	7f1b      	ldrb	r3, [r3, #28]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_RTC_SetTime+0x1c>
 800b464:	2302      	movs	r3, #2
 800b466:	e0a5      	b.n	800b5b4 <HAL_RTC_SetTime+0x168>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2201      	movs	r2, #1
 800b46c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2202      	movs	r2, #2
 800b472:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d125      	bne.n	800b4c6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	2240      	movs	r2, #64	; 0x40
 800b482:	4013      	ands	r3, r2
 800b484:	d102      	bne.n	800b48c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	2200      	movs	r2, #0
 800b48a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	0018      	movs	r0, r3
 800b492:	f000 f992 	bl	800b7ba <RTC_ByteToBcd2>
 800b496:	0003      	movs	r3, r0
 800b498:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f000 f98b 	bl	800b7ba <RTC_ByteToBcd2>
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b4a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	789b      	ldrb	r3, [r3, #2]
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f000 f983 	bl	800b7ba <RTC_ByteToBcd2>
 800b4b4:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b4b6:	0022      	movs	r2, r4
 800b4b8:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	78db      	ldrb	r3, [r3, #3]
 800b4be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	617b      	str	r3, [r7, #20]
 800b4c4:	e017      	b.n	800b4f6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	2240      	movs	r2, #64	; 0x40
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	d102      	bne.n	800b4d8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	785b      	ldrb	r3, [r3, #1]
 800b4e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b4e4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b4ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	78db      	ldrb	r3, [r3, #3]
 800b4f0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	22ca      	movs	r2, #202	; 0xca
 800b4fc:	625a      	str	r2, [r3, #36]	; 0x24
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2253      	movs	r2, #83	; 0x53
 800b504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	0018      	movs	r0, r3
 800b50a:	f000 f92a 	bl	800b762 <RTC_EnterInitMode>
 800b50e:	1e03      	subs	r3, r0, #0
 800b510:	d00b      	beq.n	800b52a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	22ff      	movs	r2, #255	; 0xff
 800b518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2204      	movs	r2, #4
 800b51e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e044      	b.n	800b5b4 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4922      	ldr	r1, [pc, #136]	; (800b5bc <HAL_RTC_SetTime+0x170>)
 800b532:	400a      	ands	r2, r1
 800b534:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	491f      	ldr	r1, [pc, #124]	; (800b5c0 <HAL_RTC_SetTime+0x174>)
 800b542:	400a      	ands	r2, r1
 800b544:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	6899      	ldr	r1, [r3, #8]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	431a      	orrs	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68da      	ldr	r2, [r3, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2180      	movs	r1, #128	; 0x80
 800b56a:	438a      	bics	r2, r1
 800b56c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	2220      	movs	r2, #32
 800b576:	4013      	ands	r3, r2
 800b578:	d111      	bne.n	800b59e <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	0018      	movs	r0, r3
 800b57e:	f000 f8c7 	bl	800b710 <HAL_RTC_WaitForSynchro>
 800b582:	1e03      	subs	r3, r0, #0
 800b584:	d00b      	beq.n	800b59e <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	22ff      	movs	r2, #255	; 0xff
 800b58c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2204      	movs	r2, #4
 800b592:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e00a      	b.n	800b5b4 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	22ff      	movs	r2, #255	; 0xff
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
  }
}
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	b007      	add	sp, #28
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	007f7f7f 	.word	0x007f7f7f
 800b5c0:	fffbffff 	.word	0xfffbffff

0800b5c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	7f1b      	ldrb	r3, [r3, #28]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d101      	bne.n	800b5e0 <HAL_RTC_SetDate+0x1c>
 800b5dc:	2302      	movs	r3, #2
 800b5de:	e091      	b.n	800b704 <HAL_RTC_SetDate+0x140>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10e      	bne.n	800b610 <HAL_RTC_SetDate+0x4c>
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	785b      	ldrb	r3, [r3, #1]
 800b5f6:	001a      	movs	r2, r3
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	d008      	beq.n	800b610 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	785b      	ldrb	r3, [r3, #1]
 800b602:	2210      	movs	r2, #16
 800b604:	4393      	bics	r3, r2
 800b606:	b2db      	uxtb	r3, r3
 800b608:	330a      	adds	r3, #10
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11c      	bne.n	800b650 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	78db      	ldrb	r3, [r3, #3]
 800b61a:	0018      	movs	r0, r3
 800b61c:	f000 f8cd 	bl	800b7ba <RTC_ByteToBcd2>
 800b620:	0003      	movs	r3, r0
 800b622:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	785b      	ldrb	r3, [r3, #1]
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 f8c6 	bl	800b7ba <RTC_ByteToBcd2>
 800b62e:	0003      	movs	r3, r0
 800b630:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b632:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	789b      	ldrb	r3, [r3, #2]
 800b638:	0018      	movs	r0, r3
 800b63a:	f000 f8be 	bl	800b7ba <RTC_ByteToBcd2>
 800b63e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b640:	0022      	movs	r2, r4
 800b642:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	e00e      	b.n	800b66e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	78db      	ldrb	r3, [r3, #3]
 800b654:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	785b      	ldrb	r3, [r3, #1]
 800b65a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b65c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b662:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	22ca      	movs	r2, #202	; 0xca
 800b674:	625a      	str	r2, [r3, #36]	; 0x24
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2253      	movs	r2, #83	; 0x53
 800b67c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	0018      	movs	r0, r3
 800b682:	f000 f86e 	bl	800b762 <RTC_EnterInitMode>
 800b686:	1e03      	subs	r3, r0, #0
 800b688:	d00b      	beq.n	800b6a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	22ff      	movs	r2, #255	; 0xff
 800b690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2204      	movs	r2, #4
 800b696:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e030      	b.n	800b704 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4918      	ldr	r1, [pc, #96]	; (800b70c <HAL_RTC_SetDate+0x148>)
 800b6aa:	400a      	ands	r2, r1
 800b6ac:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2180      	movs	r1, #128	; 0x80
 800b6ba:	438a      	bics	r2, r1
 800b6bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	d111      	bne.n	800b6ee <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	f000 f81f 	bl	800b710 <HAL_RTC_WaitForSynchro>
 800b6d2:	1e03      	subs	r3, r0, #0
 800b6d4:	d00b      	beq.n	800b6ee <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	22ff      	movs	r2, #255	; 0xff
 800b6dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e00a      	b.n	800b704 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	22ff      	movs	r2, #255	; 0xff
 800b6f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800b702:	2300      	movs	r3, #0
  }
}
 800b704:	0018      	movs	r0, r3
 800b706:	46bd      	mov	sp, r7
 800b708:	b007      	add	sp, #28
 800b70a:	bd90      	pop	{r4, r7, pc}
 800b70c:	00ffff3f 	.word	0x00ffff3f

0800b710 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68da      	ldr	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	21a0      	movs	r1, #160	; 0xa0
 800b728:	438a      	bics	r2, r1
 800b72a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b72c:	f7fc fdf8 	bl	8008320 <HAL_GetTick>
 800b730:	0003      	movs	r3, r0
 800b732:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b734:	e00a      	b.n	800b74c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b736:	f7fc fdf3 	bl	8008320 <HAL_GetTick>
 800b73a:	0002      	movs	r2, r0
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	23fa      	movs	r3, #250	; 0xfa
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	429a      	cmp	r2, r3
 800b746:	d901      	bls.n	800b74c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e006      	b.n	800b75a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	2220      	movs	r2, #32
 800b754:	4013      	ands	r3, r2
 800b756:	d0ee      	beq.n	800b736 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	0018      	movs	r0, r3
 800b75c:	46bd      	mov	sp, r7
 800b75e:	b004      	add	sp, #16
 800b760:	bd80      	pop	{r7, pc}

0800b762 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b084      	sub	sp, #16
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	2240      	movs	r2, #64	; 0x40
 800b776:	4013      	ands	r3, r2
 800b778:	d11a      	bne.n	800b7b0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2201      	movs	r2, #1
 800b780:	4252      	negs	r2, r2
 800b782:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b784:	f7fc fdcc 	bl	8008320 <HAL_GetTick>
 800b788:	0003      	movs	r3, r0
 800b78a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b78c:	e00a      	b.n	800b7a4 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b78e:	f7fc fdc7 	bl	8008320 <HAL_GetTick>
 800b792:	0002      	movs	r2, r0
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	1ad2      	subs	r2, r2, r3
 800b798:	23fa      	movs	r3, #250	; 0xfa
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d901      	bls.n	800b7a4 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e006      	b.n	800b7b2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	2240      	movs	r2, #64	; 0x40
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	d0ee      	beq.n	800b78e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	b004      	add	sp, #16
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b084      	sub	sp, #16
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	0002      	movs	r2, r0
 800b7c2:	1dfb      	adds	r3, r7, #7
 800b7c4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800b7ca:	e007      	b.n	800b7dc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b7d2:	1dfb      	adds	r3, r7, #7
 800b7d4:	1dfa      	adds	r2, r7, #7
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	3a0a      	subs	r2, #10
 800b7da:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800b7dc:	1dfb      	adds	r3, r7, #7
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b09      	cmp	r3, #9
 800b7e2:	d8f3      	bhi.n	800b7cc <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	1dfb      	adds	r3, r7, #7
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	b2db      	uxtb	r3, r3
}
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	b004      	add	sp, #16
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e0a8      	b.n	800b960 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	2382      	movs	r3, #130	; 0x82
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	429a      	cmp	r2, r3
 800b820:	d009      	beq.n	800b836 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	61da      	str	r2, [r3, #28]
 800b828:	e005      	b.n	800b836 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	225d      	movs	r2, #93	; 0x5d
 800b840:	5c9b      	ldrb	r3, [r3, r2]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b00      	cmp	r3, #0
 800b846:	d107      	bne.n	800b858 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	225c      	movs	r2, #92	; 0x5c
 800b84c:	2100      	movs	r1, #0
 800b84e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	0018      	movs	r0, r3
 800b854:	f7fc f96a 	bl	8007b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	225d      	movs	r2, #93	; 0x5d
 800b85c:	2102      	movs	r1, #2
 800b85e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2140      	movs	r1, #64	; 0x40
 800b86c:	438a      	bics	r2, r1
 800b86e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68da      	ldr	r2, [r3, #12]
 800b874:	23e0      	movs	r3, #224	; 0xe0
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	429a      	cmp	r2, r3
 800b87a:	d902      	bls.n	800b882 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e002      	b.n	800b888 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b882:	2380      	movs	r3, #128	; 0x80
 800b884:	015b      	lsls	r3, r3, #5
 800b886:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68da      	ldr	r2, [r3, #12]
 800b88c:	23f0      	movs	r3, #240	; 0xf0
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	429a      	cmp	r2, r3
 800b892:	d008      	beq.n	800b8a6 <HAL_SPI_Init+0xaa>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68da      	ldr	r2, [r3, #12]
 800b898:	23e0      	movs	r3, #224	; 0xe0
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d002      	beq.n	800b8a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	2382      	movs	r3, #130	; 0x82
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	401a      	ands	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6899      	ldr	r1, [r3, #8]
 800b8b4:	2384      	movs	r3, #132	; 0x84
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	400b      	ands	r3, r1
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	2102      	movs	r1, #2
 800b8c2:	400b      	ands	r3, r1
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	2101      	movs	r1, #1
 800b8cc:	400b      	ands	r3, r1
 800b8ce:	431a      	orrs	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6999      	ldr	r1, [r3, #24]
 800b8d4:	2380      	movs	r3, #128	; 0x80
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	400b      	ands	r3, r1
 800b8da:	431a      	orrs	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	2138      	movs	r1, #56	; 0x38
 800b8e2:	400b      	ands	r3, r1
 800b8e4:	431a      	orrs	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a1b      	ldr	r3, [r3, #32]
 800b8ea:	2180      	movs	r1, #128	; 0x80
 800b8ec:	400b      	ands	r3, r1
 800b8ee:	431a      	orrs	r2, r3
 800b8f0:	0011      	movs	r1, r2
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8f6:	2380      	movs	r3, #128	; 0x80
 800b8f8:	019b      	lsls	r3, r3, #6
 800b8fa:	401a      	ands	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	0c1b      	lsrs	r3, r3, #16
 800b90a:	2204      	movs	r2, #4
 800b90c:	401a      	ands	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b912:	2110      	movs	r1, #16
 800b914:	400b      	ands	r3, r1
 800b916:	431a      	orrs	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91c:	2108      	movs	r1, #8
 800b91e:	400b      	ands	r3, r1
 800b920:	431a      	orrs	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68d9      	ldr	r1, [r3, #12]
 800b926:	23f0      	movs	r3, #240	; 0xf0
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	400b      	ands	r3, r1
 800b92c:	431a      	orrs	r2, r3
 800b92e:	0011      	movs	r1, r2
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	2380      	movs	r3, #128	; 0x80
 800b934:	015b      	lsls	r3, r3, #5
 800b936:	401a      	ands	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	69da      	ldr	r2, [r3, #28]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4907      	ldr	r1, [pc, #28]	; (800b968 <HAL_SPI_Init+0x16c>)
 800b94c:	400a      	ands	r2, r1
 800b94e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	225d      	movs	r2, #93	; 0x5d
 800b95a:	2101      	movs	r1, #1
 800b95c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	0018      	movs	r0, r3
 800b962:	46bd      	mov	sp, r7
 800b964:	b004      	add	sp, #16
 800b966:	bd80      	pop	{r7, pc}
 800b968:	fffff7ff 	.word	0xfffff7ff

0800b96c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b088      	sub	sp, #32
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	1dbb      	adds	r3, r7, #6
 800b97a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b97c:	231f      	movs	r3, #31
 800b97e:	18fb      	adds	r3, r7, r3
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	225c      	movs	r2, #92	; 0x5c
 800b988:	5c9b      	ldrb	r3, [r3, r2]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <HAL_SPI_Transmit+0x26>
 800b98e:	2302      	movs	r3, #2
 800b990:	e140      	b.n	800bc14 <HAL_SPI_Transmit+0x2a8>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	225c      	movs	r2, #92	; 0x5c
 800b996:	2101      	movs	r1, #1
 800b998:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b99a:	f7fc fcc1 	bl	8008320 <HAL_GetTick>
 800b99e:	0003      	movs	r3, r0
 800b9a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b9a2:	2316      	movs	r3, #22
 800b9a4:	18fb      	adds	r3, r7, r3
 800b9a6:	1dba      	adds	r2, r7, #6
 800b9a8:	8812      	ldrh	r2, [r2, #0]
 800b9aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	225d      	movs	r2, #93	; 0x5d
 800b9b0:	5c9b      	ldrb	r3, [r3, r2]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d004      	beq.n	800b9c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b9b8:	231f      	movs	r3, #31
 800b9ba:	18fb      	adds	r3, r7, r3
 800b9bc:	2202      	movs	r2, #2
 800b9be:	701a      	strb	r2, [r3, #0]
    goto error;
 800b9c0:	e11d      	b.n	800bbfe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_SPI_Transmit+0x64>
 800b9c8:	1dbb      	adds	r3, r7, #6
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d104      	bne.n	800b9da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b9d0:	231f      	movs	r3, #31
 800b9d2:	18fb      	adds	r3, r7, r3
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b9d8:	e111      	b.n	800bbfe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	225d      	movs	r2, #93	; 0x5d
 800b9de:	2103      	movs	r1, #3
 800b9e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	1dba      	adds	r2, r7, #6
 800b9f2:	8812      	ldrh	r2, [r2, #0]
 800b9f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1dba      	adds	r2, r7, #6
 800b9fa:	8812      	ldrh	r2, [r2, #0]
 800b9fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2244      	movs	r2, #68	; 0x44
 800ba08:	2100      	movs	r1, #0
 800ba0a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2246      	movs	r2, #70	; 0x46
 800ba10:	2100      	movs	r1, #0
 800ba12:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	2380      	movs	r3, #128	; 0x80
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d110      	bne.n	800ba4e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2140      	movs	r1, #64	; 0x40
 800ba38:	438a      	bics	r2, r1
 800ba3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2180      	movs	r1, #128	; 0x80
 800ba48:	01c9      	lsls	r1, r1, #7
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2240      	movs	r2, #64	; 0x40
 800ba56:	4013      	ands	r3, r2
 800ba58:	2b40      	cmp	r3, #64	; 0x40
 800ba5a:	d007      	beq.n	800ba6c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2140      	movs	r1, #64	; 0x40
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	68da      	ldr	r2, [r3, #12]
 800ba70:	23e0      	movs	r3, #224	; 0xe0
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d94e      	bls.n	800bb16 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <HAL_SPI_Transmit+0x11e>
 800ba80:	2316      	movs	r3, #22
 800ba82:	18fb      	adds	r3, r7, r3
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d13f      	bne.n	800bb0a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8e:	881a      	ldrh	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9a:	1c9a      	adds	r2, r3, #2
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800baae:	e02c      	b.n	800bb0a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	2202      	movs	r2, #2
 800bab8:	4013      	ands	r3, r2
 800baba:	2b02      	cmp	r3, #2
 800babc:	d112      	bne.n	800bae4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	881a      	ldrh	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bace:	1c9a      	adds	r2, r3, #2
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bad8:	b29b      	uxth	r3, r3
 800bada:	3b01      	subs	r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bae2:	e012      	b.n	800bb0a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bae4:	f7fc fc1c 	bl	8008320 <HAL_GetTick>
 800bae8:	0002      	movs	r2, r0
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d802      	bhi.n	800bafa <HAL_SPI_Transmit+0x18e>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	3301      	adds	r3, #1
 800baf8:	d102      	bne.n	800bb00 <HAL_SPI_Transmit+0x194>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d104      	bne.n	800bb0a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800bb00:	231f      	movs	r3, #31
 800bb02:	18fb      	adds	r3, r7, r3
 800bb04:	2203      	movs	r2, #3
 800bb06:	701a      	strb	r2, [r3, #0]
          goto error;
 800bb08:	e079      	b.n	800bbfe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1cd      	bne.n	800bab0 <HAL_SPI_Transmit+0x144>
 800bb14:	e04f      	b.n	800bbb6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d004      	beq.n	800bb28 <HAL_SPI_Transmit+0x1bc>
 800bb1e:	2316      	movs	r3, #22
 800bb20:	18fb      	adds	r3, r7, r3
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d141      	bne.n	800bbac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	330c      	adds	r3, #12
 800bb32:	7812      	ldrb	r2, [r2, #0]
 800bb34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800bb4e:	e02d      	b.n	800bbac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	2202      	movs	r2, #2
 800bb58:	4013      	ands	r3, r2
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d113      	bne.n	800bb86 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	330c      	adds	r3, #12
 800bb68:	7812      	ldrb	r2, [r2, #0]
 800bb6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb84:	e012      	b.n	800bbac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb86:	f7fc fbcb 	bl	8008320 <HAL_GetTick>
 800bb8a:	0002      	movs	r2, r0
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d802      	bhi.n	800bb9c <HAL_SPI_Transmit+0x230>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	d102      	bne.n	800bba2 <HAL_SPI_Transmit+0x236>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800bba2:	231f      	movs	r3, #31
 800bba4:	18fb      	adds	r3, r7, r3
 800bba6:	2203      	movs	r2, #3
 800bba8:	701a      	strb	r2, [r3, #0]
          goto error;
 800bbaa:	e028      	b.n	800bbfe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1cc      	bne.n	800bb50 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f000 fde9 	bl	800c794 <SPI_EndRxTxTransaction>
 800bbc2:	1e03      	subs	r3, r0, #0
 800bbc4:	d002      	beq.n	800bbcc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10a      	bne.n	800bbea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	613b      	str	r3, [r7, #16]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	613b      	str	r3, [r7, #16]
 800bbe8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d004      	beq.n	800bbfc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800bbf2:	231f      	movs	r3, #31
 800bbf4:	18fb      	adds	r3, r7, r3
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	e000      	b.n	800bbfe <HAL_SPI_Transmit+0x292>
  }

error:
 800bbfc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	225d      	movs	r2, #93	; 0x5d
 800bc02:	2101      	movs	r1, #1
 800bc04:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	225c      	movs	r2, #92	; 0x5c
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bc0e:	231f      	movs	r3, #31
 800bc10:	18fb      	adds	r3, r7, r3
 800bc12:	781b      	ldrb	r3, [r3, #0]
}
 800bc14:	0018      	movs	r0, r3
 800bc16:	46bd      	mov	sp, r7
 800bc18:	b008      	add	sp, #32
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b089      	sub	sp, #36	; 0x24
 800bc20:	af02      	add	r7, sp, #8
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	1dbb      	adds	r3, r7, #6
 800bc2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc2c:	2317      	movs	r3, #23
 800bc2e:	18fb      	adds	r3, r7, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	2382      	movs	r3, #130	; 0x82
 800bc3a:	005b      	lsls	r3, r3, #1
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d113      	bne.n	800bc68 <HAL_SPI_Receive+0x4c>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10f      	bne.n	800bc68 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	225d      	movs	r2, #93	; 0x5d
 800bc4c:	2104      	movs	r1, #4
 800bc4e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc50:	1dbb      	adds	r3, r7, #6
 800bc52:	881c      	ldrh	r4, [r3, #0]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	0023      	movs	r3, r4
 800bc60:	f000 f928 	bl	800beb4 <HAL_SPI_TransmitReceive>
 800bc64:	0003      	movs	r3, r0
 800bc66:	e11c      	b.n	800bea2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	225c      	movs	r2, #92	; 0x5c
 800bc6c:	5c9b      	ldrb	r3, [r3, r2]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <HAL_SPI_Receive+0x5a>
 800bc72:	2302      	movs	r3, #2
 800bc74:	e115      	b.n	800bea2 <HAL_SPI_Receive+0x286>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	225c      	movs	r2, #92	; 0x5c
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc7e:	f7fc fb4f 	bl	8008320 <HAL_GetTick>
 800bc82:	0003      	movs	r3, r0
 800bc84:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	225d      	movs	r2, #93	; 0x5d
 800bc8a:	5c9b      	ldrb	r3, [r3, r2]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d004      	beq.n	800bc9c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800bc92:	2317      	movs	r3, #23
 800bc94:	18fb      	adds	r3, r7, r3
 800bc96:	2202      	movs	r2, #2
 800bc98:	701a      	strb	r2, [r3, #0]
    goto error;
 800bc9a:	e0f7      	b.n	800be8c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_SPI_Receive+0x8e>
 800bca2:	1dbb      	adds	r3, r7, #6
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d104      	bne.n	800bcb4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800bcaa:	2317      	movs	r3, #23
 800bcac:	18fb      	adds	r3, r7, r3
 800bcae:	2201      	movs	r2, #1
 800bcb0:	701a      	strb	r2, [r3, #0]
    goto error;
 800bcb2:	e0eb      	b.n	800be8c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	225d      	movs	r2, #93	; 0x5d
 800bcb8:	2104      	movs	r1, #4
 800bcba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	1dba      	adds	r2, r7, #6
 800bccc:	2144      	movs	r1, #68	; 0x44
 800bcce:	8812      	ldrh	r2, [r2, #0]
 800bcd0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	1dba      	adds	r2, r7, #6
 800bcd6:	2146      	movs	r1, #70	; 0x46
 800bcd8:	8812      	ldrh	r2, [r2, #0]
 800bcda:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2200      	movs	r2, #0
 800bcec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68da      	ldr	r2, [r3, #12]
 800bcfe:	23e0      	movs	r3, #224	; 0xe0
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d908      	bls.n	800bd18 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4966      	ldr	r1, [pc, #408]	; (800beac <HAL_SPI_Receive+0x290>)
 800bd12:	400a      	ands	r2, r1
 800bd14:	605a      	str	r2, [r3, #4]
 800bd16:	e008      	b.n	800bd2a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2180      	movs	r1, #128	; 0x80
 800bd24:	0149      	lsls	r1, r1, #5
 800bd26:	430a      	orrs	r2, r1
 800bd28:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	689a      	ldr	r2, [r3, #8]
 800bd2e:	2380      	movs	r3, #128	; 0x80
 800bd30:	021b      	lsls	r3, r3, #8
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d10f      	bne.n	800bd56 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2140      	movs	r1, #64	; 0x40
 800bd42:	438a      	bics	r2, r1
 800bd44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4957      	ldr	r1, [pc, #348]	; (800beb0 <HAL_SPI_Receive+0x294>)
 800bd52:	400a      	ands	r2, r1
 800bd54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2240      	movs	r2, #64	; 0x40
 800bd5e:	4013      	ands	r3, r2
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	d007      	beq.n	800bd74 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2140      	movs	r1, #64	; 0x40
 800bd70:	430a      	orrs	r2, r1
 800bd72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	23e0      	movs	r3, #224	; 0xe0
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d900      	bls.n	800bd82 <HAL_SPI_Receive+0x166>
 800bd80:	e069      	b.n	800be56 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd82:	e031      	b.n	800bde8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d117      	bne.n	800bdc2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	330c      	adds	r3, #12
 800bd98:	001a      	movs	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9e:	7812      	ldrb	r2, [r2, #0]
 800bda0:	b2d2      	uxtb	r2, r2
 800bda2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2246      	movs	r2, #70	; 0x46
 800bdb2:	5a9b      	ldrh	r3, [r3, r2]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	b299      	uxth	r1, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2246      	movs	r2, #70	; 0x46
 800bdbe:	5299      	strh	r1, [r3, r2]
 800bdc0:	e012      	b.n	800bde8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdc2:	f7fc faad 	bl	8008320 <HAL_GetTick>
 800bdc6:	0002      	movs	r2, r0
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d802      	bhi.n	800bdd8 <HAL_SPI_Receive+0x1bc>
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	d102      	bne.n	800bdde <HAL_SPI_Receive+0x1c2>
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d104      	bne.n	800bde8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800bdde:	2317      	movs	r3, #23
 800bde0:	18fb      	adds	r3, r7, r3
 800bde2:	2203      	movs	r2, #3
 800bde4:	701a      	strb	r2, [r3, #0]
          goto error;
 800bde6:	e051      	b.n	800be8c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2246      	movs	r2, #70	; 0x46
 800bdec:	5a9b      	ldrh	r3, [r3, r2]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1c7      	bne.n	800bd84 <HAL_SPI_Receive+0x168>
 800bdf4:	e035      	b.n	800be62 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	4013      	ands	r3, r2
 800be00:	2b01      	cmp	r3, #1
 800be02:	d115      	bne.n	800be30 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68da      	ldr	r2, [r3, #12]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0e:	b292      	uxth	r2, r2
 800be10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	1c9a      	adds	r2, r3, #2
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2246      	movs	r2, #70	; 0x46
 800be20:	5a9b      	ldrh	r3, [r3, r2]
 800be22:	b29b      	uxth	r3, r3
 800be24:	3b01      	subs	r3, #1
 800be26:	b299      	uxth	r1, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2246      	movs	r2, #70	; 0x46
 800be2c:	5299      	strh	r1, [r3, r2]
 800be2e:	e012      	b.n	800be56 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be30:	f7fc fa76 	bl	8008320 <HAL_GetTick>
 800be34:	0002      	movs	r2, r0
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d802      	bhi.n	800be46 <HAL_SPI_Receive+0x22a>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	d102      	bne.n	800be4c <HAL_SPI_Receive+0x230>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d104      	bne.n	800be56 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800be4c:	2317      	movs	r3, #23
 800be4e:	18fb      	adds	r3, r7, r3
 800be50:	2203      	movs	r2, #3
 800be52:	701a      	strb	r2, [r3, #0]
          goto error;
 800be54:	e01a      	b.n	800be8c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2246      	movs	r2, #70	; 0x46
 800be5a:	5a9b      	ldrh	r3, [r3, r2]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1c9      	bne.n	800bdf6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	0018      	movs	r0, r3
 800be6a:	f000 fc35 	bl	800c6d8 <SPI_EndRxTransaction>
 800be6e:	1e03      	subs	r3, r0, #0
 800be70:	d002      	beq.n	800be78 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2220      	movs	r2, #32
 800be76:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800be80:	2317      	movs	r3, #23
 800be82:	18fb      	adds	r3, r7, r3
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e000      	b.n	800be8c <HAL_SPI_Receive+0x270>
  }

error :
 800be8a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	225d      	movs	r2, #93	; 0x5d
 800be90:	2101      	movs	r1, #1
 800be92:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	225c      	movs	r2, #92	; 0x5c
 800be98:	2100      	movs	r1, #0
 800be9a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800be9c:	2317      	movs	r3, #23
 800be9e:	18fb      	adds	r3, r7, r3
 800bea0:	781b      	ldrb	r3, [r3, #0]
}
 800bea2:	0018      	movs	r0, r3
 800bea4:	46bd      	mov	sp, r7
 800bea6:	b007      	add	sp, #28
 800bea8:	bd90      	pop	{r4, r7, pc}
 800beaa:	46c0      	nop			; (mov r8, r8)
 800beac:	ffffefff 	.word	0xffffefff
 800beb0:	ffffbfff 	.word	0xffffbfff

0800beb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b08a      	sub	sp, #40	; 0x28
 800beb8:	af00      	add	r7, sp, #0
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	607a      	str	r2, [r7, #4]
 800bec0:	001a      	movs	r2, r3
 800bec2:	1cbb      	adds	r3, r7, #2
 800bec4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bec6:	2301      	movs	r3, #1
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800beca:	2323      	movs	r3, #35	; 0x23
 800becc:	18fb      	adds	r3, r7, r3
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	225c      	movs	r2, #92	; 0x5c
 800bed6:	5c9b      	ldrb	r3, [r3, r2]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_SPI_TransmitReceive+0x2c>
 800bedc:	2302      	movs	r3, #2
 800bede:	e1b5      	b.n	800c24c <HAL_SPI_TransmitReceive+0x398>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	225c      	movs	r2, #92	; 0x5c
 800bee4:	2101      	movs	r1, #1
 800bee6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bee8:	f7fc fa1a 	bl	8008320 <HAL_GetTick>
 800beec:	0003      	movs	r3, r0
 800beee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bef0:	201b      	movs	r0, #27
 800bef2:	183b      	adds	r3, r7, r0
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	215d      	movs	r1, #93	; 0x5d
 800bef8:	5c52      	ldrb	r2, [r2, r1]
 800befa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bf02:	2312      	movs	r3, #18
 800bf04:	18fb      	adds	r3, r7, r3
 800bf06:	1cba      	adds	r2, r7, #2
 800bf08:	8812      	ldrh	r2, [r2, #0]
 800bf0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf0c:	183b      	adds	r3, r7, r0
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d011      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0x84>
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	2382      	movs	r3, #130	; 0x82
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d107      	bne.n	800bf2e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <HAL_SPI_TransmitReceive+0x7a>
 800bf26:	183b      	adds	r3, r7, r0
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	d004      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800bf2e:	2323      	movs	r3, #35	; 0x23
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	2202      	movs	r2, #2
 800bf34:	701a      	strb	r2, [r3, #0]
    goto error;
 800bf36:	e17e      	b.n	800c236 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d006      	beq.n	800bf4c <HAL_SPI_TransmitReceive+0x98>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <HAL_SPI_TransmitReceive+0x98>
 800bf44:	1cbb      	adds	r3, r7, #2
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800bf4c:	2323      	movs	r3, #35	; 0x23
 800bf4e:	18fb      	adds	r3, r7, r3
 800bf50:	2201      	movs	r2, #1
 800bf52:	701a      	strb	r2, [r3, #0]
    goto error;
 800bf54:	e16f      	b.n	800c236 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	225d      	movs	r2, #93	; 0x5d
 800bf5a:	5c9b      	ldrb	r3, [r3, r2]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d003      	beq.n	800bf6a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	225d      	movs	r2, #93	; 0x5d
 800bf66:	2105      	movs	r1, #5
 800bf68:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	1cba      	adds	r2, r7, #2
 800bf7a:	2146      	movs	r1, #70	; 0x46
 800bf7c:	8812      	ldrh	r2, [r2, #0]
 800bf7e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	1cba      	adds	r2, r7, #2
 800bf84:	2144      	movs	r1, #68	; 0x44
 800bf86:	8812      	ldrh	r2, [r2, #0]
 800bf88:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	1cba      	adds	r2, r7, #2
 800bf94:	8812      	ldrh	r2, [r2, #0]
 800bf96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	1cba      	adds	r2, r7, #2
 800bf9c:	8812      	ldrh	r2, [r2, #0]
 800bf9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	23e0      	movs	r3, #224	; 0xe0
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d908      	bls.n	800bfca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	49a4      	ldr	r1, [pc, #656]	; (800c254 <HAL_SPI_TransmitReceive+0x3a0>)
 800bfc4:	400a      	ands	r2, r1
 800bfc6:	605a      	str	r2, [r3, #4]
 800bfc8:	e008      	b.n	800bfdc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2180      	movs	r1, #128	; 0x80
 800bfd6:	0149      	lsls	r1, r1, #5
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2240      	movs	r2, #64	; 0x40
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	2b40      	cmp	r3, #64	; 0x40
 800bfe8:	d007      	beq.n	800bffa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2140      	movs	r1, #64	; 0x40
 800bff6:	430a      	orrs	r2, r1
 800bff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	23e0      	movs	r3, #224	; 0xe0
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	429a      	cmp	r2, r3
 800c004:	d800      	bhi.n	800c008 <HAL_SPI_TransmitReceive+0x154>
 800c006:	e07f      	b.n	800c108 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <HAL_SPI_TransmitReceive+0x168>
 800c010:	2312      	movs	r3, #18
 800c012:	18fb      	adds	r3, r7, r3
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	2b01      	cmp	r3, #1
 800c018:	d000      	beq.n	800c01c <HAL_SPI_TransmitReceive+0x168>
 800c01a:	e069      	b.n	800c0f0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c020:	881a      	ldrh	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	1c9a      	adds	r2, r3, #2
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c036:	b29b      	uxth	r3, r3
 800c038:	3b01      	subs	r3, #1
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c040:	e056      	b.n	800c0f0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2202      	movs	r2, #2
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d11b      	bne.n	800c088 <HAL_SPI_TransmitReceive+0x1d4>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d016      	beq.n	800c088 <HAL_SPI_TransmitReceive+0x1d4>
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d113      	bne.n	800c088 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c064:	881a      	ldrh	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	1c9a      	adds	r2, r3, #2
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	2201      	movs	r2, #1
 800c090:	4013      	ands	r3, r2
 800c092:	2b01      	cmp	r3, #1
 800c094:	d11c      	bne.n	800c0d0 <HAL_SPI_TransmitReceive+0x21c>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2246      	movs	r2, #70	; 0x46
 800c09a:	5a9b      	ldrh	r3, [r3, r2]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d016      	beq.n	800c0d0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68da      	ldr	r2, [r3, #12]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	b292      	uxth	r2, r2
 800c0ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	1c9a      	adds	r2, r3, #2
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2246      	movs	r2, #70	; 0x46
 800c0be:	5a9b      	ldrh	r3, [r3, r2]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	b299      	uxth	r1, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2246      	movs	r2, #70	; 0x46
 800c0ca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c0d0:	f7fc f926 	bl	8008320 <HAL_GetTick>
 800c0d4:	0002      	movs	r2, r0
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d807      	bhi.n	800c0f0 <HAL_SPI_TransmitReceive+0x23c>
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	d004      	beq.n	800c0f0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800c0e6:	2323      	movs	r3, #35	; 0x23
 800c0e8:	18fb      	adds	r3, r7, r3
 800c0ea:	2203      	movs	r2, #3
 800c0ec:	701a      	strb	r2, [r3, #0]
        goto error;
 800c0ee:	e0a2      	b.n	800c236 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1a3      	bne.n	800c042 <HAL_SPI_TransmitReceive+0x18e>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2246      	movs	r2, #70	; 0x46
 800c0fe:	5a9b      	ldrh	r3, [r3, r2]
 800c100:	b29b      	uxth	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d19d      	bne.n	800c042 <HAL_SPI_TransmitReceive+0x18e>
 800c106:	e085      	b.n	800c214 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d005      	beq.n	800c11c <HAL_SPI_TransmitReceive+0x268>
 800c110:	2312      	movs	r3, #18
 800c112:	18fb      	adds	r3, r7, r3
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d000      	beq.n	800c11c <HAL_SPI_TransmitReceive+0x268>
 800c11a:	e070      	b.n	800c1fe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	330c      	adds	r3, #12
 800c126:	7812      	ldrb	r2, [r2, #0]
 800c128:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c138:	b29b      	uxth	r3, r3
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c142:	e05c      	b.n	800c1fe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	2202      	movs	r2, #2
 800c14c:	4013      	ands	r3, r2
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d11c      	bne.n	800c18c <HAL_SPI_TransmitReceive+0x2d8>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c156:	b29b      	uxth	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d017      	beq.n	800c18c <HAL_SPI_TransmitReceive+0x2d8>
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d114      	bne.n	800c18c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	330c      	adds	r3, #12
 800c16c:	7812      	ldrb	r2, [r2, #0]
 800c16e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c174:	1c5a      	adds	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c17e:	b29b      	uxth	r3, r3
 800c180:	3b01      	subs	r3, #1
 800c182:	b29a      	uxth	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c188:	2300      	movs	r3, #0
 800c18a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	2201      	movs	r2, #1
 800c194:	4013      	ands	r3, r2
 800c196:	2b01      	cmp	r3, #1
 800c198:	d11e      	bne.n	800c1d8 <HAL_SPI_TransmitReceive+0x324>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2246      	movs	r2, #70	; 0x46
 800c19e:	5a9b      	ldrh	r3, [r3, r2]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d018      	beq.n	800c1d8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	330c      	adds	r3, #12
 800c1ac:	001a      	movs	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b2:	7812      	ldrb	r2, [r2, #0]
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	1c5a      	adds	r2, r3, #1
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2246      	movs	r2, #70	; 0x46
 800c1c6:	5a9b      	ldrh	r3, [r3, r2]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b299      	uxth	r1, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2246      	movs	r2, #70	; 0x46
 800c1d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c1d8:	f7fc f8a2 	bl	8008320 <HAL_GetTick>
 800c1dc:	0002      	movs	r2, r0
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d802      	bhi.n	800c1ee <HAL_SPI_TransmitReceive+0x33a>
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	d102      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x340>
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800c1f4:	2323      	movs	r3, #35	; 0x23
 800c1f6:	18fb      	adds	r3, r7, r3
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	701a      	strb	r2, [r3, #0]
        goto error;
 800c1fc:	e01b      	b.n	800c236 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c202:	b29b      	uxth	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d19d      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x290>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2246      	movs	r2, #70	; 0x46
 800c20c:	5a9b      	ldrh	r3, [r3, r2]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d197      	bne.n	800c144 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c214:	69fa      	ldr	r2, [r7, #28]
 800c216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	0018      	movs	r0, r3
 800c21c:	f000 faba 	bl	800c794 <SPI_EndRxTxTransaction>
 800c220:	1e03      	subs	r3, r0, #0
 800c222:	d007      	beq.n	800c234 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800c224:	2323      	movs	r3, #35	; 0x23
 800c226:	18fb      	adds	r3, r7, r3
 800c228:	2201      	movs	r2, #1
 800c22a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2220      	movs	r2, #32
 800c230:	661a      	str	r2, [r3, #96]	; 0x60
 800c232:	e000      	b.n	800c236 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800c234:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	225d      	movs	r2, #93	; 0x5d
 800c23a:	2101      	movs	r1, #1
 800c23c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	225c      	movs	r2, #92	; 0x5c
 800c242:	2100      	movs	r1, #0
 800c244:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c246:	2323      	movs	r3, #35	; 0x23
 800c248:	18fb      	adds	r3, r7, r3
 800c24a:	781b      	ldrb	r3, [r3, #0]
}
 800c24c:	0018      	movs	r0, r3
 800c24e:	46bd      	mov	sp, r7
 800c250:	b00a      	add	sp, #40	; 0x28
 800c252:	bd80      	pop	{r7, pc}
 800c254:	ffffefff 	.word	0xffffefff

0800c258 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b088      	sub	sp, #32
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	099b      	lsrs	r3, r3, #6
 800c274:	001a      	movs	r2, r3
 800c276:	2301      	movs	r3, #1
 800c278:	4013      	ands	r3, r2
 800c27a:	d10f      	bne.n	800c29c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	2201      	movs	r2, #1
 800c280:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c282:	d00b      	beq.n	800c29c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	099b      	lsrs	r3, r3, #6
 800c288:	001a      	movs	r2, r3
 800c28a:	2301      	movs	r3, #1
 800c28c:	4013      	ands	r3, r2
 800c28e:	d005      	beq.n	800c29c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	0010      	movs	r0, r2
 800c298:	4798      	blx	r3
    return;
 800c29a:	e0d5      	b.n	800c448 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	085b      	lsrs	r3, r3, #1
 800c2a0:	001a      	movs	r2, r3
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	d00b      	beq.n	800c2c0 <HAL_SPI_IRQHandler+0x68>
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	09db      	lsrs	r3, r3, #7
 800c2ac:	001a      	movs	r2, r3
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	d005      	beq.n	800c2c0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	0010      	movs	r0, r2
 800c2bc:	4798      	blx	r3
    return;
 800c2be:	e0c3      	b.n	800c448 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	001a      	movs	r2, r3
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	d10c      	bne.n	800c2e6 <HAL_SPI_IRQHandler+0x8e>
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	099b      	lsrs	r3, r3, #6
 800c2d0:	001a      	movs	r2, r3
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	d106      	bne.n	800c2e6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	0a1b      	lsrs	r3, r3, #8
 800c2dc:	001a      	movs	r2, r3
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	d100      	bne.n	800c2e6 <HAL_SPI_IRQHandler+0x8e>
 800c2e4:	e0b0      	b.n	800c448 <HAL_SPI_IRQHandler+0x1f0>
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	095b      	lsrs	r3, r3, #5
 800c2ea:	001a      	movs	r2, r3
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	d100      	bne.n	800c2f4 <HAL_SPI_IRQHandler+0x9c>
 800c2f2:	e0a9      	b.n	800c448 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	099b      	lsrs	r3, r3, #6
 800c2f8:	001a      	movs	r2, r3
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	d023      	beq.n	800c348 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	225d      	movs	r2, #93	; 0x5d
 800c304:	5c9b      	ldrb	r3, [r3, r2]
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b03      	cmp	r3, #3
 800c30a:	d011      	beq.n	800c330 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c310:	2204      	movs	r2, #4
 800c312:	431a      	orrs	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	617b      	str	r3, [r7, #20]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	e00b      	b.n	800c348 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c330:	2300      	movs	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	613b      	str	r3, [r7, #16]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	613b      	str	r3, [r7, #16]
 800c344:	693b      	ldr	r3, [r7, #16]
        return;
 800c346:	e07f      	b.n	800c448 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	001a      	movs	r2, r3
 800c34e:	2301      	movs	r3, #1
 800c350:	4013      	ands	r3, r2
 800c352:	d014      	beq.n	800c37e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c358:	2201      	movs	r2, #1
 800c35a:	431a      	orrs	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c360:	2300      	movs	r3, #0
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2140      	movs	r1, #64	; 0x40
 800c378:	438a      	bics	r2, r1
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	0a1b      	lsrs	r3, r3, #8
 800c382:	001a      	movs	r2, r3
 800c384:	2301      	movs	r3, #1
 800c386:	4013      	ands	r3, r2
 800c388:	d00c      	beq.n	800c3a4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c38e:	2208      	movs	r2, #8
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c396:	2300      	movs	r3, #0
 800c398:	60bb      	str	r3, [r7, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	60bb      	str	r3, [r7, #8]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d04c      	beq.n	800c446 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	21e0      	movs	r1, #224	; 0xe0
 800c3b8:	438a      	bics	r2, r1
 800c3ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	225d      	movs	r2, #93	; 0x5d
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	d103      	bne.n	800c3d4 <HAL_SPI_IRQHandler+0x17c>
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	d032      	beq.n	800c43a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2103      	movs	r1, #3
 800c3e0:	438a      	bics	r2, r1
 800c3e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d010      	beq.n	800c40e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f0:	4a17      	ldr	r2, [pc, #92]	; (800c450 <HAL_SPI_IRQHandler+0x1f8>)
 800c3f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f7fc f907 	bl	800860c <HAL_DMA_Abort_IT>
 800c3fe:	1e03      	subs	r3, r0, #0
 800c400:	d005      	beq.n	800c40e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c406:	2240      	movs	r2, #64	; 0x40
 800c408:	431a      	orrs	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c412:	2b00      	cmp	r3, #0
 800c414:	d016      	beq.n	800c444 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41a:	4a0d      	ldr	r2, [pc, #52]	; (800c450 <HAL_SPI_IRQHandler+0x1f8>)
 800c41c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	0018      	movs	r0, r3
 800c424:	f7fc f8f2 	bl	800860c <HAL_DMA_Abort_IT>
 800c428:	1e03      	subs	r3, r0, #0
 800c42a:	d00b      	beq.n	800c444 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c430:	2240      	movs	r2, #64	; 0x40
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c438:	e004      	b.n	800c444 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f000 f809 	bl	800c454 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c442:	e000      	b.n	800c446 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800c444:	46c0      	nop			; (mov r8, r8)
    return;
 800c446:	46c0      	nop			; (mov r8, r8)
  }
}
 800c448:	46bd      	mov	sp, r7
 800c44a:	b008      	add	sp, #32
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	46c0      	nop			; (mov r8, r8)
 800c450:	0800c465 	.word	0x0800c465

0800c454 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c45c:	46c0      	nop			; (mov r8, r8)
 800c45e:	46bd      	mov	sp, r7
 800c460:	b002      	add	sp, #8
 800c462:	bd80      	pop	{r7, pc}

0800c464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2246      	movs	r2, #70	; 0x46
 800c476:	2100      	movs	r1, #0
 800c478:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	0018      	movs	r0, r3
 800c484:	f7ff ffe6 	bl	800c454 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c488:	46c0      	nop			; (mov r8, r8)
 800c48a:	46bd      	mov	sp, r7
 800c48c:	b004      	add	sp, #16
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	1dfb      	adds	r3, r7, #7
 800c49e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c4a0:	f7fb ff3e 	bl	8008320 <HAL_GetTick>
 800c4a4:	0002      	movs	r2, r0
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	18d3      	adds	r3, r2, r3
 800c4ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c4b0:	f7fb ff36 	bl	8008320 <HAL_GetTick>
 800c4b4:	0003      	movs	r3, r0
 800c4b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c4b8:	4b3a      	ldr	r3, [pc, #232]	; (800c5a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	015b      	lsls	r3, r3, #5
 800c4be:	0d1b      	lsrs	r3, r3, #20
 800c4c0:	69fa      	ldr	r2, [r7, #28]
 800c4c2:	4353      	muls	r3, r2
 800c4c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4c6:	e058      	b.n	800c57a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	d055      	beq.n	800c57a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c4ce:	f7fb ff27 	bl	8008320 <HAL_GetTick>
 800c4d2:	0002      	movs	r2, r0
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	69fa      	ldr	r2, [r7, #28]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d902      	bls.n	800c4e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d142      	bne.n	800c56a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	21e0      	movs	r1, #224	; 0xe0
 800c4f0:	438a      	bics	r2, r1
 800c4f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	2382      	movs	r3, #130	; 0x82
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d113      	bne.n	800c528 <SPI_WaitFlagStateUntilTimeout+0x98>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	2380      	movs	r3, #128	; 0x80
 800c506:	021b      	lsls	r3, r3, #8
 800c508:	429a      	cmp	r2, r3
 800c50a:	d005      	beq.n	800c518 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	689a      	ldr	r2, [r3, #8]
 800c510:	2380      	movs	r3, #128	; 0x80
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	429a      	cmp	r2, r3
 800c516:	d107      	bne.n	800c528 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2140      	movs	r1, #64	; 0x40
 800c524:	438a      	bics	r2, r1
 800c526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c52c:	2380      	movs	r3, #128	; 0x80
 800c52e:	019b      	lsls	r3, r3, #6
 800c530:	429a      	cmp	r2, r3
 800c532:	d110      	bne.n	800c556 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	491a      	ldr	r1, [pc, #104]	; (800c5a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800c540:	400a      	ands	r2, r1
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2180      	movs	r1, #128	; 0x80
 800c550:	0189      	lsls	r1, r1, #6
 800c552:	430a      	orrs	r2, r1
 800c554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	225d      	movs	r2, #93	; 0x5d
 800c55a:	2101      	movs	r1, #1
 800c55c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	225c      	movs	r2, #92	; 0x5c
 800c562:	2100      	movs	r1, #0
 800c564:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e017      	b.n	800c59a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d101      	bne.n	800c574 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	3b01      	subs	r3, #1
 800c578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	4013      	ands	r3, r2
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	425a      	negs	r2, r3
 800c58a:	4153      	adcs	r3, r2
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	001a      	movs	r2, r3
 800c590:	1dfb      	adds	r3, r7, #7
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d197      	bne.n	800c4c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	0018      	movs	r0, r3
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b008      	add	sp, #32
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	46c0      	nop			; (mov r8, r8)
 800c5a4:	20000078 	.word	0x20000078
 800c5a8:	ffffdfff 	.word	0xffffdfff

0800c5ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c5ba:	f7fb feb1 	bl	8008320 <HAL_GetTick>
 800c5be:	0002      	movs	r2, r0
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	18d3      	adds	r3, r2, r3
 800c5c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c5ca:	f7fb fea9 	bl	8008320 <HAL_GetTick>
 800c5ce:	0003      	movs	r3, r0
 800c5d0:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c5d2:	4b3f      	ldr	r3, [pc, #252]	; (800c6d0 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	0013      	movs	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	189b      	adds	r3, r3, r2
 800c5dc:	00da      	lsls	r2, r3, #3
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	0d1b      	lsrs	r3, r3, #20
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	4353      	muls	r3, r2
 800c5e6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800c5e8:	e064      	b.n	800c6b4 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	23c0      	movs	r3, #192	; 0xc0
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d106      	bne.n	800c602 <SPI_WaitFifoStateUntilTimeout+0x56>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d103      	bne.n	800c602 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	330c      	adds	r3, #12
 800c600:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	d055      	beq.n	800c6b4 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c608:	f7fb fe8a 	bl	8008320 <HAL_GetTick>
 800c60c:	0002      	movs	r2, r0
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	429a      	cmp	r2, r3
 800c616:	d902      	bls.n	800c61e <SPI_WaitFifoStateUntilTimeout+0x72>
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d142      	bne.n	800c6a4 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685a      	ldr	r2, [r3, #4]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	21e0      	movs	r1, #224	; 0xe0
 800c62a:	438a      	bics	r2, r1
 800c62c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	2382      	movs	r3, #130	; 0x82
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	429a      	cmp	r2, r3
 800c638:	d113      	bne.n	800c662 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	2380      	movs	r3, #128	; 0x80
 800c640:	021b      	lsls	r3, r3, #8
 800c642:	429a      	cmp	r2, r3
 800c644:	d005      	beq.n	800c652 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	2380      	movs	r3, #128	; 0x80
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	429a      	cmp	r2, r3
 800c650:	d107      	bne.n	800c662 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2140      	movs	r1, #64	; 0x40
 800c65e:	438a      	bics	r2, r1
 800c660:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c666:	2380      	movs	r3, #128	; 0x80
 800c668:	019b      	lsls	r3, r3, #6
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d110      	bne.n	800c690 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4916      	ldr	r1, [pc, #88]	; (800c6d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c67a:	400a      	ands	r2, r1
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2180      	movs	r1, #128	; 0x80
 800c68a:	0189      	lsls	r1, r1, #6
 800c68c:	430a      	orrs	r2, r1
 800c68e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	225d      	movs	r2, #93	; 0x5d
 800c694:	2101      	movs	r1, #1
 800c696:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	225c      	movs	r2, #92	; 0x5c
 800c69c:	2100      	movs	r1, #0
 800c69e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e010      	b.n	800c6c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d101      	bne.n	800c6ae <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	4013      	ands	r3, r2
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d192      	bne.n	800c5ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b008      	add	sp, #32
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	20000078 	.word	0x20000078
 800c6d4:	ffffdfff 	.word	0xffffdfff

0800c6d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	2382      	movs	r3, #130	; 0x82
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d113      	bne.n	800c718 <SPI_EndRxTransaction+0x40>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	689a      	ldr	r2, [r3, #8]
 800c6f4:	2380      	movs	r3, #128	; 0x80
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d005      	beq.n	800c708 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	2380      	movs	r3, #128	; 0x80
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	429a      	cmp	r2, r3
 800c706:	d107      	bne.n	800c718 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2140      	movs	r1, #64	; 0x40
 800c714:	438a      	bics	r2, r1
 800c716:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	0013      	movs	r3, r2
 800c722:	2200      	movs	r2, #0
 800c724:	2180      	movs	r1, #128	; 0x80
 800c726:	f7ff feb3 	bl	800c490 <SPI_WaitFlagStateUntilTimeout>
 800c72a:	1e03      	subs	r3, r0, #0
 800c72c:	d007      	beq.n	800c73e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c732:	2220      	movs	r2, #32
 800c734:	431a      	orrs	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e026      	b.n	800c78c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	2382      	movs	r3, #130	; 0x82
 800c744:	005b      	lsls	r3, r3, #1
 800c746:	429a      	cmp	r2, r3
 800c748:	d11f      	bne.n	800c78a <SPI_EndRxTransaction+0xb2>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689a      	ldr	r2, [r3, #8]
 800c74e:	2380      	movs	r3, #128	; 0x80
 800c750:	021b      	lsls	r3, r3, #8
 800c752:	429a      	cmp	r2, r3
 800c754:	d005      	beq.n	800c762 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	689a      	ldr	r2, [r3, #8]
 800c75a:	2380      	movs	r3, #128	; 0x80
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	429a      	cmp	r2, r3
 800c760:	d113      	bne.n	800c78a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	23c0      	movs	r3, #192	; 0xc0
 800c766:	00d9      	lsls	r1, r3, #3
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	0013      	movs	r3, r2
 800c770:	2200      	movs	r2, #0
 800c772:	f7ff ff1b 	bl	800c5ac <SPI_WaitFifoStateUntilTimeout>
 800c776:	1e03      	subs	r3, r0, #0
 800c778:	d007      	beq.n	800c78a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c77e:	2220      	movs	r2, #32
 800c780:	431a      	orrs	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e000      	b.n	800c78c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800c78a:	2300      	movs	r3, #0
}
 800c78c:	0018      	movs	r0, r3
 800c78e:	46bd      	mov	sp, r7
 800c790:	b004      	add	sp, #16
 800c792:	bd80      	pop	{r7, pc}

0800c794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af02      	add	r7, sp, #8
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	23c0      	movs	r3, #192	; 0xc0
 800c7a4:	0159      	lsls	r1, r3, #5
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	9300      	str	r3, [sp, #0]
 800c7ac:	0013      	movs	r3, r2
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f7ff fefc 	bl	800c5ac <SPI_WaitFifoStateUntilTimeout>
 800c7b4:	1e03      	subs	r3, r0, #0
 800c7b6:	d007      	beq.n	800c7c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7bc:	2220      	movs	r2, #32
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e027      	b.n	800c818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	0013      	movs	r3, r2
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	f7ff fe5b 	bl	800c490 <SPI_WaitFlagStateUntilTimeout>
 800c7da:	1e03      	subs	r3, r0, #0
 800c7dc:	d007      	beq.n	800c7ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7e2:	2220      	movs	r2, #32
 800c7e4:	431a      	orrs	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e014      	b.n	800c818 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	23c0      	movs	r3, #192	; 0xc0
 800c7f2:	00d9      	lsls	r1, r3, #3
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	0013      	movs	r3, r2
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f7ff fed5 	bl	800c5ac <SPI_WaitFifoStateUntilTimeout>
 800c802:	1e03      	subs	r3, r0, #0
 800c804:	d007      	beq.n	800c816 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c80a:	2220      	movs	r2, #32
 800c80c:	431a      	orrs	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e000      	b.n	800c818 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c816:	2300      	movs	r3, #0
}
 800c818:	0018      	movs	r0, r3
 800c81a:	46bd      	mov	sp, r7
 800c81c:	b004      	add	sp, #16
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e042      	b.n	800c8b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	223d      	movs	r2, #61	; 0x3d
 800c836:	5c9b      	ldrb	r3, [r3, r2]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d107      	bne.n	800c84e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	223c      	movs	r2, #60	; 0x3c
 800c842:	2100      	movs	r1, #0
 800c844:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	0018      	movs	r0, r3
 800c84a:	f7fb f9c3 	bl	8007bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	223d      	movs	r2, #61	; 0x3d
 800c852:	2102      	movs	r1, #2
 800c854:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3304      	adds	r3, #4
 800c85e:	0019      	movs	r1, r3
 800c860:	0010      	movs	r0, r2
 800c862:	f000 fbf1 	bl	800d048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2246      	movs	r2, #70	; 0x46
 800c86a:	2101      	movs	r1, #1
 800c86c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	223e      	movs	r2, #62	; 0x3e
 800c872:	2101      	movs	r1, #1
 800c874:	5499      	strb	r1, [r3, r2]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	223f      	movs	r2, #63	; 0x3f
 800c87a:	2101      	movs	r1, #1
 800c87c:	5499      	strb	r1, [r3, r2]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2240      	movs	r2, #64	; 0x40
 800c882:	2101      	movs	r1, #1
 800c884:	5499      	strb	r1, [r3, r2]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2241      	movs	r2, #65	; 0x41
 800c88a:	2101      	movs	r1, #1
 800c88c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2242      	movs	r2, #66	; 0x42
 800c892:	2101      	movs	r1, #1
 800c894:	5499      	strb	r1, [r3, r2]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2243      	movs	r2, #67	; 0x43
 800c89a:	2101      	movs	r1, #1
 800c89c:	5499      	strb	r1, [r3, r2]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2244      	movs	r2, #68	; 0x44
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	5499      	strb	r1, [r3, r2]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2245      	movs	r2, #69	; 0x45
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	223d      	movs	r2, #61	; 0x3d
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	b002      	add	sp, #8
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	223d      	movs	r2, #61	; 0x3d
 800c8cc:	5c9b      	ldrb	r3, [r3, r2]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d001      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e035      	b.n	800c944 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	223d      	movs	r2, #61	; 0x3d
 800c8dc:	2102      	movs	r1, #2
 800c8de:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68da      	ldr	r2, [r3, #12]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	430a      	orrs	r2, r1
 800c8ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a15      	ldr	r2, [pc, #84]	; (800c94c <HAL_TIM_Base_Start_IT+0x8c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d009      	beq.n	800c90e <HAL_TIM_Base_Start_IT+0x4e>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a14      	ldr	r2, [pc, #80]	; (800c950 <HAL_TIM_Base_Start_IT+0x90>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d004      	beq.n	800c90e <HAL_TIM_Base_Start_IT+0x4e>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a12      	ldr	r2, [pc, #72]	; (800c954 <HAL_TIM_Base_Start_IT+0x94>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d111      	bne.n	800c932 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	2207      	movs	r2, #7
 800c916:	4013      	ands	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b06      	cmp	r3, #6
 800c91e:	d010      	beq.n	800c942 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2101      	movs	r1, #1
 800c92c:	430a      	orrs	r2, r1
 800c92e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c930:	e007      	b.n	800c942 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2101      	movs	r1, #1
 800c93e:	430a      	orrs	r2, r1
 800c940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	0018      	movs	r0, r3
 800c946:	46bd      	mov	sp, r7
 800c948:	b004      	add	sp, #16
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	40012c00 	.word	0x40012c00
 800c950:	40000400 	.word	0x40000400
 800c954:	40014000 	.word	0x40014000

0800c958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d101      	bne.n	800c96a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e042      	b.n	800c9f0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	223d      	movs	r2, #61	; 0x3d
 800c96e:	5c9b      	ldrb	r3, [r3, r2]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d107      	bne.n	800c986 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	223c      	movs	r2, #60	; 0x3c
 800c97a:	2100      	movs	r1, #0
 800c97c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	0018      	movs	r0, r3
 800c982:	f000 f839 	bl	800c9f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	223d      	movs	r2, #61	; 0x3d
 800c98a:	2102      	movs	r1, #2
 800c98c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3304      	adds	r3, #4
 800c996:	0019      	movs	r1, r3
 800c998:	0010      	movs	r0, r2
 800c99a:	f000 fb55 	bl	800d048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2246      	movs	r2, #70	; 0x46
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	223e      	movs	r2, #62	; 0x3e
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	5499      	strb	r1, [r3, r2]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	223f      	movs	r2, #63	; 0x3f
 800c9b2:	2101      	movs	r1, #1
 800c9b4:	5499      	strb	r1, [r3, r2]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2240      	movs	r2, #64	; 0x40
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	5499      	strb	r1, [r3, r2]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2241      	movs	r2, #65	; 0x41
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2242      	movs	r2, #66	; 0x42
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	5499      	strb	r1, [r3, r2]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2243      	movs	r2, #67	; 0x43
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	5499      	strb	r1, [r3, r2]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2244      	movs	r2, #68	; 0x44
 800c9da:	2101      	movs	r1, #1
 800c9dc:	5499      	strb	r1, [r3, r2]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2245      	movs	r2, #69	; 0x45
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	223d      	movs	r2, #61	; 0x3d
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b002      	add	sp, #8
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca00:	46c0      	nop			; (mov r8, r8)
 800ca02:	46bd      	mov	sp, r7
 800ca04:	b002      	add	sp, #8
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b084      	sub	sp, #16
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d108      	bne.n	800ca2a <HAL_TIM_PWM_Start+0x22>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	223e      	movs	r2, #62	; 0x3e
 800ca1c:	5c9b      	ldrb	r3, [r3, r2]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	3b01      	subs	r3, #1
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	4193      	sbcs	r3, r2
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	e01f      	b.n	800ca6a <HAL_TIM_PWM_Start+0x62>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d108      	bne.n	800ca42 <HAL_TIM_PWM_Start+0x3a>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	223f      	movs	r2, #63	; 0x3f
 800ca34:	5c9b      	ldrb	r3, [r3, r2]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	1e5a      	subs	r2, r3, #1
 800ca3c:	4193      	sbcs	r3, r2
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	e013      	b.n	800ca6a <HAL_TIM_PWM_Start+0x62>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	d108      	bne.n	800ca5a <HAL_TIM_PWM_Start+0x52>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2240      	movs	r2, #64	; 0x40
 800ca4c:	5c9b      	ldrb	r3, [r3, r2]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	3b01      	subs	r3, #1
 800ca52:	1e5a      	subs	r2, r3, #1
 800ca54:	4193      	sbcs	r3, r2
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	e007      	b.n	800ca6a <HAL_TIM_PWM_Start+0x62>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2241      	movs	r2, #65	; 0x41
 800ca5e:	5c9b      	ldrb	r3, [r3, r2]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	3b01      	subs	r3, #1
 800ca64:	1e5a      	subs	r2, r3, #1
 800ca66:	4193      	sbcs	r3, r2
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e06e      	b.n	800cb50 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d104      	bne.n	800ca82 <HAL_TIM_PWM_Start+0x7a>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	223e      	movs	r2, #62	; 0x3e
 800ca7c:	2102      	movs	r1, #2
 800ca7e:	5499      	strb	r1, [r3, r2]
 800ca80:	e013      	b.n	800caaa <HAL_TIM_PWM_Start+0xa2>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d104      	bne.n	800ca92 <HAL_TIM_PWM_Start+0x8a>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	223f      	movs	r2, #63	; 0x3f
 800ca8c:	2102      	movs	r1, #2
 800ca8e:	5499      	strb	r1, [r3, r2]
 800ca90:	e00b      	b.n	800caaa <HAL_TIM_PWM_Start+0xa2>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b08      	cmp	r3, #8
 800ca96:	d104      	bne.n	800caa2 <HAL_TIM_PWM_Start+0x9a>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2240      	movs	r2, #64	; 0x40
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	5499      	strb	r1, [r3, r2]
 800caa0:	e003      	b.n	800caaa <HAL_TIM_PWM_Start+0xa2>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2241      	movs	r2, #65	; 0x41
 800caa6:	2102      	movs	r1, #2
 800caa8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	2201      	movs	r2, #1
 800cab2:	0018      	movs	r0, r3
 800cab4:	f000 fd3a 	bl	800d52c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a26      	ldr	r2, [pc, #152]	; (800cb58 <HAL_TIM_PWM_Start+0x150>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d00e      	beq.n	800cae0 <HAL_TIM_PWM_Start+0xd8>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a25      	ldr	r2, [pc, #148]	; (800cb5c <HAL_TIM_PWM_Start+0x154>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d009      	beq.n	800cae0 <HAL_TIM_PWM_Start+0xd8>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a23      	ldr	r2, [pc, #140]	; (800cb60 <HAL_TIM_PWM_Start+0x158>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIM_PWM_Start+0xd8>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a22      	ldr	r2, [pc, #136]	; (800cb64 <HAL_TIM_PWM_Start+0x15c>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d101      	bne.n	800cae4 <HAL_TIM_PWM_Start+0xdc>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e000      	b.n	800cae6 <HAL_TIM_PWM_Start+0xde>
 800cae4:	2300      	movs	r3, #0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d008      	beq.n	800cafc <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2180      	movs	r1, #128	; 0x80
 800caf6:	0209      	lsls	r1, r1, #8
 800caf8:	430a      	orrs	r2, r1
 800cafa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <HAL_TIM_PWM_Start+0x150>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d009      	beq.n	800cb1a <HAL_TIM_PWM_Start+0x112>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <HAL_TIM_PWM_Start+0x160>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d004      	beq.n	800cb1a <HAL_TIM_PWM_Start+0x112>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a11      	ldr	r2, [pc, #68]	; (800cb5c <HAL_TIM_PWM_Start+0x154>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d111      	bne.n	800cb3e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	2207      	movs	r2, #7
 800cb22:	4013      	ands	r3, r2
 800cb24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b06      	cmp	r3, #6
 800cb2a:	d010      	beq.n	800cb4e <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2101      	movs	r1, #1
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb3c:	e007      	b.n	800cb4e <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2101      	movs	r1, #1
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	0018      	movs	r0, r3
 800cb52:	46bd      	mov	sp, r7
 800cb54:	b004      	add	sp, #16
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	40012c00 	.word	0x40012c00
 800cb5c:	40014000 	.word	0x40014000
 800cb60:	40014400 	.word	0x40014400
 800cb64:	40014800 	.word	0x40014800
 800cb68:	40000400 	.word	0x40000400

0800cb6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	0018      	movs	r0, r3
 800cb80:	f000 fcd4 	bl	800d52c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a2f      	ldr	r2, [pc, #188]	; (800cc48 <HAL_TIM_PWM_Stop+0xdc>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00e      	beq.n	800cbac <HAL_TIM_PWM_Stop+0x40>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a2e      	ldr	r2, [pc, #184]	; (800cc4c <HAL_TIM_PWM_Stop+0xe0>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d009      	beq.n	800cbac <HAL_TIM_PWM_Stop+0x40>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a2c      	ldr	r2, [pc, #176]	; (800cc50 <HAL_TIM_PWM_Stop+0xe4>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d004      	beq.n	800cbac <HAL_TIM_PWM_Stop+0x40>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a2b      	ldr	r2, [pc, #172]	; (800cc54 <HAL_TIM_PWM_Stop+0xe8>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d101      	bne.n	800cbb0 <HAL_TIM_PWM_Stop+0x44>
 800cbac:	2301      	movs	r3, #1
 800cbae:	e000      	b.n	800cbb2 <HAL_TIM_PWM_Stop+0x46>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d013      	beq.n	800cbde <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	4a26      	ldr	r2, [pc, #152]	; (800cc58 <HAL_TIM_PWM_Stop+0xec>)
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	d10d      	bne.n	800cbde <HAL_TIM_PWM_Stop+0x72>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6a1b      	ldr	r3, [r3, #32]
 800cbc8:	4a24      	ldr	r2, [pc, #144]	; (800cc5c <HAL_TIM_PWM_Stop+0xf0>)
 800cbca:	4013      	ands	r3, r2
 800cbcc:	d107      	bne.n	800cbde <HAL_TIM_PWM_Stop+0x72>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4921      	ldr	r1, [pc, #132]	; (800cc60 <HAL_TIM_PWM_Stop+0xf4>)
 800cbda:	400a      	ands	r2, r1
 800cbdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6a1b      	ldr	r3, [r3, #32]
 800cbe4:	4a1c      	ldr	r2, [pc, #112]	; (800cc58 <HAL_TIM_PWM_Stop+0xec>)
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	d10d      	bne.n	800cc06 <HAL_TIM_PWM_Stop+0x9a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	4a1a      	ldr	r2, [pc, #104]	; (800cc5c <HAL_TIM_PWM_Stop+0xf0>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	d107      	bne.n	800cc06 <HAL_TIM_PWM_Stop+0x9a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2101      	movs	r1, #1
 800cc02:	438a      	bics	r2, r1
 800cc04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d104      	bne.n	800cc16 <HAL_TIM_PWM_Stop+0xaa>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	223e      	movs	r2, #62	; 0x3e
 800cc10:	2101      	movs	r1, #1
 800cc12:	5499      	strb	r1, [r3, r2]
 800cc14:	e013      	b.n	800cc3e <HAL_TIM_PWM_Stop+0xd2>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d104      	bne.n	800cc26 <HAL_TIM_PWM_Stop+0xba>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	223f      	movs	r2, #63	; 0x3f
 800cc20:	2101      	movs	r1, #1
 800cc22:	5499      	strb	r1, [r3, r2]
 800cc24:	e00b      	b.n	800cc3e <HAL_TIM_PWM_Stop+0xd2>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d104      	bne.n	800cc36 <HAL_TIM_PWM_Stop+0xca>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2240      	movs	r2, #64	; 0x40
 800cc30:	2101      	movs	r1, #1
 800cc32:	5499      	strb	r1, [r3, r2]
 800cc34:	e003      	b.n	800cc3e <HAL_TIM_PWM_Stop+0xd2>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2241      	movs	r2, #65	; 0x41
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	0018      	movs	r0, r3
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b002      	add	sp, #8
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	40012c00 	.word	0x40012c00
 800cc4c:	40014000 	.word	0x40014000
 800cc50:	40014400 	.word	0x40014400
 800cc54:	40014800 	.word	0x40014800
 800cc58:	00001111 	.word	0x00001111
 800cc5c:	00000444 	.word	0x00000444
 800cc60:	ffff7fff 	.word	0xffff7fff

0800cc64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	2202      	movs	r2, #2
 800cc74:	4013      	ands	r3, r2
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d124      	bne.n	800ccc4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2202      	movs	r2, #2
 800cc82:	4013      	ands	r3, r2
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d11d      	bne.n	800ccc4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2203      	movs	r2, #3
 800cc8e:	4252      	negs	r2, r2
 800cc90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	2203      	movs	r2, #3
 800cca0:	4013      	ands	r3, r2
 800cca2:	d004      	beq.n	800ccae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	0018      	movs	r0, r3
 800cca8:	f000 f9b6 	bl	800d018 <HAL_TIM_IC_CaptureCallback>
 800ccac:	e007      	b.n	800ccbe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	f000 f9a9 	bl	800d008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f000 f9b5 	bl	800d028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	2204      	movs	r2, #4
 800cccc:	4013      	ands	r3, r2
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d125      	bne.n	800cd1e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	2204      	movs	r2, #4
 800ccda:	4013      	ands	r3, r2
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d11e      	bne.n	800cd1e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	2205      	movs	r2, #5
 800cce6:	4252      	negs	r2, r2
 800cce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2202      	movs	r2, #2
 800ccee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	23c0      	movs	r3, #192	; 0xc0
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	d004      	beq.n	800cd08 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	0018      	movs	r0, r3
 800cd02:	f000 f989 	bl	800d018 <HAL_TIM_IC_CaptureCallback>
 800cd06:	e007      	b.n	800cd18 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	f000 f97c 	bl	800d008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	0018      	movs	r0, r3
 800cd14:	f000 f988 	bl	800d028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	2208      	movs	r2, #8
 800cd26:	4013      	ands	r3, r2
 800cd28:	2b08      	cmp	r3, #8
 800cd2a:	d124      	bne.n	800cd76 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	2208      	movs	r2, #8
 800cd34:	4013      	ands	r3, r2
 800cd36:	2b08      	cmp	r3, #8
 800cd38:	d11d      	bne.n	800cd76 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2209      	movs	r2, #9
 800cd40:	4252      	negs	r2, r2
 800cd42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2204      	movs	r2, #4
 800cd48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	2203      	movs	r2, #3
 800cd52:	4013      	ands	r3, r2
 800cd54:	d004      	beq.n	800cd60 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f000 f95d 	bl	800d018 <HAL_TIM_IC_CaptureCallback>
 800cd5e:	e007      	b.n	800cd70 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	0018      	movs	r0, r3
 800cd64:	f000 f950 	bl	800d008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	f000 f95c 	bl	800d028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	2210      	movs	r2, #16
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b10      	cmp	r3, #16
 800cd82:	d125      	bne.n	800cdd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	2210      	movs	r2, #16
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	2b10      	cmp	r3, #16
 800cd90:	d11e      	bne.n	800cdd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2211      	movs	r2, #17
 800cd98:	4252      	negs	r2, r2
 800cd9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2208      	movs	r2, #8
 800cda0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	69da      	ldr	r2, [r3, #28]
 800cda8:	23c0      	movs	r3, #192	; 0xc0
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4013      	ands	r3, r2
 800cdae:	d004      	beq.n	800cdba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	0018      	movs	r0, r3
 800cdb4:	f000 f930 	bl	800d018 <HAL_TIM_IC_CaptureCallback>
 800cdb8:	e007      	b.n	800cdca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f000 f923 	bl	800d008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	0018      	movs	r0, r3
 800cdc6:	f000 f92f 	bl	800d028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4013      	ands	r3, r2
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d10f      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	4013      	ands	r3, r2
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d108      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2202      	movs	r2, #2
 800cdf2:	4252      	negs	r2, r2
 800cdf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f7f4 f961 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	2280      	movs	r2, #128	; 0x80
 800ce06:	4013      	ands	r3, r2
 800ce08:	2b80      	cmp	r3, #128	; 0x80
 800ce0a:	d10f      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	2280      	movs	r2, #128	; 0x80
 800ce14:	4013      	ands	r3, r2
 800ce16:	2b80      	cmp	r3, #128	; 0x80
 800ce18:	d108      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2281      	movs	r2, #129	; 0x81
 800ce20:	4252      	negs	r2, r2
 800ce22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	0018      	movs	r0, r3
 800ce28:	f000 fc0a 	bl	800d640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	2240      	movs	r2, #64	; 0x40
 800ce34:	4013      	ands	r3, r2
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d10f      	bne.n	800ce5a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2240      	movs	r2, #64	; 0x40
 800ce42:	4013      	ands	r3, r2
 800ce44:	2b40      	cmp	r3, #64	; 0x40
 800ce46:	d108      	bne.n	800ce5a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2241      	movs	r2, #65	; 0x41
 800ce4e:	4252      	negs	r2, r2
 800ce50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	0018      	movs	r0, r3
 800ce56:	f000 f8ef 	bl	800d038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	2220      	movs	r2, #32
 800ce62:	4013      	ands	r3, r2
 800ce64:	2b20      	cmp	r3, #32
 800ce66:	d10f      	bne.n	800ce88 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	2220      	movs	r2, #32
 800ce70:	4013      	ands	r3, r2
 800ce72:	2b20      	cmp	r3, #32
 800ce74:	d108      	bne.n	800ce88 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2221      	movs	r2, #33	; 0x21
 800ce7c:	4252      	negs	r2, r2
 800ce7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	0018      	movs	r0, r3
 800ce84:	f000 fbd4 	bl	800d630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce88:	46c0      	nop			; (mov r8, r8)
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	b002      	add	sp, #8
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	223c      	movs	r2, #60	; 0x3c
 800cea0:	5c9b      	ldrb	r3, [r3, r2]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d101      	bne.n	800ceaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cea6:	2302      	movs	r3, #2
 800cea8:	e0a7      	b.n	800cffa <HAL_TIM_PWM_ConfigChannel+0x16a>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	223c      	movs	r2, #60	; 0x3c
 800ceae:	2101      	movs	r1, #1
 800ceb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b0c      	cmp	r3, #12
 800ceb6:	d100      	bne.n	800ceba <HAL_TIM_PWM_ConfigChannel+0x2a>
 800ceb8:	e076      	b.n	800cfa8 <HAL_TIM_PWM_ConfigChannel+0x118>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b0c      	cmp	r3, #12
 800cebe:	d900      	bls.n	800cec2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800cec0:	e095      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x15e>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	d04e      	beq.n	800cf66 <HAL_TIM_PWM_ConfigChannel+0xd6>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b08      	cmp	r3, #8
 800cecc:	d900      	bls.n	800ced0 <HAL_TIM_PWM_ConfigChannel+0x40>
 800cece:	e08e      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x15e>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <HAL_TIM_PWM_ConfigChannel+0x4e>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d021      	beq.n	800cf20 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800cedc:	e087      	b.n	800cfee <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	0011      	movs	r1, r2
 800cee6:	0018      	movs	r0, r3
 800cee8:	f000 f924 	bl	800d134 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	699a      	ldr	r2, [r3, #24]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2108      	movs	r1, #8
 800cef8:	430a      	orrs	r2, r1
 800cefa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	699a      	ldr	r2, [r3, #24]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2104      	movs	r1, #4
 800cf08:	438a      	bics	r2, r1
 800cf0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6999      	ldr	r1, [r3, #24]
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	691a      	ldr	r2, [r3, #16]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	619a      	str	r2, [r3, #24]
      break;
 800cf1e:	e067      	b.n	800cff0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	0011      	movs	r1, r2
 800cf28:	0018      	movs	r0, r3
 800cf2a:	f000 f98b 	bl	800d244 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	699a      	ldr	r2, [r3, #24]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2180      	movs	r1, #128	; 0x80
 800cf3a:	0109      	lsls	r1, r1, #4
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	699a      	ldr	r2, [r3, #24]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	492e      	ldr	r1, [pc, #184]	; (800d004 <HAL_TIM_PWM_ConfigChannel+0x174>)
 800cf4c:	400a      	ands	r2, r1
 800cf4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6999      	ldr	r1, [r3, #24]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	021a      	lsls	r2, r3, #8
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	619a      	str	r2, [r3, #24]
      break;
 800cf64:	e044      	b.n	800cff0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	0011      	movs	r1, r2
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f000 f9ec 	bl	800d34c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	69da      	ldr	r2, [r3, #28]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2108      	movs	r1, #8
 800cf80:	430a      	orrs	r2, r1
 800cf82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	69da      	ldr	r2, [r3, #28]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2104      	movs	r1, #4
 800cf90:	438a      	bics	r2, r1
 800cf92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	69d9      	ldr	r1, [r3, #28]
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	691a      	ldr	r2, [r3, #16]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	61da      	str	r2, [r3, #28]
      break;
 800cfa6:	e023      	b.n	800cff0 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	0011      	movs	r1, r2
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	f000 fa51 	bl	800d458 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69da      	ldr	r2, [r3, #28]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2180      	movs	r1, #128	; 0x80
 800cfc2:	0109      	lsls	r1, r1, #4
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	69da      	ldr	r2, [r3, #28]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	490c      	ldr	r1, [pc, #48]	; (800d004 <HAL_TIM_PWM_ConfigChannel+0x174>)
 800cfd4:	400a      	ands	r2, r1
 800cfd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	69d9      	ldr	r1, [r3, #28]
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	021a      	lsls	r2, r3, #8
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	430a      	orrs	r2, r1
 800cfea:	61da      	str	r2, [r3, #28]
      break;
 800cfec:	e000      	b.n	800cff0 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 800cfee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	223c      	movs	r2, #60	; 0x3c
 800cff4:	2100      	movs	r1, #0
 800cff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	0018      	movs	r0, r3
 800cffc:	46bd      	mov	sp, r7
 800cffe:	b004      	add	sp, #16
 800d000:	bd80      	pop	{r7, pc}
 800d002:	46c0      	nop			; (mov r8, r8)
 800d004:	fffffbff 	.word	0xfffffbff

0800d008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d010:	46c0      	nop			; (mov r8, r8)
 800d012:	46bd      	mov	sp, r7
 800d014:	b002      	add	sp, #8
 800d016:	bd80      	pop	{r7, pc}

0800d018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d020:	46c0      	nop			; (mov r8, r8)
 800d022:	46bd      	mov	sp, r7
 800d024:	b002      	add	sp, #8
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d030:	46c0      	nop			; (mov r8, r8)
 800d032:	46bd      	mov	sp, r7
 800d034:	b002      	add	sp, #8
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d040:	46c0      	nop			; (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	b002      	add	sp, #8
 800d046:	bd80      	pop	{r7, pc}

0800d048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a2f      	ldr	r2, [pc, #188]	; (800d118 <TIM_Base_SetConfig+0xd0>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_Base_SetConfig+0x20>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a2e      	ldr	r2, [pc, #184]	; (800d11c <TIM_Base_SetConfig+0xd4>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d108      	bne.n	800d07a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2270      	movs	r2, #112	; 0x70
 800d06c:	4393      	bics	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	4313      	orrs	r3, r2
 800d078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a26      	ldr	r2, [pc, #152]	; (800d118 <TIM_Base_SetConfig+0xd0>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d013      	beq.n	800d0aa <TIM_Base_SetConfig+0x62>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a25      	ldr	r2, [pc, #148]	; (800d11c <TIM_Base_SetConfig+0xd4>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d00f      	beq.n	800d0aa <TIM_Base_SetConfig+0x62>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a24      	ldr	r2, [pc, #144]	; (800d120 <TIM_Base_SetConfig+0xd8>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00b      	beq.n	800d0aa <TIM_Base_SetConfig+0x62>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a23      	ldr	r2, [pc, #140]	; (800d124 <TIM_Base_SetConfig+0xdc>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d007      	beq.n	800d0aa <TIM_Base_SetConfig+0x62>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a22      	ldr	r2, [pc, #136]	; (800d128 <TIM_Base_SetConfig+0xe0>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d003      	beq.n	800d0aa <TIM_Base_SetConfig+0x62>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a21      	ldr	r2, [pc, #132]	; (800d12c <TIM_Base_SetConfig+0xe4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d108      	bne.n	800d0bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	4a20      	ldr	r2, [pc, #128]	; (800d130 <TIM_Base_SetConfig+0xe8>)
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2280      	movs	r2, #128	; 0x80
 800d0c0:	4393      	bics	r3, r2
 800d0c2:	001a      	movs	r2, r3
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	689a      	ldr	r2, [r3, #8]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a0c      	ldr	r2, [pc, #48]	; (800d118 <TIM_Base_SetConfig+0xd0>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d00b      	beq.n	800d102 <TIM_Base_SetConfig+0xba>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a0d      	ldr	r2, [pc, #52]	; (800d124 <TIM_Base_SetConfig+0xdc>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d007      	beq.n	800d102 <TIM_Base_SetConfig+0xba>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a0c      	ldr	r2, [pc, #48]	; (800d128 <TIM_Base_SetConfig+0xe0>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d003      	beq.n	800d102 <TIM_Base_SetConfig+0xba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a0b      	ldr	r2, [pc, #44]	; (800d12c <TIM_Base_SetConfig+0xe4>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d103      	bne.n	800d10a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	691a      	ldr	r2, [r3, #16]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	615a      	str	r2, [r3, #20]
}
 800d110:	46c0      	nop			; (mov r8, r8)
 800d112:	46bd      	mov	sp, r7
 800d114:	b004      	add	sp, #16
 800d116:	bd80      	pop	{r7, pc}
 800d118:	40012c00 	.word	0x40012c00
 800d11c:	40000400 	.word	0x40000400
 800d120:	40002000 	.word	0x40002000
 800d124:	40014000 	.word	0x40014000
 800d128:	40014400 	.word	0x40014400
 800d12c:	40014800 	.word	0x40014800
 800d130:	fffffcff 	.word	0xfffffcff

0800d134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	2201      	movs	r2, #1
 800d144:	4393      	bics	r3, r2
 800d146:	001a      	movs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2270      	movs	r2, #112	; 0x70
 800d162:	4393      	bics	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2203      	movs	r2, #3
 800d16a:	4393      	bics	r3, r2
 800d16c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	4313      	orrs	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2202      	movs	r2, #2
 800d17c:	4393      	bics	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	4313      	orrs	r3, r2
 800d188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a27      	ldr	r2, [pc, #156]	; (800d22c <TIM_OC1_SetConfig+0xf8>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d00b      	beq.n	800d1aa <TIM_OC1_SetConfig+0x76>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a26      	ldr	r2, [pc, #152]	; (800d230 <TIM_OC1_SetConfig+0xfc>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d007      	beq.n	800d1aa <TIM_OC1_SetConfig+0x76>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a25      	ldr	r2, [pc, #148]	; (800d234 <TIM_OC1_SetConfig+0x100>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d003      	beq.n	800d1aa <TIM_OC1_SetConfig+0x76>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a24      	ldr	r2, [pc, #144]	; (800d238 <TIM_OC1_SetConfig+0x104>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d10c      	bne.n	800d1c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2208      	movs	r2, #8
 800d1ae:	4393      	bics	r3, r2
 800d1b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	2204      	movs	r2, #4
 800d1c0:	4393      	bics	r3, r2
 800d1c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a19      	ldr	r2, [pc, #100]	; (800d22c <TIM_OC1_SetConfig+0xf8>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d00b      	beq.n	800d1e4 <TIM_OC1_SetConfig+0xb0>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a18      	ldr	r2, [pc, #96]	; (800d230 <TIM_OC1_SetConfig+0xfc>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d007      	beq.n	800d1e4 <TIM_OC1_SetConfig+0xb0>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a17      	ldr	r2, [pc, #92]	; (800d234 <TIM_OC1_SetConfig+0x100>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d003      	beq.n	800d1e4 <TIM_OC1_SetConfig+0xb0>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a16      	ldr	r2, [pc, #88]	; (800d238 <TIM_OC1_SetConfig+0x104>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d111      	bne.n	800d208 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	4a15      	ldr	r2, [pc, #84]	; (800d23c <TIM_OC1_SetConfig+0x108>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	4a14      	ldr	r2, [pc, #80]	; (800d240 <TIM_OC1_SetConfig+0x10c>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	4313      	orrs	r3, r2
 800d206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	685a      	ldr	r2, [r3, #4]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	621a      	str	r2, [r3, #32]
}
 800d222:	46c0      	nop			; (mov r8, r8)
 800d224:	46bd      	mov	sp, r7
 800d226:	b006      	add	sp, #24
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	46c0      	nop			; (mov r8, r8)
 800d22c:	40012c00 	.word	0x40012c00
 800d230:	40014000 	.word	0x40014000
 800d234:	40014400 	.word	0x40014400
 800d238:	40014800 	.word	0x40014800
 800d23c:	fffffeff 	.word	0xfffffeff
 800d240:	fffffdff 	.word	0xfffffdff

0800d244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	2210      	movs	r2, #16
 800d254:	4393      	bics	r3, r2
 800d256:	001a      	movs	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a1b      	ldr	r3, [r3, #32]
 800d260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	4a2e      	ldr	r2, [pc, #184]	; (800d32c <TIM_OC2_SetConfig+0xe8>)
 800d272:	4013      	ands	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4a2d      	ldr	r2, [pc, #180]	; (800d330 <TIM_OC2_SetConfig+0xec>)
 800d27a:	4013      	ands	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	021b      	lsls	r3, r3, #8
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	4313      	orrs	r3, r2
 800d288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2220      	movs	r2, #32
 800d28e:	4393      	bics	r3, r2
 800d290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	011b      	lsls	r3, r3, #4
 800d298:	697a      	ldr	r2, [r7, #20]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a24      	ldr	r2, [pc, #144]	; (800d334 <TIM_OC2_SetConfig+0xf0>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d10d      	bne.n	800d2c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2280      	movs	r2, #128	; 0x80
 800d2aa:	4393      	bics	r3, r2
 800d2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	011b      	lsls	r3, r3, #4
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2240      	movs	r2, #64	; 0x40
 800d2be:	4393      	bics	r3, r2
 800d2c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a1b      	ldr	r2, [pc, #108]	; (800d334 <TIM_OC2_SetConfig+0xf0>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d00b      	beq.n	800d2e2 <TIM_OC2_SetConfig+0x9e>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a1a      	ldr	r2, [pc, #104]	; (800d338 <TIM_OC2_SetConfig+0xf4>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d007      	beq.n	800d2e2 <TIM_OC2_SetConfig+0x9e>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a19      	ldr	r2, [pc, #100]	; (800d33c <TIM_OC2_SetConfig+0xf8>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d003      	beq.n	800d2e2 <TIM_OC2_SetConfig+0x9e>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a18      	ldr	r2, [pc, #96]	; (800d340 <TIM_OC2_SetConfig+0xfc>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d113      	bne.n	800d30a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	4a17      	ldr	r2, [pc, #92]	; (800d344 <TIM_OC2_SetConfig+0x100>)
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	4a16      	ldr	r2, [pc, #88]	; (800d348 <TIM_OC2_SetConfig+0x104>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4313      	orrs	r3, r2
 800d308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	621a      	str	r2, [r3, #32]
}
 800d324:	46c0      	nop			; (mov r8, r8)
 800d326:	46bd      	mov	sp, r7
 800d328:	b006      	add	sp, #24
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	ffff8fff 	.word	0xffff8fff
 800d330:	fffffcff 	.word	0xfffffcff
 800d334:	40012c00 	.word	0x40012c00
 800d338:	40014000 	.word	0x40014000
 800d33c:	40014400 	.word	0x40014400
 800d340:	40014800 	.word	0x40014800
 800d344:	fffffbff 	.word	0xfffffbff
 800d348:	fffff7ff 	.word	0xfffff7ff

0800d34c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	4a35      	ldr	r2, [pc, #212]	; (800d430 <TIM_OC3_SetConfig+0xe4>)
 800d35c:	401a      	ands	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2270      	movs	r2, #112	; 0x70
 800d378:	4393      	bics	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2203      	movs	r2, #3
 800d380:	4393      	bics	r3, r2
 800d382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	4a28      	ldr	r2, [pc, #160]	; (800d434 <TIM_OC3_SetConfig+0xe8>)
 800d392:	4013      	ands	r3, r2
 800d394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	021b      	lsls	r3, r3, #8
 800d39c:	697a      	ldr	r2, [r7, #20]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a24      	ldr	r2, [pc, #144]	; (800d438 <TIM_OC3_SetConfig+0xec>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d10d      	bne.n	800d3c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4a23      	ldr	r2, [pc, #140]	; (800d43c <TIM_OC3_SetConfig+0xf0>)
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	4a1f      	ldr	r2, [pc, #124]	; (800d440 <TIM_OC3_SetConfig+0xf4>)
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a1b      	ldr	r2, [pc, #108]	; (800d438 <TIM_OC3_SetConfig+0xec>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d00b      	beq.n	800d3e6 <TIM_OC3_SetConfig+0x9a>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a1c      	ldr	r2, [pc, #112]	; (800d444 <TIM_OC3_SetConfig+0xf8>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d007      	beq.n	800d3e6 <TIM_OC3_SetConfig+0x9a>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4a1b      	ldr	r2, [pc, #108]	; (800d448 <TIM_OC3_SetConfig+0xfc>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d003      	beq.n	800d3e6 <TIM_OC3_SetConfig+0x9a>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a1a      	ldr	r2, [pc, #104]	; (800d44c <TIM_OC3_SetConfig+0x100>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d113      	bne.n	800d40e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	4a19      	ldr	r2, [pc, #100]	; (800d450 <TIM_OC3_SetConfig+0x104>)
 800d3ea:	4013      	ands	r3, r2
 800d3ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	4a18      	ldr	r2, [pc, #96]	; (800d454 <TIM_OC3_SetConfig+0x108>)
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	011b      	lsls	r3, r3, #4
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	685a      	ldr	r2, [r3, #4]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	621a      	str	r2, [r3, #32]
}
 800d428:	46c0      	nop			; (mov r8, r8)
 800d42a:	46bd      	mov	sp, r7
 800d42c:	b006      	add	sp, #24
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	fffffeff 	.word	0xfffffeff
 800d434:	fffffdff 	.word	0xfffffdff
 800d438:	40012c00 	.word	0x40012c00
 800d43c:	fffff7ff 	.word	0xfffff7ff
 800d440:	fffffbff 	.word	0xfffffbff
 800d444:	40014000 	.word	0x40014000
 800d448:	40014400 	.word	0x40014400
 800d44c:	40014800 	.word	0x40014800
 800d450:	ffffefff 	.word	0xffffefff
 800d454:	ffffdfff 	.word	0xffffdfff

0800d458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	4a28      	ldr	r2, [pc, #160]	; (800d508 <TIM_OC4_SetConfig+0xb0>)
 800d468:	401a      	ands	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	69db      	ldr	r3, [r3, #28]
 800d47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a22      	ldr	r2, [pc, #136]	; (800d50c <TIM_OC4_SetConfig+0xb4>)
 800d484:	4013      	ands	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4a21      	ldr	r2, [pc, #132]	; (800d510 <TIM_OC4_SetConfig+0xb8>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	021b      	lsls	r3, r3, #8
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4313      	orrs	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	4a1d      	ldr	r2, [pc, #116]	; (800d514 <TIM_OC4_SetConfig+0xbc>)
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	031b      	lsls	r3, r3, #12
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a19      	ldr	r2, [pc, #100]	; (800d518 <TIM_OC4_SetConfig+0xc0>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d00b      	beq.n	800d4d0 <TIM_OC4_SetConfig+0x78>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a18      	ldr	r2, [pc, #96]	; (800d51c <TIM_OC4_SetConfig+0xc4>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d007      	beq.n	800d4d0 <TIM_OC4_SetConfig+0x78>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a17      	ldr	r2, [pc, #92]	; (800d520 <TIM_OC4_SetConfig+0xc8>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d003      	beq.n	800d4d0 <TIM_OC4_SetConfig+0x78>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a16      	ldr	r2, [pc, #88]	; (800d524 <TIM_OC4_SetConfig+0xcc>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d109      	bne.n	800d4e4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	4a15      	ldr	r2, [pc, #84]	; (800d528 <TIM_OC4_SetConfig+0xd0>)
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	019b      	lsls	r3, r3, #6
 800d4de:	697a      	ldr	r2, [r7, #20]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	621a      	str	r2, [r3, #32]
}
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	46bd      	mov	sp, r7
 800d502:	b006      	add	sp, #24
 800d504:	bd80      	pop	{r7, pc}
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	ffffefff 	.word	0xffffefff
 800d50c:	ffff8fff 	.word	0xffff8fff
 800d510:	fffffcff 	.word	0xfffffcff
 800d514:	ffffdfff 	.word	0xffffdfff
 800d518:	40012c00 	.word	0x40012c00
 800d51c:	40014000 	.word	0x40014000
 800d520:	40014400 	.word	0x40014400
 800d524:	40014800 	.word	0x40014800
 800d528:	ffffbfff 	.word	0xffffbfff

0800d52c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	221f      	movs	r2, #31
 800d53c:	4013      	ands	r3, r2
 800d53e:	2201      	movs	r2, #1
 800d540:	409a      	lsls	r2, r3
 800d542:	0013      	movs	r3, r2
 800d544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	43d2      	mvns	r2, r2
 800d54e:	401a      	ands	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6a1a      	ldr	r2, [r3, #32]
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	211f      	movs	r1, #31
 800d55c:	400b      	ands	r3, r1
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	4099      	lsls	r1, r3
 800d562:	000b      	movs	r3, r1
 800d564:	431a      	orrs	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	621a      	str	r2, [r3, #32]
}
 800d56a:	46c0      	nop			; (mov r8, r8)
 800d56c:	46bd      	mov	sp, r7
 800d56e:	b006      	add	sp, #24
 800d570:	bd80      	pop	{r7, pc}
	...

0800d574 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d57e:	2300      	movs	r3, #0
 800d580:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	223c      	movs	r2, #60	; 0x3c
 800d586:	5c9b      	ldrb	r3, [r3, r2]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d101      	bne.n	800d590 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d58c:	2302      	movs	r3, #2
 800d58e:	e03e      	b.n	800d60e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	223c      	movs	r2, #60	; 0x3c
 800d594:	2101      	movs	r1, #1
 800d596:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	22ff      	movs	r2, #255	; 0xff
 800d59c:	4393      	bics	r3, r2
 800d59e:	001a      	movs	r2, r3
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4a1b      	ldr	r2, [pc, #108]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800d5ac:	401a      	ands	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	4a18      	ldr	r2, [pc, #96]	; (800d61c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800d5ba:	401a      	ands	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4a16      	ldr	r2, [pc, #88]	; (800d620 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800d5c8:	401a      	ands	r2, r3
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4a13      	ldr	r2, [pc, #76]	; (800d624 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800d5d6:	401a      	ands	r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4a11      	ldr	r2, [pc, #68]	; (800d628 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800d5e4:	401a      	ands	r2, r3
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	695b      	ldr	r3, [r3, #20]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	4a0e      	ldr	r2, [pc, #56]	; (800d62c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800d5f2:	401a      	ands	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	69db      	ldr	r3, [r3, #28]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	223c      	movs	r2, #60	; 0x3c
 800d608:	2100      	movs	r1, #0
 800d60a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	0018      	movs	r0, r3
 800d610:	46bd      	mov	sp, r7
 800d612:	b004      	add	sp, #16
 800d614:	bd80      	pop	{r7, pc}
 800d616:	46c0      	nop			; (mov r8, r8)
 800d618:	fffffcff 	.word	0xfffffcff
 800d61c:	fffffbff 	.word	0xfffffbff
 800d620:	fffff7ff 	.word	0xfffff7ff
 800d624:	ffffefff 	.word	0xffffefff
 800d628:	ffffdfff 	.word	0xffffdfff
 800d62c:	ffffbfff 	.word	0xffffbfff

0800d630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d638:	46c0      	nop			; (mov r8, r8)
 800d63a:	46bd      	mov	sp, r7
 800d63c:	b002      	add	sp, #8
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d648:	46c0      	nop			; (mov r8, r8)
 800d64a:	46bd      	mov	sp, r7
 800d64c:	b002      	add	sp, #8
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e044      	b.n	800d6ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d666:	2b00      	cmp	r3, #0
 800d668:	d107      	bne.n	800d67a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2274      	movs	r2, #116	; 0x74
 800d66e:	2100      	movs	r1, #0
 800d670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	0018      	movs	r0, r3
 800d676:	f7fa fb45 	bl	8007d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2224      	movs	r2, #36	; 0x24
 800d67e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2101      	movs	r1, #1
 800d68c:	438a      	bics	r2, r1
 800d68e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	0018      	movs	r0, r3
 800d694:	f000 fb32 	bl	800dcfc <UART_SetConfig>
 800d698:	0003      	movs	r3, r0
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d101      	bne.n	800d6a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e024      	b.n	800d6ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	f000 fc7d 	bl	800dfac <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	490d      	ldr	r1, [pc, #52]	; (800d6f4 <HAL_UART_Init+0xa4>)
 800d6be:	400a      	ands	r2, r1
 800d6c0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	689a      	ldr	r2, [r3, #8]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2108      	movs	r1, #8
 800d6ce:	438a      	bics	r2, r1
 800d6d0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2101      	movs	r1, #1
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	f000 fd15 	bl	800e114 <UART_CheckIdleState>
 800d6ea:	0003      	movs	r3, r0
}
 800d6ec:	0018      	movs	r0, r3
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	b002      	add	sp, #8
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	fffff7ff 	.word	0xfffff7ff

0800d6f8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d706:	2301      	movs	r3, #1
 800d708:	e02c      	b.n	800d764 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2224      	movs	r2, #36	; 0x24
 800d70e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2101      	movs	r1, #1
 800d71c:	438a      	bics	r2, r1
 800d71e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2200      	movs	r2, #0
 800d726:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2200      	movs	r2, #0
 800d72e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2200      	movs	r2, #0
 800d736:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	0018      	movs	r0, r3
 800d73c:	f7fa fb7a 	bl	8007e34 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2280      	movs	r2, #128	; 0x80
 800d744:	2100      	movs	r1, #0
 800d746:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2274      	movs	r2, #116	; 0x74
 800d75e:	2100      	movs	r1, #0
 800d760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	0018      	movs	r0, r3
 800d766:	46bd      	mov	sp, r7
 800d768:	b002      	add	sp, #8
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	1dbb      	adds	r3, r7, #6
 800d778:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d77e:	2b20      	cmp	r3, #32
 800d780:	d159      	bne.n	800d836 <HAL_UART_Transmit_IT+0xca>
  {
    if ((pData == NULL) || (Size == 0U))
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <HAL_UART_Transmit_IT+0x24>
 800d788:	1dbb      	adds	r3, r7, #6
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d101      	bne.n	800d794 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	e051      	b.n	800d838 <HAL_UART_Transmit_IT+0xcc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	689a      	ldr	r2, [r3, #8]
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	015b      	lsls	r3, r3, #5
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d109      	bne.n	800d7b4 <HAL_UART_Transmit_IT+0x48>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d105      	bne.n	800d7b4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	d001      	beq.n	800d7b4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e041      	b.n	800d838 <HAL_UART_Transmit_IT+0xcc>
      }
    }

    __HAL_LOCK(huart);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2274      	movs	r2, #116	; 0x74
 800d7b8:	5c9b      	ldrb	r3, [r3, r2]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d101      	bne.n	800d7c2 <HAL_UART_Transmit_IT+0x56>
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e03a      	b.n	800d838 <HAL_UART_Transmit_IT+0xcc>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2274      	movs	r2, #116	; 0x74
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	1dba      	adds	r2, r7, #6
 800d7d4:	2150      	movs	r1, #80	; 0x50
 800d7d6:	8812      	ldrh	r2, [r2, #0]
 800d7d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1dba      	adds	r2, r7, #6
 800d7de:	2152      	movs	r1, #82	; 0x52
 800d7e0:	8812      	ldrh	r2, [r2, #0]
 800d7e2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2280      	movs	r2, #128	; 0x80
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2221      	movs	r2, #33	; 0x21
 800d7f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	689a      	ldr	r2, [r3, #8]
 800d7fc:	2380      	movs	r3, #128	; 0x80
 800d7fe:	015b      	lsls	r3, r3, #5
 800d800:	429a      	cmp	r2, r3
 800d802:	d107      	bne.n	800d814 <HAL_UART_Transmit_IT+0xa8>
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d103      	bne.n	800d814 <HAL_UART_Transmit_IT+0xa8>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	4a0c      	ldr	r2, [pc, #48]	; (800d840 <HAL_UART_Transmit_IT+0xd4>)
 800d810:	669a      	str	r2, [r3, #104]	; 0x68
 800d812:	e002      	b.n	800d81a <HAL_UART_Transmit_IT+0xae>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4a0b      	ldr	r2, [pc, #44]	; (800d844 <HAL_UART_Transmit_IT+0xd8>)
 800d818:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2274      	movs	r2, #116	; 0x74
 800d81e:	2100      	movs	r1, #0
 800d820:	5499      	strb	r1, [r3, r2]

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2180      	movs	r1, #128	; 0x80
 800d82e:	430a      	orrs	r2, r1
 800d830:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	e000      	b.n	800d838 <HAL_UART_Transmit_IT+0xcc>
  }
  else
  {
    return HAL_BUSY;
 800d836:	2302      	movs	r3, #2
  }
}
 800d838:	0018      	movs	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	b004      	add	sp, #16
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	0800e4bb 	.word	0x0800e4bb
 800d844:	0800e44b 	.word	0x0800e44b

0800d848 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	1dbb      	adds	r3, r7, #6
 800d854:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d85a:	2b20      	cmp	r3, #32
 800d85c:	d13f      	bne.n	800d8de <HAL_UART_Receive_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d003      	beq.n	800d86c <HAL_UART_Receive_IT+0x24>
 800d864:	1dbb      	adds	r3, r7, #6
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d101      	bne.n	800d870 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e037      	b.n	800d8e0 <HAL_UART_Receive_IT+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	2380      	movs	r3, #128	; 0x80
 800d876:	015b      	lsls	r3, r3, #5
 800d878:	429a      	cmp	r2, r3
 800d87a:	d109      	bne.n	800d890 <HAL_UART_Receive_IT+0x48>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d105      	bne.n	800d890 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2201      	movs	r2, #1
 800d888:	4013      	ands	r3, r2
 800d88a:	d001      	beq.n	800d890 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e027      	b.n	800d8e0 <HAL_UART_Receive_IT+0x98>
      }
    }

    __HAL_LOCK(huart);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2274      	movs	r2, #116	; 0x74
 800d894:	5c9b      	ldrb	r3, [r3, r2]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d101      	bne.n	800d89e <HAL_UART_Receive_IT+0x56>
 800d89a:	2302      	movs	r3, #2
 800d89c:	e020      	b.n	800d8e0 <HAL_UART_Receive_IT+0x98>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2274      	movs	r2, #116	; 0x74
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	685a      	ldr	r2, [r3, #4]
 800d8b2:	2380      	movs	r3, #128	; 0x80
 800d8b4:	041b      	lsls	r3, r3, #16
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	d008      	beq.n	800d8cc <HAL_UART_Receive_IT+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2180      	movs	r1, #128	; 0x80
 800d8c6:	04c9      	lsls	r1, r1, #19
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800d8cc:	1dbb      	adds	r3, r7, #6
 800d8ce:	881a      	ldrh	r2, [r3, #0]
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	0018      	movs	r0, r3
 800d8d6:	f000 fce3 	bl	800e2a0 <UART_Start_Receive_IT>
 800d8da:	0003      	movs	r3, r0
 800d8dc:	e000      	b.n	800d8e0 <HAL_UART_Receive_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800d8de:	2302      	movs	r3, #2
  }
}
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	b004      	add	sp, #16
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	69db      	ldr	r3, [r3, #28]
 800d8f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	4ab4      	ldr	r2, [pc, #720]	; (800dbdc <HAL_UART_IRQHandler+0x2f4>)
 800d90c:	4013      	ands	r3, r2
 800d90e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d112      	bne.n	800d93c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	2220      	movs	r2, #32
 800d91a:	4013      	ands	r3, r2
 800d91c:	d00e      	beq.n	800d93c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	2220      	movs	r2, #32
 800d922:	4013      	ands	r3, r2
 800d924:	d00a      	beq.n	800d93c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d100      	bne.n	800d930 <HAL_UART_IRQHandler+0x48>
 800d92e:	e1ba      	b.n	800dca6 <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	0010      	movs	r0, r2
 800d938:	4798      	blx	r3
      }
      return;
 800d93a:	e1b4      	b.n	800dca6 <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d100      	bne.n	800d944 <HAL_UART_IRQHandler+0x5c>
 800d942:	e0d9      	b.n	800daf8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	2201      	movs	r2, #1
 800d948:	4013      	ands	r3, r2
 800d94a:	d104      	bne.n	800d956 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	4aa4      	ldr	r2, [pc, #656]	; (800dbe0 <HAL_UART_IRQHandler+0x2f8>)
 800d950:	4013      	ands	r3, r2
 800d952:	d100      	bne.n	800d956 <HAL_UART_IRQHandler+0x6e>
 800d954:	e0d0      	b.n	800daf8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	2201      	movs	r2, #1
 800d95a:	4013      	ands	r3, r2
 800d95c:	d010      	beq.n	800d980 <HAL_UART_IRQHandler+0x98>
 800d95e:	69ba      	ldr	r2, [r7, #24]
 800d960:	2380      	movs	r3, #128	; 0x80
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4013      	ands	r3, r2
 800d966:	d00b      	beq.n	800d980 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2201      	movs	r2, #1
 800d96e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2280      	movs	r2, #128	; 0x80
 800d974:	589b      	ldr	r3, [r3, r2]
 800d976:	2201      	movs	r2, #1
 800d978:	431a      	orrs	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2180      	movs	r1, #128	; 0x80
 800d97e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	2202      	movs	r2, #2
 800d984:	4013      	ands	r3, r2
 800d986:	d00f      	beq.n	800d9a8 <HAL_UART_IRQHandler+0xc0>
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2201      	movs	r2, #1
 800d98c:	4013      	ands	r3, r2
 800d98e:	d00b      	beq.n	800d9a8 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2202      	movs	r2, #2
 800d996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2280      	movs	r2, #128	; 0x80
 800d99c:	589b      	ldr	r3, [r3, r2]
 800d99e:	2204      	movs	r2, #4
 800d9a0:	431a      	orrs	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2180      	movs	r1, #128	; 0x80
 800d9a6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	2204      	movs	r2, #4
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <HAL_UART_IRQHandler+0xe8>
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2204      	movs	r2, #4
 800d9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2280      	movs	r2, #128	; 0x80
 800d9c4:	589b      	ldr	r3, [r3, r2]
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2180      	movs	r1, #128	; 0x80
 800d9ce:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	2208      	movs	r2, #8
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	d013      	beq.n	800da00 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	2220      	movs	r2, #32
 800d9dc:	4013      	ands	r3, r2
 800d9de:	d103      	bne.n	800d9e8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d9e6:	d00b      	beq.n	800da00 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2208      	movs	r2, #8
 800d9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2280      	movs	r2, #128	; 0x80
 800d9f4:	589b      	ldr	r3, [r3, r2]
 800d9f6:	2208      	movs	r2, #8
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2180      	movs	r1, #128	; 0x80
 800d9fe:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da00:	69fa      	ldr	r2, [r7, #28]
 800da02:	2380      	movs	r3, #128	; 0x80
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	4013      	ands	r3, r2
 800da08:	d011      	beq.n	800da2e <HAL_UART_IRQHandler+0x146>
 800da0a:	69ba      	ldr	r2, [r7, #24]
 800da0c:	2380      	movs	r3, #128	; 0x80
 800da0e:	04db      	lsls	r3, r3, #19
 800da10:	4013      	ands	r3, r2
 800da12:	d00c      	beq.n	800da2e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2280      	movs	r2, #128	; 0x80
 800da1a:	0112      	lsls	r2, r2, #4
 800da1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2280      	movs	r2, #128	; 0x80
 800da22:	589b      	ldr	r3, [r3, r2]
 800da24:	2220      	movs	r2, #32
 800da26:	431a      	orrs	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2180      	movs	r1, #128	; 0x80
 800da2c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2280      	movs	r2, #128	; 0x80
 800da32:	589b      	ldr	r3, [r3, r2]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d100      	bne.n	800da3a <HAL_UART_IRQHandler+0x152>
 800da38:	e137      	b.n	800dcaa <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	2220      	movs	r2, #32
 800da3e:	4013      	ands	r3, r2
 800da40:	d00c      	beq.n	800da5c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2220      	movs	r2, #32
 800da46:	4013      	ands	r3, r2
 800da48:	d008      	beq.n	800da5c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d004      	beq.n	800da5c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	0010      	movs	r0, r2
 800da5a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2280      	movs	r2, #128	; 0x80
 800da60:	589b      	ldr	r3, [r3, r2]
 800da62:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	2240      	movs	r2, #64	; 0x40
 800da6c:	4013      	ands	r3, r2
 800da6e:	2b40      	cmp	r3, #64	; 0x40
 800da70:	d003      	beq.n	800da7a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2228      	movs	r2, #40	; 0x28
 800da76:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da78:	d033      	beq.n	800dae2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	0018      	movs	r0, r3
 800da7e:	f000 fc9d 	bl	800e3bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	2240      	movs	r2, #64	; 0x40
 800da8a:	4013      	ands	r3, r2
 800da8c:	2b40      	cmp	r3, #64	; 0x40
 800da8e:	d123      	bne.n	800dad8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	689a      	ldr	r2, [r3, #8]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2140      	movs	r1, #64	; 0x40
 800da9c:	438a      	bics	r2, r1
 800da9e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d012      	beq.n	800dace <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daac:	4a4d      	ldr	r2, [pc, #308]	; (800dbe4 <HAL_UART_IRQHandler+0x2fc>)
 800daae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dab4:	0018      	movs	r0, r3
 800dab6:	f7fa fda9 	bl	800860c <HAL_DMA_Abort_IT>
 800daba:	1e03      	subs	r3, r0, #0
 800dabc:	d01a      	beq.n	800daf4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac8:	0018      	movs	r0, r3
 800daca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dacc:	e012      	b.n	800daf4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	0018      	movs	r0, r3
 800dad2:	f000 f8ff 	bl	800dcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad6:	e00d      	b.n	800daf4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	0018      	movs	r0, r3
 800dadc:	f000 f8fa 	bl	800dcd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dae0:	e008      	b.n	800daf4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	0018      	movs	r0, r3
 800dae6:	f000 f8f5 	bl	800dcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2280      	movs	r2, #128	; 0x80
 800daee:	2100      	movs	r1, #0
 800daf0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800daf2:	e0da      	b.n	800dcaa <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf4:	46c0      	nop			; (mov r8, r8)
    return;
 800daf6:	e0d8      	b.n	800dcaa <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d000      	beq.n	800db02 <HAL_UART_IRQHandler+0x21a>
 800db00:	e0b2      	b.n	800dc68 <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	2210      	movs	r2, #16
 800db06:	4013      	ands	r3, r2
 800db08:	d100      	bne.n	800db0c <HAL_UART_IRQHandler+0x224>
 800db0a:	e0ad      	b.n	800dc68 <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2210      	movs	r2, #16
 800db10:	4013      	ands	r3, r2
 800db12:	d100      	bne.n	800db16 <HAL_UART_IRQHandler+0x22e>
 800db14:	e0a8      	b.n	800dc68 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2210      	movs	r2, #16
 800db1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	2240      	movs	r2, #64	; 0x40
 800db26:	4013      	ands	r3, r2
 800db28:	2b40      	cmp	r3, #64	; 0x40
 800db2a:	d15f      	bne.n	800dbec <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	2108      	movs	r1, #8
 800db36:	187b      	adds	r3, r7, r1
 800db38:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800db3a:	187b      	adds	r3, r7, r1
 800db3c:	881b      	ldrh	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d100      	bne.n	800db44 <HAL_UART_IRQHandler+0x25c>
 800db42:	e0b4      	b.n	800dcae <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2258      	movs	r2, #88	; 0x58
 800db48:	5a9b      	ldrh	r3, [r3, r2]
 800db4a:	187a      	adds	r2, r7, r1
 800db4c:	8812      	ldrh	r2, [r2, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d300      	bcc.n	800db54 <HAL_UART_IRQHandler+0x26c>
 800db52:	e0ac      	b.n	800dcae <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	187a      	adds	r2, r7, r1
 800db58:	215a      	movs	r1, #90	; 0x5a
 800db5a:	8812      	ldrh	r2, [r2, #0]
 800db5c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	2b20      	cmp	r3, #32
 800db66:	d02a      	beq.n	800dbbe <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	491d      	ldr	r1, [pc, #116]	; (800dbe8 <HAL_UART_IRQHandler+0x300>)
 800db74:	400a      	ands	r2, r1
 800db76:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	689a      	ldr	r2, [r3, #8]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2101      	movs	r1, #1
 800db84:	438a      	bics	r2, r1
 800db86:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689a      	ldr	r2, [r3, #8]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2140      	movs	r1, #64	; 0x40
 800db94:	438a      	bics	r2, r1
 800db96:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2220      	movs	r2, #32
 800db9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2110      	movs	r1, #16
 800dbb0:	438a      	bics	r2, r1
 800dbb2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb8:	0018      	movs	r0, r3
 800dbba:	f7fa fcef 	bl	800859c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2258      	movs	r2, #88	; 0x58
 800dbc2:	5a9a      	ldrh	r2, [r3, r2]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	215a      	movs	r1, #90	; 0x5a
 800dbc8:	5a5b      	ldrh	r3, [r3, r1]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	0011      	movs	r1, r2
 800dbd4:	0018      	movs	r0, r3
 800dbd6:	f000 f885 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800dbda:	e068      	b.n	800dcae <HAL_UART_IRQHandler+0x3c6>
 800dbdc:	0000080f 	.word	0x0000080f
 800dbe0:	04000120 	.word	0x04000120
 800dbe4:	0800e41d 	.word	0x0800e41d
 800dbe8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2258      	movs	r2, #88	; 0x58
 800dbf0:	5a99      	ldrh	r1, [r3, r2]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	225a      	movs	r2, #90	; 0x5a
 800dbf6:	5a9b      	ldrh	r3, [r3, r2]
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	200a      	movs	r0, #10
 800dbfc:	183b      	adds	r3, r7, r0
 800dbfe:	1a8a      	subs	r2, r1, r2
 800dc00:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	225a      	movs	r2, #90	; 0x5a
 800dc06:	5a9b      	ldrh	r3, [r3, r2]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d051      	beq.n	800dcb2 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 800dc0e:	183b      	adds	r3, r7, r0
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d04d      	beq.n	800dcb2 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4927      	ldr	r1, [pc, #156]	; (800dcc0 <HAL_UART_IRQHandler+0x3d8>)
 800dc22:	400a      	ands	r2, r1
 800dc24:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	689a      	ldr	r2, [r3, #8]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2101      	movs	r1, #1
 800dc32:	438a      	bics	r2, r1
 800dc34:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2110      	movs	r1, #16
 800dc54:	438a      	bics	r2, r1
 800dc56:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc58:	183b      	adds	r3, r7, r0
 800dc5a:	881a      	ldrh	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	0011      	movs	r1, r2
 800dc60:	0018      	movs	r0, r3
 800dc62:	f000 f83f 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800dc66:	e024      	b.n	800dcb2 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	4013      	ands	r3, r2
 800dc6e:	d00d      	beq.n	800dc8c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	2280      	movs	r2, #128	; 0x80
 800dc74:	4013      	ands	r3, r2
 800dc76:	d009      	beq.n	800dc8c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d01a      	beq.n	800dcb6 <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	0010      	movs	r0, r2
 800dc88:	4798      	blx	r3
    }
    return;
 800dc8a:	e014      	b.n	800dcb6 <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	2240      	movs	r2, #64	; 0x40
 800dc90:	4013      	ands	r3, r2
 800dc92:	d011      	beq.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2240      	movs	r2, #64	; 0x40
 800dc98:	4013      	ands	r3, r2
 800dc9a:	d00d      	beq.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	0018      	movs	r0, r3
 800dca0:	f000 fc47 	bl	800e532 <UART_EndTransmit_IT>
    return;
 800dca4:	e008      	b.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
      return;
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	e006      	b.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
    return;
 800dcaa:	46c0      	nop			; (mov r8, r8)
 800dcac:	e004      	b.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
      return;
 800dcae:	46c0      	nop			; (mov r8, r8)
 800dcb0:	e002      	b.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
      return;
 800dcb2:	46c0      	nop			; (mov r8, r8)
 800dcb4:	e000      	b.n	800dcb8 <HAL_UART_IRQHandler+0x3d0>
    return;
 800dcb6:	46c0      	nop			; (mov r8, r8)
  }

}
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	b008      	add	sp, #32
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	46c0      	nop			; (mov r8, r8)
 800dcc0:	fffffedf 	.word	0xfffffedf

0800dcc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dccc:	46c0      	nop			; (mov r8, r8)
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dcdc:	46c0      	nop			; (mov r8, r8)
 800dcde:	46bd      	mov	sp, r7
 800dce0:	b002      	add	sp, #8
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	000a      	movs	r2, r1
 800dcee:	1cbb      	adds	r3, r7, #2
 800dcf0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dcf2:	46c0      	nop			; (mov r8, r8)
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	b002      	add	sp, #8
 800dcf8:	bd80      	pop	{r7, pc}
	...

0800dcfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dd04:	231e      	movs	r3, #30
 800dd06:	18fb      	adds	r3, r7, r3
 800dd08:	2200      	movs	r2, #0
 800dd0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	431a      	orrs	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a97      	ldr	r2, [pc, #604]	; (800df88 <UART_SetConfig+0x28c>)
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	0019      	movs	r1, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	697a      	ldr	r2, [r7, #20]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	4a92      	ldr	r2, [pc, #584]	; (800df8c <UART_SetConfig+0x290>)
 800dd42:	4013      	ands	r3, r2
 800dd44:	0019      	movs	r1, r3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68da      	ldr	r2, [r3, #12]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	430a      	orrs	r2, r1
 800dd50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a1b      	ldr	r3, [r3, #32]
 800dd5c:	697a      	ldr	r2, [r7, #20]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	4a89      	ldr	r2, [pc, #548]	; (800df90 <UART_SetConfig+0x294>)
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	0019      	movs	r1, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a85      	ldr	r2, [pc, #532]	; (800df94 <UART_SetConfig+0x298>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d127      	bne.n	800ddd2 <UART_SetConfig+0xd6>
 800dd82:	4b85      	ldr	r3, [pc, #532]	; (800df98 <UART_SetConfig+0x29c>)
 800dd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd86:	2203      	movs	r2, #3
 800dd88:	4013      	ands	r3, r2
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d00d      	beq.n	800ddaa <UART_SetConfig+0xae>
 800dd8e:	d81b      	bhi.n	800ddc8 <UART_SetConfig+0xcc>
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d014      	beq.n	800ddbe <UART_SetConfig+0xc2>
 800dd94:	d818      	bhi.n	800ddc8 <UART_SetConfig+0xcc>
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <UART_SetConfig+0xa4>
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d00a      	beq.n	800ddb4 <UART_SetConfig+0xb8>
 800dd9e:	e013      	b.n	800ddc8 <UART_SetConfig+0xcc>
 800dda0:	231f      	movs	r3, #31
 800dda2:	18fb      	adds	r3, r7, r3
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	e035      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddaa:	231f      	movs	r3, #31
 800ddac:	18fb      	adds	r3, r7, r3
 800ddae:	2202      	movs	r2, #2
 800ddb0:	701a      	strb	r2, [r3, #0]
 800ddb2:	e030      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddb4:	231f      	movs	r3, #31
 800ddb6:	18fb      	adds	r3, r7, r3
 800ddb8:	2204      	movs	r2, #4
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e02b      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddbe:	231f      	movs	r3, #31
 800ddc0:	18fb      	adds	r3, r7, r3
 800ddc2:	2208      	movs	r2, #8
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	e026      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddc8:	231f      	movs	r3, #31
 800ddca:	18fb      	adds	r3, r7, r3
 800ddcc:	2210      	movs	r2, #16
 800ddce:	701a      	strb	r2, [r3, #0]
 800ddd0:	e021      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a71      	ldr	r2, [pc, #452]	; (800df9c <UART_SetConfig+0x2a0>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d104      	bne.n	800dde6 <UART_SetConfig+0xea>
 800dddc:	231f      	movs	r3, #31
 800ddde:	18fb      	adds	r3, r7, r3
 800dde0:	2200      	movs	r2, #0
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	e017      	b.n	800de16 <UART_SetConfig+0x11a>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a6d      	ldr	r2, [pc, #436]	; (800dfa0 <UART_SetConfig+0x2a4>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d104      	bne.n	800ddfa <UART_SetConfig+0xfe>
 800ddf0:	231f      	movs	r3, #31
 800ddf2:	18fb      	adds	r3, r7, r3
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	e00d      	b.n	800de16 <UART_SetConfig+0x11a>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a69      	ldr	r2, [pc, #420]	; (800dfa4 <UART_SetConfig+0x2a8>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d104      	bne.n	800de0e <UART_SetConfig+0x112>
 800de04:	231f      	movs	r3, #31
 800de06:	18fb      	adds	r3, r7, r3
 800de08:	2200      	movs	r2, #0
 800de0a:	701a      	strb	r2, [r3, #0]
 800de0c:	e003      	b.n	800de16 <UART_SetConfig+0x11a>
 800de0e:	231f      	movs	r3, #31
 800de10:	18fb      	adds	r3, r7, r3
 800de12:	2210      	movs	r2, #16
 800de14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69da      	ldr	r2, [r3, #28]
 800de1a:	2380      	movs	r3, #128	; 0x80
 800de1c:	021b      	lsls	r3, r3, #8
 800de1e:	429a      	cmp	r2, r3
 800de20:	d15d      	bne.n	800dede <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800de22:	231f      	movs	r3, #31
 800de24:	18fb      	adds	r3, r7, r3
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d015      	beq.n	800de58 <UART_SetConfig+0x15c>
 800de2c:	dc18      	bgt.n	800de60 <UART_SetConfig+0x164>
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d00d      	beq.n	800de4e <UART_SetConfig+0x152>
 800de32:	dc15      	bgt.n	800de60 <UART_SetConfig+0x164>
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <UART_SetConfig+0x142>
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d005      	beq.n	800de48 <UART_SetConfig+0x14c>
 800de3c:	e010      	b.n	800de60 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de3e:	f7fd f97d 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 800de42:	0003      	movs	r3, r0
 800de44:	61bb      	str	r3, [r7, #24]
        break;
 800de46:	e012      	b.n	800de6e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de48:	4b57      	ldr	r3, [pc, #348]	; (800dfa8 <UART_SetConfig+0x2ac>)
 800de4a:	61bb      	str	r3, [r7, #24]
        break;
 800de4c:	e00f      	b.n	800de6e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de4e:	f7fd f903 	bl	800b058 <HAL_RCC_GetSysClockFreq>
 800de52:	0003      	movs	r3, r0
 800de54:	61bb      	str	r3, [r7, #24]
        break;
 800de56:	e00a      	b.n	800de6e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de58:	2380      	movs	r3, #128	; 0x80
 800de5a:	021b      	lsls	r3, r3, #8
 800de5c:	61bb      	str	r3, [r7, #24]
        break;
 800de5e:	e006      	b.n	800de6e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800de60:	2300      	movs	r3, #0
 800de62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800de64:	231e      	movs	r3, #30
 800de66:	18fb      	adds	r3, r7, r3
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
        break;
 800de6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de6e:	69bb      	ldr	r3, [r7, #24]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d100      	bne.n	800de76 <UART_SetConfig+0x17a>
 800de74:	e07b      	b.n	800df6e <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	005a      	lsls	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	085b      	lsrs	r3, r3, #1
 800de80:	18d2      	adds	r2, r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	0019      	movs	r1, r3
 800de88:	0010      	movs	r0, r2
 800de8a:	f7f2 f959 	bl	8000140 <__udivsi3>
 800de8e:	0003      	movs	r3, r0
 800de90:	b29b      	uxth	r3, r3
 800de92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	2b0f      	cmp	r3, #15
 800de98:	d91c      	bls.n	800ded4 <UART_SetConfig+0x1d8>
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	2380      	movs	r3, #128	; 0x80
 800de9e:	025b      	lsls	r3, r3, #9
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d217      	bcs.n	800ded4 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	200e      	movs	r0, #14
 800deaa:	183b      	adds	r3, r7, r0
 800deac:	210f      	movs	r1, #15
 800deae:	438a      	bics	r2, r1
 800deb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	2207      	movs	r2, #7
 800deba:	4013      	ands	r3, r2
 800debc:	b299      	uxth	r1, r3
 800debe:	183b      	adds	r3, r7, r0
 800dec0:	183a      	adds	r2, r7, r0
 800dec2:	8812      	ldrh	r2, [r2, #0]
 800dec4:	430a      	orrs	r2, r1
 800dec6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	183a      	adds	r2, r7, r0
 800dece:	8812      	ldrh	r2, [r2, #0]
 800ded0:	60da      	str	r2, [r3, #12]
 800ded2:	e04c      	b.n	800df6e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800ded4:	231e      	movs	r3, #30
 800ded6:	18fb      	adds	r3, r7, r3
 800ded8:	2201      	movs	r2, #1
 800deda:	701a      	strb	r2, [r3, #0]
 800dedc:	e047      	b.n	800df6e <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dede:	231f      	movs	r3, #31
 800dee0:	18fb      	adds	r3, r7, r3
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b08      	cmp	r3, #8
 800dee6:	d015      	beq.n	800df14 <UART_SetConfig+0x218>
 800dee8:	dc18      	bgt.n	800df1c <UART_SetConfig+0x220>
 800deea:	2b04      	cmp	r3, #4
 800deec:	d00d      	beq.n	800df0a <UART_SetConfig+0x20e>
 800deee:	dc15      	bgt.n	800df1c <UART_SetConfig+0x220>
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <UART_SetConfig+0x1fe>
 800def4:	2b02      	cmp	r3, #2
 800def6:	d005      	beq.n	800df04 <UART_SetConfig+0x208>
 800def8:	e010      	b.n	800df1c <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800defa:	f7fd f91f 	bl	800b13c <HAL_RCC_GetPCLK1Freq>
 800defe:	0003      	movs	r3, r0
 800df00:	61bb      	str	r3, [r7, #24]
        break;
 800df02:	e012      	b.n	800df2a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800df04:	4b28      	ldr	r3, [pc, #160]	; (800dfa8 <UART_SetConfig+0x2ac>)
 800df06:	61bb      	str	r3, [r7, #24]
        break;
 800df08:	e00f      	b.n	800df2a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800df0a:	f7fd f8a5 	bl	800b058 <HAL_RCC_GetSysClockFreq>
 800df0e:	0003      	movs	r3, r0
 800df10:	61bb      	str	r3, [r7, #24]
        break;
 800df12:	e00a      	b.n	800df2a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df14:	2380      	movs	r3, #128	; 0x80
 800df16:	021b      	lsls	r3, r3, #8
 800df18:	61bb      	str	r3, [r7, #24]
        break;
 800df1a:	e006      	b.n	800df2a <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 800df1c:	2300      	movs	r3, #0
 800df1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800df20:	231e      	movs	r3, #30
 800df22:	18fb      	adds	r3, r7, r3
 800df24:	2201      	movs	r2, #1
 800df26:	701a      	strb	r2, [r3, #0]
        break;
 800df28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d01e      	beq.n	800df6e <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	085a      	lsrs	r2, r3, #1
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	18d2      	adds	r2, r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	0019      	movs	r1, r3
 800df40:	0010      	movs	r0, r2
 800df42:	f7f2 f8fd 	bl	8000140 <__udivsi3>
 800df46:	0003      	movs	r3, r0
 800df48:	b29b      	uxth	r3, r3
 800df4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2b0f      	cmp	r3, #15
 800df50:	d909      	bls.n	800df66 <UART_SetConfig+0x26a>
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	2380      	movs	r3, #128	; 0x80
 800df56:	025b      	lsls	r3, r3, #9
 800df58:	429a      	cmp	r2, r3
 800df5a:	d204      	bcs.n	800df66 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	693a      	ldr	r2, [r7, #16]
 800df62:	60da      	str	r2, [r3, #12]
 800df64:	e003      	b.n	800df6e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800df66:	231e      	movs	r3, #30
 800df68:	18fb      	adds	r3, r7, r3
 800df6a:	2201      	movs	r2, #1
 800df6c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800df7a:	231e      	movs	r3, #30
 800df7c:	18fb      	adds	r3, r7, r3
 800df7e:	781b      	ldrb	r3, [r3, #0]
}
 800df80:	0018      	movs	r0, r3
 800df82:	46bd      	mov	sp, r7
 800df84:	b008      	add	sp, #32
 800df86:	bd80      	pop	{r7, pc}
 800df88:	efff69f3 	.word	0xefff69f3
 800df8c:	ffffcfff 	.word	0xffffcfff
 800df90:	fffff4ff 	.word	0xfffff4ff
 800df94:	40013800 	.word	0x40013800
 800df98:	40021000 	.word	0x40021000
 800df9c:	40004400 	.word	0x40004400
 800dfa0:	40004800 	.word	0x40004800
 800dfa4:	40004c00 	.word	0x40004c00
 800dfa8:	007a1200 	.word	0x007a1200

0800dfac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	2201      	movs	r2, #1
 800dfba:	4013      	ands	r3, r2
 800dfbc:	d00b      	beq.n	800dfd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	4a4a      	ldr	r2, [pc, #296]	; (800e0f0 <UART_AdvFeatureConfig+0x144>)
 800dfc6:	4013      	ands	r3, r2
 800dfc8:	0019      	movs	r1, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	430a      	orrs	r2, r1
 800dfd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfda:	2202      	movs	r2, #2
 800dfdc:	4013      	ands	r3, r2
 800dfde:	d00b      	beq.n	800dff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	4a43      	ldr	r2, [pc, #268]	; (800e0f4 <UART_AdvFeatureConfig+0x148>)
 800dfe8:	4013      	ands	r3, r2
 800dfea:	0019      	movs	r1, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffc:	2204      	movs	r2, #4
 800dffe:	4013      	ands	r3, r2
 800e000:	d00b      	beq.n	800e01a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	4a3b      	ldr	r2, [pc, #236]	; (800e0f8 <UART_AdvFeatureConfig+0x14c>)
 800e00a:	4013      	ands	r3, r2
 800e00c:	0019      	movs	r1, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	430a      	orrs	r2, r1
 800e018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2208      	movs	r2, #8
 800e020:	4013      	ands	r3, r2
 800e022:	d00b      	beq.n	800e03c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	4a34      	ldr	r2, [pc, #208]	; (800e0fc <UART_AdvFeatureConfig+0x150>)
 800e02c:	4013      	ands	r3, r2
 800e02e:	0019      	movs	r1, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	430a      	orrs	r2, r1
 800e03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e040:	2210      	movs	r2, #16
 800e042:	4013      	ands	r3, r2
 800e044:	d00b      	beq.n	800e05e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	4a2c      	ldr	r2, [pc, #176]	; (800e100 <UART_AdvFeatureConfig+0x154>)
 800e04e:	4013      	ands	r3, r2
 800e050:	0019      	movs	r1, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	2220      	movs	r2, #32
 800e064:	4013      	ands	r3, r2
 800e066:	d00b      	beq.n	800e080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	4a25      	ldr	r2, [pc, #148]	; (800e104 <UART_AdvFeatureConfig+0x158>)
 800e070:	4013      	ands	r3, r2
 800e072:	0019      	movs	r1, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e084:	2240      	movs	r2, #64	; 0x40
 800e086:	4013      	ands	r3, r2
 800e088:	d01d      	beq.n	800e0c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	4a1d      	ldr	r2, [pc, #116]	; (800e108 <UART_AdvFeatureConfig+0x15c>)
 800e092:	4013      	ands	r3, r2
 800e094:	0019      	movs	r1, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0a6:	2380      	movs	r3, #128	; 0x80
 800e0a8:	035b      	lsls	r3, r3, #13
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d10b      	bne.n	800e0c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4a15      	ldr	r2, [pc, #84]	; (800e10c <UART_AdvFeatureConfig+0x160>)
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	0019      	movs	r1, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	430a      	orrs	r2, r1
 800e0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	2280      	movs	r2, #128	; 0x80
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	d00b      	beq.n	800e0e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	4a0e      	ldr	r2, [pc, #56]	; (800e110 <UART_AdvFeatureConfig+0x164>)
 800e0d8:	4013      	ands	r3, r2
 800e0da:	0019      	movs	r1, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	605a      	str	r2, [r3, #4]
  }
}
 800e0e8:	46c0      	nop			; (mov r8, r8)
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	b002      	add	sp, #8
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	fffdffff 	.word	0xfffdffff
 800e0f4:	fffeffff 	.word	0xfffeffff
 800e0f8:	fffbffff 	.word	0xfffbffff
 800e0fc:	ffff7fff 	.word	0xffff7fff
 800e100:	ffffefff 	.word	0xffffefff
 800e104:	ffffdfff 	.word	0xffffdfff
 800e108:	ffefffff 	.word	0xffefffff
 800e10c:	ff9fffff 	.word	0xff9fffff
 800e110:	fff7ffff 	.word	0xfff7ffff

0800e114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af02      	add	r7, sp, #8
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2280      	movs	r2, #128	; 0x80
 800e120:	2100      	movs	r1, #0
 800e122:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e124:	f7fa f8fc 	bl	8008320 <HAL_GetTick>
 800e128:	0003      	movs	r3, r0
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2208      	movs	r2, #8
 800e134:	4013      	ands	r3, r2
 800e136:	2b08      	cmp	r3, #8
 800e138:	d10c      	bne.n	800e154 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2280      	movs	r2, #128	; 0x80
 800e13e:	0391      	lsls	r1, r2, #14
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	4a17      	ldr	r2, [pc, #92]	; (800e1a0 <UART_CheckIdleState+0x8c>)
 800e144:	9200      	str	r2, [sp, #0]
 800e146:	2200      	movs	r2, #0
 800e148:	f000 f82c 	bl	800e1a4 <UART_WaitOnFlagUntilTimeout>
 800e14c:	1e03      	subs	r3, r0, #0
 800e14e:	d001      	beq.n	800e154 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e150:	2303      	movs	r3, #3
 800e152:	e021      	b.n	800e198 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2204      	movs	r2, #4
 800e15c:	4013      	ands	r3, r2
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d10c      	bne.n	800e17c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2280      	movs	r2, #128	; 0x80
 800e166:	03d1      	lsls	r1, r2, #15
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	4a0d      	ldr	r2, [pc, #52]	; (800e1a0 <UART_CheckIdleState+0x8c>)
 800e16c:	9200      	str	r2, [sp, #0]
 800e16e:	2200      	movs	r2, #0
 800e170:	f000 f818 	bl	800e1a4 <UART_WaitOnFlagUntilTimeout>
 800e174:	1e03      	subs	r3, r0, #0
 800e176:	d001      	beq.n	800e17c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e178:	2303      	movs	r3, #3
 800e17a:	e00d      	b.n	800e198 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2220      	movs	r2, #32
 800e180:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2220      	movs	r2, #32
 800e186:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2274      	movs	r2, #116	; 0x74
 800e192:	2100      	movs	r1, #0
 800e194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	0018      	movs	r0, r3
 800e19a:	46bd      	mov	sp, r7
 800e19c:	b004      	add	sp, #16
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	01ffffff 	.word	0x01ffffff

0800e1a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	1dfb      	adds	r3, r7, #7
 800e1b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1b4:	e05e      	b.n	800e274 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	d05b      	beq.n	800e274 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1bc:	f7fa f8b0 	bl	8008320 <HAL_GetTick>
 800e1c0:	0002      	movs	r2, r0
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	69ba      	ldr	r2, [r7, #24]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d302      	bcc.n	800e1d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d11b      	bne.n	800e20a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	492f      	ldr	r1, [pc, #188]	; (800e29c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800e1de:	400a      	ands	r2, r1
 800e1e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	438a      	bics	r2, r1
 800e1f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2220      	movs	r2, #32
 800e1f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2220      	movs	r2, #32
 800e1fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2274      	movs	r2, #116	; 0x74
 800e202:	2100      	movs	r1, #0
 800e204:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e044      	b.n	800e294 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2204      	movs	r2, #4
 800e212:	4013      	ands	r3, r2
 800e214:	d02e      	beq.n	800e274 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	69da      	ldr	r2, [r3, #28]
 800e21c:	2380      	movs	r3, #128	; 0x80
 800e21e:	011b      	lsls	r3, r3, #4
 800e220:	401a      	ands	r2, r3
 800e222:	2380      	movs	r3, #128	; 0x80
 800e224:	011b      	lsls	r3, r3, #4
 800e226:	429a      	cmp	r2, r3
 800e228:	d124      	bne.n	800e274 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2280      	movs	r2, #128	; 0x80
 800e230:	0112      	lsls	r2, r2, #4
 800e232:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4917      	ldr	r1, [pc, #92]	; (800e29c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800e240:	400a      	ands	r2, r1
 800e242:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	689a      	ldr	r2, [r3, #8]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2101      	movs	r1, #1
 800e250:	438a      	bics	r2, r1
 800e252:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2220      	movs	r2, #32
 800e258:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2220      	movs	r2, #32
 800e25e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2280      	movs	r2, #128	; 0x80
 800e264:	2120      	movs	r1, #32
 800e266:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2274      	movs	r2, #116	; 0x74
 800e26c:	2100      	movs	r1, #0
 800e26e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e270:	2303      	movs	r3, #3
 800e272:	e00f      	b.n	800e294 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	69db      	ldr	r3, [r3, #28]
 800e27a:	68ba      	ldr	r2, [r7, #8]
 800e27c:	4013      	ands	r3, r2
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	1ad3      	subs	r3, r2, r3
 800e282:	425a      	negs	r2, r3
 800e284:	4153      	adcs	r3, r2
 800e286:	b2db      	uxtb	r3, r3
 800e288:	001a      	movs	r2, r3
 800e28a:	1dfb      	adds	r3, r7, #7
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d091      	beq.n	800e1b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	0018      	movs	r0, r3
 800e296:	46bd      	mov	sp, r7
 800e298:	b004      	add	sp, #16
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	fffffe5f 	.word	0xfffffe5f

0800e2a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	1dbb      	adds	r3, r7, #6
 800e2ac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	68ba      	ldr	r2, [r7, #8]
 800e2b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	1dba      	adds	r2, r7, #6
 800e2b8:	2158      	movs	r1, #88	; 0x58
 800e2ba:	8812      	ldrh	r2, [r2, #0]
 800e2bc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	1dba      	adds	r2, r7, #6
 800e2c2:	215a      	movs	r1, #90	; 0x5a
 800e2c4:	8812      	ldrh	r2, [r2, #0]
 800e2c6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	689a      	ldr	r2, [r3, #8]
 800e2d2:	2380      	movs	r3, #128	; 0x80
 800e2d4:	015b      	lsls	r3, r3, #5
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d10d      	bne.n	800e2f6 <UART_Start_Receive_IT+0x56>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d104      	bne.n	800e2ec <UART_Start_Receive_IT+0x4c>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	225c      	movs	r2, #92	; 0x5c
 800e2e6:	4932      	ldr	r1, [pc, #200]	; (800e3b0 <UART_Start_Receive_IT+0x110>)
 800e2e8:	5299      	strh	r1, [r3, r2]
 800e2ea:	e02e      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	225c      	movs	r2, #92	; 0x5c
 800e2f0:	21ff      	movs	r1, #255	; 0xff
 800e2f2:	5299      	strh	r1, [r3, r2]
 800e2f4:	e029      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10d      	bne.n	800e31a <UART_Start_Receive_IT+0x7a>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d104      	bne.n	800e310 <UART_Start_Receive_IT+0x70>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	225c      	movs	r2, #92	; 0x5c
 800e30a:	21ff      	movs	r1, #255	; 0xff
 800e30c:	5299      	strh	r1, [r3, r2]
 800e30e:	e01c      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	225c      	movs	r2, #92	; 0x5c
 800e314:	217f      	movs	r1, #127	; 0x7f
 800e316:	5299      	strh	r1, [r3, r2]
 800e318:	e017      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	689a      	ldr	r2, [r3, #8]
 800e31e:	2380      	movs	r3, #128	; 0x80
 800e320:	055b      	lsls	r3, r3, #21
 800e322:	429a      	cmp	r2, r3
 800e324:	d10d      	bne.n	800e342 <UART_Start_Receive_IT+0xa2>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d104      	bne.n	800e338 <UART_Start_Receive_IT+0x98>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	225c      	movs	r2, #92	; 0x5c
 800e332:	217f      	movs	r1, #127	; 0x7f
 800e334:	5299      	strh	r1, [r3, r2]
 800e336:	e008      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	225c      	movs	r2, #92	; 0x5c
 800e33c:	213f      	movs	r1, #63	; 0x3f
 800e33e:	5299      	strh	r1, [r3, r2]
 800e340:	e003      	b.n	800e34a <UART_Start_Receive_IT+0xaa>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	225c      	movs	r2, #92	; 0x5c
 800e346:	2100      	movs	r1, #0
 800e348:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2280      	movs	r2, #128	; 0x80
 800e34e:	2100      	movs	r1, #0
 800e350:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2222      	movs	r2, #34	; 0x22
 800e356:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2101      	movs	r1, #1
 800e364:	430a      	orrs	r2, r1
 800e366:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	689a      	ldr	r2, [r3, #8]
 800e36c:	2380      	movs	r3, #128	; 0x80
 800e36e:	015b      	lsls	r3, r3, #5
 800e370:	429a      	cmp	r2, r3
 800e372:	d107      	bne.n	800e384 <UART_Start_Receive_IT+0xe4>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d103      	bne.n	800e384 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4a0d      	ldr	r2, [pc, #52]	; (800e3b4 <UART_Start_Receive_IT+0x114>)
 800e380:	665a      	str	r2, [r3, #100]	; 0x64
 800e382:	e002      	b.n	800e38a <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	4a0c      	ldr	r2, [pc, #48]	; (800e3b8 <UART_Start_Receive_IT+0x118>)
 800e388:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2274      	movs	r2, #116	; 0x74
 800e38e:	2100      	movs	r1, #0
 800e390:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2190      	movs	r1, #144	; 0x90
 800e39e:	0049      	lsls	r1, r1, #1
 800e3a0:	430a      	orrs	r2, r1
 800e3a2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	0018      	movs	r0, r3
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	b004      	add	sp, #16
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	46c0      	nop			; (mov r8, r8)
 800e3b0:	000001ff 	.word	0x000001ff
 800e3b4:	0800e651 	.word	0x0800e651
 800e3b8:	0800e569 	.word	0x0800e569

0800e3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4912      	ldr	r1, [pc, #72]	; (800e418 <UART_EndRxTransfer+0x5c>)
 800e3d0:	400a      	ands	r2, r1
 800e3d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	689a      	ldr	r2, [r3, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2101      	movs	r1, #1
 800e3e0:	438a      	bics	r2, r1
 800e3e2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d107      	bne.n	800e3fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2110      	movs	r1, #16
 800e3f8:	438a      	bics	r2, r1
 800e3fa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2220      	movs	r2, #32
 800e400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e40e:	46c0      	nop			; (mov r8, r8)
 800e410:	46bd      	mov	sp, r7
 800e412:	b002      	add	sp, #8
 800e414:	bd80      	pop	{r7, pc}
 800e416:	46c0      	nop			; (mov r8, r8)
 800e418:	fffffedf 	.word	0xfffffedf

0800e41c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	225a      	movs	r2, #90	; 0x5a
 800e42e:	2100      	movs	r1, #0
 800e430:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2252      	movs	r2, #82	; 0x52
 800e436:	2100      	movs	r1, #0
 800e438:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	0018      	movs	r0, r3
 800e43e:	f7ff fc49 	bl	800dcd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e442:	46c0      	nop			; (mov r8, r8)
 800e444:	46bd      	mov	sp, r7
 800e446:	b004      	add	sp, #16
 800e448:	bd80      	pop	{r7, pc}

0800e44a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e456:	2b21      	cmp	r3, #33	; 0x21
 800e458:	d12b      	bne.n	800e4b2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2252      	movs	r2, #82	; 0x52
 800e45e:	5a9b      	ldrh	r3, [r3, r2]
 800e460:	b29b      	uxth	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d110      	bne.n	800e488 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2180      	movs	r1, #128	; 0x80
 800e472:	438a      	bics	r2, r1
 800e474:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2140      	movs	r1, #64	; 0x40
 800e482:	430a      	orrs	r2, r1
 800e484:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e486:	e014      	b.n	800e4b2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e48c:	781a      	ldrb	r2, [r3, #0]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	b292      	uxth	r2, r2
 800e494:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2252      	movs	r2, #82	; 0x52
 800e4a4:	5a9b      	ldrh	r3, [r3, r2]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	b299      	uxth	r1, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2252      	movs	r2, #82	; 0x52
 800e4b0:	5299      	strh	r1, [r3, r2]
}
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	b002      	add	sp, #8
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b084      	sub	sp, #16
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c6:	2b21      	cmp	r3, #33	; 0x21
 800e4c8:	d12f      	bne.n	800e52a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2252      	movs	r2, #82	; 0x52
 800e4ce:	5a9b      	ldrh	r3, [r3, r2]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d110      	bne.n	800e4f8 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681a      	ldr	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2180      	movs	r1, #128	; 0x80
 800e4e2:	438a      	bics	r2, r1
 800e4e4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2140      	movs	r1, #64	; 0x40
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e4f6:	e018      	b.n	800e52a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	881a      	ldrh	r2, [r3, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	05d2      	lsls	r2, r2, #23
 800e508:	0dd2      	lsrs	r2, r2, #23
 800e50a:	b292      	uxth	r2, r2
 800e50c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e512:	1c9a      	adds	r2, r3, #2
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2252      	movs	r2, #82	; 0x52
 800e51c:	5a9b      	ldrh	r3, [r3, r2]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	3b01      	subs	r3, #1
 800e522:	b299      	uxth	r1, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2252      	movs	r2, #82	; 0x52
 800e528:	5299      	strh	r1, [r3, r2]
}
 800e52a:	46c0      	nop			; (mov r8, r8)
 800e52c:	46bd      	mov	sp, r7
 800e52e:	b004      	add	sp, #16
 800e530:	bd80      	pop	{r7, pc}

0800e532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2140      	movs	r1, #64	; 0x40
 800e546:	438a      	bics	r2, r1
 800e548:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2220      	movs	r2, #32
 800e54e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	0018      	movs	r0, r3
 800e55a:	f7ff fbb3 	bl	800dcc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e55e:	46c0      	nop			; (mov r8, r8)
 800e560:	46bd      	mov	sp, r7
 800e562:	b002      	add	sp, #8
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e570:	200e      	movs	r0, #14
 800e572:	183b      	adds	r3, r7, r0
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	215c      	movs	r1, #92	; 0x5c
 800e578:	5a52      	ldrh	r2, [r2, r1]
 800e57a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e580:	2b22      	cmp	r3, #34	; 0x22
 800e582:	d157      	bne.n	800e634 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	210c      	movs	r1, #12
 800e58a:	187b      	adds	r3, r7, r1
 800e58c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e58e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e590:	187b      	adds	r3, r7, r1
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	b2da      	uxtb	r2, r3
 800e596:	183b      	adds	r3, r7, r0
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	b2d9      	uxtb	r1, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a0:	400a      	ands	r2, r1
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	225a      	movs	r2, #90	; 0x5a
 800e5b4:	5a9b      	ldrh	r3, [r3, r2]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b299      	uxth	r1, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	225a      	movs	r2, #90	; 0x5a
 800e5c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	225a      	movs	r2, #90	; 0x5a
 800e5c6:	5a9b      	ldrh	r3, [r3, r2]
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d13a      	bne.n	800e644 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	491c      	ldr	r1, [pc, #112]	; (800e64c <UART_RxISR_8BIT+0xe4>)
 800e5da:	400a      	ands	r2, r1
 800e5dc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	689a      	ldr	r2, [r3, #8]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	438a      	bics	r2, r1
 800e5ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2220      	movs	r2, #32
 800e5f2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d110      	bne.n	800e624 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2110      	movs	r1, #16
 800e60e:	438a      	bics	r2, r1
 800e610:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2258      	movs	r2, #88	; 0x58
 800e616:	5a9a      	ldrh	r2, [r3, r2]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	0011      	movs	r1, r2
 800e61c:	0018      	movs	r0, r3
 800e61e:	f7ff fb61 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
 800e622:	e003      	b.n	800e62c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	0018      	movs	r0, r3
 800e628:	f7f1 ff3a 	bl	80004a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e632:	e007      	b.n	800e644 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	699a      	ldr	r2, [r3, #24]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2108      	movs	r1, #8
 800e640:	430a      	orrs	r2, r1
 800e642:	619a      	str	r2, [r3, #24]
}
 800e644:	46c0      	nop			; (mov r8, r8)
 800e646:	46bd      	mov	sp, r7
 800e648:	b004      	add	sp, #16
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	fffffedf 	.word	0xfffffedf

0800e650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e658:	200e      	movs	r0, #14
 800e65a:	183b      	adds	r3, r7, r0
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	215c      	movs	r1, #92	; 0x5c
 800e660:	5a52      	ldrh	r2, [r2, r1]
 800e662:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e668:	2b22      	cmp	r3, #34	; 0x22
 800e66a:	d157      	bne.n	800e71c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	210c      	movs	r1, #12
 800e672:	187b      	adds	r3, r7, r1
 800e674:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800e676:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e67c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e67e:	187b      	adds	r3, r7, r1
 800e680:	183a      	adds	r2, r7, r0
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	8812      	ldrh	r2, [r2, #0]
 800e686:	4013      	ands	r3, r2
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e692:	1c9a      	adds	r2, r3, #2
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	225a      	movs	r2, #90	; 0x5a
 800e69c:	5a9b      	ldrh	r3, [r3, r2]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	b299      	uxth	r1, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	225a      	movs	r2, #90	; 0x5a
 800e6a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	225a      	movs	r2, #90	; 0x5a
 800e6ae:	5a9b      	ldrh	r3, [r3, r2]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d13a      	bne.n	800e72c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	491c      	ldr	r1, [pc, #112]	; (800e734 <UART_RxISR_16BIT+0xe4>)
 800e6c2:	400a      	ands	r2, r1
 800e6c4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	689a      	ldr	r2, [r3, #8]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	438a      	bics	r2, r1
 800e6d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2220      	movs	r2, #32
 800e6da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d110      	bne.n	800e70c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2110      	movs	r1, #16
 800e6f6:	438a      	bics	r2, r1
 800e6f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2258      	movs	r2, #88	; 0x58
 800e6fe:	5a9a      	ldrh	r2, [r3, r2]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	0011      	movs	r1, r2
 800e704:	0018      	movs	r0, r3
 800e706:	f7ff faed 	bl	800dce4 <HAL_UARTEx_RxEventCallback>
 800e70a:	e003      	b.n	800e714 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	0018      	movs	r0, r3
 800e710:	f7f1 fec6 	bl	80004a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2200      	movs	r2, #0
 800e718:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e71a:	e007      	b.n	800e72c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	699a      	ldr	r2, [r3, #24]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2108      	movs	r1, #8
 800e728:	430a      	orrs	r2, r1
 800e72a:	619a      	str	r2, [r3, #24]
}
 800e72c:	46c0      	nop			; (mov r8, r8)
 800e72e:	46bd      	mov	sp, r7
 800e730:	b004      	add	sp, #16
 800e732:	bd80      	pop	{r7, pc}
 800e734:	fffffedf 	.word	0xfffffedf

0800e738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2244      	movs	r2, #68	; 0x44
 800e744:	2100      	movs	r1, #0
 800e746:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e748:	4b05      	ldr	r3, [pc, #20]	; (800e760 <USB_EnableGlobalInt+0x28>)
 800e74a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	b299      	uxth	r1, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2240      	movs	r2, #64	; 0x40
 800e754:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e756:	2300      	movs	r3, #0
}
 800e758:	0018      	movs	r0, r3
 800e75a:	46bd      	mov	sp, r7
 800e75c:	b004      	add	sp, #16
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	0000bf80 	.word	0x0000bf80

0800e764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e76c:	4b09      	ldr	r3, [pc, #36]	; (800e794 <USB_DisableGlobalInt+0x30>)
 800e76e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2240      	movs	r2, #64	; 0x40
 800e774:	5a9b      	ldrh	r3, [r3, r2]
 800e776:	b29b      	uxth	r3, r3
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	b292      	uxth	r2, r2
 800e77c:	43d2      	mvns	r2, r2
 800e77e:	b292      	uxth	r2, r2
 800e780:	4013      	ands	r3, r2
 800e782:	b299      	uxth	r1, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2240      	movs	r2, #64	; 0x40
 800e788:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	0018      	movs	r0, r3
 800e78e:	46bd      	mov	sp, r7
 800e790:	b004      	add	sp, #16
 800e792:	bd80      	pop	{r7, pc}
 800e794:	0000bf80 	.word	0x0000bf80

0800e798 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e798:	b084      	sub	sp, #16
 800e79a:	b590      	push	{r4, r7, lr}
 800e79c:	46c6      	mov	lr, r8
 800e79e:	b500      	push	{lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	2004      	movs	r0, #4
 800e7a8:	2410      	movs	r4, #16
 800e7aa:	46a4      	mov	ip, r4
 800e7ac:	2408      	movs	r4, #8
 800e7ae:	46a0      	mov	r8, r4
 800e7b0:	44b8      	add	r8, r7
 800e7b2:	44c4      	add	ip, r8
 800e7b4:	4460      	add	r0, ip
 800e7b6:	6001      	str	r1, [r0, #0]
 800e7b8:	6042      	str	r2, [r0, #4]
 800e7ba:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2240      	movs	r2, #64	; 0x40
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2240      	movs	r2, #64	; 0x40
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2244      	movs	r2, #68	; 0x44
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2250      	movs	r2, #80	; 0x50
 800e7d8:	2100      	movs	r1, #0
 800e7da:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	0018      	movs	r0, r3
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	b002      	add	sp, #8
 800e7e4:	bc80      	pop	{r7}
 800e7e6:	46b8      	mov	r8, r7
 800e7e8:	bc90      	pop	{r4, r7}
 800e7ea:	bc08      	pop	{r3}
 800e7ec:	b004      	add	sp, #16
 800e7ee:	4718      	bx	r3

0800e7f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b09a      	sub	sp, #104	; 0x68
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e7fa:	2367      	movs	r3, #103	; 0x67
 800e7fc:	18fb      	adds	r3, r7, r3
 800e7fe:	2200      	movs	r2, #0
 800e800:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	18d3      	adds	r3, r2, r3
 800e80c:	881b      	ldrh	r3, [r3, #0]
 800e80e:	b29a      	uxth	r2, r3
 800e810:	2364      	movs	r3, #100	; 0x64
 800e812:	18fb      	adds	r3, r7, r3
 800e814:	49cf      	ldr	r1, [pc, #828]	; (800eb54 <USB_ActivateEndpoint+0x364>)
 800e816:	400a      	ands	r2, r1
 800e818:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	78db      	ldrb	r3, [r3, #3]
 800e81e:	2b03      	cmp	r3, #3
 800e820:	d017      	beq.n	800e852 <USB_ActivateEndpoint+0x62>
 800e822:	dc28      	bgt.n	800e876 <USB_ActivateEndpoint+0x86>
 800e824:	2b02      	cmp	r3, #2
 800e826:	d00e      	beq.n	800e846 <USB_ActivateEndpoint+0x56>
 800e828:	dc25      	bgt.n	800e876 <USB_ActivateEndpoint+0x86>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d002      	beq.n	800e834 <USB_ActivateEndpoint+0x44>
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d018      	beq.n	800e864 <USB_ActivateEndpoint+0x74>
 800e832:	e020      	b.n	800e876 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e834:	2264      	movs	r2, #100	; 0x64
 800e836:	18bb      	adds	r3, r7, r2
 800e838:	18ba      	adds	r2, r7, r2
 800e83a:	8812      	ldrh	r2, [r2, #0]
 800e83c:	2180      	movs	r1, #128	; 0x80
 800e83e:	0089      	lsls	r1, r1, #2
 800e840:	430a      	orrs	r2, r1
 800e842:	801a      	strh	r2, [r3, #0]
      break;
 800e844:	e01c      	b.n	800e880 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800e846:	2264      	movs	r2, #100	; 0x64
 800e848:	18bb      	adds	r3, r7, r2
 800e84a:	18ba      	adds	r2, r7, r2
 800e84c:	8812      	ldrh	r2, [r2, #0]
 800e84e:	801a      	strh	r2, [r3, #0]
      break;
 800e850:	e016      	b.n	800e880 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e852:	2264      	movs	r2, #100	; 0x64
 800e854:	18bb      	adds	r3, r7, r2
 800e856:	18ba      	adds	r2, r7, r2
 800e858:	8812      	ldrh	r2, [r2, #0]
 800e85a:	21c0      	movs	r1, #192	; 0xc0
 800e85c:	00c9      	lsls	r1, r1, #3
 800e85e:	430a      	orrs	r2, r1
 800e860:	801a      	strh	r2, [r3, #0]
      break;
 800e862:	e00d      	b.n	800e880 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e864:	2264      	movs	r2, #100	; 0x64
 800e866:	18bb      	adds	r3, r7, r2
 800e868:	18ba      	adds	r2, r7, r2
 800e86a:	8812      	ldrh	r2, [r2, #0]
 800e86c:	2180      	movs	r1, #128	; 0x80
 800e86e:	00c9      	lsls	r1, r1, #3
 800e870:	430a      	orrs	r2, r1
 800e872:	801a      	strh	r2, [r3, #0]
      break;
 800e874:	e004      	b.n	800e880 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800e876:	2367      	movs	r3, #103	; 0x67
 800e878:	18fb      	adds	r3, r7, r3
 800e87a:	2201      	movs	r2, #1
 800e87c:	701a      	strb	r2, [r3, #0]
      break;
 800e87e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	18d3      	adds	r3, r2, r3
 800e88a:	2264      	movs	r2, #100	; 0x64
 800e88c:	18ba      	adds	r2, r7, r2
 800e88e:	8812      	ldrh	r2, [r2, #0]
 800e890:	49b1      	ldr	r1, [pc, #708]	; (800eb58 <USB_ActivateEndpoint+0x368>)
 800e892:	430a      	orrs	r2, r1
 800e894:	b292      	uxth	r2, r2
 800e896:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	18d3      	adds	r3, r2, r3
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	b21b      	sxth	r3, r3
 800e8a8:	4aac      	ldr	r2, [pc, #688]	; (800eb5c <USB_ActivateEndpoint+0x36c>)
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	b21a      	sxth	r2, r3
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	b21b      	sxth	r3, r3
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	b21a      	sxth	r2, r3
 800e8b8:	215e      	movs	r1, #94	; 0x5e
 800e8ba:	187b      	adds	r3, r7, r1
 800e8bc:	801a      	strh	r2, [r3, #0]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	18d3      	adds	r3, r2, r3
 800e8c8:	187a      	adds	r2, r7, r1
 800e8ca:	8812      	ldrh	r2, [r2, #0]
 800e8cc:	49a2      	ldr	r1, [pc, #648]	; (800eb58 <USB_ActivateEndpoint+0x368>)
 800e8ce:	430a      	orrs	r2, r1
 800e8d0:	b292      	uxth	r2, r2
 800e8d2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	7b1b      	ldrb	r3, [r3, #12]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d000      	beq.n	800e8de <USB_ActivateEndpoint+0xee>
 800e8dc:	e150      	b.n	800eb80 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	785b      	ldrb	r3, [r3, #1]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d100      	bne.n	800e8e8 <USB_ActivateEndpoint+0xf8>
 800e8e6:	e07a      	b.n	800e9de <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	617b      	str	r3, [r7, #20]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2250      	movs	r2, #80	; 0x50
 800e8f0:	5a9b      	ldrh	r3, [r3, r2]
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	001a      	movs	r2, r3
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	189b      	adds	r3, r3, r2
 800e8fa:	617b      	str	r3, [r7, #20]
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	00da      	lsls	r2, r3, #3
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	18d3      	adds	r3, r2, r3
 800e906:	2280      	movs	r2, #128	; 0x80
 800e908:	00d2      	lsls	r2, r2, #3
 800e90a:	4694      	mov	ip, r2
 800e90c:	4463      	add	r3, ip
 800e90e:	613b      	str	r3, [r7, #16]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	88db      	ldrh	r3, [r3, #6]
 800e914:	085b      	lsrs	r3, r3, #1
 800e916:	b29b      	uxth	r3, r3
 800e918:	18db      	adds	r3, r3, r3
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	18d2      	adds	r2, r2, r3
 800e92a:	210e      	movs	r1, #14
 800e92c:	187b      	adds	r3, r7, r1
 800e92e:	8812      	ldrh	r2, [r2, #0]
 800e930:	801a      	strh	r2, [r3, #0]
 800e932:	187b      	adds	r3, r7, r1
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	2240      	movs	r2, #64	; 0x40
 800e938:	4013      	ands	r3, r2
 800e93a:	d016      	beq.n	800e96a <USB_ActivateEndpoint+0x17a>
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	18d3      	adds	r3, r2, r3
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	b29a      	uxth	r2, r3
 800e94a:	200c      	movs	r0, #12
 800e94c:	183b      	adds	r3, r7, r0
 800e94e:	4983      	ldr	r1, [pc, #524]	; (800eb5c <USB_ActivateEndpoint+0x36c>)
 800e950:	400a      	ands	r2, r1
 800e952:	801a      	strh	r2, [r3, #0]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	18d3      	adds	r3, r2, r3
 800e95e:	183a      	adds	r2, r7, r0
 800e960:	8812      	ldrh	r2, [r2, #0]
 800e962:	497f      	ldr	r1, [pc, #508]	; (800eb60 <USB_ActivateEndpoint+0x370>)
 800e964:	430a      	orrs	r2, r1
 800e966:	b292      	uxth	r2, r2
 800e968:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	78db      	ldrb	r3, [r3, #3]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d01d      	beq.n	800e9ae <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	18d3      	adds	r3, r2, r3
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	2008      	movs	r0, #8
 800e982:	183b      	adds	r3, r7, r0
 800e984:	4977      	ldr	r1, [pc, #476]	; (800eb64 <USB_ActivateEndpoint+0x374>)
 800e986:	400a      	ands	r2, r1
 800e988:	801a      	strh	r2, [r3, #0]
 800e98a:	183b      	adds	r3, r7, r0
 800e98c:	183a      	adds	r2, r7, r0
 800e98e:	8812      	ldrh	r2, [r2, #0]
 800e990:	2120      	movs	r1, #32
 800e992:	404a      	eors	r2, r1
 800e994:	801a      	strh	r2, [r3, #0]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	18d3      	adds	r3, r2, r3
 800e9a0:	183a      	adds	r2, r7, r0
 800e9a2:	8812      	ldrh	r2, [r2, #0]
 800e9a4:	496c      	ldr	r1, [pc, #432]	; (800eb58 <USB_ActivateEndpoint+0x368>)
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	b292      	uxth	r2, r2
 800e9aa:	801a      	strh	r2, [r3, #0]
 800e9ac:	e25e      	b.n	800ee6c <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	18d3      	adds	r3, r2, r3
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	b29a      	uxth	r2, r3
 800e9bc:	200a      	movs	r0, #10
 800e9be:	183b      	adds	r3, r7, r0
 800e9c0:	4968      	ldr	r1, [pc, #416]	; (800eb64 <USB_ActivateEndpoint+0x374>)
 800e9c2:	400a      	ands	r2, r1
 800e9c4:	801a      	strh	r2, [r3, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	18d3      	adds	r3, r2, r3
 800e9d0:	183a      	adds	r2, r7, r0
 800e9d2:	8812      	ldrh	r2, [r2, #0]
 800e9d4:	4960      	ldr	r1, [pc, #384]	; (800eb58 <USB_ActivateEndpoint+0x368>)
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	b292      	uxth	r2, r2
 800e9da:	801a      	strh	r2, [r3, #0]
 800e9dc:	e246      	b.n	800ee6c <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2250      	movs	r2, #80	; 0x50
 800e9e6:	5a9b      	ldrh	r3, [r3, r2]
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	001a      	movs	r2, r3
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	189b      	adds	r3, r3, r2
 800e9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	00da      	lsls	r2, r3, #3
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	18d3      	adds	r3, r2, r3
 800e9fc:	4a5a      	ldr	r2, [pc, #360]	; (800eb68 <USB_ActivateEndpoint+0x378>)
 800e9fe:	4694      	mov	ip, r2
 800ea00:	4463      	add	r3, ip
 800ea02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	88db      	ldrh	r3, [r3, #6]
 800ea08:	085b      	lsrs	r3, r3, #1
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	18db      	adds	r3, r3, r3
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	627b      	str	r3, [r7, #36]	; 0x24
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2250      	movs	r2, #80	; 0x50
 800ea1c:	5a9b      	ldrh	r3, [r3, r2]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	001a      	movs	r2, r3
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	189b      	adds	r3, r3, r2
 800ea26:	627b      	str	r3, [r7, #36]	; 0x24
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	00da      	lsls	r2, r3, #3
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	18d3      	adds	r3, r2, r3
 800ea32:	4a4e      	ldr	r2, [pc, #312]	; (800eb6c <USB_ActivateEndpoint+0x37c>)
 800ea34:	4694      	mov	ip, r2
 800ea36:	4463      	add	r3, ip
 800ea38:	623b      	str	r3, [r7, #32]
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d110      	bne.n	800ea64 <USB_ActivateEndpoint+0x274>
 800ea42:	6a3b      	ldr	r3, [r7, #32]
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	4a49      	ldr	r2, [pc, #292]	; (800eb70 <USB_ActivateEndpoint+0x380>)
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	6a3b      	ldr	r3, [r7, #32]
 800ea50:	801a      	strh	r2, [r3, #0]
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	4a46      	ldr	r2, [pc, #280]	; (800eb74 <USB_ActivateEndpoint+0x384>)
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	b29a      	uxth	r2, r3
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	801a      	strh	r2, [r3, #0]
 800ea62:	e02b      	b.n	800eabc <USB_ActivateEndpoint+0x2cc>
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	2b3e      	cmp	r3, #62	; 0x3e
 800ea6a:	d812      	bhi.n	800ea92 <USB_ActivateEndpoint+0x2a2>
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	085b      	lsrs	r3, r3, #1
 800ea72:	663b      	str	r3, [r7, #96]	; 0x60
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	d002      	beq.n	800ea84 <USB_ActivateEndpoint+0x294>
 800ea7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea80:	3301      	adds	r3, #1
 800ea82:	663b      	str	r3, [r7, #96]	; 0x60
 800ea84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	029b      	lsls	r3, r3, #10
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	6a3b      	ldr	r3, [r7, #32]
 800ea8e:	801a      	strh	r2, [r3, #0]
 800ea90:	e014      	b.n	800eabc <USB_ActivateEndpoint+0x2cc>
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	095b      	lsrs	r3, r3, #5
 800ea98:	663b      	str	r3, [r7, #96]	; 0x60
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	221f      	movs	r2, #31
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	d102      	bne.n	800eaaa <USB_ActivateEndpoint+0x2ba>
 800eaa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	663b      	str	r3, [r7, #96]	; 0x60
 800eaaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	029b      	lsls	r3, r3, #10
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4a30      	ldr	r2, [pc, #192]	; (800eb74 <USB_ActivateEndpoint+0x384>)
 800eab4:	4313      	orrs	r3, r2
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	6a3b      	ldr	r3, [r7, #32]
 800eaba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	18d2      	adds	r2, r2, r3
 800eac6:	211e      	movs	r1, #30
 800eac8:	187b      	adds	r3, r7, r1
 800eaca:	8812      	ldrh	r2, [r2, #0]
 800eacc:	801a      	strh	r2, [r3, #0]
 800eace:	187b      	adds	r3, r7, r1
 800ead0:	881a      	ldrh	r2, [r3, #0]
 800ead2:	2380      	movs	r3, #128	; 0x80
 800ead4:	01db      	lsls	r3, r3, #7
 800ead6:	4013      	ands	r3, r2
 800ead8:	d016      	beq.n	800eb08 <USB_ActivateEndpoint+0x318>
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	18d3      	adds	r3, r2, r3
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	201c      	movs	r0, #28
 800eaea:	183b      	adds	r3, r7, r0
 800eaec:	491b      	ldr	r1, [pc, #108]	; (800eb5c <USB_ActivateEndpoint+0x36c>)
 800eaee:	400a      	ands	r2, r1
 800eaf0:	801a      	strh	r2, [r3, #0]
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	18d3      	adds	r3, r2, r3
 800eafc:	183a      	adds	r2, r7, r0
 800eafe:	8812      	ldrh	r2, [r2, #0]
 800eb00:	491d      	ldr	r1, [pc, #116]	; (800eb78 <USB_ActivateEndpoint+0x388>)
 800eb02:	430a      	orrs	r2, r1
 800eb04:	b292      	uxth	r2, r2
 800eb06:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	18d3      	adds	r3, r2, r3
 800eb12:	881b      	ldrh	r3, [r3, #0]
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	201a      	movs	r0, #26
 800eb18:	183b      	adds	r3, r7, r0
 800eb1a:	4918      	ldr	r1, [pc, #96]	; (800eb7c <USB_ActivateEndpoint+0x38c>)
 800eb1c:	400a      	ands	r2, r1
 800eb1e:	801a      	strh	r2, [r3, #0]
 800eb20:	183b      	adds	r3, r7, r0
 800eb22:	183a      	adds	r2, r7, r0
 800eb24:	8812      	ldrh	r2, [r2, #0]
 800eb26:	2180      	movs	r1, #128	; 0x80
 800eb28:	0149      	lsls	r1, r1, #5
 800eb2a:	404a      	eors	r2, r1
 800eb2c:	801a      	strh	r2, [r3, #0]
 800eb2e:	183b      	adds	r3, r7, r0
 800eb30:	183a      	adds	r2, r7, r0
 800eb32:	8812      	ldrh	r2, [r2, #0]
 800eb34:	2180      	movs	r1, #128	; 0x80
 800eb36:	0189      	lsls	r1, r1, #6
 800eb38:	404a      	eors	r2, r1
 800eb3a:	801a      	strh	r2, [r3, #0]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	18d3      	adds	r3, r2, r3
 800eb46:	183a      	adds	r2, r7, r0
 800eb48:	8812      	ldrh	r2, [r2, #0]
 800eb4a:	4903      	ldr	r1, [pc, #12]	; (800eb58 <USB_ActivateEndpoint+0x368>)
 800eb4c:	430a      	orrs	r2, r1
 800eb4e:	b292      	uxth	r2, r2
 800eb50:	801a      	strh	r2, [r3, #0]
 800eb52:	e18b      	b.n	800ee6c <USB_ActivateEndpoint+0x67c>
 800eb54:	ffff898f 	.word	0xffff898f
 800eb58:	ffff8080 	.word	0xffff8080
 800eb5c:	ffff8f8f 	.word	0xffff8f8f
 800eb60:	ffff80c0 	.word	0xffff80c0
 800eb64:	ffff8fbf 	.word	0xffff8fbf
 800eb68:	00000404 	.word	0x00000404
 800eb6c:	00000406 	.word	0x00000406
 800eb70:	ffff83ff 	.word	0xffff83ff
 800eb74:	ffff8000 	.word	0xffff8000
 800eb78:	ffffc080 	.word	0xffffc080
 800eb7c:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	18d3      	adds	r3, r2, r3
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	205c      	movs	r0, #92	; 0x5c
 800eb90:	183b      	adds	r3, r7, r0
 800eb92:	49ba      	ldr	r1, [pc, #744]	; (800ee7c <USB_ActivateEndpoint+0x68c>)
 800eb94:	400a      	ands	r2, r1
 800eb96:	801a      	strh	r2, [r3, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	18d3      	adds	r3, r2, r3
 800eba2:	183a      	adds	r2, r7, r0
 800eba4:	8812      	ldrh	r2, [r2, #0]
 800eba6:	49b6      	ldr	r1, [pc, #728]	; (800ee80 <USB_ActivateEndpoint+0x690>)
 800eba8:	430a      	orrs	r2, r1
 800ebaa:	b292      	uxth	r2, r2
 800ebac:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2250      	movs	r2, #80	; 0x50
 800ebb6:	5a9b      	ldrh	r3, [r3, r2]
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	001a      	movs	r2, r3
 800ebbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebbe:	189b      	adds	r3, r3, r2
 800ebc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	00da      	lsls	r2, r3, #3
 800ebc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebca:	18d3      	adds	r3, r2, r3
 800ebcc:	2280      	movs	r2, #128	; 0x80
 800ebce:	00d2      	lsls	r2, r2, #3
 800ebd0:	4694      	mov	ip, r2
 800ebd2:	4463      	add	r3, ip
 800ebd4:	657b      	str	r3, [r7, #84]	; 0x54
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	891b      	ldrh	r3, [r3, #8]
 800ebda:	085b      	lsrs	r3, r3, #1
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	18db      	adds	r3, r3, r3
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe4:	801a      	strh	r2, [r3, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	653b      	str	r3, [r7, #80]	; 0x50
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2250      	movs	r2, #80	; 0x50
 800ebee:	5a9b      	ldrh	r3, [r3, r2]
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	001a      	movs	r2, r3
 800ebf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf6:	189b      	adds	r3, r3, r2
 800ebf8:	653b      	str	r3, [r7, #80]	; 0x50
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	00da      	lsls	r2, r3, #3
 800ec00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec02:	18d3      	adds	r3, r2, r3
 800ec04:	4a9f      	ldr	r2, [pc, #636]	; (800ee84 <USB_ActivateEndpoint+0x694>)
 800ec06:	4694      	mov	ip, r2
 800ec08:	4463      	add	r3, ip
 800ec0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	895b      	ldrh	r3, [r3, #10]
 800ec10:	085b      	lsrs	r3, r3, #1
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	18db      	adds	r3, r3, r3
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d000      	beq.n	800ec26 <USB_ActivateEndpoint+0x436>
 800ec24:	e087      	b.n	800ed36 <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	18d2      	adds	r2, r2, r3
 800ec30:	213c      	movs	r1, #60	; 0x3c
 800ec32:	187b      	adds	r3, r7, r1
 800ec34:	8812      	ldrh	r2, [r2, #0]
 800ec36:	801a      	strh	r2, [r3, #0]
 800ec38:	187b      	adds	r3, r7, r1
 800ec3a:	881a      	ldrh	r2, [r3, #0]
 800ec3c:	2380      	movs	r3, #128	; 0x80
 800ec3e:	01db      	lsls	r3, r3, #7
 800ec40:	4013      	ands	r3, r2
 800ec42:	d016      	beq.n	800ec72 <USB_ActivateEndpoint+0x482>
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	18d3      	adds	r3, r2, r3
 800ec4e:	881b      	ldrh	r3, [r3, #0]
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	203a      	movs	r0, #58	; 0x3a
 800ec54:	183b      	adds	r3, r7, r0
 800ec56:	4989      	ldr	r1, [pc, #548]	; (800ee7c <USB_ActivateEndpoint+0x68c>)
 800ec58:	400a      	ands	r2, r1
 800ec5a:	801a      	strh	r2, [r3, #0]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	18d3      	adds	r3, r2, r3
 800ec66:	183a      	adds	r2, r7, r0
 800ec68:	8812      	ldrh	r2, [r2, #0]
 800ec6a:	4987      	ldr	r1, [pc, #540]	; (800ee88 <USB_ActivateEndpoint+0x698>)
 800ec6c:	430a      	orrs	r2, r1
 800ec6e:	b292      	uxth	r2, r2
 800ec70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	18d2      	adds	r2, r2, r3
 800ec7c:	2138      	movs	r1, #56	; 0x38
 800ec7e:	187b      	adds	r3, r7, r1
 800ec80:	8812      	ldrh	r2, [r2, #0]
 800ec82:	801a      	strh	r2, [r3, #0]
 800ec84:	187b      	adds	r3, r7, r1
 800ec86:	881b      	ldrh	r3, [r3, #0]
 800ec88:	2240      	movs	r2, #64	; 0x40
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	d016      	beq.n	800ecbc <USB_ActivateEndpoint+0x4cc>
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	18d3      	adds	r3, r2, r3
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	2036      	movs	r0, #54	; 0x36
 800ec9e:	183b      	adds	r3, r7, r0
 800eca0:	4976      	ldr	r1, [pc, #472]	; (800ee7c <USB_ActivateEndpoint+0x68c>)
 800eca2:	400a      	ands	r2, r1
 800eca4:	801a      	strh	r2, [r3, #0]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	18d3      	adds	r3, r2, r3
 800ecb0:	183a      	adds	r2, r7, r0
 800ecb2:	8812      	ldrh	r2, [r2, #0]
 800ecb4:	4975      	ldr	r1, [pc, #468]	; (800ee8c <USB_ActivateEndpoint+0x69c>)
 800ecb6:	430a      	orrs	r2, r1
 800ecb8:	b292      	uxth	r2, r2
 800ecba:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	18d3      	adds	r3, r2, r3
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	2034      	movs	r0, #52	; 0x34
 800eccc:	183b      	adds	r3, r7, r0
 800ecce:	4970      	ldr	r1, [pc, #448]	; (800ee90 <USB_ActivateEndpoint+0x6a0>)
 800ecd0:	400a      	ands	r2, r1
 800ecd2:	801a      	strh	r2, [r3, #0]
 800ecd4:	183b      	adds	r3, r7, r0
 800ecd6:	183a      	adds	r2, r7, r0
 800ecd8:	8812      	ldrh	r2, [r2, #0]
 800ecda:	2180      	movs	r1, #128	; 0x80
 800ecdc:	0149      	lsls	r1, r1, #5
 800ecde:	404a      	eors	r2, r1
 800ece0:	801a      	strh	r2, [r3, #0]
 800ece2:	183b      	adds	r3, r7, r0
 800ece4:	183a      	adds	r2, r7, r0
 800ece6:	8812      	ldrh	r2, [r2, #0]
 800ece8:	2180      	movs	r1, #128	; 0x80
 800ecea:	0189      	lsls	r1, r1, #6
 800ecec:	404a      	eors	r2, r1
 800ecee:	801a      	strh	r2, [r3, #0]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	18d3      	adds	r3, r2, r3
 800ecfa:	183a      	adds	r2, r7, r0
 800ecfc:	8812      	ldrh	r2, [r2, #0]
 800ecfe:	4965      	ldr	r1, [pc, #404]	; (800ee94 <USB_ActivateEndpoint+0x6a4>)
 800ed00:	430a      	orrs	r2, r1
 800ed02:	b292      	uxth	r2, r2
 800ed04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	18d3      	adds	r3, r2, r3
 800ed10:	881b      	ldrh	r3, [r3, #0]
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	2032      	movs	r0, #50	; 0x32
 800ed16:	183b      	adds	r3, r7, r0
 800ed18:	495f      	ldr	r1, [pc, #380]	; (800ee98 <USB_ActivateEndpoint+0x6a8>)
 800ed1a:	400a      	ands	r2, r1
 800ed1c:	801a      	strh	r2, [r3, #0]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	18d3      	adds	r3, r2, r3
 800ed28:	183a      	adds	r2, r7, r0
 800ed2a:	8812      	ldrh	r2, [r2, #0]
 800ed2c:	4959      	ldr	r1, [pc, #356]	; (800ee94 <USB_ActivateEndpoint+0x6a4>)
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	b292      	uxth	r2, r2
 800ed32:	801a      	strh	r2, [r3, #0]
 800ed34:	e09a      	b.n	800ee6c <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	18d2      	adds	r2, r2, r3
 800ed40:	214a      	movs	r1, #74	; 0x4a
 800ed42:	187b      	adds	r3, r7, r1
 800ed44:	8812      	ldrh	r2, [r2, #0]
 800ed46:	801a      	strh	r2, [r3, #0]
 800ed48:	187b      	adds	r3, r7, r1
 800ed4a:	881a      	ldrh	r2, [r3, #0]
 800ed4c:	2380      	movs	r3, #128	; 0x80
 800ed4e:	01db      	lsls	r3, r3, #7
 800ed50:	4013      	ands	r3, r2
 800ed52:	d016      	beq.n	800ed82 <USB_ActivateEndpoint+0x592>
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	18d3      	adds	r3, r2, r3
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	2048      	movs	r0, #72	; 0x48
 800ed64:	183b      	adds	r3, r7, r0
 800ed66:	4945      	ldr	r1, [pc, #276]	; (800ee7c <USB_ActivateEndpoint+0x68c>)
 800ed68:	400a      	ands	r2, r1
 800ed6a:	801a      	strh	r2, [r3, #0]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	18d3      	adds	r3, r2, r3
 800ed76:	183a      	adds	r2, r7, r0
 800ed78:	8812      	ldrh	r2, [r2, #0]
 800ed7a:	4943      	ldr	r1, [pc, #268]	; (800ee88 <USB_ActivateEndpoint+0x698>)
 800ed7c:	430a      	orrs	r2, r1
 800ed7e:	b292      	uxth	r2, r2
 800ed80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	18d2      	adds	r2, r2, r3
 800ed8c:	2146      	movs	r1, #70	; 0x46
 800ed8e:	187b      	adds	r3, r7, r1
 800ed90:	8812      	ldrh	r2, [r2, #0]
 800ed92:	801a      	strh	r2, [r3, #0]
 800ed94:	187b      	adds	r3, r7, r1
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	2240      	movs	r2, #64	; 0x40
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	d016      	beq.n	800edcc <USB_ActivateEndpoint+0x5dc>
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	18d3      	adds	r3, r2, r3
 800eda8:	881b      	ldrh	r3, [r3, #0]
 800edaa:	b29a      	uxth	r2, r3
 800edac:	2044      	movs	r0, #68	; 0x44
 800edae:	183b      	adds	r3, r7, r0
 800edb0:	4932      	ldr	r1, [pc, #200]	; (800ee7c <USB_ActivateEndpoint+0x68c>)
 800edb2:	400a      	ands	r2, r1
 800edb4:	801a      	strh	r2, [r3, #0]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	18d3      	adds	r3, r2, r3
 800edc0:	183a      	adds	r2, r7, r0
 800edc2:	8812      	ldrh	r2, [r2, #0]
 800edc4:	4931      	ldr	r1, [pc, #196]	; (800ee8c <USB_ActivateEndpoint+0x69c>)
 800edc6:	430a      	orrs	r2, r1
 800edc8:	b292      	uxth	r2, r2
 800edca:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	78db      	ldrb	r3, [r3, #3]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d01d      	beq.n	800ee10 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	18d3      	adds	r3, r2, r3
 800edde:	881b      	ldrh	r3, [r3, #0]
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	2040      	movs	r0, #64	; 0x40
 800ede4:	183b      	adds	r3, r7, r0
 800ede6:	492c      	ldr	r1, [pc, #176]	; (800ee98 <USB_ActivateEndpoint+0x6a8>)
 800ede8:	400a      	ands	r2, r1
 800edea:	801a      	strh	r2, [r3, #0]
 800edec:	183b      	adds	r3, r7, r0
 800edee:	183a      	adds	r2, r7, r0
 800edf0:	8812      	ldrh	r2, [r2, #0]
 800edf2:	2120      	movs	r1, #32
 800edf4:	404a      	eors	r2, r1
 800edf6:	801a      	strh	r2, [r3, #0]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	18d3      	adds	r3, r2, r3
 800ee02:	183a      	adds	r2, r7, r0
 800ee04:	8812      	ldrh	r2, [r2, #0]
 800ee06:	4923      	ldr	r1, [pc, #140]	; (800ee94 <USB_ActivateEndpoint+0x6a4>)
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	801a      	strh	r2, [r3, #0]
 800ee0e:	e016      	b.n	800ee3e <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	18d3      	adds	r3, r2, r3
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	2042      	movs	r0, #66	; 0x42
 800ee20:	183b      	adds	r3, r7, r0
 800ee22:	491d      	ldr	r1, [pc, #116]	; (800ee98 <USB_ActivateEndpoint+0x6a8>)
 800ee24:	400a      	ands	r2, r1
 800ee26:	801a      	strh	r2, [r3, #0]
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	18d3      	adds	r3, r2, r3
 800ee32:	183a      	adds	r2, r7, r0
 800ee34:	8812      	ldrh	r2, [r2, #0]
 800ee36:	4917      	ldr	r1, [pc, #92]	; (800ee94 <USB_ActivateEndpoint+0x6a4>)
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	b292      	uxth	r2, r2
 800ee3c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	18d3      	adds	r3, r2, r3
 800ee48:	881b      	ldrh	r3, [r3, #0]
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	203e      	movs	r0, #62	; 0x3e
 800ee4e:	183b      	adds	r3, r7, r0
 800ee50:	490f      	ldr	r1, [pc, #60]	; (800ee90 <USB_ActivateEndpoint+0x6a0>)
 800ee52:	400a      	ands	r2, r1
 800ee54:	801a      	strh	r2, [r3, #0]
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	18d3      	adds	r3, r2, r3
 800ee60:	183a      	adds	r2, r7, r0
 800ee62:	8812      	ldrh	r2, [r2, #0]
 800ee64:	490b      	ldr	r1, [pc, #44]	; (800ee94 <USB_ActivateEndpoint+0x6a4>)
 800ee66:	430a      	orrs	r2, r1
 800ee68:	b292      	uxth	r2, r2
 800ee6a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800ee6c:	2367      	movs	r3, #103	; 0x67
 800ee6e:	18fb      	adds	r3, r7, r3
 800ee70:	781b      	ldrb	r3, [r3, #0]
}
 800ee72:	0018      	movs	r0, r3
 800ee74:	46bd      	mov	sp, r7
 800ee76:	b01a      	add	sp, #104	; 0x68
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	46c0      	nop			; (mov r8, r8)
 800ee7c:	ffff8f8f 	.word	0xffff8f8f
 800ee80:	ffff8180 	.word	0xffff8180
 800ee84:	00000404 	.word	0x00000404
 800ee88:	ffffc080 	.word	0xffffc080
 800ee8c:	ffff80c0 	.word	0xffff80c0
 800ee90:	ffffbf8f 	.word	0xffffbf8f
 800ee94:	ffff8080 	.word	0xffff8080
 800ee98:	ffff8fbf 	.word	0xffff8fbf

0800ee9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b08c      	sub	sp, #48	; 0x30
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	7b1b      	ldrb	r3, [r3, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d000      	beq.n	800eeb0 <USB_DeactivateEndpoint+0x14>
 800eeae:	e07e      	b.n	800efae <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	785b      	ldrb	r3, [r3, #1]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d03c      	beq.n	800ef32 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	18d2      	adds	r2, r2, r3
 800eec2:	210c      	movs	r1, #12
 800eec4:	187b      	adds	r3, r7, r1
 800eec6:	8812      	ldrh	r2, [r2, #0]
 800eec8:	801a      	strh	r2, [r3, #0]
 800eeca:	187b      	adds	r3, r7, r1
 800eecc:	881b      	ldrh	r3, [r3, #0]
 800eece:	2240      	movs	r2, #64	; 0x40
 800eed0:	4013      	ands	r3, r2
 800eed2:	d016      	beq.n	800ef02 <USB_DeactivateEndpoint+0x66>
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	18d3      	adds	r3, r2, r3
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	200a      	movs	r0, #10
 800eee4:	183b      	adds	r3, r7, r0
 800eee6:	49c7      	ldr	r1, [pc, #796]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800eee8:	400a      	ands	r2, r1
 800eeea:	801a      	strh	r2, [r3, #0]
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	18d3      	adds	r3, r2, r3
 800eef6:	183a      	adds	r2, r7, r0
 800eef8:	8812      	ldrh	r2, [r2, #0]
 800eefa:	49c3      	ldr	r1, [pc, #780]	; (800f208 <USB_DeactivateEndpoint+0x36c>)
 800eefc:	430a      	orrs	r2, r1
 800eefe:	b292      	uxth	r2, r2
 800ef00:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	18d3      	adds	r3, r2, r3
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	2008      	movs	r0, #8
 800ef12:	183b      	adds	r3, r7, r0
 800ef14:	49bd      	ldr	r1, [pc, #756]	; (800f20c <USB_DeactivateEndpoint+0x370>)
 800ef16:	400a      	ands	r2, r1
 800ef18:	801a      	strh	r2, [r3, #0]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	009b      	lsls	r3, r3, #2
 800ef22:	18d3      	adds	r3, r2, r3
 800ef24:	183a      	adds	r2, r7, r0
 800ef26:	8812      	ldrh	r2, [r2, #0]
 800ef28:	49b9      	ldr	r1, [pc, #740]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800ef2a:	430a      	orrs	r2, r1
 800ef2c:	b292      	uxth	r2, r2
 800ef2e:	801a      	strh	r2, [r3, #0]
 800ef30:	e163      	b.n	800f1fa <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	18d2      	adds	r2, r2, r3
 800ef3c:	2112      	movs	r1, #18
 800ef3e:	187b      	adds	r3, r7, r1
 800ef40:	8812      	ldrh	r2, [r2, #0]
 800ef42:	801a      	strh	r2, [r3, #0]
 800ef44:	187b      	adds	r3, r7, r1
 800ef46:	881a      	ldrh	r2, [r3, #0]
 800ef48:	2380      	movs	r3, #128	; 0x80
 800ef4a:	01db      	lsls	r3, r3, #7
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	d016      	beq.n	800ef7e <USB_DeactivateEndpoint+0xe2>
 800ef50:	687a      	ldr	r2, [r7, #4]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	18d3      	adds	r3, r2, r3
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	2010      	movs	r0, #16
 800ef60:	183b      	adds	r3, r7, r0
 800ef62:	49a8      	ldr	r1, [pc, #672]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800ef64:	400a      	ands	r2, r1
 800ef66:	801a      	strh	r2, [r3, #0]
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	18d3      	adds	r3, r2, r3
 800ef72:	183a      	adds	r2, r7, r0
 800ef74:	8812      	ldrh	r2, [r2, #0]
 800ef76:	49a7      	ldr	r1, [pc, #668]	; (800f214 <USB_DeactivateEndpoint+0x378>)
 800ef78:	430a      	orrs	r2, r1
 800ef7a:	b292      	uxth	r2, r2
 800ef7c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	18d3      	adds	r3, r2, r3
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	200e      	movs	r0, #14
 800ef8e:	183b      	adds	r3, r7, r0
 800ef90:	49a1      	ldr	r1, [pc, #644]	; (800f218 <USB_DeactivateEndpoint+0x37c>)
 800ef92:	400a      	ands	r2, r1
 800ef94:	801a      	strh	r2, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	18d3      	adds	r3, r2, r3
 800efa0:	183a      	adds	r2, r7, r0
 800efa2:	8812      	ldrh	r2, [r2, #0]
 800efa4:	499a      	ldr	r1, [pc, #616]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800efa6:	430a      	orrs	r2, r1
 800efa8:	b292      	uxth	r2, r2
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	e125      	b.n	800f1fa <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	785b      	ldrb	r3, [r3, #1]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d000      	beq.n	800efb8 <USB_DeactivateEndpoint+0x11c>
 800efb6:	e090      	b.n	800f0da <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	18d2      	adds	r2, r2, r3
 800efc2:	2120      	movs	r1, #32
 800efc4:	187b      	adds	r3, r7, r1
 800efc6:	8812      	ldrh	r2, [r2, #0]
 800efc8:	801a      	strh	r2, [r3, #0]
 800efca:	187b      	adds	r3, r7, r1
 800efcc:	881a      	ldrh	r2, [r3, #0]
 800efce:	2380      	movs	r3, #128	; 0x80
 800efd0:	01db      	lsls	r3, r3, #7
 800efd2:	4013      	ands	r3, r2
 800efd4:	d016      	beq.n	800f004 <USB_DeactivateEndpoint+0x168>
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	18d3      	adds	r3, r2, r3
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	201e      	movs	r0, #30
 800efe6:	183b      	adds	r3, r7, r0
 800efe8:	4986      	ldr	r1, [pc, #536]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800efea:	400a      	ands	r2, r1
 800efec:	801a      	strh	r2, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	18d3      	adds	r3, r2, r3
 800eff8:	183a      	adds	r2, r7, r0
 800effa:	8812      	ldrh	r2, [r2, #0]
 800effc:	4985      	ldr	r1, [pc, #532]	; (800f214 <USB_DeactivateEndpoint+0x378>)
 800effe:	430a      	orrs	r2, r1
 800f000:	b292      	uxth	r2, r2
 800f002:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	18d2      	adds	r2, r2, r3
 800f00e:	211c      	movs	r1, #28
 800f010:	187b      	adds	r3, r7, r1
 800f012:	8812      	ldrh	r2, [r2, #0]
 800f014:	801a      	strh	r2, [r3, #0]
 800f016:	187b      	adds	r3, r7, r1
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	2240      	movs	r2, #64	; 0x40
 800f01c:	4013      	ands	r3, r2
 800f01e:	d016      	beq.n	800f04e <USB_DeactivateEndpoint+0x1b2>
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	18d3      	adds	r3, r2, r3
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	201a      	movs	r0, #26
 800f030:	183b      	adds	r3, r7, r0
 800f032:	4974      	ldr	r1, [pc, #464]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800f034:	400a      	ands	r2, r1
 800f036:	801a      	strh	r2, [r3, #0]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	18d3      	adds	r3, r2, r3
 800f042:	183a      	adds	r2, r7, r0
 800f044:	8812      	ldrh	r2, [r2, #0]
 800f046:	4970      	ldr	r1, [pc, #448]	; (800f208 <USB_DeactivateEndpoint+0x36c>)
 800f048:	430a      	orrs	r2, r1
 800f04a:	b292      	uxth	r2, r2
 800f04c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	18d3      	adds	r3, r2, r3
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	2018      	movs	r0, #24
 800f05e:	183b      	adds	r3, r7, r0
 800f060:	4968      	ldr	r1, [pc, #416]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800f062:	400a      	ands	r2, r1
 800f064:	801a      	strh	r2, [r3, #0]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	18d3      	adds	r3, r2, r3
 800f070:	183a      	adds	r2, r7, r0
 800f072:	8812      	ldrh	r2, [r2, #0]
 800f074:	4964      	ldr	r1, [pc, #400]	; (800f208 <USB_DeactivateEndpoint+0x36c>)
 800f076:	430a      	orrs	r2, r1
 800f078:	b292      	uxth	r2, r2
 800f07a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	18d3      	adds	r3, r2, r3
 800f086:	881b      	ldrh	r3, [r3, #0]
 800f088:	b29a      	uxth	r2, r3
 800f08a:	2016      	movs	r0, #22
 800f08c:	183b      	adds	r3, r7, r0
 800f08e:	4962      	ldr	r1, [pc, #392]	; (800f218 <USB_DeactivateEndpoint+0x37c>)
 800f090:	400a      	ands	r2, r1
 800f092:	801a      	strh	r2, [r3, #0]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	18d3      	adds	r3, r2, r3
 800f09e:	183a      	adds	r2, r7, r0
 800f0a0:	8812      	ldrh	r2, [r2, #0]
 800f0a2:	495b      	ldr	r1, [pc, #364]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800f0a4:	430a      	orrs	r2, r1
 800f0a6:	b292      	uxth	r2, r2
 800f0a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	18d3      	adds	r3, r2, r3
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	2014      	movs	r0, #20
 800f0ba:	183b      	adds	r3, r7, r0
 800f0bc:	4953      	ldr	r1, [pc, #332]	; (800f20c <USB_DeactivateEndpoint+0x370>)
 800f0be:	400a      	ands	r2, r1
 800f0c0:	801a      	strh	r2, [r3, #0]
 800f0c2:	687a      	ldr	r2, [r7, #4]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	18d3      	adds	r3, r2, r3
 800f0cc:	183a      	adds	r2, r7, r0
 800f0ce:	8812      	ldrh	r2, [r2, #0]
 800f0d0:	494f      	ldr	r1, [pc, #316]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800f0d2:	430a      	orrs	r2, r1
 800f0d4:	b292      	uxth	r2, r2
 800f0d6:	801a      	strh	r2, [r3, #0]
 800f0d8:	e08f      	b.n	800f1fa <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	18d2      	adds	r2, r2, r3
 800f0e4:	212e      	movs	r1, #46	; 0x2e
 800f0e6:	187b      	adds	r3, r7, r1
 800f0e8:	8812      	ldrh	r2, [r2, #0]
 800f0ea:	801a      	strh	r2, [r3, #0]
 800f0ec:	187b      	adds	r3, r7, r1
 800f0ee:	881a      	ldrh	r2, [r3, #0]
 800f0f0:	2380      	movs	r3, #128	; 0x80
 800f0f2:	01db      	lsls	r3, r3, #7
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	d016      	beq.n	800f126 <USB_DeactivateEndpoint+0x28a>
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	18d3      	adds	r3, r2, r3
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	b29a      	uxth	r2, r3
 800f106:	202c      	movs	r0, #44	; 0x2c
 800f108:	183b      	adds	r3, r7, r0
 800f10a:	493e      	ldr	r1, [pc, #248]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800f10c:	400a      	ands	r2, r1
 800f10e:	801a      	strh	r2, [r3, #0]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	18d3      	adds	r3, r2, r3
 800f11a:	183a      	adds	r2, r7, r0
 800f11c:	8812      	ldrh	r2, [r2, #0]
 800f11e:	493d      	ldr	r1, [pc, #244]	; (800f214 <USB_DeactivateEndpoint+0x378>)
 800f120:	430a      	orrs	r2, r1
 800f122:	b292      	uxth	r2, r2
 800f124:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	18d2      	adds	r2, r2, r3
 800f130:	212a      	movs	r1, #42	; 0x2a
 800f132:	187b      	adds	r3, r7, r1
 800f134:	8812      	ldrh	r2, [r2, #0]
 800f136:	801a      	strh	r2, [r3, #0]
 800f138:	187b      	adds	r3, r7, r1
 800f13a:	881b      	ldrh	r3, [r3, #0]
 800f13c:	2240      	movs	r2, #64	; 0x40
 800f13e:	4013      	ands	r3, r2
 800f140:	d016      	beq.n	800f170 <USB_DeactivateEndpoint+0x2d4>
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	18d3      	adds	r3, r2, r3
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	b29a      	uxth	r2, r3
 800f150:	2028      	movs	r0, #40	; 0x28
 800f152:	183b      	adds	r3, r7, r0
 800f154:	492b      	ldr	r1, [pc, #172]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800f156:	400a      	ands	r2, r1
 800f158:	801a      	strh	r2, [r3, #0]
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	18d3      	adds	r3, r2, r3
 800f164:	183a      	adds	r2, r7, r0
 800f166:	8812      	ldrh	r2, [r2, #0]
 800f168:	4927      	ldr	r1, [pc, #156]	; (800f208 <USB_DeactivateEndpoint+0x36c>)
 800f16a:	430a      	orrs	r2, r1
 800f16c:	b292      	uxth	r2, r2
 800f16e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f170:	687a      	ldr	r2, [r7, #4]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	18d3      	adds	r3, r2, r3
 800f17a:	881b      	ldrh	r3, [r3, #0]
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	2026      	movs	r0, #38	; 0x26
 800f180:	183b      	adds	r3, r7, r0
 800f182:	4920      	ldr	r1, [pc, #128]	; (800f204 <USB_DeactivateEndpoint+0x368>)
 800f184:	400a      	ands	r2, r1
 800f186:	801a      	strh	r2, [r3, #0]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	18d3      	adds	r3, r2, r3
 800f192:	183a      	adds	r2, r7, r0
 800f194:	8812      	ldrh	r2, [r2, #0]
 800f196:	491f      	ldr	r1, [pc, #124]	; (800f214 <USB_DeactivateEndpoint+0x378>)
 800f198:	430a      	orrs	r2, r1
 800f19a:	b292      	uxth	r2, r2
 800f19c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	18d3      	adds	r3, r2, r3
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	2024      	movs	r0, #36	; 0x24
 800f1ae:	183b      	adds	r3, r7, r0
 800f1b0:	4916      	ldr	r1, [pc, #88]	; (800f20c <USB_DeactivateEndpoint+0x370>)
 800f1b2:	400a      	ands	r2, r1
 800f1b4:	801a      	strh	r2, [r3, #0]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	18d3      	adds	r3, r2, r3
 800f1c0:	183a      	adds	r2, r7, r0
 800f1c2:	8812      	ldrh	r2, [r2, #0]
 800f1c4:	4912      	ldr	r1, [pc, #72]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800f1c6:	430a      	orrs	r2, r1
 800f1c8:	b292      	uxth	r2, r2
 800f1ca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	18d3      	adds	r3, r2, r3
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	2022      	movs	r0, #34	; 0x22
 800f1dc:	183b      	adds	r3, r7, r0
 800f1de:	490e      	ldr	r1, [pc, #56]	; (800f218 <USB_DeactivateEndpoint+0x37c>)
 800f1e0:	400a      	ands	r2, r1
 800f1e2:	801a      	strh	r2, [r3, #0]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	18d3      	adds	r3, r2, r3
 800f1ee:	183a      	adds	r2, r7, r0
 800f1f0:	8812      	ldrh	r2, [r2, #0]
 800f1f2:	4907      	ldr	r1, [pc, #28]	; (800f210 <USB_DeactivateEndpoint+0x374>)
 800f1f4:	430a      	orrs	r2, r1
 800f1f6:	b292      	uxth	r2, r2
 800f1f8:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	b00c      	add	sp, #48	; 0x30
 800f202:	bd80      	pop	{r7, pc}
 800f204:	ffff8f8f 	.word	0xffff8f8f
 800f208:	ffff80c0 	.word	0xffff80c0
 800f20c:	ffff8fbf 	.word	0xffff8fbf
 800f210:	ffff8080 	.word	0xffff8080
 800f214:	ffffc080 	.word	0xffffc080
 800f218:	ffffbf8f 	.word	0xffffbf8f

0800f21c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f21c:	b5b0      	push	{r4, r5, r7, lr}
 800f21e:	b0c4      	sub	sp, #272	; 0x110
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	785b      	ldrb	r3, [r3, #1]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d001      	beq.n	800f232 <USB_EPStartXfer+0x16>
 800f22e:	f000 fd49 	bl	800fcc4 <USB_EPStartXfer+0xaa8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	699a      	ldr	r2, [r3, #24]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	691b      	ldr	r3, [r3, #16]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d906      	bls.n	800f24c <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	2286      	movs	r2, #134	; 0x86
 800f244:	0052      	lsls	r2, r2, #1
 800f246:	18ba      	adds	r2, r7, r2
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	e005      	b.n	800f258 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	2286      	movs	r2, #134	; 0x86
 800f252:	0052      	lsls	r2, r2, #1
 800f254:	18ba      	adds	r2, r7, r2
 800f256:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	7b1b      	ldrb	r3, [r3, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d125      	bne.n	800f2ac <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	6959      	ldr	r1, [r3, #20]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	88da      	ldrh	r2, [r3, #6]
 800f268:	2486      	movs	r4, #134	; 0x86
 800f26a:	0064      	lsls	r4, r4, #1
 800f26c:	193b      	adds	r3, r7, r4
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	b29b      	uxth	r3, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f001 fa2e 	bl	80106d4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2250      	movs	r2, #80	; 0x50
 800f280:	5a9b      	ldrh	r3, [r3, r2]
 800f282:	b29b      	uxth	r3, r3
 800f284:	001a      	movs	r2, r3
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	189b      	adds	r3, r3, r2
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	00da      	lsls	r2, r3, #3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	18d3      	adds	r3, r2, r3
 800f296:	4ad0      	ldr	r2, [pc, #832]	; (800f5d8 <USB_EPStartXfer+0x3bc>)
 800f298:	4694      	mov	ip, r2
 800f29a:	4463      	add	r3, ip
 800f29c:	613b      	str	r3, [r7, #16]
 800f29e:	193b      	adds	r3, r7, r4
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	801a      	strh	r2, [r3, #0]
 800f2a8:	f000 fcca 	bl	800fc40 <USB_EPStartXfer+0xa24>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	78db      	ldrb	r3, [r3, #3]
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d000      	beq.n	800f2b6 <USB_EPStartXfer+0x9a>
 800f2b4:	e346      	b.n	800f944 <USB_EPStartXfer+0x728>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	6a1a      	ldr	r2, [r3, #32]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	691b      	ldr	r3, [r3, #16]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d800      	bhi.n	800f2c4 <USB_EPStartXfer+0xa8>
 800f2c2:	e2ec      	b.n	800f89e <USB_EPStartXfer+0x682>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	18d3      	adds	r3, r2, r3
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	205a      	movs	r0, #90	; 0x5a
 800f2d4:	183b      	adds	r3, r7, r0
 800f2d6:	49c1      	ldr	r1, [pc, #772]	; (800f5dc <USB_EPStartXfer+0x3c0>)
 800f2d8:	400a      	ands	r2, r1
 800f2da:	801a      	strh	r2, [r3, #0]
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	18d3      	adds	r3, r2, r3
 800f2e6:	183a      	adds	r2, r7, r0
 800f2e8:	8812      	ldrh	r2, [r2, #0]
 800f2ea:	49bd      	ldr	r1, [pc, #756]	; (800f5e0 <USB_EPStartXfer+0x3c4>)
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	b292      	uxth	r2, r2
 800f2f0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	6a1a      	ldr	r2, [r3, #32]
 800f2f6:	2186      	movs	r1, #134	; 0x86
 800f2f8:	0049      	lsls	r1, r1, #1
 800f2fa:	187b      	adds	r3, r7, r1
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	1ad2      	subs	r2, r2, r3
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	18d3      	adds	r3, r2, r3
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	b29b      	uxth	r3, r3
 800f312:	001a      	movs	r2, r3
 800f314:	2340      	movs	r3, #64	; 0x40
 800f316:	4013      	ands	r3, r2
 800f318:	d100      	bne.n	800f31c <USB_EPStartXfer+0x100>
 800f31a:	e169      	b.n	800f5f0 <USB_EPStartXfer+0x3d4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	637b      	str	r3, [r7, #52]	; 0x34
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	785b      	ldrb	r3, [r3, #1]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d168      	bne.n	800f3fa <USB_EPStartXfer+0x1de>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2250      	movs	r2, #80	; 0x50
 800f330:	5a9b      	ldrh	r3, [r3, r2]
 800f332:	b29b      	uxth	r3, r3
 800f334:	001a      	movs	r2, r3
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	189b      	adds	r3, r3, r2
 800f33a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	00da      	lsls	r2, r3, #3
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	18d3      	adds	r3, r2, r3
 800f346:	4aa7      	ldr	r2, [pc, #668]	; (800f5e4 <USB_EPStartXfer+0x3c8>)
 800f348:	4694      	mov	ip, r2
 800f34a:	4463      	add	r3, ip
 800f34c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f34e:	187b      	adds	r3, r7, r1
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d110      	bne.n	800f378 <USB_EPStartXfer+0x15c>
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	4aa2      	ldr	r2, [pc, #648]	; (800f5e8 <USB_EPStartXfer+0x3cc>)
 800f35e:	4013      	ands	r3, r2
 800f360:	b29a      	uxth	r2, r3
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	801a      	strh	r2, [r3, #0]
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	4a9f      	ldr	r2, [pc, #636]	; (800f5ec <USB_EPStartXfer+0x3d0>)
 800f36e:	4313      	orrs	r3, r2
 800f370:	b29a      	uxth	r2, r3
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	801a      	strh	r2, [r3, #0]
 800f376:	e05c      	b.n	800f432 <USB_EPStartXfer+0x216>
 800f378:	2286      	movs	r2, #134	; 0x86
 800f37a:	0052      	lsls	r2, r2, #1
 800f37c:	18bb      	adds	r3, r7, r2
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b3e      	cmp	r3, #62	; 0x3e
 800f382:	d81a      	bhi.n	800f3ba <USB_EPStartXfer+0x19e>
 800f384:	18bb      	adds	r3, r7, r2
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	085b      	lsrs	r3, r3, #1
 800f38a:	1d79      	adds	r1, r7, #5
 800f38c:	31ff      	adds	r1, #255	; 0xff
 800f38e:	600b      	str	r3, [r1, #0]
 800f390:	18bb      	adds	r3, r7, r2
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2201      	movs	r2, #1
 800f396:	4013      	ands	r3, r2
 800f398:	d006      	beq.n	800f3a8 <USB_EPStartXfer+0x18c>
 800f39a:	1d7b      	adds	r3, r7, #5
 800f39c:	33ff      	adds	r3, #255	; 0xff
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	1d7a      	adds	r2, r7, #5
 800f3a4:	32ff      	adds	r2, #255	; 0xff
 800f3a6:	6013      	str	r3, [r2, #0]
 800f3a8:	1d7b      	adds	r3, r7, #5
 800f3aa:	33ff      	adds	r3, #255	; 0xff
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	029b      	lsls	r3, r3, #10
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	801a      	strh	r2, [r3, #0]
 800f3b8:	e03b      	b.n	800f432 <USB_EPStartXfer+0x216>
 800f3ba:	2286      	movs	r2, #134	; 0x86
 800f3bc:	0052      	lsls	r2, r2, #1
 800f3be:	18bb      	adds	r3, r7, r2
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	095b      	lsrs	r3, r3, #5
 800f3c4:	1d79      	adds	r1, r7, #5
 800f3c6:	31ff      	adds	r1, #255	; 0xff
 800f3c8:	600b      	str	r3, [r1, #0]
 800f3ca:	18bb      	adds	r3, r7, r2
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	221f      	movs	r2, #31
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	d106      	bne.n	800f3e2 <USB_EPStartXfer+0x1c6>
 800f3d4:	1d7b      	adds	r3, r7, #5
 800f3d6:	33ff      	adds	r3, #255	; 0xff
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	1d7a      	adds	r2, r7, #5
 800f3de:	32ff      	adds	r2, #255	; 0xff
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	1d7b      	adds	r3, r7, #5
 800f3e4:	33ff      	adds	r3, #255	; 0xff
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	029b      	lsls	r3, r3, #10
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4a7f      	ldr	r2, [pc, #508]	; (800f5ec <USB_EPStartXfer+0x3d0>)
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f6:	801a      	strh	r2, [r3, #0]
 800f3f8:	e01b      	b.n	800f432 <USB_EPStartXfer+0x216>
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	785b      	ldrb	r3, [r3, #1]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d117      	bne.n	800f432 <USB_EPStartXfer+0x216>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2250      	movs	r2, #80	; 0x50
 800f406:	5a9b      	ldrh	r3, [r3, r2]
 800f408:	b29b      	uxth	r3, r3
 800f40a:	001a      	movs	r2, r3
 800f40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f40e:	189b      	adds	r3, r3, r2
 800f410:	637b      	str	r3, [r7, #52]	; 0x34
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	00da      	lsls	r2, r3, #3
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	18d3      	adds	r3, r2, r3
 800f41c:	4a71      	ldr	r2, [pc, #452]	; (800f5e4 <USB_EPStartXfer+0x3c8>)
 800f41e:	4694      	mov	ip, r2
 800f420:	4463      	add	r3, ip
 800f422:	633b      	str	r3, [r7, #48]	; 0x30
 800f424:	2386      	movs	r3, #134	; 0x86
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	18fb      	adds	r3, r7, r3
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f432:	2085      	movs	r0, #133	; 0x85
 800f434:	0040      	lsls	r0, r0, #1
 800f436:	183b      	adds	r3, r7, r0
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	8952      	ldrh	r2, [r2, #10]
 800f43c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	6959      	ldr	r1, [r3, #20]
 800f442:	2586      	movs	r5, #134	; 0x86
 800f444:	006d      	lsls	r5, r5, #1
 800f446:	197b      	adds	r3, r7, r5
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	b29c      	uxth	r4, r3
 800f44c:	183b      	adds	r3, r7, r0
 800f44e:	881a      	ldrh	r2, [r3, #0]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	0023      	movs	r3, r4
 800f454:	f001 f93e 	bl	80106d4 <USB_WritePMA>
            ep->xfer_buff += len;
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	695a      	ldr	r2, [r3, #20]
 800f45c:	197b      	adds	r3, r7, r5
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	18d2      	adds	r2, r2, r3
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6a1a      	ldr	r2, [r3, #32]
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d907      	bls.n	800f482 <USB_EPStartXfer+0x266>
            {
              ep->xfer_len_db -= len;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6a1a      	ldr	r2, [r3, #32]
 800f476:	197b      	adds	r3, r7, r5
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	1ad2      	subs	r2, r2, r3
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	621a      	str	r2, [r3, #32]
 800f480:	e008      	b.n	800f494 <USB_EPStartXfer+0x278>
            }
            else
            {
              len = ep->xfer_len_db;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	2286      	movs	r2, #134	; 0x86
 800f488:	0052      	lsls	r2, r2, #1
 800f48a:	18ba      	adds	r2, r7, r2
 800f48c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	2200      	movs	r2, #0
 800f492:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	785b      	ldrb	r3, [r3, #1]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d16a      	bne.n	800f572 <USB_EPStartXfer+0x356>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	61fb      	str	r3, [r7, #28]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2250      	movs	r2, #80	; 0x50
 800f4a4:	5a9b      	ldrh	r3, [r3, r2]
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	001a      	movs	r2, r3
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	189b      	adds	r3, r3, r2
 800f4ae:	61fb      	str	r3, [r7, #28]
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	00da      	lsls	r2, r3, #3
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	18d3      	adds	r3, r2, r3
 800f4ba:	4a47      	ldr	r2, [pc, #284]	; (800f5d8 <USB_EPStartXfer+0x3bc>)
 800f4bc:	4694      	mov	ip, r2
 800f4be:	4463      	add	r3, ip
 800f4c0:	61bb      	str	r3, [r7, #24]
 800f4c2:	2386      	movs	r3, #134	; 0x86
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	18fb      	adds	r3, r7, r3
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d110      	bne.n	800f4f0 <USB_EPStartXfer+0x2d4>
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	4a44      	ldr	r2, [pc, #272]	; (800f5e8 <USB_EPStartXfer+0x3cc>)
 800f4d6:	4013      	ands	r3, r2
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	801a      	strh	r2, [r3, #0]
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	4a41      	ldr	r2, [pc, #260]	; (800f5ec <USB_EPStartXfer+0x3d0>)
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	801a      	strh	r2, [r3, #0]
 800f4ee:	e05e      	b.n	800f5ae <USB_EPStartXfer+0x392>
 800f4f0:	2286      	movs	r2, #134	; 0x86
 800f4f2:	0052      	lsls	r2, r2, #1
 800f4f4:	18bb      	adds	r3, r7, r2
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b3e      	cmp	r3, #62	; 0x3e
 800f4fa:	d81a      	bhi.n	800f532 <USB_EPStartXfer+0x316>
 800f4fc:	18bb      	adds	r3, r7, r2
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	085b      	lsrs	r3, r3, #1
 800f502:	1c79      	adds	r1, r7, #1
 800f504:	31ff      	adds	r1, #255	; 0xff
 800f506:	600b      	str	r3, [r1, #0]
 800f508:	18bb      	adds	r3, r7, r2
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2201      	movs	r2, #1
 800f50e:	4013      	ands	r3, r2
 800f510:	d006      	beq.n	800f520 <USB_EPStartXfer+0x304>
 800f512:	1c7b      	adds	r3, r7, #1
 800f514:	33ff      	adds	r3, #255	; 0xff
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3301      	adds	r3, #1
 800f51a:	1c7a      	adds	r2, r7, #1
 800f51c:	32ff      	adds	r2, #255	; 0xff
 800f51e:	6013      	str	r3, [r2, #0]
 800f520:	1c7b      	adds	r3, r7, #1
 800f522:	33ff      	adds	r3, #255	; 0xff
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	b29b      	uxth	r3, r3
 800f528:	029b      	lsls	r3, r3, #10
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	801a      	strh	r2, [r3, #0]
 800f530:	e03d      	b.n	800f5ae <USB_EPStartXfer+0x392>
 800f532:	2286      	movs	r2, #134	; 0x86
 800f534:	0052      	lsls	r2, r2, #1
 800f536:	18bb      	adds	r3, r7, r2
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	095b      	lsrs	r3, r3, #5
 800f53c:	1c79      	adds	r1, r7, #1
 800f53e:	31ff      	adds	r1, #255	; 0xff
 800f540:	600b      	str	r3, [r1, #0]
 800f542:	18bb      	adds	r3, r7, r2
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	221f      	movs	r2, #31
 800f548:	4013      	ands	r3, r2
 800f54a:	d106      	bne.n	800f55a <USB_EPStartXfer+0x33e>
 800f54c:	1c7b      	adds	r3, r7, #1
 800f54e:	33ff      	adds	r3, #255	; 0xff
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	3b01      	subs	r3, #1
 800f554:	1c7a      	adds	r2, r7, #1
 800f556:	32ff      	adds	r2, #255	; 0xff
 800f558:	6013      	str	r3, [r2, #0]
 800f55a:	1c7b      	adds	r3, r7, #1
 800f55c:	33ff      	adds	r3, #255	; 0xff
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	b29b      	uxth	r3, r3
 800f562:	029b      	lsls	r3, r3, #10
 800f564:	b29b      	uxth	r3, r3
 800f566:	4a21      	ldr	r2, [pc, #132]	; (800f5ec <USB_EPStartXfer+0x3d0>)
 800f568:	4313      	orrs	r3, r2
 800f56a:	b29a      	uxth	r2, r3
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	801a      	strh	r2, [r3, #0]
 800f570:	e01d      	b.n	800f5ae <USB_EPStartXfer+0x392>
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	2b01      	cmp	r3, #1
 800f578:	d119      	bne.n	800f5ae <USB_EPStartXfer+0x392>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	627b      	str	r3, [r7, #36]	; 0x24
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2250      	movs	r2, #80	; 0x50
 800f582:	5a9b      	ldrh	r3, [r3, r2]
 800f584:	b29b      	uxth	r3, r3
 800f586:	001a      	movs	r2, r3
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	189b      	adds	r3, r3, r2
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	00da      	lsls	r2, r3, #3
 800f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f596:	18d3      	adds	r3, r2, r3
 800f598:	4a0f      	ldr	r2, [pc, #60]	; (800f5d8 <USB_EPStartXfer+0x3bc>)
 800f59a:	4694      	mov	ip, r2
 800f59c:	4463      	add	r3, ip
 800f59e:	623b      	str	r3, [r7, #32]
 800f5a0:	2386      	movs	r3, #134	; 0x86
 800f5a2:	005b      	lsls	r3, r3, #1
 800f5a4:	18fb      	adds	r3, r7, r3
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f5ae:	2085      	movs	r0, #133	; 0x85
 800f5b0:	0040      	lsls	r0, r0, #1
 800f5b2:	183b      	adds	r3, r7, r0
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	8912      	ldrh	r2, [r2, #8]
 800f5b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	6959      	ldr	r1, [r3, #20]
 800f5be:	2386      	movs	r3, #134	; 0x86
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	18fb      	adds	r3, r7, r3
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	b29c      	uxth	r4, r3
 800f5c8:	183b      	adds	r3, r7, r0
 800f5ca:	881a      	ldrh	r2, [r3, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	0023      	movs	r3, r4
 800f5d0:	f001 f880 	bl	80106d4 <USB_WritePMA>
 800f5d4:	e334      	b.n	800fc40 <USB_EPStartXfer+0xa24>
 800f5d6:	46c0      	nop			; (mov r8, r8)
 800f5d8:	00000402 	.word	0x00000402
 800f5dc:	ffff8f8f 	.word	0xffff8f8f
 800f5e0:	ffff8180 	.word	0xffff8180
 800f5e4:	00000406 	.word	0x00000406
 800f5e8:	ffff83ff 	.word	0xffff83ff
 800f5ec:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	785b      	ldrb	r3, [r3, #1]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d166      	bne.n	800f6c6 <USB_EPStartXfer+0x4aa>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2250      	movs	r2, #80	; 0x50
 800f600:	5a9b      	ldrh	r3, [r3, r2]
 800f602:	b29b      	uxth	r3, r3
 800f604:	001a      	movs	r2, r3
 800f606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f608:	189b      	adds	r3, r3, r2
 800f60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	00da      	lsls	r2, r3, #3
 800f612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f614:	18d3      	adds	r3, r2, r3
 800f616:	4ac5      	ldr	r2, [pc, #788]	; (800f92c <USB_EPStartXfer+0x710>)
 800f618:	4694      	mov	ip, r2
 800f61a:	4463      	add	r3, ip
 800f61c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f61e:	2386      	movs	r3, #134	; 0x86
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	18fb      	adds	r3, r7, r3
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d110      	bne.n	800f64c <USB_EPStartXfer+0x430>
 800f62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4abf      	ldr	r2, [pc, #764]	; (800f930 <USB_EPStartXfer+0x714>)
 800f632:	4013      	ands	r3, r2
 800f634:	b29a      	uxth	r2, r3
 800f636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f638:	801a      	strh	r2, [r3, #0]
 800f63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f63c:	881b      	ldrh	r3, [r3, #0]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	4abc      	ldr	r2, [pc, #752]	; (800f934 <USB_EPStartXfer+0x718>)
 800f642:	4313      	orrs	r3, r2
 800f644:	b29a      	uxth	r2, r3
 800f646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f648:	801a      	strh	r2, [r3, #0]
 800f64a:	e05a      	b.n	800f702 <USB_EPStartXfer+0x4e6>
 800f64c:	2286      	movs	r2, #134	; 0x86
 800f64e:	0052      	lsls	r2, r2, #1
 800f650:	18bb      	adds	r3, r7, r2
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b3e      	cmp	r3, #62	; 0x3e
 800f656:	d818      	bhi.n	800f68a <USB_EPStartXfer+0x46e>
 800f658:	18bb      	adds	r3, r7, r2
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	085b      	lsrs	r3, r3, #1
 800f65e:	21fc      	movs	r1, #252	; 0xfc
 800f660:	1878      	adds	r0, r7, r1
 800f662:	6003      	str	r3, [r0, #0]
 800f664:	18bb      	adds	r3, r7, r2
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2201      	movs	r2, #1
 800f66a:	4013      	ands	r3, r2
 800f66c:	d004      	beq.n	800f678 <USB_EPStartXfer+0x45c>
 800f66e:	187b      	adds	r3, r7, r1
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	3301      	adds	r3, #1
 800f674:	187a      	adds	r2, r7, r1
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	23fc      	movs	r3, #252	; 0xfc
 800f67a:	18fb      	adds	r3, r7, r3
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	029b      	lsls	r3, r3, #10
 800f682:	b29a      	uxth	r2, r3
 800f684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f686:	801a      	strh	r2, [r3, #0]
 800f688:	e03b      	b.n	800f702 <USB_EPStartXfer+0x4e6>
 800f68a:	2286      	movs	r2, #134	; 0x86
 800f68c:	0052      	lsls	r2, r2, #1
 800f68e:	18bb      	adds	r3, r7, r2
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	095b      	lsrs	r3, r3, #5
 800f694:	21fc      	movs	r1, #252	; 0xfc
 800f696:	1878      	adds	r0, r7, r1
 800f698:	6003      	str	r3, [r0, #0]
 800f69a:	18bb      	adds	r3, r7, r2
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	221f      	movs	r2, #31
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	d104      	bne.n	800f6ae <USB_EPStartXfer+0x492>
 800f6a4:	187b      	adds	r3, r7, r1
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	187a      	adds	r2, r7, r1
 800f6ac:	6013      	str	r3, [r2, #0]
 800f6ae:	23fc      	movs	r3, #252	; 0xfc
 800f6b0:	18fb      	adds	r3, r7, r3
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	029b      	lsls	r3, r3, #10
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	4a9e      	ldr	r2, [pc, #632]	; (800f934 <USB_EPStartXfer+0x718>)
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6c2:	801a      	strh	r2, [r3, #0]
 800f6c4:	e01d      	b.n	800f702 <USB_EPStartXfer+0x4e6>
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	785b      	ldrb	r3, [r3, #1]
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d119      	bne.n	800f702 <USB_EPStartXfer+0x4e6>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	657b      	str	r3, [r7, #84]	; 0x54
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2250      	movs	r2, #80	; 0x50
 800f6d6:	5a9b      	ldrh	r3, [r3, r2]
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	001a      	movs	r2, r3
 800f6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6de:	189b      	adds	r3, r3, r2
 800f6e0:	657b      	str	r3, [r7, #84]	; 0x54
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	00da      	lsls	r2, r3, #3
 800f6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6ea:	18d3      	adds	r3, r2, r3
 800f6ec:	4a8f      	ldr	r2, [pc, #572]	; (800f92c <USB_EPStartXfer+0x710>)
 800f6ee:	4694      	mov	ip, r2
 800f6f0:	4463      	add	r3, ip
 800f6f2:	653b      	str	r3, [r7, #80]	; 0x50
 800f6f4:	2386      	movs	r3, #134	; 0x86
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	18fb      	adds	r3, r7, r3
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f700:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f702:	2085      	movs	r0, #133	; 0x85
 800f704:	0040      	lsls	r0, r0, #1
 800f706:	183b      	adds	r3, r7, r0
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	8912      	ldrh	r2, [r2, #8]
 800f70c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	6959      	ldr	r1, [r3, #20]
 800f712:	2586      	movs	r5, #134	; 0x86
 800f714:	006d      	lsls	r5, r5, #1
 800f716:	197b      	adds	r3, r7, r5
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	b29c      	uxth	r4, r3
 800f71c:	183b      	adds	r3, r7, r0
 800f71e:	881a      	ldrh	r2, [r3, #0]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	0023      	movs	r3, r4
 800f724:	f000 ffd6 	bl	80106d4 <USB_WritePMA>
            ep->xfer_buff += len;
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	695a      	ldr	r2, [r3, #20]
 800f72c:	197b      	adds	r3, r7, r5
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	18d2      	adds	r2, r2, r3
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	6a1a      	ldr	r2, [r3, #32]
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	691b      	ldr	r3, [r3, #16]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d907      	bls.n	800f752 <USB_EPStartXfer+0x536>
            {
              ep->xfer_len_db -= len;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	6a1a      	ldr	r2, [r3, #32]
 800f746:	197b      	adds	r3, r7, r5
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	1ad2      	subs	r2, r2, r3
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	621a      	str	r2, [r3, #32]
 800f750:	e008      	b.n	800f764 <USB_EPStartXfer+0x548>
            }
            else
            {
              len = ep->xfer_len_db;
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	2286      	movs	r2, #134	; 0x86
 800f758:	0052      	lsls	r2, r2, #1
 800f75a:	18ba      	adds	r2, r7, r2
 800f75c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	2200      	movs	r2, #0
 800f762:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	647b      	str	r3, [r7, #68]	; 0x44
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	785b      	ldrb	r3, [r3, #1]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d166      	bne.n	800f83e <USB_EPStartXfer+0x622>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2250      	movs	r2, #80	; 0x50
 800f778:	5a9b      	ldrh	r3, [r3, r2]
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	001a      	movs	r2, r3
 800f77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f780:	189b      	adds	r3, r3, r2
 800f782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	00da      	lsls	r2, r3, #3
 800f78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78c:	18d3      	adds	r3, r2, r3
 800f78e:	4a6a      	ldr	r2, [pc, #424]	; (800f938 <USB_EPStartXfer+0x71c>)
 800f790:	4694      	mov	ip, r2
 800f792:	4463      	add	r3, ip
 800f794:	63bb      	str	r3, [r7, #56]	; 0x38
 800f796:	2386      	movs	r3, #134	; 0x86
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	18fb      	adds	r3, r7, r3
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d110      	bne.n	800f7c4 <USB_EPStartXfer+0x5a8>
 800f7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4a61      	ldr	r2, [pc, #388]	; (800f930 <USB_EPStartXfer+0x714>)
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b0:	801a      	strh	r2, [r3, #0]
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4a5e      	ldr	r2, [pc, #376]	; (800f934 <USB_EPStartXfer+0x718>)
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	801a      	strh	r2, [r3, #0]
 800f7c2:	e058      	b.n	800f876 <USB_EPStartXfer+0x65a>
 800f7c4:	2286      	movs	r2, #134	; 0x86
 800f7c6:	0052      	lsls	r2, r2, #1
 800f7c8:	18bb      	adds	r3, r7, r2
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b3e      	cmp	r3, #62	; 0x3e
 800f7ce:	d818      	bhi.n	800f802 <USB_EPStartXfer+0x5e6>
 800f7d0:	18bb      	adds	r3, r7, r2
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	085b      	lsrs	r3, r3, #1
 800f7d6:	21f8      	movs	r1, #248	; 0xf8
 800f7d8:	1878      	adds	r0, r7, r1
 800f7da:	6003      	str	r3, [r0, #0]
 800f7dc:	18bb      	adds	r3, r7, r2
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	4013      	ands	r3, r2
 800f7e4:	d004      	beq.n	800f7f0 <USB_EPStartXfer+0x5d4>
 800f7e6:	187b      	adds	r3, r7, r1
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	187a      	adds	r2, r7, r1
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	23f8      	movs	r3, #248	; 0xf8
 800f7f2:	18fb      	adds	r3, r7, r3
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	029b      	lsls	r3, r3, #10
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	801a      	strh	r2, [r3, #0]
 800f800:	e039      	b.n	800f876 <USB_EPStartXfer+0x65a>
 800f802:	2286      	movs	r2, #134	; 0x86
 800f804:	0052      	lsls	r2, r2, #1
 800f806:	18bb      	adds	r3, r7, r2
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	095b      	lsrs	r3, r3, #5
 800f80c:	21f8      	movs	r1, #248	; 0xf8
 800f80e:	1878      	adds	r0, r7, r1
 800f810:	6003      	str	r3, [r0, #0]
 800f812:	18bb      	adds	r3, r7, r2
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	221f      	movs	r2, #31
 800f818:	4013      	ands	r3, r2
 800f81a:	d104      	bne.n	800f826 <USB_EPStartXfer+0x60a>
 800f81c:	187b      	adds	r3, r7, r1
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	3b01      	subs	r3, #1
 800f822:	187a      	adds	r2, r7, r1
 800f824:	6013      	str	r3, [r2, #0]
 800f826:	23f8      	movs	r3, #248	; 0xf8
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	029b      	lsls	r3, r3, #10
 800f830:	b29b      	uxth	r3, r3
 800f832:	4a40      	ldr	r2, [pc, #256]	; (800f934 <USB_EPStartXfer+0x718>)
 800f834:	4313      	orrs	r3, r2
 800f836:	b29a      	uxth	r2, r3
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	801a      	strh	r2, [r3, #0]
 800f83c:	e01b      	b.n	800f876 <USB_EPStartXfer+0x65a>
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	785b      	ldrb	r3, [r3, #1]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d117      	bne.n	800f876 <USB_EPStartXfer+0x65a>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2250      	movs	r2, #80	; 0x50
 800f84a:	5a9b      	ldrh	r3, [r3, r2]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	001a      	movs	r2, r3
 800f850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f852:	189b      	adds	r3, r3, r2
 800f854:	647b      	str	r3, [r7, #68]	; 0x44
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	00da      	lsls	r2, r3, #3
 800f85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f85e:	18d3      	adds	r3, r2, r3
 800f860:	4a35      	ldr	r2, [pc, #212]	; (800f938 <USB_EPStartXfer+0x71c>)
 800f862:	4694      	mov	ip, r2
 800f864:	4463      	add	r3, ip
 800f866:	643b      	str	r3, [r7, #64]	; 0x40
 800f868:	2386      	movs	r3, #134	; 0x86
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	18fb      	adds	r3, r7, r3
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	b29a      	uxth	r2, r3
 800f872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f876:	2085      	movs	r0, #133	; 0x85
 800f878:	0040      	lsls	r0, r0, #1
 800f87a:	183b      	adds	r3, r7, r0
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	8952      	ldrh	r2, [r2, #10]
 800f880:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	6959      	ldr	r1, [r3, #20]
 800f886:	2386      	movs	r3, #134	; 0x86
 800f888:	005b      	lsls	r3, r3, #1
 800f88a:	18fb      	adds	r3, r7, r3
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	b29c      	uxth	r4, r3
 800f890:	183b      	adds	r3, r7, r0
 800f892:	881a      	ldrh	r2, [r3, #0]
 800f894:	6878      	ldr	r0, [r7, #4]
 800f896:	0023      	movs	r3, r4
 800f898:	f000 ff1c 	bl	80106d4 <USB_WritePMA>
 800f89c:	e1d0      	b.n	800fc40 <USB_EPStartXfer+0xa24>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	2086      	movs	r0, #134	; 0x86
 800f8a4:	0040      	lsls	r0, r0, #1
 800f8a6:	183a      	adds	r2, r7, r0
 800f8a8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	18d3      	adds	r3, r2, r3
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	2466      	movs	r4, #102	; 0x66
 800f8ba:	193b      	adds	r3, r7, r4
 800f8bc:	491f      	ldr	r1, [pc, #124]	; (800f93c <USB_EPStartXfer+0x720>)
 800f8be:	400a      	ands	r2, r1
 800f8c0:	801a      	strh	r2, [r3, #0]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	18d3      	adds	r3, r2, r3
 800f8cc:	193a      	adds	r2, r7, r4
 800f8ce:	8812      	ldrh	r2, [r2, #0]
 800f8d0:	491b      	ldr	r1, [pc, #108]	; (800f940 <USB_EPStartXfer+0x724>)
 800f8d2:	430a      	orrs	r2, r1
 800f8d4:	b292      	uxth	r2, r2
 800f8d6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	663b      	str	r3, [r7, #96]	; 0x60
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2250      	movs	r2, #80	; 0x50
 800f8e0:	5a9b      	ldrh	r3, [r3, r2]
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	001a      	movs	r2, r3
 800f8e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8e8:	189b      	adds	r3, r3, r2
 800f8ea:	663b      	str	r3, [r7, #96]	; 0x60
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	00da      	lsls	r2, r3, #3
 800f8f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8f4:	18d3      	adds	r3, r2, r3
 800f8f6:	4a0d      	ldr	r2, [pc, #52]	; (800f92c <USB_EPStartXfer+0x710>)
 800f8f8:	4694      	mov	ip, r2
 800f8fa:	4463      	add	r3, ip
 800f8fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8fe:	183b      	adds	r3, r7, r0
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	b29a      	uxth	r2, r3
 800f904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f906:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f908:	2585      	movs	r5, #133	; 0x85
 800f90a:	006d      	lsls	r5, r5, #1
 800f90c:	197b      	adds	r3, r7, r5
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	8912      	ldrh	r2, [r2, #8]
 800f912:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	6959      	ldr	r1, [r3, #20]
 800f918:	183b      	adds	r3, r7, r0
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	b29c      	uxth	r4, r3
 800f91e:	197b      	adds	r3, r7, r5
 800f920:	881a      	ldrh	r2, [r3, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	0023      	movs	r3, r4
 800f926:	f000 fed5 	bl	80106d4 <USB_WritePMA>
 800f92a:	e189      	b.n	800fc40 <USB_EPStartXfer+0xa24>
 800f92c:	00000402 	.word	0x00000402
 800f930:	ffff83ff 	.word	0xffff83ff
 800f934:	ffff8000 	.word	0xffff8000
 800f938:	00000406 	.word	0x00000406
 800f93c:	ffff8e8f 	.word	0xffff8e8f
 800f940:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	18d3      	adds	r3, r2, r3
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	b29b      	uxth	r3, r3
 800f952:	001a      	movs	r2, r3
 800f954:	2340      	movs	r3, #64	; 0x40
 800f956:	4013      	ands	r3, r2
 800f958:	d100      	bne.n	800f95c <USB_EPStartXfer+0x740>
 800f95a:	e08f      	b.n	800fa7c <USB_EPStartXfer+0x860>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	785b      	ldrb	r3, [r3, #1]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d166      	bne.n	800fa36 <USB_EPStartXfer+0x81a>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	673b      	str	r3, [r7, #112]	; 0x70
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2250      	movs	r2, #80	; 0x50
 800f970:	5a9b      	ldrh	r3, [r3, r2]
 800f972:	b29b      	uxth	r3, r3
 800f974:	001a      	movs	r2, r3
 800f976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f978:	189b      	adds	r3, r3, r2
 800f97a:	673b      	str	r3, [r7, #112]	; 0x70
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	00da      	lsls	r2, r3, #3
 800f982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f984:	18d3      	adds	r3, r2, r3
 800f986:	4adc      	ldr	r2, [pc, #880]	; (800fcf8 <USB_EPStartXfer+0xadc>)
 800f988:	4694      	mov	ip, r2
 800f98a:	4463      	add	r3, ip
 800f98c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f98e:	2386      	movs	r3, #134	; 0x86
 800f990:	005b      	lsls	r3, r3, #1
 800f992:	18fb      	adds	r3, r7, r3
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d110      	bne.n	800f9bc <USB_EPStartXfer+0x7a0>
 800f99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4ad6      	ldr	r2, [pc, #856]	; (800fcfc <USB_EPStartXfer+0xae0>)
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9a8:	801a      	strh	r2, [r3, #0]
 800f9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	4ad3      	ldr	r2, [pc, #844]	; (800fd00 <USB_EPStartXfer+0xae4>)
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9b8:	801a      	strh	r2, [r3, #0]
 800f9ba:	e058      	b.n	800fa6e <USB_EPStartXfer+0x852>
 800f9bc:	2286      	movs	r2, #134	; 0x86
 800f9be:	0052      	lsls	r2, r2, #1
 800f9c0:	18bb      	adds	r3, r7, r2
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b3e      	cmp	r3, #62	; 0x3e
 800f9c6:	d818      	bhi.n	800f9fa <USB_EPStartXfer+0x7de>
 800f9c8:	18bb      	adds	r3, r7, r2
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	085b      	lsrs	r3, r3, #1
 800f9ce:	21f4      	movs	r1, #244	; 0xf4
 800f9d0:	1878      	adds	r0, r7, r1
 800f9d2:	6003      	str	r3, [r0, #0]
 800f9d4:	18bb      	adds	r3, r7, r2
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	4013      	ands	r3, r2
 800f9dc:	d004      	beq.n	800f9e8 <USB_EPStartXfer+0x7cc>
 800f9de:	187b      	adds	r3, r7, r1
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	187a      	adds	r2, r7, r1
 800f9e6:	6013      	str	r3, [r2, #0]
 800f9e8:	23f4      	movs	r3, #244	; 0xf4
 800f9ea:	18fb      	adds	r3, r7, r3
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	029b      	lsls	r3, r3, #10
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f6:	801a      	strh	r2, [r3, #0]
 800f9f8:	e039      	b.n	800fa6e <USB_EPStartXfer+0x852>
 800f9fa:	2286      	movs	r2, #134	; 0x86
 800f9fc:	0052      	lsls	r2, r2, #1
 800f9fe:	18bb      	adds	r3, r7, r2
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	095b      	lsrs	r3, r3, #5
 800fa04:	21f4      	movs	r1, #244	; 0xf4
 800fa06:	1878      	adds	r0, r7, r1
 800fa08:	6003      	str	r3, [r0, #0]
 800fa0a:	18bb      	adds	r3, r7, r2
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	221f      	movs	r2, #31
 800fa10:	4013      	ands	r3, r2
 800fa12:	d104      	bne.n	800fa1e <USB_EPStartXfer+0x802>
 800fa14:	187b      	adds	r3, r7, r1
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	187a      	adds	r2, r7, r1
 800fa1c:	6013      	str	r3, [r2, #0]
 800fa1e:	23f4      	movs	r3, #244	; 0xf4
 800fa20:	18fb      	adds	r3, r7, r3
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	029b      	lsls	r3, r3, #10
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	4ab5      	ldr	r2, [pc, #724]	; (800fd00 <USB_EPStartXfer+0xae4>)
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa32:	801a      	strh	r2, [r3, #0]
 800fa34:	e01b      	b.n	800fa6e <USB_EPStartXfer+0x852>
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	785b      	ldrb	r3, [r3, #1]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d117      	bne.n	800fa6e <USB_EPStartXfer+0x852>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2250      	movs	r2, #80	; 0x50
 800fa42:	5a9b      	ldrh	r3, [r3, r2]
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	001a      	movs	r2, r3
 800fa48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa4a:	189b      	adds	r3, r3, r2
 800fa4c:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	00da      	lsls	r2, r3, #3
 800fa54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa56:	18d3      	adds	r3, r2, r3
 800fa58:	4aa7      	ldr	r2, [pc, #668]	; (800fcf8 <USB_EPStartXfer+0xadc>)
 800fa5a:	4694      	mov	ip, r2
 800fa5c:	4463      	add	r3, ip
 800fa5e:	677b      	str	r3, [r7, #116]	; 0x74
 800fa60:	2386      	movs	r3, #134	; 0x86
 800fa62:	005b      	lsls	r3, r3, #1
 800fa64:	18fb      	adds	r3, r7, r3
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fa6e:	2385      	movs	r3, #133	; 0x85
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	18fb      	adds	r3, r7, r3
 800fa74:	683a      	ldr	r2, [r7, #0]
 800fa76:	8952      	ldrh	r2, [r2, #10]
 800fa78:	801a      	strh	r2, [r3, #0]
 800fa7a:	e09b      	b.n	800fbb4 <USB_EPStartXfer+0x998>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	785b      	ldrb	r3, [r3, #1]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d16b      	bne.n	800fb5c <USB_EPStartXfer+0x940>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2180      	movs	r1, #128	; 0x80
 800fa88:	187a      	adds	r2, r7, r1
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2250      	movs	r2, #80	; 0x50
 800fa90:	5a9b      	ldrh	r3, [r3, r2]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	001a      	movs	r2, r3
 800fa96:	187b      	adds	r3, r7, r1
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	189b      	adds	r3, r3, r2
 800fa9c:	187a      	adds	r2, r7, r1
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	00da      	lsls	r2, r3, #3
 800faa6:	187b      	adds	r3, r7, r1
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	18d3      	adds	r3, r2, r3
 800faac:	4a95      	ldr	r2, [pc, #596]	; (800fd04 <USB_EPStartXfer+0xae8>)
 800faae:	4694      	mov	ip, r2
 800fab0:	4463      	add	r3, ip
 800fab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fab4:	2386      	movs	r3, #134	; 0x86
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	18fb      	adds	r3, r7, r3
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d110      	bne.n	800fae2 <USB_EPStartXfer+0x8c6>
 800fac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	4a8d      	ldr	r2, [pc, #564]	; (800fcfc <USB_EPStartXfer+0xae0>)
 800fac8:	4013      	ands	r3, r2
 800faca:	b29a      	uxth	r2, r3
 800facc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800face:	801a      	strh	r2, [r3, #0]
 800fad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	4a8a      	ldr	r2, [pc, #552]	; (800fd00 <USB_EPStartXfer+0xae4>)
 800fad8:	4313      	orrs	r3, r2
 800fada:	b29a      	uxth	r2, r3
 800fadc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fade:	801a      	strh	r2, [r3, #0]
 800fae0:	e062      	b.n	800fba8 <USB_EPStartXfer+0x98c>
 800fae2:	2286      	movs	r2, #134	; 0x86
 800fae4:	0052      	lsls	r2, r2, #1
 800fae6:	18bb      	adds	r3, r7, r2
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b3e      	cmp	r3, #62	; 0x3e
 800faec:	d818      	bhi.n	800fb20 <USB_EPStartXfer+0x904>
 800faee:	18bb      	adds	r3, r7, r2
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	085b      	lsrs	r3, r3, #1
 800faf4:	21f0      	movs	r1, #240	; 0xf0
 800faf6:	1878      	adds	r0, r7, r1
 800faf8:	6003      	str	r3, [r0, #0]
 800fafa:	18bb      	adds	r3, r7, r2
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2201      	movs	r2, #1
 800fb00:	4013      	ands	r3, r2
 800fb02:	d004      	beq.n	800fb0e <USB_EPStartXfer+0x8f2>
 800fb04:	187b      	adds	r3, r7, r1
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	187a      	adds	r2, r7, r1
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	23f0      	movs	r3, #240	; 0xf0
 800fb10:	18fb      	adds	r3, r7, r3
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	029b      	lsls	r3, r3, #10
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb1c:	801a      	strh	r2, [r3, #0]
 800fb1e:	e043      	b.n	800fba8 <USB_EPStartXfer+0x98c>
 800fb20:	2286      	movs	r2, #134	; 0x86
 800fb22:	0052      	lsls	r2, r2, #1
 800fb24:	18bb      	adds	r3, r7, r2
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	095b      	lsrs	r3, r3, #5
 800fb2a:	21f0      	movs	r1, #240	; 0xf0
 800fb2c:	1878      	adds	r0, r7, r1
 800fb2e:	6003      	str	r3, [r0, #0]
 800fb30:	18bb      	adds	r3, r7, r2
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	221f      	movs	r2, #31
 800fb36:	4013      	ands	r3, r2
 800fb38:	d104      	bne.n	800fb44 <USB_EPStartXfer+0x928>
 800fb3a:	187b      	adds	r3, r7, r1
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	187a      	adds	r2, r7, r1
 800fb42:	6013      	str	r3, [r2, #0]
 800fb44:	23f0      	movs	r3, #240	; 0xf0
 800fb46:	18fb      	adds	r3, r7, r3
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	029b      	lsls	r3, r3, #10
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4a6b      	ldr	r2, [pc, #428]	; (800fd00 <USB_EPStartXfer+0xae4>)
 800fb52:	4313      	orrs	r3, r2
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb58:	801a      	strh	r2, [r3, #0]
 800fb5a:	e025      	b.n	800fba8 <USB_EPStartXfer+0x98c>
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	785b      	ldrb	r3, [r3, #1]
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d121      	bne.n	800fba8 <USB_EPStartXfer+0x98c>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2188      	movs	r1, #136	; 0x88
 800fb68:	187a      	adds	r2, r7, r1
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2250      	movs	r2, #80	; 0x50
 800fb70:	5a9b      	ldrh	r3, [r3, r2]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	001a      	movs	r2, r3
 800fb76:	187b      	adds	r3, r7, r1
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	189b      	adds	r3, r3, r2
 800fb7c:	187a      	adds	r2, r7, r1
 800fb7e:	6013      	str	r3, [r2, #0]
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	00da      	lsls	r2, r3, #3
 800fb86:	187b      	adds	r3, r7, r1
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	18d3      	adds	r3, r2, r3
 800fb8c:	4a5d      	ldr	r2, [pc, #372]	; (800fd04 <USB_EPStartXfer+0xae8>)
 800fb8e:	4694      	mov	ip, r2
 800fb90:	4463      	add	r3, ip
 800fb92:	2184      	movs	r1, #132	; 0x84
 800fb94:	187a      	adds	r2, r7, r1
 800fb96:	6013      	str	r3, [r2, #0]
 800fb98:	2386      	movs	r3, #134	; 0x86
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	18fb      	adds	r3, r7, r3
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	187b      	adds	r3, r7, r1
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fba8:	2385      	movs	r3, #133	; 0x85
 800fbaa:	005b      	lsls	r3, r3, #1
 800fbac:	18fb      	adds	r3, r7, r3
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	8912      	ldrh	r2, [r2, #8]
 800fbb2:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	6959      	ldr	r1, [r3, #20]
 800fbb8:	2386      	movs	r3, #134	; 0x86
 800fbba:	005b      	lsls	r3, r3, #1
 800fbbc:	18fb      	adds	r3, r7, r3
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	b29c      	uxth	r4, r3
 800fbc2:	2385      	movs	r3, #133	; 0x85
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	18fb      	adds	r3, r7, r3
 800fbc8:	881a      	ldrh	r2, [r3, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	0023      	movs	r3, r4
 800fbce:	f000 fd81 	bl	80106d4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	785b      	ldrb	r3, [r3, #1]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d117      	bne.n	800fc0a <USB_EPStartXfer+0x9ee>
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	18d3      	adds	r3, r2, r3
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	2068      	movs	r0, #104	; 0x68
 800fbea:	183b      	adds	r3, r7, r0
 800fbec:	4946      	ldr	r1, [pc, #280]	; (800fd08 <USB_EPStartXfer+0xaec>)
 800fbee:	400a      	ands	r2, r1
 800fbf0:	801a      	strh	r2, [r3, #0]
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	18d3      	adds	r3, r2, r3
 800fbfc:	183a      	adds	r2, r7, r0
 800fbfe:	8812      	ldrh	r2, [r2, #0]
 800fc00:	4942      	ldr	r1, [pc, #264]	; (800fd0c <USB_EPStartXfer+0xaf0>)
 800fc02:	430a      	orrs	r2, r1
 800fc04:	b292      	uxth	r2, r2
 800fc06:	801a      	strh	r2, [r3, #0]
 800fc08:	e01a      	b.n	800fc40 <USB_EPStartXfer+0xa24>
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	785b      	ldrb	r3, [r3, #1]
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d116      	bne.n	800fc40 <USB_EPStartXfer+0xa24>
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	18d3      	adds	r3, r2, r3
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	206a      	movs	r0, #106	; 0x6a
 800fc22:	183b      	adds	r3, r7, r0
 800fc24:	4938      	ldr	r1, [pc, #224]	; (800fd08 <USB_EPStartXfer+0xaec>)
 800fc26:	400a      	ands	r2, r1
 800fc28:	801a      	strh	r2, [r3, #0]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	18d3      	adds	r3, r2, r3
 800fc34:	183a      	adds	r2, r7, r0
 800fc36:	8812      	ldrh	r2, [r2, #0]
 800fc38:	4935      	ldr	r1, [pc, #212]	; (800fd10 <USB_EPStartXfer+0xaf4>)
 800fc3a:	430a      	orrs	r2, r1
 800fc3c:	b292      	uxth	r2, r2
 800fc3e:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	18d3      	adds	r3, r2, r3
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	4b31      	ldr	r3, [pc, #196]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fc50:	2188      	movs	r1, #136	; 0x88
 800fc52:	0049      	lsls	r1, r1, #1
 800fc54:	468c      	mov	ip, r1
 800fc56:	44bc      	add	ip, r7
 800fc58:	4463      	add	r3, ip
 800fc5a:	492f      	ldr	r1, [pc, #188]	; (800fd18 <USB_EPStartXfer+0xafc>)
 800fc5c:	400a      	ands	r2, r1
 800fc5e:	801a      	strh	r2, [r3, #0]
 800fc60:	4b2c      	ldr	r3, [pc, #176]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fc62:	2288      	movs	r2, #136	; 0x88
 800fc64:	0052      	lsls	r2, r2, #1
 800fc66:	4694      	mov	ip, r2
 800fc68:	44bc      	add	ip, r7
 800fc6a:	4463      	add	r3, ip
 800fc6c:	4a29      	ldr	r2, [pc, #164]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fc6e:	2188      	movs	r1, #136	; 0x88
 800fc70:	0049      	lsls	r1, r1, #1
 800fc72:	468c      	mov	ip, r1
 800fc74:	44bc      	add	ip, r7
 800fc76:	4462      	add	r2, ip
 800fc78:	8812      	ldrh	r2, [r2, #0]
 800fc7a:	2110      	movs	r1, #16
 800fc7c:	404a      	eors	r2, r1
 800fc7e:	801a      	strh	r2, [r3, #0]
 800fc80:	4b24      	ldr	r3, [pc, #144]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fc82:	2288      	movs	r2, #136	; 0x88
 800fc84:	0052      	lsls	r2, r2, #1
 800fc86:	4694      	mov	ip, r2
 800fc88:	44bc      	add	ip, r7
 800fc8a:	4463      	add	r3, ip
 800fc8c:	4a21      	ldr	r2, [pc, #132]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fc8e:	2188      	movs	r1, #136	; 0x88
 800fc90:	0049      	lsls	r1, r1, #1
 800fc92:	468c      	mov	ip, r1
 800fc94:	44bc      	add	ip, r7
 800fc96:	4462      	add	r2, ip
 800fc98:	8812      	ldrh	r2, [r2, #0]
 800fc9a:	2120      	movs	r1, #32
 800fc9c:	404a      	eors	r2, r1
 800fc9e:	801a      	strh	r2, [r3, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	18d3      	adds	r3, r2, r3
 800fcaa:	4a1a      	ldr	r2, [pc, #104]	; (800fd14 <USB_EPStartXfer+0xaf8>)
 800fcac:	2188      	movs	r1, #136	; 0x88
 800fcae:	0049      	lsls	r1, r1, #1
 800fcb0:	468c      	mov	ip, r1
 800fcb2:	44bc      	add	ip, r7
 800fcb4:	4462      	add	r2, ip
 800fcb6:	8812      	ldrh	r2, [r2, #0]
 800fcb8:	4918      	ldr	r1, [pc, #96]	; (800fd1c <USB_EPStartXfer+0xb00>)
 800fcba:	430a      	orrs	r2, r1
 800fcbc:	b292      	uxth	r2, r2
 800fcbe:	801a      	strh	r2, [r3, #0]
 800fcc0:	f000 fbc5 	bl	801044e <USB_EPStartXfer+0x1232>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	7b1b      	ldrb	r3, [r3, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d000      	beq.n	800fcce <USB_EPStartXfer+0xab2>
 800fccc:	e0a7      	b.n	800fe1e <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	699a      	ldr	r2, [r3, #24]
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d922      	bls.n	800fd20 <USB_EPStartXfer+0xb04>
      {
        len = ep->maxpacket;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	2186      	movs	r1, #134	; 0x86
 800fce0:	0049      	lsls	r1, r1, #1
 800fce2:	187a      	adds	r2, r7, r1
 800fce4:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	699a      	ldr	r2, [r3, #24]
 800fcea:	187b      	adds	r3, r7, r1
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	1ad2      	subs	r2, r2, r3
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	619a      	str	r2, [r3, #24]
 800fcf4:	e01d      	b.n	800fd32 <USB_EPStartXfer+0xb16>
 800fcf6:	46c0      	nop			; (mov r8, r8)
 800fcf8:	00000406 	.word	0x00000406
 800fcfc:	ffff83ff 	.word	0xffff83ff
 800fd00:	ffff8000 	.word	0xffff8000
 800fd04:	00000402 	.word	0x00000402
 800fd08:	ffff8f8f 	.word	0xffff8f8f
 800fd0c:	ffff80c0 	.word	0xffff80c0
 800fd10:	ffffc080 	.word	0xffffc080
 800fd14:	fffffefe 	.word	0xfffffefe
 800fd18:	ffff8fbf 	.word	0xffff8fbf
 800fd1c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	2286      	movs	r2, #134	; 0x86
 800fd26:	0052      	lsls	r2, r2, #1
 800fd28:	18ba      	adds	r2, r7, r2
 800fd2a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2194      	movs	r1, #148	; 0x94
 800fd36:	187a      	adds	r2, r7, r1
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2250      	movs	r2, #80	; 0x50
 800fd3e:	5a9b      	ldrh	r3, [r3, r2]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	001a      	movs	r2, r3
 800fd44:	187b      	adds	r3, r7, r1
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	189b      	adds	r3, r3, r2
 800fd4a:	187a      	adds	r2, r7, r1
 800fd4c:	6013      	str	r3, [r2, #0]
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	00da      	lsls	r2, r3, #3
 800fd54:	187b      	adds	r3, r7, r1
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	18d3      	adds	r3, r2, r3
 800fd5a:	4abc      	ldr	r2, [pc, #752]	; (801004c <USB_EPStartXfer+0xe30>)
 800fd5c:	4694      	mov	ip, r2
 800fd5e:	4463      	add	r3, ip
 800fd60:	2190      	movs	r1, #144	; 0x90
 800fd62:	187a      	adds	r2, r7, r1
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	2386      	movs	r3, #134	; 0x86
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	18fb      	adds	r3, r7, r3
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d114      	bne.n	800fd9c <USB_EPStartXfer+0xb80>
 800fd72:	187b      	adds	r3, r7, r1
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	4ab5      	ldr	r2, [pc, #724]	; (8010050 <USB_EPStartXfer+0xe34>)
 800fd7c:	4013      	ands	r3, r2
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	187b      	adds	r3, r7, r1
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	801a      	strh	r2, [r3, #0]
 800fd86:	187b      	adds	r3, r7, r1
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	881b      	ldrh	r3, [r3, #0]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	4ab1      	ldr	r2, [pc, #708]	; (8010054 <USB_EPStartXfer+0xe38>)
 800fd90:	4313      	orrs	r3, r2
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	187b      	adds	r3, r7, r1
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	801a      	strh	r2, [r3, #0]
 800fd9a:	e333      	b.n	8010404 <USB_EPStartXfer+0x11e8>
 800fd9c:	2286      	movs	r2, #134	; 0x86
 800fd9e:	0052      	lsls	r2, r2, #1
 800fda0:	18bb      	adds	r3, r7, r2
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b3e      	cmp	r3, #62	; 0x3e
 800fda6:	d81a      	bhi.n	800fdde <USB_EPStartXfer+0xbc2>
 800fda8:	18bb      	adds	r3, r7, r2
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	085b      	lsrs	r3, r3, #1
 800fdae:	21ec      	movs	r1, #236	; 0xec
 800fdb0:	1878      	adds	r0, r7, r1
 800fdb2:	6003      	str	r3, [r0, #0]
 800fdb4:	18bb      	adds	r3, r7, r2
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	4013      	ands	r3, r2
 800fdbc:	d004      	beq.n	800fdc8 <USB_EPStartXfer+0xbac>
 800fdbe:	187b      	adds	r3, r7, r1
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	187a      	adds	r2, r7, r1
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	23ec      	movs	r3, #236	; 0xec
 800fdca:	18fb      	adds	r3, r7, r3
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	029b      	lsls	r3, r3, #10
 800fdd2:	b29a      	uxth	r2, r3
 800fdd4:	2390      	movs	r3, #144	; 0x90
 800fdd6:	18fb      	adds	r3, r7, r3
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	801a      	strh	r2, [r3, #0]
 800fddc:	e312      	b.n	8010404 <USB_EPStartXfer+0x11e8>
 800fdde:	2286      	movs	r2, #134	; 0x86
 800fde0:	0052      	lsls	r2, r2, #1
 800fde2:	18bb      	adds	r3, r7, r2
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	095b      	lsrs	r3, r3, #5
 800fde8:	21ec      	movs	r1, #236	; 0xec
 800fdea:	1878      	adds	r0, r7, r1
 800fdec:	6003      	str	r3, [r0, #0]
 800fdee:	18bb      	adds	r3, r7, r2
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	221f      	movs	r2, #31
 800fdf4:	4013      	ands	r3, r2
 800fdf6:	d104      	bne.n	800fe02 <USB_EPStartXfer+0xbe6>
 800fdf8:	187b      	adds	r3, r7, r1
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	187a      	adds	r2, r7, r1
 800fe00:	6013      	str	r3, [r2, #0]
 800fe02:	23ec      	movs	r3, #236	; 0xec
 800fe04:	18fb      	adds	r3, r7, r3
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	029b      	lsls	r3, r3, #10
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4a91      	ldr	r2, [pc, #580]	; (8010054 <USB_EPStartXfer+0xe38>)
 800fe10:	4313      	orrs	r3, r2
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	2390      	movs	r3, #144	; 0x90
 800fe16:	18fb      	adds	r3, r7, r3
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	801a      	strh	r2, [r3, #0]
 800fe1c:	e2f2      	b.n	8010404 <USB_EPStartXfer+0x11e8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	78db      	ldrb	r3, [r3, #3]
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	d000      	beq.n	800fe28 <USB_EPStartXfer+0xc0c>
 800fe26:	e179      	b.n	801011c <USB_EPStartXfer+0xf00>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	785b      	ldrb	r3, [r3, #1]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d16f      	bne.n	800ff10 <USB_EPStartXfer+0xcf4>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	21b0      	movs	r1, #176	; 0xb0
 800fe34:	187a      	adds	r2, r7, r1
 800fe36:	6013      	str	r3, [r2, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2250      	movs	r2, #80	; 0x50
 800fe3c:	5a9b      	ldrh	r3, [r3, r2]
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	001a      	movs	r2, r3
 800fe42:	187b      	adds	r3, r7, r1
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	189b      	adds	r3, r3, r2
 800fe48:	187a      	adds	r2, r7, r1
 800fe4a:	6013      	str	r3, [r2, #0]
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	00da      	lsls	r2, r3, #3
 800fe52:	187b      	adds	r3, r7, r1
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	18d3      	adds	r3, r2, r3
 800fe58:	4a7f      	ldr	r2, [pc, #508]	; (8010058 <USB_EPStartXfer+0xe3c>)
 800fe5a:	4694      	mov	ip, r2
 800fe5c:	4463      	add	r3, ip
 800fe5e:	21ac      	movs	r1, #172	; 0xac
 800fe60:	187a      	adds	r2, r7, r1
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d114      	bne.n	800fe96 <USB_EPStartXfer+0xc7a>
 800fe6c:	187b      	adds	r3, r7, r1
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	4a76      	ldr	r2, [pc, #472]	; (8010050 <USB_EPStartXfer+0xe34>)
 800fe76:	4013      	ands	r3, r2
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	187b      	adds	r3, r7, r1
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	801a      	strh	r2, [r3, #0]
 800fe80:	187b      	adds	r3, r7, r1
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	4a72      	ldr	r2, [pc, #456]	; (8010054 <USB_EPStartXfer+0xe38>)
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	b29a      	uxth	r2, r3
 800fe8e:	187b      	adds	r3, r7, r1
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	801a      	strh	r2, [r3, #0]
 800fe94:	e060      	b.n	800ff58 <USB_EPStartXfer+0xd3c>
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	2b3e      	cmp	r3, #62	; 0x3e
 800fe9c:	d81a      	bhi.n	800fed4 <USB_EPStartXfer+0xcb8>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	085b      	lsrs	r3, r3, #1
 800fea4:	21e8      	movs	r1, #232	; 0xe8
 800fea6:	187a      	adds	r2, r7, r1
 800fea8:	6013      	str	r3, [r2, #0]
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	2201      	movs	r2, #1
 800feb0:	4013      	ands	r3, r2
 800feb2:	d004      	beq.n	800febe <USB_EPStartXfer+0xca2>
 800feb4:	187b      	adds	r3, r7, r1
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3301      	adds	r3, #1
 800feba:	187a      	adds	r2, r7, r1
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	23e8      	movs	r3, #232	; 0xe8
 800fec0:	18fb      	adds	r3, r7, r3
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	029b      	lsls	r3, r3, #10
 800fec8:	b29a      	uxth	r2, r3
 800feca:	23ac      	movs	r3, #172	; 0xac
 800fecc:	18fb      	adds	r3, r7, r3
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	801a      	strh	r2, [r3, #0]
 800fed2:	e041      	b.n	800ff58 <USB_EPStartXfer+0xd3c>
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	095b      	lsrs	r3, r3, #5
 800feda:	21e8      	movs	r1, #232	; 0xe8
 800fedc:	187a      	adds	r2, r7, r1
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	221f      	movs	r2, #31
 800fee6:	4013      	ands	r3, r2
 800fee8:	d104      	bne.n	800fef4 <USB_EPStartXfer+0xcd8>
 800feea:	187b      	adds	r3, r7, r1
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	3b01      	subs	r3, #1
 800fef0:	187a      	adds	r2, r7, r1
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	23e8      	movs	r3, #232	; 0xe8
 800fef6:	18fb      	adds	r3, r7, r3
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	029b      	lsls	r3, r3, #10
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4a54      	ldr	r2, [pc, #336]	; (8010054 <USB_EPStartXfer+0xe38>)
 800ff02:	4313      	orrs	r3, r2
 800ff04:	b29a      	uxth	r2, r3
 800ff06:	23ac      	movs	r3, #172	; 0xac
 800ff08:	18fb      	adds	r3, r7, r3
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	801a      	strh	r2, [r3, #0]
 800ff0e:	e023      	b.n	800ff58 <USB_EPStartXfer+0xd3c>
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	785b      	ldrb	r3, [r3, #1]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d11f      	bne.n	800ff58 <USB_EPStartXfer+0xd3c>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	21b8      	movs	r1, #184	; 0xb8
 800ff1c:	187a      	adds	r2, r7, r1
 800ff1e:	6013      	str	r3, [r2, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2250      	movs	r2, #80	; 0x50
 800ff24:	5a9b      	ldrh	r3, [r3, r2]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	001a      	movs	r2, r3
 800ff2a:	187b      	adds	r3, r7, r1
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	189b      	adds	r3, r3, r2
 800ff30:	187a      	adds	r2, r7, r1
 800ff32:	6013      	str	r3, [r2, #0]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	00da      	lsls	r2, r3, #3
 800ff3a:	187b      	adds	r3, r7, r1
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	18d3      	adds	r3, r2, r3
 800ff40:	4a45      	ldr	r2, [pc, #276]	; (8010058 <USB_EPStartXfer+0xe3c>)
 800ff42:	4694      	mov	ip, r2
 800ff44:	4463      	add	r3, ip
 800ff46:	21b4      	movs	r1, #180	; 0xb4
 800ff48:	187a      	adds	r2, r7, r1
 800ff4a:	6013      	str	r3, [r2, #0]
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	691b      	ldr	r3, [r3, #16]
 800ff50:	b29a      	uxth	r2, r3
 800ff52:	187b      	adds	r3, r7, r1
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	801a      	strh	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	22a8      	movs	r2, #168	; 0xa8
 800ff5c:	18ba      	adds	r2, r7, r2
 800ff5e:	6013      	str	r3, [r2, #0]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	785b      	ldrb	r3, [r3, #1]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d000      	beq.n	800ff6a <USB_EPStartXfer+0xd4e>
 800ff68:	e078      	b.n	801005c <USB_EPStartXfer+0xe40>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	21a0      	movs	r1, #160	; 0xa0
 800ff6e:	187a      	adds	r2, r7, r1
 800ff70:	6013      	str	r3, [r2, #0]
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2250      	movs	r2, #80	; 0x50
 800ff76:	5a9b      	ldrh	r3, [r3, r2]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	001a      	movs	r2, r3
 800ff7c:	187b      	adds	r3, r7, r1
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	189b      	adds	r3, r3, r2
 800ff82:	187a      	adds	r2, r7, r1
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	00da      	lsls	r2, r3, #3
 800ff8c:	187b      	adds	r3, r7, r1
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	18d3      	adds	r3, r2, r3
 800ff92:	4a2e      	ldr	r2, [pc, #184]	; (801004c <USB_EPStartXfer+0xe30>)
 800ff94:	4694      	mov	ip, r2
 800ff96:	4463      	add	r3, ip
 800ff98:	219c      	movs	r1, #156	; 0x9c
 800ff9a:	187a      	adds	r2, r7, r1
 800ff9c:	6013      	str	r3, [r2, #0]
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d114      	bne.n	800ffd0 <USB_EPStartXfer+0xdb4>
 800ffa6:	187b      	adds	r3, r7, r1
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	881b      	ldrh	r3, [r3, #0]
 800ffac:	b29b      	uxth	r3, r3
 800ffae:	4a28      	ldr	r2, [pc, #160]	; (8010050 <USB_EPStartXfer+0xe34>)
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	187b      	adds	r3, r7, r1
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	801a      	strh	r2, [r3, #0]
 800ffba:	187b      	adds	r3, r7, r1
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	4a24      	ldr	r2, [pc, #144]	; (8010054 <USB_EPStartXfer+0xe38>)
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	187b      	adds	r3, r7, r1
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	801a      	strh	r2, [r3, #0]
 800ffce:	e066      	b.n	801009e <USB_EPStartXfer+0xe82>
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	2b3e      	cmp	r3, #62	; 0x3e
 800ffd6:	d81a      	bhi.n	801000e <USB_EPStartXfer+0xdf2>
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	085b      	lsrs	r3, r3, #1
 800ffde:	21e4      	movs	r1, #228	; 0xe4
 800ffe0:	187a      	adds	r2, r7, r1
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	4013      	ands	r3, r2
 800ffec:	d004      	beq.n	800fff8 <USB_EPStartXfer+0xddc>
 800ffee:	187b      	adds	r3, r7, r1
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	3301      	adds	r3, #1
 800fff4:	187a      	adds	r2, r7, r1
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	23e4      	movs	r3, #228	; 0xe4
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	b29b      	uxth	r3, r3
 8010000:	029b      	lsls	r3, r3, #10
 8010002:	b29a      	uxth	r2, r3
 8010004:	239c      	movs	r3, #156	; 0x9c
 8010006:	18fb      	adds	r3, r7, r3
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	801a      	strh	r2, [r3, #0]
 801000c:	e047      	b.n	801009e <USB_EPStartXfer+0xe82>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	095b      	lsrs	r3, r3, #5
 8010014:	21e4      	movs	r1, #228	; 0xe4
 8010016:	187a      	adds	r2, r7, r1
 8010018:	6013      	str	r3, [r2, #0]
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	221f      	movs	r2, #31
 8010020:	4013      	ands	r3, r2
 8010022:	d104      	bne.n	801002e <USB_EPStartXfer+0xe12>
 8010024:	187b      	adds	r3, r7, r1
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3b01      	subs	r3, #1
 801002a:	187a      	adds	r2, r7, r1
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	23e4      	movs	r3, #228	; 0xe4
 8010030:	18fb      	adds	r3, r7, r3
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	b29b      	uxth	r3, r3
 8010036:	029b      	lsls	r3, r3, #10
 8010038:	b29b      	uxth	r3, r3
 801003a:	4a06      	ldr	r2, [pc, #24]	; (8010054 <USB_EPStartXfer+0xe38>)
 801003c:	4313      	orrs	r3, r2
 801003e:	b29a      	uxth	r2, r3
 8010040:	239c      	movs	r3, #156	; 0x9c
 8010042:	18fb      	adds	r3, r7, r3
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	801a      	strh	r2, [r3, #0]
 8010048:	e029      	b.n	801009e <USB_EPStartXfer+0xe82>
 801004a:	46c0      	nop			; (mov r8, r8)
 801004c:	00000406 	.word	0x00000406
 8010050:	ffff83ff 	.word	0xffff83ff
 8010054:	ffff8000 	.word	0xffff8000
 8010058:	00000402 	.word	0x00000402
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	785b      	ldrb	r3, [r3, #1]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d11c      	bne.n	801009e <USB_EPStartXfer+0xe82>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2250      	movs	r2, #80	; 0x50
 8010068:	5a9b      	ldrh	r3, [r3, r2]
 801006a:	b29b      	uxth	r3, r3
 801006c:	001a      	movs	r2, r3
 801006e:	21a8      	movs	r1, #168	; 0xa8
 8010070:	187b      	adds	r3, r7, r1
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	189b      	adds	r3, r3, r2
 8010076:	187a      	adds	r2, r7, r1
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	00da      	lsls	r2, r3, #3
 8010080:	187b      	adds	r3, r7, r1
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	18d3      	adds	r3, r2, r3
 8010086:	4ad9      	ldr	r2, [pc, #868]	; (80103ec <USB_EPStartXfer+0x11d0>)
 8010088:	4694      	mov	ip, r2
 801008a:	4463      	add	r3, ip
 801008c:	21a4      	movs	r1, #164	; 0xa4
 801008e:	187a      	adds	r2, r7, r1
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	691b      	ldr	r3, [r3, #16]
 8010096:	b29a      	uxth	r2, r3
 8010098:	187b      	adds	r3, r7, r1
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	69db      	ldr	r3, [r3, #28]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d100      	bne.n	80100a8 <USB_EPStartXfer+0xe8c>
 80100a6:	e1ad      	b.n	8010404 <USB_EPStartXfer+0x11e8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	18d2      	adds	r2, r2, r3
 80100b2:	219a      	movs	r1, #154	; 0x9a
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	8812      	ldrh	r2, [r2, #0]
 80100b8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80100ba:	187b      	adds	r3, r7, r1
 80100bc:	881a      	ldrh	r2, [r3, #0]
 80100be:	2380      	movs	r3, #128	; 0x80
 80100c0:	01db      	lsls	r3, r3, #7
 80100c2:	4013      	ands	r3, r2
 80100c4:	d004      	beq.n	80100d0 <USB_EPStartXfer+0xeb4>
 80100c6:	187b      	adds	r3, r7, r1
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	2240      	movs	r2, #64	; 0x40
 80100cc:	4013      	ands	r3, r2
 80100ce:	d10d      	bne.n	80100ec <USB_EPStartXfer+0xed0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80100d0:	219a      	movs	r1, #154	; 0x9a
 80100d2:	187b      	adds	r3, r7, r1
 80100d4:	881a      	ldrh	r2, [r3, #0]
 80100d6:	2380      	movs	r3, #128	; 0x80
 80100d8:	01db      	lsls	r3, r3, #7
 80100da:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80100dc:	d000      	beq.n	80100e0 <USB_EPStartXfer+0xec4>
 80100de:	e191      	b.n	8010404 <USB_EPStartXfer+0x11e8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80100e0:	187b      	adds	r3, r7, r1
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	2240      	movs	r2, #64	; 0x40
 80100e6:	4013      	ands	r3, r2
 80100e8:	d000      	beq.n	80100ec <USB_EPStartXfer+0xed0>
 80100ea:	e18b      	b.n	8010404 <USB_EPStartXfer+0x11e8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	18d3      	adds	r3, r2, r3
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	2098      	movs	r0, #152	; 0x98
 80100fc:	183b      	adds	r3, r7, r0
 80100fe:	49bc      	ldr	r1, [pc, #752]	; (80103f0 <USB_EPStartXfer+0x11d4>)
 8010100:	400a      	ands	r2, r1
 8010102:	801a      	strh	r2, [r3, #0]
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	781b      	ldrb	r3, [r3, #0]
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	18d3      	adds	r3, r2, r3
 801010e:	183a      	adds	r2, r7, r0
 8010110:	8812      	ldrh	r2, [r2, #0]
 8010112:	49b8      	ldr	r1, [pc, #736]	; (80103f4 <USB_EPStartXfer+0x11d8>)
 8010114:	430a      	orrs	r2, r1
 8010116:	b292      	uxth	r2, r2
 8010118:	801a      	strh	r2, [r3, #0]
 801011a:	e173      	b.n	8010404 <USB_EPStartXfer+0x11e8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	78db      	ldrb	r3, [r3, #3]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d000      	beq.n	8010126 <USB_EPStartXfer+0xf0a>
 8010124:	e160      	b.n	80103e8 <USB_EPStartXfer+0x11cc>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	699a      	ldr	r2, [r3, #24]
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	429a      	cmp	r2, r3
 8010130:	d90d      	bls.n	801014e <USB_EPStartXfer+0xf32>
        {
          len = ep->maxpacket;
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	2186      	movs	r1, #134	; 0x86
 8010138:	0049      	lsls	r1, r1, #1
 801013a:	187a      	adds	r2, r7, r1
 801013c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	699a      	ldr	r2, [r3, #24]
 8010142:	187b      	adds	r3, r7, r1
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	1ad2      	subs	r2, r2, r3
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	619a      	str	r2, [r3, #24]
 801014c:	e008      	b.n	8010160 <USB_EPStartXfer+0xf44>
        }
        else
        {
          len = ep->xfer_len;
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	699b      	ldr	r3, [r3, #24]
 8010152:	2286      	movs	r2, #134	; 0x86
 8010154:	0052      	lsls	r2, r2, #1
 8010156:	18ba      	adds	r2, r7, r2
 8010158:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	2200      	movs	r2, #0
 801015e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	785b      	ldrb	r3, [r3, #1]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d000      	beq.n	801016a <USB_EPStartXfer+0xf4e>
 8010168:	e075      	b.n	8010256 <USB_EPStartXfer+0x103a>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	21d0      	movs	r1, #208	; 0xd0
 801016e:	187a      	adds	r2, r7, r1
 8010170:	6013      	str	r3, [r2, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2250      	movs	r2, #80	; 0x50
 8010176:	5a9b      	ldrh	r3, [r3, r2]
 8010178:	b29b      	uxth	r3, r3
 801017a:	001a      	movs	r2, r3
 801017c:	187b      	adds	r3, r7, r1
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	189b      	adds	r3, r3, r2
 8010182:	187a      	adds	r2, r7, r1
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	00da      	lsls	r2, r3, #3
 801018c:	187b      	adds	r3, r7, r1
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	18d3      	adds	r3, r2, r3
 8010192:	4a99      	ldr	r2, [pc, #612]	; (80103f8 <USB_EPStartXfer+0x11dc>)
 8010194:	4694      	mov	ip, r2
 8010196:	4463      	add	r3, ip
 8010198:	21cc      	movs	r1, #204	; 0xcc
 801019a:	187a      	adds	r2, r7, r1
 801019c:	6013      	str	r3, [r2, #0]
 801019e:	2386      	movs	r3, #134	; 0x86
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	18fb      	adds	r3, r7, r3
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d114      	bne.n	80101d4 <USB_EPStartXfer+0xfb8>
 80101aa:	187b      	adds	r3, r7, r1
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	4a92      	ldr	r2, [pc, #584]	; (80103fc <USB_EPStartXfer+0x11e0>)
 80101b4:	4013      	ands	r3, r2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	187b      	adds	r3, r7, r1
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	801a      	strh	r2, [r3, #0]
 80101be:	187b      	adds	r3, r7, r1
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	4a8e      	ldr	r2, [pc, #568]	; (8010400 <USB_EPStartXfer+0x11e4>)
 80101c8:	4313      	orrs	r3, r2
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	187b      	adds	r3, r7, r1
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	801a      	strh	r2, [r3, #0]
 80101d2:	e066      	b.n	80102a2 <USB_EPStartXfer+0x1086>
 80101d4:	2286      	movs	r2, #134	; 0x86
 80101d6:	0052      	lsls	r2, r2, #1
 80101d8:	18bb      	adds	r3, r7, r2
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2b3e      	cmp	r3, #62	; 0x3e
 80101de:	d81a      	bhi.n	8010216 <USB_EPStartXfer+0xffa>
 80101e0:	18bb      	adds	r3, r7, r2
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	085b      	lsrs	r3, r3, #1
 80101e6:	21e0      	movs	r1, #224	; 0xe0
 80101e8:	1878      	adds	r0, r7, r1
 80101ea:	6003      	str	r3, [r0, #0]
 80101ec:	18bb      	adds	r3, r7, r2
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2201      	movs	r2, #1
 80101f2:	4013      	ands	r3, r2
 80101f4:	d004      	beq.n	8010200 <USB_EPStartXfer+0xfe4>
 80101f6:	187b      	adds	r3, r7, r1
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3301      	adds	r3, #1
 80101fc:	187a      	adds	r2, r7, r1
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	23e0      	movs	r3, #224	; 0xe0
 8010202:	18fb      	adds	r3, r7, r3
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	b29b      	uxth	r3, r3
 8010208:	029b      	lsls	r3, r3, #10
 801020a:	b29a      	uxth	r2, r3
 801020c:	23cc      	movs	r3, #204	; 0xcc
 801020e:	18fb      	adds	r3, r7, r3
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	801a      	strh	r2, [r3, #0]
 8010214:	e045      	b.n	80102a2 <USB_EPStartXfer+0x1086>
 8010216:	2286      	movs	r2, #134	; 0x86
 8010218:	0052      	lsls	r2, r2, #1
 801021a:	18bb      	adds	r3, r7, r2
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	095b      	lsrs	r3, r3, #5
 8010220:	21e0      	movs	r1, #224	; 0xe0
 8010222:	1878      	adds	r0, r7, r1
 8010224:	6003      	str	r3, [r0, #0]
 8010226:	18bb      	adds	r3, r7, r2
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	221f      	movs	r2, #31
 801022c:	4013      	ands	r3, r2
 801022e:	d104      	bne.n	801023a <USB_EPStartXfer+0x101e>
 8010230:	187b      	adds	r3, r7, r1
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	3b01      	subs	r3, #1
 8010236:	187a      	adds	r2, r7, r1
 8010238:	6013      	str	r3, [r2, #0]
 801023a:	23e0      	movs	r3, #224	; 0xe0
 801023c:	18fb      	adds	r3, r7, r3
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	b29b      	uxth	r3, r3
 8010242:	029b      	lsls	r3, r3, #10
 8010244:	b29b      	uxth	r3, r3
 8010246:	4a6e      	ldr	r2, [pc, #440]	; (8010400 <USB_EPStartXfer+0x11e4>)
 8010248:	4313      	orrs	r3, r2
 801024a:	b29a      	uxth	r2, r3
 801024c:	23cc      	movs	r3, #204	; 0xcc
 801024e:	18fb      	adds	r3, r7, r3
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	801a      	strh	r2, [r3, #0]
 8010254:	e025      	b.n	80102a2 <USB_EPStartXfer+0x1086>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	785b      	ldrb	r3, [r3, #1]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d121      	bne.n	80102a2 <USB_EPStartXfer+0x1086>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	21d8      	movs	r1, #216	; 0xd8
 8010262:	187a      	adds	r2, r7, r1
 8010264:	6013      	str	r3, [r2, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2250      	movs	r2, #80	; 0x50
 801026a:	5a9b      	ldrh	r3, [r3, r2]
 801026c:	b29b      	uxth	r3, r3
 801026e:	001a      	movs	r2, r3
 8010270:	187b      	adds	r3, r7, r1
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	189b      	adds	r3, r3, r2
 8010276:	187a      	adds	r2, r7, r1
 8010278:	6013      	str	r3, [r2, #0]
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	00da      	lsls	r2, r3, #3
 8010280:	187b      	adds	r3, r7, r1
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	18d3      	adds	r3, r2, r3
 8010286:	4a5c      	ldr	r2, [pc, #368]	; (80103f8 <USB_EPStartXfer+0x11dc>)
 8010288:	4694      	mov	ip, r2
 801028a:	4463      	add	r3, ip
 801028c:	21d4      	movs	r1, #212	; 0xd4
 801028e:	187a      	adds	r2, r7, r1
 8010290:	6013      	str	r3, [r2, #0]
 8010292:	2386      	movs	r3, #134	; 0x86
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	18fb      	adds	r3, r7, r3
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	b29a      	uxth	r2, r3
 801029c:	187b      	adds	r3, r7, r1
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	801a      	strh	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	22c8      	movs	r2, #200	; 0xc8
 80102a6:	18ba      	adds	r2, r7, r2
 80102a8:	6013      	str	r3, [r2, #0]
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	785b      	ldrb	r3, [r3, #1]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d000      	beq.n	80102b4 <USB_EPStartXfer+0x1098>
 80102b2:	e075      	b.n	80103a0 <USB_EPStartXfer+0x1184>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	21c0      	movs	r1, #192	; 0xc0
 80102b8:	187a      	adds	r2, r7, r1
 80102ba:	6013      	str	r3, [r2, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2250      	movs	r2, #80	; 0x50
 80102c0:	5a9b      	ldrh	r3, [r3, r2]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	001a      	movs	r2, r3
 80102c6:	187b      	adds	r3, r7, r1
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	189b      	adds	r3, r3, r2
 80102cc:	187a      	adds	r2, r7, r1
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	00da      	lsls	r2, r3, #3
 80102d6:	187b      	adds	r3, r7, r1
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	18d3      	adds	r3, r2, r3
 80102dc:	4a43      	ldr	r2, [pc, #268]	; (80103ec <USB_EPStartXfer+0x11d0>)
 80102de:	4694      	mov	ip, r2
 80102e0:	4463      	add	r3, ip
 80102e2:	21bc      	movs	r1, #188	; 0xbc
 80102e4:	187a      	adds	r2, r7, r1
 80102e6:	6013      	str	r3, [r2, #0]
 80102e8:	2386      	movs	r3, #134	; 0x86
 80102ea:	005b      	lsls	r3, r3, #1
 80102ec:	18fb      	adds	r3, r7, r3
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d114      	bne.n	801031e <USB_EPStartXfer+0x1102>
 80102f4:	187b      	adds	r3, r7, r1
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	881b      	ldrh	r3, [r3, #0]
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	4a3f      	ldr	r2, [pc, #252]	; (80103fc <USB_EPStartXfer+0x11e0>)
 80102fe:	4013      	ands	r3, r2
 8010300:	b29a      	uxth	r2, r3
 8010302:	187b      	adds	r3, r7, r1
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	801a      	strh	r2, [r3, #0]
 8010308:	187b      	adds	r3, r7, r1
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	b29b      	uxth	r3, r3
 8010310:	4a3b      	ldr	r2, [pc, #236]	; (8010400 <USB_EPStartXfer+0x11e4>)
 8010312:	4313      	orrs	r3, r2
 8010314:	b29a      	uxth	r2, r3
 8010316:	187b      	adds	r3, r7, r1
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	801a      	strh	r2, [r3, #0]
 801031c:	e072      	b.n	8010404 <USB_EPStartXfer+0x11e8>
 801031e:	2286      	movs	r2, #134	; 0x86
 8010320:	0052      	lsls	r2, r2, #1
 8010322:	18bb      	adds	r3, r7, r2
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b3e      	cmp	r3, #62	; 0x3e
 8010328:	d81a      	bhi.n	8010360 <USB_EPStartXfer+0x1144>
 801032a:	18bb      	adds	r3, r7, r2
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	085b      	lsrs	r3, r3, #1
 8010330:	21dc      	movs	r1, #220	; 0xdc
 8010332:	1878      	adds	r0, r7, r1
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	18bb      	adds	r3, r7, r2
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2201      	movs	r2, #1
 801033c:	4013      	ands	r3, r2
 801033e:	d004      	beq.n	801034a <USB_EPStartXfer+0x112e>
 8010340:	187b      	adds	r3, r7, r1
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	187a      	adds	r2, r7, r1
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	23dc      	movs	r3, #220	; 0xdc
 801034c:	18fb      	adds	r3, r7, r3
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	b29b      	uxth	r3, r3
 8010352:	029b      	lsls	r3, r3, #10
 8010354:	b29a      	uxth	r2, r3
 8010356:	23bc      	movs	r3, #188	; 0xbc
 8010358:	18fb      	adds	r3, r7, r3
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	801a      	strh	r2, [r3, #0]
 801035e:	e051      	b.n	8010404 <USB_EPStartXfer+0x11e8>
 8010360:	2286      	movs	r2, #134	; 0x86
 8010362:	0052      	lsls	r2, r2, #1
 8010364:	18bb      	adds	r3, r7, r2
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	095b      	lsrs	r3, r3, #5
 801036a:	21dc      	movs	r1, #220	; 0xdc
 801036c:	1878      	adds	r0, r7, r1
 801036e:	6003      	str	r3, [r0, #0]
 8010370:	18bb      	adds	r3, r7, r2
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	221f      	movs	r2, #31
 8010376:	4013      	ands	r3, r2
 8010378:	d104      	bne.n	8010384 <USB_EPStartXfer+0x1168>
 801037a:	187b      	adds	r3, r7, r1
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3b01      	subs	r3, #1
 8010380:	187a      	adds	r2, r7, r1
 8010382:	6013      	str	r3, [r2, #0]
 8010384:	23dc      	movs	r3, #220	; 0xdc
 8010386:	18fb      	adds	r3, r7, r3
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	b29b      	uxth	r3, r3
 801038c:	029b      	lsls	r3, r3, #10
 801038e:	b29b      	uxth	r3, r3
 8010390:	4a1b      	ldr	r2, [pc, #108]	; (8010400 <USB_EPStartXfer+0x11e4>)
 8010392:	4313      	orrs	r3, r2
 8010394:	b29a      	uxth	r2, r3
 8010396:	23bc      	movs	r3, #188	; 0xbc
 8010398:	18fb      	adds	r3, r7, r3
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	801a      	strh	r2, [r3, #0]
 801039e:	e031      	b.n	8010404 <USB_EPStartXfer+0x11e8>
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	785b      	ldrb	r3, [r3, #1]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d12d      	bne.n	8010404 <USB_EPStartXfer+0x11e8>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2250      	movs	r2, #80	; 0x50
 80103ac:	5a9b      	ldrh	r3, [r3, r2]
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	001a      	movs	r2, r3
 80103b2:	21c8      	movs	r1, #200	; 0xc8
 80103b4:	187b      	adds	r3, r7, r1
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	189b      	adds	r3, r3, r2
 80103ba:	187a      	adds	r2, r7, r1
 80103bc:	6013      	str	r3, [r2, #0]
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	00da      	lsls	r2, r3, #3
 80103c4:	187b      	adds	r3, r7, r1
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	18d3      	adds	r3, r2, r3
 80103ca:	4a08      	ldr	r2, [pc, #32]	; (80103ec <USB_EPStartXfer+0x11d0>)
 80103cc:	4694      	mov	ip, r2
 80103ce:	4463      	add	r3, ip
 80103d0:	21c4      	movs	r1, #196	; 0xc4
 80103d2:	187a      	adds	r2, r7, r1
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	2386      	movs	r3, #134	; 0x86
 80103d8:	005b      	lsls	r3, r3, #1
 80103da:	18fb      	adds	r3, r7, r3
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	b29a      	uxth	r2, r3
 80103e0:	187b      	adds	r3, r7, r1
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	801a      	strh	r2, [r3, #0]
 80103e6:	e00d      	b.n	8010404 <USB_EPStartXfer+0x11e8>
      }
      else
      {
        return HAL_ERROR;
 80103e8:	2301      	movs	r3, #1
 80103ea:	e031      	b.n	8010450 <USB_EPStartXfer+0x1234>
 80103ec:	00000406 	.word	0x00000406
 80103f0:	ffff8f8f 	.word	0xffff8f8f
 80103f4:	ffff80c0 	.word	0xffff80c0
 80103f8:	00000402 	.word	0x00000402
 80103fc:	ffff83ff 	.word	0xffff83ff
 8010400:	ffff8000 	.word	0xffff8000
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	18d3      	adds	r3, r2, r3
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	b29a      	uxth	r2, r3
 8010412:	208e      	movs	r0, #142	; 0x8e
 8010414:	183b      	adds	r3, r7, r0
 8010416:	4910      	ldr	r1, [pc, #64]	; (8010458 <USB_EPStartXfer+0x123c>)
 8010418:	400a      	ands	r2, r1
 801041a:	801a      	strh	r2, [r3, #0]
 801041c:	183b      	adds	r3, r7, r0
 801041e:	183a      	adds	r2, r7, r0
 8010420:	8812      	ldrh	r2, [r2, #0]
 8010422:	2180      	movs	r1, #128	; 0x80
 8010424:	0149      	lsls	r1, r1, #5
 8010426:	404a      	eors	r2, r1
 8010428:	801a      	strh	r2, [r3, #0]
 801042a:	183b      	adds	r3, r7, r0
 801042c:	183a      	adds	r2, r7, r0
 801042e:	8812      	ldrh	r2, [r2, #0]
 8010430:	2180      	movs	r1, #128	; 0x80
 8010432:	0189      	lsls	r1, r1, #6
 8010434:	404a      	eors	r2, r1
 8010436:	801a      	strh	r2, [r3, #0]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	18d3      	adds	r3, r2, r3
 8010442:	183a      	adds	r2, r7, r0
 8010444:	8812      	ldrh	r2, [r2, #0]
 8010446:	4905      	ldr	r1, [pc, #20]	; (801045c <USB_EPStartXfer+0x1240>)
 8010448:	430a      	orrs	r2, r1
 801044a:	b292      	uxth	r2, r2
 801044c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	0018      	movs	r0, r3
 8010452:	46bd      	mov	sp, r7
 8010454:	b044      	add	sp, #272	; 0x110
 8010456:	bdb0      	pop	{r4, r5, r7, pc}
 8010458:	ffffbf8f 	.word	0xffffbf8f
 801045c:	ffff8080 	.word	0xffff8080

08010460 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	785b      	ldrb	r3, [r3, #1]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d01d      	beq.n	80104ae <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	18d3      	adds	r3, r2, r3
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	b29a      	uxth	r2, r3
 8010480:	200c      	movs	r0, #12
 8010482:	183b      	adds	r3, r7, r0
 8010484:	491b      	ldr	r1, [pc, #108]	; (80104f4 <USB_EPSetStall+0x94>)
 8010486:	400a      	ands	r2, r1
 8010488:	801a      	strh	r2, [r3, #0]
 801048a:	183b      	adds	r3, r7, r0
 801048c:	183a      	adds	r2, r7, r0
 801048e:	8812      	ldrh	r2, [r2, #0]
 8010490:	2110      	movs	r1, #16
 8010492:	404a      	eors	r2, r1
 8010494:	801a      	strh	r2, [r3, #0]
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	009b      	lsls	r3, r3, #2
 801049e:	18d3      	adds	r3, r2, r3
 80104a0:	183a      	adds	r2, r7, r0
 80104a2:	8812      	ldrh	r2, [r2, #0]
 80104a4:	4914      	ldr	r1, [pc, #80]	; (80104f8 <USB_EPSetStall+0x98>)
 80104a6:	430a      	orrs	r2, r1
 80104a8:	b292      	uxth	r2, r2
 80104aa:	801a      	strh	r2, [r3, #0]
 80104ac:	e01d      	b.n	80104ea <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	18d3      	adds	r3, r2, r3
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	200e      	movs	r0, #14
 80104be:	183b      	adds	r3, r7, r0
 80104c0:	490e      	ldr	r1, [pc, #56]	; (80104fc <USB_EPSetStall+0x9c>)
 80104c2:	400a      	ands	r2, r1
 80104c4:	801a      	strh	r2, [r3, #0]
 80104c6:	183b      	adds	r3, r7, r0
 80104c8:	183a      	adds	r2, r7, r0
 80104ca:	8812      	ldrh	r2, [r2, #0]
 80104cc:	2180      	movs	r1, #128	; 0x80
 80104ce:	0149      	lsls	r1, r1, #5
 80104d0:	404a      	eors	r2, r1
 80104d2:	801a      	strh	r2, [r3, #0]
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	18d3      	adds	r3, r2, r3
 80104de:	183a      	adds	r2, r7, r0
 80104e0:	8812      	ldrh	r2, [r2, #0]
 80104e2:	4905      	ldr	r1, [pc, #20]	; (80104f8 <USB_EPSetStall+0x98>)
 80104e4:	430a      	orrs	r2, r1
 80104e6:	b292      	uxth	r2, r2
 80104e8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80104ea:	2300      	movs	r3, #0
}
 80104ec:	0018      	movs	r0, r3
 80104ee:	46bd      	mov	sp, r7
 80104f0:	b004      	add	sp, #16
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	ffff8fbf 	.word	0xffff8fbf
 80104f8:	ffff8080 	.word	0xffff8080
 80104fc:	ffffbf8f 	.word	0xffffbf8f

08010500 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	7b1b      	ldrb	r3, [r3, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d000      	beq.n	8010514 <USB_EPClearStall+0x14>
 8010512:	e095      	b.n	8010640 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d046      	beq.n	80105aa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	18d2      	adds	r2, r2, r3
 8010526:	2110      	movs	r1, #16
 8010528:	187b      	adds	r3, r7, r1
 801052a:	8812      	ldrh	r2, [r2, #0]
 801052c:	801a      	strh	r2, [r3, #0]
 801052e:	187b      	adds	r3, r7, r1
 8010530:	881b      	ldrh	r3, [r3, #0]
 8010532:	2240      	movs	r2, #64	; 0x40
 8010534:	4013      	ands	r3, r2
 8010536:	d016      	beq.n	8010566 <USB_EPClearStall+0x66>
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	18d3      	adds	r3, r2, r3
 8010542:	881b      	ldrh	r3, [r3, #0]
 8010544:	b29a      	uxth	r2, r3
 8010546:	200e      	movs	r0, #14
 8010548:	183b      	adds	r3, r7, r0
 801054a:	4940      	ldr	r1, [pc, #256]	; (801064c <USB_EPClearStall+0x14c>)
 801054c:	400a      	ands	r2, r1
 801054e:	801a      	strh	r2, [r3, #0]
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	18d3      	adds	r3, r2, r3
 801055a:	183a      	adds	r2, r7, r0
 801055c:	8812      	ldrh	r2, [r2, #0]
 801055e:	493c      	ldr	r1, [pc, #240]	; (8010650 <USB_EPClearStall+0x150>)
 8010560:	430a      	orrs	r2, r1
 8010562:	b292      	uxth	r2, r2
 8010564:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	78db      	ldrb	r3, [r3, #3]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d068      	beq.n	8010640 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	18d3      	adds	r3, r2, r3
 8010578:	881b      	ldrh	r3, [r3, #0]
 801057a:	b29a      	uxth	r2, r3
 801057c:	200c      	movs	r0, #12
 801057e:	183b      	adds	r3, r7, r0
 8010580:	4934      	ldr	r1, [pc, #208]	; (8010654 <USB_EPClearStall+0x154>)
 8010582:	400a      	ands	r2, r1
 8010584:	801a      	strh	r2, [r3, #0]
 8010586:	183b      	adds	r3, r7, r0
 8010588:	183a      	adds	r2, r7, r0
 801058a:	8812      	ldrh	r2, [r2, #0]
 801058c:	2120      	movs	r1, #32
 801058e:	404a      	eors	r2, r1
 8010590:	801a      	strh	r2, [r3, #0]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	18d3      	adds	r3, r2, r3
 801059c:	183a      	adds	r2, r7, r0
 801059e:	8812      	ldrh	r2, [r2, #0]
 80105a0:	492d      	ldr	r1, [pc, #180]	; (8010658 <USB_EPClearStall+0x158>)
 80105a2:	430a      	orrs	r2, r1
 80105a4:	b292      	uxth	r2, r2
 80105a6:	801a      	strh	r2, [r3, #0]
 80105a8:	e04a      	b.n	8010640 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	18d2      	adds	r2, r2, r3
 80105b4:	2116      	movs	r1, #22
 80105b6:	187b      	adds	r3, r7, r1
 80105b8:	8812      	ldrh	r2, [r2, #0]
 80105ba:	801a      	strh	r2, [r3, #0]
 80105bc:	187b      	adds	r3, r7, r1
 80105be:	881a      	ldrh	r2, [r3, #0]
 80105c0:	2380      	movs	r3, #128	; 0x80
 80105c2:	01db      	lsls	r3, r3, #7
 80105c4:	4013      	ands	r3, r2
 80105c6:	d016      	beq.n	80105f6 <USB_EPClearStall+0xf6>
 80105c8:	687a      	ldr	r2, [r7, #4]
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	18d3      	adds	r3, r2, r3
 80105d2:	881b      	ldrh	r3, [r3, #0]
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	2014      	movs	r0, #20
 80105d8:	183b      	adds	r3, r7, r0
 80105da:	491c      	ldr	r1, [pc, #112]	; (801064c <USB_EPClearStall+0x14c>)
 80105dc:	400a      	ands	r2, r1
 80105de:	801a      	strh	r2, [r3, #0]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	18d3      	adds	r3, r2, r3
 80105ea:	183a      	adds	r2, r7, r0
 80105ec:	8812      	ldrh	r2, [r2, #0]
 80105ee:	491b      	ldr	r1, [pc, #108]	; (801065c <USB_EPClearStall+0x15c>)
 80105f0:	430a      	orrs	r2, r1
 80105f2:	b292      	uxth	r2, r2
 80105f4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	18d3      	adds	r3, r2, r3
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	b29a      	uxth	r2, r3
 8010604:	2012      	movs	r0, #18
 8010606:	183b      	adds	r3, r7, r0
 8010608:	4915      	ldr	r1, [pc, #84]	; (8010660 <USB_EPClearStall+0x160>)
 801060a:	400a      	ands	r2, r1
 801060c:	801a      	strh	r2, [r3, #0]
 801060e:	183b      	adds	r3, r7, r0
 8010610:	183a      	adds	r2, r7, r0
 8010612:	8812      	ldrh	r2, [r2, #0]
 8010614:	2180      	movs	r1, #128	; 0x80
 8010616:	0149      	lsls	r1, r1, #5
 8010618:	404a      	eors	r2, r1
 801061a:	801a      	strh	r2, [r3, #0]
 801061c:	183b      	adds	r3, r7, r0
 801061e:	183a      	adds	r2, r7, r0
 8010620:	8812      	ldrh	r2, [r2, #0]
 8010622:	2180      	movs	r1, #128	; 0x80
 8010624:	0189      	lsls	r1, r1, #6
 8010626:	404a      	eors	r2, r1
 8010628:	801a      	strh	r2, [r3, #0]
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	18d3      	adds	r3, r2, r3
 8010634:	183a      	adds	r2, r7, r0
 8010636:	8812      	ldrh	r2, [r2, #0]
 8010638:	4907      	ldr	r1, [pc, #28]	; (8010658 <USB_EPClearStall+0x158>)
 801063a:	430a      	orrs	r2, r1
 801063c:	b292      	uxth	r2, r2
 801063e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	0018      	movs	r0, r3
 8010644:	46bd      	mov	sp, r7
 8010646:	b006      	add	sp, #24
 8010648:	bd80      	pop	{r7, pc}
 801064a:	46c0      	nop			; (mov r8, r8)
 801064c:	ffff8f8f 	.word	0xffff8f8f
 8010650:	ffff80c0 	.word	0xffff80c0
 8010654:	ffff8fbf 	.word	0xffff8fbf
 8010658:	ffff8080 	.word	0xffff8080
 801065c:	ffffc080 	.word	0xffffc080
 8010660:	ffffbf8f 	.word	0xffffbf8f

08010664 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	000a      	movs	r2, r1
 801066e:	1cfb      	adds	r3, r7, #3
 8010670:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8010672:	1cfb      	adds	r3, r7, #3
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d103      	bne.n	8010682 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	224c      	movs	r2, #76	; 0x4c
 801067e:	2180      	movs	r1, #128	; 0x80
 8010680:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8010682:	2300      	movs	r3, #0
}
 8010684:	0018      	movs	r0, r3
 8010686:	46bd      	mov	sp, r7
 8010688:	b002      	add	sp, #8
 801068a:	bd80      	pop	{r7, pc}

0801068c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2258      	movs	r2, #88	; 0x58
 8010698:	5a9b      	ldrh	r3, [r3, r2]
 801069a:	b29b      	uxth	r3, r3
 801069c:	4a05      	ldr	r2, [pc, #20]	; (80106b4 <USB_DevConnect+0x28>)
 801069e:	4313      	orrs	r3, r2
 80106a0:	b299      	uxth	r1, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2258      	movs	r2, #88	; 0x58
 80106a6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	0018      	movs	r0, r3
 80106ac:	46bd      	mov	sp, r7
 80106ae:	b002      	add	sp, #8
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	46c0      	nop			; (mov r8, r8)
 80106b4:	ffff8000 	.word	0xffff8000

080106b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2244      	movs	r2, #68	; 0x44
 80106c4:	5a9b      	ldrh	r3, [r3, r2]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80106ca:	68fb      	ldr	r3, [r7, #12]
}
 80106cc:	0018      	movs	r0, r3
 80106ce:	46bd      	mov	sp, r7
 80106d0:	b004      	add	sp, #16
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b08c      	sub	sp, #48	; 0x30
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	0019      	movs	r1, r3
 80106e0:	1dbb      	adds	r3, r7, #6
 80106e2:	801a      	strh	r2, [r3, #0]
 80106e4:	1d3b      	adds	r3, r7, #4
 80106e6:	1c0a      	adds	r2, r1, #0
 80106e8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80106ea:	1d3b      	adds	r3, r7, #4
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	3301      	adds	r3, #1
 80106f0:	085b      	lsrs	r3, r3, #1
 80106f2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80106fc:	1dbb      	adds	r3, r7, #6
 80106fe:	881a      	ldrh	r2, [r3, #0]
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	18d3      	adds	r3, r2, r3
 8010704:	2280      	movs	r2, #128	; 0x80
 8010706:	00d2      	lsls	r2, r2, #3
 8010708:	4694      	mov	ip, r2
 801070a:	4463      	add	r3, ip
 801070c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010712:	e01b      	b.n	801074c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8010714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	61bb      	str	r3, [r7, #24]
    pBuf++;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	3301      	adds	r3, #1
 801071e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	b29b      	uxth	r3, r3
 8010726:	021b      	lsls	r3, r3, #8
 8010728:	b29b      	uxth	r3, r3
 801072a:	001a      	movs	r2, r3
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	4313      	orrs	r3, r2
 8010730:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	b29a      	uxth	r2, r3
 8010736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010738:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073c:	3302      	adds	r3, #2
 801073e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8010740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010742:	3301      	adds	r3, #1
 8010744:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8010746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010748:	3b01      	subs	r3, #1
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074e:	2b00      	cmp	r3, #0
 8010750:	d1e0      	bne.n	8010714 <USB_WritePMA+0x40>
  }
}
 8010752:	46c0      	nop			; (mov r8, r8)
 8010754:	46c0      	nop			; (mov r8, r8)
 8010756:	46bd      	mov	sp, r7
 8010758:	b00c      	add	sp, #48	; 0x30
 801075a:	bd80      	pop	{r7, pc}

0801075c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08a      	sub	sp, #40	; 0x28
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	0019      	movs	r1, r3
 8010768:	1dbb      	adds	r3, r7, #6
 801076a:	801a      	strh	r2, [r3, #0]
 801076c:	1d3b      	adds	r3, r7, #4
 801076e:	1c0a      	adds	r2, r1, #0
 8010770:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010772:	1d3b      	adds	r3, r7, #4
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	085b      	lsrs	r3, r3, #1
 8010778:	b29b      	uxth	r3, r3
 801077a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010784:	1dbb      	adds	r3, r7, #6
 8010786:	881a      	ldrh	r2, [r3, #0]
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	18d3      	adds	r3, r2, r3
 801078c:	2280      	movs	r2, #128	; 0x80
 801078e:	00d2      	lsls	r2, r2, #3
 8010790:	4694      	mov	ip, r2
 8010792:	4463      	add	r3, ip
 8010794:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	627b      	str	r3, [r7, #36]	; 0x24
 801079a:	e018      	b.n	80107ce <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	881b      	ldrh	r3, [r3, #0]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	3302      	adds	r3, #2
 80107a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	b2da      	uxtb	r2, r3
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	3301      	adds	r3, #1
 80107b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	0a1b      	lsrs	r3, r3, #8
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	3301      	adds	r3, #1
 80107c6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80107c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ca:	3b01      	subs	r3, #1
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e3      	bne.n	801079c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80107d4:	1d3b      	adds	r3, r7, #4
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	2201      	movs	r2, #1
 80107da:	4013      	ands	r3, r2
 80107dc:	b29b      	uxth	r3, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d007      	beq.n	80107f2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80107e2:	6a3b      	ldr	r3, [r7, #32]
 80107e4:	881b      	ldrh	r3, [r3, #0]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	701a      	strb	r2, [r3, #0]
  }
}
 80107f2:	46c0      	nop			; (mov r8, r8)
 80107f4:	46bd      	mov	sp, r7
 80107f6:	b00a      	add	sp, #40	; 0x28
 80107f8:	bd80      	pop	{r7, pc}

080107fa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	000a      	movs	r2, r1
 8010804:	1cfb      	adds	r3, r7, #3
 8010806:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8010808:	230f      	movs	r3, #15
 801080a:	18fb      	adds	r3, r7, r3
 801080c:	2200      	movs	r2, #0
 801080e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	7c1b      	ldrb	r3, [r3, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d116      	bne.n	8010846 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010818:	2380      	movs	r3, #128	; 0x80
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	2202      	movs	r2, #2
 8010820:	2181      	movs	r1, #129	; 0x81
 8010822:	f002 f88e 	bl	8012942 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2201      	movs	r2, #1
 801082a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801082c:	2380      	movs	r3, #128	; 0x80
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	2202      	movs	r2, #2
 8010834:	2101      	movs	r1, #1
 8010836:	f002 f884 	bl	8012942 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	23b6      	movs	r3, #182	; 0xb6
 801083e:	005b      	lsls	r3, r3, #1
 8010840:	2101      	movs	r1, #1
 8010842:	50d1      	str	r1, [r2, r3]
 8010844:	e013      	b.n	801086e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	2340      	movs	r3, #64	; 0x40
 801084a:	2202      	movs	r2, #2
 801084c:	2181      	movs	r1, #129	; 0x81
 801084e:	f002 f878 	bl	8012942 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	2340      	movs	r3, #64	; 0x40
 801085c:	2202      	movs	r2, #2
 801085e:	2101      	movs	r1, #1
 8010860:	f002 f86f 	bl	8012942 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	23b6      	movs	r3, #182	; 0xb6
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	2101      	movs	r1, #1
 801086c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	2308      	movs	r3, #8
 8010872:	2203      	movs	r2, #3
 8010874:	2182      	movs	r1, #130	; 0x82
 8010876:	f002 f864 	bl	8012942 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2201      	movs	r2, #1
 801087e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010880:	2387      	movs	r3, #135	; 0x87
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	0018      	movs	r0, r3
 8010886:	f002 f9f5 	bl	8012c74 <USBD_static_malloc>
 801088a:	0001      	movs	r1, r0
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	23ae      	movs	r3, #174	; 0xae
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	23ae      	movs	r3, #174	; 0xae
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	58d3      	ldr	r3, [r2, r3]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d104      	bne.n	80108aa <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80108a0:	230f      	movs	r3, #15
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	2201      	movs	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
 80108a8:	e02c      	b.n	8010904 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	23ae      	movs	r3, #174	; 0xae
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	58d3      	ldr	r3, [r2, r3]
 80108b2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	23af      	movs	r3, #175	; 0xaf
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	58d3      	ldr	r3, [r2, r3]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	2385      	movs	r3, #133	; 0x85
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	2100      	movs	r1, #0
 80108c8:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	2386      	movs	r3, #134	; 0x86
 80108ce:	009b      	lsls	r3, r3, #2
 80108d0:	2100      	movs	r1, #0
 80108d2:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	7c1b      	ldrb	r3, [r3, #16]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10a      	bne.n	80108f2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	2381      	movs	r3, #129	; 0x81
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	58d2      	ldr	r2, [r2, r3]
 80108e4:	2380      	movs	r3, #128	; 0x80
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	2101      	movs	r1, #1
 80108ec:	f002 f974 	bl	8012bd8 <USBD_LL_PrepareReceive>
 80108f0:	e008      	b.n	8010904 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	2381      	movs	r3, #129	; 0x81
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	58d2      	ldr	r2, [r2, r3]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	2340      	movs	r3, #64	; 0x40
 80108fe:	2101      	movs	r1, #1
 8010900:	f002 f96a 	bl	8012bd8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010904:	230f      	movs	r3, #15
 8010906:	18fb      	adds	r3, r7, r3
 8010908:	781b      	ldrb	r3, [r3, #0]
}
 801090a:	0018      	movs	r0, r3
 801090c:	46bd      	mov	sp, r7
 801090e:	b004      	add	sp, #16
 8010910:	bd80      	pop	{r7, pc}

08010912 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b084      	sub	sp, #16
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	000a      	movs	r2, r1
 801091c:	1cfb      	adds	r3, r7, #3
 801091e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8010920:	230f      	movs	r3, #15
 8010922:	18fb      	adds	r3, r7, r3
 8010924:	2200      	movs	r2, #0
 8010926:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2181      	movs	r1, #129	; 0x81
 801092c:	0018      	movs	r0, r3
 801092e:	f002 f83f 	bl	80129b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2101      	movs	r1, #1
 801093c:	0018      	movs	r0, r3
 801093e:	f002 f837 	bl	80129b0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	23b6      	movs	r3, #182	; 0xb6
 8010946:	005b      	lsls	r3, r3, #1
 8010948:	2100      	movs	r1, #0
 801094a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2182      	movs	r1, #130	; 0x82
 8010950:	0018      	movs	r0, r3
 8010952:	f002 f82d 	bl	80129b0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	23ae      	movs	r3, #174	; 0xae
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	58d3      	ldr	r3, [r2, r3]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d011      	beq.n	801098c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010968:	687a      	ldr	r2, [r7, #4]
 801096a:	23af      	movs	r3, #175	; 0xaf
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	58d3      	ldr	r3, [r2, r3]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	23ae      	movs	r3, #174	; 0xae
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	58d3      	ldr	r3, [r2, r3]
 801097c:	0018      	movs	r0, r3
 801097e:	f002 f985 	bl	8012c8c <USBD_static_free>
    pdev->pClassData = NULL;
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	23ae      	movs	r3, #174	; 0xae
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	2100      	movs	r1, #0
 801098a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801098c:	230f      	movs	r3, #15
 801098e:	18fb      	adds	r3, r7, r3
 8010990:	781b      	ldrb	r3, [r3, #0]
}
 8010992:	0018      	movs	r0, r3
 8010994:	46bd      	mov	sp, r7
 8010996:	b004      	add	sp, #16
 8010998:	bd80      	pop	{r7, pc}
	...

0801099c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	23ae      	movs	r3, #174	; 0xae
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	58d3      	ldr	r3, [r2, r3]
 80109ae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80109b0:	230f      	movs	r3, #15
 80109b2:	18fb      	adds	r3, r7, r3
 80109b4:	2200      	movs	r2, #0
 80109b6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80109b8:	230c      	movs	r3, #12
 80109ba:	18fb      	adds	r3, r7, r3
 80109bc:	2200      	movs	r2, #0
 80109be:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80109c0:	2317      	movs	r3, #23
 80109c2:	18fb      	adds	r3, r7, r3
 80109c4:	2200      	movs	r2, #0
 80109c6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	001a      	movs	r2, r3
 80109ce:	2360      	movs	r3, #96	; 0x60
 80109d0:	4013      	ands	r3, r2
 80109d2:	d03d      	beq.n	8010a50 <USBD_CDC_Setup+0xb4>
 80109d4:	2b20      	cmp	r3, #32
 80109d6:	d000      	beq.n	80109da <USBD_CDC_Setup+0x3e>
 80109d8:	e094      	b.n	8010b04 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	88db      	ldrh	r3, [r3, #6]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d02b      	beq.n	8010a3a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	b25b      	sxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	da12      	bge.n	8010a12 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	23af      	movs	r3, #175	; 0xaf
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	58d3      	ldr	r3, [r2, r3]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	683a      	ldr	r2, [r7, #0]
 80109f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80109fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	88d2      	ldrh	r2, [r2, #6]
 8010a00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010a02:	6939      	ldr	r1, [r7, #16]
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	88da      	ldrh	r2, [r3, #6]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	f001 fbb2 	bl	8012174 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8010a10:	e083      	b.n	8010b1a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	7859      	ldrb	r1, [r3, #1]
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	2380      	movs	r3, #128	; 0x80
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	88db      	ldrh	r3, [r3, #6]
 8010a22:	b2d9      	uxtb	r1, r3
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	4a40      	ldr	r2, [pc, #256]	; (8010b28 <USBD_CDC_Setup+0x18c>)
 8010a28:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010a2a:	6939      	ldr	r1, [r7, #16]
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	88da      	ldrh	r2, [r3, #6]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	0018      	movs	r0, r3
 8010a34:	f001 fbd1 	bl	80121da <USBD_CtlPrepareRx>
      break;
 8010a38:	e06f      	b.n	8010b1a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	23af      	movs	r3, #175	; 0xaf
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	58d3      	ldr	r3, [r2, r3]
 8010a42:	689b      	ldr	r3, [r3, #8]
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	7850      	ldrb	r0, [r2, #1]
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	4798      	blx	r3
      break;
 8010a4e:	e064      	b.n	8010b1a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	785b      	ldrb	r3, [r3, #1]
 8010a54:	2b0b      	cmp	r3, #11
 8010a56:	d037      	beq.n	8010ac8 <USBD_CDC_Setup+0x12c>
 8010a58:	dc47      	bgt.n	8010aea <USBD_CDC_Setup+0x14e>
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d002      	beq.n	8010a64 <USBD_CDC_Setup+0xc8>
 8010a5e:	2b0a      	cmp	r3, #10
 8010a60:	d019      	beq.n	8010a96 <USBD_CDC_Setup+0xfa>
 8010a62:	e042      	b.n	8010aea <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	23a7      	movs	r3, #167	; 0xa7
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	5cd3      	ldrb	r3, [r2, r3]
 8010a6c:	2b03      	cmp	r3, #3
 8010a6e:	d107      	bne.n	8010a80 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8010a70:	230c      	movs	r3, #12
 8010a72:	18f9      	adds	r1, r7, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2202      	movs	r2, #2
 8010a78:	0018      	movs	r0, r3
 8010a7a:	f001 fb7b 	bl	8012174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010a7e:	e040      	b.n	8010b02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	0011      	movs	r1, r2
 8010a86:	0018      	movs	r0, r3
 8010a88:	f001 faf6 	bl	8012078 <USBD_CtlError>
            ret = USBD_FAIL;
 8010a8c:	2317      	movs	r3, #23
 8010a8e:	18fb      	adds	r3, r7, r3
 8010a90:	2202      	movs	r2, #2
 8010a92:	701a      	strb	r2, [r3, #0]
          break;
 8010a94:	e035      	b.n	8010b02 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	23a7      	movs	r3, #167	; 0xa7
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	5cd3      	ldrb	r3, [r2, r3]
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d107      	bne.n	8010ab2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8010aa2:	230f      	movs	r3, #15
 8010aa4:	18f9      	adds	r1, r7, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f001 fb62 	bl	8012174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010ab0:	e027      	b.n	8010b02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	0011      	movs	r1, r2
 8010ab8:	0018      	movs	r0, r3
 8010aba:	f001 fadd 	bl	8012078 <USBD_CtlError>
            ret = USBD_FAIL;
 8010abe:	2317      	movs	r3, #23
 8010ac0:	18fb      	adds	r3, r7, r3
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	701a      	strb	r2, [r3, #0]
          break;
 8010ac6:	e01c      	b.n	8010b02 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	23a7      	movs	r3, #167	; 0xa7
 8010acc:	009b      	lsls	r3, r3, #2
 8010ace:	5cd3      	ldrb	r3, [r2, r3]
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d015      	beq.n	8010b00 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	0011      	movs	r1, r2
 8010ada:	0018      	movs	r0, r3
 8010adc:	f001 facc 	bl	8012078 <USBD_CtlError>
            ret = USBD_FAIL;
 8010ae0:	2317      	movs	r3, #23
 8010ae2:	18fb      	adds	r3, r7, r3
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8010ae8:	e00a      	b.n	8010b00 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	0011      	movs	r1, r2
 8010af0:	0018      	movs	r0, r3
 8010af2:	f001 fac1 	bl	8012078 <USBD_CtlError>
          ret = USBD_FAIL;
 8010af6:	2317      	movs	r3, #23
 8010af8:	18fb      	adds	r3, r7, r3
 8010afa:	2202      	movs	r2, #2
 8010afc:	701a      	strb	r2, [r3, #0]
          break;
 8010afe:	e000      	b.n	8010b02 <USBD_CDC_Setup+0x166>
          break;
 8010b00:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8010b02:	e00a      	b.n	8010b1a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	0011      	movs	r1, r2
 8010b0a:	0018      	movs	r0, r3
 8010b0c:	f001 fab4 	bl	8012078 <USBD_CtlError>
      ret = USBD_FAIL;
 8010b10:	2317      	movs	r3, #23
 8010b12:	18fb      	adds	r3, r7, r3
 8010b14:	2202      	movs	r2, #2
 8010b16:	701a      	strb	r2, [r3, #0]
      break;
 8010b18:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8010b1a:	2317      	movs	r3, #23
 8010b1c:	18fb      	adds	r3, r7, r3
 8010b1e:	781b      	ldrb	r3, [r3, #0]
}
 8010b20:	0018      	movs	r0, r3
 8010b22:	46bd      	mov	sp, r7
 8010b24:	b006      	add	sp, #24
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	00000201 	.word	0x00000201

08010b2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
 8010b34:	000a      	movs	r2, r1
 8010b36:	1cfb      	adds	r3, r7, #3
 8010b38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	23ae      	movs	r3, #174	; 0xae
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	58d3      	ldr	r3, [r2, r3]
 8010b42:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	23b0      	movs	r3, #176	; 0xb0
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	58d3      	ldr	r3, [r2, r3]
 8010b4c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	23ae      	movs	r3, #174	; 0xae
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	58d3      	ldr	r3, [r2, r3]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d03e      	beq.n	8010bd8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010b5a:	1cfb      	adds	r3, r7, #3
 8010b5c:	781a      	ldrb	r2, [r3, #0]
 8010b5e:	6879      	ldr	r1, [r7, #4]
 8010b60:	0013      	movs	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	189b      	adds	r3, r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	18cb      	adds	r3, r1, r3
 8010b6a:	331c      	adds	r3, #28
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d02b      	beq.n	8010bca <USBD_CDC_DataIn+0x9e>
 8010b72:	1cfb      	adds	r3, r7, #3
 8010b74:	781a      	ldrb	r2, [r3, #0]
 8010b76:	6879      	ldr	r1, [r7, #4]
 8010b78:	0013      	movs	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	189b      	adds	r3, r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	18cb      	adds	r3, r1, r3
 8010b82:	331c      	adds	r3, #28
 8010b84:	6818      	ldr	r0, [r3, #0]
 8010b86:	1cfb      	adds	r3, r7, #3
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	68b9      	ldr	r1, [r7, #8]
 8010b8c:	0013      	movs	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	189b      	adds	r3, r3, r2
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	18cb      	adds	r3, r1, r3
 8010b96:	3338      	adds	r3, #56	; 0x38
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	0019      	movs	r1, r3
 8010b9c:	f7ef fb56 	bl	800024c <__aeabi_uidivmod>
 8010ba0:	1e0b      	subs	r3, r1, #0
 8010ba2:	d112      	bne.n	8010bca <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010ba4:	1cfb      	adds	r3, r7, #3
 8010ba6:	781a      	ldrb	r2, [r3, #0]
 8010ba8:	6879      	ldr	r1, [r7, #4]
 8010baa:	0013      	movs	r3, r2
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	189b      	adds	r3, r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	18cb      	adds	r3, r1, r3
 8010bb4:	331c      	adds	r3, #28
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010bba:	1cfb      	adds	r3, r7, #3
 8010bbc:	7819      	ldrb	r1, [r3, #0]
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f001 ffd1 	bl	8012b6a <USBD_LL_Transmit>
 8010bc8:	e004      	b.n	8010bd4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8010bca:	68fa      	ldr	r2, [r7, #12]
 8010bcc:	2385      	movs	r3, #133	; 0x85
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	e000      	b.n	8010bda <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8010bd8:	2302      	movs	r3, #2
  }
}
 8010bda:	0018      	movs	r0, r3
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	b004      	add	sp, #16
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b084      	sub	sp, #16
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	000a      	movs	r2, r1
 8010bec:	1cfb      	adds	r3, r7, #3
 8010bee:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	23ae      	movs	r3, #174	; 0xae
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	58d3      	ldr	r3, [r2, r3]
 8010bf8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010bfa:	1cfb      	adds	r3, r7, #3
 8010bfc:	781a      	ldrb	r2, [r3, #0]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	0011      	movs	r1, r2
 8010c02:	0018      	movs	r0, r3
 8010c04:	f002 f81f 	bl	8012c46 <USBD_LL_GetRxDataSize>
 8010c08:	0001      	movs	r1, r0
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	2383      	movs	r3, #131	; 0x83
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	23ae      	movs	r3, #174	; 0xae
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	58d3      	ldr	r3, [r2, r3]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d011      	beq.n	8010c42 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	23af      	movs	r3, #175	; 0xaf
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	58d3      	ldr	r3, [r2, r3]
 8010c26:	68da      	ldr	r2, [r3, #12]
 8010c28:	68f9      	ldr	r1, [r7, #12]
 8010c2a:	2381      	movs	r3, #129	; 0x81
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	58c8      	ldr	r0, [r1, r3]
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2183      	movs	r1, #131	; 0x83
 8010c34:	0089      	lsls	r1, r1, #2
 8010c36:	468c      	mov	ip, r1
 8010c38:	4463      	add	r3, ip
 8010c3a:	0019      	movs	r1, r3
 8010c3c:	4790      	blx	r2

    return USBD_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e000      	b.n	8010c44 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8010c42:	2302      	movs	r3, #2
  }
}
 8010c44:	0018      	movs	r0, r3
 8010c46:	46bd      	mov	sp, r7
 8010c48:	b004      	add	sp, #16
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010c4c:	b590      	push	{r4, r7, lr}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	23ae      	movs	r3, #174	; 0xae
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	58d3      	ldr	r3, [r2, r3]
 8010c5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	23af      	movs	r3, #175	; 0xaf
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	58d3      	ldr	r3, [r2, r3]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d019      	beq.n	8010c9e <USBD_CDC_EP0_RxReady+0x52>
 8010c6a:	68fa      	ldr	r2, [r7, #12]
 8010c6c:	2380      	movs	r3, #128	; 0x80
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	5cd3      	ldrb	r3, [r2, r3]
 8010c72:	2bff      	cmp	r3, #255	; 0xff
 8010c74:	d013      	beq.n	8010c9e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	23af      	movs	r3, #175	; 0xaf
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	58d3      	ldr	r3, [r2, r3]
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	68f9      	ldr	r1, [r7, #12]
 8010c82:	2280      	movs	r2, #128	; 0x80
 8010c84:	0092      	lsls	r2, r2, #2
 8010c86:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8010c88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010c8a:	68fa      	ldr	r2, [r7, #12]
 8010c8c:	4c06      	ldr	r4, [pc, #24]	; (8010ca8 <USBD_CDC_EP0_RxReady+0x5c>)
 8010c8e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010c90:	b292      	uxth	r2, r2
 8010c92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	2380      	movs	r3, #128	; 0x80
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	21ff      	movs	r1, #255	; 0xff
 8010c9c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8010c9e:	2300      	movs	r3, #0
}
 8010ca0:	0018      	movs	r0, r3
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	b005      	add	sp, #20
 8010ca6:	bd90      	pop	{r4, r7, pc}
 8010ca8:	00000201 	.word	0x00000201

08010cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2243      	movs	r2, #67	; 0x43
 8010cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010cba:	4b02      	ldr	r3, [pc, #8]	; (8010cc4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8010cbc:	0018      	movs	r0, r3
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	b002      	add	sp, #8
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	2000010c 	.word	0x2000010c

08010cc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2243      	movs	r2, #67	; 0x43
 8010cd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010cd6:	4b02      	ldr	r3, [pc, #8]	; (8010ce0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8010cd8:	0018      	movs	r0, r3
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	b002      	add	sp, #8
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	200000c8 	.word	0x200000c8

08010ce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2243      	movs	r2, #67	; 0x43
 8010cf0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010cf2:	4b02      	ldr	r3, [pc, #8]	; (8010cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8010cf4:	0018      	movs	r0, r3
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	b002      	add	sp, #8
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	20000150 	.word	0x20000150

08010d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	220a      	movs	r2, #10
 8010d0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010d0e:	4b02      	ldr	r3, [pc, #8]	; (8010d18 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8010d10:	0018      	movs	r0, r3
 8010d12:	46bd      	mov	sp, r7
 8010d14:	b002      	add	sp, #8
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	20000084 	.word	0x20000084

08010d1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010d26:	200f      	movs	r0, #15
 8010d28:	183b      	adds	r3, r7, r0
 8010d2a:	2202      	movs	r2, #2
 8010d2c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d007      	beq.n	8010d44 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8010d34:	687a      	ldr	r2, [r7, #4]
 8010d36:	23af      	movs	r3, #175	; 0xaf
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	6839      	ldr	r1, [r7, #0]
 8010d3c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8010d3e:	183b      	adds	r3, r7, r0
 8010d40:	2200      	movs	r2, #0
 8010d42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8010d44:	230f      	movs	r3, #15
 8010d46:	18fb      	adds	r3, r7, r3
 8010d48:	781b      	ldrb	r3, [r3, #0]
}
 8010d4a:	0018      	movs	r0, r3
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	b004      	add	sp, #16
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b086      	sub	sp, #24
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	60f8      	str	r0, [r7, #12]
 8010d5a:	60b9      	str	r1, [r7, #8]
 8010d5c:	1dbb      	adds	r3, r7, #6
 8010d5e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	23ae      	movs	r3, #174	; 0xae
 8010d64:	009b      	lsls	r3, r3, #2
 8010d66:	58d3      	ldr	r3, [r2, r3]
 8010d68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010d6a:	697a      	ldr	r2, [r7, #20]
 8010d6c:	2382      	movs	r3, #130	; 0x82
 8010d6e:	009b      	lsls	r3, r3, #2
 8010d70:	68b9      	ldr	r1, [r7, #8]
 8010d72:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8010d74:	1dbb      	adds	r3, r7, #6
 8010d76:	8819      	ldrh	r1, [r3, #0]
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	2384      	movs	r3, #132	; 0x84
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	0018      	movs	r0, r3
 8010d84:	46bd      	mov	sp, r7
 8010d86:	b006      	add	sp, #24
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	23ae      	movs	r3, #174	; 0xae
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	58d3      	ldr	r3, [r2, r3]
 8010d9c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	2381      	movs	r3, #129	; 0x81
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	6839      	ldr	r1, [r7, #0]
 8010da6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	0018      	movs	r0, r3
 8010dac:	46bd      	mov	sp, r7
 8010dae:	b004      	add	sp, #16
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	23ae      	movs	r3, #174	; 0xae
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	58d3      	ldr	r3, [r2, r3]
 8010dc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	23ae      	movs	r3, #174	; 0xae
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	58d3      	ldr	r3, [r2, r3]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d022      	beq.n	8010e16 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8010dd0:	68fa      	ldr	r2, [r7, #12]
 8010dd2:	2385      	movs	r3, #133	; 0x85
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	58d3      	ldr	r3, [r2, r3]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d11a      	bne.n	8010e12 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	2385      	movs	r3, #133	; 0x85
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	2101      	movs	r1, #1
 8010de4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	2384      	movs	r3, #132	; 0x84
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	58d2      	ldr	r2, [r2, r3]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	2382      	movs	r3, #130	; 0x82
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	2384      	movs	r3, #132	; 0x84
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	000a      	movs	r2, r1
 8010e08:	2181      	movs	r1, #129	; 0x81
 8010e0a:	f001 feae 	bl	8012b6a <USBD_LL_Transmit>

      return USBD_OK;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e002      	b.n	8010e18 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8010e12:	2301      	movs	r3, #1
 8010e14:	e000      	b.n	8010e18 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8010e16:	2302      	movs	r3, #2
  }
}
 8010e18:	0018      	movs	r0, r3
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	b004      	add	sp, #16
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	23ae      	movs	r3, #174	; 0xae
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	58d3      	ldr	r3, [r2, r3]
 8010e30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	23ae      	movs	r3, #174	; 0xae
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	58d3      	ldr	r3, [r2, r3]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d019      	beq.n	8010e72 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	7c1b      	ldrb	r3, [r3, #16]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10a      	bne.n	8010e5c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	2381      	movs	r3, #129	; 0x81
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	58d2      	ldr	r2, [r2, r3]
 8010e4e:	2380      	movs	r3, #128	; 0x80
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	2101      	movs	r1, #1
 8010e56:	f001 febf 	bl	8012bd8 <USBD_LL_PrepareReceive>
 8010e5a:	e008      	b.n	8010e6e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	2381      	movs	r3, #129	; 0x81
 8010e60:	009b      	lsls	r3, r3, #2
 8010e62:	58d2      	ldr	r2, [r2, r3]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	2340      	movs	r3, #64	; 0x40
 8010e68:	2101      	movs	r1, #1
 8010e6a:	f001 feb5 	bl	8012bd8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e000      	b.n	8010e74 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8010e72:	2302      	movs	r3, #2
  }
}
 8010e74:	0018      	movs	r0, r3
 8010e76:	46bd      	mov	sp, r7
 8010e78:	b004      	add	sp, #16
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	1dfb      	adds	r3, r7, #7
 8010e88:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d101      	bne.n	8010e94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010e90:	2302      	movs	r3, #2
 8010e92:	e020      	b.n	8010ed6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8010e94:	68fa      	ldr	r2, [r7, #12]
 8010e96:	23ad      	movs	r3, #173	; 0xad
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	58d3      	ldr	r3, [r2, r3]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d004      	beq.n	8010eaa <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	23ad      	movs	r3, #173	; 0xad
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	23ac      	movs	r3, #172	; 0xac
 8010eb4:	009b      	lsls	r3, r3, #2
 8010eb6:	68b9      	ldr	r1, [r7, #8]
 8010eb8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	23a7      	movs	r3, #167	; 0xa7
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	1dfa      	adds	r2, r7, #7
 8010ec8:	7812      	ldrb	r2, [r2, #0]
 8010eca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	0018      	movs	r0, r3
 8010ed0:	f001 fcae 	bl	8012830 <USBD_LL_Init>

  return USBD_OK;
 8010ed4:	2300      	movs	r3, #0
}
 8010ed6:	0018      	movs	r0, r3
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	b004      	add	sp, #16
 8010edc:	bd80      	pop	{r7, pc}

08010ede <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8010ee8:	200f      	movs	r0, #15
 8010eea:	183b      	adds	r3, r7, r0
 8010eec:	2200      	movs	r2, #0
 8010eee:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d008      	beq.n	8010f08 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	23ad      	movs	r3, #173	; 0xad
 8010efa:	009b      	lsls	r3, r3, #2
 8010efc:	6839      	ldr	r1, [r7, #0]
 8010efe:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8010f00:	183b      	adds	r3, r7, r0
 8010f02:	2200      	movs	r2, #0
 8010f04:	701a      	strb	r2, [r3, #0]
 8010f06:	e003      	b.n	8010f10 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010f08:	230f      	movs	r3, #15
 8010f0a:	18fb      	adds	r3, r7, r3
 8010f0c:	2202      	movs	r2, #2
 8010f0e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8010f10:	230f      	movs	r3, #15
 8010f12:	18fb      	adds	r3, r7, r3
 8010f14:	781b      	ldrb	r3, [r3, #0]
}
 8010f16:	0018      	movs	r0, r3
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	b004      	add	sp, #16
 8010f1c:	bd80      	pop	{r7, pc}

08010f1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f1e:	b580      	push	{r7, lr}
 8010f20:	b082      	sub	sp, #8
 8010f22:	af00      	add	r7, sp, #0
 8010f24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	0018      	movs	r0, r3
 8010f2a:	f001 fce5 	bl	80128f8 <USBD_LL_Start>

  return USBD_OK;
 8010f2e:	2300      	movs	r3, #0
}
 8010f30:	0018      	movs	r0, r3
 8010f32:	46bd      	mov	sp, r7
 8010f34:	b002      	add	sp, #8
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f40:	2300      	movs	r3, #0
}
 8010f42:	0018      	movs	r0, r3
 8010f44:	46bd      	mov	sp, r7
 8010f46:	b002      	add	sp, #8
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010f4a:	b590      	push	{r4, r7, lr}
 8010f4c:	b085      	sub	sp, #20
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	6078      	str	r0, [r7, #4]
 8010f52:	000a      	movs	r2, r1
 8010f54:	1cfb      	adds	r3, r7, #3
 8010f56:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010f58:	240f      	movs	r4, #15
 8010f5a:	193b      	adds	r3, r7, r4
 8010f5c:	2202      	movs	r2, #2
 8010f5e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	23ad      	movs	r3, #173	; 0xad
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	58d3      	ldr	r3, [r2, r3]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00e      	beq.n	8010f8a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	23ad      	movs	r3, #173	; 0xad
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	58d3      	ldr	r3, [r2, r3]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	1cfa      	adds	r2, r7, #3
 8010f78:	7811      	ldrb	r1, [r2, #0]
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	0010      	movs	r0, r2
 8010f7e:	4798      	blx	r3
 8010f80:	1e03      	subs	r3, r0, #0
 8010f82:	d102      	bne.n	8010f8a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8010f84:	193b      	adds	r3, r7, r4
 8010f86:	2200      	movs	r2, #0
 8010f88:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8010f8a:	230f      	movs	r3, #15
 8010f8c:	18fb      	adds	r3, r7, r3
 8010f8e:	781b      	ldrb	r3, [r3, #0]
}
 8010f90:	0018      	movs	r0, r3
 8010f92:	46bd      	mov	sp, r7
 8010f94:	b005      	add	sp, #20
 8010f96:	bd90      	pop	{r4, r7, pc}

08010f98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	000a      	movs	r2, r1
 8010fa2:	1cfb      	adds	r3, r7, #3
 8010fa4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	23ad      	movs	r3, #173	; 0xad
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	58d3      	ldr	r3, [r2, r3]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	1cfa      	adds	r2, r7, #3
 8010fb2:	7811      	ldrb	r1, [r2, #0]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	0010      	movs	r0, r2
 8010fb8:	4798      	blx	r3

  return USBD_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	0018      	movs	r0, r3
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	b002      	add	sp, #8
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	22aa      	movs	r2, #170	; 0xaa
 8010fd2:	0092      	lsls	r2, r2, #2
 8010fd4:	4694      	mov	ip, r2
 8010fd6:	4463      	add	r3, ip
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	0011      	movs	r1, r2
 8010fdc:	0018      	movs	r0, r3
 8010fde:	f001 f810 	bl	8012002 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	23a5      	movs	r3, #165	; 0xa5
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	2101      	movs	r1, #1
 8010fea:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4a23      	ldr	r2, [pc, #140]	; (801107c <USBD_LL_SetupStage+0xb8>)
 8010ff0:	5a9b      	ldrh	r3, [r3, r2]
 8010ff2:	0019      	movs	r1, r3
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	23a6      	movs	r3, #166	; 0xa6
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	23aa      	movs	r3, #170	; 0xaa
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	5cd3      	ldrb	r3, [r2, r3]
 8011004:	001a      	movs	r2, r3
 8011006:	231f      	movs	r3, #31
 8011008:	4013      	ands	r3, r2
 801100a:	2b02      	cmp	r3, #2
 801100c:	d019      	beq.n	8011042 <USBD_LL_SetupStage+0x7e>
 801100e:	d822      	bhi.n	8011056 <USBD_LL_SetupStage+0x92>
 8011010:	2b00      	cmp	r3, #0
 8011012:	d002      	beq.n	801101a <USBD_LL_SetupStage+0x56>
 8011014:	2b01      	cmp	r3, #1
 8011016:	d00a      	beq.n	801102e <USBD_LL_SetupStage+0x6a>
 8011018:	e01d      	b.n	8011056 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	22aa      	movs	r2, #170	; 0xaa
 801101e:	0092      	lsls	r2, r2, #2
 8011020:	189a      	adds	r2, r3, r2
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	0011      	movs	r1, r2
 8011026:	0018      	movs	r0, r3
 8011028:	f000 fa10 	bl	801144c <USBD_StdDevReq>
      break;
 801102c:	e020      	b.n	8011070 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	22aa      	movs	r2, #170	; 0xaa
 8011032:	0092      	lsls	r2, r2, #2
 8011034:	189a      	adds	r2, r3, r2
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	0011      	movs	r1, r2
 801103a:	0018      	movs	r0, r3
 801103c:	f000 fa78 	bl	8011530 <USBD_StdItfReq>
      break;
 8011040:	e016      	b.n	8011070 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	22aa      	movs	r2, #170	; 0xaa
 8011046:	0092      	lsls	r2, r2, #2
 8011048:	189a      	adds	r2, r3, r2
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	0011      	movs	r1, r2
 801104e:	0018      	movs	r0, r3
 8011050:	f000 fac5 	bl	80115de <USBD_StdEPReq>
      break;
 8011054:	e00c      	b.n	8011070 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	23aa      	movs	r3, #170	; 0xaa
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	5cd3      	ldrb	r3, [r2, r3]
 801105e:	227f      	movs	r2, #127	; 0x7f
 8011060:	4393      	bics	r3, r2
 8011062:	b2da      	uxtb	r2, r3
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	0011      	movs	r1, r2
 8011068:	0018      	movs	r0, r3
 801106a:	f001 fccc 	bl	8012a06 <USBD_LL_StallEP>
      break;
 801106e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8011070:	2300      	movs	r3, #0
}
 8011072:	0018      	movs	r0, r3
 8011074:	46bd      	mov	sp, r7
 8011076:	b002      	add	sp, #8
 8011078:	bd80      	pop	{r7, pc}
 801107a:	46c0      	nop			; (mov r8, r8)
 801107c:	000002ae 	.word	0x000002ae

08011080 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	607a      	str	r2, [r7, #4]
 801108a:	200b      	movs	r0, #11
 801108c:	183b      	adds	r3, r7, r0
 801108e:	1c0a      	adds	r2, r1, #0
 8011090:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011092:	183b      	adds	r3, r7, r0
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d154      	bne.n	8011144 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	3355      	adds	r3, #85	; 0x55
 801109e:	33ff      	adds	r3, #255	; 0xff
 80110a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	23a5      	movs	r3, #165	; 0xa5
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	58d3      	ldr	r3, [r2, r3]
 80110aa:	2b03      	cmp	r3, #3
 80110ac:	d139      	bne.n	8011122 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	68da      	ldr	r2, [r3, #12]
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	691b      	ldr	r3, [r3, #16]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d919      	bls.n	80110ee <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	68da      	ldr	r2, [r3, #12]
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	691b      	ldr	r3, [r3, #16]
 80110c2:	1ad2      	subs	r2, r2, r3
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d203      	bcs.n	80110dc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80110d8:	b29b      	uxth	r3, r3
 80110da:	e002      	b.n	80110e2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	001a      	movs	r2, r3
 80110e8:	f001 f89b 	bl	8012222 <USBD_CtlContinueRx>
 80110ec:	e045      	b.n	801117a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80110ee:	68fa      	ldr	r2, [r7, #12]
 80110f0:	23ad      	movs	r3, #173	; 0xad
 80110f2:	009b      	lsls	r3, r3, #2
 80110f4:	58d3      	ldr	r3, [r2, r3]
 80110f6:	691b      	ldr	r3, [r3, #16]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00d      	beq.n	8011118 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80110fc:	68fa      	ldr	r2, [r7, #12]
 80110fe:	23a7      	movs	r3, #167	; 0xa7
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011104:	2b03      	cmp	r3, #3
 8011106:	d107      	bne.n	8011118 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	23ad      	movs	r3, #173	; 0xad
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	58d3      	ldr	r3, [r2, r3]
 8011110:	691b      	ldr	r3, [r3, #16]
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	0010      	movs	r0, r2
 8011116:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	0018      	movs	r0, r3
 801111c:	f001 f894 	bl	8012248 <USBD_CtlSendStatus>
 8011120:	e02b      	b.n	801117a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	23a5      	movs	r3, #165	; 0xa5
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	58d3      	ldr	r3, [r2, r3]
 801112a:	2b05      	cmp	r3, #5
 801112c:	d125      	bne.n	801117a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801112e:	68fa      	ldr	r2, [r7, #12]
 8011130:	23a5      	movs	r3, #165	; 0xa5
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	2100      	movs	r1, #0
 8011136:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2100      	movs	r1, #0
 801113c:	0018      	movs	r0, r3
 801113e:	f001 fc62 	bl	8012a06 <USBD_LL_StallEP>
 8011142:	e01a      	b.n	801117a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	23ad      	movs	r3, #173	; 0xad
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	58d3      	ldr	r3, [r2, r3]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d011      	beq.n	8011176 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	23a7      	movs	r3, #167	; 0xa7
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801115a:	2b03      	cmp	r3, #3
 801115c:	d10b      	bne.n	8011176 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801115e:	68fa      	ldr	r2, [r7, #12]
 8011160:	23ad      	movs	r3, #173	; 0xad
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	58d3      	ldr	r3, [r2, r3]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	220b      	movs	r2, #11
 801116a:	18ba      	adds	r2, r7, r2
 801116c:	7811      	ldrb	r1, [r2, #0]
 801116e:	68fa      	ldr	r2, [r7, #12]
 8011170:	0010      	movs	r0, r2
 8011172:	4798      	blx	r3
 8011174:	e001      	b.n	801117a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011176:	2302      	movs	r3, #2
 8011178:	e000      	b.n	801117c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	0018      	movs	r0, r3
 801117e:	46bd      	mov	sp, r7
 8011180:	b006      	add	sp, #24
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	607a      	str	r2, [r7, #4]
 801118e:	200b      	movs	r0, #11
 8011190:	183b      	adds	r3, r7, r0
 8011192:	1c0a      	adds	r2, r1, #0
 8011194:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8011196:	183b      	adds	r3, r7, r0
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d000      	beq.n	80111a0 <USBD_LL_DataInStage+0x1c>
 801119e:	e08e      	b.n	80112be <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	3314      	adds	r3, #20
 80111a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	23a5      	movs	r3, #165	; 0xa5
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	58d3      	ldr	r3, [r2, r3]
 80111ae:	2b02      	cmp	r3, #2
 80111b0:	d164      	bne.n	801127c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	68da      	ldr	r2, [r3, #12]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d915      	bls.n	80111ea <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	68da      	ldr	r2, [r3, #12]
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	1ad2      	subs	r2, r2, r3
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	6879      	ldr	r1, [r7, #4]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	0018      	movs	r0, r3
 80111d8:	f000 ffec 	bl	80121b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	2300      	movs	r3, #0
 80111e0:	2200      	movs	r2, #0
 80111e2:	2100      	movs	r1, #0
 80111e4:	f001 fcf8 	bl	8012bd8 <USBD_LL_PrepareReceive>
 80111e8:	e059      	b.n	801129e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	689a      	ldr	r2, [r3, #8]
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	691b      	ldr	r3, [r3, #16]
 80111f2:	0019      	movs	r1, r3
 80111f4:	0010      	movs	r0, r2
 80111f6:	f7ef f829 	bl	800024c <__aeabi_uidivmod>
 80111fa:	1e0b      	subs	r3, r1, #0
 80111fc:	d11f      	bne.n	801123e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	689a      	ldr	r2, [r3, #8]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8011206:	429a      	cmp	r2, r3
 8011208:	d319      	bcc.n	801123e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	68f9      	ldr	r1, [r7, #12]
 8011210:	23a6      	movs	r3, #166	; 0xa6
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8011216:	429a      	cmp	r2, r3
 8011218:	d211      	bcs.n	801123e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2200      	movs	r2, #0
 801121e:	2100      	movs	r1, #0
 8011220:	0018      	movs	r0, r3
 8011222:	f000 ffc7 	bl	80121b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011226:	68fa      	ldr	r2, [r7, #12]
 8011228:	23a6      	movs	r3, #166	; 0xa6
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	2100      	movs	r1, #0
 801122e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	2300      	movs	r3, #0
 8011234:	2200      	movs	r2, #0
 8011236:	2100      	movs	r1, #0
 8011238:	f001 fcce 	bl	8012bd8 <USBD_LL_PrepareReceive>
 801123c:	e02f      	b.n	801129e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	23ad      	movs	r3, #173	; 0xad
 8011242:	009b      	lsls	r3, r3, #2
 8011244:	58d3      	ldr	r3, [r2, r3]
 8011246:	68db      	ldr	r3, [r3, #12]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00d      	beq.n	8011268 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	23a7      	movs	r3, #167	; 0xa7
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011254:	2b03      	cmp	r3, #3
 8011256:	d107      	bne.n	8011268 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	23ad      	movs	r3, #173	; 0xad
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	58d3      	ldr	r3, [r2, r3]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	0010      	movs	r0, r2
 8011266:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2180      	movs	r1, #128	; 0x80
 801126c:	0018      	movs	r0, r3
 801126e:	f001 fbca 	bl	8012a06 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	0018      	movs	r0, r3
 8011276:	f000 fffb 	bl	8012270 <USBD_CtlReceiveStatus>
 801127a:	e010      	b.n	801129e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	23a5      	movs	r3, #165	; 0xa5
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	58d3      	ldr	r3, [r2, r3]
 8011284:	2b04      	cmp	r3, #4
 8011286:	d005      	beq.n	8011294 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	23a5      	movs	r3, #165	; 0xa5
 801128c:	009b      	lsls	r3, r3, #2
 801128e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8011290:	2b00      	cmp	r3, #0
 8011292:	d104      	bne.n	801129e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2180      	movs	r1, #128	; 0x80
 8011298:	0018      	movs	r0, r3
 801129a:	f001 fbb4 	bl	8012a06 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	23a8      	movs	r3, #168	; 0xa8
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	5cd3      	ldrb	r3, [r2, r3]
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d124      	bne.n	80112f4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	0018      	movs	r0, r3
 80112ae:	f7ff fe43 	bl	8010f38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	23a8      	movs	r3, #168	; 0xa8
 80112b6:	009b      	lsls	r3, r3, #2
 80112b8:	2100      	movs	r1, #0
 80112ba:	54d1      	strb	r1, [r2, r3]
 80112bc:	e01a      	b.n	80112f4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	23ad      	movs	r3, #173	; 0xad
 80112c2:	009b      	lsls	r3, r3, #2
 80112c4:	58d3      	ldr	r3, [r2, r3]
 80112c6:	695b      	ldr	r3, [r3, #20]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d011      	beq.n	80112f0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	23a7      	movs	r3, #167	; 0xa7
 80112d0:	009b      	lsls	r3, r3, #2
 80112d2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80112d4:	2b03      	cmp	r3, #3
 80112d6:	d10b      	bne.n	80112f0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80112d8:	68fa      	ldr	r2, [r7, #12]
 80112da:	23ad      	movs	r3, #173	; 0xad
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	58d3      	ldr	r3, [r2, r3]
 80112e0:	695b      	ldr	r3, [r3, #20]
 80112e2:	220b      	movs	r2, #11
 80112e4:	18ba      	adds	r2, r7, r2
 80112e6:	7811      	ldrb	r1, [r2, #0]
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	0010      	movs	r0, r2
 80112ec:	4798      	blx	r3
 80112ee:	e001      	b.n	80112f4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80112f0:	2302      	movs	r3, #2
 80112f2:	e000      	b.n	80112f6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	0018      	movs	r0, r3
 80112f8:	46bd      	mov	sp, r7
 80112fa:	b006      	add	sp, #24
 80112fc:	bd80      	pop	{r7, pc}

080112fe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b082      	sub	sp, #8
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	2340      	movs	r3, #64	; 0x40
 801130a:	2200      	movs	r2, #0
 801130c:	2100      	movs	r1, #0
 801130e:	f001 fb18 	bl	8012942 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	23ac      	movs	r3, #172	; 0xac
 8011316:	005b      	lsls	r3, r3, #1
 8011318:	2101      	movs	r1, #1
 801131a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	23b2      	movs	r3, #178	; 0xb2
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	2140      	movs	r1, #64	; 0x40
 8011324:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	2340      	movs	r3, #64	; 0x40
 801132a:	2200      	movs	r2, #0
 801132c:	2180      	movs	r1, #128	; 0x80
 801132e:	f001 fb08 	bl	8012942 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2201      	movs	r2, #1
 8011336:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2240      	movs	r2, #64	; 0x40
 801133c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	23a7      	movs	r3, #167	; 0xa7
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	2101      	movs	r1, #1
 8011346:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	23a5      	movs	r3, #165	; 0xa5
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	2100      	movs	r1, #0
 8011350:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	23a9      	movs	r3, #169	; 0xa9
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	2100      	movs	r1, #0
 8011360:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	23ae      	movs	r3, #174	; 0xae
 8011366:	009b      	lsls	r3, r3, #2
 8011368:	58d3      	ldr	r3, [r2, r3]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801136e:	687a      	ldr	r2, [r7, #4]
 8011370:	23ad      	movs	r3, #173	; 0xad
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	58d3      	ldr	r3, [r2, r3]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	b2d9      	uxtb	r1, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	0018      	movs	r0, r3
 8011382:	4790      	blx	r2
  }

  return USBD_OK;
 8011384:	2300      	movs	r3, #0
}
 8011386:	0018      	movs	r0, r3
 8011388:	46bd      	mov	sp, r7
 801138a:	b002      	add	sp, #8
 801138c:	bd80      	pop	{r7, pc}

0801138e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801138e:	b580      	push	{r7, lr}
 8011390:	b082      	sub	sp, #8
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
 8011396:	000a      	movs	r2, r1
 8011398:	1cfb      	adds	r3, r7, #3
 801139a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	1cfa      	adds	r2, r7, #3
 80113a0:	7812      	ldrb	r2, [r2, #0]
 80113a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80113a4:	2300      	movs	r3, #0
}
 80113a6:	0018      	movs	r0, r3
 80113a8:	46bd      	mov	sp, r7
 80113aa:	b002      	add	sp, #8
 80113ac:	bd80      	pop	{r7, pc}
	...

080113b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	23a7      	movs	r3, #167	; 0xa7
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	5cd1      	ldrb	r1, [r2, r3]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	4a06      	ldr	r2, [pc, #24]	; (80113dc <USBD_LL_Suspend+0x2c>)
 80113c4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	23a7      	movs	r3, #167	; 0xa7
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	2104      	movs	r1, #4
 80113ce:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80113d0:	2300      	movs	r3, #0
}
 80113d2:	0018      	movs	r0, r3
 80113d4:	46bd      	mov	sp, r7
 80113d6:	b002      	add	sp, #8
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	46c0      	nop			; (mov r8, r8)
 80113dc:	0000029d 	.word	0x0000029d

080113e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	23a7      	movs	r3, #167	; 0xa7
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	5cd3      	ldrb	r3, [r2, r3]
 80113f0:	2b04      	cmp	r3, #4
 80113f2:	d106      	bne.n	8011402 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4a05      	ldr	r2, [pc, #20]	; (801140c <USBD_LL_Resume+0x2c>)
 80113f8:	5c99      	ldrb	r1, [r3, r2]
 80113fa:	687a      	ldr	r2, [r7, #4]
 80113fc:	23a7      	movs	r3, #167	; 0xa7
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8011402:	2300      	movs	r3, #0
}
 8011404:	0018      	movs	r0, r3
 8011406:	46bd      	mov	sp, r7
 8011408:	b002      	add	sp, #8
 801140a:	bd80      	pop	{r7, pc}
 801140c:	0000029d 	.word	0x0000029d

08011410 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	23a7      	movs	r3, #167	; 0xa7
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	5cd3      	ldrb	r3, [r2, r3]
 8011420:	2b03      	cmp	r3, #3
 8011422:	d10e      	bne.n	8011442 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	23ad      	movs	r3, #173	; 0xad
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	58d3      	ldr	r3, [r2, r3]
 801142c:	69db      	ldr	r3, [r3, #28]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d007      	beq.n	8011442 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	23ad      	movs	r3, #173	; 0xad
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	58d3      	ldr	r3, [r2, r3]
 801143a:	69db      	ldr	r3, [r3, #28]
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	0010      	movs	r0, r2
 8011440:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	0018      	movs	r0, r3
 8011446:	46bd      	mov	sp, r7
 8011448:	b002      	add	sp, #8
 801144a:	bd80      	pop	{r7, pc}

0801144c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011456:	230f      	movs	r3, #15
 8011458:	18fb      	adds	r3, r7, r3
 801145a:	2200      	movs	r2, #0
 801145c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	001a      	movs	r2, r3
 8011464:	2360      	movs	r3, #96	; 0x60
 8011466:	4013      	ands	r3, r2
 8011468:	2b40      	cmp	r3, #64	; 0x40
 801146a:	d004      	beq.n	8011476 <USBD_StdDevReq+0x2a>
 801146c:	d84f      	bhi.n	801150e <USBD_StdDevReq+0xc2>
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00b      	beq.n	801148a <USBD_StdDevReq+0x3e>
 8011472:	2b20      	cmp	r3, #32
 8011474:	d14b      	bne.n	801150e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	23ad      	movs	r3, #173	; 0xad
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	58d3      	ldr	r3, [r2, r3]
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	6839      	ldr	r1, [r7, #0]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	0010      	movs	r0, r2
 8011486:	4798      	blx	r3
      break;
 8011488:	e048      	b.n	801151c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	785b      	ldrb	r3, [r3, #1]
 801148e:	2b09      	cmp	r3, #9
 8011490:	d835      	bhi.n	80114fe <USBD_StdDevReq+0xb2>
 8011492:	009a      	lsls	r2, r3, #2
 8011494:	4b25      	ldr	r3, [pc, #148]	; (801152c <USBD_StdDevReq+0xe0>)
 8011496:	18d3      	adds	r3, r2, r3
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	0011      	movs	r1, r2
 80114a2:	0018      	movs	r0, r3
 80114a4:	f000 fa52 	bl	801194c <USBD_GetDescriptor>
          break;
 80114a8:	e030      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80114aa:	683a      	ldr	r2, [r7, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	0011      	movs	r1, r2
 80114b0:	0018      	movs	r0, r3
 80114b2:	f000 fbfd 	bl	8011cb0 <USBD_SetAddress>
          break;
 80114b6:	e029      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80114b8:	683a      	ldr	r2, [r7, #0]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	0011      	movs	r1, r2
 80114be:	0018      	movs	r0, r3
 80114c0:	f000 fc4a 	bl	8011d58 <USBD_SetConfig>
          break;
 80114c4:	e022      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	0011      	movs	r1, r2
 80114cc:	0018      	movs	r0, r3
 80114ce:	f000 fce7 	bl	8011ea0 <USBD_GetConfig>
          break;
 80114d2:	e01b      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80114d4:	683a      	ldr	r2, [r7, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	0011      	movs	r1, r2
 80114da:	0018      	movs	r0, r3
 80114dc:	f000 fd1b 	bl	8011f16 <USBD_GetStatus>
          break;
 80114e0:	e014      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80114e2:	683a      	ldr	r2, [r7, #0]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	0011      	movs	r1, r2
 80114e8:	0018      	movs	r0, r3
 80114ea:	f000 fd4e 	bl	8011f8a <USBD_SetFeature>
          break;
 80114ee:	e00d      	b.n	801150c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80114f0:	683a      	ldr	r2, [r7, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	0011      	movs	r1, r2
 80114f6:	0018      	movs	r0, r3
 80114f8:	f000 fd5d 	bl	8011fb6 <USBD_ClrFeature>
          break;
 80114fc:	e006      	b.n	801150c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80114fe:	683a      	ldr	r2, [r7, #0]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	0011      	movs	r1, r2
 8011504:	0018      	movs	r0, r3
 8011506:	f000 fdb7 	bl	8012078 <USBD_CtlError>
          break;
 801150a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801150c:	e006      	b.n	801151c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801150e:	683a      	ldr	r2, [r7, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	0011      	movs	r1, r2
 8011514:	0018      	movs	r0, r3
 8011516:	f000 fdaf 	bl	8012078 <USBD_CtlError>
      break;
 801151a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801151c:	230f      	movs	r3, #15
 801151e:	18fb      	adds	r3, r7, r3
 8011520:	781b      	ldrb	r3, [r3, #0]
}
 8011522:	0018      	movs	r0, r3
 8011524:	46bd      	mov	sp, r7
 8011526:	b004      	add	sp, #16
 8011528:	bd80      	pop	{r7, pc}
 801152a:	46c0      	nop			; (mov r8, r8)
 801152c:	08016460 	.word	0x08016460

08011530 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8011530:	b5b0      	push	{r4, r5, r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801153a:	230f      	movs	r3, #15
 801153c:	18fb      	adds	r3, r7, r3
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	001a      	movs	r2, r3
 8011548:	2360      	movs	r3, #96	; 0x60
 801154a:	4013      	ands	r3, r2
 801154c:	2b40      	cmp	r3, #64	; 0x40
 801154e:	d004      	beq.n	801155a <USBD_StdItfReq+0x2a>
 8011550:	d839      	bhi.n	80115c6 <USBD_StdItfReq+0x96>
 8011552:	2b00      	cmp	r3, #0
 8011554:	d001      	beq.n	801155a <USBD_StdItfReq+0x2a>
 8011556:	2b20      	cmp	r3, #32
 8011558:	d135      	bne.n	80115c6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	23a7      	movs	r3, #167	; 0xa7
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	5cd3      	ldrb	r3, [r2, r3]
 8011562:	3b01      	subs	r3, #1
 8011564:	2b02      	cmp	r3, #2
 8011566:	d825      	bhi.n	80115b4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	889b      	ldrh	r3, [r3, #4]
 801156c:	b2db      	uxtb	r3, r3
 801156e:	2b01      	cmp	r3, #1
 8011570:	d819      	bhi.n	80115a6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	23ad      	movs	r3, #173	; 0xad
 8011576:	009b      	lsls	r3, r3, #2
 8011578:	58d3      	ldr	r3, [r2, r3]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	250f      	movs	r5, #15
 801157e:	197c      	adds	r4, r7, r5
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	0010      	movs	r0, r2
 8011586:	4798      	blx	r3
 8011588:	0003      	movs	r3, r0
 801158a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	88db      	ldrh	r3, [r3, #6]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d116      	bne.n	80115c2 <USBD_StdItfReq+0x92>
 8011594:	197b      	adds	r3, r7, r5
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d112      	bne.n	80115c2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	0018      	movs	r0, r3
 80115a0:	f000 fe52 	bl	8012248 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80115a4:	e00d      	b.n	80115c2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80115a6:	683a      	ldr	r2, [r7, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	0011      	movs	r1, r2
 80115ac:	0018      	movs	r0, r3
 80115ae:	f000 fd63 	bl	8012078 <USBD_CtlError>
          break;
 80115b2:	e006      	b.n	80115c2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80115b4:	683a      	ldr	r2, [r7, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	0011      	movs	r1, r2
 80115ba:	0018      	movs	r0, r3
 80115bc:	f000 fd5c 	bl	8012078 <USBD_CtlError>
          break;
 80115c0:	e000      	b.n	80115c4 <USBD_StdItfReq+0x94>
          break;
 80115c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80115c4:	e006      	b.n	80115d4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80115c6:	683a      	ldr	r2, [r7, #0]
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	0011      	movs	r1, r2
 80115cc:	0018      	movs	r0, r3
 80115ce:	f000 fd53 	bl	8012078 <USBD_CtlError>
      break;
 80115d2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	0018      	movs	r0, r3
 80115d8:	46bd      	mov	sp, r7
 80115da:	b004      	add	sp, #16
 80115dc:	bdb0      	pop	{r4, r5, r7, pc}

080115de <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80115de:	b5b0      	push	{r4, r5, r7, lr}
 80115e0:	b084      	sub	sp, #16
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
 80115e6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80115e8:	230f      	movs	r3, #15
 80115ea:	18fb      	adds	r3, r7, r3
 80115ec:	2200      	movs	r2, #0
 80115ee:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	889a      	ldrh	r2, [r3, #4]
 80115f4:	230e      	movs	r3, #14
 80115f6:	18fb      	adds	r3, r7, r3
 80115f8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	001a      	movs	r2, r3
 8011600:	2360      	movs	r3, #96	; 0x60
 8011602:	4013      	ands	r3, r2
 8011604:	2b40      	cmp	r3, #64	; 0x40
 8011606:	d006      	beq.n	8011616 <USBD_StdEPReq+0x38>
 8011608:	d900      	bls.n	801160c <USBD_StdEPReq+0x2e>
 801160a:	e190      	b.n	801192e <USBD_StdEPReq+0x350>
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00c      	beq.n	801162a <USBD_StdEPReq+0x4c>
 8011610:	2b20      	cmp	r3, #32
 8011612:	d000      	beq.n	8011616 <USBD_StdEPReq+0x38>
 8011614:	e18b      	b.n	801192e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	23ad      	movs	r3, #173	; 0xad
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	58d3      	ldr	r3, [r2, r3]
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	0010      	movs	r0, r2
 8011626:	4798      	blx	r3
      break;
 8011628:	e188      	b.n	801193c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	001a      	movs	r2, r3
 8011630:	2360      	movs	r3, #96	; 0x60
 8011632:	4013      	ands	r3, r2
 8011634:	2b20      	cmp	r3, #32
 8011636:	d10f      	bne.n	8011658 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	23ad      	movs	r3, #173	; 0xad
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	58d3      	ldr	r3, [r2, r3]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	250f      	movs	r5, #15
 8011644:	197c      	adds	r4, r7, r5
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	0010      	movs	r0, r2
 801164c:	4798      	blx	r3
 801164e:	0003      	movs	r3, r0
 8011650:	7023      	strb	r3, [r4, #0]

        return ret;
 8011652:	197b      	adds	r3, r7, r5
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	e174      	b.n	8011942 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	785b      	ldrb	r3, [r3, #1]
 801165c:	2b03      	cmp	r3, #3
 801165e:	d007      	beq.n	8011670 <USBD_StdEPReq+0x92>
 8011660:	dd00      	ble.n	8011664 <USBD_StdEPReq+0x86>
 8011662:	e15c      	b.n	801191e <USBD_StdEPReq+0x340>
 8011664:	2b00      	cmp	r3, #0
 8011666:	d100      	bne.n	801166a <USBD_StdEPReq+0x8c>
 8011668:	e092      	b.n	8011790 <USBD_StdEPReq+0x1b2>
 801166a:	2b01      	cmp	r3, #1
 801166c:	d04b      	beq.n	8011706 <USBD_StdEPReq+0x128>
 801166e:	e156      	b.n	801191e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	23a7      	movs	r3, #167	; 0xa7
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	5cd3      	ldrb	r3, [r2, r3]
 8011678:	2b02      	cmp	r3, #2
 801167a:	d002      	beq.n	8011682 <USBD_StdEPReq+0xa4>
 801167c:	2b03      	cmp	r3, #3
 801167e:	d01d      	beq.n	80116bc <USBD_StdEPReq+0xde>
 8011680:	e039      	b.n	80116f6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011682:	220e      	movs	r2, #14
 8011684:	18bb      	adds	r3, r7, r2
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d010      	beq.n	80116ae <USBD_StdEPReq+0xd0>
 801168c:	18bb      	adds	r3, r7, r2
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	2b80      	cmp	r3, #128	; 0x80
 8011692:	d00c      	beq.n	80116ae <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8011694:	18bb      	adds	r3, r7, r2
 8011696:	781a      	ldrb	r2, [r3, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	0011      	movs	r1, r2
 801169c:	0018      	movs	r0, r3
 801169e:	f001 f9b2 	bl	8012a06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2180      	movs	r1, #128	; 0x80
 80116a6:	0018      	movs	r0, r3
 80116a8:	f001 f9ad 	bl	8012a06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80116ac:	e02a      	b.n	8011704 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80116ae:	683a      	ldr	r2, [r7, #0]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	0011      	movs	r1, r2
 80116b4:	0018      	movs	r0, r3
 80116b6:	f000 fcdf 	bl	8012078 <USBD_CtlError>
              break;
 80116ba:	e023      	b.n	8011704 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	885b      	ldrh	r3, [r3, #2]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d113      	bne.n	80116ec <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80116c4:	220e      	movs	r2, #14
 80116c6:	18bb      	adds	r3, r7, r2
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00e      	beq.n	80116ec <USBD_StdEPReq+0x10e>
 80116ce:	18bb      	adds	r3, r7, r2
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b80      	cmp	r3, #128	; 0x80
 80116d4:	d00a      	beq.n	80116ec <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	88db      	ldrh	r3, [r3, #6]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80116de:	18bb      	adds	r3, r7, r2
 80116e0:	781a      	ldrb	r2, [r3, #0]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	0011      	movs	r1, r2
 80116e6:	0018      	movs	r0, r3
 80116e8:	f001 f98d 	bl	8012a06 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	0018      	movs	r0, r3
 80116f0:	f000 fdaa 	bl	8012248 <USBD_CtlSendStatus>

              break;
 80116f4:	e006      	b.n	8011704 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	0011      	movs	r1, r2
 80116fc:	0018      	movs	r0, r3
 80116fe:	f000 fcbb 	bl	8012078 <USBD_CtlError>
              break;
 8011702:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8011704:	e112      	b.n	801192c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	23a7      	movs	r3, #167	; 0xa7
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	5cd3      	ldrb	r3, [r2, r3]
 801170e:	2b02      	cmp	r3, #2
 8011710:	d002      	beq.n	8011718 <USBD_StdEPReq+0x13a>
 8011712:	2b03      	cmp	r3, #3
 8011714:	d01d      	beq.n	8011752 <USBD_StdEPReq+0x174>
 8011716:	e032      	b.n	801177e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011718:	220e      	movs	r2, #14
 801171a:	18bb      	adds	r3, r7, r2
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d010      	beq.n	8011744 <USBD_StdEPReq+0x166>
 8011722:	18bb      	adds	r3, r7, r2
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	2b80      	cmp	r3, #128	; 0x80
 8011728:	d00c      	beq.n	8011744 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801172a:	18bb      	adds	r3, r7, r2
 801172c:	781a      	ldrb	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	0011      	movs	r1, r2
 8011732:	0018      	movs	r0, r3
 8011734:	f001 f967 	bl	8012a06 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2180      	movs	r1, #128	; 0x80
 801173c:	0018      	movs	r0, r3
 801173e:	f001 f962 	bl	8012a06 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011742:	e024      	b.n	801178e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8011744:	683a      	ldr	r2, [r7, #0]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	0011      	movs	r1, r2
 801174a:	0018      	movs	r0, r3
 801174c:	f000 fc94 	bl	8012078 <USBD_CtlError>
              break;
 8011750:	e01d      	b.n	801178e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	885b      	ldrh	r3, [r3, #2]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d118      	bne.n	801178c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801175a:	210e      	movs	r1, #14
 801175c:	187b      	adds	r3, r7, r1
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	227f      	movs	r2, #127	; 0x7f
 8011762:	4013      	ands	r3, r2
 8011764:	d006      	beq.n	8011774 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8011766:	187b      	adds	r3, r7, r1
 8011768:	781a      	ldrb	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	0011      	movs	r1, r2
 801176e:	0018      	movs	r0, r3
 8011770:	f001 f974 	bl	8012a5c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	0018      	movs	r0, r3
 8011778:	f000 fd66 	bl	8012248 <USBD_CtlSendStatus>
              }
              break;
 801177c:	e006      	b.n	801178c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801177e:	683a      	ldr	r2, [r7, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	0011      	movs	r1, r2
 8011784:	0018      	movs	r0, r3
 8011786:	f000 fc77 	bl	8012078 <USBD_CtlError>
              break;
 801178a:	e000      	b.n	801178e <USBD_StdEPReq+0x1b0>
              break;
 801178c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801178e:	e0cd      	b.n	801192c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	23a7      	movs	r3, #167	; 0xa7
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	5cd3      	ldrb	r3, [r2, r3]
 8011798:	2b02      	cmp	r3, #2
 801179a:	d002      	beq.n	80117a2 <USBD_StdEPReq+0x1c4>
 801179c:	2b03      	cmp	r3, #3
 801179e:	d03c      	beq.n	801181a <USBD_StdEPReq+0x23c>
 80117a0:	e0b5      	b.n	801190e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117a2:	220e      	movs	r2, #14
 80117a4:	18bb      	adds	r3, r7, r2
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d00a      	beq.n	80117c2 <USBD_StdEPReq+0x1e4>
 80117ac:	18bb      	adds	r3, r7, r2
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b80      	cmp	r3, #128	; 0x80
 80117b2:	d006      	beq.n	80117c2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80117b4:	683a      	ldr	r2, [r7, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	0011      	movs	r1, r2
 80117ba:	0018      	movs	r0, r3
 80117bc:	f000 fc5c 	bl	8012078 <USBD_CtlError>
                break;
 80117c0:	e0ac      	b.n	801191c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117c2:	220e      	movs	r2, #14
 80117c4:	18bb      	adds	r3, r7, r2
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	b25b      	sxtb	r3, r3
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	da0c      	bge.n	80117e8 <USBD_StdEPReq+0x20a>
 80117ce:	18bb      	adds	r3, r7, r2
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	227f      	movs	r2, #127	; 0x7f
 80117d4:	401a      	ands	r2, r3
 80117d6:	0013      	movs	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	189b      	adds	r3, r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	3310      	adds	r3, #16
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	18d3      	adds	r3, r2, r3
 80117e4:	3304      	adds	r3, #4
 80117e6:	e00d      	b.n	8011804 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80117e8:	230e      	movs	r3, #14
 80117ea:	18fb      	adds	r3, r7, r3
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	227f      	movs	r2, #127	; 0x7f
 80117f0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117f2:	0013      	movs	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	189b      	adds	r3, r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	3351      	adds	r3, #81	; 0x51
 80117fc:	33ff      	adds	r3, #255	; 0xff
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	18d3      	adds	r3, r2, r3
 8011802:	3304      	adds	r3, #4
 8011804:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2200      	movs	r2, #0
 801180a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801180c:	68b9      	ldr	r1, [r7, #8]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2202      	movs	r2, #2
 8011812:	0018      	movs	r0, r3
 8011814:	f000 fcae 	bl	8012174 <USBD_CtlSendData>
              break;
 8011818:	e080      	b.n	801191c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801181a:	220e      	movs	r2, #14
 801181c:	18bb      	adds	r3, r7, r2
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	b25b      	sxtb	r3, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	da14      	bge.n	8011850 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011826:	18bb      	adds	r3, r7, r2
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	220f      	movs	r2, #15
 801182c:	401a      	ands	r2, r3
 801182e:	6879      	ldr	r1, [r7, #4]
 8011830:	0013      	movs	r3, r2
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	189b      	adds	r3, r3, r2
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	18cb      	adds	r3, r1, r3
 801183a:	3318      	adds	r3, #24
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d11e      	bne.n	8011880 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	0011      	movs	r1, r2
 8011848:	0018      	movs	r0, r3
 801184a:	f000 fc15 	bl	8012078 <USBD_CtlError>
                  break;
 801184e:	e065      	b.n	801191c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011850:	230e      	movs	r3, #14
 8011852:	18fb      	adds	r3, r7, r3
 8011854:	781b      	ldrb	r3, [r3, #0]
 8011856:	220f      	movs	r2, #15
 8011858:	401a      	ands	r2, r3
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	23ac      	movs	r3, #172	; 0xac
 801185e:	0059      	lsls	r1, r3, #1
 8011860:	0013      	movs	r3, r2
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	189b      	adds	r3, r3, r2
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	18c3      	adds	r3, r0, r3
 801186a:	185b      	adds	r3, r3, r1
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d106      	bne.n	8011880 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	0011      	movs	r1, r2
 8011878:	0018      	movs	r0, r3
 801187a:	f000 fbfd 	bl	8012078 <USBD_CtlError>
                  break;
 801187e:	e04d      	b.n	801191c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011880:	220e      	movs	r2, #14
 8011882:	18bb      	adds	r3, r7, r2
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	b25b      	sxtb	r3, r3
 8011888:	2b00      	cmp	r3, #0
 801188a:	da0c      	bge.n	80118a6 <USBD_StdEPReq+0x2c8>
 801188c:	18bb      	adds	r3, r7, r2
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	227f      	movs	r2, #127	; 0x7f
 8011892:	401a      	ands	r2, r3
 8011894:	0013      	movs	r3, r2
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	189b      	adds	r3, r3, r2
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	3310      	adds	r3, #16
 801189e:	687a      	ldr	r2, [r7, #4]
 80118a0:	18d3      	adds	r3, r2, r3
 80118a2:	3304      	adds	r3, #4
 80118a4:	e00d      	b.n	80118c2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80118a6:	230e      	movs	r3, #14
 80118a8:	18fb      	adds	r3, r7, r3
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	227f      	movs	r2, #127	; 0x7f
 80118ae:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80118b0:	0013      	movs	r3, r2
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	189b      	adds	r3, r3, r2
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	3351      	adds	r3, #81	; 0x51
 80118ba:	33ff      	adds	r3, #255	; 0xff
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	18d3      	adds	r3, r2, r3
 80118c0:	3304      	adds	r3, #4
 80118c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80118c4:	220e      	movs	r2, #14
 80118c6:	18bb      	adds	r3, r7, r2
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d003      	beq.n	80118d6 <USBD_StdEPReq+0x2f8>
 80118ce:	18bb      	adds	r3, r7, r2
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	2b80      	cmp	r3, #128	; 0x80
 80118d4:	d103      	bne.n	80118de <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	2200      	movs	r2, #0
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	e010      	b.n	8011900 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80118de:	230e      	movs	r3, #14
 80118e0:	18fb      	adds	r3, r7, r3
 80118e2:	781a      	ldrb	r2, [r3, #0]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	0011      	movs	r1, r2
 80118e8:	0018      	movs	r0, r3
 80118ea:	f001 f8e2 	bl	8012ab2 <USBD_LL_IsStallEP>
 80118ee:	1e03      	subs	r3, r0, #0
 80118f0:	d003      	beq.n	80118fa <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	2201      	movs	r2, #1
 80118f6:	601a      	str	r2, [r3, #0]
 80118f8:	e002      	b.n	8011900 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	2200      	movs	r2, #0
 80118fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2202      	movs	r2, #2
 8011906:	0018      	movs	r0, r3
 8011908:	f000 fc34 	bl	8012174 <USBD_CtlSendData>
              break;
 801190c:	e006      	b.n	801191c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801190e:	683a      	ldr	r2, [r7, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	0011      	movs	r1, r2
 8011914:	0018      	movs	r0, r3
 8011916:	f000 fbaf 	bl	8012078 <USBD_CtlError>
              break;
 801191a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801191c:	e006      	b.n	801192c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801191e:	683a      	ldr	r2, [r7, #0]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	0011      	movs	r1, r2
 8011924:	0018      	movs	r0, r3
 8011926:	f000 fba7 	bl	8012078 <USBD_CtlError>
          break;
 801192a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801192c:	e006      	b.n	801193c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	0011      	movs	r1, r2
 8011934:	0018      	movs	r0, r3
 8011936:	f000 fb9f 	bl	8012078 <USBD_CtlError>
      break;
 801193a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801193c:	230f      	movs	r3, #15
 801193e:	18fb      	adds	r3, r7, r3
 8011940:	781b      	ldrb	r3, [r3, #0]
}
 8011942:	0018      	movs	r0, r3
 8011944:	46bd      	mov	sp, r7
 8011946:	b004      	add	sp, #16
 8011948:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801194c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011956:	2308      	movs	r3, #8
 8011958:	18fb      	adds	r3, r7, r3
 801195a:	2200      	movs	r2, #0
 801195c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801195e:	2300      	movs	r3, #0
 8011960:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011962:	230b      	movs	r3, #11
 8011964:	18fb      	adds	r3, r7, r3
 8011966:	2200      	movs	r2, #0
 8011968:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	885b      	ldrh	r3, [r3, #2]
 801196e:	0a1b      	lsrs	r3, r3, #8
 8011970:	b29b      	uxth	r3, r3
 8011972:	2b07      	cmp	r3, #7
 8011974:	d900      	bls.n	8011978 <USBD_GetDescriptor+0x2c>
 8011976:	e159      	b.n	8011c2c <USBD_GetDescriptor+0x2e0>
 8011978:	009a      	lsls	r2, r3, #2
 801197a:	4bcb      	ldr	r3, [pc, #812]	; (8011ca8 <USBD_GetDescriptor+0x35c>)
 801197c:	18d3      	adds	r3, r2, r3
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	23ac      	movs	r3, #172	; 0xac
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	58d3      	ldr	r3, [r2, r3]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	7c12      	ldrb	r2, [r2, #16]
 8011990:	2108      	movs	r1, #8
 8011992:	1879      	adds	r1, r7, r1
 8011994:	0010      	movs	r0, r2
 8011996:	4798      	blx	r3
 8011998:	0003      	movs	r3, r0
 801199a:	60fb      	str	r3, [r7, #12]
      break;
 801199c:	e153      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	7c1b      	ldrb	r3, [r3, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d10f      	bne.n	80119c6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	23ad      	movs	r3, #173	; 0xad
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	58d3      	ldr	r3, [r2, r3]
 80119ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b0:	2208      	movs	r2, #8
 80119b2:	18ba      	adds	r2, r7, r2
 80119b4:	0010      	movs	r0, r2
 80119b6:	4798      	blx	r3
 80119b8:	0003      	movs	r3, r0
 80119ba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	3301      	adds	r3, #1
 80119c0:	2202      	movs	r2, #2
 80119c2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80119c4:	e13f      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	23ad      	movs	r3, #173	; 0xad
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	58d3      	ldr	r3, [r2, r3]
 80119ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d0:	2208      	movs	r2, #8
 80119d2:	18ba      	adds	r2, r7, r2
 80119d4:	0010      	movs	r0, r2
 80119d6:	4798      	blx	r3
 80119d8:	0003      	movs	r3, r0
 80119da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	3301      	adds	r3, #1
 80119e0:	2202      	movs	r2, #2
 80119e2:	701a      	strb	r2, [r3, #0]
      break;
 80119e4:	e12f      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	885b      	ldrh	r3, [r3, #2]
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	2b05      	cmp	r3, #5
 80119ee:	d900      	bls.n	80119f2 <USBD_GetDescriptor+0xa6>
 80119f0:	e0d0      	b.n	8011b94 <USBD_GetDescriptor+0x248>
 80119f2:	009a      	lsls	r2, r3, #2
 80119f4:	4bad      	ldr	r3, [pc, #692]	; (8011cac <USBD_GetDescriptor+0x360>)
 80119f6:	18d3      	adds	r3, r2, r3
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	23ac      	movs	r3, #172	; 0xac
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	58d3      	ldr	r3, [r2, r3]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00d      	beq.n	8011a26 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	23ac      	movs	r3, #172	; 0xac
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	58d3      	ldr	r3, [r2, r3]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	7c12      	ldrb	r2, [r2, #16]
 8011a18:	2108      	movs	r1, #8
 8011a1a:	1879      	adds	r1, r7, r1
 8011a1c:	0010      	movs	r0, r2
 8011a1e:	4798      	blx	r3
 8011a20:	0003      	movs	r3, r0
 8011a22:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a24:	e0c3      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	0011      	movs	r1, r2
 8011a2c:	0018      	movs	r0, r3
 8011a2e:	f000 fb23 	bl	8012078 <USBD_CtlError>
            err++;
 8011a32:	210b      	movs	r1, #11
 8011a34:	187b      	adds	r3, r7, r1
 8011a36:	781a      	ldrb	r2, [r3, #0]
 8011a38:	187b      	adds	r3, r7, r1
 8011a3a:	3201      	adds	r2, #1
 8011a3c:	701a      	strb	r2, [r3, #0]
          break;
 8011a3e:	e0b6      	b.n	8011bae <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	23ac      	movs	r3, #172	; 0xac
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	58d3      	ldr	r3, [r2, r3]
 8011a48:	689b      	ldr	r3, [r3, #8]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00d      	beq.n	8011a6a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	23ac      	movs	r3, #172	; 0xac
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	58d3      	ldr	r3, [r2, r3]
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	7c12      	ldrb	r2, [r2, #16]
 8011a5c:	2108      	movs	r1, #8
 8011a5e:	1879      	adds	r1, r7, r1
 8011a60:	0010      	movs	r0, r2
 8011a62:	4798      	blx	r3
 8011a64:	0003      	movs	r3, r0
 8011a66:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a68:	e0a1      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	0011      	movs	r1, r2
 8011a70:	0018      	movs	r0, r3
 8011a72:	f000 fb01 	bl	8012078 <USBD_CtlError>
            err++;
 8011a76:	210b      	movs	r1, #11
 8011a78:	187b      	adds	r3, r7, r1
 8011a7a:	781a      	ldrb	r2, [r3, #0]
 8011a7c:	187b      	adds	r3, r7, r1
 8011a7e:	3201      	adds	r2, #1
 8011a80:	701a      	strb	r2, [r3, #0]
          break;
 8011a82:	e094      	b.n	8011bae <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	23ac      	movs	r3, #172	; 0xac
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	58d3      	ldr	r3, [r2, r3]
 8011a8c:	68db      	ldr	r3, [r3, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00d      	beq.n	8011aae <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	23ac      	movs	r3, #172	; 0xac
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	58d3      	ldr	r3, [r2, r3]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	7c12      	ldrb	r2, [r2, #16]
 8011aa0:	2108      	movs	r1, #8
 8011aa2:	1879      	adds	r1, r7, r1
 8011aa4:	0010      	movs	r0, r2
 8011aa6:	4798      	blx	r3
 8011aa8:	0003      	movs	r3, r0
 8011aaa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011aac:	e07f      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011aae:	683a      	ldr	r2, [r7, #0]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	0011      	movs	r1, r2
 8011ab4:	0018      	movs	r0, r3
 8011ab6:	f000 fadf 	bl	8012078 <USBD_CtlError>
            err++;
 8011aba:	210b      	movs	r1, #11
 8011abc:	187b      	adds	r3, r7, r1
 8011abe:	781a      	ldrb	r2, [r3, #0]
 8011ac0:	187b      	adds	r3, r7, r1
 8011ac2:	3201      	adds	r2, #1
 8011ac4:	701a      	strb	r2, [r3, #0]
          break;
 8011ac6:	e072      	b.n	8011bae <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	23ac      	movs	r3, #172	; 0xac
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	58d3      	ldr	r3, [r2, r3]
 8011ad0:	691b      	ldr	r3, [r3, #16]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00d      	beq.n	8011af2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	23ac      	movs	r3, #172	; 0xac
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	58d3      	ldr	r3, [r2, r3]
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	7c12      	ldrb	r2, [r2, #16]
 8011ae4:	2108      	movs	r1, #8
 8011ae6:	1879      	adds	r1, r7, r1
 8011ae8:	0010      	movs	r0, r2
 8011aea:	4798      	blx	r3
 8011aec:	0003      	movs	r3, r0
 8011aee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011af0:	e05d      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011af2:	683a      	ldr	r2, [r7, #0]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	0011      	movs	r1, r2
 8011af8:	0018      	movs	r0, r3
 8011afa:	f000 fabd 	bl	8012078 <USBD_CtlError>
            err++;
 8011afe:	210b      	movs	r1, #11
 8011b00:	187b      	adds	r3, r7, r1
 8011b02:	781a      	ldrb	r2, [r3, #0]
 8011b04:	187b      	adds	r3, r7, r1
 8011b06:	3201      	adds	r2, #1
 8011b08:	701a      	strb	r2, [r3, #0]
          break;
 8011b0a:	e050      	b.n	8011bae <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	23ac      	movs	r3, #172	; 0xac
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	58d3      	ldr	r3, [r2, r3]
 8011b14:	695b      	ldr	r3, [r3, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d00d      	beq.n	8011b36 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	23ac      	movs	r3, #172	; 0xac
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	58d3      	ldr	r3, [r2, r3]
 8011b22:	695b      	ldr	r3, [r3, #20]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	7c12      	ldrb	r2, [r2, #16]
 8011b28:	2108      	movs	r1, #8
 8011b2a:	1879      	adds	r1, r7, r1
 8011b2c:	0010      	movs	r0, r2
 8011b2e:	4798      	blx	r3
 8011b30:	0003      	movs	r3, r0
 8011b32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b34:	e03b      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	0011      	movs	r1, r2
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f000 fa9b 	bl	8012078 <USBD_CtlError>
            err++;
 8011b42:	210b      	movs	r1, #11
 8011b44:	187b      	adds	r3, r7, r1
 8011b46:	781a      	ldrb	r2, [r3, #0]
 8011b48:	187b      	adds	r3, r7, r1
 8011b4a:	3201      	adds	r2, #1
 8011b4c:	701a      	strb	r2, [r3, #0]
          break;
 8011b4e:	e02e      	b.n	8011bae <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	23ac      	movs	r3, #172	; 0xac
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	58d3      	ldr	r3, [r2, r3]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00d      	beq.n	8011b7a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	23ac      	movs	r3, #172	; 0xac
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	58d3      	ldr	r3, [r2, r3]
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	687a      	ldr	r2, [r7, #4]
 8011b6a:	7c12      	ldrb	r2, [r2, #16]
 8011b6c:	2108      	movs	r1, #8
 8011b6e:	1879      	adds	r1, r7, r1
 8011b70:	0010      	movs	r0, r2
 8011b72:	4798      	blx	r3
 8011b74:	0003      	movs	r3, r0
 8011b76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b78:	e019      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8011b7a:	683a      	ldr	r2, [r7, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	0011      	movs	r1, r2
 8011b80:	0018      	movs	r0, r3
 8011b82:	f000 fa79 	bl	8012078 <USBD_CtlError>
            err++;
 8011b86:	210b      	movs	r1, #11
 8011b88:	187b      	adds	r3, r7, r1
 8011b8a:	781a      	ldrb	r2, [r3, #0]
 8011b8c:	187b      	adds	r3, r7, r1
 8011b8e:	3201      	adds	r2, #1
 8011b90:	701a      	strb	r2, [r3, #0]
          break;
 8011b92:	e00c      	b.n	8011bae <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	0011      	movs	r1, r2
 8011b9a:	0018      	movs	r0, r3
 8011b9c:	f000 fa6c 	bl	8012078 <USBD_CtlError>
          err++;
 8011ba0:	210b      	movs	r1, #11
 8011ba2:	187b      	adds	r3, r7, r1
 8011ba4:	781a      	ldrb	r2, [r3, #0]
 8011ba6:	187b      	adds	r3, r7, r1
 8011ba8:	3201      	adds	r2, #1
 8011baa:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8011bac:	e04b      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>
 8011bae:	e04a      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	7c1b      	ldrb	r3, [r3, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10b      	bne.n	8011bd0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	23ad      	movs	r3, #173	; 0xad
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	58d3      	ldr	r3, [r2, r3]
 8011bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bc2:	2208      	movs	r2, #8
 8011bc4:	18ba      	adds	r2, r7, r2
 8011bc6:	0010      	movs	r0, r2
 8011bc8:	4798      	blx	r3
 8011bca:	0003      	movs	r3, r0
 8011bcc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bce:	e03a      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8011bd0:	683a      	ldr	r2, [r7, #0]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	0011      	movs	r1, r2
 8011bd6:	0018      	movs	r0, r3
 8011bd8:	f000 fa4e 	bl	8012078 <USBD_CtlError>
        err++;
 8011bdc:	210b      	movs	r1, #11
 8011bde:	187b      	adds	r3, r7, r1
 8011be0:	781a      	ldrb	r2, [r3, #0]
 8011be2:	187b      	adds	r3, r7, r1
 8011be4:	3201      	adds	r2, #1
 8011be6:	701a      	strb	r2, [r3, #0]
      break;
 8011be8:	e02d      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	7c1b      	ldrb	r3, [r3, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d10f      	bne.n	8011c12 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	23ad      	movs	r3, #173	; 0xad
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	58d3      	ldr	r3, [r2, r3]
 8011bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bfc:	2208      	movs	r2, #8
 8011bfe:	18ba      	adds	r2, r7, r2
 8011c00:	0010      	movs	r0, r2
 8011c02:	4798      	blx	r3
 8011c04:	0003      	movs	r3, r0
 8011c06:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	2207      	movs	r2, #7
 8011c0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c10:	e019      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	0011      	movs	r1, r2
 8011c18:	0018      	movs	r0, r3
 8011c1a:	f000 fa2d 	bl	8012078 <USBD_CtlError>
        err++;
 8011c1e:	210b      	movs	r1, #11
 8011c20:	187b      	adds	r3, r7, r1
 8011c22:	781a      	ldrb	r2, [r3, #0]
 8011c24:	187b      	adds	r3, r7, r1
 8011c26:	3201      	adds	r2, #1
 8011c28:	701a      	strb	r2, [r3, #0]
      break;
 8011c2a:	e00c      	b.n	8011c46 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8011c2c:	683a      	ldr	r2, [r7, #0]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	0011      	movs	r1, r2
 8011c32:	0018      	movs	r0, r3
 8011c34:	f000 fa20 	bl	8012078 <USBD_CtlError>
      err++;
 8011c38:	210b      	movs	r1, #11
 8011c3a:	187b      	adds	r3, r7, r1
 8011c3c:	781a      	ldrb	r2, [r3, #0]
 8011c3e:	187b      	adds	r3, r7, r1
 8011c40:	3201      	adds	r2, #1
 8011c42:	701a      	strb	r2, [r3, #0]
      break;
 8011c44:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8011c46:	230b      	movs	r3, #11
 8011c48:	18fb      	adds	r3, r7, r3
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d127      	bne.n	8011ca0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8011c50:	2108      	movs	r1, #8
 8011c52:	187b      	adds	r3, r7, r1
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d019      	beq.n	8011c8e <USBD_GetDescriptor+0x342>
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	88db      	ldrh	r3, [r3, #6]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d015      	beq.n	8011c8e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	88da      	ldrh	r2, [r3, #6]
 8011c66:	187b      	adds	r3, r7, r1
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	1c18      	adds	r0, r3, #0
 8011c6c:	1c11      	adds	r1, r2, #0
 8011c6e:	b28a      	uxth	r2, r1
 8011c70:	b283      	uxth	r3, r0
 8011c72:	429a      	cmp	r2, r3
 8011c74:	d900      	bls.n	8011c78 <USBD_GetDescriptor+0x32c>
 8011c76:	1c01      	adds	r1, r0, #0
 8011c78:	b28a      	uxth	r2, r1
 8011c7a:	2108      	movs	r1, #8
 8011c7c:	187b      	adds	r3, r7, r1
 8011c7e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011c80:	187b      	adds	r3, r7, r1
 8011c82:	881a      	ldrh	r2, [r3, #0]
 8011c84:	68f9      	ldr	r1, [r7, #12]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	0018      	movs	r0, r3
 8011c8a:	f000 fa73 	bl	8012174 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	88db      	ldrh	r3, [r3, #6]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d105      	bne.n	8011ca2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	0018      	movs	r0, r3
 8011c9a:	f000 fad5 	bl	8012248 <USBD_CtlSendStatus>
 8011c9e:	e000      	b.n	8011ca2 <USBD_GetDescriptor+0x356>
    return;
 8011ca0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	b004      	add	sp, #16
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	08016488 	.word	0x08016488
 8011cac:	080164a8 	.word	0x080164a8

08011cb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011cb0:	b590      	push	{r4, r7, lr}
 8011cb2:	b085      	sub	sp, #20
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	889b      	ldrh	r3, [r3, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d13d      	bne.n	8011d3e <USBD_SetAddress+0x8e>
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	88db      	ldrh	r3, [r3, #6]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d139      	bne.n	8011d3e <USBD_SetAddress+0x8e>
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	885b      	ldrh	r3, [r3, #2]
 8011cce:	2b7f      	cmp	r3, #127	; 0x7f
 8011cd0:	d835      	bhi.n	8011d3e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	885b      	ldrh	r3, [r3, #2]
 8011cd6:	b2da      	uxtb	r2, r3
 8011cd8:	230f      	movs	r3, #15
 8011cda:	18fb      	adds	r3, r7, r3
 8011cdc:	217f      	movs	r1, #127	; 0x7f
 8011cde:	400a      	ands	r2, r1
 8011ce0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	23a7      	movs	r3, #167	; 0xa7
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	5cd3      	ldrb	r3, [r2, r3]
 8011cea:	2b03      	cmp	r3, #3
 8011cec:	d106      	bne.n	8011cfc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	0011      	movs	r1, r2
 8011cf4:	0018      	movs	r0, r3
 8011cf6:	f000 f9bf 	bl	8012078 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cfa:	e027      	b.n	8011d4c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	240f      	movs	r4, #15
 8011d00:	193a      	adds	r2, r7, r4
 8011d02:	4914      	ldr	r1, [pc, #80]	; (8011d54 <USBD_SetAddress+0xa4>)
 8011d04:	7812      	ldrb	r2, [r2, #0]
 8011d06:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011d08:	193b      	adds	r3, r7, r4
 8011d0a:	781a      	ldrb	r2, [r3, #0]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	0011      	movs	r1, r2
 8011d10:	0018      	movs	r0, r3
 8011d12:	f000 feff 	bl	8012b14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	0018      	movs	r0, r3
 8011d1a:	f000 fa95 	bl	8012248 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011d1e:	193b      	adds	r3, r7, r4
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d005      	beq.n	8011d32 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	23a7      	movs	r3, #167	; 0xa7
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	2102      	movs	r1, #2
 8011d2e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d30:	e00c      	b.n	8011d4c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	23a7      	movs	r3, #167	; 0xa7
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	2101      	movs	r1, #1
 8011d3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d3c:	e006      	b.n	8011d4c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	0011      	movs	r1, r2
 8011d44:	0018      	movs	r0, r3
 8011d46:	f000 f997 	bl	8012078 <USBD_CtlError>
  }
}
 8011d4a:	46c0      	nop			; (mov r8, r8)
 8011d4c:	46c0      	nop			; (mov r8, r8)
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	b005      	add	sp, #20
 8011d52:	bd90      	pop	{r4, r7, pc}
 8011d54:	0000029e 	.word	0x0000029e

08011d58 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	885b      	ldrh	r3, [r3, #2]
 8011d66:	b2da      	uxtb	r2, r3
 8011d68:	4b4c      	ldr	r3, [pc, #304]	; (8011e9c <USBD_SetConfig+0x144>)
 8011d6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011d6c:	4b4b      	ldr	r3, [pc, #300]	; (8011e9c <USBD_SetConfig+0x144>)
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d906      	bls.n	8011d82 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8011d74:	683a      	ldr	r2, [r7, #0]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	0011      	movs	r1, r2
 8011d7a:	0018      	movs	r0, r3
 8011d7c:	f000 f97c 	bl	8012078 <USBD_CtlError>
 8011d80:	e088      	b.n	8011e94 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	23a7      	movs	r3, #167	; 0xa7
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	5cd3      	ldrb	r3, [r2, r3]
 8011d8a:	2b02      	cmp	r3, #2
 8011d8c:	d002      	beq.n	8011d94 <USBD_SetConfig+0x3c>
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d029      	beq.n	8011de6 <USBD_SetConfig+0x8e>
 8011d92:	e071      	b.n	8011e78 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8011d94:	4b41      	ldr	r3, [pc, #260]	; (8011e9c <USBD_SetConfig+0x144>)
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d01f      	beq.n	8011ddc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8011d9c:	4b3f      	ldr	r3, [pc, #252]	; (8011e9c <USBD_SetConfig+0x144>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	001a      	movs	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	23a7      	movs	r3, #167	; 0xa7
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	2103      	movs	r1, #3
 8011dae:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011db0:	4b3a      	ldr	r3, [pc, #232]	; (8011e9c <USBD_SetConfig+0x144>)
 8011db2:	781a      	ldrb	r2, [r3, #0]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	0011      	movs	r1, r2
 8011db8:	0018      	movs	r0, r3
 8011dba:	f7ff f8c6 	bl	8010f4a <USBD_SetClassConfig>
 8011dbe:	0003      	movs	r3, r0
 8011dc0:	2b02      	cmp	r3, #2
 8011dc2:	d106      	bne.n	8011dd2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	0011      	movs	r1, r2
 8011dca:	0018      	movs	r0, r3
 8011dcc:	f000 f954 	bl	8012078 <USBD_CtlError>
            return;
 8011dd0:	e060      	b.n	8011e94 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	0018      	movs	r0, r3
 8011dd6:	f000 fa37 	bl	8012248 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011dda:	e05b      	b.n	8011e94 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	0018      	movs	r0, r3
 8011de0:	f000 fa32 	bl	8012248 <USBD_CtlSendStatus>
        break;
 8011de4:	e056      	b.n	8011e94 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8011de6:	4b2d      	ldr	r3, [pc, #180]	; (8011e9c <USBD_SetConfig+0x144>)
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d115      	bne.n	8011e1a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	23a7      	movs	r3, #167	; 0xa7
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	2102      	movs	r1, #2
 8011df6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8011df8:	4b28      	ldr	r3, [pc, #160]	; (8011e9c <USBD_SetConfig+0x144>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	001a      	movs	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8011e02:	4b26      	ldr	r3, [pc, #152]	; (8011e9c <USBD_SetConfig+0x144>)
 8011e04:	781a      	ldrb	r2, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	0011      	movs	r1, r2
 8011e0a:	0018      	movs	r0, r3
 8011e0c:	f7ff f8c4 	bl	8010f98 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	0018      	movs	r0, r3
 8011e14:	f000 fa18 	bl	8012248 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011e18:	e03c      	b.n	8011e94 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8011e1a:	4b20      	ldr	r3, [pc, #128]	; (8011e9c <USBD_SetConfig+0x144>)
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	001a      	movs	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d022      	beq.n	8011e6e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	0011      	movs	r1, r2
 8011e32:	0018      	movs	r0, r3
 8011e34:	f7ff f8b0 	bl	8010f98 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8011e38:	4b18      	ldr	r3, [pc, #96]	; (8011e9c <USBD_SetConfig+0x144>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	001a      	movs	r2, r3
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011e42:	4b16      	ldr	r3, [pc, #88]	; (8011e9c <USBD_SetConfig+0x144>)
 8011e44:	781a      	ldrb	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	0011      	movs	r1, r2
 8011e4a:	0018      	movs	r0, r3
 8011e4c:	f7ff f87d 	bl	8010f4a <USBD_SetClassConfig>
 8011e50:	0003      	movs	r3, r0
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d106      	bne.n	8011e64 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	0011      	movs	r1, r2
 8011e5c:	0018      	movs	r0, r3
 8011e5e:	f000 f90b 	bl	8012078 <USBD_CtlError>
            return;
 8011e62:	e017      	b.n	8011e94 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	0018      	movs	r0, r3
 8011e68:	f000 f9ee 	bl	8012248 <USBD_CtlSendStatus>
        break;
 8011e6c:	e012      	b.n	8011e94 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	0018      	movs	r0, r3
 8011e72:	f000 f9e9 	bl	8012248 <USBD_CtlSendStatus>
        break;
 8011e76:	e00d      	b.n	8011e94 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8011e78:	683a      	ldr	r2, [r7, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	0011      	movs	r1, r2
 8011e7e:	0018      	movs	r0, r3
 8011e80:	f000 f8fa 	bl	8012078 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8011e84:	4b05      	ldr	r3, [pc, #20]	; (8011e9c <USBD_SetConfig+0x144>)
 8011e86:	781a      	ldrb	r2, [r3, #0]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	0011      	movs	r1, r2
 8011e8c:	0018      	movs	r0, r3
 8011e8e:	f7ff f883 	bl	8010f98 <USBD_ClrClassConfig>
        break;
 8011e92:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8011e94:	46bd      	mov	sp, r7
 8011e96:	b002      	add	sp, #8
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	46c0      	nop			; (mov r8, r8)
 8011e9c:	20001774 	.word	0x20001774

08011ea0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	88db      	ldrh	r3, [r3, #6]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d006      	beq.n	8011ec0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8011eb2:	683a      	ldr	r2, [r7, #0]
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	0011      	movs	r1, r2
 8011eb8:	0018      	movs	r0, r3
 8011eba:	f000 f8dd 	bl	8012078 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011ebe:	e026      	b.n	8011f0e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	23a7      	movs	r3, #167	; 0xa7
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	5cd3      	ldrb	r3, [r2, r3]
 8011ec8:	2b02      	cmp	r3, #2
 8011eca:	dc02      	bgt.n	8011ed2 <USBD_GetConfig+0x32>
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dc03      	bgt.n	8011ed8 <USBD_GetConfig+0x38>
 8011ed0:	e016      	b.n	8011f00 <USBD_GetConfig+0x60>
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d00c      	beq.n	8011ef0 <USBD_GetConfig+0x50>
 8011ed6:	e013      	b.n	8011f00 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	3308      	adds	r3, #8
 8011ee2:	0019      	movs	r1, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	0018      	movs	r0, r3
 8011eea:	f000 f943 	bl	8012174 <USBD_CtlSendData>
        break;
 8011eee:	e00e      	b.n	8011f0e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	1d19      	adds	r1, r3, #4
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	0018      	movs	r0, r3
 8011efa:	f000 f93b 	bl	8012174 <USBD_CtlSendData>
        break;
 8011efe:	e006      	b.n	8011f0e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8011f00:	683a      	ldr	r2, [r7, #0]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	0011      	movs	r1, r2
 8011f06:	0018      	movs	r0, r3
 8011f08:	f000 f8b6 	bl	8012078 <USBD_CtlError>
        break;
 8011f0c:	46c0      	nop			; (mov r8, r8)
}
 8011f0e:	46c0      	nop			; (mov r8, r8)
 8011f10:	46bd      	mov	sp, r7
 8011f12:	b002      	add	sp, #8
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b082      	sub	sp, #8
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	23a7      	movs	r3, #167	; 0xa7
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	5cd3      	ldrb	r3, [r2, r3]
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	2b02      	cmp	r3, #2
 8011f2c:	d822      	bhi.n	8011f74 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	88db      	ldrh	r3, [r3, #6]
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	d006      	beq.n	8011f44 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8011f36:	683a      	ldr	r2, [r7, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	0011      	movs	r1, r2
 8011f3c:	0018      	movs	r0, r3
 8011f3e:	f000 f89b 	bl	8012078 <USBD_CtlError>
        break;
 8011f42:	e01e      	b.n	8011f82 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	23a9      	movs	r3, #169	; 0xa9
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	58d3      	ldr	r3, [r2, r3]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d005      	beq.n	8011f62 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	2202      	movs	r2, #2
 8011f5c:	431a      	orrs	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	330c      	adds	r3, #12
 8011f66:	0019      	movs	r1, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2202      	movs	r2, #2
 8011f6c:	0018      	movs	r0, r3
 8011f6e:	f000 f901 	bl	8012174 <USBD_CtlSendData>
      break;
 8011f72:	e006      	b.n	8011f82 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8011f74:	683a      	ldr	r2, [r7, #0]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	0011      	movs	r1, r2
 8011f7a:	0018      	movs	r0, r3
 8011f7c:	f000 f87c 	bl	8012078 <USBD_CtlError>
      break;
 8011f80:	46c0      	nop			; (mov r8, r8)
  }
}
 8011f82:	46c0      	nop			; (mov r8, r8)
 8011f84:	46bd      	mov	sp, r7
 8011f86:	b002      	add	sp, #8
 8011f88:	bd80      	pop	{r7, pc}

08011f8a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	885b      	ldrh	r3, [r3, #2]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d108      	bne.n	8011fae <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	23a9      	movs	r3, #169	; 0xa9
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	2101      	movs	r1, #1
 8011fa4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	0018      	movs	r0, r3
 8011faa:	f000 f94d 	bl	8012248 <USBD_CtlSendStatus>
  }
}
 8011fae:	46c0      	nop			; (mov r8, r8)
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	b002      	add	sp, #8
 8011fb4:	bd80      	pop	{r7, pc}

08011fb6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011fb6:	b580      	push	{r7, lr}
 8011fb8:	b082      	sub	sp, #8
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	23a7      	movs	r3, #167	; 0xa7
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	5cd3      	ldrb	r3, [r2, r3]
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	d80d      	bhi.n	8011fea <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	885b      	ldrh	r3, [r3, #2]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d110      	bne.n	8011ff8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	23a9      	movs	r3, #169	; 0xa9
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	2100      	movs	r1, #0
 8011fde:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	0018      	movs	r0, r3
 8011fe4:	f000 f930 	bl	8012248 <USBD_CtlSendStatus>
      }
      break;
 8011fe8:	e006      	b.n	8011ff8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	0011      	movs	r1, r2
 8011ff0:	0018      	movs	r0, r3
 8011ff2:	f000 f841 	bl	8012078 <USBD_CtlError>
      break;
 8011ff6:	e000      	b.n	8011ffa <USBD_ClrFeature+0x44>
      break;
 8011ff8:	46c0      	nop			; (mov r8, r8)
  }
}
 8011ffa:	46c0      	nop			; (mov r8, r8)
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	b002      	add	sp, #8
 8012000:	bd80      	pop	{r7, pc}

08012002 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b082      	sub	sp, #8
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
 801200a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781a      	ldrb	r2, [r3, #0]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	785a      	ldrb	r2, [r3, #1]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	3302      	adds	r3, #2
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	b29a      	uxth	r2, r3
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	3303      	adds	r3, #3
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	b29b      	uxth	r3, r3
 801202c:	021b      	lsls	r3, r3, #8
 801202e:	b29b      	uxth	r3, r3
 8012030:	18d3      	adds	r3, r2, r3
 8012032:	b29a      	uxth	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	3304      	adds	r3, #4
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	b29a      	uxth	r2, r3
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	3305      	adds	r3, #5
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	b29b      	uxth	r3, r3
 8012048:	021b      	lsls	r3, r3, #8
 801204a:	b29b      	uxth	r3, r3
 801204c:	18d3      	adds	r3, r2, r3
 801204e:	b29a      	uxth	r2, r3
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	3306      	adds	r3, #6
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	b29a      	uxth	r2, r3
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	3307      	adds	r3, #7
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	b29b      	uxth	r3, r3
 8012064:	021b      	lsls	r3, r3, #8
 8012066:	b29b      	uxth	r3, r3
 8012068:	18d3      	adds	r3, r2, r3
 801206a:	b29a      	uxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	80da      	strh	r2, [r3, #6]

}
 8012070:	46c0      	nop			; (mov r8, r8)
 8012072:	46bd      	mov	sp, r7
 8012074:	b002      	add	sp, #8
 8012076:	bd80      	pop	{r7, pc}

08012078 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2180      	movs	r1, #128	; 0x80
 8012086:	0018      	movs	r0, r3
 8012088:	f000 fcbd 	bl	8012a06 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2100      	movs	r1, #0
 8012090:	0018      	movs	r0, r3
 8012092:	f000 fcb8 	bl	8012a06 <USBD_LL_StallEP>
}
 8012096:	46c0      	nop			; (mov r8, r8)
 8012098:	46bd      	mov	sp, r7
 801209a:	b002      	add	sp, #8
 801209c:	bd80      	pop	{r7, pc}

0801209e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801209e:	b590      	push	{r4, r7, lr}
 80120a0:	b087      	sub	sp, #28
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	60f8      	str	r0, [r7, #12]
 80120a6:	60b9      	str	r1, [r7, #8]
 80120a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80120aa:	2417      	movs	r4, #23
 80120ac:	193b      	adds	r3, r7, r4
 80120ae:	2200      	movs	r2, #0
 80120b0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d03c      	beq.n	8012132 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	0018      	movs	r0, r3
 80120bc:	f000 f83d 	bl	801213a <USBD_GetLen>
 80120c0:	0003      	movs	r3, r0
 80120c2:	3301      	adds	r3, #1
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	18db      	adds	r3, r3, r3
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80120ce:	193b      	adds	r3, r7, r4
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	193a      	adds	r2, r7, r4
 80120d4:	1c59      	adds	r1, r3, #1
 80120d6:	7011      	strb	r1, [r2, #0]
 80120d8:	001a      	movs	r2, r3
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	189b      	adds	r3, r3, r2
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	7812      	ldrb	r2, [r2, #0]
 80120e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80120e4:	193b      	adds	r3, r7, r4
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	193a      	adds	r2, r7, r4
 80120ea:	1c59      	adds	r1, r3, #1
 80120ec:	7011      	strb	r1, [r2, #0]
 80120ee:	001a      	movs	r2, r3
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	189b      	adds	r3, r3, r2
 80120f4:	2203      	movs	r2, #3
 80120f6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80120f8:	e017      	b.n	801212a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	1c5a      	adds	r2, r3, #1
 80120fe:	60fa      	str	r2, [r7, #12]
 8012100:	2417      	movs	r4, #23
 8012102:	193a      	adds	r2, r7, r4
 8012104:	7812      	ldrb	r2, [r2, #0]
 8012106:	1939      	adds	r1, r7, r4
 8012108:	1c50      	adds	r0, r2, #1
 801210a:	7008      	strb	r0, [r1, #0]
 801210c:	0011      	movs	r1, r2
 801210e:	68ba      	ldr	r2, [r7, #8]
 8012110:	1852      	adds	r2, r2, r1
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8012116:	193b      	adds	r3, r7, r4
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	193a      	adds	r2, r7, r4
 801211c:	1c59      	adds	r1, r3, #1
 801211e:	7011      	strb	r1, [r2, #0]
 8012120:	001a      	movs	r2, r3
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	189b      	adds	r3, r3, r2
 8012126:	2200      	movs	r2, #0
 8012128:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1e3      	bne.n	80120fa <USBD_GetString+0x5c>
    }
  }
}
 8012132:	46c0      	nop			; (mov r8, r8)
 8012134:	46bd      	mov	sp, r7
 8012136:	b007      	add	sp, #28
 8012138:	bd90      	pop	{r4, r7, pc}

0801213a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801213a:	b580      	push	{r7, lr}
 801213c:	b084      	sub	sp, #16
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012142:	230f      	movs	r3, #15
 8012144:	18fb      	adds	r3, r7, r3
 8012146:	2200      	movs	r2, #0
 8012148:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801214a:	e008      	b.n	801215e <USBD_GetLen+0x24>
  {
    len++;
 801214c:	210f      	movs	r1, #15
 801214e:	187b      	adds	r3, r7, r1
 8012150:	781a      	ldrb	r2, [r3, #0]
 8012152:	187b      	adds	r3, r7, r1
 8012154:	3201      	adds	r2, #1
 8012156:	701a      	strb	r2, [r3, #0]
    buf++;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	3301      	adds	r3, #1
 801215c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1f2      	bne.n	801214c <USBD_GetLen+0x12>
  }

  return len;
 8012166:	230f      	movs	r3, #15
 8012168:	18fb      	adds	r3, r7, r3
 801216a:	781b      	ldrb	r3, [r3, #0]
}
 801216c:	0018      	movs	r0, r3
 801216e:	46bd      	mov	sp, r7
 8012170:	b004      	add	sp, #16
 8012172:	bd80      	pop	{r7, pc}

08012174 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	1dbb      	adds	r3, r7, #6
 8012180:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	23a5      	movs	r3, #165	; 0xa5
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	2102      	movs	r1, #2
 801218a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801218c:	1dbb      	adds	r3, r7, #6
 801218e:	881a      	ldrh	r2, [r3, #0]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012194:	1dbb      	adds	r3, r7, #6
 8012196:	881a      	ldrh	r2, [r3, #0]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801219c:	1dbb      	adds	r3, r7, #6
 801219e:	881b      	ldrh	r3, [r3, #0]
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	2100      	movs	r1, #0
 80121a6:	f000 fce0 	bl	8012b6a <USBD_LL_Transmit>

  return USBD_OK;
 80121aa:	2300      	movs	r3, #0
}
 80121ac:	0018      	movs	r0, r3
 80121ae:	46bd      	mov	sp, r7
 80121b0:	b004      	add	sp, #16
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	1dbb      	adds	r3, r7, #6
 80121c0:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80121c2:	1dbb      	adds	r3, r7, #6
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	2100      	movs	r1, #0
 80121cc:	f000 fccd 	bl	8012b6a <USBD_LL_Transmit>

  return USBD_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	0018      	movs	r0, r3
 80121d4:	46bd      	mov	sp, r7
 80121d6:	b004      	add	sp, #16
 80121d8:	bd80      	pop	{r7, pc}

080121da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	60f8      	str	r0, [r7, #12]
 80121e2:	60b9      	str	r1, [r7, #8]
 80121e4:	1dbb      	adds	r3, r7, #6
 80121e6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	23a5      	movs	r3, #165	; 0xa5
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	2103      	movs	r1, #3
 80121f0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80121f2:	1dbb      	adds	r3, r7, #6
 80121f4:	8819      	ldrh	r1, [r3, #0]
 80121f6:	68fa      	ldr	r2, [r7, #12]
 80121f8:	23ae      	movs	r3, #174	; 0xae
 80121fa:	005b      	lsls	r3, r3, #1
 80121fc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80121fe:	1dbb      	adds	r3, r7, #6
 8012200:	8819      	ldrh	r1, [r3, #0]
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	23b0      	movs	r3, #176	; 0xb0
 8012206:	005b      	lsls	r3, r3, #1
 8012208:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801220a:	1dbb      	adds	r3, r7, #6
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	2100      	movs	r1, #0
 8012214:	f000 fce0 	bl	8012bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012218:	2300      	movs	r3, #0
}
 801221a:	0018      	movs	r0, r3
 801221c:	46bd      	mov	sp, r7
 801221e:	b004      	add	sp, #16
 8012220:	bd80      	pop	{r7, pc}

08012222 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b084      	sub	sp, #16
 8012226:	af00      	add	r7, sp, #0
 8012228:	60f8      	str	r0, [r7, #12]
 801222a:	60b9      	str	r1, [r7, #8]
 801222c:	1dbb      	adds	r3, r7, #6
 801222e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012230:	1dbb      	adds	r3, r7, #6
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	2100      	movs	r1, #0
 801223a:	f000 fccd 	bl	8012bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	0018      	movs	r0, r3
 8012242:	46bd      	mov	sp, r7
 8012244:	b004      	add	sp, #16
 8012246:	bd80      	pop	{r7, pc}

08012248 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012250:	687a      	ldr	r2, [r7, #4]
 8012252:	23a5      	movs	r3, #165	; 0xa5
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	2104      	movs	r1, #4
 8012258:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	2300      	movs	r3, #0
 801225e:	2200      	movs	r2, #0
 8012260:	2100      	movs	r1, #0
 8012262:	f000 fc82 	bl	8012b6a <USBD_LL_Transmit>

  return USBD_OK;
 8012266:	2300      	movs	r3, #0
}
 8012268:	0018      	movs	r0, r3
 801226a:	46bd      	mov	sp, r7
 801226c:	b002      	add	sp, #8
 801226e:	bd80      	pop	{r7, pc}

08012270 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	23a5      	movs	r3, #165	; 0xa5
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	2105      	movs	r1, #5
 8012280:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	2300      	movs	r3, #0
 8012286:	2200      	movs	r2, #0
 8012288:	2100      	movs	r1, #0
 801228a:	f000 fca5 	bl	8012bd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801228e:	2300      	movs	r3, #0
}
 8012290:	0018      	movs	r0, r3
 8012292:	46bd      	mov	sp, r7
 8012294:	b002      	add	sp, #8
 8012296:	bd80      	pop	{r7, pc}

08012298 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801229c:	4914      	ldr	r1, [pc, #80]	; (80122f0 <MX_USB_DEVICE_Init+0x58>)
 801229e:	4b15      	ldr	r3, [pc, #84]	; (80122f4 <MX_USB_DEVICE_Init+0x5c>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	0018      	movs	r0, r3
 80122a4:	f7fe fdea 	bl	8010e7c <USBD_Init>
 80122a8:	1e03      	subs	r3, r0, #0
 80122aa:	d001      	beq.n	80122b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80122ac:	f7f5 fbf4 	bl	8007a98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80122b0:	4a11      	ldr	r2, [pc, #68]	; (80122f8 <MX_USB_DEVICE_Init+0x60>)
 80122b2:	4b10      	ldr	r3, [pc, #64]	; (80122f4 <MX_USB_DEVICE_Init+0x5c>)
 80122b4:	0011      	movs	r1, r2
 80122b6:	0018      	movs	r0, r3
 80122b8:	f7fe fe11 	bl	8010ede <USBD_RegisterClass>
 80122bc:	1e03      	subs	r3, r0, #0
 80122be:	d001      	beq.n	80122c4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80122c0:	f7f5 fbea 	bl	8007a98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80122c4:	4a0d      	ldr	r2, [pc, #52]	; (80122fc <MX_USB_DEVICE_Init+0x64>)
 80122c6:	4b0b      	ldr	r3, [pc, #44]	; (80122f4 <MX_USB_DEVICE_Init+0x5c>)
 80122c8:	0011      	movs	r1, r2
 80122ca:	0018      	movs	r0, r3
 80122cc:	f7fe fd26 	bl	8010d1c <USBD_CDC_RegisterInterface>
 80122d0:	1e03      	subs	r3, r0, #0
 80122d2:	d001      	beq.n	80122d8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80122d4:	f7f5 fbe0 	bl	8007a98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80122d8:	4b06      	ldr	r3, [pc, #24]	; (80122f4 <MX_USB_DEVICE_Init+0x5c>)
 80122da:	0018      	movs	r0, r3
 80122dc:	f7fe fe1f 	bl	8010f1e <USBD_Start>
 80122e0:	1e03      	subs	r3, r0, #0
 80122e2:	d001      	beq.n	80122e8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80122e4:	f7f5 fbd8 	bl	8007a98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80122e8:	46c0      	nop			; (mov r8, r8)
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	46c0      	nop			; (mov r8, r8)
 80122f0:	200001a4 	.word	0x200001a4
 80122f4:	20001c50 	.word	0x20001c50
 80122f8:	20000090 	.word	0x20000090
 80122fc:	20000194 	.word	0x20000194

08012300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012304:	4907      	ldr	r1, [pc, #28]	; (8012324 <CDC_Init_FS+0x24>)
 8012306:	4b08      	ldr	r3, [pc, #32]	; (8012328 <CDC_Init_FS+0x28>)
 8012308:	2200      	movs	r2, #0
 801230a:	0018      	movs	r0, r3
 801230c:	f7fe fd21 	bl	8010d52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012310:	4a06      	ldr	r2, [pc, #24]	; (801232c <CDC_Init_FS+0x2c>)
 8012312:	4b05      	ldr	r3, [pc, #20]	; (8012328 <CDC_Init_FS+0x28>)
 8012314:	0011      	movs	r1, r2
 8012316:	0018      	movs	r0, r3
 8012318:	f7fe fd37 	bl	8010d8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801231c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801231e:	0018      	movs	r0, r3
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	200022fc 	.word	0x200022fc
 8012328:	20001c50 	.word	0x20001c50
 801232c:	20001f14 	.word	0x20001f14

08012330 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012334:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012336:	0018      	movs	r0, r3
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6039      	str	r1, [r7, #0]
 8012344:	0011      	movs	r1, r2
 8012346:	1dfb      	adds	r3, r7, #7
 8012348:	1c02      	adds	r2, r0, #0
 801234a:	701a      	strb	r2, [r3, #0]
 801234c:	1d3b      	adds	r3, r7, #4
 801234e:	1c0a      	adds	r2, r1, #0
 8012350:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012352:	1dfb      	adds	r3, r7, #7
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2b23      	cmp	r3, #35	; 0x23
 8012358:	d804      	bhi.n	8012364 <CDC_Control_FS+0x28>
 801235a:	009a      	lsls	r2, r3, #2
 801235c:	4b04      	ldr	r3, [pc, #16]	; (8012370 <CDC_Control_FS+0x34>)
 801235e:	18d3      	adds	r3, r2, r3
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012364:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8012366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012368:	0018      	movs	r0, r3
 801236a:	46bd      	mov	sp, r7
 801236c:	b002      	add	sp, #8
 801236e:	bd80      	pop	{r7, pc}
 8012370:	080164c0 	.word	0x080164c0

08012374 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	4b06      	ldr	r3, [pc, #24]	; (801239c <CDC_Receive_FS+0x28>)
 8012382:	0011      	movs	r1, r2
 8012384:	0018      	movs	r0, r3
 8012386:	f7fe fd00 	bl	8010d8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801238a:	4b04      	ldr	r3, [pc, #16]	; (801239c <CDC_Receive_FS+0x28>)
 801238c:	0018      	movs	r0, r3
 801238e:	f7fe fd47 	bl	8010e20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012392:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012394:	0018      	movs	r0, r3
 8012396:	46bd      	mov	sp, r7
 8012398:	b002      	add	sp, #8
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20001c50 	.word	0x20001c50

080123a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80123a0:	b5b0      	push	{r4, r5, r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	000a      	movs	r2, r1
 80123aa:	1cbb      	adds	r3, r7, #2
 80123ac:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80123ae:	230f      	movs	r3, #15
 80123b0:	18fb      	adds	r3, r7, r3
 80123b2:	2200      	movs	r2, #0
 80123b4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80123b6:	4a11      	ldr	r2, [pc, #68]	; (80123fc <CDC_Transmit_FS+0x5c>)
 80123b8:	23ae      	movs	r3, #174	; 0xae
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	58d3      	ldr	r3, [r2, r3]
 80123be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	2385      	movs	r3, #133	; 0x85
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	58d3      	ldr	r3, [r2, r3]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e010      	b.n	80123f2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80123d0:	1cbb      	adds	r3, r7, #2
 80123d2:	881a      	ldrh	r2, [r3, #0]
 80123d4:	6879      	ldr	r1, [r7, #4]
 80123d6:	4b09      	ldr	r3, [pc, #36]	; (80123fc <CDC_Transmit_FS+0x5c>)
 80123d8:	0018      	movs	r0, r3
 80123da:	f7fe fcba 	bl	8010d52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80123de:	250f      	movs	r5, #15
 80123e0:	197c      	adds	r4, r7, r5
 80123e2:	4b06      	ldr	r3, [pc, #24]	; (80123fc <CDC_Transmit_FS+0x5c>)
 80123e4:	0018      	movs	r0, r3
 80123e6:	f7fe fce4 	bl	8010db2 <USBD_CDC_TransmitPacket>
 80123ea:	0003      	movs	r3, r0
 80123ec:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80123ee:	197b      	adds	r3, r7, r5
 80123f0:	781b      	ldrb	r3, [r3, #0]
}
 80123f2:	0018      	movs	r0, r3
 80123f4:	46bd      	mov	sp, r7
 80123f6:	b004      	add	sp, #16
 80123f8:	bdb0      	pop	{r4, r5, r7, pc}
 80123fa:	46c0      	nop			; (mov r8, r8)
 80123fc:	20001c50 	.word	0x20001c50

08012400 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	0002      	movs	r2, r0
 8012408:	6039      	str	r1, [r7, #0]
 801240a:	1dfb      	adds	r3, r7, #7
 801240c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	2212      	movs	r2, #18
 8012412:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012414:	4b02      	ldr	r3, [pc, #8]	; (8012420 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012416:	0018      	movs	r0, r3
 8012418:	46bd      	mov	sp, r7
 801241a:	b002      	add	sp, #8
 801241c:	bd80      	pop	{r7, pc}
 801241e:	46c0      	nop			; (mov r8, r8)
 8012420:	200001c0 	.word	0x200001c0

08012424 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	0002      	movs	r2, r0
 801242c:	6039      	str	r1, [r7, #0]
 801242e:	1dfb      	adds	r3, r7, #7
 8012430:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	2204      	movs	r2, #4
 8012436:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012438:	4b02      	ldr	r3, [pc, #8]	; (8012444 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801243a:	0018      	movs	r0, r3
 801243c:	46bd      	mov	sp, r7
 801243e:	b002      	add	sp, #8
 8012440:	bd80      	pop	{r7, pc}
 8012442:	46c0      	nop			; (mov r8, r8)
 8012444:	200001d4 	.word	0x200001d4

08012448 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	0002      	movs	r2, r0
 8012450:	6039      	str	r1, [r7, #0]
 8012452:	1dfb      	adds	r3, r7, #7
 8012454:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8012456:	1dfb      	adds	r3, r7, #7
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d106      	bne.n	801246c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	4908      	ldr	r1, [pc, #32]	; (8012484 <USBD_FS_ProductStrDescriptor+0x3c>)
 8012462:	4b09      	ldr	r3, [pc, #36]	; (8012488 <USBD_FS_ProductStrDescriptor+0x40>)
 8012464:	0018      	movs	r0, r3
 8012466:	f7ff fe1a 	bl	801209e <USBD_GetString>
 801246a:	e005      	b.n	8012478 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801246c:	683a      	ldr	r2, [r7, #0]
 801246e:	4905      	ldr	r1, [pc, #20]	; (8012484 <USBD_FS_ProductStrDescriptor+0x3c>)
 8012470:	4b05      	ldr	r3, [pc, #20]	; (8012488 <USBD_FS_ProductStrDescriptor+0x40>)
 8012472:	0018      	movs	r0, r3
 8012474:	f7ff fe13 	bl	801209e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012478:	4b02      	ldr	r3, [pc, #8]	; (8012484 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801247a:	0018      	movs	r0, r3
 801247c:	46bd      	mov	sp, r7
 801247e:	b002      	add	sp, #8
 8012480:	bd80      	pop	{r7, pc}
 8012482:	46c0      	nop			; (mov r8, r8)
 8012484:	200026e4 	.word	0x200026e4
 8012488:	0801640c 	.word	0x0801640c

0801248c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	0002      	movs	r2, r0
 8012494:	6039      	str	r1, [r7, #0]
 8012496:	1dfb      	adds	r3, r7, #7
 8012498:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801249a:	683a      	ldr	r2, [r7, #0]
 801249c:	4904      	ldr	r1, [pc, #16]	; (80124b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801249e:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7ff fdfc 	bl	801209e <USBD_GetString>
  return USBD_StrDesc;
 80124a6:	4b02      	ldr	r3, [pc, #8]	; (80124b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80124a8:	0018      	movs	r0, r3
 80124aa:	46bd      	mov	sp, r7
 80124ac:	b002      	add	sp, #8
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	200026e4 	.word	0x200026e4
 80124b4:	08016414 	.word	0x08016414

080124b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	0002      	movs	r2, r0
 80124c0:	6039      	str	r1, [r7, #0]
 80124c2:	1dfb      	adds	r3, r7, #7
 80124c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	221a      	movs	r2, #26
 80124ca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80124cc:	f000 f84c 	bl	8012568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80124d0:	4b02      	ldr	r3, [pc, #8]	; (80124dc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80124d2:	0018      	movs	r0, r3
 80124d4:	46bd      	mov	sp, r7
 80124d6:	b002      	add	sp, #8
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	46c0      	nop			; (mov r8, r8)
 80124dc:	200001d8 	.word	0x200001d8

080124e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	0002      	movs	r2, r0
 80124e8:	6039      	str	r1, [r7, #0]
 80124ea:	1dfb      	adds	r3, r7, #7
 80124ec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80124ee:	1dfb      	adds	r3, r7, #7
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80124f6:	683a      	ldr	r2, [r7, #0]
 80124f8:	4908      	ldr	r1, [pc, #32]	; (801251c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80124fa:	4b09      	ldr	r3, [pc, #36]	; (8012520 <USBD_FS_ConfigStrDescriptor+0x40>)
 80124fc:	0018      	movs	r0, r3
 80124fe:	f7ff fdce 	bl	801209e <USBD_GetString>
 8012502:	e005      	b.n	8012510 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	4905      	ldr	r1, [pc, #20]	; (801251c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8012508:	4b05      	ldr	r3, [pc, #20]	; (8012520 <USBD_FS_ConfigStrDescriptor+0x40>)
 801250a:	0018      	movs	r0, r3
 801250c:	f7ff fdc7 	bl	801209e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012510:	4b02      	ldr	r3, [pc, #8]	; (801251c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8012512:	0018      	movs	r0, r3
 8012514:	46bd      	mov	sp, r7
 8012516:	b002      	add	sp, #8
 8012518:	bd80      	pop	{r7, pc}
 801251a:	46c0      	nop			; (mov r8, r8)
 801251c:	200026e4 	.word	0x200026e4
 8012520:	08016420 	.word	0x08016420

08012524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
 801252a:	0002      	movs	r2, r0
 801252c:	6039      	str	r1, [r7, #0]
 801252e:	1dfb      	adds	r3, r7, #7
 8012530:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8012532:	1dfb      	adds	r3, r7, #7
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d106      	bne.n	8012548 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801253a:	683a      	ldr	r2, [r7, #0]
 801253c:	4908      	ldr	r1, [pc, #32]	; (8012560 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801253e:	4b09      	ldr	r3, [pc, #36]	; (8012564 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8012540:	0018      	movs	r0, r3
 8012542:	f7ff fdac 	bl	801209e <USBD_GetString>
 8012546:	e005      	b.n	8012554 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	4905      	ldr	r1, [pc, #20]	; (8012560 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801254c:	4b05      	ldr	r3, [pc, #20]	; (8012564 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801254e:	0018      	movs	r0, r3
 8012550:	f7ff fda5 	bl	801209e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012554:	4b02      	ldr	r3, [pc, #8]	; (8012560 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8012556:	0018      	movs	r0, r3
 8012558:	46bd      	mov	sp, r7
 801255a:	b002      	add	sp, #8
 801255c:	bd80      	pop	{r7, pc}
 801255e:	46c0      	nop			; (mov r8, r8)
 8012560:	200026e4 	.word	0x200026e4
 8012564:	0801642c 	.word	0x0801642c

08012568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801256e:	4b10      	ldr	r3, [pc, #64]	; (80125b0 <Get_SerialNum+0x48>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012574:	4b0f      	ldr	r3, [pc, #60]	; (80125b4 <Get_SerialNum+0x4c>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801257a:	4b0f      	ldr	r3, [pc, #60]	; (80125b8 <Get_SerialNum+0x50>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	18d3      	adds	r3, r2, r3
 8012586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00b      	beq.n	80125a6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801258e:	490b      	ldr	r1, [pc, #44]	; (80125bc <Get_SerialNum+0x54>)
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2208      	movs	r2, #8
 8012594:	0018      	movs	r0, r3
 8012596:	f000 f815 	bl	80125c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801259a:	4909      	ldr	r1, [pc, #36]	; (80125c0 <Get_SerialNum+0x58>)
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	2204      	movs	r2, #4
 80125a0:	0018      	movs	r0, r3
 80125a2:	f000 f80f 	bl	80125c4 <IntToUnicode>
  }
}
 80125a6:	46c0      	nop			; (mov r8, r8)
 80125a8:	46bd      	mov	sp, r7
 80125aa:	b004      	add	sp, #16
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	46c0      	nop			; (mov r8, r8)
 80125b0:	1ffff7ac 	.word	0x1ffff7ac
 80125b4:	1ffff7b0 	.word	0x1ffff7b0
 80125b8:	1ffff7b4 	.word	0x1ffff7b4
 80125bc:	200001da 	.word	0x200001da
 80125c0:	200001ea 	.word	0x200001ea

080125c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	1dfb      	adds	r3, r7, #7
 80125d0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80125d2:	2117      	movs	r1, #23
 80125d4:	187b      	adds	r3, r7, r1
 80125d6:	2200      	movs	r2, #0
 80125d8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80125da:	187b      	adds	r3, r7, r1
 80125dc:	2200      	movs	r2, #0
 80125de:	701a      	strb	r2, [r3, #0]
 80125e0:	e02f      	b.n	8012642 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	0f1b      	lsrs	r3, r3, #28
 80125e6:	2b09      	cmp	r3, #9
 80125e8:	d80d      	bhi.n	8012606 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	0f1b      	lsrs	r3, r3, #28
 80125ee:	b2da      	uxtb	r2, r3
 80125f0:	2317      	movs	r3, #23
 80125f2:	18fb      	adds	r3, r7, r3
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	005b      	lsls	r3, r3, #1
 80125f8:	0019      	movs	r1, r3
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	185b      	adds	r3, r3, r1
 80125fe:	3230      	adds	r2, #48	; 0x30
 8012600:	b2d2      	uxtb	r2, r2
 8012602:	701a      	strb	r2, [r3, #0]
 8012604:	e00c      	b.n	8012620 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	0f1b      	lsrs	r3, r3, #28
 801260a:	b2da      	uxtb	r2, r3
 801260c:	2317      	movs	r3, #23
 801260e:	18fb      	adds	r3, r7, r3
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	005b      	lsls	r3, r3, #1
 8012614:	0019      	movs	r1, r3
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	185b      	adds	r3, r3, r1
 801261a:	3237      	adds	r2, #55	; 0x37
 801261c:	b2d2      	uxtb	r2, r2
 801261e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	011b      	lsls	r3, r3, #4
 8012624:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012626:	2117      	movs	r1, #23
 8012628:	187b      	adds	r3, r7, r1
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	005b      	lsls	r3, r3, #1
 801262e:	3301      	adds	r3, #1
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	18d3      	adds	r3, r2, r3
 8012634:	2200      	movs	r2, #0
 8012636:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012638:	187b      	adds	r3, r7, r1
 801263a:	781a      	ldrb	r2, [r3, #0]
 801263c:	187b      	adds	r3, r7, r1
 801263e:	3201      	adds	r2, #1
 8012640:	701a      	strb	r2, [r3, #0]
 8012642:	2317      	movs	r3, #23
 8012644:	18fa      	adds	r2, r7, r3
 8012646:	1dfb      	adds	r3, r7, #7
 8012648:	7812      	ldrb	r2, [r2, #0]
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	429a      	cmp	r2, r3
 801264e:	d3c8      	bcc.n	80125e2 <IntToUnicode+0x1e>
  }
}
 8012650:	46c0      	nop			; (mov r8, r8)
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	46bd      	mov	sp, r7
 8012656:	b006      	add	sp, #24
 8012658:	bd80      	pop	{r7, pc}
	...

0801265c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b084      	sub	sp, #16
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	4a0e      	ldr	r2, [pc, #56]	; (80126a4 <HAL_PCD_MspInit+0x48>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d115      	bne.n	801269a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801266e:	4b0e      	ldr	r3, [pc, #56]	; (80126a8 <HAL_PCD_MspInit+0x4c>)
 8012670:	69da      	ldr	r2, [r3, #28]
 8012672:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <HAL_PCD_MspInit+0x4c>)
 8012674:	2180      	movs	r1, #128	; 0x80
 8012676:	0409      	lsls	r1, r1, #16
 8012678:	430a      	orrs	r2, r1
 801267a:	61da      	str	r2, [r3, #28]
 801267c:	4b0a      	ldr	r3, [pc, #40]	; (80126a8 <HAL_PCD_MspInit+0x4c>)
 801267e:	69da      	ldr	r2, [r3, #28]
 8012680:	2380      	movs	r3, #128	; 0x80
 8012682:	041b      	lsls	r3, r3, #16
 8012684:	4013      	ands	r3, r2
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801268a:	2200      	movs	r2, #0
 801268c:	2100      	movs	r1, #0
 801268e:	201f      	movs	r0, #31
 8012690:	f7f5 ff42 	bl	8008518 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8012694:	201f      	movs	r0, #31
 8012696:	f7f5 ff54 	bl	8008542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801269a:	46c0      	nop			; (mov r8, r8)
 801269c:	46bd      	mov	sp, r7
 801269e:	b004      	add	sp, #16
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	46c0      	nop			; (mov r8, r8)
 80126a4:	40005c00 	.word	0x40005c00
 80126a8:	40021000 	.word	0x40021000

080126ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	23bc      	movs	r3, #188	; 0xbc
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	58d2      	ldr	r2, [r2, r3]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	21ac      	movs	r1, #172	; 0xac
 80126c0:	0089      	lsls	r1, r1, #2
 80126c2:	468c      	mov	ip, r1
 80126c4:	4463      	add	r3, ip
 80126c6:	0019      	movs	r1, r3
 80126c8:	0010      	movs	r0, r2
 80126ca:	f7fe fc7b 	bl	8010fc4 <USBD_LL_SetupStage>
}
 80126ce:	46c0      	nop			; (mov r8, r8)
 80126d0:	46bd      	mov	sp, r7
 80126d2:	b002      	add	sp, #8
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126d6:	b590      	push	{r4, r7, lr}
 80126d8:	b083      	sub	sp, #12
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6078      	str	r0, [r7, #4]
 80126de:	000a      	movs	r2, r1
 80126e0:	1cfb      	adds	r3, r7, #3
 80126e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	23bc      	movs	r3, #188	; 0xbc
 80126e8:	009b      	lsls	r3, r3, #2
 80126ea:	58d4      	ldr	r4, [r2, r3]
 80126ec:	1cfb      	adds	r3, r7, #3
 80126ee:	781a      	ldrb	r2, [r3, #0]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	23be      	movs	r3, #190	; 0xbe
 80126f4:	0059      	lsls	r1, r3, #1
 80126f6:	0013      	movs	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	189b      	adds	r3, r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	18c3      	adds	r3, r0, r3
 8012700:	185b      	adds	r3, r3, r1
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	1cfb      	adds	r3, r7, #3
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	0019      	movs	r1, r3
 801270a:	0020      	movs	r0, r4
 801270c:	f7fe fcb8 	bl	8011080 <USBD_LL_DataOutStage>
}
 8012710:	46c0      	nop			; (mov r8, r8)
 8012712:	46bd      	mov	sp, r7
 8012714:	b003      	add	sp, #12
 8012716:	bd90      	pop	{r4, r7, pc}

08012718 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	000a      	movs	r2, r1
 8012722:	1cfb      	adds	r3, r7, #3
 8012724:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	23bc      	movs	r3, #188	; 0xbc
 801272a:	009b      	lsls	r3, r3, #2
 801272c:	58d0      	ldr	r0, [r2, r3]
 801272e:	1cfb      	adds	r3, r7, #3
 8012730:	781a      	ldrb	r2, [r3, #0]
 8012732:	6879      	ldr	r1, [r7, #4]
 8012734:	0013      	movs	r3, r2
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	189b      	adds	r3, r3, r2
 801273a:	00db      	lsls	r3, r3, #3
 801273c:	18cb      	adds	r3, r1, r3
 801273e:	333c      	adds	r3, #60	; 0x3c
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	1cfb      	adds	r3, r7, #3
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	0019      	movs	r1, r3
 8012748:	f7fe fd1c 	bl	8011184 <USBD_LL_DataInStage>
}
 801274c:	46c0      	nop			; (mov r8, r8)
 801274e:	46bd      	mov	sp, r7
 8012750:	b002      	add	sp, #8
 8012752:	bd80      	pop	{r7, pc}

08012754 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	23bc      	movs	r3, #188	; 0xbc
 8012760:	009b      	lsls	r3, r3, #2
 8012762:	58d3      	ldr	r3, [r2, r3]
 8012764:	0018      	movs	r0, r3
 8012766:	f7fe fe53 	bl	8011410 <USBD_LL_SOF>
}
 801276a:	46c0      	nop			; (mov r8, r8)
 801276c:	46bd      	mov	sp, r7
 801276e:	b002      	add	sp, #8
 8012770:	bd80      	pop	{r7, pc}

08012772 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b084      	sub	sp, #16
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801277a:	230f      	movs	r3, #15
 801277c:	18fb      	adds	r3, r7, r3
 801277e:	2201      	movs	r2, #1
 8012780:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	2b02      	cmp	r3, #2
 8012788:	d001      	beq.n	801278e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801278a:	f7f5 f985 	bl	8007a98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	23bc      	movs	r3, #188	; 0xbc
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	58d2      	ldr	r2, [r2, r3]
 8012796:	230f      	movs	r3, #15
 8012798:	18fb      	adds	r3, r7, r3
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	0019      	movs	r1, r3
 801279e:	0010      	movs	r0, r2
 80127a0:	f7fe fdf5 	bl	801138e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	23bc      	movs	r3, #188	; 0xbc
 80127a8:	009b      	lsls	r3, r3, #2
 80127aa:	58d3      	ldr	r3, [r2, r3]
 80127ac:	0018      	movs	r0, r3
 80127ae:	f7fe fda6 	bl	80112fe <USBD_LL_Reset>
}
 80127b2:	46c0      	nop			; (mov r8, r8)
 80127b4:	46bd      	mov	sp, r7
 80127b6:	b004      	add	sp, #16
 80127b8:	bd80      	pop	{r7, pc}
	...

080127bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	23bc      	movs	r3, #188	; 0xbc
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	58d3      	ldr	r3, [r2, r3]
 80127cc:	0018      	movs	r0, r3
 80127ce:	f7fe fdef 	bl	80113b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	699b      	ldr	r3, [r3, #24]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d005      	beq.n	80127e6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80127da:	4b05      	ldr	r3, [pc, #20]	; (80127f0 <HAL_PCD_SuspendCallback+0x34>)
 80127dc:	691a      	ldr	r2, [r3, #16]
 80127de:	4b04      	ldr	r3, [pc, #16]	; (80127f0 <HAL_PCD_SuspendCallback+0x34>)
 80127e0:	2106      	movs	r1, #6
 80127e2:	430a      	orrs	r2, r1
 80127e4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80127e6:	46c0      	nop			; (mov r8, r8)
 80127e8:	46bd      	mov	sp, r7
 80127ea:	b002      	add	sp, #8
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	46c0      	nop			; (mov r8, r8)
 80127f0:	e000ed00 	.word	0xe000ed00

080127f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	699b      	ldr	r3, [r3, #24]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d007      	beq.n	8012814 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012804:	4b09      	ldr	r3, [pc, #36]	; (801282c <HAL_PCD_ResumeCallback+0x38>)
 8012806:	691a      	ldr	r2, [r3, #16]
 8012808:	4b08      	ldr	r3, [pc, #32]	; (801282c <HAL_PCD_ResumeCallback+0x38>)
 801280a:	2106      	movs	r1, #6
 801280c:	438a      	bics	r2, r1
 801280e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8012810:	f000 fa44 	bl	8012c9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	23bc      	movs	r3, #188	; 0xbc
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	58d3      	ldr	r3, [r2, r3]
 801281c:	0018      	movs	r0, r3
 801281e:	f7fe fddf 	bl	80113e0 <USBD_LL_Resume>
}
 8012822:	46c0      	nop			; (mov r8, r8)
 8012824:	46bd      	mov	sp, r7
 8012826:	b002      	add	sp, #8
 8012828:	bd80      	pop	{r7, pc}
 801282a:	46c0      	nop			; (mov r8, r8)
 801282c:	e000ed00 	.word	0xe000ed00

08012830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012838:	4a2d      	ldr	r2, [pc, #180]	; (80128f0 <USBD_LL_Init+0xc0>)
 801283a:	23bc      	movs	r3, #188	; 0xbc
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	6879      	ldr	r1, [r7, #4]
 8012840:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	23b0      	movs	r3, #176	; 0xb0
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	4929      	ldr	r1, [pc, #164]	; (80128f0 <USBD_LL_Init+0xc0>)
 801284a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801284c:	4b28      	ldr	r3, [pc, #160]	; (80128f0 <USBD_LL_Init+0xc0>)
 801284e:	4a29      	ldr	r2, [pc, #164]	; (80128f4 <USBD_LL_Init+0xc4>)
 8012850:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012852:	4b27      	ldr	r3, [pc, #156]	; (80128f0 <USBD_LL_Init+0xc0>)
 8012854:	2208      	movs	r2, #8
 8012856:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012858:	4b25      	ldr	r3, [pc, #148]	; (80128f0 <USBD_LL_Init+0xc0>)
 801285a:	2202      	movs	r2, #2
 801285c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801285e:	4b24      	ldr	r3, [pc, #144]	; (80128f0 <USBD_LL_Init+0xc0>)
 8012860:	2202      	movs	r2, #2
 8012862:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012864:	4b22      	ldr	r3, [pc, #136]	; (80128f0 <USBD_LL_Init+0xc0>)
 8012866:	2200      	movs	r2, #0
 8012868:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801286a:	4b21      	ldr	r3, [pc, #132]	; (80128f0 <USBD_LL_Init+0xc0>)
 801286c:	2200      	movs	r2, #0
 801286e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012870:	4b1f      	ldr	r3, [pc, #124]	; (80128f0 <USBD_LL_Init+0xc0>)
 8012872:	2200      	movs	r2, #0
 8012874:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012876:	4b1e      	ldr	r3, [pc, #120]	; (80128f0 <USBD_LL_Init+0xc0>)
 8012878:	0018      	movs	r0, r3
 801287a:	f7f6 fb6d 	bl	8008f58 <HAL_PCD_Init>
 801287e:	1e03      	subs	r3, r0, #0
 8012880:	d001      	beq.n	8012886 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8012882:	f7f5 f909 	bl	8007a98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	23b0      	movs	r3, #176	; 0xb0
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	58d0      	ldr	r0, [r2, r3]
 801288e:	2318      	movs	r3, #24
 8012890:	2200      	movs	r2, #0
 8012892:	2100      	movs	r1, #0
 8012894:	f7f7 ff70 	bl	800a778 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	23b0      	movs	r3, #176	; 0xb0
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	58d0      	ldr	r0, [r2, r3]
 80128a0:	2358      	movs	r3, #88	; 0x58
 80128a2:	2200      	movs	r2, #0
 80128a4:	2180      	movs	r1, #128	; 0x80
 80128a6:	f7f7 ff67 	bl	800a778 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	23b0      	movs	r3, #176	; 0xb0
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	58d0      	ldr	r0, [r2, r3]
 80128b2:	23c0      	movs	r3, #192	; 0xc0
 80128b4:	2200      	movs	r2, #0
 80128b6:	2181      	movs	r1, #129	; 0x81
 80128b8:	f7f7 ff5e 	bl	800a778 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	23b0      	movs	r3, #176	; 0xb0
 80128c0:	009b      	lsls	r3, r3, #2
 80128c2:	58d0      	ldr	r0, [r2, r3]
 80128c4:	2388      	movs	r3, #136	; 0x88
 80128c6:	005b      	lsls	r3, r3, #1
 80128c8:	2200      	movs	r2, #0
 80128ca:	2101      	movs	r1, #1
 80128cc:	f7f7 ff54 	bl	800a778 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80128d0:	687a      	ldr	r2, [r7, #4]
 80128d2:	23b0      	movs	r3, #176	; 0xb0
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	58d0      	ldr	r0, [r2, r3]
 80128d8:	2380      	movs	r3, #128	; 0x80
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	2200      	movs	r2, #0
 80128de:	2182      	movs	r1, #130	; 0x82
 80128e0:	f7f7 ff4a 	bl	800a778 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80128e4:	2300      	movs	r3, #0
}
 80128e6:	0018      	movs	r0, r3
 80128e8:	46bd      	mov	sp, r7
 80128ea:	b002      	add	sp, #8
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	46c0      	nop			; (mov r8, r8)
 80128f0:	200028e4 	.word	0x200028e4
 80128f4:	40005c00 	.word	0x40005c00

080128f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80128f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012900:	210f      	movs	r1, #15
 8012902:	187b      	adds	r3, r7, r1
 8012904:	2200      	movs	r2, #0
 8012906:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012908:	260e      	movs	r6, #14
 801290a:	19bb      	adds	r3, r7, r6
 801290c:	2200      	movs	r2, #0
 801290e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	23b0      	movs	r3, #176	; 0xb0
 8012914:	009b      	lsls	r3, r3, #2
 8012916:	58d3      	ldr	r3, [r2, r3]
 8012918:	000d      	movs	r5, r1
 801291a:	187c      	adds	r4, r7, r1
 801291c:	0018      	movs	r0, r3
 801291e:	f7f6 fc2b 	bl	8009178 <HAL_PCD_Start>
 8012922:	0003      	movs	r3, r0
 8012924:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012926:	19bc      	adds	r4, r7, r6
 8012928:	197b      	adds	r3, r7, r5
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	0018      	movs	r0, r3
 801292e:	f000 f9bc 	bl	8012caa <USBD_Get_USB_Status>
 8012932:	0003      	movs	r3, r0
 8012934:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012936:	19bb      	adds	r3, r7, r6
 8012938:	781b      	ldrb	r3, [r3, #0]
}
 801293a:	0018      	movs	r0, r3
 801293c:	46bd      	mov	sp, r7
 801293e:	b005      	add	sp, #20
 8012940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012942 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012944:	b085      	sub	sp, #20
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	000c      	movs	r4, r1
 801294c:	0010      	movs	r0, r2
 801294e:	0019      	movs	r1, r3
 8012950:	1cfb      	adds	r3, r7, #3
 8012952:	1c22      	adds	r2, r4, #0
 8012954:	701a      	strb	r2, [r3, #0]
 8012956:	1cbb      	adds	r3, r7, #2
 8012958:	1c02      	adds	r2, r0, #0
 801295a:	701a      	strb	r2, [r3, #0]
 801295c:	003b      	movs	r3, r7
 801295e:	1c0a      	adds	r2, r1, #0
 8012960:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012962:	260f      	movs	r6, #15
 8012964:	19bb      	adds	r3, r7, r6
 8012966:	2200      	movs	r2, #0
 8012968:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801296a:	250e      	movs	r5, #14
 801296c:	197b      	adds	r3, r7, r5
 801296e:	2200      	movs	r2, #0
 8012970:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	23b0      	movs	r3, #176	; 0xb0
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	58d0      	ldr	r0, [r2, r3]
 801297a:	19bc      	adds	r4, r7, r6
 801297c:	1cbb      	adds	r3, r7, #2
 801297e:	781d      	ldrb	r5, [r3, #0]
 8012980:	003b      	movs	r3, r7
 8012982:	881a      	ldrh	r2, [r3, #0]
 8012984:	1cfb      	adds	r3, r7, #3
 8012986:	7819      	ldrb	r1, [r3, #0]
 8012988:	002b      	movs	r3, r5
 801298a:	f7f6 fdc2 	bl	8009512 <HAL_PCD_EP_Open>
 801298e:	0003      	movs	r3, r0
 8012990:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012992:	250e      	movs	r5, #14
 8012994:	197c      	adds	r4, r7, r5
 8012996:	19bb      	adds	r3, r7, r6
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	0018      	movs	r0, r3
 801299c:	f000 f985 	bl	8012caa <USBD_Get_USB_Status>
 80129a0:	0003      	movs	r3, r0
 80129a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80129a4:	197b      	adds	r3, r7, r5
 80129a6:	781b      	ldrb	r3, [r3, #0]
}
 80129a8:	0018      	movs	r0, r3
 80129aa:	46bd      	mov	sp, r7
 80129ac:	b005      	add	sp, #20
 80129ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	000a      	movs	r2, r1
 80129ba:	1cfb      	adds	r3, r7, #3
 80129bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129be:	210f      	movs	r1, #15
 80129c0:	187b      	adds	r3, r7, r1
 80129c2:	2200      	movs	r2, #0
 80129c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129c6:	260e      	movs	r6, #14
 80129c8:	19bb      	adds	r3, r7, r6
 80129ca:	2200      	movs	r2, #0
 80129cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	23b0      	movs	r3, #176	; 0xb0
 80129d2:	009b      	lsls	r3, r3, #2
 80129d4:	58d2      	ldr	r2, [r2, r3]
 80129d6:	000d      	movs	r5, r1
 80129d8:	187c      	adds	r4, r7, r1
 80129da:	1cfb      	adds	r3, r7, #3
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	0019      	movs	r1, r3
 80129e0:	0010      	movs	r0, r2
 80129e2:	f7f6 fe0e 	bl	8009602 <HAL_PCD_EP_Close>
 80129e6:	0003      	movs	r3, r0
 80129e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129ea:	19bc      	adds	r4, r7, r6
 80129ec:	197b      	adds	r3, r7, r5
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	0018      	movs	r0, r3
 80129f2:	f000 f95a 	bl	8012caa <USBD_Get_USB_Status>
 80129f6:	0003      	movs	r3, r0
 80129f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80129fa:	19bb      	adds	r3, r7, r6
 80129fc:	781b      	ldrb	r3, [r3, #0]
}
 80129fe:	0018      	movs	r0, r3
 8012a00:	46bd      	mov	sp, r7
 8012a02:	b005      	add	sp, #20
 8012a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a06 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a08:	b085      	sub	sp, #20
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
 8012a0e:	000a      	movs	r2, r1
 8012a10:	1cfb      	adds	r3, r7, #3
 8012a12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a14:	210f      	movs	r1, #15
 8012a16:	187b      	adds	r3, r7, r1
 8012a18:	2200      	movs	r2, #0
 8012a1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a1c:	260e      	movs	r6, #14
 8012a1e:	19bb      	adds	r3, r7, r6
 8012a20:	2200      	movs	r2, #0
 8012a22:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	23b0      	movs	r3, #176	; 0xb0
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	58d2      	ldr	r2, [r2, r3]
 8012a2c:	000d      	movs	r5, r1
 8012a2e:	187c      	adds	r4, r7, r1
 8012a30:	1cfb      	adds	r3, r7, #3
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	0019      	movs	r1, r3
 8012a36:	0010      	movs	r0, r2
 8012a38:	f7f6 feda 	bl	80097f0 <HAL_PCD_EP_SetStall>
 8012a3c:	0003      	movs	r3, r0
 8012a3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a40:	19bc      	adds	r4, r7, r6
 8012a42:	197b      	adds	r3, r7, r5
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	0018      	movs	r0, r3
 8012a48:	f000 f92f 	bl	8012caa <USBD_Get_USB_Status>
 8012a4c:	0003      	movs	r3, r0
 8012a4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012a50:	19bb      	adds	r3, r7, r6
 8012a52:	781b      	ldrb	r3, [r3, #0]
}
 8012a54:	0018      	movs	r0, r3
 8012a56:	46bd      	mov	sp, r7
 8012a58:	b005      	add	sp, #20
 8012a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5e:	b085      	sub	sp, #20
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	000a      	movs	r2, r1
 8012a66:	1cfb      	adds	r3, r7, #3
 8012a68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a6a:	210f      	movs	r1, #15
 8012a6c:	187b      	adds	r3, r7, r1
 8012a6e:	2200      	movs	r2, #0
 8012a70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a72:	260e      	movs	r6, #14
 8012a74:	19bb      	adds	r3, r7, r6
 8012a76:	2200      	movs	r2, #0
 8012a78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	23b0      	movs	r3, #176	; 0xb0
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	58d2      	ldr	r2, [r2, r3]
 8012a82:	000d      	movs	r5, r1
 8012a84:	187c      	adds	r4, r7, r1
 8012a86:	1cfb      	adds	r3, r7, #3
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	0019      	movs	r1, r3
 8012a8c:	0010      	movs	r0, r2
 8012a8e:	f7f6 ff0b 	bl	80098a8 <HAL_PCD_EP_ClrStall>
 8012a92:	0003      	movs	r3, r0
 8012a94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a96:	19bc      	adds	r4, r7, r6
 8012a98:	197b      	adds	r3, r7, r5
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	f000 f904 	bl	8012caa <USBD_Get_USB_Status>
 8012aa2:	0003      	movs	r3, r0
 8012aa4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012aa6:	19bb      	adds	r3, r7, r6
 8012aa8:	781b      	ldrb	r3, [r3, #0]
}
 8012aaa:	0018      	movs	r0, r3
 8012aac:	46bd      	mov	sp, r7
 8012aae:	b005      	add	sp, #20
 8012ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ab2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b084      	sub	sp, #16
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	000a      	movs	r2, r1
 8012abc:	1cfb      	adds	r3, r7, #3
 8012abe:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012ac0:	687a      	ldr	r2, [r7, #4]
 8012ac2:	23b0      	movs	r3, #176	; 0xb0
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	58d3      	ldr	r3, [r2, r3]
 8012ac8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012aca:	1cfb      	adds	r3, r7, #3
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	b25b      	sxtb	r3, r3
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	da0d      	bge.n	8012af0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012ad4:	1cfb      	adds	r3, r7, #3
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	227f      	movs	r2, #127	; 0x7f
 8012ada:	4013      	ands	r3, r2
 8012adc:	68f9      	ldr	r1, [r7, #12]
 8012ade:	1c5a      	adds	r2, r3, #1
 8012ae0:	0013      	movs	r3, r2
 8012ae2:	009b      	lsls	r3, r3, #2
 8012ae4:	189b      	adds	r3, r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	18cb      	adds	r3, r1, r3
 8012aea:	3302      	adds	r3, #2
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	e00d      	b.n	8012b0c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012af0:	1cfb      	adds	r3, r7, #3
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	227f      	movs	r2, #127	; 0x7f
 8012af6:	401a      	ands	r2, r3
 8012af8:	68f8      	ldr	r0, [r7, #12]
 8012afa:	23b5      	movs	r3, #181	; 0xb5
 8012afc:	0059      	lsls	r1, r3, #1
 8012afe:	0013      	movs	r3, r2
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	189b      	adds	r3, r3, r2
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	18c3      	adds	r3, r0, r3
 8012b08:	185b      	adds	r3, r3, r1
 8012b0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012b0c:	0018      	movs	r0, r3
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	b004      	add	sp, #16
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	000a      	movs	r2, r1
 8012b1e:	1cfb      	adds	r3, r7, #3
 8012b20:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b22:	210f      	movs	r1, #15
 8012b24:	187b      	adds	r3, r7, r1
 8012b26:	2200      	movs	r2, #0
 8012b28:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b2a:	260e      	movs	r6, #14
 8012b2c:	19bb      	adds	r3, r7, r6
 8012b2e:	2200      	movs	r2, #0
 8012b30:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	23b0      	movs	r3, #176	; 0xb0
 8012b36:	009b      	lsls	r3, r3, #2
 8012b38:	58d2      	ldr	r2, [r2, r3]
 8012b3a:	000d      	movs	r5, r1
 8012b3c:	187c      	adds	r4, r7, r1
 8012b3e:	1cfb      	adds	r3, r7, #3
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	0019      	movs	r1, r3
 8012b44:	0010      	movs	r0, r2
 8012b46:	f7f6 fcb9 	bl	80094bc <HAL_PCD_SetAddress>
 8012b4a:	0003      	movs	r3, r0
 8012b4c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b4e:	19bc      	adds	r4, r7, r6
 8012b50:	197b      	adds	r3, r7, r5
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	0018      	movs	r0, r3
 8012b56:	f000 f8a8 	bl	8012caa <USBD_Get_USB_Status>
 8012b5a:	0003      	movs	r3, r0
 8012b5c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012b5e:	19bb      	adds	r3, r7, r6
 8012b60:	781b      	ldrb	r3, [r3, #0]
}
 8012b62:	0018      	movs	r0, r3
 8012b64:	46bd      	mov	sp, r7
 8012b66:	b005      	add	sp, #20
 8012b68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b6c:	b087      	sub	sp, #28
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	0008      	movs	r0, r1
 8012b74:	607a      	str	r2, [r7, #4]
 8012b76:	0019      	movs	r1, r3
 8012b78:	230b      	movs	r3, #11
 8012b7a:	18fb      	adds	r3, r7, r3
 8012b7c:	1c02      	adds	r2, r0, #0
 8012b7e:	701a      	strb	r2, [r3, #0]
 8012b80:	2408      	movs	r4, #8
 8012b82:	193b      	adds	r3, r7, r4
 8012b84:	1c0a      	adds	r2, r1, #0
 8012b86:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b88:	2117      	movs	r1, #23
 8012b8a:	187b      	adds	r3, r7, r1
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b90:	2516      	movs	r5, #22
 8012b92:	197b      	adds	r3, r7, r5
 8012b94:	2200      	movs	r2, #0
 8012b96:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	23b0      	movs	r3, #176	; 0xb0
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	58d0      	ldr	r0, [r2, r3]
 8012ba0:	193b      	adds	r3, r7, r4
 8012ba2:	881d      	ldrh	r5, [r3, #0]
 8012ba4:	000e      	movs	r6, r1
 8012ba6:	187c      	adds	r4, r7, r1
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	230b      	movs	r3, #11
 8012bac:	18fb      	adds	r3, r7, r3
 8012bae:	7819      	ldrb	r1, [r3, #0]
 8012bb0:	002b      	movs	r3, r5
 8012bb2:	f7f6 fdd4 	bl	800975e <HAL_PCD_EP_Transmit>
 8012bb6:	0003      	movs	r3, r0
 8012bb8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bba:	2516      	movs	r5, #22
 8012bbc:	197c      	adds	r4, r7, r5
 8012bbe:	19bb      	adds	r3, r7, r6
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	0018      	movs	r0, r3
 8012bc4:	f000 f871 	bl	8012caa <USBD_Get_USB_Status>
 8012bc8:	0003      	movs	r3, r0
 8012bca:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012bcc:	197b      	adds	r3, r7, r5
 8012bce:	781b      	ldrb	r3, [r3, #0]
}
 8012bd0:	0018      	movs	r0, r3
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	b007      	add	sp, #28
 8012bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bda:	b087      	sub	sp, #28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	0008      	movs	r0, r1
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	0019      	movs	r1, r3
 8012be6:	230b      	movs	r3, #11
 8012be8:	18fb      	adds	r3, r7, r3
 8012bea:	1c02      	adds	r2, r0, #0
 8012bec:	701a      	strb	r2, [r3, #0]
 8012bee:	2408      	movs	r4, #8
 8012bf0:	193b      	adds	r3, r7, r4
 8012bf2:	1c0a      	adds	r2, r1, #0
 8012bf4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bf6:	2117      	movs	r1, #23
 8012bf8:	187b      	adds	r3, r7, r1
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bfe:	2516      	movs	r5, #22
 8012c00:	197b      	adds	r3, r7, r5
 8012c02:	2200      	movs	r2, #0
 8012c04:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	23b0      	movs	r3, #176	; 0xb0
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	58d0      	ldr	r0, [r2, r3]
 8012c0e:	193b      	adds	r3, r7, r4
 8012c10:	881d      	ldrh	r5, [r3, #0]
 8012c12:	000e      	movs	r6, r1
 8012c14:	187c      	adds	r4, r7, r1
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	230b      	movs	r3, #11
 8012c1a:	18fb      	adds	r3, r7, r3
 8012c1c:	7819      	ldrb	r1, [r3, #0]
 8012c1e:	002b      	movs	r3, r5
 8012c20:	f7f6 fd40 	bl	80096a4 <HAL_PCD_EP_Receive>
 8012c24:	0003      	movs	r3, r0
 8012c26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c28:	2516      	movs	r5, #22
 8012c2a:	197c      	adds	r4, r7, r5
 8012c2c:	19bb      	adds	r3, r7, r6
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	0018      	movs	r0, r3
 8012c32:	f000 f83a 	bl	8012caa <USBD_Get_USB_Status>
 8012c36:	0003      	movs	r3, r0
 8012c38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8012c3a:	197b      	adds	r3, r7, r5
 8012c3c:	781b      	ldrb	r3, [r3, #0]
}
 8012c3e:	0018      	movs	r0, r3
 8012c40:	46bd      	mov	sp, r7
 8012c42:	b007      	add	sp, #28
 8012c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b082      	sub	sp, #8
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
 8012c4e:	000a      	movs	r2, r1
 8012c50:	1cfb      	adds	r3, r7, #3
 8012c52:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	23b0      	movs	r3, #176	; 0xb0
 8012c58:	009b      	lsls	r3, r3, #2
 8012c5a:	58d2      	ldr	r2, [r2, r3]
 8012c5c:	1cfb      	adds	r3, r7, #3
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	0019      	movs	r1, r3
 8012c62:	0010      	movs	r0, r2
 8012c64:	f7f6 fd62 	bl	800972c <HAL_PCD_EP_GetRxCount>
 8012c68:	0003      	movs	r3, r0
}
 8012c6a:	0018      	movs	r0, r3
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	b002      	add	sp, #8
 8012c70:	bd80      	pop	{r7, pc}
	...

08012c74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012c7c:	4b02      	ldr	r3, [pc, #8]	; (8012c88 <USBD_static_malloc+0x14>)
}
 8012c7e:	0018      	movs	r0, r3
 8012c80:	46bd      	mov	sp, r7
 8012c82:	b002      	add	sp, #8
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	46c0      	nop			; (mov r8, r8)
 8012c88:	20001778 	.word	0x20001778

08012c8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b082      	sub	sp, #8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]

}
 8012c94:	46c0      	nop			; (mov r8, r8)
 8012c96:	46bd      	mov	sp, r7
 8012c98:	b002      	add	sp, #8
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012ca0:	f7f4 fc02 	bl	80074a8 <SystemClock_Config>
}
 8012ca4:	46c0      	nop			; (mov r8, r8)
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	0002      	movs	r2, r0
 8012cb2:	1dfb      	adds	r3, r7, #7
 8012cb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cb6:	230f      	movs	r3, #15
 8012cb8:	18fb      	adds	r3, r7, r3
 8012cba:	2200      	movs	r2, #0
 8012cbc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8012cbe:	1dfb      	adds	r3, r7, #7
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b03      	cmp	r3, #3
 8012cc4:	d017      	beq.n	8012cf6 <USBD_Get_USB_Status+0x4c>
 8012cc6:	dc1b      	bgt.n	8012d00 <USBD_Get_USB_Status+0x56>
 8012cc8:	2b02      	cmp	r3, #2
 8012cca:	d00f      	beq.n	8012cec <USBD_Get_USB_Status+0x42>
 8012ccc:	dc18      	bgt.n	8012d00 <USBD_Get_USB_Status+0x56>
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d002      	beq.n	8012cd8 <USBD_Get_USB_Status+0x2e>
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d005      	beq.n	8012ce2 <USBD_Get_USB_Status+0x38>
 8012cd6:	e013      	b.n	8012d00 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012cd8:	230f      	movs	r3, #15
 8012cda:	18fb      	adds	r3, r7, r3
 8012cdc:	2200      	movs	r2, #0
 8012cde:	701a      	strb	r2, [r3, #0]
    break;
 8012ce0:	e013      	b.n	8012d0a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ce2:	230f      	movs	r3, #15
 8012ce4:	18fb      	adds	r3, r7, r3
 8012ce6:	2202      	movs	r2, #2
 8012ce8:	701a      	strb	r2, [r3, #0]
    break;
 8012cea:	e00e      	b.n	8012d0a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012cec:	230f      	movs	r3, #15
 8012cee:	18fb      	adds	r3, r7, r3
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	701a      	strb	r2, [r3, #0]
    break;
 8012cf4:	e009      	b.n	8012d0a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012cf6:	230f      	movs	r3, #15
 8012cf8:	18fb      	adds	r3, r7, r3
 8012cfa:	2202      	movs	r2, #2
 8012cfc:	701a      	strb	r2, [r3, #0]
    break;
 8012cfe:	e004      	b.n	8012d0a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8012d00:	230f      	movs	r3, #15
 8012d02:	18fb      	adds	r3, r7, r3
 8012d04:	2202      	movs	r2, #2
 8012d06:	701a      	strb	r2, [r3, #0]
    break;
 8012d08:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8012d0a:	230f      	movs	r3, #15
 8012d0c:	18fb      	adds	r3, r7, r3
 8012d0e:	781b      	ldrb	r3, [r3, #0]
}
 8012d10:	0018      	movs	r0, r3
 8012d12:	46bd      	mov	sp, r7
 8012d14:	b004      	add	sp, #16
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <atoi>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	220a      	movs	r2, #10
 8012d1c:	2100      	movs	r1, #0
 8012d1e:	f000 fb8f 	bl	8013440 <strtol>
 8012d22:	bd10      	pop	{r4, pc}

08012d24 <atol>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	220a      	movs	r2, #10
 8012d28:	2100      	movs	r1, #0
 8012d2a:	f000 fb89 	bl	8013440 <strtol>
 8012d2e:	bd10      	pop	{r4, pc}

08012d30 <__errno>:
 8012d30:	4b01      	ldr	r3, [pc, #4]	; (8012d38 <__errno+0x8>)
 8012d32:	6818      	ldr	r0, [r3, #0]
 8012d34:	4770      	bx	lr
 8012d36:	46c0      	nop			; (mov r8, r8)
 8012d38:	200001f4 	.word	0x200001f4

08012d3c <__libc_init_array>:
 8012d3c:	b570      	push	{r4, r5, r6, lr}
 8012d3e:	2600      	movs	r6, #0
 8012d40:	4d0c      	ldr	r5, [pc, #48]	; (8012d74 <__libc_init_array+0x38>)
 8012d42:	4c0d      	ldr	r4, [pc, #52]	; (8012d78 <__libc_init_array+0x3c>)
 8012d44:	1b64      	subs	r4, r4, r5
 8012d46:	10a4      	asrs	r4, r4, #2
 8012d48:	42a6      	cmp	r6, r4
 8012d4a:	d109      	bne.n	8012d60 <__libc_init_array+0x24>
 8012d4c:	2600      	movs	r6, #0
 8012d4e:	f001 fedb 	bl	8014b08 <_init>
 8012d52:	4d0a      	ldr	r5, [pc, #40]	; (8012d7c <__libc_init_array+0x40>)
 8012d54:	4c0a      	ldr	r4, [pc, #40]	; (8012d80 <__libc_init_array+0x44>)
 8012d56:	1b64      	subs	r4, r4, r5
 8012d58:	10a4      	asrs	r4, r4, #2
 8012d5a:	42a6      	cmp	r6, r4
 8012d5c:	d105      	bne.n	8012d6a <__libc_init_array+0x2e>
 8012d5e:	bd70      	pop	{r4, r5, r6, pc}
 8012d60:	00b3      	lsls	r3, r6, #2
 8012d62:	58eb      	ldr	r3, [r5, r3]
 8012d64:	4798      	blx	r3
 8012d66:	3601      	adds	r6, #1
 8012d68:	e7ee      	b.n	8012d48 <__libc_init_array+0xc>
 8012d6a:	00b3      	lsls	r3, r6, #2
 8012d6c:	58eb      	ldr	r3, [r5, r3]
 8012d6e:	4798      	blx	r3
 8012d70:	3601      	adds	r6, #1
 8012d72:	e7f2      	b.n	8012d5a <__libc_init_array+0x1e>
 8012d74:	08016800 	.word	0x08016800
 8012d78:	08016800 	.word	0x08016800
 8012d7c:	08016800 	.word	0x08016800
 8012d80:	08016804 	.word	0x08016804

08012d84 <memset>:
 8012d84:	0003      	movs	r3, r0
 8012d86:	1882      	adds	r2, r0, r2
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d100      	bne.n	8012d8e <memset+0xa>
 8012d8c:	4770      	bx	lr
 8012d8e:	7019      	strb	r1, [r3, #0]
 8012d90:	3301      	adds	r3, #1
 8012d92:	e7f9      	b.n	8012d88 <memset+0x4>

08012d94 <validate_structure>:
 8012d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d96:	6801      	ldr	r1, [r0, #0]
 8012d98:	0004      	movs	r4, r0
 8012d9a:	293b      	cmp	r1, #59	; 0x3b
 8012d9c:	d90b      	bls.n	8012db6 <validate_structure+0x22>
 8012d9e:	223c      	movs	r2, #60	; 0x3c
 8012da0:	4668      	mov	r0, sp
 8012da2:	f000 fda1 	bl	80138e8 <div>
 8012da6:	6863      	ldr	r3, [r4, #4]
 8012da8:	9900      	ldr	r1, [sp, #0]
 8012daa:	9a01      	ldr	r2, [sp, #4]
 8012dac:	185b      	adds	r3, r3, r1
 8012dae:	6063      	str	r3, [r4, #4]
 8012db0:	2a00      	cmp	r2, #0
 8012db2:	db6f      	blt.n	8012e94 <validate_structure+0x100>
 8012db4:	6022      	str	r2, [r4, #0]
 8012db6:	6861      	ldr	r1, [r4, #4]
 8012db8:	293b      	cmp	r1, #59	; 0x3b
 8012dba:	d90b      	bls.n	8012dd4 <validate_structure+0x40>
 8012dbc:	223c      	movs	r2, #60	; 0x3c
 8012dbe:	4668      	mov	r0, sp
 8012dc0:	f000 fd92 	bl	80138e8 <div>
 8012dc4:	68a3      	ldr	r3, [r4, #8]
 8012dc6:	9900      	ldr	r1, [sp, #0]
 8012dc8:	9a01      	ldr	r2, [sp, #4]
 8012dca:	185b      	adds	r3, r3, r1
 8012dcc:	60a3      	str	r3, [r4, #8]
 8012dce:	2a00      	cmp	r2, #0
 8012dd0:	db65      	blt.n	8012e9e <validate_structure+0x10a>
 8012dd2:	6062      	str	r2, [r4, #4]
 8012dd4:	68a1      	ldr	r1, [r4, #8]
 8012dd6:	2917      	cmp	r1, #23
 8012dd8:	d90b      	bls.n	8012df2 <validate_structure+0x5e>
 8012dda:	2218      	movs	r2, #24
 8012ddc:	4668      	mov	r0, sp
 8012dde:	f000 fd83 	bl	80138e8 <div>
 8012de2:	68e3      	ldr	r3, [r4, #12]
 8012de4:	9900      	ldr	r1, [sp, #0]
 8012de6:	9a01      	ldr	r2, [sp, #4]
 8012de8:	185b      	adds	r3, r3, r1
 8012dea:	60e3      	str	r3, [r4, #12]
 8012dec:	2a00      	cmp	r2, #0
 8012dee:	db5b      	blt.n	8012ea8 <validate_structure+0x114>
 8012df0:	60a2      	str	r2, [r4, #8]
 8012df2:	6921      	ldr	r1, [r4, #16]
 8012df4:	290b      	cmp	r1, #11
 8012df6:	d90b      	bls.n	8012e10 <validate_structure+0x7c>
 8012df8:	220c      	movs	r2, #12
 8012dfa:	4668      	mov	r0, sp
 8012dfc:	f000 fd74 	bl	80138e8 <div>
 8012e00:	6963      	ldr	r3, [r4, #20]
 8012e02:	9900      	ldr	r1, [sp, #0]
 8012e04:	9a01      	ldr	r2, [sp, #4]
 8012e06:	185b      	adds	r3, r3, r1
 8012e08:	6163      	str	r3, [r4, #20]
 8012e0a:	2a00      	cmp	r2, #0
 8012e0c:	db51      	blt.n	8012eb2 <validate_structure+0x11e>
 8012e0e:	6122      	str	r2, [r4, #16]
 8012e10:	6965      	ldr	r5, [r4, #20]
 8012e12:	231c      	movs	r3, #28
 8012e14:	07aa      	lsls	r2, r5, #30
 8012e16:	d10f      	bne.n	8012e38 <validate_structure+0xa4>
 8012e18:	2164      	movs	r1, #100	; 0x64
 8012e1a:	0028      	movs	r0, r5
 8012e1c:	f7ed fb00 	bl	8000420 <__aeabi_idivmod>
 8012e20:	231d      	movs	r3, #29
 8012e22:	2900      	cmp	r1, #0
 8012e24:	d108      	bne.n	8012e38 <validate_structure+0xa4>
 8012e26:	4b3a      	ldr	r3, [pc, #232]	; (8012f10 <validate_structure+0x17c>)
 8012e28:	3191      	adds	r1, #145	; 0x91
 8012e2a:	18e8      	adds	r0, r5, r3
 8012e2c:	31ff      	adds	r1, #255	; 0xff
 8012e2e:	f7ed faf7 	bl	8000420 <__aeabi_idivmod>
 8012e32:	424b      	negs	r3, r1
 8012e34:	414b      	adcs	r3, r1
 8012e36:	331c      	adds	r3, #28
 8012e38:	68e2      	ldr	r2, [r4, #12]
 8012e3a:	271d      	movs	r7, #29
 8012e3c:	2a00      	cmp	r2, #0
 8012e3e:	dd63      	ble.n	8012f08 <validate_structure+0x174>
 8012e40:	2603      	movs	r6, #3
 8012e42:	271c      	movs	r7, #28
 8012e44:	6922      	ldr	r2, [r4, #16]
 8012e46:	0018      	movs	r0, r3
 8012e48:	68e1      	ldr	r1, [r4, #12]
 8012e4a:	2a01      	cmp	r2, #1
 8012e4c:	d002      	beq.n	8012e54 <validate_structure+0xc0>
 8012e4e:	4d31      	ldr	r5, [pc, #196]	; (8012f14 <validate_structure+0x180>)
 8012e50:	0090      	lsls	r0, r2, #2
 8012e52:	5940      	ldr	r0, [r0, r5]
 8012e54:	4281      	cmp	r1, r0
 8012e56:	dd5a      	ble.n	8012f0e <validate_structure+0x17a>
 8012e58:	1a09      	subs	r1, r1, r0
 8012e5a:	3201      	adds	r2, #1
 8012e5c:	60e1      	str	r1, [r4, #12]
 8012e5e:	6122      	str	r2, [r4, #16]
 8012e60:	2a0c      	cmp	r2, #12
 8012e62:	d1ef      	bne.n	8012e44 <validate_structure+0xb0>
 8012e64:	2300      	movs	r3, #0
 8012e66:	6965      	ldr	r5, [r4, #20]
 8012e68:	6123      	str	r3, [r4, #16]
 8012e6a:	1c68      	adds	r0, r5, #1
 8012e6c:	003b      	movs	r3, r7
 8012e6e:	6160      	str	r0, [r4, #20]
 8012e70:	4230      	tst	r0, r6
 8012e72:	d1e7      	bne.n	8012e44 <validate_structure+0xb0>
 8012e74:	2164      	movs	r1, #100	; 0x64
 8012e76:	f7ed fad3 	bl	8000420 <__aeabi_idivmod>
 8012e7a:	231d      	movs	r3, #29
 8012e7c:	2900      	cmp	r1, #0
 8012e7e:	d1e1      	bne.n	8012e44 <validate_structure+0xb0>
 8012e80:	4b25      	ldr	r3, [pc, #148]	; (8012f18 <validate_structure+0x184>)
 8012e82:	3191      	adds	r1, #145	; 0x91
 8012e84:	18e8      	adds	r0, r5, r3
 8012e86:	31ff      	adds	r1, #255	; 0xff
 8012e88:	f7ed faca 	bl	8000420 <__aeabi_idivmod>
 8012e8c:	424b      	negs	r3, r1
 8012e8e:	414b      	adcs	r3, r1
 8012e90:	331c      	adds	r3, #28
 8012e92:	e7d7      	b.n	8012e44 <validate_structure+0xb0>
 8012e94:	323c      	adds	r2, #60	; 0x3c
 8012e96:	3b01      	subs	r3, #1
 8012e98:	6022      	str	r2, [r4, #0]
 8012e9a:	6063      	str	r3, [r4, #4]
 8012e9c:	e78b      	b.n	8012db6 <validate_structure+0x22>
 8012e9e:	323c      	adds	r2, #60	; 0x3c
 8012ea0:	3b01      	subs	r3, #1
 8012ea2:	6062      	str	r2, [r4, #4]
 8012ea4:	60a3      	str	r3, [r4, #8]
 8012ea6:	e795      	b.n	8012dd4 <validate_structure+0x40>
 8012ea8:	3218      	adds	r2, #24
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	60a2      	str	r2, [r4, #8]
 8012eae:	60e3      	str	r3, [r4, #12]
 8012eb0:	e79f      	b.n	8012df2 <validate_structure+0x5e>
 8012eb2:	320c      	adds	r2, #12
 8012eb4:	3b01      	subs	r3, #1
 8012eb6:	6122      	str	r2, [r4, #16]
 8012eb8:	6163      	str	r3, [r4, #20]
 8012eba:	e7a9      	b.n	8012e10 <validate_structure+0x7c>
 8012ebc:	6922      	ldr	r2, [r4, #16]
 8012ebe:	3a01      	subs	r2, #1
 8012ec0:	6122      	str	r2, [r4, #16]
 8012ec2:	3201      	adds	r2, #1
 8012ec4:	d117      	bne.n	8012ef6 <validate_structure+0x162>
 8012ec6:	230b      	movs	r3, #11
 8012ec8:	2203      	movs	r2, #3
 8012eca:	6965      	ldr	r5, [r4, #20]
 8012ecc:	6123      	str	r3, [r4, #16]
 8012ece:	1e68      	subs	r0, r5, #1
 8012ed0:	6160      	str	r0, [r4, #20]
 8012ed2:	3311      	adds	r3, #17
 8012ed4:	4210      	tst	r0, r2
 8012ed6:	d10e      	bne.n	8012ef6 <validate_structure+0x162>
 8012ed8:	2164      	movs	r1, #100	; 0x64
 8012eda:	f7ed faa1 	bl	8000420 <__aeabi_idivmod>
 8012ede:	003b      	movs	r3, r7
 8012ee0:	2900      	cmp	r1, #0
 8012ee2:	d108      	bne.n	8012ef6 <validate_structure+0x162>
 8012ee4:	4b0d      	ldr	r3, [pc, #52]	; (8012f1c <validate_structure+0x188>)
 8012ee6:	3191      	adds	r1, #145	; 0x91
 8012ee8:	18e8      	adds	r0, r5, r3
 8012eea:	31ff      	adds	r1, #255	; 0xff
 8012eec:	f7ed fa98 	bl	8000420 <__aeabi_idivmod>
 8012ef0:	424b      	negs	r3, r1
 8012ef2:	414b      	adcs	r3, r1
 8012ef4:	331c      	adds	r3, #28
 8012ef6:	6921      	ldr	r1, [r4, #16]
 8012ef8:	001a      	movs	r2, r3
 8012efa:	2901      	cmp	r1, #1
 8012efc:	d002      	beq.n	8012f04 <validate_structure+0x170>
 8012efe:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <validate_structure+0x180>)
 8012f00:	0089      	lsls	r1, r1, #2
 8012f02:	588a      	ldr	r2, [r1, r2]
 8012f04:	18b6      	adds	r6, r6, r2
 8012f06:	60e6      	str	r6, [r4, #12]
 8012f08:	68e6      	ldr	r6, [r4, #12]
 8012f0a:	2e00      	cmp	r6, #0
 8012f0c:	ddd6      	ble.n	8012ebc <validate_structure+0x128>
 8012f0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012f10:	0000076c 	.word	0x0000076c
 8012f14:	08016550 	.word	0x08016550
 8012f18:	0000076d 	.word	0x0000076d
 8012f1c:	0000076b 	.word	0x0000076b

08012f20 <mktime>:
 8012f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f22:	b08b      	sub	sp, #44	; 0x2c
 8012f24:	0004      	movs	r4, r0
 8012f26:	f000 fd39 	bl	801399c <__gettzinfo>
 8012f2a:	0007      	movs	r7, r0
 8012f2c:	0020      	movs	r0, r4
 8012f2e:	f7ff ff31 	bl	8012d94 <validate_structure>
 8012f32:	233c      	movs	r3, #60	; 0x3c
 8012f34:	6862      	ldr	r2, [r4, #4]
 8012f36:	68a1      	ldr	r1, [r4, #8]
 8012f38:	4353      	muls	r3, r2
 8012f3a:	6822      	ldr	r2, [r4, #0]
 8012f3c:	189b      	adds	r3, r3, r2
 8012f3e:	22e1      	movs	r2, #225	; 0xe1
 8012f40:	0112      	lsls	r2, r2, #4
 8012f42:	434a      	muls	r2, r1
 8012f44:	189b      	adds	r3, r3, r2
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	68e2      	ldr	r2, [r4, #12]
 8012f4a:	17db      	asrs	r3, r3, #31
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	6923      	ldr	r3, [r4, #16]
 8012f50:	1e50      	subs	r0, r2, #1
 8012f52:	4aad      	ldr	r2, [pc, #692]	; (8013208 <mktime+0x2e8>)
 8012f54:	0099      	lsls	r1, r3, #2
 8012f56:	588a      	ldr	r2, [r1, r2]
 8012f58:	1882      	adds	r2, r0, r2
 8012f5a:	9204      	str	r2, [sp, #16]
 8012f5c:	6962      	ldr	r2, [r4, #20]
 8012f5e:	9203      	str	r2, [sp, #12]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	dd14      	ble.n	8012f8e <mktime+0x6e>
 8012f64:	0013      	movs	r3, r2
 8012f66:	079b      	lsls	r3, r3, #30
 8012f68:	d111      	bne.n	8012f8e <mktime+0x6e>
 8012f6a:	2164      	movs	r1, #100	; 0x64
 8012f6c:	0010      	movs	r0, r2
 8012f6e:	f7ed fa57 	bl	8000420 <__aeabi_idivmod>
 8012f72:	2900      	cmp	r1, #0
 8012f74:	d108      	bne.n	8012f88 <mktime+0x68>
 8012f76:	4ba5      	ldr	r3, [pc, #660]	; (801320c <mktime+0x2ec>)
 8012f78:	9a03      	ldr	r2, [sp, #12]
 8012f7a:	3191      	adds	r1, #145	; 0x91
 8012f7c:	31ff      	adds	r1, #255	; 0xff
 8012f7e:	18d0      	adds	r0, r2, r3
 8012f80:	f7ed fa4e 	bl	8000420 <__aeabi_idivmod>
 8012f84:	2900      	cmp	r1, #0
 8012f86:	d102      	bne.n	8012f8e <mktime+0x6e>
 8012f88:	9b04      	ldr	r3, [sp, #16]
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	9b04      	ldr	r3, [sp, #16]
 8012f90:	9903      	ldr	r1, [sp, #12]
 8012f92:	61e3      	str	r3, [r4, #28]
 8012f94:	4b9e      	ldr	r3, [pc, #632]	; (8013210 <mktime+0x2f0>)
 8012f96:	4a9f      	ldr	r2, [pc, #636]	; (8013214 <mktime+0x2f4>)
 8012f98:	18cb      	adds	r3, r1, r3
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d900      	bls.n	8012fa0 <mktime+0x80>
 8012f9e:	e181      	b.n	80132a4 <mktime+0x384>
 8012fa0:	2946      	cmp	r1, #70	; 0x46
 8012fa2:	dc00      	bgt.n	8012fa6 <mktime+0x86>
 8012fa4:	e091      	b.n	80130ca <mktime+0x1aa>
 8012fa6:	2203      	movs	r2, #3
 8012fa8:	2346      	movs	r3, #70	; 0x46
 8012faa:	4694      	mov	ip, r2
 8012fac:	4661      	mov	r1, ip
 8012fae:	4662      	mov	r2, ip
 8012fb0:	4019      	ands	r1, r3
 8012fb2:	4213      	tst	r3, r2
 8012fb4:	d000      	beq.n	8012fb8 <mktime+0x98>
 8012fb6:	e085      	b.n	80130c4 <mktime+0x1a4>
 8012fb8:	4a97      	ldr	r2, [pc, #604]	; (8013218 <mktime+0x2f8>)
 8012fba:	2002      	movs	r0, #2
 8012fbc:	0015      	movs	r5, r2
 8012fbe:	435d      	muls	r5, r3
 8012fc0:	41c5      	rors	r5, r0
 8012fc2:	4e96      	ldr	r6, [pc, #600]	; (801321c <mktime+0x2fc>)
 8012fc4:	306d      	adds	r0, #109	; 0x6d
 8012fc6:	30ff      	adds	r0, #255	; 0xff
 8012fc8:	42b5      	cmp	r5, r6
 8012fca:	d80a      	bhi.n	8012fe2 <mktime+0xc2>
 8012fcc:	488f      	ldr	r0, [pc, #572]	; (801320c <mktime+0x2ec>)
 8012fce:	1818      	adds	r0, r3, r0
 8012fd0:	4342      	muls	r2, r0
 8012fd2:	2004      	movs	r0, #4
 8012fd4:	41c2      	rors	r2, r0
 8012fd6:	4892      	ldr	r0, [pc, #584]	; (8013220 <mktime+0x300>)
 8012fd8:	4290      	cmp	r0, r2
 8012fda:	4149      	adcs	r1, r1
 8012fdc:	316e      	adds	r1, #110	; 0x6e
 8012fde:	31ff      	adds	r1, #255	; 0xff
 8012fe0:	0008      	movs	r0, r1
 8012fe2:	9a04      	ldr	r2, [sp, #16]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	1812      	adds	r2, r2, r0
 8012fe8:	9204      	str	r2, [sp, #16]
 8012fea:	9a03      	ldr	r2, [sp, #12]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d1dd      	bne.n	8012fac <mktime+0x8c>
 8012ff0:	9b04      	ldr	r3, [sp, #16]
 8012ff2:	4a8c      	ldr	r2, [pc, #560]	; (8013224 <mktime+0x304>)
 8012ff4:	9804      	ldr	r0, [sp, #16]
 8012ff6:	17d9      	asrs	r1, r3, #31
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f7ed fa17 	bl	800042c <__aeabi_lmul>
 8012ffe:	9a00      	ldr	r2, [sp, #0]
 8013000:	9b01      	ldr	r3, [sp, #4]
 8013002:	1812      	adds	r2, r2, r0
 8013004:	414b      	adcs	r3, r1
 8013006:	9200      	str	r2, [sp, #0]
 8013008:	9301      	str	r3, [sp, #4]
 801300a:	f000 fad1 	bl	80135b0 <__tz_lock>
 801300e:	f000 fadf 	bl	80135d0 <_tzset_unlocked>
 8013012:	4b85      	ldr	r3, [pc, #532]	; (8013228 <mktime+0x308>)
 8013014:	681d      	ldr	r5, [r3, #0]
 8013016:	2d00      	cmp	r5, #0
 8013018:	d04c      	beq.n	80130b4 <mktime+0x194>
 801301a:	6963      	ldr	r3, [r4, #20]
 801301c:	4a7b      	ldr	r2, [pc, #492]	; (801320c <mktime+0x2ec>)
 801301e:	1898      	adds	r0, r3, r2
 8013020:	6a23      	ldr	r3, [r4, #32]
 8013022:	9305      	str	r3, [sp, #20]
 8013024:	9309      	str	r3, [sp, #36]	; 0x24
 8013026:	2b00      	cmp	r3, #0
 8013028:	dd01      	ble.n	801302e <mktime+0x10e>
 801302a:	2301      	movs	r3, #1
 801302c:	9309      	str	r3, [sp, #36]	; 0x24
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	4283      	cmp	r3, r0
 8013032:	d000      	beq.n	8013036 <mktime+0x116>
 8013034:	e089      	b.n	801314a <mktime+0x22a>
 8013036:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8013038:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801303c:	0005      	movs	r5, r0
 801303e:	9308      	str	r3, [sp, #32]
 8013040:	9b08      	ldr	r3, [sp, #32]
 8013042:	000e      	movs	r6, r1
 8013044:	9306      	str	r3, [sp, #24]
 8013046:	17db      	asrs	r3, r3, #31
 8013048:	9307      	str	r3, [sp, #28]
 801304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304c:	001a      	movs	r2, r3
 801304e:	469c      	mov	ip, r3
 8013050:	17db      	asrs	r3, r3, #31
 8013052:	1aad      	subs	r5, r5, r2
 8013054:	419e      	sbcs	r6, r3
 8013056:	002a      	movs	r2, r5
 8013058:	9d01      	ldr	r5, [sp, #4]
 801305a:	0033      	movs	r3, r6
 801305c:	42ae      	cmp	r6, r5
 801305e:	dc0e      	bgt.n	801307e <mktime+0x15e>
 8013060:	d102      	bne.n	8013068 <mktime+0x148>
 8013062:	9d00      	ldr	r5, [sp, #0]
 8013064:	42aa      	cmp	r2, r5
 8013066:	d80a      	bhi.n	801307e <mktime+0x15e>
 8013068:	9d06      	ldr	r5, [sp, #24]
 801306a:	9e07      	ldr	r6, [sp, #28]
 801306c:	1b40      	subs	r0, r0, r5
 801306e:	41b1      	sbcs	r1, r6
 8013070:	9d01      	ldr	r5, [sp, #4]
 8013072:	42a9      	cmp	r1, r5
 8013074:	dc6e      	bgt.n	8013154 <mktime+0x234>
 8013076:	d102      	bne.n	801307e <mktime+0x15e>
 8013078:	9d00      	ldr	r5, [sp, #0]
 801307a:	42a8      	cmp	r0, r5
 801307c:	d86a      	bhi.n	8013154 <mktime+0x234>
 801307e:	9d06      	ldr	r5, [sp, #24]
 8013080:	9e07      	ldr	r6, [sp, #28]
 8013082:	6a38      	ldr	r0, [r7, #32]
 8013084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013086:	1b40      	subs	r0, r0, r5
 8013088:	41b1      	sbcs	r1, r6
 801308a:	683d      	ldr	r5, [r7, #0]
 801308c:	2d00      	cmp	r5, #0
 801308e:	d063      	beq.n	8013158 <mktime+0x238>
 8013090:	9d01      	ldr	r5, [sp, #4]
 8013092:	42a9      	cmp	r1, r5
 8013094:	dc0a      	bgt.n	80130ac <mktime+0x18c>
 8013096:	d102      	bne.n	801309e <mktime+0x17e>
 8013098:	9d00      	ldr	r5, [sp, #0]
 801309a:	42a8      	cmp	r0, r5
 801309c:	d806      	bhi.n	80130ac <mktime+0x18c>
 801309e:	9901      	ldr	r1, [sp, #4]
 80130a0:	428b      	cmp	r3, r1
 80130a2:	dc60      	bgt.n	8013166 <mktime+0x246>
 80130a4:	d102      	bne.n	80130ac <mktime+0x18c>
 80130a6:	9900      	ldr	r1, [sp, #0]
 80130a8:	428a      	cmp	r2, r1
 80130aa:	d85c      	bhi.n	8013166 <mktime+0x246>
 80130ac:	2500      	movs	r5, #0
 80130ae:	9b05      	ldr	r3, [sp, #20]
 80130b0:	42ab      	cmp	r3, r5
 80130b2:	da5c      	bge.n	801316e <mktime+0x24e>
 80130b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b6:	001e      	movs	r6, r3
 80130b8:	17df      	asrs	r7, r3, #31
 80130ba:	9a00      	ldr	r2, [sp, #0]
 80130bc:	9b01      	ldr	r3, [sp, #4]
 80130be:	18b6      	adds	r6, r6, r2
 80130c0:	415f      	adcs	r7, r3
 80130c2:	e0d7      	b.n	8013274 <mktime+0x354>
 80130c4:	206e      	movs	r0, #110	; 0x6e
 80130c6:	30ff      	adds	r0, #255	; 0xff
 80130c8:	e78b      	b.n	8012fe2 <mktime+0xc2>
 80130ca:	9b03      	ldr	r3, [sp, #12]
 80130cc:	2545      	movs	r5, #69	; 0x45
 80130ce:	2b46      	cmp	r3, #70	; 0x46
 80130d0:	d08e      	beq.n	8012ff0 <mktime+0xd0>
 80130d2:	2303      	movs	r3, #3
 80130d4:	9a03      	ldr	r2, [sp, #12]
 80130d6:	402b      	ands	r3, r5
 80130d8:	42aa      	cmp	r2, r5
 80130da:	db16      	blt.n	801310a <mktime+0x1ea>
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d12f      	bne.n	8013140 <mktime+0x220>
 80130e0:	2164      	movs	r1, #100	; 0x64
 80130e2:	0010      	movs	r0, r2
 80130e4:	f7ed f99c 	bl	8000420 <__aeabi_idivmod>
 80130e8:	2900      	cmp	r1, #0
 80130ea:	d12b      	bne.n	8013144 <mktime+0x224>
 80130ec:	4b47      	ldr	r3, [pc, #284]	; (801320c <mktime+0x2ec>)
 80130ee:	9a03      	ldr	r2, [sp, #12]
 80130f0:	3191      	adds	r1, #145	; 0x91
 80130f2:	18d0      	adds	r0, r2, r3
 80130f4:	31ff      	adds	r1, #255	; 0xff
 80130f6:	f7ed f993 	bl	8000420 <__aeabi_idivmod>
 80130fa:	424b      	negs	r3, r1
 80130fc:	4159      	adcs	r1, r3
 80130fe:	316e      	adds	r1, #110	; 0x6e
 8013100:	31ff      	adds	r1, #255	; 0xff
 8013102:	9b04      	ldr	r3, [sp, #16]
 8013104:	1a5b      	subs	r3, r3, r1
 8013106:	9304      	str	r3, [sp, #16]
 8013108:	e772      	b.n	8012ff0 <mktime+0xd0>
 801310a:	2b00      	cmp	r3, #0
 801310c:	d116      	bne.n	801313c <mktime+0x21c>
 801310e:	2164      	movs	r1, #100	; 0x64
 8013110:	0028      	movs	r0, r5
 8013112:	f7ed f985 	bl	8000420 <__aeabi_idivmod>
 8013116:	23b7      	movs	r3, #183	; 0xb7
 8013118:	005b      	lsls	r3, r3, #1
 801311a:	2900      	cmp	r1, #0
 801311c:	d109      	bne.n	8013132 <mktime+0x212>
 801311e:	4b3b      	ldr	r3, [pc, #236]	; (801320c <mktime+0x2ec>)
 8013120:	3191      	adds	r1, #145	; 0x91
 8013122:	18e8      	adds	r0, r5, r3
 8013124:	31ff      	adds	r1, #255	; 0xff
 8013126:	f7ed f97b 	bl	8000420 <__aeabi_idivmod>
 801312a:	424b      	negs	r3, r1
 801312c:	414b      	adcs	r3, r1
 801312e:	336e      	adds	r3, #110	; 0x6e
 8013130:	33ff      	adds	r3, #255	; 0xff
 8013132:	9a04      	ldr	r2, [sp, #16]
 8013134:	3d01      	subs	r5, #1
 8013136:	1ad3      	subs	r3, r2, r3
 8013138:	9304      	str	r3, [sp, #16]
 801313a:	e7ca      	b.n	80130d2 <mktime+0x1b2>
 801313c:	236e      	movs	r3, #110	; 0x6e
 801313e:	e7f7      	b.n	8013130 <mktime+0x210>
 8013140:	216e      	movs	r1, #110	; 0x6e
 8013142:	e7dd      	b.n	8013100 <mktime+0x1e0>
 8013144:	21b7      	movs	r1, #183	; 0xb7
 8013146:	0049      	lsls	r1, r1, #1
 8013148:	e7db      	b.n	8013102 <mktime+0x1e2>
 801314a:	f000 f985 	bl	8013458 <__tzcalc_limits>
 801314e:	2800      	cmp	r0, #0
 8013150:	d000      	beq.n	8013154 <mktime+0x234>
 8013152:	e770      	b.n	8013036 <mktime+0x116>
 8013154:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013156:	e082      	b.n	801325e <mktime+0x33e>
 8013158:	9d01      	ldr	r5, [sp, #4]
 801315a:	42a9      	cmp	r1, r5
 801315c:	dc9f      	bgt.n	801309e <mktime+0x17e>
 801315e:	d102      	bne.n	8013166 <mktime+0x246>
 8013160:	9d00      	ldr	r5, [sp, #0]
 8013162:	42a8      	cmp	r0, r5
 8013164:	d89b      	bhi.n	801309e <mktime+0x17e>
 8013166:	9b05      	ldr	r3, [sp, #20]
 8013168:	2501      	movs	r5, #1
 801316a:	2b00      	cmp	r3, #0
 801316c:	db7a      	blt.n	8013264 <mktime+0x344>
 801316e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013170:	406b      	eors	r3, r5
 8013172:	001e      	movs	r6, r3
 8013174:	2b01      	cmp	r3, #1
 8013176:	d172      	bne.n	801325e <mktime+0x33e>
 8013178:	4662      	mov	r2, ip
 801317a:	9b08      	ldr	r3, [sp, #32]
 801317c:	1a9b      	subs	r3, r3, r2
 801317e:	2d00      	cmp	r5, #0
 8013180:	d002      	beq.n	8013188 <mktime+0x268>
 8013182:	4663      	mov	r3, ip
 8013184:	9a08      	ldr	r2, [sp, #32]
 8013186:	1a9b      	subs	r3, r3, r2
 8013188:	0018      	movs	r0, r3
 801318a:	6822      	ldr	r2, [r4, #0]
 801318c:	17d9      	asrs	r1, r3, #31
 801318e:	18d2      	adds	r2, r2, r3
 8013190:	6022      	str	r2, [r4, #0]
 8013192:	9a00      	ldr	r2, [sp, #0]
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	1812      	adds	r2, r2, r0
 8013198:	414b      	adcs	r3, r1
 801319a:	9200      	str	r2, [sp, #0]
 801319c:	9301      	str	r3, [sp, #4]
 801319e:	68e3      	ldr	r3, [r4, #12]
 80131a0:	0020      	movs	r0, r4
 80131a2:	9305      	str	r3, [sp, #20]
 80131a4:	f7ff fdf6 	bl	8012d94 <validate_structure>
 80131a8:	68e3      	ldr	r3, [r4, #12]
 80131aa:	9a05      	ldr	r2, [sp, #20]
 80131ac:	1a99      	subs	r1, r3, r2
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d055      	beq.n	801325e <mktime+0x33e>
 80131b2:	2901      	cmp	r1, #1
 80131b4:	dc1e      	bgt.n	80131f4 <mktime+0x2d4>
 80131b6:	1c4b      	adds	r3, r1, #1
 80131b8:	da00      	bge.n	80131bc <mktime+0x29c>
 80131ba:	0031      	movs	r1, r6
 80131bc:	9b04      	ldr	r3, [sp, #16]
 80131be:	69e2      	ldr	r2, [r4, #28]
 80131c0:	185b      	adds	r3, r3, r1
 80131c2:	9304      	str	r3, [sp, #16]
 80131c4:	2303      	movs	r3, #3
 80131c6:	1856      	adds	r6, r2, r1
 80131c8:	d532      	bpl.n	8013230 <mktime+0x310>
 80131ca:	9a03      	ldr	r2, [sp, #12]
 80131cc:	1e50      	subs	r0, r2, #1
 80131ce:	4218      	tst	r0, r3
 80131d0:	d113      	bne.n	80131fa <mktime+0x2da>
 80131d2:	2164      	movs	r1, #100	; 0x64
 80131d4:	f7ed f924 	bl	8000420 <__aeabi_idivmod>
 80131d8:	2900      	cmp	r1, #0
 80131da:	d112      	bne.n	8013202 <mktime+0x2e2>
 80131dc:	4b13      	ldr	r3, [pc, #76]	; (801322c <mktime+0x30c>)
 80131de:	9a03      	ldr	r2, [sp, #12]
 80131e0:	3191      	adds	r1, #145	; 0x91
 80131e2:	18d0      	adds	r0, r2, r3
 80131e4:	31ff      	adds	r1, #255	; 0xff
 80131e6:	f7ed f91b 	bl	8000420 <__aeabi_idivmod>
 80131ea:	424b      	negs	r3, r1
 80131ec:	4159      	adcs	r1, r3
 80131ee:	316d      	adds	r1, #109	; 0x6d
 80131f0:	31ff      	adds	r1, #255	; 0xff
 80131f2:	e004      	b.n	80131fe <mktime+0x2de>
 80131f4:	2101      	movs	r1, #1
 80131f6:	4249      	negs	r1, r1
 80131f8:	e7e0      	b.n	80131bc <mktime+0x29c>
 80131fa:	21b6      	movs	r1, #182	; 0xb6
 80131fc:	0049      	lsls	r1, r1, #1
 80131fe:	61e1      	str	r1, [r4, #28]
 8013200:	e02d      	b.n	801325e <mktime+0x33e>
 8013202:	216e      	movs	r1, #110	; 0x6e
 8013204:	e7f4      	b.n	80131f0 <mktime+0x2d0>
 8013206:	46c0      	nop			; (mov r8, r8)
 8013208:	08016580 	.word	0x08016580
 801320c:	0000076c 	.word	0x0000076c
 8013210:	00002710 	.word	0x00002710
 8013214:	00004e20 	.word	0x00004e20
 8013218:	c28f5c29 	.word	0xc28f5c29
 801321c:	028f5c28 	.word	0x028f5c28
 8013220:	00a3d70a 	.word	0x00a3d70a
 8013224:	00015180 	.word	0x00015180
 8013228:	200019b4 	.word	0x200019b4
 801322c:	0000076b 	.word	0x0000076b
 8013230:	9a03      	ldr	r2, [sp, #12]
 8013232:	421a      	tst	r2, r3
 8013234:	d12d      	bne.n	8013292 <mktime+0x372>
 8013236:	2164      	movs	r1, #100	; 0x64
 8013238:	0010      	movs	r0, r2
 801323a:	f7ed f8f1 	bl	8000420 <__aeabi_idivmod>
 801323e:	2900      	cmp	r1, #0
 8013240:	d129      	bne.n	8013296 <mktime+0x376>
 8013242:	4b1a      	ldr	r3, [pc, #104]	; (80132ac <mktime+0x38c>)
 8013244:	9a03      	ldr	r2, [sp, #12]
 8013246:	3191      	adds	r1, #145	; 0x91
 8013248:	18d0      	adds	r0, r2, r3
 801324a:	31ff      	adds	r1, #255	; 0xff
 801324c:	f7ed f8e8 	bl	8000420 <__aeabi_idivmod>
 8013250:	424b      	negs	r3, r1
 8013252:	4159      	adcs	r1, r3
 8013254:	316e      	adds	r1, #110	; 0x6e
 8013256:	31ff      	adds	r1, #255	; 0xff
 8013258:	428e      	cmp	r6, r1
 801325a:	da1f      	bge.n	801329c <mktime+0x37c>
 801325c:	61e6      	str	r6, [r4, #28]
 801325e:	2d01      	cmp	r5, #1
 8013260:	d000      	beq.n	8013264 <mktime+0x344>
 8013262:	e727      	b.n	80130b4 <mktime+0x194>
 8013264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013266:	2501      	movs	r5, #1
 8013268:	001e      	movs	r6, r3
 801326a:	17df      	asrs	r7, r3, #31
 801326c:	9a00      	ldr	r2, [sp, #0]
 801326e:	9b01      	ldr	r3, [sp, #4]
 8013270:	18b6      	adds	r6, r6, r2
 8013272:	415f      	adcs	r7, r3
 8013274:	f000 f9a4 	bl	80135c0 <__tz_unlock>
 8013278:	9804      	ldr	r0, [sp, #16]
 801327a:	2107      	movs	r1, #7
 801327c:	6225      	str	r5, [r4, #32]
 801327e:	3004      	adds	r0, #4
 8013280:	f7ed f8ce 	bl	8000420 <__aeabi_idivmod>
 8013284:	2900      	cmp	r1, #0
 8013286:	db0b      	blt.n	80132a0 <mktime+0x380>
 8013288:	61a1      	str	r1, [r4, #24]
 801328a:	0030      	movs	r0, r6
 801328c:	0039      	movs	r1, r7
 801328e:	b00b      	add	sp, #44	; 0x2c
 8013290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013292:	216e      	movs	r1, #110	; 0x6e
 8013294:	e7df      	b.n	8013256 <mktime+0x336>
 8013296:	21b7      	movs	r1, #183	; 0xb7
 8013298:	0049      	lsls	r1, r1, #1
 801329a:	e7dd      	b.n	8013258 <mktime+0x338>
 801329c:	1a71      	subs	r1, r6, r1
 801329e:	e7ae      	b.n	80131fe <mktime+0x2de>
 80132a0:	3107      	adds	r1, #7
 80132a2:	e7f1      	b.n	8013288 <mktime+0x368>
 80132a4:	2601      	movs	r6, #1
 80132a6:	4276      	negs	r6, r6
 80132a8:	17f7      	asrs	r7, r6, #31
 80132aa:	e7ee      	b.n	801328a <mktime+0x36a>
 80132ac:	0000076c 	.word	0x0000076c

080132b0 <siprintf>:
 80132b0:	b40e      	push	{r1, r2, r3}
 80132b2:	b500      	push	{lr}
 80132b4:	490b      	ldr	r1, [pc, #44]	; (80132e4 <siprintf+0x34>)
 80132b6:	b09c      	sub	sp, #112	; 0x70
 80132b8:	ab1d      	add	r3, sp, #116	; 0x74
 80132ba:	9002      	str	r0, [sp, #8]
 80132bc:	9006      	str	r0, [sp, #24]
 80132be:	9107      	str	r1, [sp, #28]
 80132c0:	9104      	str	r1, [sp, #16]
 80132c2:	4809      	ldr	r0, [pc, #36]	; (80132e8 <siprintf+0x38>)
 80132c4:	4909      	ldr	r1, [pc, #36]	; (80132ec <siprintf+0x3c>)
 80132c6:	cb04      	ldmia	r3!, {r2}
 80132c8:	9105      	str	r1, [sp, #20]
 80132ca:	6800      	ldr	r0, [r0, #0]
 80132cc:	a902      	add	r1, sp, #8
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	f000 fc80 	bl	8013bd4 <_svfiprintf_r>
 80132d4:	2300      	movs	r3, #0
 80132d6:	9a02      	ldr	r2, [sp, #8]
 80132d8:	7013      	strb	r3, [r2, #0]
 80132da:	b01c      	add	sp, #112	; 0x70
 80132dc:	bc08      	pop	{r3}
 80132de:	b003      	add	sp, #12
 80132e0:	4718      	bx	r3
 80132e2:	46c0      	nop			; (mov r8, r8)
 80132e4:	7fffffff 	.word	0x7fffffff
 80132e8:	200001f4 	.word	0x200001f4
 80132ec:	ffff0208 	.word	0xffff0208

080132f0 <strstr>:
 80132f0:	780a      	ldrb	r2, [r1, #0]
 80132f2:	b530      	push	{r4, r5, lr}
 80132f4:	2a00      	cmp	r2, #0
 80132f6:	d10c      	bne.n	8013312 <strstr+0x22>
 80132f8:	bd30      	pop	{r4, r5, pc}
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d108      	bne.n	8013310 <strstr+0x20>
 80132fe:	2301      	movs	r3, #1
 8013300:	5ccc      	ldrb	r4, [r1, r3]
 8013302:	2c00      	cmp	r4, #0
 8013304:	d0f8      	beq.n	80132f8 <strstr+0x8>
 8013306:	5cc5      	ldrb	r5, [r0, r3]
 8013308:	42a5      	cmp	r5, r4
 801330a:	d101      	bne.n	8013310 <strstr+0x20>
 801330c:	3301      	adds	r3, #1
 801330e:	e7f7      	b.n	8013300 <strstr+0x10>
 8013310:	3001      	adds	r0, #1
 8013312:	7803      	ldrb	r3, [r0, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1f0      	bne.n	80132fa <strstr+0xa>
 8013318:	0018      	movs	r0, r3
 801331a:	e7ed      	b.n	80132f8 <strstr+0x8>

0801331c <_strtol_l.isra.0>:
 801331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331e:	b087      	sub	sp, #28
 8013320:	001e      	movs	r6, r3
 8013322:	9005      	str	r0, [sp, #20]
 8013324:	9101      	str	r1, [sp, #4]
 8013326:	9202      	str	r2, [sp, #8]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d045      	beq.n	80133b8 <_strtol_l.isra.0+0x9c>
 801332c:	0008      	movs	r0, r1
 801332e:	2b24      	cmp	r3, #36	; 0x24
 8013330:	d842      	bhi.n	80133b8 <_strtol_l.isra.0+0x9c>
 8013332:	4b3f      	ldr	r3, [pc, #252]	; (8013430 <_strtol_l.isra.0+0x114>)
 8013334:	2208      	movs	r2, #8
 8013336:	469c      	mov	ip, r3
 8013338:	0003      	movs	r3, r0
 801333a:	4661      	mov	r1, ip
 801333c:	781c      	ldrb	r4, [r3, #0]
 801333e:	1c45      	adds	r5, r0, #1
 8013340:	5d09      	ldrb	r1, [r1, r4]
 8013342:	0028      	movs	r0, r5
 8013344:	000f      	movs	r7, r1
 8013346:	4017      	ands	r7, r2
 8013348:	4211      	tst	r1, r2
 801334a:	d1f5      	bne.n	8013338 <_strtol_l.isra.0+0x1c>
 801334c:	2c2d      	cmp	r4, #45	; 0x2d
 801334e:	d13a      	bne.n	80133c6 <_strtol_l.isra.0+0xaa>
 8013350:	2701      	movs	r7, #1
 8013352:	782c      	ldrb	r4, [r5, #0]
 8013354:	1c9d      	adds	r5, r3, #2
 8013356:	2e00      	cmp	r6, #0
 8013358:	d065      	beq.n	8013426 <_strtol_l.isra.0+0x10a>
 801335a:	2e10      	cmp	r6, #16
 801335c:	d109      	bne.n	8013372 <_strtol_l.isra.0+0x56>
 801335e:	2c30      	cmp	r4, #48	; 0x30
 8013360:	d107      	bne.n	8013372 <_strtol_l.isra.0+0x56>
 8013362:	2220      	movs	r2, #32
 8013364:	782b      	ldrb	r3, [r5, #0]
 8013366:	4393      	bics	r3, r2
 8013368:	2b58      	cmp	r3, #88	; 0x58
 801336a:	d157      	bne.n	801341c <_strtol_l.isra.0+0x100>
 801336c:	2610      	movs	r6, #16
 801336e:	786c      	ldrb	r4, [r5, #1]
 8013370:	3502      	adds	r5, #2
 8013372:	4b30      	ldr	r3, [pc, #192]	; (8013434 <_strtol_l.isra.0+0x118>)
 8013374:	0031      	movs	r1, r6
 8013376:	18fb      	adds	r3, r7, r3
 8013378:	0018      	movs	r0, r3
 801337a:	9303      	str	r3, [sp, #12]
 801337c:	f7ec ff66 	bl	800024c <__aeabi_uidivmod>
 8013380:	2300      	movs	r3, #0
 8013382:	2201      	movs	r2, #1
 8013384:	4684      	mov	ip, r0
 8013386:	0018      	movs	r0, r3
 8013388:	9104      	str	r1, [sp, #16]
 801338a:	4252      	negs	r2, r2
 801338c:	0021      	movs	r1, r4
 801338e:	3930      	subs	r1, #48	; 0x30
 8013390:	2909      	cmp	r1, #9
 8013392:	d81d      	bhi.n	80133d0 <_strtol_l.isra.0+0xb4>
 8013394:	000c      	movs	r4, r1
 8013396:	42a6      	cmp	r6, r4
 8013398:	dd28      	ble.n	80133ec <_strtol_l.isra.0+0xd0>
 801339a:	2b00      	cmp	r3, #0
 801339c:	db24      	blt.n	80133e8 <_strtol_l.isra.0+0xcc>
 801339e:	0013      	movs	r3, r2
 80133a0:	4584      	cmp	ip, r0
 80133a2:	d306      	bcc.n	80133b2 <_strtol_l.isra.0+0x96>
 80133a4:	d102      	bne.n	80133ac <_strtol_l.isra.0+0x90>
 80133a6:	9904      	ldr	r1, [sp, #16]
 80133a8:	42a1      	cmp	r1, r4
 80133aa:	db02      	blt.n	80133b2 <_strtol_l.isra.0+0x96>
 80133ac:	2301      	movs	r3, #1
 80133ae:	4370      	muls	r0, r6
 80133b0:	1820      	adds	r0, r4, r0
 80133b2:	782c      	ldrb	r4, [r5, #0]
 80133b4:	3501      	adds	r5, #1
 80133b6:	e7e9      	b.n	801338c <_strtol_l.isra.0+0x70>
 80133b8:	f7ff fcba 	bl	8012d30 <__errno>
 80133bc:	2316      	movs	r3, #22
 80133be:	6003      	str	r3, [r0, #0]
 80133c0:	2000      	movs	r0, #0
 80133c2:	b007      	add	sp, #28
 80133c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133c6:	2c2b      	cmp	r4, #43	; 0x2b
 80133c8:	d1c5      	bne.n	8013356 <_strtol_l.isra.0+0x3a>
 80133ca:	782c      	ldrb	r4, [r5, #0]
 80133cc:	1c9d      	adds	r5, r3, #2
 80133ce:	e7c2      	b.n	8013356 <_strtol_l.isra.0+0x3a>
 80133d0:	0021      	movs	r1, r4
 80133d2:	3941      	subs	r1, #65	; 0x41
 80133d4:	2919      	cmp	r1, #25
 80133d6:	d801      	bhi.n	80133dc <_strtol_l.isra.0+0xc0>
 80133d8:	3c37      	subs	r4, #55	; 0x37
 80133da:	e7dc      	b.n	8013396 <_strtol_l.isra.0+0x7a>
 80133dc:	0021      	movs	r1, r4
 80133de:	3961      	subs	r1, #97	; 0x61
 80133e0:	2919      	cmp	r1, #25
 80133e2:	d803      	bhi.n	80133ec <_strtol_l.isra.0+0xd0>
 80133e4:	3c57      	subs	r4, #87	; 0x57
 80133e6:	e7d6      	b.n	8013396 <_strtol_l.isra.0+0x7a>
 80133e8:	0013      	movs	r3, r2
 80133ea:	e7e2      	b.n	80133b2 <_strtol_l.isra.0+0x96>
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	da09      	bge.n	8013404 <_strtol_l.isra.0+0xe8>
 80133f0:	2322      	movs	r3, #34	; 0x22
 80133f2:	9a05      	ldr	r2, [sp, #20]
 80133f4:	9803      	ldr	r0, [sp, #12]
 80133f6:	6013      	str	r3, [r2, #0]
 80133f8:	9b02      	ldr	r3, [sp, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d0e1      	beq.n	80133c2 <_strtol_l.isra.0+0xa6>
 80133fe:	1e6b      	subs	r3, r5, #1
 8013400:	9301      	str	r3, [sp, #4]
 8013402:	e007      	b.n	8013414 <_strtol_l.isra.0+0xf8>
 8013404:	2f00      	cmp	r7, #0
 8013406:	d000      	beq.n	801340a <_strtol_l.isra.0+0xee>
 8013408:	4240      	negs	r0, r0
 801340a:	9a02      	ldr	r2, [sp, #8]
 801340c:	2a00      	cmp	r2, #0
 801340e:	d0d8      	beq.n	80133c2 <_strtol_l.isra.0+0xa6>
 8013410:	2b00      	cmp	r3, #0
 8013412:	d1f4      	bne.n	80133fe <_strtol_l.isra.0+0xe2>
 8013414:	9b02      	ldr	r3, [sp, #8]
 8013416:	9a01      	ldr	r2, [sp, #4]
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	e7d2      	b.n	80133c2 <_strtol_l.isra.0+0xa6>
 801341c:	2430      	movs	r4, #48	; 0x30
 801341e:	2e00      	cmp	r6, #0
 8013420:	d1a7      	bne.n	8013372 <_strtol_l.isra.0+0x56>
 8013422:	3608      	adds	r6, #8
 8013424:	e7a5      	b.n	8013372 <_strtol_l.isra.0+0x56>
 8013426:	2c30      	cmp	r4, #48	; 0x30
 8013428:	d09b      	beq.n	8013362 <_strtol_l.isra.0+0x46>
 801342a:	260a      	movs	r6, #10
 801342c:	e7a1      	b.n	8013372 <_strtol_l.isra.0+0x56>
 801342e:	46c0      	nop			; (mov r8, r8)
 8013430:	080165ed 	.word	0x080165ed
 8013434:	7fffffff 	.word	0x7fffffff

08013438 <_strtol_r>:
 8013438:	b510      	push	{r4, lr}
 801343a:	f7ff ff6f 	bl	801331c <_strtol_l.isra.0>
 801343e:	bd10      	pop	{r4, pc}

08013440 <strtol>:
 8013440:	b510      	push	{r4, lr}
 8013442:	0013      	movs	r3, r2
 8013444:	000a      	movs	r2, r1
 8013446:	0001      	movs	r1, r0
 8013448:	4802      	ldr	r0, [pc, #8]	; (8013454 <strtol+0x14>)
 801344a:	6800      	ldr	r0, [r0, #0]
 801344c:	f7ff ff66 	bl	801331c <_strtol_l.isra.0>
 8013450:	bd10      	pop	{r4, pc}
 8013452:	46c0      	nop			; (mov r8, r8)
 8013454:	200001f4 	.word	0x200001f4

08013458 <__tzcalc_limits>:
 8013458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801345a:	b089      	sub	sp, #36	; 0x24
 801345c:	0004      	movs	r4, r0
 801345e:	f000 fa9d 	bl	801399c <__gettzinfo>
 8013462:	4b4c      	ldr	r3, [pc, #304]	; (8013594 <__tzcalc_limits+0x13c>)
 8013464:	0006      	movs	r6, r0
 8013466:	2000      	movs	r0, #0
 8013468:	429c      	cmp	r4, r3
 801346a:	dd5f      	ble.n	801352c <__tzcalc_limits+0xd4>
 801346c:	256e      	movs	r5, #110	; 0x6e
 801346e:	2164      	movs	r1, #100	; 0x64
 8013470:	4b49      	ldr	r3, [pc, #292]	; (8013598 <__tzcalc_limits+0x140>)
 8013472:	35ff      	adds	r5, #255	; 0xff
 8013474:	18e0      	adds	r0, r4, r3
 8013476:	4345      	muls	r5, r0
 8013478:	4b48      	ldr	r3, [pc, #288]	; (801359c <__tzcalc_limits+0x144>)
 801347a:	6074      	str	r4, [r6, #4]
 801347c:	18e0      	adds	r0, r4, r3
 801347e:	4b48      	ldr	r3, [pc, #288]	; (80135a0 <__tzcalc_limits+0x148>)
 8013480:	1080      	asrs	r0, r0, #2
 8013482:	182d      	adds	r5, r5, r0
 8013484:	4249      	negs	r1, r1
 8013486:	18e0      	adds	r0, r4, r3
 8013488:	f7ec fee4 	bl	8000254 <__divsi3>
 801348c:	21c8      	movs	r1, #200	; 0xc8
 801348e:	4b45      	ldr	r3, [pc, #276]	; (80135a4 <__tzcalc_limits+0x14c>)
 8013490:	182d      	adds	r5, r5, r0
 8013492:	0049      	lsls	r1, r1, #1
 8013494:	18e0      	adds	r0, r4, r3
 8013496:	f7ec fedd 	bl	8000254 <__divsi3>
 801349a:	2164      	movs	r1, #100	; 0x64
 801349c:	182b      	adds	r3, r5, r0
 801349e:	0020      	movs	r0, r4
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	f7ec ffbd 	bl	8000420 <__aeabi_idivmod>
 80134a6:	9102      	str	r1, [sp, #8]
 80134a8:	21c8      	movs	r1, #200	; 0xc8
 80134aa:	0020      	movs	r0, r4
 80134ac:	0049      	lsls	r1, r1, #1
 80134ae:	f7ec ffb7 	bl	8000420 <__aeabi_idivmod>
 80134b2:	000a      	movs	r2, r1
 80134b4:	2003      	movs	r0, #3
 80134b6:	4253      	negs	r3, r2
 80134b8:	415a      	adcs	r2, r3
 80134ba:	0033      	movs	r3, r6
 80134bc:	0035      	movs	r5, r6
 80134be:	3358      	adds	r3, #88	; 0x58
 80134c0:	4004      	ands	r4, r0
 80134c2:	9103      	str	r1, [sp, #12]
 80134c4:	9205      	str	r2, [sp, #20]
 80134c6:	3508      	adds	r5, #8
 80134c8:	9307      	str	r3, [sp, #28]
 80134ca:	9406      	str	r4, [sp, #24]
 80134cc:	782b      	ldrb	r3, [r5, #0]
 80134ce:	68ef      	ldr	r7, [r5, #12]
 80134d0:	2b4a      	cmp	r3, #74	; 0x4a
 80134d2:	d12d      	bne.n	8013530 <__tzcalc_limits+0xd8>
 80134d4:	9b01      	ldr	r3, [sp, #4]
 80134d6:	19dc      	adds	r4, r3, r7
 80134d8:	9b06      	ldr	r3, [sp, #24]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <__tzcalc_limits+0x8c>
 80134de:	9b02      	ldr	r3, [sp, #8]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d103      	bne.n	80134ec <__tzcalc_limits+0x94>
 80134e4:	2100      	movs	r1, #0
 80134e6:	9b03      	ldr	r3, [sp, #12]
 80134e8:	428b      	cmp	r3, r1
 80134ea:	d103      	bne.n	80134f4 <__tzcalc_limits+0x9c>
 80134ec:	2101      	movs	r1, #1
 80134ee:	2f3b      	cmp	r7, #59	; 0x3b
 80134f0:	dc00      	bgt.n	80134f4 <__tzcalc_limits+0x9c>
 80134f2:	2100      	movs	r1, #0
 80134f4:	1864      	adds	r4, r4, r1
 80134f6:	3c01      	subs	r4, #1
 80134f8:	492b      	ldr	r1, [pc, #172]	; (80135a8 <__tzcalc_limits+0x150>)
 80134fa:	692b      	ldr	r3, [r5, #16]
 80134fc:	434c      	muls	r4, r1
 80134fe:	18e4      	adds	r4, r4, r3
 8013500:	6a2b      	ldr	r3, [r5, #32]
 8013502:	18e4      	adds	r4, r4, r3
 8013504:	61ac      	str	r4, [r5, #24]
 8013506:	9b07      	ldr	r3, [sp, #28]
 8013508:	17e4      	asrs	r4, r4, #31
 801350a:	61ec      	str	r4, [r5, #28]
 801350c:	3528      	adds	r5, #40	; 0x28
 801350e:	42ab      	cmp	r3, r5
 8013510:	d1dc      	bne.n	80134cc <__tzcalc_limits+0x74>
 8013512:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 8013514:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013516:	2301      	movs	r3, #1
 8013518:	4291      	cmp	r1, r2
 801351a:	dc05      	bgt.n	8013528 <__tzcalc_limits+0xd0>
 801351c:	d103      	bne.n	8013526 <__tzcalc_limits+0xce>
 801351e:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8013520:	6a31      	ldr	r1, [r6, #32]
 8013522:	428a      	cmp	r2, r1
 8013524:	d800      	bhi.n	8013528 <__tzcalc_limits+0xd0>
 8013526:	2300      	movs	r3, #0
 8013528:	2001      	movs	r0, #1
 801352a:	6033      	str	r3, [r6, #0]
 801352c:	b009      	add	sp, #36	; 0x24
 801352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013530:	2b44      	cmp	r3, #68	; 0x44
 8013532:	d102      	bne.n	801353a <__tzcalc_limits+0xe2>
 8013534:	9b01      	ldr	r3, [sp, #4]
 8013536:	19dc      	adds	r4, r3, r7
 8013538:	e7de      	b.n	80134f8 <__tzcalc_limits+0xa0>
 801353a:	9a06      	ldr	r2, [sp, #24]
 801353c:	9b05      	ldr	r3, [sp, #20]
 801353e:	2a00      	cmp	r2, #0
 8013540:	d103      	bne.n	801354a <__tzcalc_limits+0xf2>
 8013542:	9a02      	ldr	r2, [sp, #8]
 8013544:	2a00      	cmp	r2, #0
 8013546:	d000      	beq.n	801354a <__tzcalc_limits+0xf2>
 8013548:	2301      	movs	r3, #1
 801354a:	2230      	movs	r2, #48	; 0x30
 801354c:	4353      	muls	r3, r2
 801354e:	2200      	movs	r2, #0
 8013550:	4816      	ldr	r0, [pc, #88]	; (80135ac <__tzcalc_limits+0x154>)
 8013552:	3b04      	subs	r3, #4
 8013554:	6869      	ldr	r1, [r5, #4]
 8013556:	9c01      	ldr	r4, [sp, #4]
 8013558:	181b      	adds	r3, r3, r0
 801355a:	3201      	adds	r2, #1
 801355c:	0090      	lsls	r0, r2, #2
 801355e:	5818      	ldr	r0, [r3, r0]
 8013560:	9004      	str	r0, [sp, #16]
 8013562:	4291      	cmp	r1, r2
 8013564:	dc10      	bgt.n	8013588 <__tzcalc_limits+0x130>
 8013566:	2107      	movs	r1, #7
 8013568:	1d20      	adds	r0, r4, #4
 801356a:	f7ec ff59 	bl	8000420 <__aeabi_idivmod>
 801356e:	1a79      	subs	r1, r7, r1
 8013570:	d500      	bpl.n	8013574 <__tzcalc_limits+0x11c>
 8013572:	3107      	adds	r1, #7
 8013574:	68ab      	ldr	r3, [r5, #8]
 8013576:	1e5a      	subs	r2, r3, #1
 8013578:	2307      	movs	r3, #7
 801357a:	4353      	muls	r3, r2
 801357c:	1859      	adds	r1, r3, r1
 801357e:	9b04      	ldr	r3, [sp, #16]
 8013580:	4299      	cmp	r1, r3
 8013582:	da04      	bge.n	801358e <__tzcalc_limits+0x136>
 8013584:	1864      	adds	r4, r4, r1
 8013586:	e7b7      	b.n	80134f8 <__tzcalc_limits+0xa0>
 8013588:	9804      	ldr	r0, [sp, #16]
 801358a:	1824      	adds	r4, r4, r0
 801358c:	e7e5      	b.n	801355a <__tzcalc_limits+0x102>
 801358e:	3907      	subs	r1, #7
 8013590:	e7f5      	b.n	801357e <__tzcalc_limits+0x126>
 8013592:	46c0      	nop			; (mov r8, r8)
 8013594:	000007b1 	.word	0x000007b1
 8013598:	fffff84e 	.word	0xfffff84e
 801359c:	fffff84f 	.word	0xfffff84f
 80135a0:	fffff893 	.word	0xfffff893
 80135a4:	fffff9bf 	.word	0xfffff9bf
 80135a8:	00015180 	.word	0x00015180
 80135ac:	080166f0 	.word	0x080166f0

080135b0 <__tz_lock>:
 80135b0:	b510      	push	{r4, lr}
 80135b2:	4802      	ldr	r0, [pc, #8]	; (80135bc <__tz_lock+0xc>)
 80135b4:	f000 f9f6 	bl	80139a4 <__retarget_lock_acquire>
 80135b8:	bd10      	pop	{r4, pc}
 80135ba:	46c0      	nop			; (mov r8, r8)
 80135bc:	20002bdf 	.word	0x20002bdf

080135c0 <__tz_unlock>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	4802      	ldr	r0, [pc, #8]	; (80135cc <__tz_unlock+0xc>)
 80135c4:	f000 f9f0 	bl	80139a8 <__retarget_lock_release>
 80135c8:	bd10      	pop	{r4, pc}
 80135ca:	46c0      	nop			; (mov r8, r8)
 80135cc:	20002bdf 	.word	0x20002bdf

080135d0 <_tzset_unlocked>:
 80135d0:	b510      	push	{r4, lr}
 80135d2:	4b02      	ldr	r3, [pc, #8]	; (80135dc <_tzset_unlocked+0xc>)
 80135d4:	6818      	ldr	r0, [r3, #0]
 80135d6:	f000 f803 	bl	80135e0 <_tzset_unlocked_r>
 80135da:	bd10      	pop	{r4, pc}
 80135dc:	200001f4 	.word	0x200001f4

080135e0 <_tzset_unlocked_r>:
 80135e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135e2:	b08d      	sub	sp, #52	; 0x34
 80135e4:	0006      	movs	r6, r0
 80135e6:	f000 f9d9 	bl	801399c <__gettzinfo>
 80135ea:	49b2      	ldr	r1, [pc, #712]	; (80138b4 <_tzset_unlocked_r+0x2d4>)
 80135ec:	0007      	movs	r7, r0
 80135ee:	0030      	movs	r0, r6
 80135f0:	f000 f9ce 	bl	8013990 <_getenv_r>
 80135f4:	4cb0      	ldr	r4, [pc, #704]	; (80138b8 <_tzset_unlocked_r+0x2d8>)
 80135f6:	1e05      	subs	r5, r0, #0
 80135f8:	d10d      	bne.n	8013616 <_tzset_unlocked_r+0x36>
 80135fa:	4bb0      	ldr	r3, [pc, #704]	; (80138bc <_tzset_unlocked_r+0x2dc>)
 80135fc:	4ab0      	ldr	r2, [pc, #704]	; (80138c0 <_tzset_unlocked_r+0x2e0>)
 80135fe:	6018      	str	r0, [r3, #0]
 8013600:	4bb0      	ldr	r3, [pc, #704]	; (80138c4 <_tzset_unlocked_r+0x2e4>)
 8013602:	6018      	str	r0, [r3, #0]
 8013604:	4bb0      	ldr	r3, [pc, #704]	; (80138c8 <_tzset_unlocked_r+0x2e8>)
 8013606:	6820      	ldr	r0, [r4, #0]
 8013608:	601a      	str	r2, [r3, #0]
 801360a:	605a      	str	r2, [r3, #4]
 801360c:	f000 f9ce 	bl	80139ac <free>
 8013610:	6025      	str	r5, [r4, #0]
 8013612:	b00d      	add	sp, #52	; 0x34
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	6821      	ldr	r1, [r4, #0]
 8013618:	2900      	cmp	r1, #0
 801361a:	d159      	bne.n	80136d0 <_tzset_unlocked_r+0xf0>
 801361c:	6820      	ldr	r0, [r4, #0]
 801361e:	f000 f9c5 	bl	80139ac <free>
 8013622:	0028      	movs	r0, r5
 8013624:	f7ec fd70 	bl	8000108 <strlen>
 8013628:	1c41      	adds	r1, r0, #1
 801362a:	0030      	movs	r0, r6
 801362c:	f000 fa12 	bl	8013a54 <_malloc_r>
 8013630:	6020      	str	r0, [r4, #0]
 8013632:	2800      	cmp	r0, #0
 8013634:	d151      	bne.n	80136da <_tzset_unlocked_r+0xfa>
 8013636:	782b      	ldrb	r3, [r5, #0]
 8013638:	49a4      	ldr	r1, [pc, #656]	; (80138cc <_tzset_unlocked_r+0x2ec>)
 801363a:	3b3a      	subs	r3, #58	; 0x3a
 801363c:	425a      	negs	r2, r3
 801363e:	4153      	adcs	r3, r2
 8013640:	18ed      	adds	r5, r5, r3
 8013642:	0028      	movs	r0, r5
 8013644:	4aa2      	ldr	r2, [pc, #648]	; (80138d0 <_tzset_unlocked_r+0x2f0>)
 8013646:	ab0a      	add	r3, sp, #40	; 0x28
 8013648:	f000 fd58 	bl	80140fc <siscanf>
 801364c:	2800      	cmp	r0, #0
 801364e:	dde0      	ble.n	8013612 <_tzset_unlocked_r+0x32>
 8013650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013652:	18ec      	adds	r4, r5, r3
 8013654:	5ceb      	ldrb	r3, [r5, r3]
 8013656:	2b2d      	cmp	r3, #45	; 0x2d
 8013658:	d143      	bne.n	80136e2 <_tzset_unlocked_r+0x102>
 801365a:	3b2e      	subs	r3, #46	; 0x2e
 801365c:	3401      	adds	r4, #1
 801365e:	9304      	str	r3, [sp, #16]
 8013660:	2616      	movs	r6, #22
 8013662:	ab02      	add	r3, sp, #8
 8013664:	18f6      	adds	r6, r6, r3
 8013666:	2300      	movs	r3, #0
 8013668:	ad08      	add	r5, sp, #32
 801366a:	8033      	strh	r3, [r6, #0]
 801366c:	802b      	strh	r3, [r5, #0]
 801366e:	ab0a      	add	r3, sp, #40	; 0x28
 8013670:	0020      	movs	r0, r4
 8013672:	4998      	ldr	r1, [pc, #608]	; (80138d4 <_tzset_unlocked_r+0x2f4>)
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	9502      	str	r5, [sp, #8]
 8013678:	9301      	str	r3, [sp, #4]
 801367a:	9600      	str	r6, [sp, #0]
 801367c:	aa07      	add	r2, sp, #28
 801367e:	f000 fd3d 	bl	80140fc <siscanf>
 8013682:	2800      	cmp	r0, #0
 8013684:	ddc5      	ble.n	8013612 <_tzset_unlocked_r+0x32>
 8013686:	233c      	movs	r3, #60	; 0x3c
 8013688:	8832      	ldrh	r2, [r6, #0]
 801368a:	4e93      	ldr	r6, [pc, #588]	; (80138d8 <_tzset_unlocked_r+0x2f8>)
 801368c:	4353      	muls	r3, r2
 801368e:	882a      	ldrh	r2, [r5, #0]
 8013690:	4d8d      	ldr	r5, [pc, #564]	; (80138c8 <_tzset_unlocked_r+0x2e8>)
 8013692:	189b      	adds	r3, r3, r2
 8013694:	aa02      	add	r2, sp, #8
 8013696:	8a91      	ldrh	r1, [r2, #20]
 8013698:	22e1      	movs	r2, #225	; 0xe1
 801369a:	0112      	lsls	r2, r2, #4
 801369c:	434a      	muls	r2, r1
 801369e:	189b      	adds	r3, r3, r2
 80136a0:	9a04      	ldr	r2, [sp, #16]
 80136a2:	498a      	ldr	r1, [pc, #552]	; (80138cc <_tzset_unlocked_r+0x2ec>)
 80136a4:	435a      	muls	r2, r3
 80136a6:	4b8a      	ldr	r3, [pc, #552]	; (80138d0 <_tzset_unlocked_r+0x2f0>)
 80136a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80136aa:	602b      	str	r3, [r5, #0]
 80136ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136ae:	0032      	movs	r2, r6
 80136b0:	18e4      	adds	r4, r4, r3
 80136b2:	0020      	movs	r0, r4
 80136b4:	ab0a      	add	r3, sp, #40	; 0x28
 80136b6:	f000 fd21 	bl	80140fc <siscanf>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	dc18      	bgt.n	80136f0 <_tzset_unlocked_r+0x110>
 80136be:	682b      	ldr	r3, [r5, #0]
 80136c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136c2:	606b      	str	r3, [r5, #4]
 80136c4:	4b7d      	ldr	r3, [pc, #500]	; (80138bc <_tzset_unlocked_r+0x2dc>)
 80136c6:	601a      	str	r2, [r3, #0]
 80136c8:	2200      	movs	r2, #0
 80136ca:	4b7e      	ldr	r3, [pc, #504]	; (80138c4 <_tzset_unlocked_r+0x2e4>)
 80136cc:	601a      	str	r2, [r3, #0]
 80136ce:	e7a0      	b.n	8013612 <_tzset_unlocked_r+0x32>
 80136d0:	f7ec fd21 	bl	8000116 <strcmp>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d1a1      	bne.n	801361c <_tzset_unlocked_r+0x3c>
 80136d8:	e79b      	b.n	8013612 <_tzset_unlocked_r+0x32>
 80136da:	0029      	movs	r1, r5
 80136dc:	f000 fd38 	bl	8014150 <strcpy>
 80136e0:	e7a9      	b.n	8013636 <_tzset_unlocked_r+0x56>
 80136e2:	2201      	movs	r2, #1
 80136e4:	3b2b      	subs	r3, #43	; 0x2b
 80136e6:	9204      	str	r2, [sp, #16]
 80136e8:	425a      	negs	r2, r3
 80136ea:	4153      	adcs	r3, r2
 80136ec:	18e4      	adds	r4, r4, r3
 80136ee:	e7b7      	b.n	8013660 <_tzset_unlocked_r+0x80>
 80136f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136f2:	606e      	str	r6, [r5, #4]
 80136f4:	18e5      	adds	r5, r4, r3
 80136f6:	5ce3      	ldrb	r3, [r4, r3]
 80136f8:	2b2d      	cmp	r3, #45	; 0x2d
 80136fa:	d000      	beq.n	80136fe <_tzset_unlocked_r+0x11e>
 80136fc:	e094      	b.n	8013828 <_tzset_unlocked_r+0x248>
 80136fe:	3b2e      	subs	r3, #46	; 0x2e
 8013700:	3501      	adds	r5, #1
 8013702:	9304      	str	r3, [sp, #16]
 8013704:	2416      	movs	r4, #22
 8013706:	2300      	movs	r3, #0
 8013708:	aa02      	add	r2, sp, #8
 801370a:	18a4      	adds	r4, r4, r2
 801370c:	ae08      	add	r6, sp, #32
 801370e:	8293      	strh	r3, [r2, #20]
 8013710:	8023      	strh	r3, [r4, #0]
 8013712:	8033      	strh	r3, [r6, #0]
 8013714:	930a      	str	r3, [sp, #40]	; 0x28
 8013716:	ab0a      	add	r3, sp, #40	; 0x28
 8013718:	0028      	movs	r0, r5
 801371a:	496e      	ldr	r1, [pc, #440]	; (80138d4 <_tzset_unlocked_r+0x2f4>)
 801371c:	9303      	str	r3, [sp, #12]
 801371e:	9602      	str	r6, [sp, #8]
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	9400      	str	r4, [sp, #0]
 8013724:	aa07      	add	r2, sp, #28
 8013726:	f000 fce9 	bl	80140fc <siscanf>
 801372a:	2800      	cmp	r0, #0
 801372c:	dd00      	ble.n	8013730 <_tzset_unlocked_r+0x150>
 801372e:	e082      	b.n	8013836 <_tzset_unlocked_r+0x256>
 8013730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013732:	4a6a      	ldr	r2, [pc, #424]	; (80138dc <_tzset_unlocked_r+0x2fc>)
 8013734:	189c      	adds	r4, r3, r2
 8013736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013738:	653c      	str	r4, [r7, #80]	; 0x50
 801373a:	003c      	movs	r4, r7
 801373c:	18ed      	adds	r5, r5, r3
 801373e:	2300      	movs	r3, #0
 8013740:	3408      	adds	r4, #8
 8013742:	9305      	str	r3, [sp, #20]
 8013744:	782b      	ldrb	r3, [r5, #0]
 8013746:	3b2c      	subs	r3, #44	; 0x2c
 8013748:	425a      	negs	r2, r3
 801374a:	4153      	adcs	r3, r2
 801374c:	18ed      	adds	r5, r5, r3
 801374e:	782b      	ldrb	r3, [r5, #0]
 8013750:	9304      	str	r3, [sp, #16]
 8013752:	2b4d      	cmp	r3, #77	; 0x4d
 8013754:	d000      	beq.n	8013758 <_tzset_unlocked_r+0x178>
 8013756:	e07e      	b.n	8013856 <_tzset_unlocked_r+0x276>
 8013758:	261a      	movs	r6, #26
 801375a:	ab02      	add	r3, sp, #8
 801375c:	18f6      	adds	r6, r6, r3
 801375e:	ab0a      	add	r3, sp, #40	; 0x28
 8013760:	9303      	str	r3, [sp, #12]
 8013762:	231e      	movs	r3, #30
 8013764:	aa02      	add	r2, sp, #8
 8013766:	189b      	adds	r3, r3, r2
 8013768:	9302      	str	r3, [sp, #8]
 801376a:	ab0a      	add	r3, sp, #40	; 0x28
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	ab09      	add	r3, sp, #36	; 0x24
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	0032      	movs	r2, r6
 8013774:	0028      	movs	r0, r5
 8013776:	495a      	ldr	r1, [pc, #360]	; (80138e0 <_tzset_unlocked_r+0x300>)
 8013778:	ab0a      	add	r3, sp, #40	; 0x28
 801377a:	f000 fcbf 	bl	80140fc <siscanf>
 801377e:	2803      	cmp	r0, #3
 8013780:	d000      	beq.n	8013784 <_tzset_unlocked_r+0x1a4>
 8013782:	e746      	b.n	8013612 <_tzset_unlocked_r+0x32>
 8013784:	8831      	ldrh	r1, [r6, #0]
 8013786:	1e4b      	subs	r3, r1, #1
 8013788:	2b0b      	cmp	r3, #11
 801378a:	d900      	bls.n	801378e <_tzset_unlocked_r+0x1ae>
 801378c:	e741      	b.n	8013612 <_tzset_unlocked_r+0x32>
 801378e:	ab02      	add	r3, sp, #8
 8013790:	8b9a      	ldrh	r2, [r3, #28]
 8013792:	1e53      	subs	r3, r2, #1
 8013794:	2b04      	cmp	r3, #4
 8013796:	d900      	bls.n	801379a <_tzset_unlocked_r+0x1ba>
 8013798:	e73b      	b.n	8013612 <_tzset_unlocked_r+0x32>
 801379a:	ab02      	add	r3, sp, #8
 801379c:	8bdb      	ldrh	r3, [r3, #30]
 801379e:	2b06      	cmp	r3, #6
 80137a0:	d900      	bls.n	80137a4 <_tzset_unlocked_r+0x1c4>
 80137a2:	e736      	b.n	8013612 <_tzset_unlocked_r+0x32>
 80137a4:	9804      	ldr	r0, [sp, #16]
 80137a6:	6061      	str	r1, [r4, #4]
 80137a8:	7020      	strb	r0, [r4, #0]
 80137aa:	60a2      	str	r2, [r4, #8]
 80137ac:	60e3      	str	r3, [r4, #12]
 80137ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b0:	18eb      	adds	r3, r5, r3
 80137b2:	9304      	str	r3, [sp, #16]
 80137b4:	2302      	movs	r3, #2
 80137b6:	2616      	movs	r6, #22
 80137b8:	aa07      	add	r2, sp, #28
 80137ba:	8013      	strh	r3, [r2, #0]
 80137bc:	ab02      	add	r3, sp, #8
 80137be:	18f6      	adds	r6, r6, r3
 80137c0:	2300      	movs	r3, #0
 80137c2:	ad08      	add	r5, sp, #32
 80137c4:	8033      	strh	r3, [r6, #0]
 80137c6:	802b      	strh	r3, [r5, #0]
 80137c8:	930a      	str	r3, [sp, #40]	; 0x28
 80137ca:	9b04      	ldr	r3, [sp, #16]
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	2b2f      	cmp	r3, #47	; 0x2f
 80137d0:	d108      	bne.n	80137e4 <_tzset_unlocked_r+0x204>
 80137d2:	ab0a      	add	r3, sp, #40	; 0x28
 80137d4:	4943      	ldr	r1, [pc, #268]	; (80138e4 <_tzset_unlocked_r+0x304>)
 80137d6:	9804      	ldr	r0, [sp, #16]
 80137d8:	9303      	str	r3, [sp, #12]
 80137da:	9502      	str	r5, [sp, #8]
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	9600      	str	r6, [sp, #0]
 80137e0:	f000 fc8c 	bl	80140fc <siscanf>
 80137e4:	233c      	movs	r3, #60	; 0x3c
 80137e6:	8832      	ldrh	r2, [r6, #0]
 80137e8:	4353      	muls	r3, r2
 80137ea:	882a      	ldrh	r2, [r5, #0]
 80137ec:	189b      	adds	r3, r3, r2
 80137ee:	aa07      	add	r2, sp, #28
 80137f0:	8811      	ldrh	r1, [r2, #0]
 80137f2:	22e1      	movs	r2, #225	; 0xe1
 80137f4:	0112      	lsls	r2, r2, #4
 80137f6:	434a      	muls	r2, r1
 80137f8:	189b      	adds	r3, r3, r2
 80137fa:	6123      	str	r3, [r4, #16]
 80137fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137fe:	9b04      	ldr	r3, [sp, #16]
 8013800:	4694      	mov	ip, r2
 8013802:	4463      	add	r3, ip
 8013804:	001d      	movs	r5, r3
 8013806:	9b05      	ldr	r3, [sp, #20]
 8013808:	3428      	adds	r4, #40	; 0x28
 801380a:	2b01      	cmp	r3, #1
 801380c:	d121      	bne.n	8013852 <_tzset_unlocked_r+0x272>
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff fe22 	bl	8013458 <__tzcalc_limits>
 8013814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013816:	4b29      	ldr	r3, [pc, #164]	; (80138bc <_tzset_unlocked_r+0x2dc>)
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801381c:	1a9b      	subs	r3, r3, r2
 801381e:	1e5a      	subs	r2, r3, #1
 8013820:	4193      	sbcs	r3, r2
 8013822:	4a28      	ldr	r2, [pc, #160]	; (80138c4 <_tzset_unlocked_r+0x2e4>)
 8013824:	6013      	str	r3, [r2, #0]
 8013826:	e6f4      	b.n	8013612 <_tzset_unlocked_r+0x32>
 8013828:	2201      	movs	r2, #1
 801382a:	3b2b      	subs	r3, #43	; 0x2b
 801382c:	9204      	str	r2, [sp, #16]
 801382e:	425a      	negs	r2, r3
 8013830:	4153      	adcs	r3, r2
 8013832:	18ed      	adds	r5, r5, r3
 8013834:	e766      	b.n	8013704 <_tzset_unlocked_r+0x124>
 8013836:	233c      	movs	r3, #60	; 0x3c
 8013838:	8822      	ldrh	r2, [r4, #0]
 801383a:	9c04      	ldr	r4, [sp, #16]
 801383c:	4353      	muls	r3, r2
 801383e:	8832      	ldrh	r2, [r6, #0]
 8013840:	189b      	adds	r3, r3, r2
 8013842:	aa02      	add	r2, sp, #8
 8013844:	8a91      	ldrh	r1, [r2, #20]
 8013846:	22e1      	movs	r2, #225	; 0xe1
 8013848:	0112      	lsls	r2, r2, #4
 801384a:	434a      	muls	r2, r1
 801384c:	189b      	adds	r3, r3, r2
 801384e:	435c      	muls	r4, r3
 8013850:	e771      	b.n	8013736 <_tzset_unlocked_r+0x156>
 8013852:	2301      	movs	r3, #1
 8013854:	e775      	b.n	8013742 <_tzset_unlocked_r+0x162>
 8013856:	9b04      	ldr	r3, [sp, #16]
 8013858:	2644      	movs	r6, #68	; 0x44
 801385a:	2b4a      	cmp	r3, #74	; 0x4a
 801385c:	d101      	bne.n	8013862 <_tzset_unlocked_r+0x282>
 801385e:	001e      	movs	r6, r3
 8013860:	3501      	adds	r5, #1
 8013862:	220a      	movs	r2, #10
 8013864:	0028      	movs	r0, r5
 8013866:	a90b      	add	r1, sp, #44	; 0x2c
 8013868:	f000 fd1c 	bl	80142a4 <strtoul>
 801386c:	231e      	movs	r3, #30
 801386e:	aa02      	add	r2, sp, #8
 8013870:	189b      	adds	r3, r3, r2
 8013872:	8018      	strh	r0, [r3, #0]
 8013874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	42ab      	cmp	r3, r5
 801387a:	d116      	bne.n	80138aa <_tzset_unlocked_r+0x2ca>
 801387c:	9b05      	ldr	r3, [sp, #20]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d108      	bne.n	8013894 <_tzset_unlocked_r+0x2b4>
 8013882:	334d      	adds	r3, #77	; 0x4d
 8013884:	723b      	strb	r3, [r7, #8]
 8013886:	3b4a      	subs	r3, #74	; 0x4a
 8013888:	60fb      	str	r3, [r7, #12]
 801388a:	3b01      	subs	r3, #1
 801388c:	613b      	str	r3, [r7, #16]
 801388e:	9b05      	ldr	r3, [sp, #20]
 8013890:	617b      	str	r3, [r7, #20]
 8013892:	e78f      	b.n	80137b4 <_tzset_unlocked_r+0x1d4>
 8013894:	003b      	movs	r3, r7
 8013896:	224d      	movs	r2, #77	; 0x4d
 8013898:	3330      	adds	r3, #48	; 0x30
 801389a:	701a      	strb	r2, [r3, #0]
 801389c:	230b      	movs	r3, #11
 801389e:	637b      	str	r3, [r7, #52]	; 0x34
 80138a0:	3b0a      	subs	r3, #10
 80138a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80138a4:	2300      	movs	r3, #0
 80138a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138a8:	e784      	b.n	80137b4 <_tzset_unlocked_r+0x1d4>
 80138aa:	b280      	uxth	r0, r0
 80138ac:	7026      	strb	r6, [r4, #0]
 80138ae:	60e0      	str	r0, [r4, #12]
 80138b0:	e780      	b.n	80137b4 <_tzset_unlocked_r+0x1d4>
 80138b2:	46c0      	nop			; (mov r8, r8)
 80138b4:	080165b0 	.word	0x080165b0
 80138b8:	200019b0 	.word	0x200019b0
 80138bc:	200019b8 	.word	0x200019b8
 80138c0:	080165b3 	.word	0x080165b3
 80138c4:	200019b4 	.word	0x200019b4
 80138c8:	20000258 	.word	0x20000258
 80138cc:	080165b7 	.word	0x080165b7
 80138d0:	200019a3 	.word	0x200019a3
 80138d4:	080165da 	.word	0x080165da
 80138d8:	20001998 	.word	0x20001998
 80138dc:	fffff1f0 	.word	0xfffff1f0
 80138e0:	080165c6 	.word	0x080165c6
 80138e4:	080165d9 	.word	0x080165d9

080138e8 <div>:
 80138e8:	b570      	push	{r4, r5, r6, lr}
 80138ea:	000e      	movs	r6, r1
 80138ec:	0004      	movs	r4, r0
 80138ee:	0011      	movs	r1, r2
 80138f0:	0030      	movs	r0, r6
 80138f2:	0015      	movs	r5, r2
 80138f4:	f7ec fd94 	bl	8000420 <__aeabi_idivmod>
 80138f8:	2e00      	cmp	r6, #0
 80138fa:	db07      	blt.n	801390c <div+0x24>
 80138fc:	2900      	cmp	r1, #0
 80138fe:	da01      	bge.n	8013904 <div+0x1c>
 8013900:	3001      	adds	r0, #1
 8013902:	1b49      	subs	r1, r1, r5
 8013904:	6020      	str	r0, [r4, #0]
 8013906:	0020      	movs	r0, r4
 8013908:	6061      	str	r1, [r4, #4]
 801390a:	bd70      	pop	{r4, r5, r6, pc}
 801390c:	2900      	cmp	r1, #0
 801390e:	ddf9      	ble.n	8013904 <div+0x1c>
 8013910:	3801      	subs	r0, #1
 8013912:	1949      	adds	r1, r1, r5
 8013914:	e7f6      	b.n	8013904 <div+0x1c>
	...

08013918 <_findenv_r>:
 8013918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391a:	000d      	movs	r5, r1
 801391c:	b085      	sub	sp, #20
 801391e:	0006      	movs	r6, r0
 8013920:	9203      	str	r2, [sp, #12]
 8013922:	f000 fccb 	bl	80142bc <__env_lock>
 8013926:	4f19      	ldr	r7, [pc, #100]	; (801398c <_findenv_r+0x74>)
 8013928:	002b      	movs	r3, r5
 801392a:	683c      	ldr	r4, [r7, #0]
 801392c:	2c00      	cmp	r4, #0
 801392e:	d106      	bne.n	801393e <_findenv_r+0x26>
 8013930:	0030      	movs	r0, r6
 8013932:	f000 fccb 	bl	80142cc <__env_unlock>
 8013936:	2000      	movs	r0, #0
 8013938:	b005      	add	sp, #20
 801393a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801393c:	3301      	adds	r3, #1
 801393e:	781a      	ldrb	r2, [r3, #0]
 8013940:	2a00      	cmp	r2, #0
 8013942:	d01f      	beq.n	8013984 <_findenv_r+0x6c>
 8013944:	2a3d      	cmp	r2, #61	; 0x3d
 8013946:	d1f9      	bne.n	801393c <_findenv_r+0x24>
 8013948:	e7f2      	b.n	8013930 <_findenv_r+0x18>
 801394a:	3404      	adds	r4, #4
 801394c:	6820      	ldr	r0, [r4, #0]
 801394e:	2800      	cmp	r0, #0
 8013950:	d0ee      	beq.n	8013930 <_findenv_r+0x18>
 8013952:	0029      	movs	r1, r5
 8013954:	9a01      	ldr	r2, [sp, #4]
 8013956:	f000 fc03 	bl	8014160 <strncmp>
 801395a:	2800      	cmp	r0, #0
 801395c:	d1f5      	bne.n	801394a <_findenv_r+0x32>
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	9a01      	ldr	r2, [sp, #4]
 8013962:	189a      	adds	r2, r3, r2
 8013964:	9202      	str	r2, [sp, #8]
 8013966:	9a01      	ldr	r2, [sp, #4]
 8013968:	5c9b      	ldrb	r3, [r3, r2]
 801396a:	2b3d      	cmp	r3, #61	; 0x3d
 801396c:	d1ed      	bne.n	801394a <_findenv_r+0x32>
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	0030      	movs	r0, r6
 8013972:	1ae4      	subs	r4, r4, r3
 8013974:	9b03      	ldr	r3, [sp, #12]
 8013976:	10a4      	asrs	r4, r4, #2
 8013978:	601c      	str	r4, [r3, #0]
 801397a:	f000 fca7 	bl	80142cc <__env_unlock>
 801397e:	9802      	ldr	r0, [sp, #8]
 8013980:	3001      	adds	r0, #1
 8013982:	e7d9      	b.n	8013938 <_findenv_r+0x20>
 8013984:	1b5b      	subs	r3, r3, r5
 8013986:	9301      	str	r3, [sp, #4]
 8013988:	e7e0      	b.n	801394c <_findenv_r+0x34>
 801398a:	46c0      	nop			; (mov r8, r8)
 801398c:	20000074 	.word	0x20000074

08013990 <_getenv_r>:
 8013990:	b507      	push	{r0, r1, r2, lr}
 8013992:	aa01      	add	r2, sp, #4
 8013994:	f7ff ffc0 	bl	8013918 <_findenv_r>
 8013998:	bd0e      	pop	{r1, r2, r3, pc}
	...

0801399c <__gettzinfo>:
 801399c:	4800      	ldr	r0, [pc, #0]	; (80139a0 <__gettzinfo+0x4>)
 801399e:	4770      	bx	lr
 80139a0:	20000260 	.word	0x20000260

080139a4 <__retarget_lock_acquire>:
 80139a4:	4770      	bx	lr

080139a6 <__retarget_lock_acquire_recursive>:
 80139a6:	4770      	bx	lr

080139a8 <__retarget_lock_release>:
 80139a8:	4770      	bx	lr

080139aa <__retarget_lock_release_recursive>:
 80139aa:	4770      	bx	lr

080139ac <free>:
 80139ac:	b510      	push	{r4, lr}
 80139ae:	4b03      	ldr	r3, [pc, #12]	; (80139bc <free+0x10>)
 80139b0:	0001      	movs	r1, r0
 80139b2:	6818      	ldr	r0, [r3, #0]
 80139b4:	f000 f804 	bl	80139c0 <_free_r>
 80139b8:	bd10      	pop	{r4, pc}
 80139ba:	46c0      	nop			; (mov r8, r8)
 80139bc:	200001f4 	.word	0x200001f4

080139c0 <_free_r>:
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	0005      	movs	r5, r0
 80139c4:	2900      	cmp	r1, #0
 80139c6:	d010      	beq.n	80139ea <_free_r+0x2a>
 80139c8:	1f0c      	subs	r4, r1, #4
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	da00      	bge.n	80139d2 <_free_r+0x12>
 80139d0:	18e4      	adds	r4, r4, r3
 80139d2:	0028      	movs	r0, r5
 80139d4:	f000 fcaa 	bl	801432c <__malloc_lock>
 80139d8:	4a1d      	ldr	r2, [pc, #116]	; (8013a50 <_free_r+0x90>)
 80139da:	6813      	ldr	r3, [r2, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d105      	bne.n	80139ec <_free_r+0x2c>
 80139e0:	6063      	str	r3, [r4, #4]
 80139e2:	6014      	str	r4, [r2, #0]
 80139e4:	0028      	movs	r0, r5
 80139e6:	f000 fca9 	bl	801433c <__malloc_unlock>
 80139ea:	bd70      	pop	{r4, r5, r6, pc}
 80139ec:	42a3      	cmp	r3, r4
 80139ee:	d908      	bls.n	8013a02 <_free_r+0x42>
 80139f0:	6821      	ldr	r1, [r4, #0]
 80139f2:	1860      	adds	r0, r4, r1
 80139f4:	4283      	cmp	r3, r0
 80139f6:	d1f3      	bne.n	80139e0 <_free_r+0x20>
 80139f8:	6818      	ldr	r0, [r3, #0]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	1841      	adds	r1, r0, r1
 80139fe:	6021      	str	r1, [r4, #0]
 8013a00:	e7ee      	b.n	80139e0 <_free_r+0x20>
 8013a02:	001a      	movs	r2, r3
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d001      	beq.n	8013a0e <_free_r+0x4e>
 8013a0a:	42a3      	cmp	r3, r4
 8013a0c:	d9f9      	bls.n	8013a02 <_free_r+0x42>
 8013a0e:	6811      	ldr	r1, [r2, #0]
 8013a10:	1850      	adds	r0, r2, r1
 8013a12:	42a0      	cmp	r0, r4
 8013a14:	d10b      	bne.n	8013a2e <_free_r+0x6e>
 8013a16:	6820      	ldr	r0, [r4, #0]
 8013a18:	1809      	adds	r1, r1, r0
 8013a1a:	1850      	adds	r0, r2, r1
 8013a1c:	6011      	str	r1, [r2, #0]
 8013a1e:	4283      	cmp	r3, r0
 8013a20:	d1e0      	bne.n	80139e4 <_free_r+0x24>
 8013a22:	6818      	ldr	r0, [r3, #0]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	1841      	adds	r1, r0, r1
 8013a28:	6011      	str	r1, [r2, #0]
 8013a2a:	6053      	str	r3, [r2, #4]
 8013a2c:	e7da      	b.n	80139e4 <_free_r+0x24>
 8013a2e:	42a0      	cmp	r0, r4
 8013a30:	d902      	bls.n	8013a38 <_free_r+0x78>
 8013a32:	230c      	movs	r3, #12
 8013a34:	602b      	str	r3, [r5, #0]
 8013a36:	e7d5      	b.n	80139e4 <_free_r+0x24>
 8013a38:	6821      	ldr	r1, [r4, #0]
 8013a3a:	1860      	adds	r0, r4, r1
 8013a3c:	4283      	cmp	r3, r0
 8013a3e:	d103      	bne.n	8013a48 <_free_r+0x88>
 8013a40:	6818      	ldr	r0, [r3, #0]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	1841      	adds	r1, r0, r1
 8013a46:	6021      	str	r1, [r4, #0]
 8013a48:	6063      	str	r3, [r4, #4]
 8013a4a:	6054      	str	r4, [r2, #4]
 8013a4c:	e7ca      	b.n	80139e4 <_free_r+0x24>
 8013a4e:	46c0      	nop			; (mov r8, r8)
 8013a50:	200019bc 	.word	0x200019bc

08013a54 <_malloc_r>:
 8013a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a56:	2303      	movs	r3, #3
 8013a58:	1ccd      	adds	r5, r1, #3
 8013a5a:	439d      	bics	r5, r3
 8013a5c:	3508      	adds	r5, #8
 8013a5e:	0006      	movs	r6, r0
 8013a60:	2d0c      	cmp	r5, #12
 8013a62:	d21f      	bcs.n	8013aa4 <_malloc_r+0x50>
 8013a64:	250c      	movs	r5, #12
 8013a66:	42a9      	cmp	r1, r5
 8013a68:	d81e      	bhi.n	8013aa8 <_malloc_r+0x54>
 8013a6a:	0030      	movs	r0, r6
 8013a6c:	f000 fc5e 	bl	801432c <__malloc_lock>
 8013a70:	4925      	ldr	r1, [pc, #148]	; (8013b08 <_malloc_r+0xb4>)
 8013a72:	680a      	ldr	r2, [r1, #0]
 8013a74:	0014      	movs	r4, r2
 8013a76:	2c00      	cmp	r4, #0
 8013a78:	d11a      	bne.n	8013ab0 <_malloc_r+0x5c>
 8013a7a:	4f24      	ldr	r7, [pc, #144]	; (8013b0c <_malloc_r+0xb8>)
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d104      	bne.n	8013a8c <_malloc_r+0x38>
 8013a82:	0021      	movs	r1, r4
 8013a84:	0030      	movs	r0, r6
 8013a86:	f000 fb27 	bl	80140d8 <_sbrk_r>
 8013a8a:	6038      	str	r0, [r7, #0]
 8013a8c:	0029      	movs	r1, r5
 8013a8e:	0030      	movs	r0, r6
 8013a90:	f000 fb22 	bl	80140d8 <_sbrk_r>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d12b      	bne.n	8013af0 <_malloc_r+0x9c>
 8013a98:	230c      	movs	r3, #12
 8013a9a:	0030      	movs	r0, r6
 8013a9c:	6033      	str	r3, [r6, #0]
 8013a9e:	f000 fc4d 	bl	801433c <__malloc_unlock>
 8013aa2:	e003      	b.n	8013aac <_malloc_r+0x58>
 8013aa4:	2d00      	cmp	r5, #0
 8013aa6:	dade      	bge.n	8013a66 <_malloc_r+0x12>
 8013aa8:	230c      	movs	r3, #12
 8013aaa:	6033      	str	r3, [r6, #0]
 8013aac:	2000      	movs	r0, #0
 8013aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ab0:	6823      	ldr	r3, [r4, #0]
 8013ab2:	1b5b      	subs	r3, r3, r5
 8013ab4:	d419      	bmi.n	8013aea <_malloc_r+0x96>
 8013ab6:	2b0b      	cmp	r3, #11
 8013ab8:	d903      	bls.n	8013ac2 <_malloc_r+0x6e>
 8013aba:	6023      	str	r3, [r4, #0]
 8013abc:	18e4      	adds	r4, r4, r3
 8013abe:	6025      	str	r5, [r4, #0]
 8013ac0:	e003      	b.n	8013aca <_malloc_r+0x76>
 8013ac2:	6863      	ldr	r3, [r4, #4]
 8013ac4:	42a2      	cmp	r2, r4
 8013ac6:	d10e      	bne.n	8013ae6 <_malloc_r+0x92>
 8013ac8:	600b      	str	r3, [r1, #0]
 8013aca:	0030      	movs	r0, r6
 8013acc:	f000 fc36 	bl	801433c <__malloc_unlock>
 8013ad0:	0020      	movs	r0, r4
 8013ad2:	2207      	movs	r2, #7
 8013ad4:	300b      	adds	r0, #11
 8013ad6:	1d23      	adds	r3, r4, #4
 8013ad8:	4390      	bics	r0, r2
 8013ada:	1ac2      	subs	r2, r0, r3
 8013adc:	4298      	cmp	r0, r3
 8013ade:	d0e6      	beq.n	8013aae <_malloc_r+0x5a>
 8013ae0:	1a1b      	subs	r3, r3, r0
 8013ae2:	50a3      	str	r3, [r4, r2]
 8013ae4:	e7e3      	b.n	8013aae <_malloc_r+0x5a>
 8013ae6:	6053      	str	r3, [r2, #4]
 8013ae8:	e7ef      	b.n	8013aca <_malloc_r+0x76>
 8013aea:	0022      	movs	r2, r4
 8013aec:	6864      	ldr	r4, [r4, #4]
 8013aee:	e7c2      	b.n	8013a76 <_malloc_r+0x22>
 8013af0:	2303      	movs	r3, #3
 8013af2:	1cc4      	adds	r4, r0, #3
 8013af4:	439c      	bics	r4, r3
 8013af6:	42a0      	cmp	r0, r4
 8013af8:	d0e1      	beq.n	8013abe <_malloc_r+0x6a>
 8013afa:	1a21      	subs	r1, r4, r0
 8013afc:	0030      	movs	r0, r6
 8013afe:	f000 faeb 	bl	80140d8 <_sbrk_r>
 8013b02:	1c43      	adds	r3, r0, #1
 8013b04:	d1db      	bne.n	8013abe <_malloc_r+0x6a>
 8013b06:	e7c7      	b.n	8013a98 <_malloc_r+0x44>
 8013b08:	200019bc 	.word	0x200019bc
 8013b0c:	200019c0 	.word	0x200019c0

08013b10 <__ssputs_r>:
 8013b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b12:	688e      	ldr	r6, [r1, #8]
 8013b14:	b085      	sub	sp, #20
 8013b16:	0007      	movs	r7, r0
 8013b18:	000c      	movs	r4, r1
 8013b1a:	9203      	str	r2, [sp, #12]
 8013b1c:	9301      	str	r3, [sp, #4]
 8013b1e:	429e      	cmp	r6, r3
 8013b20:	d83c      	bhi.n	8013b9c <__ssputs_r+0x8c>
 8013b22:	2390      	movs	r3, #144	; 0x90
 8013b24:	898a      	ldrh	r2, [r1, #12]
 8013b26:	00db      	lsls	r3, r3, #3
 8013b28:	421a      	tst	r2, r3
 8013b2a:	d034      	beq.n	8013b96 <__ssputs_r+0x86>
 8013b2c:	2503      	movs	r5, #3
 8013b2e:	6909      	ldr	r1, [r1, #16]
 8013b30:	6823      	ldr	r3, [r4, #0]
 8013b32:	1a5b      	subs	r3, r3, r1
 8013b34:	9302      	str	r3, [sp, #8]
 8013b36:	6963      	ldr	r3, [r4, #20]
 8013b38:	9802      	ldr	r0, [sp, #8]
 8013b3a:	435d      	muls	r5, r3
 8013b3c:	0feb      	lsrs	r3, r5, #31
 8013b3e:	195d      	adds	r5, r3, r5
 8013b40:	9b01      	ldr	r3, [sp, #4]
 8013b42:	106d      	asrs	r5, r5, #1
 8013b44:	3301      	adds	r3, #1
 8013b46:	181b      	adds	r3, r3, r0
 8013b48:	42ab      	cmp	r3, r5
 8013b4a:	d900      	bls.n	8013b4e <__ssputs_r+0x3e>
 8013b4c:	001d      	movs	r5, r3
 8013b4e:	0553      	lsls	r3, r2, #21
 8013b50:	d532      	bpl.n	8013bb8 <__ssputs_r+0xa8>
 8013b52:	0029      	movs	r1, r5
 8013b54:	0038      	movs	r0, r7
 8013b56:	f7ff ff7d 	bl	8013a54 <_malloc_r>
 8013b5a:	1e06      	subs	r6, r0, #0
 8013b5c:	d109      	bne.n	8013b72 <__ssputs_r+0x62>
 8013b5e:	230c      	movs	r3, #12
 8013b60:	603b      	str	r3, [r7, #0]
 8013b62:	2340      	movs	r3, #64	; 0x40
 8013b64:	2001      	movs	r0, #1
 8013b66:	89a2      	ldrh	r2, [r4, #12]
 8013b68:	4240      	negs	r0, r0
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	81a3      	strh	r3, [r4, #12]
 8013b6e:	b005      	add	sp, #20
 8013b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b72:	9a02      	ldr	r2, [sp, #8]
 8013b74:	6921      	ldr	r1, [r4, #16]
 8013b76:	f000 fbbc 	bl	80142f2 <memcpy>
 8013b7a:	89a3      	ldrh	r3, [r4, #12]
 8013b7c:	4a14      	ldr	r2, [pc, #80]	; (8013bd0 <__ssputs_r+0xc0>)
 8013b7e:	401a      	ands	r2, r3
 8013b80:	2380      	movs	r3, #128	; 0x80
 8013b82:	4313      	orrs	r3, r2
 8013b84:	81a3      	strh	r3, [r4, #12]
 8013b86:	9b02      	ldr	r3, [sp, #8]
 8013b88:	6126      	str	r6, [r4, #16]
 8013b8a:	18f6      	adds	r6, r6, r3
 8013b8c:	6026      	str	r6, [r4, #0]
 8013b8e:	6165      	str	r5, [r4, #20]
 8013b90:	9e01      	ldr	r6, [sp, #4]
 8013b92:	1aed      	subs	r5, r5, r3
 8013b94:	60a5      	str	r5, [r4, #8]
 8013b96:	9b01      	ldr	r3, [sp, #4]
 8013b98:	429e      	cmp	r6, r3
 8013b9a:	d900      	bls.n	8013b9e <__ssputs_r+0x8e>
 8013b9c:	9e01      	ldr	r6, [sp, #4]
 8013b9e:	0032      	movs	r2, r6
 8013ba0:	9903      	ldr	r1, [sp, #12]
 8013ba2:	6820      	ldr	r0, [r4, #0]
 8013ba4:	f000 fbae 	bl	8014304 <memmove>
 8013ba8:	68a3      	ldr	r3, [r4, #8]
 8013baa:	2000      	movs	r0, #0
 8013bac:	1b9b      	subs	r3, r3, r6
 8013bae:	60a3      	str	r3, [r4, #8]
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	199e      	adds	r6, r3, r6
 8013bb4:	6026      	str	r6, [r4, #0]
 8013bb6:	e7da      	b.n	8013b6e <__ssputs_r+0x5e>
 8013bb8:	002a      	movs	r2, r5
 8013bba:	0038      	movs	r0, r7
 8013bbc:	f000 fbc6 	bl	801434c <_realloc_r>
 8013bc0:	1e06      	subs	r6, r0, #0
 8013bc2:	d1e0      	bne.n	8013b86 <__ssputs_r+0x76>
 8013bc4:	0038      	movs	r0, r7
 8013bc6:	6921      	ldr	r1, [r4, #16]
 8013bc8:	f7ff fefa 	bl	80139c0 <_free_r>
 8013bcc:	e7c7      	b.n	8013b5e <__ssputs_r+0x4e>
 8013bce:	46c0      	nop			; (mov r8, r8)
 8013bd0:	fffffb7f 	.word	0xfffffb7f

08013bd4 <_svfiprintf_r>:
 8013bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bd6:	b0a1      	sub	sp, #132	; 0x84
 8013bd8:	9003      	str	r0, [sp, #12]
 8013bda:	001d      	movs	r5, r3
 8013bdc:	898b      	ldrh	r3, [r1, #12]
 8013bde:	000f      	movs	r7, r1
 8013be0:	0016      	movs	r6, r2
 8013be2:	061b      	lsls	r3, r3, #24
 8013be4:	d511      	bpl.n	8013c0a <_svfiprintf_r+0x36>
 8013be6:	690b      	ldr	r3, [r1, #16]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d10e      	bne.n	8013c0a <_svfiprintf_r+0x36>
 8013bec:	2140      	movs	r1, #64	; 0x40
 8013bee:	f7ff ff31 	bl	8013a54 <_malloc_r>
 8013bf2:	6038      	str	r0, [r7, #0]
 8013bf4:	6138      	str	r0, [r7, #16]
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d105      	bne.n	8013c06 <_svfiprintf_r+0x32>
 8013bfa:	230c      	movs	r3, #12
 8013bfc:	9a03      	ldr	r2, [sp, #12]
 8013bfe:	3801      	subs	r0, #1
 8013c00:	6013      	str	r3, [r2, #0]
 8013c02:	b021      	add	sp, #132	; 0x84
 8013c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c06:	2340      	movs	r3, #64	; 0x40
 8013c08:	617b      	str	r3, [r7, #20]
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	ac08      	add	r4, sp, #32
 8013c0e:	6163      	str	r3, [r4, #20]
 8013c10:	3320      	adds	r3, #32
 8013c12:	7663      	strb	r3, [r4, #25]
 8013c14:	3310      	adds	r3, #16
 8013c16:	76a3      	strb	r3, [r4, #26]
 8013c18:	9507      	str	r5, [sp, #28]
 8013c1a:	0035      	movs	r5, r6
 8013c1c:	782b      	ldrb	r3, [r5, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d001      	beq.n	8013c26 <_svfiprintf_r+0x52>
 8013c22:	2b25      	cmp	r3, #37	; 0x25
 8013c24:	d147      	bne.n	8013cb6 <_svfiprintf_r+0xe2>
 8013c26:	1bab      	subs	r3, r5, r6
 8013c28:	9305      	str	r3, [sp, #20]
 8013c2a:	42b5      	cmp	r5, r6
 8013c2c:	d00c      	beq.n	8013c48 <_svfiprintf_r+0x74>
 8013c2e:	0032      	movs	r2, r6
 8013c30:	0039      	movs	r1, r7
 8013c32:	9803      	ldr	r0, [sp, #12]
 8013c34:	f7ff ff6c 	bl	8013b10 <__ssputs_r>
 8013c38:	1c43      	adds	r3, r0, #1
 8013c3a:	d100      	bne.n	8013c3e <_svfiprintf_r+0x6a>
 8013c3c:	e0ae      	b.n	8013d9c <_svfiprintf_r+0x1c8>
 8013c3e:	6962      	ldr	r2, [r4, #20]
 8013c40:	9b05      	ldr	r3, [sp, #20]
 8013c42:	4694      	mov	ip, r2
 8013c44:	4463      	add	r3, ip
 8013c46:	6163      	str	r3, [r4, #20]
 8013c48:	782b      	ldrb	r3, [r5, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d100      	bne.n	8013c50 <_svfiprintf_r+0x7c>
 8013c4e:	e0a5      	b.n	8013d9c <_svfiprintf_r+0x1c8>
 8013c50:	2201      	movs	r2, #1
 8013c52:	2300      	movs	r3, #0
 8013c54:	4252      	negs	r2, r2
 8013c56:	6062      	str	r2, [r4, #4]
 8013c58:	a904      	add	r1, sp, #16
 8013c5a:	3254      	adds	r2, #84	; 0x54
 8013c5c:	1852      	adds	r2, r2, r1
 8013c5e:	1c6e      	adds	r6, r5, #1
 8013c60:	6023      	str	r3, [r4, #0]
 8013c62:	60e3      	str	r3, [r4, #12]
 8013c64:	60a3      	str	r3, [r4, #8]
 8013c66:	7013      	strb	r3, [r2, #0]
 8013c68:	65a3      	str	r3, [r4, #88]	; 0x58
 8013c6a:	2205      	movs	r2, #5
 8013c6c:	7831      	ldrb	r1, [r6, #0]
 8013c6e:	4854      	ldr	r0, [pc, #336]	; (8013dc0 <_svfiprintf_r+0x1ec>)
 8013c70:	f000 fb34 	bl	80142dc <memchr>
 8013c74:	1c75      	adds	r5, r6, #1
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d11f      	bne.n	8013cba <_svfiprintf_r+0xe6>
 8013c7a:	6822      	ldr	r2, [r4, #0]
 8013c7c:	06d3      	lsls	r3, r2, #27
 8013c7e:	d504      	bpl.n	8013c8a <_svfiprintf_r+0xb6>
 8013c80:	2353      	movs	r3, #83	; 0x53
 8013c82:	a904      	add	r1, sp, #16
 8013c84:	185b      	adds	r3, r3, r1
 8013c86:	2120      	movs	r1, #32
 8013c88:	7019      	strb	r1, [r3, #0]
 8013c8a:	0713      	lsls	r3, r2, #28
 8013c8c:	d504      	bpl.n	8013c98 <_svfiprintf_r+0xc4>
 8013c8e:	2353      	movs	r3, #83	; 0x53
 8013c90:	a904      	add	r1, sp, #16
 8013c92:	185b      	adds	r3, r3, r1
 8013c94:	212b      	movs	r1, #43	; 0x2b
 8013c96:	7019      	strb	r1, [r3, #0]
 8013c98:	7833      	ldrb	r3, [r6, #0]
 8013c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c9c:	d016      	beq.n	8013ccc <_svfiprintf_r+0xf8>
 8013c9e:	0035      	movs	r5, r6
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	200a      	movs	r0, #10
 8013ca4:	68e3      	ldr	r3, [r4, #12]
 8013ca6:	782a      	ldrb	r2, [r5, #0]
 8013ca8:	1c6e      	adds	r6, r5, #1
 8013caa:	3a30      	subs	r2, #48	; 0x30
 8013cac:	2a09      	cmp	r2, #9
 8013cae:	d94e      	bls.n	8013d4e <_svfiprintf_r+0x17a>
 8013cb0:	2900      	cmp	r1, #0
 8013cb2:	d111      	bne.n	8013cd8 <_svfiprintf_r+0x104>
 8013cb4:	e017      	b.n	8013ce6 <_svfiprintf_r+0x112>
 8013cb6:	3501      	adds	r5, #1
 8013cb8:	e7b0      	b.n	8013c1c <_svfiprintf_r+0x48>
 8013cba:	4b41      	ldr	r3, [pc, #260]	; (8013dc0 <_svfiprintf_r+0x1ec>)
 8013cbc:	6822      	ldr	r2, [r4, #0]
 8013cbe:	1ac0      	subs	r0, r0, r3
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	4083      	lsls	r3, r0
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	002e      	movs	r6, r5
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	e7ce      	b.n	8013c6a <_svfiprintf_r+0x96>
 8013ccc:	9b07      	ldr	r3, [sp, #28]
 8013cce:	1d19      	adds	r1, r3, #4
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	9107      	str	r1, [sp, #28]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	db01      	blt.n	8013cdc <_svfiprintf_r+0x108>
 8013cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cda:	e004      	b.n	8013ce6 <_svfiprintf_r+0x112>
 8013cdc:	425b      	negs	r3, r3
 8013cde:	60e3      	str	r3, [r4, #12]
 8013ce0:	2302      	movs	r3, #2
 8013ce2:	4313      	orrs	r3, r2
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	782b      	ldrb	r3, [r5, #0]
 8013ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8013cea:	d10a      	bne.n	8013d02 <_svfiprintf_r+0x12e>
 8013cec:	786b      	ldrb	r3, [r5, #1]
 8013cee:	2b2a      	cmp	r3, #42	; 0x2a
 8013cf0:	d135      	bne.n	8013d5e <_svfiprintf_r+0x18a>
 8013cf2:	9b07      	ldr	r3, [sp, #28]
 8013cf4:	3502      	adds	r5, #2
 8013cf6:	1d1a      	adds	r2, r3, #4
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	9207      	str	r2, [sp, #28]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	db2b      	blt.n	8013d58 <_svfiprintf_r+0x184>
 8013d00:	9309      	str	r3, [sp, #36]	; 0x24
 8013d02:	4e30      	ldr	r6, [pc, #192]	; (8013dc4 <_svfiprintf_r+0x1f0>)
 8013d04:	2203      	movs	r2, #3
 8013d06:	0030      	movs	r0, r6
 8013d08:	7829      	ldrb	r1, [r5, #0]
 8013d0a:	f000 fae7 	bl	80142dc <memchr>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d006      	beq.n	8013d20 <_svfiprintf_r+0x14c>
 8013d12:	2340      	movs	r3, #64	; 0x40
 8013d14:	1b80      	subs	r0, r0, r6
 8013d16:	4083      	lsls	r3, r0
 8013d18:	6822      	ldr	r2, [r4, #0]
 8013d1a:	3501      	adds	r5, #1
 8013d1c:	4313      	orrs	r3, r2
 8013d1e:	6023      	str	r3, [r4, #0]
 8013d20:	7829      	ldrb	r1, [r5, #0]
 8013d22:	2206      	movs	r2, #6
 8013d24:	4828      	ldr	r0, [pc, #160]	; (8013dc8 <_svfiprintf_r+0x1f4>)
 8013d26:	1c6e      	adds	r6, r5, #1
 8013d28:	7621      	strb	r1, [r4, #24]
 8013d2a:	f000 fad7 	bl	80142dc <memchr>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d03c      	beq.n	8013dac <_svfiprintf_r+0x1d8>
 8013d32:	4b26      	ldr	r3, [pc, #152]	; (8013dcc <_svfiprintf_r+0x1f8>)
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d125      	bne.n	8013d84 <_svfiprintf_r+0x1b0>
 8013d38:	2207      	movs	r2, #7
 8013d3a:	9b07      	ldr	r3, [sp, #28]
 8013d3c:	3307      	adds	r3, #7
 8013d3e:	4393      	bics	r3, r2
 8013d40:	3308      	adds	r3, #8
 8013d42:	9307      	str	r3, [sp, #28]
 8013d44:	6963      	ldr	r3, [r4, #20]
 8013d46:	9a04      	ldr	r2, [sp, #16]
 8013d48:	189b      	adds	r3, r3, r2
 8013d4a:	6163      	str	r3, [r4, #20]
 8013d4c:	e765      	b.n	8013c1a <_svfiprintf_r+0x46>
 8013d4e:	4343      	muls	r3, r0
 8013d50:	0035      	movs	r5, r6
 8013d52:	2101      	movs	r1, #1
 8013d54:	189b      	adds	r3, r3, r2
 8013d56:	e7a6      	b.n	8013ca6 <_svfiprintf_r+0xd2>
 8013d58:	2301      	movs	r3, #1
 8013d5a:	425b      	negs	r3, r3
 8013d5c:	e7d0      	b.n	8013d00 <_svfiprintf_r+0x12c>
 8013d5e:	2300      	movs	r3, #0
 8013d60:	200a      	movs	r0, #10
 8013d62:	001a      	movs	r2, r3
 8013d64:	3501      	adds	r5, #1
 8013d66:	6063      	str	r3, [r4, #4]
 8013d68:	7829      	ldrb	r1, [r5, #0]
 8013d6a:	1c6e      	adds	r6, r5, #1
 8013d6c:	3930      	subs	r1, #48	; 0x30
 8013d6e:	2909      	cmp	r1, #9
 8013d70:	d903      	bls.n	8013d7a <_svfiprintf_r+0x1a6>
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d0c5      	beq.n	8013d02 <_svfiprintf_r+0x12e>
 8013d76:	9209      	str	r2, [sp, #36]	; 0x24
 8013d78:	e7c3      	b.n	8013d02 <_svfiprintf_r+0x12e>
 8013d7a:	4342      	muls	r2, r0
 8013d7c:	0035      	movs	r5, r6
 8013d7e:	2301      	movs	r3, #1
 8013d80:	1852      	adds	r2, r2, r1
 8013d82:	e7f1      	b.n	8013d68 <_svfiprintf_r+0x194>
 8013d84:	ab07      	add	r3, sp, #28
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	003a      	movs	r2, r7
 8013d8a:	0021      	movs	r1, r4
 8013d8c:	4b10      	ldr	r3, [pc, #64]	; (8013dd0 <_svfiprintf_r+0x1fc>)
 8013d8e:	9803      	ldr	r0, [sp, #12]
 8013d90:	e000      	b.n	8013d94 <_svfiprintf_r+0x1c0>
 8013d92:	bf00      	nop
 8013d94:	9004      	str	r0, [sp, #16]
 8013d96:	9b04      	ldr	r3, [sp, #16]
 8013d98:	3301      	adds	r3, #1
 8013d9a:	d1d3      	bne.n	8013d44 <_svfiprintf_r+0x170>
 8013d9c:	89bb      	ldrh	r3, [r7, #12]
 8013d9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013da0:	065b      	lsls	r3, r3, #25
 8013da2:	d400      	bmi.n	8013da6 <_svfiprintf_r+0x1d2>
 8013da4:	e72d      	b.n	8013c02 <_svfiprintf_r+0x2e>
 8013da6:	2001      	movs	r0, #1
 8013da8:	4240      	negs	r0, r0
 8013daa:	e72a      	b.n	8013c02 <_svfiprintf_r+0x2e>
 8013dac:	ab07      	add	r3, sp, #28
 8013dae:	9300      	str	r3, [sp, #0]
 8013db0:	003a      	movs	r2, r7
 8013db2:	0021      	movs	r1, r4
 8013db4:	4b06      	ldr	r3, [pc, #24]	; (8013dd0 <_svfiprintf_r+0x1fc>)
 8013db6:	9803      	ldr	r0, [sp, #12]
 8013db8:	f000 f87c 	bl	8013eb4 <_printf_i>
 8013dbc:	e7ea      	b.n	8013d94 <_svfiprintf_r+0x1c0>
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	08016750 	.word	0x08016750
 8013dc4:	08016756 	.word	0x08016756
 8013dc8:	0801675a 	.word	0x0801675a
 8013dcc:	00000000 	.word	0x00000000
 8013dd0:	08013b11 	.word	0x08013b11

08013dd4 <_printf_common>:
 8013dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dd6:	0015      	movs	r5, r2
 8013dd8:	9301      	str	r3, [sp, #4]
 8013dda:	688a      	ldr	r2, [r1, #8]
 8013ddc:	690b      	ldr	r3, [r1, #16]
 8013dde:	000c      	movs	r4, r1
 8013de0:	9000      	str	r0, [sp, #0]
 8013de2:	4293      	cmp	r3, r2
 8013de4:	da00      	bge.n	8013de8 <_printf_common+0x14>
 8013de6:	0013      	movs	r3, r2
 8013de8:	0022      	movs	r2, r4
 8013dea:	602b      	str	r3, [r5, #0]
 8013dec:	3243      	adds	r2, #67	; 0x43
 8013dee:	7812      	ldrb	r2, [r2, #0]
 8013df0:	2a00      	cmp	r2, #0
 8013df2:	d001      	beq.n	8013df8 <_printf_common+0x24>
 8013df4:	3301      	adds	r3, #1
 8013df6:	602b      	str	r3, [r5, #0]
 8013df8:	6823      	ldr	r3, [r4, #0]
 8013dfa:	069b      	lsls	r3, r3, #26
 8013dfc:	d502      	bpl.n	8013e04 <_printf_common+0x30>
 8013dfe:	682b      	ldr	r3, [r5, #0]
 8013e00:	3302      	adds	r3, #2
 8013e02:	602b      	str	r3, [r5, #0]
 8013e04:	6822      	ldr	r2, [r4, #0]
 8013e06:	2306      	movs	r3, #6
 8013e08:	0017      	movs	r7, r2
 8013e0a:	401f      	ands	r7, r3
 8013e0c:	421a      	tst	r2, r3
 8013e0e:	d027      	beq.n	8013e60 <_printf_common+0x8c>
 8013e10:	0023      	movs	r3, r4
 8013e12:	3343      	adds	r3, #67	; 0x43
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	1e5a      	subs	r2, r3, #1
 8013e18:	4193      	sbcs	r3, r2
 8013e1a:	6822      	ldr	r2, [r4, #0]
 8013e1c:	0692      	lsls	r2, r2, #26
 8013e1e:	d430      	bmi.n	8013e82 <_printf_common+0xae>
 8013e20:	0022      	movs	r2, r4
 8013e22:	9901      	ldr	r1, [sp, #4]
 8013e24:	9800      	ldr	r0, [sp, #0]
 8013e26:	9e08      	ldr	r6, [sp, #32]
 8013e28:	3243      	adds	r2, #67	; 0x43
 8013e2a:	47b0      	blx	r6
 8013e2c:	1c43      	adds	r3, r0, #1
 8013e2e:	d025      	beq.n	8013e7c <_printf_common+0xa8>
 8013e30:	2306      	movs	r3, #6
 8013e32:	6820      	ldr	r0, [r4, #0]
 8013e34:	682a      	ldr	r2, [r5, #0]
 8013e36:	68e1      	ldr	r1, [r4, #12]
 8013e38:	2500      	movs	r5, #0
 8013e3a:	4003      	ands	r3, r0
 8013e3c:	2b04      	cmp	r3, #4
 8013e3e:	d103      	bne.n	8013e48 <_printf_common+0x74>
 8013e40:	1a8d      	subs	r5, r1, r2
 8013e42:	43eb      	mvns	r3, r5
 8013e44:	17db      	asrs	r3, r3, #31
 8013e46:	401d      	ands	r5, r3
 8013e48:	68a3      	ldr	r3, [r4, #8]
 8013e4a:	6922      	ldr	r2, [r4, #16]
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	dd01      	ble.n	8013e54 <_printf_common+0x80>
 8013e50:	1a9b      	subs	r3, r3, r2
 8013e52:	18ed      	adds	r5, r5, r3
 8013e54:	2700      	movs	r7, #0
 8013e56:	42bd      	cmp	r5, r7
 8013e58:	d120      	bne.n	8013e9c <_printf_common+0xc8>
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	e010      	b.n	8013e80 <_printf_common+0xac>
 8013e5e:	3701      	adds	r7, #1
 8013e60:	68e3      	ldr	r3, [r4, #12]
 8013e62:	682a      	ldr	r2, [r5, #0]
 8013e64:	1a9b      	subs	r3, r3, r2
 8013e66:	42bb      	cmp	r3, r7
 8013e68:	ddd2      	ble.n	8013e10 <_printf_common+0x3c>
 8013e6a:	0022      	movs	r2, r4
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	9901      	ldr	r1, [sp, #4]
 8013e70:	9800      	ldr	r0, [sp, #0]
 8013e72:	9e08      	ldr	r6, [sp, #32]
 8013e74:	3219      	adds	r2, #25
 8013e76:	47b0      	blx	r6
 8013e78:	1c43      	adds	r3, r0, #1
 8013e7a:	d1f0      	bne.n	8013e5e <_printf_common+0x8a>
 8013e7c:	2001      	movs	r0, #1
 8013e7e:	4240      	negs	r0, r0
 8013e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013e82:	2030      	movs	r0, #48	; 0x30
 8013e84:	18e1      	adds	r1, r4, r3
 8013e86:	3143      	adds	r1, #67	; 0x43
 8013e88:	7008      	strb	r0, [r1, #0]
 8013e8a:	0021      	movs	r1, r4
 8013e8c:	1c5a      	adds	r2, r3, #1
 8013e8e:	3145      	adds	r1, #69	; 0x45
 8013e90:	7809      	ldrb	r1, [r1, #0]
 8013e92:	18a2      	adds	r2, r4, r2
 8013e94:	3243      	adds	r2, #67	; 0x43
 8013e96:	3302      	adds	r3, #2
 8013e98:	7011      	strb	r1, [r2, #0]
 8013e9a:	e7c1      	b.n	8013e20 <_printf_common+0x4c>
 8013e9c:	0022      	movs	r2, r4
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	9901      	ldr	r1, [sp, #4]
 8013ea2:	9800      	ldr	r0, [sp, #0]
 8013ea4:	9e08      	ldr	r6, [sp, #32]
 8013ea6:	321a      	adds	r2, #26
 8013ea8:	47b0      	blx	r6
 8013eaa:	1c43      	adds	r3, r0, #1
 8013eac:	d0e6      	beq.n	8013e7c <_printf_common+0xa8>
 8013eae:	3701      	adds	r7, #1
 8013eb0:	e7d1      	b.n	8013e56 <_printf_common+0x82>
	...

08013eb4 <_printf_i>:
 8013eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eb6:	b08b      	sub	sp, #44	; 0x2c
 8013eb8:	9206      	str	r2, [sp, #24]
 8013eba:	000a      	movs	r2, r1
 8013ebc:	3243      	adds	r2, #67	; 0x43
 8013ebe:	9307      	str	r3, [sp, #28]
 8013ec0:	9005      	str	r0, [sp, #20]
 8013ec2:	9204      	str	r2, [sp, #16]
 8013ec4:	7e0a      	ldrb	r2, [r1, #24]
 8013ec6:	000c      	movs	r4, r1
 8013ec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013eca:	2a78      	cmp	r2, #120	; 0x78
 8013ecc:	d806      	bhi.n	8013edc <_printf_i+0x28>
 8013ece:	2a62      	cmp	r2, #98	; 0x62
 8013ed0:	d808      	bhi.n	8013ee4 <_printf_i+0x30>
 8013ed2:	2a00      	cmp	r2, #0
 8013ed4:	d100      	bne.n	8013ed8 <_printf_i+0x24>
 8013ed6:	e0c0      	b.n	801405a <_printf_i+0x1a6>
 8013ed8:	2a58      	cmp	r2, #88	; 0x58
 8013eda:	d052      	beq.n	8013f82 <_printf_i+0xce>
 8013edc:	0026      	movs	r6, r4
 8013ede:	3642      	adds	r6, #66	; 0x42
 8013ee0:	7032      	strb	r2, [r6, #0]
 8013ee2:	e022      	b.n	8013f2a <_printf_i+0x76>
 8013ee4:	0010      	movs	r0, r2
 8013ee6:	3863      	subs	r0, #99	; 0x63
 8013ee8:	2815      	cmp	r0, #21
 8013eea:	d8f7      	bhi.n	8013edc <_printf_i+0x28>
 8013eec:	f7ec f91e 	bl	800012c <__gnu_thumb1_case_shi>
 8013ef0:	001f0016 	.word	0x001f0016
 8013ef4:	fff6fff6 	.word	0xfff6fff6
 8013ef8:	fff6fff6 	.word	0xfff6fff6
 8013efc:	fff6001f 	.word	0xfff6001f
 8013f00:	fff6fff6 	.word	0xfff6fff6
 8013f04:	00a8fff6 	.word	0x00a8fff6
 8013f08:	009a0036 	.word	0x009a0036
 8013f0c:	fff6fff6 	.word	0xfff6fff6
 8013f10:	fff600b9 	.word	0xfff600b9
 8013f14:	fff60036 	.word	0xfff60036
 8013f18:	009efff6 	.word	0x009efff6
 8013f1c:	0026      	movs	r6, r4
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	3642      	adds	r6, #66	; 0x42
 8013f22:	1d11      	adds	r1, r2, #4
 8013f24:	6019      	str	r1, [r3, #0]
 8013f26:	6813      	ldr	r3, [r2, #0]
 8013f28:	7033      	strb	r3, [r6, #0]
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e0a7      	b.n	801407e <_printf_i+0x1ca>
 8013f2e:	6808      	ldr	r0, [r1, #0]
 8013f30:	6819      	ldr	r1, [r3, #0]
 8013f32:	1d0a      	adds	r2, r1, #4
 8013f34:	0605      	lsls	r5, r0, #24
 8013f36:	d50b      	bpl.n	8013f50 <_printf_i+0x9c>
 8013f38:	680d      	ldr	r5, [r1, #0]
 8013f3a:	601a      	str	r2, [r3, #0]
 8013f3c:	2d00      	cmp	r5, #0
 8013f3e:	da03      	bge.n	8013f48 <_printf_i+0x94>
 8013f40:	232d      	movs	r3, #45	; 0x2d
 8013f42:	9a04      	ldr	r2, [sp, #16]
 8013f44:	426d      	negs	r5, r5
 8013f46:	7013      	strb	r3, [r2, #0]
 8013f48:	4b61      	ldr	r3, [pc, #388]	; (80140d0 <_printf_i+0x21c>)
 8013f4a:	270a      	movs	r7, #10
 8013f4c:	9303      	str	r3, [sp, #12]
 8013f4e:	e032      	b.n	8013fb6 <_printf_i+0x102>
 8013f50:	680d      	ldr	r5, [r1, #0]
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	0641      	lsls	r1, r0, #25
 8013f56:	d5f1      	bpl.n	8013f3c <_printf_i+0x88>
 8013f58:	b22d      	sxth	r5, r5
 8013f5a:	e7ef      	b.n	8013f3c <_printf_i+0x88>
 8013f5c:	680d      	ldr	r5, [r1, #0]
 8013f5e:	6819      	ldr	r1, [r3, #0]
 8013f60:	1d08      	adds	r0, r1, #4
 8013f62:	6018      	str	r0, [r3, #0]
 8013f64:	062e      	lsls	r6, r5, #24
 8013f66:	d501      	bpl.n	8013f6c <_printf_i+0xb8>
 8013f68:	680d      	ldr	r5, [r1, #0]
 8013f6a:	e003      	b.n	8013f74 <_printf_i+0xc0>
 8013f6c:	066d      	lsls	r5, r5, #25
 8013f6e:	d5fb      	bpl.n	8013f68 <_printf_i+0xb4>
 8013f70:	680d      	ldr	r5, [r1, #0]
 8013f72:	b2ad      	uxth	r5, r5
 8013f74:	4b56      	ldr	r3, [pc, #344]	; (80140d0 <_printf_i+0x21c>)
 8013f76:	270a      	movs	r7, #10
 8013f78:	9303      	str	r3, [sp, #12]
 8013f7a:	2a6f      	cmp	r2, #111	; 0x6f
 8013f7c:	d117      	bne.n	8013fae <_printf_i+0xfa>
 8013f7e:	2708      	movs	r7, #8
 8013f80:	e015      	b.n	8013fae <_printf_i+0xfa>
 8013f82:	3145      	adds	r1, #69	; 0x45
 8013f84:	700a      	strb	r2, [r1, #0]
 8013f86:	4a52      	ldr	r2, [pc, #328]	; (80140d0 <_printf_i+0x21c>)
 8013f88:	9203      	str	r2, [sp, #12]
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	6821      	ldr	r1, [r4, #0]
 8013f8e:	ca20      	ldmia	r2!, {r5}
 8013f90:	601a      	str	r2, [r3, #0]
 8013f92:	0608      	lsls	r0, r1, #24
 8013f94:	d550      	bpl.n	8014038 <_printf_i+0x184>
 8013f96:	07cb      	lsls	r3, r1, #31
 8013f98:	d502      	bpl.n	8013fa0 <_printf_i+0xec>
 8013f9a:	2320      	movs	r3, #32
 8013f9c:	4319      	orrs	r1, r3
 8013f9e:	6021      	str	r1, [r4, #0]
 8013fa0:	2710      	movs	r7, #16
 8013fa2:	2d00      	cmp	r5, #0
 8013fa4:	d103      	bne.n	8013fae <_printf_i+0xfa>
 8013fa6:	2320      	movs	r3, #32
 8013fa8:	6822      	ldr	r2, [r4, #0]
 8013faa:	439a      	bics	r2, r3
 8013fac:	6022      	str	r2, [r4, #0]
 8013fae:	0023      	movs	r3, r4
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	3343      	adds	r3, #67	; 0x43
 8013fb4:	701a      	strb	r2, [r3, #0]
 8013fb6:	6863      	ldr	r3, [r4, #4]
 8013fb8:	60a3      	str	r3, [r4, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	db03      	blt.n	8013fc6 <_printf_i+0x112>
 8013fbe:	2204      	movs	r2, #4
 8013fc0:	6821      	ldr	r1, [r4, #0]
 8013fc2:	4391      	bics	r1, r2
 8013fc4:	6021      	str	r1, [r4, #0]
 8013fc6:	2d00      	cmp	r5, #0
 8013fc8:	d102      	bne.n	8013fd0 <_printf_i+0x11c>
 8013fca:	9e04      	ldr	r6, [sp, #16]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d00c      	beq.n	8013fea <_printf_i+0x136>
 8013fd0:	9e04      	ldr	r6, [sp, #16]
 8013fd2:	0028      	movs	r0, r5
 8013fd4:	0039      	movs	r1, r7
 8013fd6:	f7ec f939 	bl	800024c <__aeabi_uidivmod>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	3e01      	subs	r6, #1
 8013fde:	5c5b      	ldrb	r3, [r3, r1]
 8013fe0:	7033      	strb	r3, [r6, #0]
 8013fe2:	002b      	movs	r3, r5
 8013fe4:	0005      	movs	r5, r0
 8013fe6:	429f      	cmp	r7, r3
 8013fe8:	d9f3      	bls.n	8013fd2 <_printf_i+0x11e>
 8013fea:	2f08      	cmp	r7, #8
 8013fec:	d109      	bne.n	8014002 <_printf_i+0x14e>
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	07db      	lsls	r3, r3, #31
 8013ff2:	d506      	bpl.n	8014002 <_printf_i+0x14e>
 8013ff4:	6863      	ldr	r3, [r4, #4]
 8013ff6:	6922      	ldr	r2, [r4, #16]
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	dc02      	bgt.n	8014002 <_printf_i+0x14e>
 8013ffc:	2330      	movs	r3, #48	; 0x30
 8013ffe:	3e01      	subs	r6, #1
 8014000:	7033      	strb	r3, [r6, #0]
 8014002:	9b04      	ldr	r3, [sp, #16]
 8014004:	1b9b      	subs	r3, r3, r6
 8014006:	6123      	str	r3, [r4, #16]
 8014008:	9b07      	ldr	r3, [sp, #28]
 801400a:	0021      	movs	r1, r4
 801400c:	9300      	str	r3, [sp, #0]
 801400e:	9805      	ldr	r0, [sp, #20]
 8014010:	9b06      	ldr	r3, [sp, #24]
 8014012:	aa09      	add	r2, sp, #36	; 0x24
 8014014:	f7ff fede 	bl	8013dd4 <_printf_common>
 8014018:	1c43      	adds	r3, r0, #1
 801401a:	d135      	bne.n	8014088 <_printf_i+0x1d4>
 801401c:	2001      	movs	r0, #1
 801401e:	4240      	negs	r0, r0
 8014020:	b00b      	add	sp, #44	; 0x2c
 8014022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014024:	2220      	movs	r2, #32
 8014026:	6809      	ldr	r1, [r1, #0]
 8014028:	430a      	orrs	r2, r1
 801402a:	6022      	str	r2, [r4, #0]
 801402c:	0022      	movs	r2, r4
 801402e:	2178      	movs	r1, #120	; 0x78
 8014030:	3245      	adds	r2, #69	; 0x45
 8014032:	7011      	strb	r1, [r2, #0]
 8014034:	4a27      	ldr	r2, [pc, #156]	; (80140d4 <_printf_i+0x220>)
 8014036:	e7a7      	b.n	8013f88 <_printf_i+0xd4>
 8014038:	0648      	lsls	r0, r1, #25
 801403a:	d5ac      	bpl.n	8013f96 <_printf_i+0xe2>
 801403c:	b2ad      	uxth	r5, r5
 801403e:	e7aa      	b.n	8013f96 <_printf_i+0xe2>
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	680d      	ldr	r5, [r1, #0]
 8014044:	1d10      	adds	r0, r2, #4
 8014046:	6949      	ldr	r1, [r1, #20]
 8014048:	6018      	str	r0, [r3, #0]
 801404a:	6813      	ldr	r3, [r2, #0]
 801404c:	062e      	lsls	r6, r5, #24
 801404e:	d501      	bpl.n	8014054 <_printf_i+0x1a0>
 8014050:	6019      	str	r1, [r3, #0]
 8014052:	e002      	b.n	801405a <_printf_i+0x1a6>
 8014054:	066d      	lsls	r5, r5, #25
 8014056:	d5fb      	bpl.n	8014050 <_printf_i+0x19c>
 8014058:	8019      	strh	r1, [r3, #0]
 801405a:	2300      	movs	r3, #0
 801405c:	9e04      	ldr	r6, [sp, #16]
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	e7d2      	b.n	8014008 <_printf_i+0x154>
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	1d11      	adds	r1, r2, #4
 8014066:	6019      	str	r1, [r3, #0]
 8014068:	6816      	ldr	r6, [r2, #0]
 801406a:	2100      	movs	r1, #0
 801406c:	0030      	movs	r0, r6
 801406e:	6862      	ldr	r2, [r4, #4]
 8014070:	f000 f934 	bl	80142dc <memchr>
 8014074:	2800      	cmp	r0, #0
 8014076:	d001      	beq.n	801407c <_printf_i+0x1c8>
 8014078:	1b80      	subs	r0, r0, r6
 801407a:	6060      	str	r0, [r4, #4]
 801407c:	6863      	ldr	r3, [r4, #4]
 801407e:	6123      	str	r3, [r4, #16]
 8014080:	2300      	movs	r3, #0
 8014082:	9a04      	ldr	r2, [sp, #16]
 8014084:	7013      	strb	r3, [r2, #0]
 8014086:	e7bf      	b.n	8014008 <_printf_i+0x154>
 8014088:	6923      	ldr	r3, [r4, #16]
 801408a:	0032      	movs	r2, r6
 801408c:	9906      	ldr	r1, [sp, #24]
 801408e:	9805      	ldr	r0, [sp, #20]
 8014090:	9d07      	ldr	r5, [sp, #28]
 8014092:	47a8      	blx	r5
 8014094:	1c43      	adds	r3, r0, #1
 8014096:	d0c1      	beq.n	801401c <_printf_i+0x168>
 8014098:	6823      	ldr	r3, [r4, #0]
 801409a:	079b      	lsls	r3, r3, #30
 801409c:	d415      	bmi.n	80140ca <_printf_i+0x216>
 801409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140a0:	68e0      	ldr	r0, [r4, #12]
 80140a2:	4298      	cmp	r0, r3
 80140a4:	dabc      	bge.n	8014020 <_printf_i+0x16c>
 80140a6:	0018      	movs	r0, r3
 80140a8:	e7ba      	b.n	8014020 <_printf_i+0x16c>
 80140aa:	0022      	movs	r2, r4
 80140ac:	2301      	movs	r3, #1
 80140ae:	9906      	ldr	r1, [sp, #24]
 80140b0:	9805      	ldr	r0, [sp, #20]
 80140b2:	9e07      	ldr	r6, [sp, #28]
 80140b4:	3219      	adds	r2, #25
 80140b6:	47b0      	blx	r6
 80140b8:	1c43      	adds	r3, r0, #1
 80140ba:	d0af      	beq.n	801401c <_printf_i+0x168>
 80140bc:	3501      	adds	r5, #1
 80140be:	68e3      	ldr	r3, [r4, #12]
 80140c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80140c2:	1a9b      	subs	r3, r3, r2
 80140c4:	42ab      	cmp	r3, r5
 80140c6:	dcf0      	bgt.n	80140aa <_printf_i+0x1f6>
 80140c8:	e7e9      	b.n	801409e <_printf_i+0x1ea>
 80140ca:	2500      	movs	r5, #0
 80140cc:	e7f7      	b.n	80140be <_printf_i+0x20a>
 80140ce:	46c0      	nop			; (mov r8, r8)
 80140d0:	08016761 	.word	0x08016761
 80140d4:	08016772 	.word	0x08016772

080140d8 <_sbrk_r>:
 80140d8:	2300      	movs	r3, #0
 80140da:	b570      	push	{r4, r5, r6, lr}
 80140dc:	4d06      	ldr	r5, [pc, #24]	; (80140f8 <_sbrk_r+0x20>)
 80140de:	0004      	movs	r4, r0
 80140e0:	0008      	movs	r0, r1
 80140e2:	602b      	str	r3, [r5, #0]
 80140e4:	f7f3 ff4a 	bl	8007f7c <_sbrk>
 80140e8:	1c43      	adds	r3, r0, #1
 80140ea:	d103      	bne.n	80140f4 <_sbrk_r+0x1c>
 80140ec:	682b      	ldr	r3, [r5, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d000      	beq.n	80140f4 <_sbrk_r+0x1c>
 80140f2:	6023      	str	r3, [r4, #0]
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	46c0      	nop			; (mov r8, r8)
 80140f8:	20002be4 	.word	0x20002be4

080140fc <siscanf>:
 80140fc:	b40e      	push	{r1, r2, r3}
 80140fe:	b530      	push	{r4, r5, lr}
 8014100:	2381      	movs	r3, #129	; 0x81
 8014102:	b09c      	sub	sp, #112	; 0x70
 8014104:	466a      	mov	r2, sp
 8014106:	ac1f      	add	r4, sp, #124	; 0x7c
 8014108:	009b      	lsls	r3, r3, #2
 801410a:	cc20      	ldmia	r4!, {r5}
 801410c:	8293      	strh	r3, [r2, #20]
 801410e:	9002      	str	r0, [sp, #8]
 8014110:	9006      	str	r0, [sp, #24]
 8014112:	f7eb fff9 	bl	8000108 <strlen>
 8014116:	4b0b      	ldr	r3, [pc, #44]	; (8014144 <siscanf+0x48>)
 8014118:	466a      	mov	r2, sp
 801411a:	930b      	str	r3, [sp, #44]	; 0x2c
 801411c:	2300      	movs	r3, #0
 801411e:	9003      	str	r0, [sp, #12]
 8014120:	9007      	str	r0, [sp, #28]
 8014122:	4809      	ldr	r0, [pc, #36]	; (8014148 <siscanf+0x4c>)
 8014124:	930f      	str	r3, [sp, #60]	; 0x3c
 8014126:	9314      	str	r3, [sp, #80]	; 0x50
 8014128:	3b01      	subs	r3, #1
 801412a:	82d3      	strh	r3, [r2, #22]
 801412c:	a902      	add	r1, sp, #8
 801412e:	0023      	movs	r3, r4
 8014130:	002a      	movs	r2, r5
 8014132:	6800      	ldr	r0, [r0, #0]
 8014134:	9401      	str	r4, [sp, #4]
 8014136:	f000 f98b 	bl	8014450 <__ssvfiscanf_r>
 801413a:	b01c      	add	sp, #112	; 0x70
 801413c:	bc30      	pop	{r4, r5}
 801413e:	bc08      	pop	{r3}
 8014140:	b003      	add	sp, #12
 8014142:	4718      	bx	r3
 8014144:	0801414d 	.word	0x0801414d
 8014148:	200001f4 	.word	0x200001f4

0801414c <__seofread>:
 801414c:	2000      	movs	r0, #0
 801414e:	4770      	bx	lr

08014150 <strcpy>:
 8014150:	0003      	movs	r3, r0
 8014152:	780a      	ldrb	r2, [r1, #0]
 8014154:	3101      	adds	r1, #1
 8014156:	701a      	strb	r2, [r3, #0]
 8014158:	3301      	adds	r3, #1
 801415a:	2a00      	cmp	r2, #0
 801415c:	d1f9      	bne.n	8014152 <strcpy+0x2>
 801415e:	4770      	bx	lr

08014160 <strncmp>:
 8014160:	b530      	push	{r4, r5, lr}
 8014162:	0005      	movs	r5, r0
 8014164:	1e10      	subs	r0, r2, #0
 8014166:	d00b      	beq.n	8014180 <strncmp+0x20>
 8014168:	2400      	movs	r4, #0
 801416a:	3a01      	subs	r2, #1
 801416c:	5d2b      	ldrb	r3, [r5, r4]
 801416e:	5d08      	ldrb	r0, [r1, r4]
 8014170:	4283      	cmp	r3, r0
 8014172:	d104      	bne.n	801417e <strncmp+0x1e>
 8014174:	4294      	cmp	r4, r2
 8014176:	d002      	beq.n	801417e <strncmp+0x1e>
 8014178:	3401      	adds	r4, #1
 801417a:	2b00      	cmp	r3, #0
 801417c:	d1f6      	bne.n	801416c <strncmp+0xc>
 801417e:	1a18      	subs	r0, r3, r0
 8014180:	bd30      	pop	{r4, r5, pc}
	...

08014184 <_strtoul_l.isra.0>:
 8014184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014186:	001e      	movs	r6, r3
 8014188:	4b43      	ldr	r3, [pc, #268]	; (8014298 <_strtoul_l.isra.0+0x114>)
 801418a:	b087      	sub	sp, #28
 801418c:	000f      	movs	r7, r1
 801418e:	9101      	str	r1, [sp, #4]
 8014190:	469c      	mov	ip, r3
 8014192:	2108      	movs	r1, #8
 8014194:	9005      	str	r0, [sp, #20]
 8014196:	9202      	str	r2, [sp, #8]
 8014198:	003b      	movs	r3, r7
 801419a:	4662      	mov	r2, ip
 801419c:	781c      	ldrb	r4, [r3, #0]
 801419e:	1c7d      	adds	r5, r7, #1
 80141a0:	5d10      	ldrb	r0, [r2, r4]
 80141a2:	002f      	movs	r7, r5
 80141a4:	0002      	movs	r2, r0
 80141a6:	400a      	ands	r2, r1
 80141a8:	4208      	tst	r0, r1
 80141aa:	d1f5      	bne.n	8014198 <_strtoul_l.isra.0+0x14>
 80141ac:	2c2d      	cmp	r4, #45	; 0x2d
 80141ae:	d13a      	bne.n	8014226 <_strtoul_l.isra.0+0xa2>
 80141b0:	2701      	movs	r7, #1
 80141b2:	782c      	ldrb	r4, [r5, #0]
 80141b4:	1c9d      	adds	r5, r3, #2
 80141b6:	2e00      	cmp	r6, #0
 80141b8:	d069      	beq.n	801428e <_strtoul_l.isra.0+0x10a>
 80141ba:	2e10      	cmp	r6, #16
 80141bc:	d109      	bne.n	80141d2 <_strtoul_l.isra.0+0x4e>
 80141be:	2c30      	cmp	r4, #48	; 0x30
 80141c0:	d107      	bne.n	80141d2 <_strtoul_l.isra.0+0x4e>
 80141c2:	2220      	movs	r2, #32
 80141c4:	782b      	ldrb	r3, [r5, #0]
 80141c6:	4393      	bics	r3, r2
 80141c8:	2b58      	cmp	r3, #88	; 0x58
 80141ca:	d15b      	bne.n	8014284 <_strtoul_l.isra.0+0x100>
 80141cc:	2610      	movs	r6, #16
 80141ce:	786c      	ldrb	r4, [r5, #1]
 80141d0:	3502      	adds	r5, #2
 80141d2:	2001      	movs	r0, #1
 80141d4:	0031      	movs	r1, r6
 80141d6:	4240      	negs	r0, r0
 80141d8:	f7eb ffb2 	bl	8000140 <__udivsi3>
 80141dc:	9003      	str	r0, [sp, #12]
 80141de:	2001      	movs	r0, #1
 80141e0:	0031      	movs	r1, r6
 80141e2:	4240      	negs	r0, r0
 80141e4:	f7ec f832 	bl	800024c <__aeabi_uidivmod>
 80141e8:	2300      	movs	r3, #0
 80141ea:	9104      	str	r1, [sp, #16]
 80141ec:	2101      	movs	r1, #1
 80141ee:	2201      	movs	r2, #1
 80141f0:	0018      	movs	r0, r3
 80141f2:	468c      	mov	ip, r1
 80141f4:	4252      	negs	r2, r2
 80141f6:	0021      	movs	r1, r4
 80141f8:	3930      	subs	r1, #48	; 0x30
 80141fa:	2909      	cmp	r1, #9
 80141fc:	d81a      	bhi.n	8014234 <_strtoul_l.isra.0+0xb0>
 80141fe:	000c      	movs	r4, r1
 8014200:	42a6      	cmp	r6, r4
 8014202:	dd25      	ble.n	8014250 <_strtoul_l.isra.0+0xcc>
 8014204:	2b00      	cmp	r3, #0
 8014206:	db21      	blt.n	801424c <_strtoul_l.isra.0+0xc8>
 8014208:	9903      	ldr	r1, [sp, #12]
 801420a:	0013      	movs	r3, r2
 801420c:	4281      	cmp	r1, r0
 801420e:	d307      	bcc.n	8014220 <_strtoul_l.isra.0+0x9c>
 8014210:	d103      	bne.n	801421a <_strtoul_l.isra.0+0x96>
 8014212:	9904      	ldr	r1, [sp, #16]
 8014214:	0013      	movs	r3, r2
 8014216:	42a1      	cmp	r1, r4
 8014218:	db02      	blt.n	8014220 <_strtoul_l.isra.0+0x9c>
 801421a:	4663      	mov	r3, ip
 801421c:	4370      	muls	r0, r6
 801421e:	1820      	adds	r0, r4, r0
 8014220:	782c      	ldrb	r4, [r5, #0]
 8014222:	3501      	adds	r5, #1
 8014224:	e7e7      	b.n	80141f6 <_strtoul_l.isra.0+0x72>
 8014226:	2c2b      	cmp	r4, #43	; 0x2b
 8014228:	d001      	beq.n	801422e <_strtoul_l.isra.0+0xaa>
 801422a:	0017      	movs	r7, r2
 801422c:	e7c3      	b.n	80141b6 <_strtoul_l.isra.0+0x32>
 801422e:	782c      	ldrb	r4, [r5, #0]
 8014230:	1c9d      	adds	r5, r3, #2
 8014232:	e7fa      	b.n	801422a <_strtoul_l.isra.0+0xa6>
 8014234:	0021      	movs	r1, r4
 8014236:	3941      	subs	r1, #65	; 0x41
 8014238:	2919      	cmp	r1, #25
 801423a:	d801      	bhi.n	8014240 <_strtoul_l.isra.0+0xbc>
 801423c:	3c37      	subs	r4, #55	; 0x37
 801423e:	e7df      	b.n	8014200 <_strtoul_l.isra.0+0x7c>
 8014240:	0021      	movs	r1, r4
 8014242:	3961      	subs	r1, #97	; 0x61
 8014244:	2919      	cmp	r1, #25
 8014246:	d803      	bhi.n	8014250 <_strtoul_l.isra.0+0xcc>
 8014248:	3c57      	subs	r4, #87	; 0x57
 801424a:	e7d9      	b.n	8014200 <_strtoul_l.isra.0+0x7c>
 801424c:	0013      	movs	r3, r2
 801424e:	e7e7      	b.n	8014220 <_strtoul_l.isra.0+0x9c>
 8014250:	2b00      	cmp	r3, #0
 8014252:	da09      	bge.n	8014268 <_strtoul_l.isra.0+0xe4>
 8014254:	2322      	movs	r3, #34	; 0x22
 8014256:	2001      	movs	r0, #1
 8014258:	9a05      	ldr	r2, [sp, #20]
 801425a:	4240      	negs	r0, r0
 801425c:	6013      	str	r3, [r2, #0]
 801425e:	9b02      	ldr	r3, [sp, #8]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d109      	bne.n	8014278 <_strtoul_l.isra.0+0xf4>
 8014264:	b007      	add	sp, #28
 8014266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014268:	2f00      	cmp	r7, #0
 801426a:	d000      	beq.n	801426e <_strtoul_l.isra.0+0xea>
 801426c:	4240      	negs	r0, r0
 801426e:	9a02      	ldr	r2, [sp, #8]
 8014270:	2a00      	cmp	r2, #0
 8014272:	d0f7      	beq.n	8014264 <_strtoul_l.isra.0+0xe0>
 8014274:	2b00      	cmp	r3, #0
 8014276:	d001      	beq.n	801427c <_strtoul_l.isra.0+0xf8>
 8014278:	1e6b      	subs	r3, r5, #1
 801427a:	9301      	str	r3, [sp, #4]
 801427c:	9b02      	ldr	r3, [sp, #8]
 801427e:	9a01      	ldr	r2, [sp, #4]
 8014280:	601a      	str	r2, [r3, #0]
 8014282:	e7ef      	b.n	8014264 <_strtoul_l.isra.0+0xe0>
 8014284:	2430      	movs	r4, #48	; 0x30
 8014286:	2e00      	cmp	r6, #0
 8014288:	d1a3      	bne.n	80141d2 <_strtoul_l.isra.0+0x4e>
 801428a:	3608      	adds	r6, #8
 801428c:	e7a1      	b.n	80141d2 <_strtoul_l.isra.0+0x4e>
 801428e:	2c30      	cmp	r4, #48	; 0x30
 8014290:	d097      	beq.n	80141c2 <_strtoul_l.isra.0+0x3e>
 8014292:	260a      	movs	r6, #10
 8014294:	e79d      	b.n	80141d2 <_strtoul_l.isra.0+0x4e>
 8014296:	46c0      	nop			; (mov r8, r8)
 8014298:	080165ed 	.word	0x080165ed

0801429c <_strtoul_r>:
 801429c:	b510      	push	{r4, lr}
 801429e:	f7ff ff71 	bl	8014184 <_strtoul_l.isra.0>
 80142a2:	bd10      	pop	{r4, pc}

080142a4 <strtoul>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	0013      	movs	r3, r2
 80142a8:	000a      	movs	r2, r1
 80142aa:	0001      	movs	r1, r0
 80142ac:	4802      	ldr	r0, [pc, #8]	; (80142b8 <strtoul+0x14>)
 80142ae:	6800      	ldr	r0, [r0, #0]
 80142b0:	f7ff ff68 	bl	8014184 <_strtoul_l.isra.0>
 80142b4:	bd10      	pop	{r4, pc}
 80142b6:	46c0      	nop			; (mov r8, r8)
 80142b8:	200001f4 	.word	0x200001f4

080142bc <__env_lock>:
 80142bc:	b510      	push	{r4, lr}
 80142be:	4802      	ldr	r0, [pc, #8]	; (80142c8 <__env_lock+0xc>)
 80142c0:	f7ff fb71 	bl	80139a6 <__retarget_lock_acquire_recursive>
 80142c4:	bd10      	pop	{r4, pc}
 80142c6:	46c0      	nop			; (mov r8, r8)
 80142c8:	20002bda 	.word	0x20002bda

080142cc <__env_unlock>:
 80142cc:	b510      	push	{r4, lr}
 80142ce:	4802      	ldr	r0, [pc, #8]	; (80142d8 <__env_unlock+0xc>)
 80142d0:	f7ff fb6b 	bl	80139aa <__retarget_lock_release_recursive>
 80142d4:	bd10      	pop	{r4, pc}
 80142d6:	46c0      	nop			; (mov r8, r8)
 80142d8:	20002bda 	.word	0x20002bda

080142dc <memchr>:
 80142dc:	b2c9      	uxtb	r1, r1
 80142de:	1882      	adds	r2, r0, r2
 80142e0:	4290      	cmp	r0, r2
 80142e2:	d101      	bne.n	80142e8 <memchr+0xc>
 80142e4:	2000      	movs	r0, #0
 80142e6:	4770      	bx	lr
 80142e8:	7803      	ldrb	r3, [r0, #0]
 80142ea:	428b      	cmp	r3, r1
 80142ec:	d0fb      	beq.n	80142e6 <memchr+0xa>
 80142ee:	3001      	adds	r0, #1
 80142f0:	e7f6      	b.n	80142e0 <memchr+0x4>

080142f2 <memcpy>:
 80142f2:	2300      	movs	r3, #0
 80142f4:	b510      	push	{r4, lr}
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d100      	bne.n	80142fc <memcpy+0xa>
 80142fa:	bd10      	pop	{r4, pc}
 80142fc:	5ccc      	ldrb	r4, [r1, r3]
 80142fe:	54c4      	strb	r4, [r0, r3]
 8014300:	3301      	adds	r3, #1
 8014302:	e7f8      	b.n	80142f6 <memcpy+0x4>

08014304 <memmove>:
 8014304:	b510      	push	{r4, lr}
 8014306:	4288      	cmp	r0, r1
 8014308:	d902      	bls.n	8014310 <memmove+0xc>
 801430a:	188b      	adds	r3, r1, r2
 801430c:	4298      	cmp	r0, r3
 801430e:	d303      	bcc.n	8014318 <memmove+0x14>
 8014310:	2300      	movs	r3, #0
 8014312:	e007      	b.n	8014324 <memmove+0x20>
 8014314:	5c8b      	ldrb	r3, [r1, r2]
 8014316:	5483      	strb	r3, [r0, r2]
 8014318:	3a01      	subs	r2, #1
 801431a:	d2fb      	bcs.n	8014314 <memmove+0x10>
 801431c:	bd10      	pop	{r4, pc}
 801431e:	5ccc      	ldrb	r4, [r1, r3]
 8014320:	54c4      	strb	r4, [r0, r3]
 8014322:	3301      	adds	r3, #1
 8014324:	429a      	cmp	r2, r3
 8014326:	d1fa      	bne.n	801431e <memmove+0x1a>
 8014328:	e7f8      	b.n	801431c <memmove+0x18>
	...

0801432c <__malloc_lock>:
 801432c:	b510      	push	{r4, lr}
 801432e:	4802      	ldr	r0, [pc, #8]	; (8014338 <__malloc_lock+0xc>)
 8014330:	f7ff fb39 	bl	80139a6 <__retarget_lock_acquire_recursive>
 8014334:	bd10      	pop	{r4, pc}
 8014336:	46c0      	nop			; (mov r8, r8)
 8014338:	20002bdc 	.word	0x20002bdc

0801433c <__malloc_unlock>:
 801433c:	b510      	push	{r4, lr}
 801433e:	4802      	ldr	r0, [pc, #8]	; (8014348 <__malloc_unlock+0xc>)
 8014340:	f7ff fb33 	bl	80139aa <__retarget_lock_release_recursive>
 8014344:	bd10      	pop	{r4, pc}
 8014346:	46c0      	nop			; (mov r8, r8)
 8014348:	20002bdc 	.word	0x20002bdc

0801434c <_realloc_r>:
 801434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801434e:	0007      	movs	r7, r0
 8014350:	000d      	movs	r5, r1
 8014352:	0016      	movs	r6, r2
 8014354:	2900      	cmp	r1, #0
 8014356:	d105      	bne.n	8014364 <_realloc_r+0x18>
 8014358:	0011      	movs	r1, r2
 801435a:	f7ff fb7b 	bl	8013a54 <_malloc_r>
 801435e:	0004      	movs	r4, r0
 8014360:	0020      	movs	r0, r4
 8014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014364:	2a00      	cmp	r2, #0
 8014366:	d103      	bne.n	8014370 <_realloc_r+0x24>
 8014368:	f7ff fb2a 	bl	80139c0 <_free_r>
 801436c:	0034      	movs	r4, r6
 801436e:	e7f7      	b.n	8014360 <_realloc_r+0x14>
 8014370:	f000 fbc2 	bl	8014af8 <_malloc_usable_size_r>
 8014374:	002c      	movs	r4, r5
 8014376:	42b0      	cmp	r0, r6
 8014378:	d2f2      	bcs.n	8014360 <_realloc_r+0x14>
 801437a:	0031      	movs	r1, r6
 801437c:	0038      	movs	r0, r7
 801437e:	f7ff fb69 	bl	8013a54 <_malloc_r>
 8014382:	1e04      	subs	r4, r0, #0
 8014384:	d0ec      	beq.n	8014360 <_realloc_r+0x14>
 8014386:	0029      	movs	r1, r5
 8014388:	0032      	movs	r2, r6
 801438a:	f7ff ffb2 	bl	80142f2 <memcpy>
 801438e:	0029      	movs	r1, r5
 8014390:	0038      	movs	r0, r7
 8014392:	f7ff fb15 	bl	80139c0 <_free_r>
 8014396:	e7e3      	b.n	8014360 <_realloc_r+0x14>

08014398 <_sungetc_r>:
 8014398:	b570      	push	{r4, r5, r6, lr}
 801439a:	0014      	movs	r4, r2
 801439c:	1c4b      	adds	r3, r1, #1
 801439e:	d103      	bne.n	80143a8 <_sungetc_r+0x10>
 80143a0:	2501      	movs	r5, #1
 80143a2:	426d      	negs	r5, r5
 80143a4:	0028      	movs	r0, r5
 80143a6:	bd70      	pop	{r4, r5, r6, pc}
 80143a8:	8993      	ldrh	r3, [r2, #12]
 80143aa:	2220      	movs	r2, #32
 80143ac:	4393      	bics	r3, r2
 80143ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80143b0:	81a3      	strh	r3, [r4, #12]
 80143b2:	b2ce      	uxtb	r6, r1
 80143b4:	6863      	ldr	r3, [r4, #4]
 80143b6:	b2cd      	uxtb	r5, r1
 80143b8:	2a00      	cmp	r2, #0
 80143ba:	d010      	beq.n	80143de <_sungetc_r+0x46>
 80143bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80143be:	429a      	cmp	r2, r3
 80143c0:	dd07      	ble.n	80143d2 <_sungetc_r+0x3a>
 80143c2:	6823      	ldr	r3, [r4, #0]
 80143c4:	3b01      	subs	r3, #1
 80143c6:	6023      	str	r3, [r4, #0]
 80143c8:	701e      	strb	r6, [r3, #0]
 80143ca:	6863      	ldr	r3, [r4, #4]
 80143cc:	3301      	adds	r3, #1
 80143ce:	6063      	str	r3, [r4, #4]
 80143d0:	e7e8      	b.n	80143a4 <_sungetc_r+0xc>
 80143d2:	0021      	movs	r1, r4
 80143d4:	f000 fb52 	bl	8014a7c <__submore>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d0f2      	beq.n	80143c2 <_sungetc_r+0x2a>
 80143dc:	e7e0      	b.n	80143a0 <_sungetc_r+0x8>
 80143de:	6921      	ldr	r1, [r4, #16]
 80143e0:	6822      	ldr	r2, [r4, #0]
 80143e2:	2900      	cmp	r1, #0
 80143e4:	d007      	beq.n	80143f6 <_sungetc_r+0x5e>
 80143e6:	4291      	cmp	r1, r2
 80143e8:	d205      	bcs.n	80143f6 <_sungetc_r+0x5e>
 80143ea:	1e51      	subs	r1, r2, #1
 80143ec:	7808      	ldrb	r0, [r1, #0]
 80143ee:	42a8      	cmp	r0, r5
 80143f0:	d101      	bne.n	80143f6 <_sungetc_r+0x5e>
 80143f2:	6021      	str	r1, [r4, #0]
 80143f4:	e7ea      	b.n	80143cc <_sungetc_r+0x34>
 80143f6:	6423      	str	r3, [r4, #64]	; 0x40
 80143f8:	0023      	movs	r3, r4
 80143fa:	3344      	adds	r3, #68	; 0x44
 80143fc:	6363      	str	r3, [r4, #52]	; 0x34
 80143fe:	2303      	movs	r3, #3
 8014400:	63a3      	str	r3, [r4, #56]	; 0x38
 8014402:	0023      	movs	r3, r4
 8014404:	3346      	adds	r3, #70	; 0x46
 8014406:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014408:	701e      	strb	r6, [r3, #0]
 801440a:	6023      	str	r3, [r4, #0]
 801440c:	2301      	movs	r3, #1
 801440e:	e7de      	b.n	80143ce <_sungetc_r+0x36>

08014410 <__ssrefill_r>:
 8014410:	b510      	push	{r4, lr}
 8014412:	000c      	movs	r4, r1
 8014414:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014416:	2900      	cmp	r1, #0
 8014418:	d00e      	beq.n	8014438 <__ssrefill_r+0x28>
 801441a:	0023      	movs	r3, r4
 801441c:	3344      	adds	r3, #68	; 0x44
 801441e:	4299      	cmp	r1, r3
 8014420:	d001      	beq.n	8014426 <__ssrefill_r+0x16>
 8014422:	f7ff facd 	bl	80139c0 <_free_r>
 8014426:	2000      	movs	r0, #0
 8014428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801442a:	6360      	str	r0, [r4, #52]	; 0x34
 801442c:	6063      	str	r3, [r4, #4]
 801442e:	4283      	cmp	r3, r0
 8014430:	d002      	beq.n	8014438 <__ssrefill_r+0x28>
 8014432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014434:	6023      	str	r3, [r4, #0]
 8014436:	bd10      	pop	{r4, pc}
 8014438:	6923      	ldr	r3, [r4, #16]
 801443a:	2001      	movs	r0, #1
 801443c:	6023      	str	r3, [r4, #0]
 801443e:	2300      	movs	r3, #0
 8014440:	89a2      	ldrh	r2, [r4, #12]
 8014442:	6063      	str	r3, [r4, #4]
 8014444:	3320      	adds	r3, #32
 8014446:	4313      	orrs	r3, r2
 8014448:	81a3      	strh	r3, [r4, #12]
 801444a:	4240      	negs	r0, r0
 801444c:	e7f3      	b.n	8014436 <__ssrefill_r+0x26>
	...

08014450 <__ssvfiscanf_r>:
 8014450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014452:	4cb5      	ldr	r4, [pc, #724]	; (8014728 <__ssvfiscanf_r+0x2d8>)
 8014454:	0005      	movs	r5, r0
 8014456:	44a5      	add	sp, r4
 8014458:	000c      	movs	r4, r1
 801445a:	2100      	movs	r1, #0
 801445c:	9148      	str	r1, [sp, #288]	; 0x120
 801445e:	9149      	str	r1, [sp, #292]	; 0x124
 8014460:	a905      	add	r1, sp, #20
 8014462:	914a      	str	r1, [sp, #296]	; 0x128
 8014464:	21be      	movs	r1, #190	; 0xbe
 8014466:	48b1      	ldr	r0, [pc, #708]	; (801472c <__ssvfiscanf_r+0x2dc>)
 8014468:	0049      	lsls	r1, r1, #1
 801446a:	ae45      	add	r6, sp, #276	; 0x114
 801446c:	5070      	str	r0, [r6, r1]
 801446e:	48b0      	ldr	r0, [pc, #704]	; (8014730 <__ssvfiscanf_r+0x2e0>)
 8014470:	3104      	adds	r1, #4
 8014472:	ae45      	add	r6, sp, #276	; 0x114
 8014474:	5070      	str	r0, [r6, r1]
 8014476:	9304      	str	r3, [sp, #16]
 8014478:	9101      	str	r1, [sp, #4]
 801447a:	7813      	ldrb	r3, [r2, #0]
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d100      	bne.n	8014484 <__ssvfiscanf_r+0x34>
 8014482:	e14f      	b.n	8014724 <__ssvfiscanf_r+0x2d4>
 8014484:	4fab      	ldr	r7, [pc, #684]	; (8014734 <__ssvfiscanf_r+0x2e4>)
 8014486:	2008      	movs	r0, #8
 8014488:	5cf9      	ldrb	r1, [r7, r3]
 801448a:	2308      	movs	r3, #8
 801448c:	1c56      	adds	r6, r2, #1
 801448e:	400b      	ands	r3, r1
 8014490:	4201      	tst	r1, r0
 8014492:	d01e      	beq.n	80144d2 <__ssvfiscanf_r+0x82>
 8014494:	6863      	ldr	r3, [r4, #4]
 8014496:	2b00      	cmp	r3, #0
 8014498:	dd11      	ble.n	80144be <__ssvfiscanf_r+0x6e>
 801449a:	2108      	movs	r1, #8
 801449c:	6823      	ldr	r3, [r4, #0]
 801449e:	781a      	ldrb	r2, [r3, #0]
 80144a0:	5cba      	ldrb	r2, [r7, r2]
 80144a2:	420a      	tst	r2, r1
 80144a4:	d101      	bne.n	80144aa <__ssvfiscanf_r+0x5a>
 80144a6:	0032      	movs	r2, r6
 80144a8:	e7e7      	b.n	801447a <__ssvfiscanf_r+0x2a>
 80144aa:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80144ac:	3301      	adds	r3, #1
 80144ae:	9200      	str	r2, [sp, #0]
 80144b0:	3201      	adds	r2, #1
 80144b2:	9249      	str	r2, [sp, #292]	; 0x124
 80144b4:	6862      	ldr	r2, [r4, #4]
 80144b6:	6023      	str	r3, [r4, #0]
 80144b8:	3a01      	subs	r2, #1
 80144ba:	6062      	str	r2, [r4, #4]
 80144bc:	e7ea      	b.n	8014494 <__ssvfiscanf_r+0x44>
 80144be:	9a01      	ldr	r2, [sp, #4]
 80144c0:	ab45      	add	r3, sp, #276	; 0x114
 80144c2:	589b      	ldr	r3, [r3, r2]
 80144c4:	0021      	movs	r1, r4
 80144c6:	0028      	movs	r0, r5
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	4798      	blx	r3
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d0e4      	beq.n	801449a <__ssvfiscanf_r+0x4a>
 80144d0:	e7e9      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 80144d2:	9900      	ldr	r1, [sp, #0]
 80144d4:	2925      	cmp	r1, #37	; 0x25
 80144d6:	d164      	bne.n	80145a2 <__ssvfiscanf_r+0x152>
 80144d8:	9347      	str	r3, [sp, #284]	; 0x11c
 80144da:	9345      	str	r3, [sp, #276]	; 0x114
 80144dc:	7853      	ldrb	r3, [r2, #1]
 80144de:	2b2a      	cmp	r3, #42	; 0x2a
 80144e0:	d102      	bne.n	80144e8 <__ssvfiscanf_r+0x98>
 80144e2:	3b1a      	subs	r3, #26
 80144e4:	9345      	str	r3, [sp, #276]	; 0x114
 80144e6:	1c96      	adds	r6, r2, #2
 80144e8:	0037      	movs	r7, r6
 80144ea:	200a      	movs	r0, #10
 80144ec:	7839      	ldrb	r1, [r7, #0]
 80144ee:	1c7b      	adds	r3, r7, #1
 80144f0:	9302      	str	r3, [sp, #8]
 80144f2:	000b      	movs	r3, r1
 80144f4:	3b30      	subs	r3, #48	; 0x30
 80144f6:	2b09      	cmp	r3, #9
 80144f8:	d91f      	bls.n	801453a <__ssvfiscanf_r+0xea>
 80144fa:	4e8f      	ldr	r6, [pc, #572]	; (8014738 <__ssvfiscanf_r+0x2e8>)
 80144fc:	2203      	movs	r2, #3
 80144fe:	0030      	movs	r0, r6
 8014500:	f7ff feec 	bl	80142dc <memchr>
 8014504:	2800      	cmp	r0, #0
 8014506:	d007      	beq.n	8014518 <__ssvfiscanf_r+0xc8>
 8014508:	2301      	movs	r3, #1
 801450a:	1b80      	subs	r0, r0, r6
 801450c:	4083      	lsls	r3, r0
 801450e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014510:	9f02      	ldr	r7, [sp, #8]
 8014512:	4313      	orrs	r3, r2
 8014514:	9203      	str	r2, [sp, #12]
 8014516:	9345      	str	r3, [sp, #276]	; 0x114
 8014518:	783b      	ldrb	r3, [r7, #0]
 801451a:	1c7e      	adds	r6, r7, #1
 801451c:	2b78      	cmp	r3, #120	; 0x78
 801451e:	d807      	bhi.n	8014530 <__ssvfiscanf_r+0xe0>
 8014520:	2b57      	cmp	r3, #87	; 0x57
 8014522:	d812      	bhi.n	801454a <__ssvfiscanf_r+0xfa>
 8014524:	2b25      	cmp	r3, #37	; 0x25
 8014526:	d03c      	beq.n	80145a2 <__ssvfiscanf_r+0x152>
 8014528:	d836      	bhi.n	8014598 <__ssvfiscanf_r+0x148>
 801452a:	2b00      	cmp	r3, #0
 801452c:	d100      	bne.n	8014530 <__ssvfiscanf_r+0xe0>
 801452e:	e0f6      	b.n	801471e <__ssvfiscanf_r+0x2ce>
 8014530:	2303      	movs	r3, #3
 8014532:	934b      	str	r3, [sp, #300]	; 0x12c
 8014534:	3307      	adds	r3, #7
 8014536:	9346      	str	r3, [sp, #280]	; 0x118
 8014538:	e076      	b.n	8014628 <__ssvfiscanf_r+0x1d8>
 801453a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801453c:	9f02      	ldr	r7, [sp, #8]
 801453e:	9303      	str	r3, [sp, #12]
 8014540:	4343      	muls	r3, r0
 8014542:	3b30      	subs	r3, #48	; 0x30
 8014544:	185b      	adds	r3, r3, r1
 8014546:	9347      	str	r3, [sp, #284]	; 0x11c
 8014548:	e7d0      	b.n	80144ec <__ssvfiscanf_r+0x9c>
 801454a:	0018      	movs	r0, r3
 801454c:	3858      	subs	r0, #88	; 0x58
 801454e:	2820      	cmp	r0, #32
 8014550:	d8ee      	bhi.n	8014530 <__ssvfiscanf_r+0xe0>
 8014552:	f7eb fdeb 	bl	800012c <__gnu_thumb1_case_shi>
 8014556:	0051      	.short	0x0051
 8014558:	ffedffed 	.word	0xffedffed
 801455c:	ffed0086 	.word	0xffed0086
 8014560:	ffedffed 	.word	0xffedffed
 8014564:	ffedffed 	.word	0xffedffed
 8014568:	ffedffed 	.word	0xffedffed
 801456c:	00600093 	.word	0x00600093
 8014570:	00240024 	.word	0x00240024
 8014574:	ffed0024 	.word	0xffed0024
 8014578:	ffed0062 	.word	0xffed0062
 801457c:	ffedffed 	.word	0xffedffed
 8014580:	009dffed 	.word	0x009dffed
 8014584:	004b0065 	.word	0x004b0065
 8014588:	ffedffed 	.word	0xffedffed
 801458c:	ffed009b 	.word	0xffed009b
 8014590:	ffed0060 	.word	0xffed0060
 8014594:	0051ffed 	.word	0x0051ffed
 8014598:	3b45      	subs	r3, #69	; 0x45
 801459a:	2b02      	cmp	r3, #2
 801459c:	d8c8      	bhi.n	8014530 <__ssvfiscanf_r+0xe0>
 801459e:	2305      	movs	r3, #5
 80145a0:	e041      	b.n	8014626 <__ssvfiscanf_r+0x1d6>
 80145a2:	6863      	ldr	r3, [r4, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	dd0f      	ble.n	80145c8 <__ssvfiscanf_r+0x178>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	9900      	ldr	r1, [sp, #0]
 80145ac:	781a      	ldrb	r2, [r3, #0]
 80145ae:	428a      	cmp	r2, r1
 80145b0:	d000      	beq.n	80145b4 <__ssvfiscanf_r+0x164>
 80145b2:	e0b7      	b.n	8014724 <__ssvfiscanf_r+0x2d4>
 80145b4:	3301      	adds	r3, #1
 80145b6:	6862      	ldr	r2, [r4, #4]
 80145b8:	6023      	str	r3, [r4, #0]
 80145ba:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80145bc:	3a01      	subs	r2, #1
 80145be:	9300      	str	r3, [sp, #0]
 80145c0:	3301      	adds	r3, #1
 80145c2:	6062      	str	r2, [r4, #4]
 80145c4:	9349      	str	r3, [sp, #292]	; 0x124
 80145c6:	e76e      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 80145c8:	9a01      	ldr	r2, [sp, #4]
 80145ca:	ab45      	add	r3, sp, #276	; 0x114
 80145cc:	589b      	ldr	r3, [r3, r2]
 80145ce:	0021      	movs	r1, r4
 80145d0:	0028      	movs	r0, r5
 80145d2:	9302      	str	r3, [sp, #8]
 80145d4:	4798      	blx	r3
 80145d6:	2800      	cmp	r0, #0
 80145d8:	d0e6      	beq.n	80145a8 <__ssvfiscanf_r+0x158>
 80145da:	9848      	ldr	r0, [sp, #288]	; 0x120
 80145dc:	2800      	cmp	r0, #0
 80145de:	d000      	beq.n	80145e2 <__ssvfiscanf_r+0x192>
 80145e0:	e099      	b.n	8014716 <__ssvfiscanf_r+0x2c6>
 80145e2:	3801      	subs	r0, #1
 80145e4:	23a7      	movs	r3, #167	; 0xa7
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	449d      	add	sp, r3
 80145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80145ee:	9200      	str	r2, [sp, #0]
 80145f0:	2220      	movs	r2, #32
 80145f2:	9900      	ldr	r1, [sp, #0]
 80145f4:	430a      	orrs	r2, r1
 80145f6:	9245      	str	r2, [sp, #276]	; 0x114
 80145f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80145fa:	9200      	str	r2, [sp, #0]
 80145fc:	2280      	movs	r2, #128	; 0x80
 80145fe:	9900      	ldr	r1, [sp, #0]
 8014600:	0092      	lsls	r2, r2, #2
 8014602:	430a      	orrs	r2, r1
 8014604:	9245      	str	r2, [sp, #276]	; 0x114
 8014606:	2210      	movs	r2, #16
 8014608:	9246      	str	r2, [sp, #280]	; 0x118
 801460a:	226e      	movs	r2, #110	; 0x6e
 801460c:	429a      	cmp	r2, r3
 801460e:	419b      	sbcs	r3, r3
 8014610:	425b      	negs	r3, r3
 8014612:	3303      	adds	r3, #3
 8014614:	e007      	b.n	8014626 <__ssvfiscanf_r+0x1d6>
 8014616:	220a      	movs	r2, #10
 8014618:	e7f6      	b.n	8014608 <__ssvfiscanf_r+0x1b8>
 801461a:	2300      	movs	r3, #0
 801461c:	9346      	str	r3, [sp, #280]	; 0x118
 801461e:	e7f8      	b.n	8014612 <__ssvfiscanf_r+0x1c2>
 8014620:	2308      	movs	r3, #8
 8014622:	9346      	str	r3, [sp, #280]	; 0x118
 8014624:	3b04      	subs	r3, #4
 8014626:	934b      	str	r3, [sp, #300]	; 0x12c
 8014628:	6863      	ldr	r3, [r4, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	dd3f      	ble.n	80146ae <__ssvfiscanf_r+0x25e>
 801462e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014630:	9300      	str	r3, [sp, #0]
 8014632:	065b      	lsls	r3, r3, #25
 8014634:	d406      	bmi.n	8014644 <__ssvfiscanf_r+0x1f4>
 8014636:	6823      	ldr	r3, [r4, #0]
 8014638:	493e      	ldr	r1, [pc, #248]	; (8014734 <__ssvfiscanf_r+0x2e4>)
 801463a:	781a      	ldrb	r2, [r3, #0]
 801463c:	5c8a      	ldrb	r2, [r1, r2]
 801463e:	2108      	movs	r1, #8
 8014640:	420a      	tst	r2, r1
 8014642:	d13e      	bne.n	80146c2 <__ssvfiscanf_r+0x272>
 8014644:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8014646:	2b02      	cmp	r3, #2
 8014648:	dc51      	bgt.n	80146ee <__ssvfiscanf_r+0x29e>
 801464a:	0022      	movs	r2, r4
 801464c:	0028      	movs	r0, r5
 801464e:	ab04      	add	r3, sp, #16
 8014650:	a945      	add	r1, sp, #276	; 0x114
 8014652:	f000 f875 	bl	8014740 <_scanf_chars>
 8014656:	2801      	cmp	r0, #1
 8014658:	d064      	beq.n	8014724 <__ssvfiscanf_r+0x2d4>
 801465a:	2802      	cmp	r0, #2
 801465c:	d000      	beq.n	8014660 <__ssvfiscanf_r+0x210>
 801465e:	e722      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 8014660:	e7bb      	b.n	80145da <__ssvfiscanf_r+0x18a>
 8014662:	0031      	movs	r1, r6
 8014664:	a805      	add	r0, sp, #20
 8014666:	f000 f9cd 	bl	8014a04 <__sccl>
 801466a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801466c:	0006      	movs	r6, r0
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	2340      	movs	r3, #64	; 0x40
 8014672:	9a00      	ldr	r2, [sp, #0]
 8014674:	4313      	orrs	r3, r2
 8014676:	9345      	str	r3, [sp, #276]	; 0x114
 8014678:	2301      	movs	r3, #1
 801467a:	e7d4      	b.n	8014626 <__ssvfiscanf_r+0x1d6>
 801467c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801467e:	9300      	str	r3, [sp, #0]
 8014680:	2340      	movs	r3, #64	; 0x40
 8014682:	9a00      	ldr	r2, [sp, #0]
 8014684:	4313      	orrs	r3, r2
 8014686:	9345      	str	r3, [sp, #276]	; 0x114
 8014688:	2300      	movs	r3, #0
 801468a:	e7cc      	b.n	8014626 <__ssvfiscanf_r+0x1d6>
 801468c:	2302      	movs	r3, #2
 801468e:	e7ca      	b.n	8014626 <__ssvfiscanf_r+0x1d6>
 8014690:	9845      	ldr	r0, [sp, #276]	; 0x114
 8014692:	06c3      	lsls	r3, r0, #27
 8014694:	d500      	bpl.n	8014698 <__ssvfiscanf_r+0x248>
 8014696:	e706      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 8014698:	9b04      	ldr	r3, [sp, #16]
 801469a:	9a49      	ldr	r2, [sp, #292]	; 0x124
 801469c:	1d19      	adds	r1, r3, #4
 801469e:	9104      	str	r1, [sp, #16]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	07c7      	lsls	r7, r0, #31
 80146a4:	d501      	bpl.n	80146aa <__ssvfiscanf_r+0x25a>
 80146a6:	801a      	strh	r2, [r3, #0]
 80146a8:	e6fd      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 80146aa:	601a      	str	r2, [r3, #0]
 80146ac:	e6fb      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 80146ae:	9a01      	ldr	r2, [sp, #4]
 80146b0:	ab45      	add	r3, sp, #276	; 0x114
 80146b2:	589b      	ldr	r3, [r3, r2]
 80146b4:	0021      	movs	r1, r4
 80146b6:	0028      	movs	r0, r5
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	4798      	blx	r3
 80146bc:	2800      	cmp	r0, #0
 80146be:	d0b6      	beq.n	801462e <__ssvfiscanf_r+0x1de>
 80146c0:	e78b      	b.n	80145da <__ssvfiscanf_r+0x18a>
 80146c2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80146c4:	9200      	str	r2, [sp, #0]
 80146c6:	3201      	adds	r2, #1
 80146c8:	9249      	str	r2, [sp, #292]	; 0x124
 80146ca:	6862      	ldr	r2, [r4, #4]
 80146cc:	3a01      	subs	r2, #1
 80146ce:	6062      	str	r2, [r4, #4]
 80146d0:	2a00      	cmp	r2, #0
 80146d2:	dd02      	ble.n	80146da <__ssvfiscanf_r+0x28a>
 80146d4:	3301      	adds	r3, #1
 80146d6:	6023      	str	r3, [r4, #0]
 80146d8:	e7ad      	b.n	8014636 <__ssvfiscanf_r+0x1e6>
 80146da:	9a01      	ldr	r2, [sp, #4]
 80146dc:	ab45      	add	r3, sp, #276	; 0x114
 80146de:	589b      	ldr	r3, [r3, r2]
 80146e0:	0021      	movs	r1, r4
 80146e2:	0028      	movs	r0, r5
 80146e4:	9300      	str	r3, [sp, #0]
 80146e6:	4798      	blx	r3
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d0a4      	beq.n	8014636 <__ssvfiscanf_r+0x1e6>
 80146ec:	e775      	b.n	80145da <__ssvfiscanf_r+0x18a>
 80146ee:	2b04      	cmp	r3, #4
 80146f0:	dc06      	bgt.n	8014700 <__ssvfiscanf_r+0x2b0>
 80146f2:	0022      	movs	r2, r4
 80146f4:	0028      	movs	r0, r5
 80146f6:	ab04      	add	r3, sp, #16
 80146f8:	a945      	add	r1, sp, #276	; 0x114
 80146fa:	f000 f87f 	bl	80147fc <_scanf_i>
 80146fe:	e7aa      	b.n	8014656 <__ssvfiscanf_r+0x206>
 8014700:	4b0e      	ldr	r3, [pc, #56]	; (801473c <__ssvfiscanf_r+0x2ec>)
 8014702:	2b00      	cmp	r3, #0
 8014704:	d100      	bne.n	8014708 <__ssvfiscanf_r+0x2b8>
 8014706:	e6ce      	b.n	80144a6 <__ssvfiscanf_r+0x56>
 8014708:	0022      	movs	r2, r4
 801470a:	0028      	movs	r0, r5
 801470c:	ab04      	add	r3, sp, #16
 801470e:	a945      	add	r1, sp, #276	; 0x114
 8014710:	e000      	b.n	8014714 <__ssvfiscanf_r+0x2c4>
 8014712:	bf00      	nop
 8014714:	e79f      	b.n	8014656 <__ssvfiscanf_r+0x206>
 8014716:	89a3      	ldrh	r3, [r4, #12]
 8014718:	065b      	lsls	r3, r3, #25
 801471a:	d400      	bmi.n	801471e <__ssvfiscanf_r+0x2ce>
 801471c:	e762      	b.n	80145e4 <__ssvfiscanf_r+0x194>
 801471e:	2001      	movs	r0, #1
 8014720:	4240      	negs	r0, r0
 8014722:	e75f      	b.n	80145e4 <__ssvfiscanf_r+0x194>
 8014724:	9848      	ldr	r0, [sp, #288]	; 0x120
 8014726:	e75d      	b.n	80145e4 <__ssvfiscanf_r+0x194>
 8014728:	fffffd64 	.word	0xfffffd64
 801472c:	08014399 	.word	0x08014399
 8014730:	08014411 	.word	0x08014411
 8014734:	080165ed 	.word	0x080165ed
 8014738:	08016756 	.word	0x08016756
 801473c:	00000000 	.word	0x00000000

08014740 <_scanf_chars>:
 8014740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014742:	0015      	movs	r5, r2
 8014744:	688a      	ldr	r2, [r1, #8]
 8014746:	000c      	movs	r4, r1
 8014748:	9001      	str	r0, [sp, #4]
 801474a:	2a00      	cmp	r2, #0
 801474c:	d105      	bne.n	801475a <_scanf_chars+0x1a>
 801474e:	6989      	ldr	r1, [r1, #24]
 8014750:	3201      	adds	r2, #1
 8014752:	2900      	cmp	r1, #0
 8014754:	d000      	beq.n	8014758 <_scanf_chars+0x18>
 8014756:	3a02      	subs	r2, #2
 8014758:	60a2      	str	r2, [r4, #8]
 801475a:	6822      	ldr	r2, [r4, #0]
 801475c:	06d2      	lsls	r2, r2, #27
 801475e:	d403      	bmi.n	8014768 <_scanf_chars+0x28>
 8014760:	681a      	ldr	r2, [r3, #0]
 8014762:	1d11      	adds	r1, r2, #4
 8014764:	6019      	str	r1, [r3, #0]
 8014766:	6817      	ldr	r7, [r2, #0]
 8014768:	2600      	movs	r6, #0
 801476a:	69a0      	ldr	r0, [r4, #24]
 801476c:	2800      	cmp	r0, #0
 801476e:	d013      	beq.n	8014798 <_scanf_chars+0x58>
 8014770:	2801      	cmp	r0, #1
 8014772:	d108      	bne.n	8014786 <_scanf_chars+0x46>
 8014774:	682b      	ldr	r3, [r5, #0]
 8014776:	6962      	ldr	r2, [r4, #20]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	5cd3      	ldrb	r3, [r2, r3]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d10b      	bne.n	8014798 <_scanf_chars+0x58>
 8014780:	2e00      	cmp	r6, #0
 8014782:	d127      	bne.n	80147d4 <_scanf_chars+0x94>
 8014784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014786:	2802      	cmp	r0, #2
 8014788:	d124      	bne.n	80147d4 <_scanf_chars+0x94>
 801478a:	682b      	ldr	r3, [r5, #0]
 801478c:	4a1a      	ldr	r2, [pc, #104]	; (80147f8 <_scanf_chars+0xb8>)
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	5cd3      	ldrb	r3, [r2, r3]
 8014792:	2208      	movs	r2, #8
 8014794:	4213      	tst	r3, r2
 8014796:	d11d      	bne.n	80147d4 <_scanf_chars+0x94>
 8014798:	2210      	movs	r2, #16
 801479a:	6823      	ldr	r3, [r4, #0]
 801479c:	3601      	adds	r6, #1
 801479e:	4213      	tst	r3, r2
 80147a0:	d103      	bne.n	80147aa <_scanf_chars+0x6a>
 80147a2:	682b      	ldr	r3, [r5, #0]
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	703b      	strb	r3, [r7, #0]
 80147a8:	3701      	adds	r7, #1
 80147aa:	682a      	ldr	r2, [r5, #0]
 80147ac:	686b      	ldr	r3, [r5, #4]
 80147ae:	3201      	adds	r2, #1
 80147b0:	602a      	str	r2, [r5, #0]
 80147b2:	68a2      	ldr	r2, [r4, #8]
 80147b4:	3b01      	subs	r3, #1
 80147b6:	3a01      	subs	r2, #1
 80147b8:	606b      	str	r3, [r5, #4]
 80147ba:	60a2      	str	r2, [r4, #8]
 80147bc:	2a00      	cmp	r2, #0
 80147be:	d009      	beq.n	80147d4 <_scanf_chars+0x94>
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	dcd2      	bgt.n	801476a <_scanf_chars+0x2a>
 80147c4:	23c0      	movs	r3, #192	; 0xc0
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	0029      	movs	r1, r5
 80147ca:	58e3      	ldr	r3, [r4, r3]
 80147cc:	9801      	ldr	r0, [sp, #4]
 80147ce:	4798      	blx	r3
 80147d0:	2800      	cmp	r0, #0
 80147d2:	d0ca      	beq.n	801476a <_scanf_chars+0x2a>
 80147d4:	6822      	ldr	r2, [r4, #0]
 80147d6:	2310      	movs	r3, #16
 80147d8:	0011      	movs	r1, r2
 80147da:	4019      	ands	r1, r3
 80147dc:	421a      	tst	r2, r3
 80147de:	d106      	bne.n	80147ee <_scanf_chars+0xae>
 80147e0:	68e3      	ldr	r3, [r4, #12]
 80147e2:	3301      	adds	r3, #1
 80147e4:	60e3      	str	r3, [r4, #12]
 80147e6:	69a3      	ldr	r3, [r4, #24]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d000      	beq.n	80147ee <_scanf_chars+0xae>
 80147ec:	7039      	strb	r1, [r7, #0]
 80147ee:	6923      	ldr	r3, [r4, #16]
 80147f0:	2000      	movs	r0, #0
 80147f2:	199e      	adds	r6, r3, r6
 80147f4:	6126      	str	r6, [r4, #16]
 80147f6:	e7c5      	b.n	8014784 <_scanf_chars+0x44>
 80147f8:	080165ed 	.word	0x080165ed

080147fc <_scanf_i>:
 80147fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147fe:	000c      	movs	r4, r1
 8014800:	b08d      	sub	sp, #52	; 0x34
 8014802:	9302      	str	r3, [sp, #8]
 8014804:	4b79      	ldr	r3, [pc, #484]	; (80149ec <_scanf_i+0x1f0>)
 8014806:	0016      	movs	r6, r2
 8014808:	9005      	str	r0, [sp, #20]
 801480a:	aa09      	add	r2, sp, #36	; 0x24
 801480c:	cb23      	ldmia	r3!, {r0, r1, r5}
 801480e:	c223      	stmia	r2!, {r0, r1, r5}
 8014810:	4b77      	ldr	r3, [pc, #476]	; (80149f0 <_scanf_i+0x1f4>)
 8014812:	9306      	str	r3, [sp, #24]
 8014814:	69a3      	ldr	r3, [r4, #24]
 8014816:	2b03      	cmp	r3, #3
 8014818:	d001      	beq.n	801481e <_scanf_i+0x22>
 801481a:	4b76      	ldr	r3, [pc, #472]	; (80149f4 <_scanf_i+0x1f8>)
 801481c:	9306      	str	r3, [sp, #24]
 801481e:	22ae      	movs	r2, #174	; 0xae
 8014820:	2000      	movs	r0, #0
 8014822:	68a3      	ldr	r3, [r4, #8]
 8014824:	0052      	lsls	r2, r2, #1
 8014826:	1e59      	subs	r1, r3, #1
 8014828:	9004      	str	r0, [sp, #16]
 801482a:	4291      	cmp	r1, r2
 801482c:	d905      	bls.n	801483a <_scanf_i+0x3e>
 801482e:	3b5e      	subs	r3, #94	; 0x5e
 8014830:	3bff      	subs	r3, #255	; 0xff
 8014832:	9304      	str	r3, [sp, #16]
 8014834:	235e      	movs	r3, #94	; 0x5e
 8014836:	33ff      	adds	r3, #255	; 0xff
 8014838:	60a3      	str	r3, [r4, #8]
 801483a:	0023      	movs	r3, r4
 801483c:	331c      	adds	r3, #28
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	23d0      	movs	r3, #208	; 0xd0
 8014842:	2700      	movs	r7, #0
 8014844:	6822      	ldr	r2, [r4, #0]
 8014846:	011b      	lsls	r3, r3, #4
 8014848:	4313      	orrs	r3, r2
 801484a:	6023      	str	r3, [r4, #0]
 801484c:	9b01      	ldr	r3, [sp, #4]
 801484e:	9303      	str	r3, [sp, #12]
 8014850:	6833      	ldr	r3, [r6, #0]
 8014852:	a809      	add	r0, sp, #36	; 0x24
 8014854:	7819      	ldrb	r1, [r3, #0]
 8014856:	00bb      	lsls	r3, r7, #2
 8014858:	2202      	movs	r2, #2
 801485a:	5818      	ldr	r0, [r3, r0]
 801485c:	f7ff fd3e 	bl	80142dc <memchr>
 8014860:	2800      	cmp	r0, #0
 8014862:	d02b      	beq.n	80148bc <_scanf_i+0xc0>
 8014864:	2f01      	cmp	r7, #1
 8014866:	d162      	bne.n	801492e <_scanf_i+0x132>
 8014868:	6863      	ldr	r3, [r4, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <_scanf_i+0x80>
 801486e:	3308      	adds	r3, #8
 8014870:	6822      	ldr	r2, [r4, #0]
 8014872:	6063      	str	r3, [r4, #4]
 8014874:	33f9      	adds	r3, #249	; 0xf9
 8014876:	33ff      	adds	r3, #255	; 0xff
 8014878:	4313      	orrs	r3, r2
 801487a:	6023      	str	r3, [r4, #0]
 801487c:	4b5e      	ldr	r3, [pc, #376]	; (80149f8 <_scanf_i+0x1fc>)
 801487e:	6822      	ldr	r2, [r4, #0]
 8014880:	4013      	ands	r3, r2
 8014882:	6023      	str	r3, [r4, #0]
 8014884:	68a3      	ldr	r3, [r4, #8]
 8014886:	1e5a      	subs	r2, r3, #1
 8014888:	60a2      	str	r2, [r4, #8]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d016      	beq.n	80148bc <_scanf_i+0xc0>
 801488e:	6833      	ldr	r3, [r6, #0]
 8014890:	1c5a      	adds	r2, r3, #1
 8014892:	6032      	str	r2, [r6, #0]
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	9a03      	ldr	r2, [sp, #12]
 8014898:	7013      	strb	r3, [r2, #0]
 801489a:	6873      	ldr	r3, [r6, #4]
 801489c:	1c55      	adds	r5, r2, #1
 801489e:	3b01      	subs	r3, #1
 80148a0:	6073      	str	r3, [r6, #4]
 80148a2:	9503      	str	r5, [sp, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	dc09      	bgt.n	80148bc <_scanf_i+0xc0>
 80148a8:	23c0      	movs	r3, #192	; 0xc0
 80148aa:	005b      	lsls	r3, r3, #1
 80148ac:	58e3      	ldr	r3, [r4, r3]
 80148ae:	0031      	movs	r1, r6
 80148b0:	9805      	ldr	r0, [sp, #20]
 80148b2:	9307      	str	r3, [sp, #28]
 80148b4:	4798      	blx	r3
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d000      	beq.n	80148bc <_scanf_i+0xc0>
 80148ba:	e081      	b.n	80149c0 <_scanf_i+0x1c4>
 80148bc:	3701      	adds	r7, #1
 80148be:	2f03      	cmp	r7, #3
 80148c0:	d1c6      	bne.n	8014850 <_scanf_i+0x54>
 80148c2:	6863      	ldr	r3, [r4, #4]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d101      	bne.n	80148cc <_scanf_i+0xd0>
 80148c8:	330a      	adds	r3, #10
 80148ca:	6063      	str	r3, [r4, #4]
 80148cc:	2110      	movs	r1, #16
 80148ce:	2700      	movs	r7, #0
 80148d0:	6863      	ldr	r3, [r4, #4]
 80148d2:	6960      	ldr	r0, [r4, #20]
 80148d4:	1ac9      	subs	r1, r1, r3
 80148d6:	4b49      	ldr	r3, [pc, #292]	; (80149fc <_scanf_i+0x200>)
 80148d8:	18c9      	adds	r1, r1, r3
 80148da:	f000 f893 	bl	8014a04 <__sccl>
 80148de:	9d03      	ldr	r5, [sp, #12]
 80148e0:	68a3      	ldr	r3, [r4, #8]
 80148e2:	6822      	ldr	r2, [r4, #0]
 80148e4:	9303      	str	r3, [sp, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d041      	beq.n	801496e <_scanf_i+0x172>
 80148ea:	6831      	ldr	r1, [r6, #0]
 80148ec:	6963      	ldr	r3, [r4, #20]
 80148ee:	7808      	ldrb	r0, [r1, #0]
 80148f0:	5c1b      	ldrb	r3, [r3, r0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d03b      	beq.n	801496e <_scanf_i+0x172>
 80148f6:	2830      	cmp	r0, #48	; 0x30
 80148f8:	d129      	bne.n	801494e <_scanf_i+0x152>
 80148fa:	2380      	movs	r3, #128	; 0x80
 80148fc:	011b      	lsls	r3, r3, #4
 80148fe:	421a      	tst	r2, r3
 8014900:	d025      	beq.n	801494e <_scanf_i+0x152>
 8014902:	9b04      	ldr	r3, [sp, #16]
 8014904:	3701      	adds	r7, #1
 8014906:	2b00      	cmp	r3, #0
 8014908:	d005      	beq.n	8014916 <_scanf_i+0x11a>
 801490a:	001a      	movs	r2, r3
 801490c:	9b03      	ldr	r3, [sp, #12]
 801490e:	3a01      	subs	r2, #1
 8014910:	3301      	adds	r3, #1
 8014912:	9204      	str	r2, [sp, #16]
 8014914:	60a3      	str	r3, [r4, #8]
 8014916:	6873      	ldr	r3, [r6, #4]
 8014918:	3b01      	subs	r3, #1
 801491a:	6073      	str	r3, [r6, #4]
 801491c:	2b00      	cmp	r3, #0
 801491e:	dd1d      	ble.n	801495c <_scanf_i+0x160>
 8014920:	6833      	ldr	r3, [r6, #0]
 8014922:	3301      	adds	r3, #1
 8014924:	6033      	str	r3, [r6, #0]
 8014926:	68a3      	ldr	r3, [r4, #8]
 8014928:	3b01      	subs	r3, #1
 801492a:	60a3      	str	r3, [r4, #8]
 801492c:	e7d8      	b.n	80148e0 <_scanf_i+0xe4>
 801492e:	2f02      	cmp	r7, #2
 8014930:	d1a8      	bne.n	8014884 <_scanf_i+0x88>
 8014932:	21c0      	movs	r1, #192	; 0xc0
 8014934:	2380      	movs	r3, #128	; 0x80
 8014936:	6822      	ldr	r2, [r4, #0]
 8014938:	00c9      	lsls	r1, r1, #3
 801493a:	4011      	ands	r1, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	4299      	cmp	r1, r3
 8014940:	d1bf      	bne.n	80148c2 <_scanf_i+0xc6>
 8014942:	3bf1      	subs	r3, #241	; 0xf1
 8014944:	3bff      	subs	r3, #255	; 0xff
 8014946:	6063      	str	r3, [r4, #4]
 8014948:	33f0      	adds	r3, #240	; 0xf0
 801494a:	4313      	orrs	r3, r2
 801494c:	e799      	b.n	8014882 <_scanf_i+0x86>
 801494e:	4b2c      	ldr	r3, [pc, #176]	; (8014a00 <_scanf_i+0x204>)
 8014950:	4013      	ands	r3, r2
 8014952:	6023      	str	r3, [r4, #0]
 8014954:	780b      	ldrb	r3, [r1, #0]
 8014956:	702b      	strb	r3, [r5, #0]
 8014958:	3501      	adds	r5, #1
 801495a:	e7dc      	b.n	8014916 <_scanf_i+0x11a>
 801495c:	23c0      	movs	r3, #192	; 0xc0
 801495e:	005b      	lsls	r3, r3, #1
 8014960:	58e3      	ldr	r3, [r4, r3]
 8014962:	0031      	movs	r1, r6
 8014964:	9805      	ldr	r0, [sp, #20]
 8014966:	9303      	str	r3, [sp, #12]
 8014968:	4798      	blx	r3
 801496a:	2800      	cmp	r0, #0
 801496c:	d0db      	beq.n	8014926 <_scanf_i+0x12a>
 801496e:	6823      	ldr	r3, [r4, #0]
 8014970:	05db      	lsls	r3, r3, #23
 8014972:	d50e      	bpl.n	8014992 <_scanf_i+0x196>
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	429d      	cmp	r5, r3
 8014978:	d907      	bls.n	801498a <_scanf_i+0x18e>
 801497a:	23be      	movs	r3, #190	; 0xbe
 801497c:	3d01      	subs	r5, #1
 801497e:	005b      	lsls	r3, r3, #1
 8014980:	0032      	movs	r2, r6
 8014982:	7829      	ldrb	r1, [r5, #0]
 8014984:	58e3      	ldr	r3, [r4, r3]
 8014986:	9805      	ldr	r0, [sp, #20]
 8014988:	4798      	blx	r3
 801498a:	9b01      	ldr	r3, [sp, #4]
 801498c:	2001      	movs	r0, #1
 801498e:	429d      	cmp	r5, r3
 8014990:	d029      	beq.n	80149e6 <_scanf_i+0x1ea>
 8014992:	6821      	ldr	r1, [r4, #0]
 8014994:	2310      	movs	r3, #16
 8014996:	000a      	movs	r2, r1
 8014998:	401a      	ands	r2, r3
 801499a:	4219      	tst	r1, r3
 801499c:	d11c      	bne.n	80149d8 <_scanf_i+0x1dc>
 801499e:	702a      	strb	r2, [r5, #0]
 80149a0:	6863      	ldr	r3, [r4, #4]
 80149a2:	9901      	ldr	r1, [sp, #4]
 80149a4:	9805      	ldr	r0, [sp, #20]
 80149a6:	9e06      	ldr	r6, [sp, #24]
 80149a8:	47b0      	blx	r6
 80149aa:	9b02      	ldr	r3, [sp, #8]
 80149ac:	6821      	ldr	r1, [r4, #0]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	068a      	lsls	r2, r1, #26
 80149b2:	d507      	bpl.n	80149c4 <_scanf_i+0x1c8>
 80149b4:	1d1a      	adds	r2, r3, #4
 80149b6:	9902      	ldr	r1, [sp, #8]
 80149b8:	600a      	str	r2, [r1, #0]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	6018      	str	r0, [r3, #0]
 80149be:	e008      	b.n	80149d2 <_scanf_i+0x1d6>
 80149c0:	2700      	movs	r7, #0
 80149c2:	e7d4      	b.n	801496e <_scanf_i+0x172>
 80149c4:	1d1a      	adds	r2, r3, #4
 80149c6:	07ce      	lsls	r6, r1, #31
 80149c8:	d5f5      	bpl.n	80149b6 <_scanf_i+0x1ba>
 80149ca:	9902      	ldr	r1, [sp, #8]
 80149cc:	600a      	str	r2, [r1, #0]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	8018      	strh	r0, [r3, #0]
 80149d2:	68e3      	ldr	r3, [r4, #12]
 80149d4:	3301      	adds	r3, #1
 80149d6:	60e3      	str	r3, [r4, #12]
 80149d8:	2000      	movs	r0, #0
 80149da:	9b01      	ldr	r3, [sp, #4]
 80149dc:	1aed      	subs	r5, r5, r3
 80149de:	6923      	ldr	r3, [r4, #16]
 80149e0:	19ef      	adds	r7, r5, r7
 80149e2:	19df      	adds	r7, r3, r7
 80149e4:	6127      	str	r7, [r4, #16]
 80149e6:	b00d      	add	sp, #52	; 0x34
 80149e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ea:	46c0      	nop			; (mov r8, r8)
 80149ec:	0801643c 	.word	0x0801643c
 80149f0:	08013439 	.word	0x08013439
 80149f4:	0801429d 	.word	0x0801429d
 80149f8:	fffffaff 	.word	0xfffffaff
 80149fc:	0801678c 	.word	0x0801678c
 8014a00:	fffff6ff 	.word	0xfffff6ff

08014a04 <__sccl>:
 8014a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a06:	780b      	ldrb	r3, [r1, #0]
 8014a08:	0004      	movs	r4, r0
 8014a0a:	2b5e      	cmp	r3, #94	; 0x5e
 8014a0c:	d00c      	beq.n	8014a28 <__sccl+0x24>
 8014a0e:	1c48      	adds	r0, r1, #1
 8014a10:	2100      	movs	r1, #0
 8014a12:	0022      	movs	r2, r4
 8014a14:	1c65      	adds	r5, r4, #1
 8014a16:	35ff      	adds	r5, #255	; 0xff
 8014a18:	7011      	strb	r1, [r2, #0]
 8014a1a:	3201      	adds	r2, #1
 8014a1c:	42aa      	cmp	r2, r5
 8014a1e:	d1fb      	bne.n	8014a18 <__sccl+0x14>
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d105      	bne.n	8014a30 <__sccl+0x2c>
 8014a24:	3801      	subs	r0, #1
 8014a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a28:	784b      	ldrb	r3, [r1, #1]
 8014a2a:	1c88      	adds	r0, r1, #2
 8014a2c:	2101      	movs	r1, #1
 8014a2e:	e7f0      	b.n	8014a12 <__sccl+0xe>
 8014a30:	2201      	movs	r2, #1
 8014a32:	262d      	movs	r6, #45	; 0x2d
 8014a34:	4051      	eors	r1, r2
 8014a36:	0002      	movs	r2, r0
 8014a38:	54e1      	strb	r1, [r4, r3]
 8014a3a:	7815      	ldrb	r5, [r2, #0]
 8014a3c:	1c50      	adds	r0, r2, #1
 8014a3e:	2d2d      	cmp	r5, #45	; 0x2d
 8014a40:	d009      	beq.n	8014a56 <__sccl+0x52>
 8014a42:	2d5d      	cmp	r5, #93	; 0x5d
 8014a44:	d0ef      	beq.n	8014a26 <__sccl+0x22>
 8014a46:	2d00      	cmp	r5, #0
 8014a48:	d101      	bne.n	8014a4e <__sccl+0x4a>
 8014a4a:	0010      	movs	r0, r2
 8014a4c:	e7eb      	b.n	8014a26 <__sccl+0x22>
 8014a4e:	002b      	movs	r3, r5
 8014a50:	e7f1      	b.n	8014a36 <__sccl+0x32>
 8014a52:	0033      	movs	r3, r6
 8014a54:	e7ef      	b.n	8014a36 <__sccl+0x32>
 8014a56:	7855      	ldrb	r5, [r2, #1]
 8014a58:	2d5d      	cmp	r5, #93	; 0x5d
 8014a5a:	d0fa      	beq.n	8014a52 <__sccl+0x4e>
 8014a5c:	42ab      	cmp	r3, r5
 8014a5e:	dcf8      	bgt.n	8014a52 <__sccl+0x4e>
 8014a60:	0018      	movs	r0, r3
 8014a62:	3202      	adds	r2, #2
 8014a64:	3001      	adds	r0, #1
 8014a66:	5421      	strb	r1, [r4, r0]
 8014a68:	4285      	cmp	r5, r0
 8014a6a:	dcfb      	bgt.n	8014a64 <__sccl+0x60>
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	1c5f      	adds	r7, r3, #1
 8014a70:	42ab      	cmp	r3, r5
 8014a72:	da01      	bge.n	8014a78 <__sccl+0x74>
 8014a74:	1ae8      	subs	r0, r5, r3
 8014a76:	3801      	subs	r0, #1
 8014a78:	183b      	adds	r3, r7, r0
 8014a7a:	e7de      	b.n	8014a3a <__sccl+0x36>

08014a7c <__submore>:
 8014a7c:	000b      	movs	r3, r1
 8014a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a80:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8014a82:	3344      	adds	r3, #68	; 0x44
 8014a84:	000c      	movs	r4, r1
 8014a86:	429d      	cmp	r5, r3
 8014a88:	d11c      	bne.n	8014ac4 <__submore+0x48>
 8014a8a:	2680      	movs	r6, #128	; 0x80
 8014a8c:	00f6      	lsls	r6, r6, #3
 8014a8e:	0031      	movs	r1, r6
 8014a90:	f7fe ffe0 	bl	8013a54 <_malloc_r>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d102      	bne.n	8014a9e <__submore+0x22>
 8014a98:	2001      	movs	r0, #1
 8014a9a:	4240      	negs	r0, r0
 8014a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014a9e:	0023      	movs	r3, r4
 8014aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8014aa2:	63a6      	str	r6, [r4, #56]	; 0x38
 8014aa4:	3346      	adds	r3, #70	; 0x46
 8014aa6:	781a      	ldrb	r2, [r3, #0]
 8014aa8:	4b10      	ldr	r3, [pc, #64]	; (8014aec <__submore+0x70>)
 8014aaa:	54c2      	strb	r2, [r0, r3]
 8014aac:	0023      	movs	r3, r4
 8014aae:	3345      	adds	r3, #69	; 0x45
 8014ab0:	781a      	ldrb	r2, [r3, #0]
 8014ab2:	4b0f      	ldr	r3, [pc, #60]	; (8014af0 <__submore+0x74>)
 8014ab4:	54c2      	strb	r2, [r0, r3]
 8014ab6:	782a      	ldrb	r2, [r5, #0]
 8014ab8:	4b0e      	ldr	r3, [pc, #56]	; (8014af4 <__submore+0x78>)
 8014aba:	54c2      	strb	r2, [r0, r3]
 8014abc:	18c0      	adds	r0, r0, r3
 8014abe:	6020      	str	r0, [r4, #0]
 8014ac0:	2000      	movs	r0, #0
 8014ac2:	e7eb      	b.n	8014a9c <__submore+0x20>
 8014ac4:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8014ac6:	0029      	movs	r1, r5
 8014ac8:	0073      	lsls	r3, r6, #1
 8014aca:	001a      	movs	r2, r3
 8014acc:	9301      	str	r3, [sp, #4]
 8014ace:	f7ff fc3d 	bl	801434c <_realloc_r>
 8014ad2:	1e05      	subs	r5, r0, #0
 8014ad4:	d0e0      	beq.n	8014a98 <__submore+0x1c>
 8014ad6:	1987      	adds	r7, r0, r6
 8014ad8:	0001      	movs	r1, r0
 8014ada:	0032      	movs	r2, r6
 8014adc:	0038      	movs	r0, r7
 8014ade:	f7ff fc08 	bl	80142f2 <memcpy>
 8014ae2:	9b01      	ldr	r3, [sp, #4]
 8014ae4:	6027      	str	r7, [r4, #0]
 8014ae6:	6365      	str	r5, [r4, #52]	; 0x34
 8014ae8:	63a3      	str	r3, [r4, #56]	; 0x38
 8014aea:	e7e9      	b.n	8014ac0 <__submore+0x44>
 8014aec:	000003ff 	.word	0x000003ff
 8014af0:	000003fe 	.word	0x000003fe
 8014af4:	000003fd 	.word	0x000003fd

08014af8 <_malloc_usable_size_r>:
 8014af8:	1f0b      	subs	r3, r1, #4
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	1f18      	subs	r0, r3, #4
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	da01      	bge.n	8014b06 <_malloc_usable_size_r+0xe>
 8014b02:	580b      	ldr	r3, [r1, r0]
 8014b04:	18c0      	adds	r0, r0, r3
 8014b06:	4770      	bx	lr

08014b08 <_init>:
 8014b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b0a:	46c0      	nop			; (mov r8, r8)
 8014b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b0e:	bc08      	pop	{r3}
 8014b10:	469e      	mov	lr, r3
 8014b12:	4770      	bx	lr

08014b14 <_fini>:
 8014b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b16:	46c0      	nop			; (mov r8, r8)
 8014b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b1a:	bc08      	pop	{r3}
 8014b1c:	469e      	mov	lr, r3
 8014b1e:	4770      	bx	lr
