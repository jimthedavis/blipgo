
BLIPGO_F070CBT6_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  0800cff8  0800cff8  0001cff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d974  0800d974  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d974  0800d974  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d974  0800d974  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d974  0800d974  0001d974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d978  0800d978  0001d978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800d97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cf4  200002a4  0800dc20  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  0800dc20  00021f98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025816  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052a9  00000000  00000000  00045ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0004ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  0004c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e29  00000000  00000000  0004dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020afd  00000000  00000000  00065ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076a6a  00000000  00000000  000865c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a5c  00000000  00000000  000fd084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002a4 	.word	0x200002a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cfe0 	.word	0x0800cfe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002a8 	.word	0x200002a8
 8000104:	0800cfe0 	.word	0x0800cfe0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <beep>:
 *
 * return - none
 */

void beep(uint32_t time)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
return;
 800024c:	46c0      	nop			; (mov r8, r8)
    HAL_Delay(time);
    timer->BDTR = 0;
    timer->DIER = 0;
//    HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_RESET);
    return;
}
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <beep_init>:
 *
 * return - none
 */

void beep_init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    timer = TIM16;
 800025a:	4b28      	ldr	r3, [pc, #160]	; (80002fc <beep_init+0xa8>)
 800025c:	4a28      	ldr	r2, [pc, #160]	; (8000300 <beep_init+0xac>)
 800025e:	601a      	str	r2, [r3, #0]
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <beep_init+0xb0>)
 8000262:	699a      	ldr	r2, [r3, #24]
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <beep_init+0xb0>)
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	0289      	lsls	r1, r1, #10
 800026a:	430a      	orrs	r2, r1
 800026c:	619a      	str	r2, [r3, #24]
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <beep_init+0xb0>)
 8000270:	699a      	ldr	r2, [r3, #24]
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	029b      	lsls	r3, r3, #10
 8000276:	4013      	ands	r3, r2
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	683b      	ldr	r3, [r7, #0]

    initstruc.Pin = BEEPER_PIN;
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2280      	movs	r2, #128	; 0x80
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2202      	movs	r2, #2
 8000288:	605a      	str	r2, [r3, #4]
//    initstruc.Mode = GPIO_MODE_OUTPUT_PP; //zzz
    initstruc.Pull = GPIO_NOPULL;
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = GPIO_AF2_TIM16;
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2202      	movs	r2, #2
 800029a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BEEPER_PORT, &initstruc);
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4a1a      	ldr	r2, [pc, #104]	; (8000308 <beep_init+0xb4>)
 80002a0:	0019      	movs	r1, r3
 80002a2:	0010      	movs	r0, r2
 80002a4:	f003 fb68 	bl	8003978 <HAL_GPIO_Init>

//    HAL_GPIO_WritePin(BEEPER_PORT, BEEPER_PIN, GPIO_PIN_SET);



    timer->PSC = 47;
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <beep_init+0xa8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	222f      	movs	r2, #47	; 0x2f
 80002ae:	629a      	str	r2, [r3, #40]	; 0x28
    timer->ARR = 999;
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <beep_init+0xa8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a15      	ldr	r2, [pc, #84]	; (800030c <beep_init+0xb8>)
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c
    timer->CCR1 = 500;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <beep_init+0xa8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	22fa      	movs	r2, #250	; 0xfa
 80002be:	0052      	lsls	r2, r2, #1
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34
    timer->RCR = 0;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <beep_init+0xa8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2200      	movs	r2, #0
 80002c8:	631a      	str	r2, [r3, #48]	; 0x30
    timer->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <beep_init+0xa8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2268      	movs	r2, #104	; 0x68
 80002d0:	619a      	str	r2, [r3, #24]
    timer->CCER = TIM_CCER_CC1E;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <beep_init+0xa8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2201      	movs	r2, #1
 80002d8:	621a      	str	r2, [r3, #32]
    timer->BDTR = TIM_BDTR_MOE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <beep_init+0xa8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2280      	movs	r2, #128	; 0x80
 80002e0:	0212      	lsls	r2, r2, #8
 80002e2:	645a      	str	r2, [r3, #68]	; 0x44
    timer->CR1 = TIM_CR1_CEN;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <beep_init+0xa8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
    timer->EGR = TIM_EGR_UG;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <beep_init+0xa8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2201      	movs	r2, #1
 80002f2:	615a      	str	r2, [r3, #20]

    return;
 80002f4:	46c0      	nop			; (mov r8, r8)
}
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b006      	add	sp, #24
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200002c0 	.word	0x200002c0
 8000300:	40014400 	.word	0x40014400
 8000304:	40021000 	.word	0x40021000
 8000308:	48000400 	.word	0x48000400
 800030c:	000003e7 	.word	0x000003e7

08000310 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000314:	f3bf 8f4f 	dsb	sy
}
 8000318:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031a:	4b04      	ldr	r3, [pc, #16]	; (800032c <__NVIC_SystemReset+0x1c>)
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <__NVIC_SystemReset+0x20>)
 800031e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000320:	f3bf 8f4f 	dsb	sy
}
 8000324:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	e7fd      	b.n	8000326 <__NVIC_SystemReset+0x16>
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	e000ed00 	.word	0xe000ed00
 8000330:	05fa0004 	.word	0x05fa0004

08000334 <cmmain>:
 *
 * \return - none
 */

void cmmain(void)
{
 8000334:	b5b0      	push	{r4, r5, r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
    uint8_t flash_data;

    __HAL_RCC_AHB_FORCE_RESET();
 800033a:	4b89      	ldr	r3, [pc, #548]	; (8000560 <cmmain+0x22c>)
 800033c:	2201      	movs	r2, #1
 800033e:	4252      	negs	r2, r2
 8000340:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000342:	4b87      	ldr	r3, [pc, #540]	; (8000560 <cmmain+0x22c>)
 8000344:	699a      	ldr	r2, [r3, #24]
 8000346:	4b86      	ldr	r3, [pc, #536]	; (8000560 <cmmain+0x22c>)
 8000348:	2101      	movs	r1, #1
 800034a:	430a      	orrs	r2, r1
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	4b84      	ldr	r3, [pc, #528]	; (8000560 <cmmain+0x22c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	2201      	movs	r2, #1
 8000354:	4013      	ands	r3, r2
 8000356:	613b      	str	r3, [r7, #16]
 8000358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_AHB_RELEASE_RESET();
 800035a:	4b81      	ldr	r3, [pc, #516]	; (8000560 <cmmain+0x22c>)
 800035c:	2200      	movs	r2, #0
 800035e:	629a      	str	r2, [r3, #40]	; 0x28
    SystemClock_Config();
 8000360:	f001 fbe4 	bl	8001b2c <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b7e      	ldr	r3, [pc, #504]	; (8000560 <cmmain+0x22c>)
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	4b7d      	ldr	r3, [pc, #500]	; (8000560 <cmmain+0x22c>)
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0289      	lsls	r1, r1, #10
 800036e:	430a      	orrs	r2, r1
 8000370:	615a      	str	r2, [r3, #20]
 8000372:	4b7b      	ldr	r3, [pc, #492]	; (8000560 <cmmain+0x22c>)
 8000374:	695a      	ldr	r2, [r3, #20]
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	029b      	lsls	r3, r3, #10
 800037a:	4013      	ands	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b77      	ldr	r3, [pc, #476]	; (8000560 <cmmain+0x22c>)
 8000382:	695a      	ldr	r2, [r3, #20]
 8000384:	4b76      	ldr	r3, [pc, #472]	; (8000560 <cmmain+0x22c>)
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	02c9      	lsls	r1, r1, #11
 800038a:	430a      	orrs	r2, r1
 800038c:	615a      	str	r2, [r3, #20]
 800038e:	4b74      	ldr	r3, [pc, #464]	; (8000560 <cmmain+0x22c>)
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	02db      	lsls	r3, r3, #11
 8000396:	4013      	ands	r3, r2
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b70      	ldr	r3, [pc, #448]	; (8000560 <cmmain+0x22c>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	4b6f      	ldr	r3, [pc, #444]	; (8000560 <cmmain+0x22c>)
 80003a2:	2180      	movs	r1, #128	; 0x80
 80003a4:	0309      	lsls	r1, r1, #12
 80003a6:	430a      	orrs	r2, r1
 80003a8:	615a      	str	r2, [r3, #20]
 80003aa:	4b6d      	ldr	r3, [pc, #436]	; (8000560 <cmmain+0x22c>)
 80003ac:	695a      	ldr	r2, [r3, #20]
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	031b      	lsls	r3, r3, #12
 80003b2:	4013      	ands	r3, r2
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80003b8:	4b69      	ldr	r3, [pc, #420]	; (8000560 <cmmain+0x22c>)
 80003ba:	695a      	ldr	r2, [r3, #20]
 80003bc:	4b68      	ldr	r3, [pc, #416]	; (8000560 <cmmain+0x22c>)
 80003be:	2101      	movs	r1, #1
 80003c0:	430a      	orrs	r2, r1
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	4b66      	ldr	r3, [pc, #408]	; (8000560 <cmmain+0x22c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	2201      	movs	r2, #1
 80003ca:	4013      	ands	r3, r2
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]
    MX_SPI1_Init();
 80003d0:	f001 fc7a 	bl	8001cc8 <MX_SPI1_Init>
    MX_USB_DEVICE_Init();
 80003d4:	f00b fbc8 	bl	800bb68 <MX_USB_DEVICE_Init>
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2100      	movs	r1, #0
 80003dc:	200b      	movs	r0, #11
 80003de:	f003 fa1b 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80003e2:	200b      	movs	r0, #11
 80003e4:	f003 fa2d 	bl	8003842 <HAL_NVIC_EnableIRQ>

#if USA
    sprintf((char*)tx_string, "\r\nBlipGo %s  USA\r\n", firmware_version);
 80003e8:	4a5e      	ldr	r2, [pc, #376]	; (8000564 <cmmain+0x230>)
 80003ea:	495f      	ldr	r1, [pc, #380]	; (8000568 <cmmain+0x234>)
 80003ec:	4b5f      	ldr	r3, [pc, #380]	; (800056c <cmmain+0x238>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f00c f936 	bl	800c660 <siprintf>
    usb_write((uint8_t *)tx_string);
 80003f4:	4b5d      	ldr	r3, [pc, #372]	; (800056c <cmmain+0x238>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f002 fdce 	bl	8002f98 <usb_write>
#elif INDIA
    sprintf((char*)tx_string, "\r\nBlipGo %s  INDIA\r\n", firmware_version);
    usb_write((uint8_t *)tx_string);
#endif

    led_init();
 80003fc:	f001 f9fe 	bl	80017fc <led_init>
    quec_init();
 8000400:	f001 fcc4 	bl	8001d8c <quec_init>
    esp_init();
 8000404:	f000 fdf6 	bl	8000ff4 <esp_init>
    quec_3v8enbl(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f001 fca0 	bl	8001d4e <quec_3v8enbl>
    beep_init();
 800040e:	f7ff ff21 	bl	8000254 <beep_init>
    gsm_init();
 8000412:	f000 fe87 	bl	8001124 <gsm_init>

    beep(2000);
 8000416:	23fa      	movs	r3, #250	; 0xfa
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff12 	bl	8000244 <beep>
    led_green_set(LED_MODE_ON);
 8000420:	2001      	movs	r0, #1
 8000422:	f001 fa4f 	bl	80018c4 <led_green_set>
    led_red_set(LED_MODE_ON);
 8000426:	2001      	movs	r0, #1
 8000428:	f001 fa84 	bl	8001934 <led_red_set>
    led_yellow_set(LED_MODE_ON);
 800042c:	2001      	movs	r0, #1
 800042e:	f001 fab9 	bl	80019a4 <led_yellow_set>
    HAL_Delay(2000);
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	0018      	movs	r0, r3
 8000438:	f003 f91e 	bl	8003678 <HAL_Delay>
    led_green_set(LED_MODE_OFF);
 800043c:	2000      	movs	r0, #0
 800043e:	f001 fa41 	bl	80018c4 <led_green_set>
    led_red_set(LED_MODE_OFF);
 8000442:	2000      	movs	r0, #0
 8000444:	f001 fa76 	bl	8001934 <led_red_set>
    led_yellow_set(LED_MODE_OFF);
 8000448:	2000      	movs	r0, #0
 800044a:	f001 faab 	bl	80019a4 <led_yellow_set>

    usb_write((uint8_t *)"\r\nESP Turning ON\r\n");
 800044e:	4b48      	ldr	r3, [pc, #288]	; (8000570 <cmmain+0x23c>)
 8000450:	0018      	movs	r0, r3
 8000452:	f002 fda1 	bl	8002f98 <usb_write>
    esp_power_on();
 8000456:	f000 fe5f 	bl	8001118 <esp_power_on>

    sFLASH_Init();
 800045a:	f002 ff7b 	bl	8003354 <sFLASH_Init>
    while(1)
    {
    }
#endif

    flash_data = sFLASH_ReadByte1(0);
 800045e:	2517      	movs	r5, #23
 8000460:	197c      	adds	r4, r7, r5
 8000462:	2000      	movs	r0, #0
 8000464:	f002 fffb 	bl	800345e <sFLASH_ReadByte1>
 8000468:	0003      	movs	r3, r0
 800046a:	7023      	strb	r3, [r4, #0]

    if(flash_data == 0xff || flash_data == '#')
 800046c:	197b      	adds	r3, r7, r5
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2bff      	cmp	r3, #255	; 0xff
 8000472:	d003      	beq.n	800047c <cmmain+0x148>
 8000474:	197b      	adds	r3, r7, r5
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b23      	cmp	r3, #35	; 0x23
 800047a:	d104      	bne.n	8000486 <cmmain+0x152>
    {
        usb_write((uint8_t *)"\r\nMEMORY OK\r\n");
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <cmmain+0x240>)
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fd8a 	bl	8002f98 <usb_write>
 8000484:	e003      	b.n	800048e <cmmain+0x15a>
    }

    else
    {
        usb_write((uint8_t *)"\r\nMEMORY ERROR\r\n");
 8000486:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <cmmain+0x244>)
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fd85 	bl	8002f98 <usb_write>
    }

////////// DEVICE SETTINGS FROM FLASH

    if(!read_settings_from_flash(DEVICE_SETTINGS_ADDRESS))
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	015b      	lsls	r3, r3, #5
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fa64 	bl	8000960 <read_settings_from_flash>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d125      	bne.n	80004e8 <cmmain+0x1b4>
    {

        if(!read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS))
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	019b      	lsls	r3, r3, #6
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fa5d 	bl	8000960 <read_settings_from_flash>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d114      	bne.n	80004d4 <cmmain+0x1a0>
        {
            store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	015b      	lsls	r3, r3, #5
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fd16 	bl	8000ee0 <store_settings_to_flash>
            store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	019b      	lsls	r3, r3, #6
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd11 	bl	8000ee0 <store_settings_to_flash>
            read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	015b      	lsls	r3, r3, #5
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fa4c 	bl	8000960 <read_settings_from_flash>
            read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	019b      	lsls	r3, r3, #6
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa47 	bl	8000960 <read_settings_from_flash>
 80004d2:	e009      	b.n	80004e8 <cmmain+0x1b4>
        }

        else
        {
            store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	015b      	lsls	r3, r3, #5
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fd01 	bl	8000ee0 <store_settings_to_flash>
            read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	015b      	lsls	r3, r3, #5
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fa3c 	bl	8000960 <read_settings_from_flash>

    }

////////// RUNTIME PARAMETERS

    if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS))
 80004e8:	23c0      	movs	r3, #192	; 0xc0
 80004ea:	019b      	lsls	r3, r3, #6
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 f939 	bl	8000764 <read_runtime_parameters_from_flash>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d125      	bne.n	8000542 <cmmain+0x20e>
    {

        if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS))
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	01db      	lsls	r3, r3, #7
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 f932 	bl	8000764 <read_runtime_parameters_from_flash>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d114      	bne.n	800052e <cmmain+0x1fa>
        {
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8000504:	23c0      	movs	r3, #192	; 0xc0
 8000506:	019b      	lsls	r3, r3, #6
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fc8d 	bl	8000e28 <store_runtime_parameters_to_flash>
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	01db      	lsls	r3, r3, #7
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fc88 	bl	8000e28 <store_runtime_parameters_to_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 8000518:	23c0      	movs	r3, #192	; 0xc0
 800051a:	019b      	lsls	r3, r3, #6
 800051c:	0018      	movs	r0, r3
 800051e:	f000 f921 	bl	8000764 <read_runtime_parameters_from_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	01db      	lsls	r3, r3, #7
 8000526:	0018      	movs	r0, r3
 8000528:	f000 f91c 	bl	8000764 <read_runtime_parameters_from_flash>
 800052c:	e009      	b.n	8000542 <cmmain+0x20e>
        }

        else
        {
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 800052e:	23c0      	movs	r3, #192	; 0xc0
 8000530:	019b      	lsls	r3, r3, #6
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc78 	bl	8000e28 <store_runtime_parameters_to_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 8000538:	23c0      	movs	r3, #192	; 0xc0
 800053a:	019b      	lsls	r3, r3, #6
 800053c:	0018      	movs	r0, r3
 800053e:	f000 f911 	bl	8000764 <read_runtime_parameters_from_flash>
        }

    }

    led_green_set(LED_MODE_ON);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 f9be 	bl	80018c4 <led_green_set>
    usb_printf((uint8_t *)"INIT COMPLETE\r\n");
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <cmmain+0x248>)
 800054a:	0018      	movs	r0, r3
 800054c:	f002 fa40 	bl	80029d0 <usb_printf>

    while (1)
    {
    	quec_task();
 8000550:	f001 fd06 	bl	8001f60 <quec_task>
    	state_machine(&gsm_stmachine);
 8000554:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <cmmain+0x24c>)
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fc16 	bl	8000d88 <state_machine>
    	quec_task();
 800055c:	e7f8      	b.n	8000550 <cmmain+0x21c>
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000
 8000564:	0800d298 	.word	0x0800d298
 8000568:	0800cff8 	.word	0x0800cff8
 800056c:	20000454 	.word	0x20000454
 8000570:	0800d00c 	.word	0x0800d00c
 8000574:	0800d020 	.word	0x0800d020
 8000578:	0800d030 	.word	0x0800d030
 800057c:	0800d044 	.word	0x0800d044
 8000580:	20000d84 	.word	0x20000d84

08000584 <dma_ch4_5_ih>:
 *
 * \return - none
 */

void dma_ch4_5_ih(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
    uint32_t isrflags;

    isrflags = DMA1->ISR;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <dma_ch4_5_ih+0x2c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	607b      	str	r3, [r7, #4]

    if (isrflags & DMA_ISR_TCIF4)
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	019b      	lsls	r3, r3, #6
 8000596:	4013      	ands	r3, r2
 8000598:	d002      	beq.n	80005a0 <dma_ch4_5_ih+0x1c>
    {
        quec_dma_ih();
 800059a:	f001 ffd5 	bl	8002548 <quec_dma_ih>
        return;
 800059e:	e003      	b.n	80005a8 <dma_ch4_5_ih+0x24>
    }

    DMA1->IFCR = isrflags;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <dma_ch4_5_ih+0x2c>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
    return;
 80005a6:	46c0      	nop			; (mov r8, r8)
}
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40020000 	.word	0x40020000

080005b4 <crash>:
 *
 * \return - none
 */

void crash(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 80005b8:	f7ff feaa 	bl	8000310 <__NVIC_SystemReset>

080005bc <flush_array>:
 *
 * \return - none
 */

void flush_array(uint8_t *str, uint16_t len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	000a      	movs	r2, r1
 80005c6:	1cbb      	adds	r3, r7, #2
 80005c8:	801a      	strh	r2, [r3, #0]

    for(uint16_t i = 0; i < len; i++)
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
 80005d2:	e00b      	b.n	80005ec <flush_array+0x30>
    {
        str[i] = 0;
 80005d4:	210e      	movs	r1, #14
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	18d3      	adds	r3, r2, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < len; i++)
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	3201      	adds	r2, #1
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	230e      	movs	r3, #14
 80005ee:	18fa      	adds	r2, r7, r3
 80005f0:	1cbb      	adds	r3, r7, #2
 80005f2:	8812      	ldrh	r2, [r2, #0]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d3ec      	bcc.n	80005d4 <flush_array+0x18>
    }

    return;
 80005fa:	46c0      	nop			; (mov r8, r8)
}
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b004      	add	sp, #16
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <explode_string>:
//*************************************************************
// FUNCTION CAPTURE DATA FIELDS FROM A COMMA SEPERATED STRING
// STRING END CHAR *    STRING SEPERATOR ,
//*************************************************************
static void explode_string(unsigned char* buffer, uint16_t buffer_len, uint8_t sequence_number, uint8_t separator, uint8_t end_char_field, uint16_t field_len, uint8_t end_char_string)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	000c      	movs	r4, r1
 800060e:	0010      	movs	r0, r2
 8000610:	0019      	movs	r1, r3
 8000612:	1cbb      	adds	r3, r7, #2
 8000614:	1c22      	adds	r2, r4, #0
 8000616:	801a      	strh	r2, [r3, #0]
 8000618:	1c7b      	adds	r3, r7, #1
 800061a:	1c02      	adds	r2, r0, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	003b      	movs	r3, r7
 8000620:	1c0a      	adds	r2, r1, #0
 8000622:	701a      	strb	r2, [r3, #0]
    uint8_t comma_count=0;
 8000624:	230f      	movs	r3, #15
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
    uint16_t i=0, j=0;
 800062c:	240c      	movs	r4, #12
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	230a      	movs	r3, #10
 8000636:	18fb      	adds	r3, r7, r3
 8000638:	2200      	movs	r2, #0
 800063a:	801a      	strh	r2, [r3, #0]

    flush_array(temp_data, 255);
 800063c:	4b41      	ldr	r3, [pc, #260]	; (8000744 <explode_string+0x140>)
 800063e:	21ff      	movs	r1, #255	; 0xff
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ffbb 	bl	80005bc <flush_array>

    for(i=0; i< buffer_len; i++)
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	e069      	b.n	8000722 <explode_string+0x11e>
    {

        if(buffer[i]==separator)
 800064e:	230c      	movs	r3, #12
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	18d3      	adds	r3, r2, r3
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	003a      	movs	r2, r7
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	429a      	cmp	r2, r3
 8000660:	d105      	bne.n	800066e <explode_string+0x6a>
        {
            comma_count++;
 8000662:	210f      	movs	r1, #15
 8000664:	187b      	adds	r3, r7, r1
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	187b      	adds	r3, r7, r1
 800066a:	3201      	adds	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
        }

        if(buffer[i] == end_char_string)
 800066e:	230c      	movs	r3, #12
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	18d3      	adds	r3, r2, r3
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2228      	movs	r2, #40	; 0x28
 800067c:	18ba      	adds	r2, r7, r2
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d057      	beq.n	8000734 <explode_string+0x130>
        {
            break;
        }

        if(comma_count==sequence_number)//// if sequence found. Note: sequence number of data fields starts from 0
 8000684:	230f      	movs	r3, #15
 8000686:	18fa      	adds	r2, r7, r3
 8000688:	1c7b      	adds	r3, r7, #1
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	429a      	cmp	r2, r3
 8000690:	d141      	bne.n	8000716 <explode_string+0x112>
        {

            for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 8000692:	230a      	movs	r3, #10
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
 800069a:	e033      	b.n	8000704 <explode_string+0x100>
            {

                if(buffer[i+1+j]==end_char_field || buffer[i+1+j]==end_char_string)/// stop copy when , or * reached
 800069c:	200c      	movs	r0, #12
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	210a      	movs	r1, #10
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	001a      	movs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	189b      	adds	r3, r3, r2
 80006b2:	781a      	ldrb	r2, [r3, #0]
 80006b4:	2320      	movs	r3, #32
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d03c      	beq.n	8000738 <explode_string+0x134>
 80006be:	183b      	adds	r3, r7, r0
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	18d3      	adds	r3, r2, r3
 80006ca:	001a      	movs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2228      	movs	r2, #40	; 0x28
 80006d4:	18ba      	adds	r2, r7, r2
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d02d      	beq.n	8000738 <explode_string+0x134>
                {
                    break;
                }

                temp_data[j] = buffer[i+1+j];/////i+1+j  because already , at index i
 80006dc:	183b      	adds	r3, r7, r0
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	18d3      	adds	r3, r2, r3
 80006e8:	001a      	movs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	189a      	adds	r2, r3, r2
 80006ee:	0008      	movs	r0, r1
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	7811      	ldrb	r1, [r2, #0]
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <explode_string+0x140>)
 80006f8:	54d1      	strb	r1, [r2, r3]
            for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	881a      	ldrh	r2, [r3, #0]
 80006fe:	183b      	adds	r3, r7, r0
 8000700:	3201      	adds	r2, #1
 8000702:	801a      	strh	r2, [r3, #0]
 8000704:	230a      	movs	r3, #10
 8000706:	18fa      	adds	r2, r7, r3
 8000708:	2324      	movs	r3, #36	; 0x24
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	8812      	ldrh	r2, [r2, #0]
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3c3      	bcc.n	800069c <explode_string+0x98>
            }

            break;
 8000714:	e010      	b.n	8000738 <explode_string+0x134>
    for(i=0; i< buffer_len; i++)
 8000716:	210c      	movs	r1, #12
 8000718:	187b      	adds	r3, r7, r1
 800071a:	881a      	ldrh	r2, [r3, #0]
 800071c:	187b      	adds	r3, r7, r1
 800071e:	3201      	adds	r2, #1
 8000720:	801a      	strh	r2, [r3, #0]
 8000722:	230c      	movs	r3, #12
 8000724:	18fa      	adds	r2, r7, r3
 8000726:	1cbb      	adds	r3, r7, #2
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d200      	bcs.n	8000732 <explode_string+0x12e>
 8000730:	e78d      	b.n	800064e <explode_string+0x4a>
        }

    }

    return;
 8000732:	e002      	b.n	800073a <explode_string+0x136>
            break;
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	e000      	b.n	800073a <explode_string+0x136>
            break;
 8000738:	46c0      	nop			; (mov r8, r8)
    return;
 800073a:	46c0      	nop			; (mov r8, r8)
}
 800073c:	46bd      	mov	sp, r7
 800073e:	b005      	add	sp, #20
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	20000774 	.word	0x20000774

08000748 <flush_tx_string>:
 *
 * \return - none
 */

static void flush_tx_string(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    flush_array(tx_string, 400);
 800074c:	23c8      	movs	r3, #200	; 0xc8
 800074e:	005a      	lsls	r2, r3, #1
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <flush_tx_string+0x18>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f7ff ff31 	bl	80005bc <flush_array>
    return;
 800075a:	46c0      	nop			; (mov r8, r8)
}
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000454 	.word	0x20000454

08000764 <read_runtime_parameters_from_flash>:
 *
 * \return -
 */

static uint8_t read_runtime_parameters_from_flash(uint32_t sect_address)
{
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	46c6      	mov	lr, r8
 8000768:	b500      	push	{lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af04      	add	r7, sp, #16
 800076e:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	60fb      	str	r3, [r7, #12]
    uint16_t i=0;
 8000774:	240a      	movs	r4, #10
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	801a      	strh	r2, [r3, #0]

    flush_array(stored_parameters, 100);
 800077c:	4b6e      	ldr	r3, [pc, #440]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 800077e:	2164      	movs	r1, #100	; 0x64
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff ff1b 	bl	80005bc <flush_array>

    for(i=0; i<100; i++)
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	801a      	strh	r2, [r3, #0]
 800078c:	e01d      	b.n	80007ca <read_runtime_parameters_from_flash+0x66>
    {
        stored_parameters[i] = sFLASH_ReadByte1(loc++);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	60fa      	str	r2, [r7, #12]
 8000794:	250a      	movs	r5, #10
 8000796:	197a      	adds	r2, r7, r5
 8000798:	8814      	ldrh	r4, [r2, #0]
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fe5f 	bl	800345e <sFLASH_ReadByte1>
 80007a0:	0003      	movs	r3, r0
 80007a2:	001a      	movs	r2, r3
 80007a4:	4b64      	ldr	r3, [pc, #400]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007a6:	551a      	strb	r2, [r3, r4]

        if(stored_parameters[i]=='*' || stored_parameters[i]==0xff)
 80007a8:	197b      	adds	r3, r7, r5
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	4a62      	ldr	r2, [pc, #392]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007ae:	5cd3      	ldrb	r3, [r2, r3]
 80007b0:	2b2a      	cmp	r3, #42	; 0x2a
 80007b2:	d00f      	beq.n	80007d4 <read_runtime_parameters_from_flash+0x70>
 80007b4:	197b      	adds	r3, r7, r5
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	4a5f      	ldr	r2, [pc, #380]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007ba:	5cd3      	ldrb	r3, [r2, r3]
 80007bc:	2bff      	cmp	r3, #255	; 0xff
 80007be:	d009      	beq.n	80007d4 <read_runtime_parameters_from_flash+0x70>
    for(i=0; i<100; i++)
 80007c0:	197b      	adds	r3, r7, r5
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	197b      	adds	r3, r7, r5
 80007c6:	3201      	adds	r2, #1
 80007c8:	801a      	strh	r2, [r3, #0]
 80007ca:	230a      	movs	r3, #10
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	2b63      	cmp	r3, #99	; 0x63
 80007d2:	d9dc      	bls.n	800078e <read_runtime_parameters_from_flash+0x2a>
        }

    }

    //// TTL
    flush_tx_string();
 80007d4:	f7ff ffb8 	bl	8000748 <flush_tx_string>
    sprintf((char*)tx_string, "\r\n+READ: %s\r\n", stored_parameters);
 80007d8:	4a57      	ldr	r2, [pc, #348]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007da:	4958      	ldr	r1, [pc, #352]	; (800093c <read_runtime_parameters_from_flash+0x1d8>)
 80007dc:	4b58      	ldr	r3, [pc, #352]	; (8000940 <read_runtime_parameters_from_flash+0x1dc>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f00b ff3e 	bl	800c660 <siprintf>
    usb_write(tx_string);
 80007e4:	4b56      	ldr	r3, [pc, #344]	; (8000940 <read_runtime_parameters_from_flash+0x1dc>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fbd6 	bl	8002f98 <usb_write>



    if(stored_parameters[0]=='#' && stored_parameters[i]=='*')
 80007ec:	4b52      	ldr	r3, [pc, #328]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b23      	cmp	r3, #35	; 0x23
 80007f2:	d000      	beq.n	80007f6 <read_runtime_parameters_from_flash+0x92>
 80007f4:	e098      	b.n	8000928 <read_runtime_parameters_from_flash+0x1c4>
 80007f6:	230a      	movs	r3, #10
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	4a4e      	ldr	r2, [pc, #312]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	2b2a      	cmp	r3, #42	; 0x2a
 8000802:	d000      	beq.n	8000806 <read_runtime_parameters_from_flash+0xa2>
 8000804:	e090      	b.n	8000928 <read_runtime_parameters_from_flash+0x1c4>
    {
        explode_string(stored_parameters, 100, 1, ',', ',', 5, '*'); //////  meter_sequence_number
 8000806:	484c      	ldr	r0, [pc, #304]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 8000808:	232a      	movs	r3, #42	; 0x2a
 800080a:	9302      	str	r3, [sp, #8]
 800080c:	2305      	movs	r3, #5
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	232c      	movs	r3, #44	; 0x2c
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	232c      	movs	r3, #44	; 0x2c
 8000816:	2201      	movs	r2, #1
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	f7ff fef3 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 800081e:	4b49      	ldr	r3, [pc, #292]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d007      	beq.n	8000836 <read_runtime_parameters_from_flash+0xd2>
        {
            meter_sequence_number = atol((char*)temp_data);
 8000826:	4b47      	ldr	r3, [pc, #284]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000828:	0018      	movs	r0, r3
 800082a:	f00b fee1 	bl	800c5f0 <atol>
 800082e:	0003      	movs	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <read_runtime_parameters_from_flash+0x1e4>)
 8000834:	801a      	strh	r2, [r3, #0]
        }


        explode_string(stored_parameters, 100, 2, ',', ',', 8, '*');//////  mem_write_address
 8000836:	4840      	ldr	r0, [pc, #256]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 8000838:	232a      	movs	r3, #42	; 0x2a
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2308      	movs	r3, #8
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	232c      	movs	r3, #44	; 0x2c
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	232c      	movs	r3, #44	; 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	2164      	movs	r1, #100	; 0x64
 800084a:	f7ff fedb 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d007      	beq.n	8000866 <read_runtime_parameters_from_flash+0x102>
        {
            mem_write_address = atol((char*)temp_data);
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000858:	0018      	movs	r0, r3
 800085a:	f00b fec9 	bl	800c5f0 <atol>
 800085e:	0003      	movs	r3, r0
 8000860:	001a      	movs	r2, r3
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <read_runtime_parameters_from_flash+0x1e8>)
 8000864:	601a      	str	r2, [r3, #0]
        }


        explode_string(stored_parameters, 100, 3, ',', ',', 8, '*');//////  mem_read_address
 8000866:	4834      	ldr	r0, [pc, #208]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 8000868:	232a      	movs	r3, #42	; 0x2a
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2308      	movs	r3, #8
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	232c      	movs	r3, #44	; 0x2c
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	232c      	movs	r3, #44	; 0x2c
 8000876:	2203      	movs	r2, #3
 8000878:	2164      	movs	r1, #100	; 0x64
 800087a:	f7ff fec3 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d007      	beq.n	8000896 <read_runtime_parameters_from_flash+0x132>
        {
            mem_read_address = atol((char*)temp_data);
 8000886:	4b2f      	ldr	r3, [pc, #188]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 8000888:	0018      	movs	r0, r3
 800088a:	f00b feb1 	bl	800c5f0 <atol>
 800088e:	0003      	movs	r3, r0
 8000890:	001a      	movs	r2, r3
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <read_runtime_parameters_from_flash+0x1ec>)
 8000894:	601a      	str	r2, [r3, #0]
        }

        explode_string(stored_parameters, 100, 4, ',', ',', 5, '*');//////  total_downloaded_records_meter
 8000896:	4828      	ldr	r0, [pc, #160]	; (8000938 <read_runtime_parameters_from_flash+0x1d4>)
 8000898:	232a      	movs	r3, #42	; 0x2a
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2305      	movs	r3, #5
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	232c      	movs	r3, #44	; 0x2c
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	232c      	movs	r3, #44	; 0x2c
 80008a6:	2204      	movs	r2, #4
 80008a8:	2164      	movs	r1, #100	; 0x64
 80008aa:	f7ff feab 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d007      	beq.n	80008c6 <read_runtime_parameters_from_flash+0x162>
        {
            total_downloaded_records_meter = atol((char*)temp_data);
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <read_runtime_parameters_from_flash+0x1e0>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f00b fe99 	bl	800c5f0 <atol>
 80008be:	0003      	movs	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <read_runtime_parameters_from_flash+0x1f0>)
 80008c4:	801a      	strh	r2, [r3, #0]
        }


        //// TTL
        flush_tx_string();
 80008c6:	f7ff ff3f 	bl	8000748 <flush_tx_string>

        sprintf((char*)tx_string,
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <read_runtime_parameters_from_flash+0x1e4>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	4698      	mov	r8, r3
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <read_runtime_parameters_from_flash+0x1e8>)
 80008d2:	681d      	ldr	r5, [r3, #0]
                "+PARSED: LSN:%u\nWA:%u  Rem:%u\nRA:%u  Rem:%u\nTDRM:%u\r\n\r\n",
                (unsigned int)meter_sequence_number,
                (unsigned int)mem_write_address,
                (unsigned int)(mem_write_address-LOGS_START_ADDRESS) % 17,
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <read_runtime_parameters_from_flash+0x1e8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <read_runtime_parameters_from_flash+0x1f4>)
 80008da:	4694      	mov	ip, r2
 80008dc:	4463      	add	r3, ip
        sprintf((char*)tx_string,
 80008de:	2111      	movs	r1, #17
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff fca9 	bl	8000238 <__aeabi_uidivmod>
 80008e6:	000b      	movs	r3, r1
 80008e8:	001e      	movs	r6, r3
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <read_runtime_parameters_from_flash+0x1ec>)
 80008ec:	681c      	ldr	r4, [r3, #0]
                (unsigned int)mem_read_address,
                (unsigned int)(mem_read_address-LOGS_START_ADDRESS) % 17,
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <read_runtime_parameters_from_flash+0x1ec>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <read_runtime_parameters_from_flash+0x1f4>)
 80008f4:	4694      	mov	ip, r2
 80008f6:	4463      	add	r3, ip
        sprintf((char*)tx_string,
 80008f8:	2111      	movs	r1, #17
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fc9c 	bl	8000238 <__aeabi_uidivmod>
 8000900:	000b      	movs	r3, r1
 8000902:	001a      	movs	r2, r3
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <read_runtime_parameters_from_flash+0x1f0>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4914      	ldr	r1, [pc, #80]	; (800095c <read_runtime_parameters_from_flash+0x1f8>)
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <read_runtime_parameters_from_flash+0x1dc>)
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	9202      	str	r2, [sp, #8]
 8000910:	9401      	str	r4, [sp, #4]
 8000912:	9600      	str	r6, [sp, #0]
 8000914:	002b      	movs	r3, r5
 8000916:	4642      	mov	r2, r8
 8000918:	f00b fea2 	bl	800c660 <siprintf>
                (unsigned int)total_downloaded_records_meter);

        usb_write(tx_string);
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <read_runtime_parameters_from_flash+0x1dc>)
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fb3a 	bl	8002f98 <usb_write>
        return 1;
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <read_runtime_parameters_from_flash+0x1c6>
    }

    return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bc80      	pop	{r7}
 8000932:	46b8      	mov	r8, r7
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000710 	.word	0x20000710
 800093c:	0800d054 	.word	0x0800d054
 8000940:	20000454 	.word	0x20000454
 8000944:	20000774 	.word	0x20000774
 8000948:	20000874 	.word	0x20000874
 800094c:	2000004c 	.word	0x2000004c
 8000950:	20000050 	.word	0x20000050
 8000954:	20000876 	.word	0x20000876
 8000958:	ffffb000 	.word	0xffffb000
 800095c:	0800d064 	.word	0x0800d064

08000960 <read_settings_from_flash>:
 *
 * \return -
 */

static uint8_t read_settings_from_flash(uint32_t sect_address)
{
 8000960:	b5b0      	push	{r4, r5, r7, lr}
 8000962:	b090      	sub	sp, #64	; 0x40
 8000964:	af0c      	add	r7, sp, #48	; 0x30
 8000966:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	60fb      	str	r3, [r7, #12]
    uint16_t i=0;
 800096c:	240a      	movs	r4, #10
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]

    flush_array(stored_settings, 300);
 8000974:	2396      	movs	r3, #150	; 0x96
 8000976:	005a      	lsls	r2, r3, #1
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <read_settings_from_flash+0x2c>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff fe1d 	bl	80005bc <flush_array>

    for(i=0; i<300; i++)
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	801a      	strh	r2, [r3, #0]
 8000988:	e020      	b.n	80009cc <read_settings_from_flash+0x6c>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	200005e4 	.word	0x200005e4
    {
        stored_settings[i] = sFLASH_ReadByte1(loc++);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60fa      	str	r2, [r7, #12]
 8000996:	250a      	movs	r5, #10
 8000998:	197a      	adds	r2, r7, r5
 800099a:	8814      	ldrh	r4, [r2, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fd5e 	bl	800345e <sFLASH_ReadByte1>
 80009a2:	0003      	movs	r3, r0
 80009a4:	001a      	movs	r2, r3
 80009a6:	4be2      	ldr	r3, [pc, #904]	; (8000d30 <read_settings_from_flash+0x3d0>)
 80009a8:	551a      	strb	r2, [r3, r4]

        if(stored_settings[i]=='*' || stored_settings[i]==0xff)
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4ae0      	ldr	r2, [pc, #896]	; (8000d30 <read_settings_from_flash+0x3d0>)
 80009b0:	5cd3      	ldrb	r3, [r2, r3]
 80009b2:	2b2a      	cmp	r3, #42	; 0x2a
 80009b4:	d011      	beq.n	80009da <read_settings_from_flash+0x7a>
 80009b6:	197b      	adds	r3, r7, r5
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	4add      	ldr	r2, [pc, #884]	; (8000d30 <read_settings_from_flash+0x3d0>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	2bff      	cmp	r3, #255	; 0xff
 80009c0:	d00b      	beq.n	80009da <read_settings_from_flash+0x7a>
    for(i=0; i<300; i++)
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	881a      	ldrh	r2, [r3, #0]
 80009c6:	197b      	adds	r3, r7, r5
 80009c8:	3201      	adds	r2, #1
 80009ca:	801a      	strh	r2, [r3, #0]
 80009cc:	230a      	movs	r3, #10
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	2396      	movs	r3, #150	; 0x96
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d3da      	bcc.n	8000990 <read_settings_from_flash+0x30>
        break;
    }

//// TTL
    flush_tx_string();
 80009da:	f7ff feb5 	bl	8000748 <flush_tx_string>
    sprintf((char*)tx_string, "\r\n+READ: %s\r\n", stored_settings);
 80009de:	4ad4      	ldr	r2, [pc, #848]	; (8000d30 <read_settings_from_flash+0x3d0>)
 80009e0:	49d4      	ldr	r1, [pc, #848]	; (8000d34 <read_settings_from_flash+0x3d4>)
 80009e2:	4bd5      	ldr	r3, [pc, #852]	; (8000d38 <read_settings_from_flash+0x3d8>)
 80009e4:	0018      	movs	r0, r3
 80009e6:	f00b fe3b 	bl	800c660 <siprintf>
//    send_text_to_uart2(tx_string);
    usb_write(tx_string);
 80009ea:	4bd3      	ldr	r3, [pc, #844]	; (8000d38 <read_settings_from_flash+0x3d8>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 fad3 	bl	8002f98 <usb_write>



    if(stored_settings[0]=='#' && stored_settings[i]=='*')
 80009f2:	4bcf      	ldr	r3, [pc, #828]	; (8000d30 <read_settings_from_flash+0x3d0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b23      	cmp	r3, #35	; 0x23
 80009f8:	d000      	beq.n	80009fc <read_settings_from_flash+0x9c>
 80009fa:	e1bf      	b.n	8000d7c <read_settings_from_flash+0x41c>
 80009fc:	230a      	movs	r3, #10
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	4acb      	ldr	r2, [pc, #812]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	2b2a      	cmp	r3, #42	; 0x2a
 8000a08:	d000      	beq.n	8000a0c <read_settings_from_flash+0xac>
 8000a0a:	e1b7      	b.n	8000d7c <read_settings_from_flash+0x41c>
    {
        explode_string(stored_settings, 300, 1, ',', ',', 40, '*');//////  APN
 8000a0c:	2396      	movs	r3, #150	; 0x96
 8000a0e:	0059      	lsls	r1, r3, #1
 8000a10:	48c7      	ldr	r0, [pc, #796]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000a12:	232a      	movs	r3, #42	; 0x2a
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2328      	movs	r3, #40	; 0x28
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	232c      	movs	r3, #44	; 0x2c
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	232c      	movs	r3, #44	; 0x2c
 8000a20:	2201      	movs	r2, #1
 8000a22:	f7ff fdef 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000a26:	4bc5      	ldr	r3, [pc, #788]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <read_settings_from_flash+0xe4>
        {
           flush_array(apn, 40);
 8000a2e:	4bc4      	ldr	r3, [pc, #784]	; (8000d40 <read_settings_from_flash+0x3e0>)
 8000a30:	2128      	movs	r1, #40	; 0x28
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fdc2 	bl	80005bc <flush_array>
           sprintf((char*)apn, "%s", temp_data);
 8000a38:	4ac0      	ldr	r2, [pc, #768]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000a3a:	49c2      	ldr	r1, [pc, #776]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000a3c:	4bc0      	ldr	r3, [pc, #768]	; (8000d40 <read_settings_from_flash+0x3e0>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f00b fe0e 	bl	800c660 <siprintf>
        }


        explode_string(stored_settings, 300, 2, ',', ',', 10, '*');//////  Configuration Version
 8000a44:	2396      	movs	r3, #150	; 0x96
 8000a46:	0059      	lsls	r1, r3, #1
 8000a48:	48b9      	ldr	r0, [pc, #740]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000a4a:	232a      	movs	r3, #42	; 0x2a
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	230a      	movs	r3, #10
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	232c      	movs	r3, #44	; 0x2c
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	232c      	movs	r3, #44	; 0x2c
 8000a58:	2202      	movs	r2, #2
 8000a5a:	f7ff fdd3 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000a5e:	4bb7      	ldr	r3, [pc, #732]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00a      	beq.n	8000a7c <read_settings_from_flash+0x11c>
        {
            flush_array(configuration_version, 10);
 8000a66:	4bb8      	ldr	r3, [pc, #736]	; (8000d48 <read_settings_from_flash+0x3e8>)
 8000a68:	210a      	movs	r1, #10
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fda6 	bl	80005bc <flush_array>
            sprintf((char*)configuration_version, "%s", temp_data);
 8000a70:	4ab2      	ldr	r2, [pc, #712]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000a72:	49b4      	ldr	r1, [pc, #720]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000a74:	4bb4      	ldr	r3, [pc, #720]	; (8000d48 <read_settings_from_flash+0x3e8>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f00b fdf2 	bl	800c660 <siprintf>
        }


        explode_string(stored_settings, 300, 3, ',', ',', 100, '*');//////  mqtt_server
 8000a7c:	2396      	movs	r3, #150	; 0x96
 8000a7e:	0059      	lsls	r1, r3, #1
 8000a80:	48ab      	ldr	r0, [pc, #684]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000a82:	232a      	movs	r3, #42	; 0x2a
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2364      	movs	r3, #100	; 0x64
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	232c      	movs	r3, #44	; 0x2c
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	232c      	movs	r3, #44	; 0x2c
 8000a90:	2203      	movs	r2, #3
 8000a92:	f7ff fdb7 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000a96:	4ba9      	ldr	r3, [pc, #676]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00a      	beq.n	8000ab4 <read_settings_from_flash+0x154>
        {
            flush_array(mqtt_server, 100);
 8000a9e:	4bab      	ldr	r3, [pc, #684]	; (8000d4c <read_settings_from_flash+0x3ec>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fd8a 	bl	80005bc <flush_array>
            sprintf((char*)mqtt_server, "%s", temp_data);
 8000aa8:	4aa4      	ldr	r2, [pc, #656]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000aaa:	49a6      	ldr	r1, [pc, #664]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000aac:	4ba7      	ldr	r3, [pc, #668]	; (8000d4c <read_settings_from_flash+0x3ec>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f00b fdd6 	bl	800c660 <siprintf>
        }


        explode_string(stored_settings, 300, 4, ',', ',', 7, '*');//////  mqtt_port
 8000ab4:	2396      	movs	r3, #150	; 0x96
 8000ab6:	0059      	lsls	r1, r3, #1
 8000ab8:	489d      	ldr	r0, [pc, #628]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000aba:	232a      	movs	r3, #42	; 0x2a
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	2307      	movs	r3, #7
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	232c      	movs	r3, #44	; 0x2c
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	232c      	movs	r3, #44	; 0x2c
 8000ac8:	2204      	movs	r2, #4
 8000aca:	f7ff fd9b 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000ace:	4b9b      	ldr	r3, [pc, #620]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d00a      	beq.n	8000aec <read_settings_from_flash+0x18c>
        {
            flush_array(mqtt_port, 7);
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	; (8000d50 <read_settings_from_flash+0x3f0>)
 8000ad8:	2107      	movs	r1, #7
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fd6e 	bl	80005bc <flush_array>
            sprintf((char*)mqtt_port, "%s", temp_data);
 8000ae0:	4a96      	ldr	r2, [pc, #600]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000ae2:	4998      	ldr	r1, [pc, #608]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000ae4:	4b9a      	ldr	r3, [pc, #616]	; (8000d50 <read_settings_from_flash+0x3f0>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f00b fdba 	bl	800c660 <siprintf>
        }


        explode_string(stored_settings, 300, 5, ',', ',', 100, '*');//////  mqtt_username
 8000aec:	2396      	movs	r3, #150	; 0x96
 8000aee:	0059      	lsls	r1, r3, #1
 8000af0:	488f      	ldr	r0, [pc, #572]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000af2:	232a      	movs	r3, #42	; 0x2a
 8000af4:	9302      	str	r3, [sp, #8]
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	232c      	movs	r3, #44	; 0x2c
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	232c      	movs	r3, #44	; 0x2c
 8000b00:	2205      	movs	r2, #5
 8000b02:	f7ff fd7f 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000b06:	4b8d      	ldr	r3, [pc, #564]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00a      	beq.n	8000b24 <read_settings_from_flash+0x1c4>
        {
            flush_array(mqtt_username, 100);
 8000b0e:	4b91      	ldr	r3, [pc, #580]	; (8000d54 <read_settings_from_flash+0x3f4>)
 8000b10:	2164      	movs	r1, #100	; 0x64
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fd52 	bl	80005bc <flush_array>
            sprintf((char*)mqtt_username, "%s", temp_data);
 8000b18:	4a88      	ldr	r2, [pc, #544]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b1a:	498a      	ldr	r1, [pc, #552]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000b1c:	4b8d      	ldr	r3, [pc, #564]	; (8000d54 <read_settings_from_flash+0x3f4>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f00b fd9e 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 6, ',', ',', 50, '*');//////  mqtt_password
 8000b24:	2396      	movs	r3, #150	; 0x96
 8000b26:	0059      	lsls	r1, r3, #1
 8000b28:	4881      	ldr	r0, [pc, #516]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000b2a:	232a      	movs	r3, #42	; 0x2a
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2332      	movs	r3, #50	; 0x32
 8000b30:	9301      	str	r3, [sp, #4]
 8000b32:	232c      	movs	r3, #44	; 0x2c
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	232c      	movs	r3, #44	; 0x2c
 8000b38:	2206      	movs	r2, #6
 8000b3a:	f7ff fd63 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000b3e:	4b7f      	ldr	r3, [pc, #508]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00a      	beq.n	8000b5c <read_settings_from_flash+0x1fc>
        {
            flush_array(mqtt_password, 50);
 8000b46:	4b84      	ldr	r3, [pc, #528]	; (8000d58 <read_settings_from_flash+0x3f8>)
 8000b48:	2132      	movs	r1, #50	; 0x32
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fd36 	bl	80005bc <flush_array>
            sprintf((char*)mqtt_password, "%s", temp_data);
 8000b50:	4a7a      	ldr	r2, [pc, #488]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b52:	497c      	ldr	r1, [pc, #496]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000b54:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <read_settings_from_flash+0x3f8>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f00b fd82 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 7, ',', ',', 100, '*');//////  mqtt_client_id
 8000b5c:	2396      	movs	r3, #150	; 0x96
 8000b5e:	0059      	lsls	r1, r3, #1
 8000b60:	4873      	ldr	r0, [pc, #460]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000b62:	232a      	movs	r3, #42	; 0x2a
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	232c      	movs	r3, #44	; 0x2c
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	232c      	movs	r3, #44	; 0x2c
 8000b70:	2207      	movs	r2, #7
 8000b72:	f7ff fd47 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000b76:	4b71      	ldr	r3, [pc, #452]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00a      	beq.n	8000b94 <read_settings_from_flash+0x234>
        {
            flush_array(mqtt_client_id, 100);
 8000b7e:	4b77      	ldr	r3, [pc, #476]	; (8000d5c <read_settings_from_flash+0x3fc>)
 8000b80:	2164      	movs	r1, #100	; 0x64
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fd1a 	bl	80005bc <flush_array>
            sprintf((char*)mqtt_client_id, "%s", temp_data);
 8000b88:	4a6c      	ldr	r2, [pc, #432]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000b8a:	496e      	ldr	r1, [pc, #440]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000b8c:	4b73      	ldr	r3, [pc, #460]	; (8000d5c <read_settings_from_flash+0x3fc>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f00b fd66 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 8, ',', ',', 100, '*');//////  twin_sb
 8000b94:	2396      	movs	r3, #150	; 0x96
 8000b96:	0059      	lsls	r1, r3, #1
 8000b98:	4865      	ldr	r0, [pc, #404]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000b9a:	232a      	movs	r3, #42	; 0x2a
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	232c      	movs	r3, #44	; 0x2c
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	232c      	movs	r3, #44	; 0x2c
 8000ba8:	2208      	movs	r2, #8
 8000baa:	f7ff fd2b 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000bae:	4b63      	ldr	r3, [pc, #396]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00a      	beq.n	8000bcc <read_settings_from_flash+0x26c>
        {
            flush_array(twin_sb, 100);
 8000bb6:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <read_settings_from_flash+0x400>)
 8000bb8:	2164      	movs	r1, #100	; 0x64
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fcfe 	bl	80005bc <flush_array>
            sprintf((char*)twin_sb, "%s", temp_data);
 8000bc0:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000bc2:	4960      	ldr	r1, [pc, #384]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000bc4:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <read_settings_from_flash+0x400>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f00b fd4a 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 9, ',', ',', 100, '*');//////  twin_pb
 8000bcc:	2396      	movs	r3, #150	; 0x96
 8000bce:	0059      	lsls	r1, r3, #1
 8000bd0:	4857      	ldr	r0, [pc, #348]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000bd2:	232a      	movs	r3, #42	; 0x2a
 8000bd4:	9302      	str	r3, [sp, #8]
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	232c      	movs	r3, #44	; 0x2c
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	232c      	movs	r3, #44	; 0x2c
 8000be0:	2209      	movs	r2, #9
 8000be2:	f7ff fd0f 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00a      	beq.n	8000c04 <read_settings_from_flash+0x2a4>
        {
            flush_array(twin_pb, 100);
 8000bee:	4b5d      	ldr	r3, [pc, #372]	; (8000d64 <read_settings_from_flash+0x404>)
 8000bf0:	2164      	movs	r1, #100	; 0x64
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fce2 	bl	80005bc <flush_array>
            sprintf((char*)twin_pb, "%s", temp_data);
 8000bf8:	4a50      	ldr	r2, [pc, #320]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000bfa:	4952      	ldr	r1, [pc, #328]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000bfc:	4b59      	ldr	r3, [pc, #356]	; (8000d64 <read_settings_from_flash+0x404>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f00b fd2e 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 10, ',', ',', 100, '*');//////  twin_rp
 8000c04:	2396      	movs	r3, #150	; 0x96
 8000c06:	0059      	lsls	r1, r3, #1
 8000c08:	4849      	ldr	r0, [pc, #292]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000c0a:	232a      	movs	r3, #42	; 0x2a
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	232c      	movs	r3, #44	; 0x2c
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	232c      	movs	r3, #44	; 0x2c
 8000c18:	220a      	movs	r2, #10
 8000c1a:	f7ff fcf3 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00a      	beq.n	8000c3c <read_settings_from_flash+0x2dc>
        {
            flush_array(twin_rp, 100);
 8000c26:	4b50      	ldr	r3, [pc, #320]	; (8000d68 <read_settings_from_flash+0x408>)
 8000c28:	2164      	movs	r1, #100	; 0x64
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fcc6 	bl	80005bc <flush_array>
            sprintf((char*)twin_rp, "%s", temp_data);
 8000c30:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000c32:	4944      	ldr	r1, [pc, #272]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000c34:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <read_settings_from_flash+0x408>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f00b fd12 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 11, ',', ',', 100, '*');//////  read_pb
 8000c3c:	2396      	movs	r3, #150	; 0x96
 8000c3e:	0059      	lsls	r1, r3, #1
 8000c40:	483b      	ldr	r0, [pc, #236]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000c42:	232a      	movs	r3, #42	; 0x2a
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	232c      	movs	r3, #44	; 0x2c
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	232c      	movs	r3, #44	; 0x2c
 8000c50:	220b      	movs	r2, #11
 8000c52:	f7ff fcd7 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000c56:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00a      	beq.n	8000c74 <read_settings_from_flash+0x314>
        {
            flush_array(read_pb, 100);
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <read_settings_from_flash+0x40c>)
 8000c60:	2164      	movs	r1, #100	; 0x64
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fcaa 	bl	80005bc <flush_array>
            sprintf((char*)read_pb, "%s", temp_data);
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000c6a:	4936      	ldr	r1, [pc, #216]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <read_settings_from_flash+0x40c>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f00b fcf6 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 12, ',', ',', 5, '*');//////  protocol_version
 8000c74:	2396      	movs	r3, #150	; 0x96
 8000c76:	0059      	lsls	r1, r3, #1
 8000c78:	482d      	ldr	r0, [pc, #180]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000c7a:	232a      	movs	r3, #42	; 0x2a
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	2305      	movs	r3, #5
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	232c      	movs	r3, #44	; 0x2c
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	232c      	movs	r3, #44	; 0x2c
 8000c88:	220c      	movs	r2, #12
 8000c8a:	f7ff fcbb 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00a      	beq.n	8000cac <read_settings_from_flash+0x34c>
        {
            flush_array(protocol_version, 5);
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <read_settings_from_flash+0x410>)
 8000c98:	2105      	movs	r1, #5
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fc8e 	bl	80005bc <flush_array>
            sprintf((char*)protocol_version, "%s", temp_data);
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000ca2:	4928      	ldr	r1, [pc, #160]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000ca4:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <read_settings_from_flash+0x410>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f00b fcda 	bl	800c660 <siprintf>
        }

        explode_string(stored_settings, 300, 13, ',', ',', 12, '*');//////  device_id
 8000cac:	2396      	movs	r3, #150	; 0x96
 8000cae:	0059      	lsls	r1, r3, #1
 8000cb0:	481f      	ldr	r0, [pc, #124]	; (8000d30 <read_settings_from_flash+0x3d0>)
 8000cb2:	232a      	movs	r3, #42	; 0x2a
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	232c      	movs	r3, #44	; 0x2c
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	232c      	movs	r3, #44	; 0x2c
 8000cc0:	220d      	movs	r2, #13
 8000cc2:	f7ff fc9f 	bl	8000604 <explode_string>

        if(temp_data[0]!=0)
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00a      	beq.n	8000ce4 <read_settings_from_flash+0x384>
        {
            flush_array(device_id, 12);
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <read_settings_from_flash+0x414>)
 8000cd0:	210c      	movs	r1, #12
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fc72 	bl	80005bc <flush_array>
            sprintf((char*)device_id, "%s", temp_data);
 8000cd8:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <read_settings_from_flash+0x3dc>)
 8000cda:	491a      	ldr	r1, [pc, #104]	; (8000d44 <read_settings_from_flash+0x3e4>)
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <read_settings_from_flash+0x414>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f00b fcbe 	bl	800c660 <siprintf>
        }

        //// TTL
        flush_tx_string();
 8000ce4:	f7ff fd30 	bl	8000748 <flush_tx_string>

        sprintf((char*)tx_string, "\r\n+PARSED: APN:%s\nCV:%s\nSERVER:%s\nPORT:%s\nUSER:%s\nPASWD:%s\nCLIENT:%s\nTWIN_SB:%s\nTWIN_PB:%s\nTWIN_RP:%s\nREAD_PB:%s\nPV:%s\nDEVICE_ID:%s\r\n",
 8000ce8:	4c17      	ldr	r4, [pc, #92]	; (8000d48 <read_settings_from_flash+0x3e8>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <read_settings_from_flash+0x3e0>)
 8000cec:	4922      	ldr	r1, [pc, #136]	; (8000d78 <read_settings_from_flash+0x418>)
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <read_settings_from_flash+0x3d8>)
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <read_settings_from_flash+0x414>)
 8000cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <read_settings_from_flash+0x410>)
 8000cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <read_settings_from_flash+0x40c>)
 8000cfa:	9308      	str	r3, [sp, #32]
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <read_settings_from_flash+0x408>)
 8000cfe:	9307      	str	r3, [sp, #28]
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <read_settings_from_flash+0x404>)
 8000d02:	9306      	str	r3, [sp, #24]
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <read_settings_from_flash+0x400>)
 8000d06:	9305      	str	r3, [sp, #20]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <read_settings_from_flash+0x3fc>)
 8000d0a:	9304      	str	r3, [sp, #16]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <read_settings_from_flash+0x3f8>)
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <read_settings_from_flash+0x3f4>)
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <read_settings_from_flash+0x3f0>)
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <read_settings_from_flash+0x3ec>)
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	0023      	movs	r3, r4
 8000d1e:	f00b fc9f 	bl	800c660 <siprintf>
                apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password,
                mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id);

 //       send_text_to_uart2(tx_string);
        usb_write(tx_string);
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <read_settings_from_flash+0x3d8>)
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 f937 	bl	8002f98 <usb_write>

        return 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e027      	b.n	8000d7e <read_settings_from_flash+0x41e>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	200005e4 	.word	0x200005e4
 8000d34:	0800d054 	.word	0x0800d054
 8000d38:	20000454 	.word	0x20000454
 8000d3c:	20000774 	.word	0x20000774
 8000d40:	20000024 	.word	0x20000024
 8000d44:	0800d09c 	.word	0x0800d09c
 8000d48:	20000018 	.word	0x20000018
 8000d4c:	20000d20 	.word	0x20000d20
 8000d50:	20000c80 	.word	0x20000c80
 8000d54:	20000c88 	.word	0x20000c88
 8000d58:	20000cec 	.word	0x20000cec
 8000d5c:	20000c1c 	.word	0x20000c1c
 8000d60:	200002c4 	.word	0x200002c4
 8000d64:	20000328 	.word	0x20000328
 8000d68:	2000038c 	.word	0x2000038c
 8000d6c:	200003f0 	.word	0x200003f0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20000008 	.word	0x20000008
 8000d78:	0800d0a0 	.word	0x0800d0a0
    }

    return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bdb0      	pop	{r4, r5, r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)

08000d88 <state_machine>:
 *
 * \return - none
 */

static void state_machine(SM_STRUC *stinfo)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    void(*actsubr1)(void);
    void(*actsubr2)(void);
    uint32_t(*evsubr)(void);
    void(*dbgsubr)(uint32_t);

    statearray = stinfo->sms_stable;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	61fb      	str	r3, [r7, #28]
    curstateitem = statearray[stinfo->sms_curstate];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	623b      	str	r3, [r7, #32]

    evindex = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    evresult = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]

    while (1)
    {
        evsubr = curstateitem->stbl_event;
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	617b      	str	r3, [r7, #20]
        evresult = evsubr();
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4798      	blx	r3
 8000db6:	0003      	movs	r3, r0
 8000db8:	61bb      	str	r3, [r7, #24]

        if (evresult != 0)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d024      	beq.n	8000e0a <state_machine+0x82>
        {
            actsubr1 = curstateitem->stbl_act1;
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
            actsubr2 = curstateitem->stbl_act2;
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	60fb      	str	r3, [r7, #12]
            dbgsubr = stinfo->sms_debug;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	60bb      	str	r3, [r7, #8]

            stinfo->sms_curstate = curstateitem->stbl_newstate;
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
            dbgsubr(evindex);
 8000dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	0010      	movs	r0, r2
 8000de0:	4798      	blx	r3
            evindex = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
            curstateitem = statearray[stinfo->sms_curstate];
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	18d3      	adds	r3, r2, r3
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	623b      	str	r3, [r7, #32]

            if (actsubr1 == NULL)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00e      	beq.n	8000e18 <state_machine+0x90>
            {
                break;
            }

            actsubr1();
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4798      	blx	r3

            if (actsubr2 == NULL)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00b      	beq.n	8000e1c <state_machine+0x94>
            {
                break;
            }

            actsubr2();
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4798      	blx	r3
 8000e08:	e7d0      	b.n	8000dac <state_machine+0x24>
        }

        else
        {
            evindex++;
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
            curstateitem++;
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	3310      	adds	r3, #16
 8000e14:	623b      	str	r3, [r7, #32]
        evsubr = curstateitem->stbl_event;
 8000e16:	e7c9      	b.n	8000dac <state_machine+0x24>
                break;
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	e000      	b.n	8000e1e <state_machine+0x96>
                break;
 8000e1c:	46c0      	nop			; (mov r8, r8)
        }

    }

    return;
 8000e1e:	46c0      	nop			; (mov r8, r8)
}
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00a      	add	sp, #40	; 0x28
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <store_runtime_parameters_to_flash>:
 * \return -
 */


static void store_runtime_parameters_to_flash(uint32_t sect_address)
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60fb      	str	r3, [r7, #12]

    flush_array(stored_parameters, 100);
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <store_runtime_parameters_to_flash+0x9c>)
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fbbf 	bl	80005bc <flush_array>

    sprintf((char*)stored_parameters,
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <store_runtime_parameters_to_flash+0xa0>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	001d      	movs	r5, r3
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <store_runtime_parameters_to_flash+0xa4>)
 8000e46:	681c      	ldr	r4, [r3, #0]
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <store_runtime_parameters_to_flash+0xa8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <store_runtime_parameters_to_flash+0xac>)
 8000e4e:	8812      	ldrh	r2, [r2, #0]
 8000e50:	4921      	ldr	r1, [pc, #132]	; (8000ed8 <store_runtime_parameters_to_flash+0xb0>)
 8000e52:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <store_runtime_parameters_to_flash+0x9c>)
 8000e54:	9201      	str	r2, [sp, #4]
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	0023      	movs	r3, r4
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	f00b fc00 	bl	800c660 <siprintf>
            (unsigned int)mem_write_address,
            (unsigned int)mem_read_address,
            (unsigned int)total_downloaded_records_meter);

    ///// ERASE SECTOR IN FLASH
    sFLASH_EraseSector(sect_address);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 faab 	bl	80033be <sFLASH_EraseSector>

    for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 8000e68:	230a      	movs	r3, #10
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	801a      	strh	r2, [r3, #0]
 8000e70:	e017      	b.n	8000ea2 <store_runtime_parameters_to_flash+0x7a>
    {

        if(stored_settings[i] == 0)
 8000e72:	210a      	movs	r1, #10
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <store_runtime_parameters_to_flash+0xb4>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01b      	beq.n	8000eb8 <store_runtime_parameters_to_flash+0x90>
        {
            break;
        }

        sFLASH_WriteByte(loc++, stored_parameters[i]);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60fa      	str	r2, [r7, #12]
 8000e86:	000c      	movs	r4, r1
 8000e88:	187a      	adds	r2, r7, r1
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <store_runtime_parameters_to_flash+0x9c>)
 8000e8e:	5c8a      	ldrb	r2, [r1, r2]
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f002 fab7 	bl	8003406 <sFLASH_WriteByte>
    for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	881a      	ldrh	r2, [r3, #0]
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	3201      	adds	r2, #1
 8000ea0:	801a      	strh	r2, [r3, #0]
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	881c      	ldrh	r4, [r3, #0]
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <store_runtime_parameters_to_flash+0x9c>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff f92c 	bl	8000108 <strlen>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	d3dd      	bcc.n	8000e72 <store_runtime_parameters_to_flash+0x4a>
    }

    return;
 8000eb6:	e000      	b.n	8000eba <store_runtime_parameters_to_flash+0x92>
            break;
 8000eb8:	46c0      	nop			; (mov r8, r8)
    return;
 8000eba:	46c0      	nop			; (mov r8, r8)
}
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000710 	.word	0x20000710
 8000ec8:	20000874 	.word	0x20000874
 8000ecc:	2000004c 	.word	0x2000004c
 8000ed0:	20000050 	.word	0x20000050
 8000ed4:	20000876 	.word	0x20000876
 8000ed8:	0800d128 	.word	0x0800d128
 8000edc:	200005e4 	.word	0x200005e4

08000ee0 <store_settings_to_flash>:
 *
 * \return -
 */

static void store_settings_to_flash(uint32_t sect_address)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b091      	sub	sp, #68	; 0x44
 8000ee4:	af0c      	add	r7, sp, #48	; 0x30
 8000ee6:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60fb      	str	r3, [r7, #12]

    flush_array(stored_settings, 300);
 8000eec:	2396      	movs	r3, #150	; 0x96
 8000eee:	005a      	lsls	r2, r3, #1
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff fb61 	bl	80005bc <flush_array>

    sprintf((char*)stored_settings, "#SET,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s*",
 8000efa:	4c2e      	ldr	r4, [pc, #184]	; (8000fb4 <store_settings_to_flash+0xd4>)
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <store_settings_to_flash+0xd8>)
 8000efe:	492f      	ldr	r1, [pc, #188]	; (8000fbc <store_settings_to_flash+0xdc>)
 8000f00:	482b      	ldr	r0, [pc, #172]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <store_settings_to_flash+0xe0>)
 8000f04:	930a      	str	r3, [sp, #40]	; 0x28
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <store_settings_to_flash+0xe4>)
 8000f08:	9309      	str	r3, [sp, #36]	; 0x24
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <store_settings_to_flash+0xe8>)
 8000f0c:	9308      	str	r3, [sp, #32]
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <store_settings_to_flash+0xec>)
 8000f10:	9307      	str	r3, [sp, #28]
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <store_settings_to_flash+0xf0>)
 8000f14:	9306      	str	r3, [sp, #24]
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <store_settings_to_flash+0xf4>)
 8000f18:	9305      	str	r3, [sp, #20]
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <store_settings_to_flash+0xf8>)
 8000f1c:	9304      	str	r3, [sp, #16]
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <store_settings_to_flash+0xfc>)
 8000f20:	9303      	str	r3, [sp, #12]
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <store_settings_to_flash+0x100>)
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <store_settings_to_flash+0x104>)
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <store_settings_to_flash+0x108>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	0023      	movs	r3, r4
 8000f30:	f00b fb96 	bl	800c660 <siprintf>
            apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password,
            mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id);

    ///// ERASE SECTOR IN FLASH
    sFLASH_EraseSector(sect_address);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 fa41 	bl	80033be <sFLASH_EraseSector>

    for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	e017      	b.n	8000f76 <store_settings_to_flash+0x96>
    {

        if(stored_settings[i] == 0)
 8000f46:	210a      	movs	r1, #10
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d01b      	beq.n	8000f8c <store_settings_to_flash+0xac>
        {
            break;
        }

        sFLASH_WriteByte(loc++, stored_settings[i]);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60fa      	str	r2, [r7, #12]
 8000f5a:	000c      	movs	r4, r1
 8000f5c:	187a      	adds	r2, r7, r1
 8000f5e:	8812      	ldrh	r2, [r2, #0]
 8000f60:	4913      	ldr	r1, [pc, #76]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000f62:	5c8a      	ldrb	r2, [r1, r2]
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f002 fa4d 	bl	8003406 <sFLASH_WriteByte>
    for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	881a      	ldrh	r2, [r3, #0]
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	3201      	adds	r2, #1
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	230a      	movs	r3, #10
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	881c      	ldrh	r4, [r3, #0]
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8c2 	bl	8000108 <strlen>
 8000f84:	0003      	movs	r3, r0
 8000f86:	429c      	cmp	r4, r3
 8000f88:	d3dd      	bcc.n	8000f46 <store_settings_to_flash+0x66>
 8000f8a:	e000      	b.n	8000f8e <store_settings_to_flash+0xae>
            break;
 8000f8c:	46c0      	nop			; (mov r8, r8)
    }

//// TTL
    flush_tx_string();
 8000f8e:	f7ff fbdb 	bl	8000748 <flush_tx_string>
    sprintf((char*)tx_string, "\r\n+STORED: %s\r\n", stored_settings);
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <store_settings_to_flash+0xd0>)
 8000f94:	4915      	ldr	r1, [pc, #84]	; (8000fec <store_settings_to_flash+0x10c>)
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <store_settings_to_flash+0x110>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f00b fb61 	bl	800c660 <siprintf>
    usb_write(tx_string);
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <store_settings_to_flash+0x110>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f001 fff9 	bl	8002f98 <usb_write>
    return;
 8000fa6:	46c0      	nop			; (mov r8, r8)
}
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b005      	add	sp, #20
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	200005e4 	.word	0x200005e4
 8000fb4:	20000018 	.word	0x20000018
 8000fb8:	20000024 	.word	0x20000024
 8000fbc:	0800d13c 	.word	0x0800d13c
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200003f0 	.word	0x200003f0
 8000fcc:	2000038c 	.word	0x2000038c
 8000fd0:	20000328 	.word	0x20000328
 8000fd4:	200002c4 	.word	0x200002c4
 8000fd8:	20000c1c 	.word	0x20000c1c
 8000fdc:	20000cec 	.word	0x20000cec
 8000fe0:	20000c88 	.word	0x20000c88
 8000fe4:	20000c80 	.word	0x20000c80
 8000fe8:	20000d20 	.word	0x20000d20
 8000fec:	0800d16c 	.word	0x0800d16c
 8000ff0:	20000454 	.word	0x20000454

08000ff4 <esp_init>:
 *
 *
 */

void esp_init(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b0a9      	sub	sp, #164	; 0xa4
 8000ff8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;
    UART_HandleTypeDef huart;
    HAL_StatusTypeDef halstat;

    initstruc.Pin = ESP_PWR_PIN;
 8000ffa:	2488      	movs	r4, #136	; 0x88
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	2204      	movs	r2, #4
 8001000:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_OD;
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2211      	movs	r2, #17
 8001006:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8001008:	193b      	adds	r3, r7, r4
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	193b      	adds	r3, r7, r4
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_PWR_PORT, &initstruc);
 800101a:	193b      	adds	r3, r7, r4
 800101c:	4a3b      	ldr	r2, [pc, #236]	; (800110c <esp_init+0x118>)
 800101e:	0019      	movs	r1, r3
 8001020:	0010      	movs	r0, r2
 8001022:	f002 fca9 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = ESP_ENBL_PIN;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(ESP_ENBL_PORT, &initstruc);
 800102e:	193b      	adds	r3, r7, r4
 8001030:	4a36      	ldr	r2, [pc, #216]	; (800110c <esp_init+0x118>)
 8001032:	0019      	movs	r1, r3
 8001034:	0010      	movs	r0, r2
 8001036:	f002 fc9f 	bl	8003978 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(ESP_PWR_PORT, ESP_PWR_PIN, GPIO_PIN_SET);
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <esp_init+0x118>)
 800103c:	2201      	movs	r2, #1
 800103e:	2104      	movs	r1, #4
 8001040:	0018      	movs	r0, r3
 8001042:	f002 fe09 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ESP_ENBL_PORT, ESP_ENBL_PIN, GPIO_PIN_SET);
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4830      	ldr	r0, [pc, #192]	; (800110c <esp_init+0x118>)
 800104c:	2201      	movs	r2, #1
 800104e:	0019      	movs	r1, r3
 8001050:	f002 fe02 	bl	8003c58 <HAL_GPIO_WritePin>

    initstruc.Pin = ESP_UART_TX_PIN;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2202      	movs	r2, #2
 8001060:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = ESP_UART_TX_AF;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_UART_TX_PORT, &initstruc);
 8001068:	193a      	adds	r2, r7, r4
 800106a:	2390      	movs	r3, #144	; 0x90
 800106c:	05db      	lsls	r3, r3, #23
 800106e:	0011      	movs	r1, r2
 8001070:	0018      	movs	r0, r3
 8001072:	f002 fc81 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = ESP_UART_RX_PIN;
 8001076:	0021      	movs	r1, r4
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2280      	movs	r2, #128	; 0x80
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2202      	movs	r2, #2
 8001084:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = ESP_UART_RX_AF;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2201      	movs	r2, #1
 800108a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_UART_RX_PORT, &initstruc);
 800108c:	187a      	adds	r2, r7, r1
 800108e:	2390      	movs	r3, #144	; 0x90
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	0011      	movs	r1, r2
 8001094:	0018      	movs	r0, r3
 8001096:	f002 fc6f 	bl	8003978 <HAL_GPIO_Init>

    __HAL_RCC_USART1_CLK_ENABLE();
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <esp_init+0x11c>)
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <esp_init+0x11c>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	01c9      	lsls	r1, r1, #7
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <esp_init+0x11c>)
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4013      	ands	r3, r2
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

    huart.Instance = ESP_UART;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <esp_init+0x120>)
 80010ba:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	22e1      	movs	r2, #225	; 0xe1
 80010c0:	0252      	lsls	r2, r2, #9
 80010c2:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	220c      	movs	r2, #12
 80010da:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
    huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
    huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
    halstat = HAL_UART_Init(&huart);
 80010f4:	239f      	movs	r3, #159	; 0x9f
 80010f6:	18fc      	adds	r4, r7, r3
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	0018      	movs	r0, r3
 80010fc:	f006 fa00 	bl	8007500 <HAL_UART_Init>
 8001100:	0003      	movs	r3, r0
 8001102:	7023      	strb	r3, [r4, #0]
//        crash();
    }



    return;
 8001104:	46c0      	nop			; (mov r8, r8)
}
 8001106:	46bd      	mov	sp, r7
 8001108:	b029      	add	sp, #164	; 0xa4
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	48000400 	.word	0x48000400
 8001110:	40021000 	.word	0x40021000
 8001114:	40013800 	.word	0x40013800

08001118 <esp_power_on>:
 *
 *
 */

void esp_power_on(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

    return;
 800111c:	46c0      	nop			; (mov r8, r8)
}
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <gsm_init>:
 *
 * return - none
 */

void gsm_init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    gsm_stmachine.sms_stable = (S_TABLE **)&state_table;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <gsm_init+0x24>)
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <gsm_init+0x28>)
 800112c:	601a      	str	r2, [r3, #0]
    gsm_stmachine.sms_curstate = S_INIT;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <gsm_init+0x24>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
    gsm_stmachine.sms_debug = &state_trace;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <gsm_init+0x24>)
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <gsm_init+0x2c>)
 8001138:	609a      	str	r2, [r3, #8]
    oldstate = S_INIT;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <gsm_init+0x30>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
    return;
 8001140:	46c0      	nop			; (mov r8, r8)
}
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000d84 	.word	0x20000d84
 800114c:	20000054 	.word	0x20000054
 8001150:	080017bd 	.word	0x080017bd
 8001154:	20000888 	.word	0x20000888

08001158 <gsm_timer_ih>:
 *
 * return - none
 */

void gsm_timer_ih()
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

    if (timer)
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <gsm_timer_ih+0x20>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <gsm_timer_ih+0x18>
    {
        timer--;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <gsm_timer_ih+0x20>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <gsm_timer_ih+0x20>)
 800116c:	601a      	str	r2, [r3, #0]
    }

    return;
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46c0      	nop			; (mov r8, r8)
}
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000884 	.word	0x20000884

0800117c <e_always>:
 *                            --------
 *
 */

static uint32_t e_always(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <e_quecready>:
 *                            -----------
 *
 */

static uint32_t e_quecready(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    return (uint32_t)quec_ready_flag;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <e_quecready+0x10>)
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000ff4 	.word	0x20000ff4

0800119c <e_rcverr>:
 *                            --------
 *
 */

static uint32_t e_rcverr(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

   if ((rcv_status != QS_INPROGRESS) && (rcv_status != QS_OK))
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <e_rcverr+0x30>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d00d      	beq.n	80011c4 <e_rcverr+0x28>
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <e_rcverr+0x30>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <e_rcverr+0x28>
   {
       usb_printf((uint8_t *)"GSM RCV STAT: %d\r\n", rcv_status);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <e_rcverr+0x30>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <e_rcverr+0x34>)
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 fc08 	bl	80029d0 <usb_printf>
       return 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <e_rcverr+0x2a>
   }

   return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000878 	.word	0x20000878
 80011d0:	0800d17c 	.word	0x0800d17c

080011d4 <e_rcvok>:
 *                            -------
 *
 */

static uint32_t e_rcvok(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
   return rcv_status == QS_OK;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <e_rcvok+0x14>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	425a      	negs	r2, r3
 80011de:	4153      	adcs	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000878 	.word	0x20000878

080011ec <e_rcvtimout>:
 *                            -----------
 *
 */

static uint32_t e_rcvtimout(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
   return rcv_status == QS_TIMEOUT;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <e_rcvtimout+0x18>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3b04      	subs	r3, #4
 80011f6:	425a      	negs	r2, r3
 80011f8:	4153      	adcs	r3, r2
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	20000878 	.word	0x20000878

08001208 <e_rxccid>:
 *                            --------
 *
 */

static uint32_t e_rxccid(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(7, (uint8_t *)"+QCCID:");
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <e_rxccid+0x20>)
 8001210:	0019      	movs	r1, r3
 8001212:	2007      	movs	r0, #7
 8001214:	f000 fa96 	bl	8001744 <compare>
 8001218:	0003      	movs	r3, r0
 800121a:	607b      	str	r3, [r7, #4]
    return stat;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	0800d190 	.word	0x0800d190

0800122c <e_rxcpinr>:
 *                            ---------
 *
 */

static uint32_t e_rxcpinr(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(12, (uint8_t *)"+CPIN: READY");
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <e_rxcpinr+0x20>)
 8001234:	0019      	movs	r1, r3
 8001236:	200c      	movs	r0, #12
 8001238:	f000 fa84 	bl	8001744 <compare>
 800123c:	0003      	movs	r3, r0
 800123e:	607b      	str	r3, [r7, #4]
    return stat;
 8001240:	687b      	ldr	r3, [r7, #4]
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	0800d198 	.word	0x0800d198

08001250 <e_rximei>:
 *                            ---------
 *
 */

static uint32_t e_rximei(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (rcv_count >= 16)
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <e_rximei+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d902      	bls.n	8001264 <e_rximei+0x14>
    {
        stat = 1;
 800125e:	2301      	movs	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e001      	b.n	8001268 <e_rximei+0x18>
    }

    else
    {
        stat = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000880 	.word	0x20000880

08001278 <e_rximsi>:
 *                            ---------
 *
 */

static uint32_t e_rximsi(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (rcv_count >= 16)
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <e_rximsi+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d902      	bls.n	800128c <e_rximsi+0x14>
    {
        stat = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	e001      	b.n	8001290 <e_rximsi+0x18>
    }

    else
    {
        stat = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	20000880 	.word	0x20000880

080012a0 <e_rxok>:
 *                            ------
 *
 */

static uint32_t e_rxok(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

    if ((rcv_count == 3) && (rcv_buffer[0] == 'O') && (rcv_buffer[1] == 'K'))
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <e_rxok+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d109      	bne.n	80012c0 <e_rxok+0x20>
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <e_rxok+0x2c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b4f      	cmp	r3, #79	; 0x4f
 80012b2:	d105      	bne.n	80012c0 <e_rxok+0x20>
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <e_rxok+0x2c>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	2b4b      	cmp	r3, #75	; 0x4b
 80012ba:	d101      	bne.n	80012c0 <e_rxok+0x20>
    {
        return 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <e_rxok+0x22>
    }

    return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	0018      	movs	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000880 	.word	0x20000880
 80012cc:	2000088c 	.word	0x2000088c

080012d0 <e_rxrdy>:
 *                            -------
 *
 */

static uint32_t e_rxrdy(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

    if ((rcv_count == 4) && (rcv_buffer[0] == 'R') && (rcv_buffer[1] == 'D') && (rcv_buffer[2] == 'Y'))
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <e_rxrdy+0x30>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d10d      	bne.n	80012f8 <e_rxrdy+0x28>
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <e_rxrdy+0x34>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b52      	cmp	r3, #82	; 0x52
 80012e2:	d109      	bne.n	80012f8 <e_rxrdy+0x28>
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <e_rxrdy+0x34>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	2b44      	cmp	r3, #68	; 0x44
 80012ea:	d105      	bne.n	80012f8 <e_rxrdy+0x28>
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <e_rxrdy+0x34>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	2b59      	cmp	r3, #89	; 0x59
 80012f2:	d101      	bne.n	80012f8 <e_rxrdy+0x28>
    {
        return 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <e_rxrdy+0x2a>
    }

    return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000880 	.word	0x20000880
 8001304:	2000088c 	.word	0x2000088c

08001308 <e_timeout>:
 *                            ---------
 *
 */

static uint32_t e_timeout(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0

    if (timer == 0)
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <e_timeout+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <e_timeout+0x10>
    {
        return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <e_timeout+0x12>
    }

    return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000884 	.word	0x20000884

08001324 <a_flushrx>:
 *                               ---------
 *
 */

static void a_flushrx(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    quec_rxflush();
 8001328:	f001 f89a 	bl	8002460 <quec_rxflush>
    return;
 800132c:	46c0      	nop			; (mov r8, r8)
}
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <a_gotcpinr>:
 *                               ----------
 *
 */

static void a_gotcpinr(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    gotcpinrflag = 1;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <a_gotcpinr+0x10>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
    return;
 800133e:	46c0      	nop			; (mov r8, r8)
}
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000087a 	.word	0x2000087a

08001348 <a_gotrdy>:
 *                               --------
 *
 */

static void a_gotrdy(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    gotrdyflag = 1;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <a_gotrdy+0x10>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    return;
 8001352:	46c0      	nop			; (mov r8, r8)
}
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000879 	.word	0x20000879

0800135c <a_initvars>:
 *                               ----------
 *
 */

static void a_initvars(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
    gotcpinrflag = 0;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <a_initvars+0x18>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
    gotrdyflag = 0;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <a_initvars+0x1c>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    return;
 800136c:	46c0      	nop			; (mov r8, r8)
}
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000087a 	.word	0x2000087a
 8001378:	20000879 	.word	0x20000879

0800137c <a_nop>:
 *                               -----
 *
 */

static void a_nop(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    return;
 8001380:	46c0      	nop			; (mov r8, r8)
}
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <a_rcvdata>:
 *                               ---------
 *
 */

static void a_rcvdata(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    rcv_status = quec_receive(rcv_buffer, MAX_RECEIVE_LEN, 5000, &gsm_rcv_ih);
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <a_rcvdata+0x20>)
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <a_rcvdata+0x24>)
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <a_rcvdata+0x28>)
 8001392:	211f      	movs	r1, #31
 8001394:	f001 f800 	bl	8002398 <quec_receive>
 8001398:	0003      	movs	r3, r0
 800139a:	001a      	movs	r2, r3
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <a_rcvdata+0x2c>)
 800139e:	701a      	strb	r2, [r3, #0]
    return;
 80013a0:	46c0      	nop			; (mov r8, r8)
}
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	08001791 	.word	0x08001791
 80013ac:	00001388 	.word	0x00001388
 80013b0:	2000088c 	.word	0x2000088c
 80013b4:	20000878 	.word	0x20000878

080013b8 <a_rcvinitmsgs>:
 *                               -------------
 *
 */

static void a_rcvinitmsgs(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    rcv_status = quec_receive(rcv_buffer, MAX_RECEIVE_LEN, 1000, &gsm_rcv_ih);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <a_rcvinitmsgs+0x20>)
 80013be:	22fa      	movs	r2, #250	; 0xfa
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <a_rcvinitmsgs+0x24>)
 80013c4:	211f      	movs	r1, #31
 80013c6:	f000 ffe7 	bl	8002398 <quec_receive>
 80013ca:	0003      	movs	r3, r0
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <a_rcvinitmsgs+0x28>)
 80013d0:	701a      	strb	r2, [r3, #0]
    return;
 80013d2:	46c0      	nop			; (mov r8, r8)
}
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08001791 	.word	0x08001791
 80013dc:	2000088c 	.word	0x2000088c
 80013e0:	20000878 	.word	0x20000878

080013e4 <a_reset>:
 *                               -------
 *
 */

static void a_reset(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    quec_reset();
 80013e8:	f001 f830 	bl	800244c <quec_reset>
    return;
 80013ec:	46c0      	nop			; (mov r8, r8)
}
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <a_saveccid>:
 *                               ----------
 *
 */

static void a_saveccid(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 22; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	e011      	b.n	8001424 <a_saveccid+0x30>
    {

        if (rcv_buffer[i + 8] == 0x0D)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3308      	adds	r3, #8
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <a_saveccid+0x48>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	2b0d      	cmp	r3, #13
 800140a:	d00f      	beq.n	800142c <a_saveccid+0x38>
        {
            break;
        }

        myiccid[i] = rcv_buffer[i + 8];
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3308      	adds	r3, #8
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <a_saveccid+0x48>)
 8001412:	5cd1      	ldrb	r1, [r2, r3]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <a_saveccid+0x4c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	1c0a      	adds	r2, r1, #0
 800141c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 22; i++)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b15      	cmp	r3, #21
 8001428:	d9ea      	bls.n	8001400 <a_saveccid+0xc>
 800142a:	e000      	b.n	800142e <a_saveccid+0x3a>
            break;
 800142c:	46c0      	nop			; (mov r8, r8)
    }

    myiccidlen = i;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <a_saveccid+0x50>)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	601a      	str	r2, [r3, #0]
    return;
 8001434:	46c0      	nop			; (mov r8, r8)
}
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000088c 	.word	0x2000088c
 8001440:	200008bc 	.word	0x200008bc
 8001444:	2000087c 	.word	0x2000087c

08001448 <a_saveimei>:
 *                               ----------
 *
 */

static void a_saveimei(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 15; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	e00b      	b.n	800146c <a_saveimei+0x24>
    {
        myimei[i] = rcv_buffer[i];
 8001454:	4a09      	ldr	r2, [pc, #36]	; (800147c <a_saveimei+0x34>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	18d3      	adds	r3, r2, r3
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	4a08      	ldr	r2, [pc, #32]	; (8001480 <a_saveimei+0x38>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	18d3      	adds	r3, r2, r3
 8001462:	1c0a      	adds	r2, r1, #0
 8001464:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 15; i++)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3301      	adds	r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b0e      	cmp	r3, #14
 8001470:	d9f0      	bls.n	8001454 <a_saveimei+0xc>
    }

    return;
 8001472:	46c0      	nop			; (mov r8, r8)
}
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000088c 	.word	0x2000088c
 8001480:	200008ac 	.word	0x200008ac

08001484 <a_saveimsi>:
 *                               ----------
 *
 */

static void a_saveimsi(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 15; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	e00b      	b.n	80014a8 <a_saveimsi+0x24>
    {
        myimsi[i] = rcv_buffer[i];
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <a_saveimsi+0x34>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	7819      	ldrb	r1, [r3, #0]
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <a_saveimsi+0x38>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	18d3      	adds	r3, r2, r3
 800149e:	1c0a      	adds	r2, r1, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 15; i++)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b0e      	cmp	r3, #14
 80014ac:	d9f0      	bls.n	8001490 <a_saveimsi+0xc>
    }

    return;
 80014ae:	46c0      	nop			; (mov r8, r8)
}
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	2000088c 	.word	0x2000088c
 80014bc:	200008d4 	.word	0x200008d4

080014c0 <a_tmr5sec>:
 *                               ---------
 *
 */

static void a_tmr5sec(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    timer = 5000;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <a_tmr5sec+0x18>)
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <a_tmr5sec+0x1c>)
 80014cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014ce:	b662      	cpsie	i
}
 80014d0:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
    return;
 80014d2:	46c0      	nop			; (mov r8, r8)
}
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000884 	.word	0x20000884
 80014dc:	00001388 	.word	0x00001388

080014e0 <a_trapn>:
 *                               -------
 *
 */

static void a_trapn(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    quec_rxflush();
 80014e4:	f000 ffbc 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <a_trapn+0x3c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <a_trapn+0x40>)
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <a_trapn+0x44>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <a_trapn+0x48>)
 80014f4:	2110      	movs	r1, #16
 80014f6:	f000 ff4f 	bl	8002398 <quec_receive>
 80014fa:	0003      	movs	r3, r0
 80014fc:	001a      	movs	r2, r3
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <a_trapn+0x4c>)
 8001500:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <a_trapn+0x4c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d105      	bne.n	8001516 <a_trapn+0x36>
    {
        quec_transmit((uint8_t *)apnmsg, sizeof(apnmsg) - 1);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <a_trapn+0x50>)
 800150c:	2122      	movs	r1, #34	; 0x22
 800150e:	0018      	movs	r0, r3
 8001510:	f000 ffb8 	bl	8002484 <quec_transmit>
    }

    return;
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46c0      	nop			; (mov r8, r8)
}
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000880 	.word	0x20000880
 8001520:	08001791 	.word	0x08001791
 8001524:	00001388 	.word	0x00001388
 8001528:	2000088c 	.word	0x2000088c
 800152c:	20000878 	.word	0x20000878
 8001530:	0800d694 	.word	0x0800d694

08001534 <a_trcimi>:
 *                               --------
 *
 */

static void a_trcimi(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    quec_rxflush();
 8001538:	f000 ff92 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <a_trcimi+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <a_trcimi+0x44>)
 8001544:	22fa      	movs	r2, #250	; 0xfa
 8001546:	00d2      	lsls	r2, r2, #3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <a_trcimi+0x48>)
 800154a:	2110      	movs	r1, #16
 800154c:	f000 ff24 	bl	8002398 <quec_receive>
 8001550:	0003      	movs	r3, r0
 8001552:	001a      	movs	r2, r3
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <a_trcimi+0x4c>)
 8001556:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <a_trcimi+0x4c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d105      	bne.n	800156c <a_trcimi+0x38>
    {
        quec_transmit((uint8_t *)"AT+CIMI\r\n", 9);
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <a_trcimi+0x50>)
 8001562:	2109      	movs	r1, #9
 8001564:	0018      	movs	r0, r3
 8001566:	f000 ff8d 	bl	8002484 <quec_transmit>
    }

    return;
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46c0      	nop			; (mov r8, r8)
}
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000880 	.word	0x20000880
 8001578:	08001791 	.word	0x08001791
 800157c:	2000088c 	.word	0x2000088c
 8001580:	20000878 	.word	0x20000878
 8001584:	0800d1a8 	.word	0x0800d1a8

08001588 <a_trgsn>:
 *                               -------
 *
 */

static void a_trgsn(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    quec_rxflush();
 800158c:	f000 ff68 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <a_trgsn+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <a_trgsn+0x44>)
 8001598:	22fa      	movs	r2, #250	; 0xfa
 800159a:	00d2      	lsls	r2, r2, #3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <a_trgsn+0x48>)
 800159e:	2120      	movs	r1, #32
 80015a0:	f000 fefa 	bl	8002398 <quec_receive>
 80015a4:	0003      	movs	r3, r0
 80015a6:	001a      	movs	r2, r3
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <a_trgsn+0x4c>)
 80015aa:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <a_trgsn+0x4c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d105      	bne.n	80015c0 <a_trgsn+0x38>
    {
        quec_transmit((uint8_t *)"AT+GSN\r\n", 8);
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <a_trgsn+0x50>)
 80015b6:	2108      	movs	r1, #8
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 ff63 	bl	8002484 <quec_transmit>
    }

    return;
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46c0      	nop			; (mov r8, r8)
}
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000880 	.word	0x20000880
 80015cc:	08001791 	.word	0x08001791
 80015d0:	2000088c 	.word	0x2000088c
 80015d4:	20000878 	.word	0x20000878
 80015d8:	0800d1b4 	.word	0x0800d1b4

080015dc <a_trmsg1>:
 *                               --------
 *
 */

static void a_trmsg1(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    quec_rxflush();
 80015e0:	f000 ff3e 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <a_trmsg1+0x3c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <a_trmsg1+0x40>)
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <a_trmsg1+0x44>)
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <a_trmsg1+0x48>)
 80015f0:	2110      	movs	r1, #16
 80015f2:	f000 fed1 	bl	8002398 <quec_receive>
 80015f6:	0003      	movs	r3, r0
 80015f8:	001a      	movs	r2, r3
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <a_trmsg1+0x4c>)
 80015fc:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <a_trmsg1+0x4c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b06      	cmp	r3, #6
 8001604:	d105      	bne.n	8001612 <a_trmsg1+0x36>
    {
        quec_transmit((uint8_t *)"AT\r\n", 4);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <a_trmsg1+0x50>)
 8001608:	2104      	movs	r1, #4
 800160a:	0018      	movs	r0, r3
 800160c:	f000 ff3a 	bl	8002484 <quec_transmit>
    }

    return;
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46c0      	nop			; (mov r8, r8)
}
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000880 	.word	0x20000880
 800161c:	08001791 	.word	0x08001791
 8001620:	00001388 	.word	0x00001388
 8001624:	2000088c 	.word	0x2000088c
 8001628:	20000878 	.word	0x20000878
 800162c:	0800d1c0 	.word	0x0800d1c0

08001630 <a_trqccid>:
 *                               ---------
 *
 */

static void a_trqccid(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    quec_rxflush();
 8001634:	f000 ff14 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <a_trqccid+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <a_trqccid+0x44>)
 8001640:	22fa      	movs	r2, #250	; 0xfa
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <a_trqccid+0x48>)
 8001646:	2120      	movs	r1, #32
 8001648:	f000 fea6 	bl	8002398 <quec_receive>
 800164c:	0003      	movs	r3, r0
 800164e:	001a      	movs	r2, r3
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <a_trqccid+0x4c>)
 8001652:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <a_trqccid+0x4c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d105      	bne.n	8001668 <a_trqccid+0x38>
    {
        quec_transmit((uint8_t *)"AT+QCCID\r\n", 10);
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <a_trqccid+0x50>)
 800165e:	210a      	movs	r1, #10
 8001660:	0018      	movs	r0, r3
 8001662:	f000 ff0f 	bl	8002484 <quec_transmit>
    }

    return;
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	46c0      	nop			; (mov r8, r8)
}
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	20000880 	.word	0x20000880
 8001674:	08001791 	.word	0x08001791
 8001678:	2000088c 	.word	0x2000088c
 800167c:	20000878 	.word	0x20000878
 8001680:	0800d1c8 	.word	0x0800d1c8

08001684 <a_trqcfg>:
 *                               --------
 *
 */

static void a_trqcfg(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    quec_rxflush();
 8001688:	f000 feea 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <a_trqcfg+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <a_trqcfg+0x44>)
 8001694:	22fa      	movs	r2, #250	; 0xfa
 8001696:	00d2      	lsls	r2, r2, #3
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <a_trqcfg+0x48>)
 800169a:	2120      	movs	r1, #32
 800169c:	f000 fe7c 	bl	8002398 <quec_receive>
 80016a0:	0003      	movs	r3, r0
 80016a2:	001a      	movs	r2, r3
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <a_trqcfg+0x4c>)
 80016a6:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <a_trqcfg+0x4c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b06      	cmp	r3, #6
 80016ae:	d105      	bne.n	80016bc <a_trqcfg+0x38>
    {
        quec_transmit((uint8_t *)qcfg1msg, sizeof(qcfg1msg) - 1);
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <a_trqcfg+0x50>)
 80016b2:	210b      	movs	r1, #11
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 fee5 	bl	8002484 <quec_transmit>
    }

    return;
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46c0      	nop			; (mov r8, r8)
}
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20000880 	.word	0x20000880
 80016c8:	08001791 	.word	0x08001791
 80016cc:	2000088c 	.word	0x2000088c
 80016d0:	20000878 	.word	0x20000878
 80016d4:	0800d6b8 	.word	0x0800d6b8

080016d8 <a_trqurccfg>:
 *                               -----------
 *
 */

static void a_trqurccfg(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    quec_rxflush();
 80016dc:	f000 fec0 	bl	8002460 <quec_rxflush>
    rcv_count = 0;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <a_trqurccfg+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <a_trqurccfg+0x44>)
 80016e8:	22fa      	movs	r2, #250	; 0xfa
 80016ea:	00d2      	lsls	r2, r2, #3
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <a_trqurccfg+0x48>)
 80016ee:	2120      	movs	r1, #32
 80016f0:	f000 fe52 	bl	8002398 <quec_receive>
 80016f4:	0003      	movs	r3, r0
 80016f6:	001a      	movs	r2, r3
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <a_trqurccfg+0x4c>)
 80016fa:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <a_trqurccfg+0x4c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b06      	cmp	r3, #6
 8001702:	d105      	bne.n	8001710 <a_trqurccfg+0x38>
    {

        quec_transmit((uint8_t *)qurccfgmsg, sizeof(qurccfgmsg) - 1);
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <a_trqurccfg+0x50>)
 8001706:	2111      	movs	r1, #17
 8001708:	0018      	movs	r0, r3
 800170a:	f000 febb 	bl	8002484 <quec_transmit>
    }

    return;
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46c0      	nop			; (mov r8, r8)
}
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20000880 	.word	0x20000880
 800171c:	08001791 	.word	0x08001791
 8001720:	2000088c 	.word	0x2000088c
 8001724:	20000878 	.word	0x20000878
 8001728:	0800d6c4 	.word	0x0800d6c4

0800172c <a_txate0>:
 *                               --------
 *
 */

static void a_txate0(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    quec_transmit((uint8_t *)"ATE0\r\n", 6);
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <a_txate0+0x14>)
 8001732:	2106      	movs	r1, #6
 8001734:	0018      	movs	r0, r3
 8001736:	f000 fea5 	bl	8002484 <quec_transmit>
    return;
 800173a:	46c0      	nop			; (mov r8, r8)
}
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800d1d4 	.word	0x0800d1d4

08001744 <compare>:
 *
 * return - none
 */

static uint32_t compare(uint32_t count, uint8_t *response)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t stat;

    stat = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < count; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e00f      	b.n	8001778 <compare+0x34>
    {

        if (response[i] != rcv_buffer[i])
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	490a      	ldr	r1, [pc, #40]	; (800178c <compare+0x48>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	18cb      	adds	r3, r1, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d002      	beq.n	8001772 <compare+0x2e>
        {
            stat = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
            break;
 8001770:	e006      	b.n	8001780 <compare+0x3c>
    for (i = 0; i < count; i++)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3eb      	bcc.n	8001758 <compare+0x14>
        }

    }

    return stat;
 8001780:	68bb      	ldr	r3, [r7, #8]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	2000088c 	.word	0x2000088c

08001790 <gsm_rcv_ih>:
 *
 * return - none
 */

static void gsm_rcv_ih(uint8_t stat, uint32_t count)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	701a      	strb	r2, [r3, #0]
    rcv_status = stat;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <gsm_rcv_ih+0x24>)
 80017a0:	1dfa      	adds	r2, r7, #7
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	701a      	strb	r2, [r3, #0]
    rcv_count = count;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <gsm_rcv_ih+0x28>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	601a      	str	r2, [r3, #0]
    return;
 80017ac:	46c0      	nop			; (mov r8, r8)
}
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000878 	.word	0x20000878
 80017b8:	20000880 	.word	0x20000880

080017bc <state_trace>:

static void state_trace(uint32_t evnum)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

    if (gsm_stmachine.sms_curstate != oldstate)
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <state_trace+0x34>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <state_trace+0x38>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d007      	beq.n	80017e0 <state_trace+0x24>
    {
        usb_printf((uint8_t *)"GSM STATE: %u -> %u, EVENT %u\r\n", oldstate, gsm_stmachine.sms_curstate, evnum);
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <state_trace+0x38>)
 80017d2:	6819      	ldr	r1, [r3, #0]
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <state_trace+0x34>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4807      	ldr	r0, [pc, #28]	; (80017f8 <state_trace+0x3c>)
 80017dc:	f001 f8f8 	bl	80029d0 <usb_printf>
    }

    oldstate = gsm_stmachine.sms_curstate;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <state_trace+0x34>)
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <state_trace+0x38>)
 80017e6:	601a      	str	r2, [r3, #0]
    return;
 80017e8:	46c0      	nop			; (mov r8, r8)
}
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000d84 	.word	0x20000d84
 80017f4:	20000888 	.word	0x20000888
 80017f8:	0800d1dc 	.word	0x0800d1dc

080017fc <led_init>:
 *
 * return - none
 */

void led_init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    led_timer = 0xFFFFFFFF;
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <led_init+0xb4>)
 8001804:	2201      	movs	r2, #1
 8001806:	4252      	negs	r2, r2
 8001808:	601a      	str	r2, [r3, #0]
    green_led.lhs_mode = LED_MODE_OFF;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <led_init+0xb8>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
    green_led.lhs_state = 0;
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <led_init+0xb8>)
 8001812:	2200      	movs	r2, #0
 8001814:	705a      	strb	r2, [r3, #1]
    red_led.lhs_mode = LED_MODE_OFF;
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <led_init+0xbc>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    red_led.lhs_state = 0;
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <led_init+0xbc>)
 800181e:	2200      	movs	r2, #0
 8001820:	705a      	strb	r2, [r3, #1]
    yellow_led.lhs_mode = LED_MODE_OFF;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <led_init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
    yellow_led.lhs_state = 0;
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <led_init+0xc0>)
 800182a:	2200      	movs	r2, #0
 800182c:	705a      	strb	r2, [r3, #1]

    initstruc.Pin = GREEN_LED_PIN;
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2208      	movs	r2, #8
 8001832:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2201      	movs	r2, #1
 8001838:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GREEN_LED_PORT, &initstruc);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <led_init+0xc4>)
 8001850:	0019      	movs	r1, r3
 8001852:	0010      	movs	r0, r2
 8001854:	f002 f890 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = RED_LED_PIN;
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2210      	movs	r2, #16
 800185c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RED_LED_PORT, &initstruc);
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <led_init+0xc4>)
 8001862:	0019      	movs	r1, r3
 8001864:	0010      	movs	r0, r2
 8001866:	f002 f887 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = YELLOW_LED_PIN;
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2240      	movs	r2, #64	; 0x40
 800186e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(YELLOW_LED_PORT, &initstruc);
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <led_init+0xc4>)
 8001874:	0019      	movs	r1, r3
 8001876:	0010      	movs	r0, r2
 8001878:	f002 f87e 	bl	8003978 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <led_init+0xc4>)
 800187e:	2200      	movs	r2, #0
 8001880:	2108      	movs	r1, #8
 8001882:	0018      	movs	r0, r3
 8001884:	f002 f9e8 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <led_init+0xc4>)
 800188a:	2200      	movs	r2, #0
 800188c:	2110      	movs	r1, #16
 800188e:	0018      	movs	r0, r3
 8001890:	f002 f9e2 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <led_init+0xc4>)
 8001896:	2200      	movs	r2, #0
 8001898:	2140      	movs	r1, #64	; 0x40
 800189a:	0018      	movs	r0, r3
 800189c:	f002 f9dc 	bl	8003c58 <HAL_GPIO_WritePin>

    led_timer = BLINK_PERIOD_MS / 2;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <led_init+0xb4>)
 80018a2:	22fa      	movs	r2, #250	; 0xfa
 80018a4:	0052      	lsls	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

    return;
 80018a8:	46c0      	nop			; (mov r8, r8)
}
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b006      	add	sp, #24
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200008e4 	.word	0x200008e4
 80018b4:	200008e8 	.word	0x200008e8
 80018b8:	200008ec 	.word	0x200008ec
 80018bc:	200008f0 	.word	0x200008f0
 80018c0:	48000400 	.word	0x48000400

080018c4 <led_green_set>:
 *
 * return - none
 */

void led_green_set(uint8_t mode)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	0002      	movs	r2, r0
 80018cc:	1dfb      	adds	r3, r7, #7
 80018ce:	701a      	strb	r2, [r3, #0]
    led_timer = 0xFFFFFFFF;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <led_green_set+0x64>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	4252      	negs	r2, r2
 80018d6:	601a      	str	r2, [r3, #0]
	green_led.lhs_mode = mode;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <led_green_set+0x68>)
 80018da:	1dfa      	adds	r2, r7, #7
 80018dc:	7812      	ldrb	r2, [r2, #0]
 80018de:	701a      	strb	r2, [r3, #0]

    if (green_led.lhs_mode == LED_MODE_ON)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <led_green_set+0x68>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d109      	bne.n	80018fc <led_green_set+0x38>
        {
            HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <led_green_set+0x6c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	2108      	movs	r1, #8
 80018ee:	0018      	movs	r0, r3
 80018f0:	f002 f9b2 	bl	8003c58 <HAL_GPIO_WritePin>
            green_led.lhs_state = 1;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <led_green_set+0x68>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	705a      	strb	r2, [r3, #1]
 80018fa:	e00c      	b.n	8001916 <led_green_set+0x52>
        }

    else if (green_led.lhs_mode == LED_MODE_OFF)
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <led_green_set+0x68>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d108      	bne.n	8001916 <led_green_set+0x52>
        {
            HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <led_green_set+0x6c>)
 8001906:	2200      	movs	r2, #0
 8001908:	2108      	movs	r1, #8
 800190a:	0018      	movs	r0, r3
 800190c:	f002 f9a4 	bl	8003c58 <HAL_GPIO_WritePin>
            green_led.lhs_state = 0;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <led_green_set+0x68>)
 8001912:	2200      	movs	r2, #0
 8001914:	705a      	strb	r2, [r3, #1]
        }

    led_timer = BLINK_PERIOD_MS / 2;
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <led_green_set+0x64>)
 8001918:	22fa      	movs	r2, #250	; 0xfa
 800191a:	0052      	lsls	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
    return;
 800191e:	46c0      	nop			; (mov r8, r8)
}
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	200008e4 	.word	0x200008e4
 800192c:	200008e8 	.word	0x200008e8
 8001930:	48000400 	.word	0x48000400

08001934 <led_red_set>:
 *
 * return - none
 */

void led_red_set(uint8_t mode)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	0002      	movs	r2, r0
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	701a      	strb	r2, [r3, #0]
    led_timer = 0xFFFFFFFF;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <led_red_set+0x64>)
 8001942:	2201      	movs	r2, #1
 8001944:	4252      	negs	r2, r2
 8001946:	601a      	str	r2, [r3, #0]
	red_led.lhs_mode = mode;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <led_red_set+0x68>)
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	701a      	strb	r2, [r3, #0]

    if (red_led.lhs_mode == LED_MODE_ON)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <led_red_set+0x68>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d109      	bne.n	800196c <led_red_set+0x38>
        {
            HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <led_red_set+0x6c>)
 800195a:	2201      	movs	r2, #1
 800195c:	2110      	movs	r1, #16
 800195e:	0018      	movs	r0, r3
 8001960:	f002 f97a 	bl	8003c58 <HAL_GPIO_WritePin>
            red_led.lhs_state = 1;
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <led_red_set+0x68>)
 8001966:	2201      	movs	r2, #1
 8001968:	705a      	strb	r2, [r3, #1]
 800196a:	e00c      	b.n	8001986 <led_red_set+0x52>
        }

    else if (red_led.lhs_mode == LED_MODE_OFF)
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <led_red_set+0x68>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <led_red_set+0x52>
        {
            HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <led_red_set+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	2110      	movs	r1, #16
 800197a:	0018      	movs	r0, r3
 800197c:	f002 f96c 	bl	8003c58 <HAL_GPIO_WritePin>
            red_led.lhs_state = 0;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <led_red_set+0x68>)
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
        }

    led_timer = BLINK_PERIOD_MS;
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <led_red_set+0x64>)
 8001988:	22fa      	movs	r2, #250	; 0xfa
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	601a      	str	r2, [r3, #0]

    return;
 800198e:	46c0      	nop			; (mov r8, r8)
}
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	200008e4 	.word	0x200008e4
 800199c:	200008ec 	.word	0x200008ec
 80019a0:	48000400 	.word	0x48000400

080019a4 <led_yellow_set>:
 *
 * return - none
 */

void led_yellow_set(uint8_t mode)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	0002      	movs	r2, r0
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	701a      	strb	r2, [r3, #0]
    led_timer = 0xFFFFFFFF;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <led_yellow_set+0x64>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	4252      	negs	r2, r2
 80019b6:	601a      	str	r2, [r3, #0]
    yellow_led.lhs_mode = mode;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <led_yellow_set+0x68>)
 80019ba:	1dfa      	adds	r2, r7, #7
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	701a      	strb	r2, [r3, #0]

    if (yellow_led.lhs_mode == LED_MODE_ON)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <led_yellow_set+0x68>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d109      	bne.n	80019dc <led_yellow_set+0x38>
        {
            HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_SET);
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <led_yellow_set+0x6c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	0018      	movs	r0, r3
 80019d0:	f002 f942 	bl	8003c58 <HAL_GPIO_WritePin>
            yellow_led.lhs_state = 1;
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <led_yellow_set+0x68>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	705a      	strb	r2, [r3, #1]
 80019da:	e00c      	b.n	80019f6 <led_yellow_set+0x52>
        }

    else if (yellow_led.lhs_mode == LED_MODE_OFF)
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <led_yellow_set+0x68>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d108      	bne.n	80019f6 <led_yellow_set+0x52>
        {
            HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <led_yellow_set+0x6c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 f934 	bl	8003c58 <HAL_GPIO_WritePin>
            yellow_led.lhs_state = 0;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <led_yellow_set+0x68>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	705a      	strb	r2, [r3, #1]
        }

    led_timer = BLINK_PERIOD_MS;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <led_yellow_set+0x64>)
 80019f8:	22fa      	movs	r2, #250	; 0xfa
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
    return;
 80019fe:	46c0      	nop			; (mov r8, r8)
}
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b002      	add	sp, #8
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	200008e4 	.word	0x200008e4
 8001a0c:	200008f0 	.word	0x200008f0
 8001a10:	48000400 	.word	0x48000400

08001a14 <led_timer_ih>:
 *
 * return - none
 */

void led_timer_ih()
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

    if (led_timer & 0x80000000)
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <led_timer_ih+0xdc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db61      	blt.n	8001ae4 <led_timer_ih+0xd0>
    {
    	return;
    }

    led_timer--;
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <led_timer_ih+0xdc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <led_timer_ih+0xdc>)
 8001a28:	601a      	str	r2, [r3, #0]

    if (led_timer == 0)
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <led_timer_ih+0xdc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d15a      	bne.n	8001ae8 <led_timer_ih+0xd4>
    {
    	led_timer = BLINK_PERIOD_MS;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <led_timer_ih+0xdc>)
 8001a34:	22fa      	movs	r2, #250	; 0xfa
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	601a      	str	r2, [r3, #0]

        if (green_led.lhs_mode == LED_MODE_BLINK)
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <led_timer_ih+0xe0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d117      	bne.n	8001a72 <led_timer_ih+0x5e>
        {
    	    green_led.lhs_state ^= 0x01;
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <led_timer_ih+0xe0>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4053      	eors	r3, r2
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <led_timer_ih+0xe0>)
 8001a4e:	705a      	strb	r2, [r3, #1]

            if (green_led.lhs_state)
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <led_timer_ih+0xe0>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <led_timer_ih+0x52>
            {
                HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <led_timer_ih+0xe4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f002 f8fa 	bl	8003c58 <HAL_GPIO_WritePin>
 8001a64:	e005      	b.n	8001a72 <led_timer_ih+0x5e>
            }

            else
            {
                HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <led_timer_ih+0xe4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f002 f8f3 	bl	8003c58 <HAL_GPIO_WritePin>
            }

        }

        if (red_led.lhs_mode == LED_MODE_BLINK)
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <led_timer_ih+0xe8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d117      	bne.n	8001aaa <led_timer_ih+0x96>
        {
    	    red_led.lhs_state ^= 0x01;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <led_timer_ih+0xe8>)
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4053      	eors	r3, r2
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <led_timer_ih+0xe8>)
 8001a86:	705a      	strb	r2, [r3, #1]

            if (red_led.lhs_state)
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <led_timer_ih+0xe8>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <led_timer_ih+0x8a>
            {
                HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <led_timer_ih+0xe4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	2110      	movs	r1, #16
 8001a96:	0018      	movs	r0, r3
 8001a98:	f002 f8de 	bl	8003c58 <HAL_GPIO_WritePin>
 8001a9c:	e005      	b.n	8001aaa <led_timer_ih+0x96>
            }

            else
            {
                HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <led_timer_ih+0xe4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f002 f8d7 	bl	8003c58 <HAL_GPIO_WritePin>
            }

        }

        if (yellow_led.lhs_mode == LED_MODE_BLINK)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <led_timer_ih+0xec>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d11a      	bne.n	8001ae8 <led_timer_ih+0xd4>
        {
    	    yellow_led.lhs_state ^= 0x01;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <led_timer_ih+0xec>)
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4053      	eors	r3, r2
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <led_timer_ih+0xec>)
 8001abe:	705a      	strb	r2, [r3, #1]

            if (yellow_led.lhs_state)
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <led_timer_ih+0xec>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <led_timer_ih+0xc2>
            {
                HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_SET);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <led_timer_ih+0xe4>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f002 f8c2 	bl	8003c58 <HAL_GPIO_WritePin>

        }

    }

    return;
 8001ad4:	e008      	b.n	8001ae8 <led_timer_ih+0xd4>
                HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <led_timer_ih+0xe4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	0018      	movs	r0, r3
 8001ade:	f002 f8bb 	bl	8003c58 <HAL_GPIO_WritePin>
    return;
 8001ae2:	e001      	b.n	8001ae8 <led_timer_ih+0xd4>
    	return;
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	e000      	b.n	8001aea <led_timer_ih+0xd6>
    return;
 8001ae8:	46c0      	nop			; (mov r8, r8)
}
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	200008e4 	.word	0x200008e4
 8001af4:	200008e8 	.word	0x200008e8
 8001af8:	48000400 	.word	0x48000400
 8001afc:	200008ec 	.word	0x200008ec
 8001b00:	200008f0 	.word	0x200008f0

08001b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 8001b08:	f001 fd52 	bl	80035b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0c:	f000 f80e 	bl	8001b2c <SystemClock_Config>

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
 // MX_USART1_UART_Init();
 // MX_USART2_UART_Init();
  MX_RTC_Init();
 8001b10:	f000 f878 	bl	8001c04 <MX_RTC_Init>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  HAL_Delay(5000);
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <main+0x24>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f001 fdae 	bl	8003678 <HAL_Delay>

  /*
   * This should never return.
   */

  cmmain();
 8001b1c:	f7fe fc0a 	bl	8000334 <cmmain>
 8001b20:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	00001388 	.word	0x00001388

08001b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b097      	sub	sp, #92	; 0x5c
 8001b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b32:	2428      	movs	r4, #40	; 0x28
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	0018      	movs	r0, r3
 8001b38:	2330      	movs	r3, #48	; 0x30
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f00a fd87 	bl	800c650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b42:	2318      	movs	r3, #24
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	0018      	movs	r0, r3
 8001b48:	2310      	movs	r3, #16
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f00a fd7f 	bl	800c650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	0018      	movs	r0, r3
 8001b56:	2314      	movs	r3, #20
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f00a fd78 	bl	800c650 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b60:	0021      	movs	r1, r4
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	2209      	movs	r2, #9
 8001b66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2201      	movs	r2, #1
 8001b72:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2202      	movs	r2, #2
 8001b78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	0252      	lsls	r2, r2, #9
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	02d2      	lsls	r2, r2, #11
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	0018      	movs	r0, r3
 8001b94:	f003 fb96 	bl	80052c4 <HAL_RCC_OscConfig>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001b9c:	f000 f8d2 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	2118      	movs	r1, #24
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2202      	movs	r2, #2
 8001bac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f003 fe9e 	bl	8005900 <HAL_RCC_ClockConfig>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001bc8:	f000 f8bc 	bl	8001d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <SystemClock_Config+0xd4>)
 8001bd0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	0018      	movs	r0, r3
 8001bea:	f003 ffdf 	bl	8005bac <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001bf2:	f000 f8a7 	bl	8001d44 <Error_Handler>
  }
}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b017      	add	sp, #92	; 0x5c
 8001bfc:	bd90      	pop	{r4, r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	00030001 	.word	0x00030001

08001c04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	2314      	movs	r3, #20
 8001c10:	001a      	movs	r2, r3
 8001c12:	2100      	movs	r1, #0
 8001c14:	f00a fd1c 	bl	800c650 <memset>
  RTC_DateTypeDef sDate = {0};
 8001c18:	003b      	movs	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c20:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <MX_RTC_Init+0xc0>)
 8001c22:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c2c:	227f      	movs	r2, #127	; 0x7f
 8001c2e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c32:	22ff      	movs	r2, #255	; 0xff
 8001c34:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f004 f88c 	bl	8005d68 <HAL_RTC_Init>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001c54:	f000 f876 	bl	8001d44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c76:	1d39      	adds	r1, r7, #4
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f004 f907 	bl	8005e90 <HAL_RTC_SetTime>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8001c86:	f000 f85d 	bl	8001d44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c8a:	003b      	movs	r3, r7
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c90:	003b      	movs	r3, r7
 8001c92:	2201      	movs	r2, #1
 8001c94:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001c96:	003b      	movs	r3, r7
 8001c98:	2201      	movs	r2, #1
 8001c9a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001c9c:	003b      	movs	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ca2:	0039      	movs	r1, r7
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_RTC_Init+0xbc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f004 f9ad 	bl	8006008 <HAL_RTC_SetDate>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8001cb2:	f000 f847 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	20000e14 	.word	0x20000e14
 8001cc4:	40002800 	.word	0x40002800

08001cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <MX_SPI1_Init+0x78>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cd4:	2282      	movs	r2, #130	; 0x82
 8001cd6:	0052      	lsls	r2, r2, #1
 8001cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001ce2:	22e0      	movs	r2, #224	; 0xe0
 8001ce4:	00d2      	lsls	r2, r2, #3
 8001ce6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001cfe:	2208      	movs	r2, #8
 8001d00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d16:	2207      	movs	r2, #7
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d22:	2208      	movs	r2, #8
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <MX_SPI1_Init+0x74>)
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f004 fa89 	bl	8006240 <HAL_SPI_Init>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d32:	f000 f807 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000e7c 	.word	0x20000e7c
 8001d40:	40013000 	.word	0x40013000

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <quec_3v8enbl>:
 *
 *
 */

void quec_3v8enbl(uint8_t onoff)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	0002      	movs	r2, r0
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	701a      	strb	r2, [r3, #0]

    if (onoff)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d008      	beq.n	8001d74 <quec_3v8enbl+0x26>
    {
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_SET);
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	0219      	lsls	r1, r3, #8
 8001d66:	2390      	movs	r3, #144	; 0x90
 8001d68:	05db      	lsls	r3, r3, #23
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f001 ff73 	bl	8003c58 <HAL_GPIO_WritePin>
    else
    {
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
    }

    return;
 8001d72:	e008      	b.n	8001d86 <quec_3v8enbl+0x38>
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	0219      	lsls	r1, r3, #8
 8001d78:	2390      	movs	r3, #144	; 0x90
 8001d7a:	05db      	lsls	r3, r3, #23
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f001 ff6a 	bl	8003c58 <HAL_GPIO_WritePin>
    return;
 8001d84:	46c0      	nop			; (mov r8, r8)
}
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <quec_init>:
 *
 *
 */

void quec_init(void)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b0a9      	sub	sp, #164	; 0xa4
 8001d90:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;
    UART_HandleTypeDef huart;
    HAL_StatusTypeDef halstat;

    initstruc.Pin = GSM_PWR_PIN;
 8001d92:	2488      	movs	r4, #136	; 0x88
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	193b      	adds	r3, r7, r4
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_PWR_PORT, &initstruc);
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <quec_init+0x1a8>)
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f001 fddd 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = GSM_RESET_PIN;
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GSM_RESET_PORT, &initstruc);
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	; (8001f34 <quec_init+0x1a8>)
 8001dc8:	0019      	movs	r1, r3
 8001dca:	0010      	movs	r0, r2
 8001dcc:	f001 fdd4 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = GSM_ENBL_PIN;
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GSM_ENBL_PORT, &initstruc);
 8001dd8:	193a      	adds	r2, r7, r4
 8001dda:	2390      	movs	r3, #144	; 0x90
 8001ddc:	05db      	lsls	r3, r3, #23
 8001dde:	0011      	movs	r1, r2
 8001de0:	0018      	movs	r0, r3
 8001de2:	f001 fdc9 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = GSM_DTR_PIN;
 8001de6:	193b      	adds	r3, r7, r4
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	00d2      	lsls	r2, r2, #3
 8001dec:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	2201      	movs	r2, #1
 8001df2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(GSM_DTR_PORT, &initstruc);
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <quec_init+0x1a8>)
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0010      	movs	r0, r2
 8001dfc:	f001 fdbc 	bl	8003978 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_RESET);
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <quec_init+0x1a8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	2101      	movs	r1, #1
 8001e06:	0018      	movs	r0, r3
 8001e08:	f001 ff26 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	0219      	lsls	r1, r3, #8
 8001e10:	2390      	movs	r3, #144	; 0x90
 8001e12:	05db      	lsls	r3, r3, #23
 8001e14:	2200      	movs	r2, #0
 8001e16:	0018      	movs	r0, r3
 8001e18:	f001 ff1e 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_RESET);
 8001e1c:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <quec_init+0x1a8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0018      	movs	r0, r3
 8001e24:	f001 ff18 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_DTR_PORT, GSM_DTR_PIN, GPIO_PIN_RESET);
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4841      	ldr	r0, [pc, #260]	; (8001f34 <quec_init+0x1a8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	0019      	movs	r1, r3
 8001e32:	f001 ff11 	bl	8003c58 <HAL_GPIO_WritePin>

    initstruc.Pin = GSM_UART_TX_PIN;
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	2208      	movs	r2, #8
 8001e3a:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2202      	movs	r2, #2
 8001e40:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = GSM_UART_TX_AF;
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	2201      	movs	r2, #1
 8001e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_UART_TX_PORT, &initstruc);
 8001e48:	193a      	adds	r2, r7, r4
 8001e4a:	2390      	movs	r3, #144	; 0x90
 8001e4c:	05db      	lsls	r3, r3, #23
 8001e4e:	0011      	movs	r1, r2
 8001e50:	0018      	movs	r0, r3
 8001e52:	f001 fd91 	bl	8003978 <HAL_GPIO_Init>

    initstruc.Pin = GSM_UART_RX_PIN;
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	2204      	movs	r2, #4
 8001e5a:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	2202      	movs	r2, #2
 8001e60:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = GSM_UART_RX_AF;
 8001e62:	193b      	adds	r3, r7, r4
 8001e64:	2201      	movs	r2, #1
 8001e66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_UART_RX_PORT, &initstruc);
 8001e68:	193a      	adds	r2, r7, r4
 8001e6a:	2390      	movs	r3, #144	; 0x90
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f001 fd81 	bl	8003978 <HAL_GPIO_Init>

    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <quec_init+0x1ac>)
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <quec_init+0x1ac>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0289      	lsls	r1, r1, #10
 8001e80:	430a      	orrs	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <quec_init+0x1ac>)
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	029b      	lsls	r3, r3, #10
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

    huart.Instance = GSM_UART;
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <quec_init+0x1b0>)
 8001e96:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	22e1      	movs	r2, #225	; 0xe1
 8001e9c:	0252      	lsls	r2, r2, #9
 8001e9e:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	220c      	movs	r2, #12
 8001eb6:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
    huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
    huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
    halstat = HAL_UART_Init(&huart);
 8001ed0:	239f      	movs	r3, #159	; 0x9f
 8001ed2:	18fc      	adds	r4, r7, r3
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f005 fb12 	bl	8007500 <HAL_UART_Init>
 8001edc:	0003      	movs	r3, r0
 8001ede:	7023      	strb	r3, [r4, #0]
    if (halstat != HAL_OK)
    {
//        crash();
    }

    GSM_DMA_CHAN->CPAR = (uint32_t)&GSM_UART->TDR;
 8001ee0:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <quec_init+0x1b4>)
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <quec_init+0x1b8>)
 8001ee4:	609a      	str	r2, [r3, #8]

    taskstate = TS_INIT;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <quec_init+0x1bc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
    taskoldstate = 255;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <quec_init+0x1c0>)
 8001eee:	22ff      	movs	r2, #255	; 0xff
 8001ef0:	701a      	strb	r2, [r3, #0]
    output_busy = 0;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <quec_init+0x1c4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
    set_timer(0);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 fb97 	bl	800262c <set_timer>
    quec_ready_flag = 0;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <quec_init+0x1c8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    rxget = 0;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <quec_init+0x1cc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    rxput = 0;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <quec_init+0x1d0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	201c      	movs	r0, #28
 8001f16:	f001 fc7f 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f1a:	201c      	movs	r0, #28
 8001f1c:	f001 fc91 	bl	8003842 <HAL_NVIC_EnableIRQ>
    GSM_UART->CR1 |= USART_CR1_RXNEIE;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <quec_init+0x1b0>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <quec_init+0x1b0>)
 8001f26:	2120      	movs	r1, #32
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
    return;
 8001f2c:	46c0      	nop			; (mov r8, r8)
}
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b029      	add	sp, #164	; 0xa4
 8001f32:	bd90      	pop	{r4, r7, pc}
 8001f34:	48000400 	.word	0x48000400
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40004400 	.word	0x40004400
 8001f40:	40020044 	.word	0x40020044
 8001f44:	40004428 	.word	0x40004428
 8001f48:	200008f3 	.word	0x200008f3
 8001f4c:	200008f4 	.word	0x200008f4
 8001f50:	200008f2 	.word	0x200008f2
 8001f54:	20000ff4 	.word	0x20000ff4
 8001f58:	200008f8 	.word	0x200008f8
 8001f5c:	200008fc 	.word	0x200008fc

08001f60 <quec_task>:
 *
 *
 */

void quec_task(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
    uint8_t tempchar;

    if (taskstate != taskoldstate)
 8001f66:	4bde      	ldr	r3, [pc, #888]	; (80022e0 <quec_task+0x380>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4bde      	ldr	r3, [pc, #888]	; (80022e4 <quec_task+0x384>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d009      	beq.n	8001f86 <quec_task+0x26>
    {
        usb_printf((uint8_t *)"QUEC STATE: %d -> %d\r\n", taskoldstate, taskstate);
 8001f72:	4bdc      	ldr	r3, [pc, #880]	; (80022e4 <quec_task+0x384>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	0019      	movs	r1, r3
 8001f78:	4bd9      	ldr	r3, [pc, #868]	; (80022e0 <quec_task+0x380>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	4bda      	ldr	r3, [pc, #872]	; (80022e8 <quec_task+0x388>)
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fd25 	bl	80029d0 <usb_printf>
    }

    taskoldstate = taskstate;
 8001f86:	4bd6      	ldr	r3, [pc, #856]	; (80022e0 <quec_task+0x380>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4bd6      	ldr	r3, [pc, #856]	; (80022e4 <quec_task+0x384>)
 8001f8c:	701a      	strb	r2, [r3, #0]

            HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_SET);
 8001f8e:	4bd7      	ldr	r3, [pc, #860]	; (80022ec <quec_task+0x38c>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	2101      	movs	r1, #1
 8001f94:	0018      	movs	r0, r3
 8001f96:	f001 fe5f 	bl	8003c58 <HAL_GPIO_WritePin>
            HAL_Delay(1500);
 8001f9a:	4bd5      	ldr	r3, [pc, #852]	; (80022f0 <quec_task+0x390>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 fb6b 	bl	8003678 <HAL_Delay>
            HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_RESET);
 8001fa2:	4bd2      	ldr	r3, [pc, #840]	; (80022ec <quec_task+0x38c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f001 fe55 	bl	8003c58 <HAL_GPIO_WritePin>

    switch(taskstate)
 8001fae:	4bcc      	ldr	r3, [pc, #816]	; (80022e0 <quec_task+0x380>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d900      	bls.n	8001fb8 <quec_task+0x58>
 8001fb6:	e1d1      	b.n	800235c <quec_task+0x3fc>
 8001fb8:	009a      	lsls	r2, r3, #2
 8001fba:	4bce      	ldr	r3, [pc, #824]	; (80022f4 <quec_task+0x394>)
 8001fbc:	18d3      	adds	r3, r2, r3
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	469f      	mov	pc, r3
        case TS_INIT:
        {
//            HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_RESET);
//            HAL_Delay(2500);
//            HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_SET);
            rxget = 0;
 8001fc2:	4bcd      	ldr	r3, [pc, #820]	; (80022f8 <quec_task+0x398>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
            rxput = 0;
 8001fc8:	4bcc      	ldr	r3, [pc, #816]	; (80022fc <quec_task+0x39c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
            rxbufindex = 0;
 8001fce:	4bcc      	ldr	r3, [pc, #816]	; (8002300 <quec_task+0x3a0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
            quec_ready_flag = 1;
 8001fd4:	4bcb      	ldr	r3, [pc, #812]	; (8002304 <quec_task+0x3a4>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
            taskstate = TS_IDLE;
 8001fda:	4bc1      	ldr	r3, [pc, #772]	; (80022e0 <quec_task+0x380>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
            break;
 8001fe0:	e1cc      	b.n	800237c <quec_task+0x41c>
        }

        case TS_IDLE:
        {

			if (quec_ready_flag == 0)
 8001fe2:	4bc8      	ldr	r3, [pc, #800]	; (8002304 <quec_task+0x3a4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <quec_task+0x92>
			{
			    taskstate = TS_INIT;
 8001fea:	4bbd      	ldr	r3, [pc, #756]	; (80022e0 <quec_task+0x380>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
			    break;
 8001ff0:	e1c4      	b.n	800237c <quec_task+0x41c>
			}

            if (input_busy == 0)
 8001ff2:	4bc5      	ldr	r3, [pc, #788]	; (8002308 <quec_task+0x3a8>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d100      	bne.n	8001ffc <quec_task+0x9c>
 8001ffa:	e1b2      	b.n	8002362 <quec_task+0x402>
            {
                break;
            }

            if (rxget != rxput)
 8001ffc:	4bbe      	ldr	r3, [pc, #760]	; (80022f8 <quec_task+0x398>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4bbe      	ldr	r3, [pc, #760]	; (80022fc <quec_task+0x39c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d03b      	beq.n	8002080 <quec_task+0x120>
            {

                set_timer(rxtimeout);
 8002008:	4bc0      	ldr	r3, [pc, #768]	; (800230c <quec_task+0x3ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fb0d 	bl	800262c <set_timer>
                tempchar = rxintbuf[rxget];
 8002012:	4bb9      	ldr	r3, [pc, #740]	; (80022f8 <quec_task+0x398>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	49bd      	ldr	r1, [pc, #756]	; (8002310 <quec_task+0x3b0>)
 800201a:	5c8a      	ldrb	r2, [r1, r2]
 800201c:	701a      	strb	r2, [r3, #0]
                rxget++;
 800201e:	4bb6      	ldr	r3, [pc, #728]	; (80022f8 <quec_task+0x398>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	4bb4      	ldr	r3, [pc, #720]	; (80022f8 <quec_task+0x398>)
 8002026:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 8002028:	4bb3      	ldr	r3, [pc, #716]	; (80022f8 <quec_task+0x398>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	227f      	movs	r2, #127	; 0x7f
 800202e:	401a      	ands	r2, r3
 8002030:	4bb1      	ldr	r3, [pc, #708]	; (80022f8 <quec_task+0x398>)
 8002032:	601a      	str	r2, [r3, #0]
                rxbufindex = 0;
 8002034:	4bb2      	ldr	r3, [pc, #712]	; (8002300 <quec_task+0x3a0>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b0d      	cmp	r3, #13
 8002040:	d103      	bne.n	800204a <quec_task+0xea>
                {
                    taskstate = TS_CR1;
 8002042:	4ba7      	ldr	r3, [pc, #668]	; (80022e0 <quec_task+0x380>)
 8002044:	2202      	movs	r2, #2
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e00c      	b.n	8002064 <quec_task+0x104>
                }

                else
                {
                    rxbufaddr[rxbufindex] = tempchar;
 800204a:	4bb2      	ldr	r3, [pc, #712]	; (8002314 <quec_task+0x3b4>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4bac      	ldr	r3, [pc, #688]	; (8002300 <quec_task+0x3a0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	1dfa      	adds	r2, r7, #7
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 800205a:	4ba9      	ldr	r3, [pc, #676]	; (8002300 <quec_task+0x3a0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4ba7      	ldr	r3, [pc, #668]	; (8002300 <quec_task+0x3a0>)
 8002062:	601a      	str	r2, [r3, #0]
                }

                if (rxbufindex == rxbuflen)
 8002064:	4ba6      	ldr	r3, [pc, #664]	; (8002300 <quec_task+0x3a0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4bab      	ldr	r3, [pc, #684]	; (8002318 <quec_task+0x3b8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d103      	bne.n	8002078 <quec_task+0x118>
                {
                    taskstate = TS_RXOVFLOW;
 8002070:	4b9b      	ldr	r3, [pc, #620]	; (80022e0 <quec_task+0x380>)
 8002072:	2204      	movs	r2, #4
 8002074:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 8002076:	e176      	b.n	8002366 <quec_task+0x406>
                    taskstate = TS_MESSAGE;
 8002078:	4b99      	ldr	r3, [pc, #612]	; (80022e0 <quec_task+0x380>)
 800207a:	2203      	movs	r2, #3
 800207c:	701a      	strb	r2, [r3, #0]
            break;
 800207e:	e172      	b.n	8002366 <quec_task+0x406>
                if (timer1 == 0)
 8002080:	4ba6      	ldr	r3, [pc, #664]	; (800231c <quec_task+0x3bc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d000      	beq.n	800208a <quec_task+0x12a>
 8002088:	e16d      	b.n	8002366 <quec_task+0x406>
                    taskstate = TS_TIMEOUT;
 800208a:	4b95      	ldr	r3, [pc, #596]	; (80022e0 <quec_task+0x380>)
 800208c:	2206      	movs	r2, #6
 800208e:	701a      	strb	r2, [r3, #0]
            break;
 8002090:	e169      	b.n	8002366 <quec_task+0x406>
        }

        case TS_CR1:
        {

            if (rxget != rxput)
 8002092:	4b99      	ldr	r3, [pc, #612]	; (80022f8 <quec_task+0x398>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b99      	ldr	r3, [pc, #612]	; (80022fc <quec_task+0x39c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d035      	beq.n	800210a <quec_task+0x1aa>
            {
                set_timer(rxtimeout);
 800209e:	4b9b      	ldr	r3, [pc, #620]	; (800230c <quec_task+0x3ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 fac2 	bl	800262c <set_timer>
                tempchar = rxintbuf[rxget];
 80020a8:	4b93      	ldr	r3, [pc, #588]	; (80022f8 <quec_task+0x398>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	4998      	ldr	r1, [pc, #608]	; (8002310 <quec_task+0x3b0>)
 80020b0:	5c8a      	ldrb	r2, [r1, r2]
 80020b2:	701a      	strb	r2, [r3, #0]
                rxget++;
 80020b4:	4b90      	ldr	r3, [pc, #576]	; (80022f8 <quec_task+0x398>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <quec_task+0x398>)
 80020bc:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <quec_task+0x398>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	227f      	movs	r2, #127	; 0x7f
 80020c4:	401a      	ands	r2, r3
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <quec_task+0x398>)
 80020c8:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b0d      	cmp	r3, #13
 80020d0:	d100      	bne.n	80020d4 <quec_task+0x174>
 80020d2:	e14a      	b.n	800236a <quec_task+0x40a>
                {
                	break;
                }

                rxbufaddr[rxbufindex] = tempchar;
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <quec_task+0x3b4>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <quec_task+0x3a0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	18d3      	adds	r3, r2, r3
 80020de:	1dfa      	adds	r2, r7, #7
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	701a      	strb	r2, [r3, #0]
                rxbufindex++;
 80020e4:	4b86      	ldr	r3, [pc, #536]	; (8002300 <quec_task+0x3a0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4b85      	ldr	r3, [pc, #532]	; (8002300 <quec_task+0x3a0>)
 80020ec:	601a      	str	r2, [r3, #0]

                if (rxbufindex == rxbuflen)
 80020ee:	4b84      	ldr	r3, [pc, #528]	; (8002300 <quec_task+0x3a0>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <quec_task+0x3b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d103      	bne.n	8002102 <quec_task+0x1a2>
                {
                    taskstate = TS_RXOVFLOW;
 80020fa:	4b79      	ldr	r3, [pc, #484]	; (80022e0 <quec_task+0x380>)
 80020fc:	2204      	movs	r2, #4
 80020fe:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 8002100:	e135      	b.n	800236e <quec_task+0x40e>
                    taskstate = TS_MESSAGE;
 8002102:	4b77      	ldr	r3, [pc, #476]	; (80022e0 <quec_task+0x380>)
 8002104:	2203      	movs	r2, #3
 8002106:	701a      	strb	r2, [r3, #0]
            break;
 8002108:	e131      	b.n	800236e <quec_task+0x40e>
                if (timer1 == 0)
 800210a:	4b84      	ldr	r3, [pc, #528]	; (800231c <quec_task+0x3bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d000      	beq.n	8002114 <quec_task+0x1b4>
 8002112:	e12c      	b.n	800236e <quec_task+0x40e>
                    taskstate = TS_TIMEOUT;
 8002114:	4b72      	ldr	r3, [pc, #456]	; (80022e0 <quec_task+0x380>)
 8002116:	2206      	movs	r2, #6
 8002118:	701a      	strb	r2, [r3, #0]
            break;
 800211a:	e128      	b.n	800236e <quec_task+0x40e>
        }

        case TS_MESSAGE:
        {

            if (rxget != rxput)
 800211c:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <quec_task+0x398>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b76      	ldr	r3, [pc, #472]	; (80022fc <quec_task+0x39c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d041      	beq.n	80021ac <quec_task+0x24c>
            {
                set_timer(rxtimeout);
 8002128:	4b78      	ldr	r3, [pc, #480]	; (800230c <quec_task+0x3ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 fa7d 	bl	800262c <set_timer>

                while (rxget != rxput)
 8002132:	e033      	b.n	800219c <quec_task+0x23c>
                {
                    tempchar = rxintbuf[rxget];
 8002134:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <quec_task+0x398>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	4975      	ldr	r1, [pc, #468]	; (8002310 <quec_task+0x3b0>)
 800213c:	5c8a      	ldrb	r2, [r1, r2]
 800213e:	701a      	strb	r2, [r3, #0]
                    rxget++;
 8002140:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <quec_task+0x398>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <quec_task+0x398>)
 8002148:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 800214a:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <quec_task+0x398>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	227f      	movs	r2, #127	; 0x7f
 8002150:	401a      	ands	r2, r3
 8002152:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <quec_task+0x398>)
 8002154:	601a      	str	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = tempchar;
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <quec_task+0x3b4>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b69      	ldr	r3, [pc, #420]	; (8002300 <quec_task+0x3a0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	1dfa      	adds	r2, r7, #7
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 8002166:	4b66      	ldr	r3, [pc, #408]	; (8002300 <quec_task+0x3a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	4b64      	ldr	r3, [pc, #400]	; (8002300 <quec_task+0x3a0>)
 800216e:	601a      	str	r2, [r3, #0]

                    if (tempchar == 0x0D)
 8002170:	1dfb      	adds	r3, r7, #7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b0d      	cmp	r3, #13
 8002176:	d103      	bne.n	8002180 <quec_task+0x220>
                    {
                        taskstate = TS_COMPL;
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <quec_task+0x380>)
 800217a:	2205      	movs	r2, #5
 800217c:	701a      	strb	r2, [r3, #0]
                	    break;
 800217e:	e014      	b.n	80021aa <quec_task+0x24a>
                    }


                    if (rxbufindex == rxbuflen)
 8002180:	4b5f      	ldr	r3, [pc, #380]	; (8002300 <quec_task+0x3a0>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b64      	ldr	r3, [pc, #400]	; (8002318 <quec_task+0x3b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <quec_task+0x23c>
                    {
                        timer2 = 1000;
 800218c:	4b64      	ldr	r3, [pc, #400]	; (8002320 <quec_task+0x3c0>)
 800218e:	22fa      	movs	r2, #250	; 0xfa
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	601a      	str	r2, [r3, #0]
                        taskstate = TS_RXOVFLOW;
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <quec_task+0x380>)
 8002196:	2204      	movs	r2, #4
 8002198:	701a      	strb	r2, [r3, #0]
                        break;
 800219a:	e006      	b.n	80021aa <quec_task+0x24a>
                while (rxget != rxput)
 800219c:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <quec_task+0x398>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b56      	ldr	r3, [pc, #344]	; (80022fc <quec_task+0x39c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1c5      	bne.n	8002134 <quec_task+0x1d4>
                    }

                }

                break;
 80021a8:	e0e8      	b.n	800237c <quec_task+0x41c>
 80021aa:	e0e7      	b.n	800237c <quec_task+0x41c>
            }

            else
            {

                if (timer1 == 0)
 80021ac:	4b5b      	ldr	r3, [pc, #364]	; (800231c <quec_task+0x3bc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d000      	beq.n	80021b6 <quec_task+0x256>
 80021b4:	e0dd      	b.n	8002372 <quec_task+0x412>
                {
                    taskstate = TS_TIMEOUT;
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <quec_task+0x380>)
 80021b8:	2206      	movs	r2, #6
 80021ba:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80021bc:	e0d9      	b.n	8002372 <quec_task+0x412>
        }

        case TS_COMPL:
        {
            input_busy = 0;
 80021be:	4b52      	ldr	r3, [pc, #328]	; (8002308 <quec_task+0x3a8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
            input_status = QS_OK;
 80021c4:	4b57      	ldr	r3, [pc, #348]	; (8002324 <quec_task+0x3c4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
            taskstate = TS_IDLE;
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <quec_task+0x380>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
            rxbufaddr[rxbufindex] = 0x00;
 80021d0:	4b50      	ldr	r3, [pc, #320]	; (8002314 <quec_task+0x3b4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <quec_task+0x3a0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	18d3      	adds	r3, r2, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
            usb_printf((uint8_t *)"QUEC IN: %s\r\n", rxbufaddr);
 80021de:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <quec_task+0x3b4>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <quec_task+0x3c8>)
 80021e4:	0011      	movs	r1, r2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fbf2 	bl	80029d0 <usb_printf>

            if (rxcomplih != NULL)
 80021ec:	4b4f      	ldr	r3, [pc, #316]	; (800232c <quec_task+0x3cc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d100      	bne.n	80021f6 <quec_task+0x296>
 80021f4:	e0bf      	b.n	8002376 <quec_task+0x416>
            {
                rxcomplih(input_status, rxbufindex);
 80021f6:	4b4d      	ldr	r3, [pc, #308]	; (800232c <quec_task+0x3cc>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <quec_task+0x3c4>)
 80021fc:	7818      	ldrb	r0, [r3, #0]
 80021fe:	4b40      	ldr	r3, [pc, #256]	; (8002300 <quec_task+0x3a0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0019      	movs	r1, r3
 8002204:	4790      	blx	r2
            }

            break;
 8002206:	e0b6      	b.n	8002376 <quec_task+0x416>
        }

        case TS_RXOVFLOW:
        {

            if (rxget != rxput)
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <quec_task+0x398>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <quec_task+0x39c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d04a      	beq.n	80022aa <quec_task+0x34a>
            {
                set_timer(rxtimeout);
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <quec_task+0x3ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fa07 	bl	800262c <set_timer>
                tempchar = rxintbuf[rxget];
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <quec_task+0x398>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	493a      	ldr	r1, [pc, #232]	; (8002310 <quec_task+0x3b0>)
 8002226:	5c8a      	ldrb	r2, [r1, r2]
 8002228:	701a      	strb	r2, [r3, #0]
                rxget++;
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <quec_task+0x398>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <quec_task+0x398>)
 8002232:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <quec_task+0x398>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	227f      	movs	r2, #127	; 0x7f
 800223a:	401a      	ands	r2, r3
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <quec_task+0x398>)
 800223e:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b0d      	cmp	r3, #13
 8002246:	d115      	bne.n	8002274 <quec_task+0x314>
                {
                    input_status = QS_OVERFLOW;
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <quec_task+0x3c4>)
 800224a:	2203      	movs	r2, #3
 800224c:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <quec_task+0x3cc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <quec_task+0x306>
                    {
                        rxcomplih(input_status, rxbufindex);
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <quec_task+0x3cc>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b32      	ldr	r3, [pc, #200]	; (8002324 <quec_task+0x3c4>)
 800225c:	7818      	ldrb	r0, [r3, #0]
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <quec_task+0x3a0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0019      	movs	r1, r3
 8002264:	4790      	blx	r2
                    }

                    input_busy = 0;
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <quec_task+0x3a8>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <quec_task+0x380>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
                    break;
 8002272:	e083      	b.n	800237c <quec_task+0x41c>
                }

                if (timer2 == 0)
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <quec_task+0x3c0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d000      	beq.n	800227e <quec_task+0x31e>
 800227c:	e07d      	b.n	800237a <quec_task+0x41a>
                {
                    input_status = QS_STREAMING;
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <quec_task+0x3c4>)
 8002280:	2205      	movs	r2, #5
 8002282:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <quec_task+0x3cc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <quec_task+0x33c>
                    {
                        rxcomplih(input_status, rxbufindex);
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <quec_task+0x3cc>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <quec_task+0x3c4>)
 8002292:	7818      	ldrb	r0, [r3, #0]
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <quec_task+0x3a0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0019      	movs	r1, r3
 800229a:	4790      	blx	r2
                    }

                    input_busy = 0;
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <quec_task+0x3a8>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <quec_task+0x380>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
                    break;
 80022a8:	e068      	b.n	800237c <quec_task+0x41c>
            }

            else
            {

            	if (timer1 == 0)
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <quec_task+0x3bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d163      	bne.n	800237a <quec_task+0x41a>
            	{
                    input_status = QS_OVERFLOW;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <quec_task+0x3c4>)
 80022b4:	2203      	movs	r2, #3
 80022b6:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 80022b8:	4b1c      	ldr	r3, [pc, #112]	; (800232c <quec_task+0x3cc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <quec_task+0x370>
                    {
                        rxcomplih(input_status, rxbufindex);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <quec_task+0x3cc>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <quec_task+0x3c4>)
 80022c6:	7818      	ldrb	r0, [r3, #0]
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <quec_task+0x3a0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0019      	movs	r1, r3
 80022ce:	4790      	blx	r2
                    }

                    input_busy = 0;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <quec_task+0x3a8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 80022d6:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <quec_task+0x380>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80022dc:	e04d      	b.n	800237a <quec_task+0x41a>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	200008f3 	.word	0x200008f3
 80022e4:	200008f4 	.word	0x200008f4
 80022e8:	0800d1fc 	.word	0x0800d1fc
 80022ec:	48000400 	.word	0x48000400
 80022f0:	000005dc 	.word	0x000005dc
 80022f4:	0800d6d8 	.word	0x0800d6d8
 80022f8:	200008f8 	.word	0x200008f8
 80022fc:	200008fc 	.word	0x200008fc
 8002300:	2000090c 	.word	0x2000090c
 8002304:	20000ff4 	.word	0x20000ff4
 8002308:	200008f5 	.word	0x200008f5
 800230c:	20000914 	.word	0x20000914
 8002310:	20000924 	.word	0x20000924
 8002314:	2000091c 	.word	0x2000091c
 8002318:	20000910 	.word	0x20000910
 800231c:	20000900 	.word	0x20000900
 8002320:	20000904 	.word	0x20000904
 8002324:	200008f6 	.word	0x200008f6
 8002328:	0800d214 	.word	0x0800d214
 800232c:	20000918 	.word	0x20000918
        }


        case TS_TIMEOUT:
        {
            input_busy = 0;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <quec_task+0x424>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
            input_status = QS_TIMEOUT;
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <quec_task+0x428>)
 8002338:	2204      	movs	r2, #4
 800233a:	701a      	strb	r2, [r3, #0]

            if (rxcomplih != NULL)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <quec_task+0x42c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <quec_task+0x3f4>
            {
                rxcomplih(input_status, rxbufindex);
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <quec_task+0x42c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <quec_task+0x428>)
 800234a:	7818      	ldrb	r0, [r3, #0]
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <quec_task+0x430>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0019      	movs	r1, r3
 8002352:	4790      	blx	r2
            }

            taskstate = TS_IDLE;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <quec_task+0x434>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
            break;
 800235a:	e00f      	b.n	800237c <quec_task+0x41c>
        }

        default:
        {
            crash();
 800235c:	f7fe f92a 	bl	80005b4 <crash>
        }

    }

    return;
 8002360:	e00c      	b.n	800237c <quec_task+0x41c>
                break;
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	e00a      	b.n	800237c <quec_task+0x41c>
            break;
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	e008      	b.n	800237c <quec_task+0x41c>
                	break;
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	e006      	b.n	800237c <quec_task+0x41c>
            break;
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	e004      	b.n	800237c <quec_task+0x41c>
            break;
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	e002      	b.n	800237c <quec_task+0x41c>
            break;
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	e000      	b.n	800237c <quec_task+0x41c>
            break;
 800237a:	46c0      	nop			; (mov r8, r8)
    return;
 800237c:	46c0      	nop			; (mov r8, r8)
}
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200008f5 	.word	0x200008f5
 8002388:	200008f6 	.word	0x200008f6
 800238c:	20000918 	.word	0x20000918
 8002390:	2000090c 	.word	0x2000090c
 8002394:	200008f3 	.word	0x200008f3

08002398 <quec_receive>:
 *
 *
 */

uint8_t quec_receive(uint8_t *ibuf, uint16_t ilen, uint32_t timeout, void(*complih)(uint8_t, uint32_t))
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	230a      	movs	r3, #10
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	1c0a      	adds	r2, r1, #0
 80023aa:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;

    if (input_busy)
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <quec_receive+0x9c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <quec_receive+0x24>
    {
        retstat = QS_RXBUSY;
 80023b4:	2317      	movs	r3, #23
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2202      	movs	r2, #2
 80023ba:	701a      	strb	r2, [r3, #0]
    }

    if (ilen == 0)
 80023bc:	230a      	movs	r3, #10
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d107      	bne.n	80023d6 <quec_receive+0x3e>
    {
        rxbuflen = 0;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <quec_receive+0xa0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
        retstat = QS_OK;
 80023cc:	2317      	movs	r3, #23
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	e01f      	b.n	8002416 <quec_receive+0x7e>
    }

    else if (ibuf == 0)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <quec_receive+0x4a>
    {
        crash();
 80023dc:	f7fe f8ea 	bl	80005b4 <crash>
 80023e0:	e019      	b.n	8002416 <quec_receive+0x7e>
    }

    else
    {
        rxbufaddr = ibuf;
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <quec_receive+0xa4>)
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]
        rxbuflen = ilen;
 80023e8:	230a      	movs	r3, #10
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <quec_receive+0xa0>)
 80023f0:	601a      	str	r2, [r3, #0]
        rxtimeout = timeout;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <quec_receive+0xa8>)
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	601a      	str	r2, [r3, #0]
        rxcomplih = complih;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <quec_receive+0xac>)
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	601a      	str	r2, [r3, #0]
        set_timer(rxtimeout);
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <quec_receive+0xa8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f912 	bl	800262c <set_timer>
        input_busy = 1;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <quec_receive+0x9c>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 800240e:	2317      	movs	r3, #23
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2206      	movs	r2, #6
 8002414:	701a      	strb	r2, [r3, #0]
    }

    usb_printf((uint8_t *)"QUEC RECEIVE: %d\r\n", retstat);
 8002416:	2417      	movs	r4, #23
 8002418:	193b      	adds	r3, r7, r4
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <quec_receive+0xb0>)
 800241e:	0011      	movs	r1, r2
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fad5 	bl	80029d0 <usb_printf>
    return retstat;
 8002426:	193b      	adds	r3, r7, r4
 8002428:	781b      	ldrb	r3, [r3, #0]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b007      	add	sp, #28
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	200008f5 	.word	0x200008f5
 8002438:	20000910 	.word	0x20000910
 800243c:	2000091c 	.word	0x2000091c
 8002440:	20000914 	.word	0x20000914
 8002444:	20000918 	.word	0x20000918
 8002448:	0800d224 	.word	0x0800d224

0800244c <quec_reset>:
 *
 *
 */

void quec_reset(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
    quec_ready_flag = 0;
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <quec_reset+0x10>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
    return;
 8002456:	46c0      	nop			; (mov r8, r8)
}
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000ff4 	.word	0x20000ff4

08002460 <quec_rxflush>:
 *
 *
 */

void quec_rxflush(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
    rxget = rxput;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <quec_rxflush+0x18>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <quec_rxflush+0x1c>)
 800246a:	601a      	str	r2, [r3, #0]
    input_busy = 0;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <quec_rxflush+0x20>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
    return;
 8002472:	46c0      	nop			; (mov r8, r8)
}
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200008fc 	.word	0x200008fc
 800247c:	200008f8 	.word	0x200008f8
 8002480:	200008f5 	.word	0x200008f5

08002484 <quec_transmit>:
 *
 *
 */

uint8_t quec_transmit(uint8_t *obuf, uint16_t olen)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	000a      	movs	r2, r1
 800248e:	1cbb      	adds	r3, r7, #2
 8002490:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;

    usb_printf((uint8_t *)"QUEC OUT: ");
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <quec_transmit+0xa8>)
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fa9b 	bl	80029d0 <usb_printf>
    usb_write_fixed(obuf, olen);
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fd97 	bl	8002fd6 <usb_write_fixed>
    usb_printf((uint8_t *)"\r\n");
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <quec_transmit+0xac>)
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fa90 	bl	80029d0 <usb_printf>

    if (olen == 0)
 80024b0:	1cbb      	adds	r3, r7, #2
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <quec_transmit+0x3e>
    {
           retstat = QS_OK;
 80024b8:	230f      	movs	r3, #15
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e02d      	b.n	800251e <quec_transmit+0x9a>
    }

    else if (output_busy)
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <quec_transmit+0xb0>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <quec_transmit+0x50>
    {
           retstat = QS_TXBUSY;
 80024ca:	230f      	movs	r3, #15
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e024      	b.n	800251e <quec_transmit+0x9a>
    }

    else if (obuf == 0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <quec_transmit+0x5c>
    {
        crash();
 80024da:	f7fe f86b 	bl	80005b4 <crash>
 80024de:	e01e      	b.n	800251e <quec_transmit+0x9a>
    }

    else
    {
        output_busy = 1;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <quec_transmit+0xb0>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
        txbufaddr = obuf;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <quec_transmit+0xb4>)
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
        txbuflen = olen;
 80024ec:	1cbb      	adds	r3, r7, #2
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <quec_transmit+0xb8>)
 80024f2:	601a      	str	r2, [r3, #0]
        GSM_DMA_CHAN->CMAR = (uint32_t)obuf;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <quec_transmit+0xbc>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	60da      	str	r2, [r3, #12]
        GSM_DMA_CHAN->CNDTR = olen;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <quec_transmit+0xbc>)
 80024fc:	1cba      	adds	r2, r7, #2
 80024fe:	8812      	ldrh	r2, [r2, #0]
 8002500:	605a      	str	r2, [r3, #4]
        GSM_UART->CR3 |= USART_CR3_DMAT;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <quec_transmit+0xc0>)
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <quec_transmit+0xc0>)
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
        GSM_DMA_CHAN->CCR =  DMA_CCR_EN | DMA_CCR_TCIE | DMA_CCR_DIR | DMA_CCR_MINC | DMA_CCR_PSIZE_0;
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <quec_transmit+0xbc>)
 8002510:	2294      	movs	r2, #148	; 0x94
 8002512:	32ff      	adds	r2, #255	; 0xff
 8002514:	601a      	str	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 8002516:	230f      	movs	r3, #15
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	2206      	movs	r2, #6
 800251c:	701a      	strb	r2, [r3, #0]
    }

    return retstat;
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	0800d238 	.word	0x0800d238
 8002530:	0800d244 	.word	0x0800d244
 8002534:	200008f2 	.word	0x200008f2
 8002538:	20000920 	.word	0x20000920
 800253c:	20000908 	.word	0x20000908
 8002540:	40020044 	.word	0x40020044
 8002544:	40004400 	.word	0x40004400

08002548 <quec_dma_ih>:
 *
 *
 */

void quec_dma_ih(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
    GSM_UART->CR3 &= ~USART_CR3_DMAT;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <quec_dma_ih+0x2c>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <quec_dma_ih+0x2c>)
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	438a      	bics	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
    GSM_DMA_CHAN->CCR = 0;
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <quec_dma_ih+0x30>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    GSM_DMA->IFCR = DMA_IFCR_CTCIF4;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <quec_dma_ih+0x34>)
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0192      	lsls	r2, r2, #6
 8002564:	605a      	str	r2, [r3, #4]
    output_busy = 0;
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <quec_dma_ih+0x38>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
    return;
 800256c:	46c0      	nop			; (mov r8, r8)
}
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40004400 	.word	0x40004400
 8002578:	40020044 	.word	0x40020044
 800257c:	40020000 	.word	0x40020000
 8002580:	200008f2 	.word	0x200008f2

08002584 <quec_timer_ih>:
 *
 *
 */

void quec_timer_ih(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0

    if (timer1)
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <quec_timer_ih+0x30>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <quec_timer_ih+0x16>
    {
        timer1--;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <quec_timer_ih+0x30>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <quec_timer_ih+0x30>)
 8002598:	601a      	str	r2, [r3, #0]
    }

    if (timer2)
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <quec_timer_ih+0x34>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <quec_timer_ih+0x2a>
    {
        timer2--;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <quec_timer_ih+0x34>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <quec_timer_ih+0x34>)
 80025aa:	601a      	str	r2, [r3, #0]
    }

    return;
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46c0      	nop			; (mov r8, r8)
}
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000900 	.word	0x20000900
 80025b8:	20000904 	.word	0x20000904

080025bc <quec_uart_ih>:
 *
 *
 */

void quec_uart_ih(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
    uint16_t inchar;
    uint32_t intstat;

    intstat = GSM_UART->ISR;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <quec_uart_ih+0x60>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	607b      	str	r3, [r7, #4]

    if (intstat & USART_ISR_RXNE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	4013      	ands	r3, r2
 80025ce:	d01a      	beq.n	8002606 <quec_uart_ih+0x4a>
    {
        inchar = GSM_UART->RDR;
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <quec_uart_ih+0x60>)
 80025d2:	1cbb      	adds	r3, r7, #2
 80025d4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80025d6:	801a      	strh	r2, [r3, #0]

        if (inchar != 0x000A)
 80025d8:	1cbb      	adds	r3, r7, #2
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2b0a      	cmp	r3, #10
 80025de:	d019      	beq.n	8002614 <quec_uart_ih+0x58>
        {
            rxintbuf[rxput] = (uint8_t)inchar;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <quec_uart_ih+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1cba      	adds	r2, r7, #2
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	b2d1      	uxtb	r1, r2
 80025ea:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <quec_uart_ih+0x68>)
 80025ec:	54d1      	strb	r1, [r2, r3]
            rxput++;
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <quec_uart_ih+0x64>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <quec_uart_ih+0x64>)
 80025f6:	601a      	str	r2, [r3, #0]
            rxput &= RXINTBUFLEN - 1;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <quec_uart_ih+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	227f      	movs	r2, #127	; 0x7f
 80025fe:	401a      	ands	r2, r3
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <quec_uart_ih+0x64>)
 8002602:	601a      	str	r2, [r3, #0]
        }

        return;
 8002604:	e006      	b.n	8002614 <quec_uart_ih+0x58>
    }

    GSM_UART->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_TCIE | USART_CR1_PEIE | USART_CR1_CMIE | USART_CR1_RTOIE);
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <quec_uart_ih+0x60>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <quec_uart_ih+0x60>)
 800260c:	4906      	ldr	r1, [pc, #24]	; (8002628 <quec_uart_ih+0x6c>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
    return;
 8002612:	e000      	b.n	8002616 <quec_uart_ih+0x5a>
        return;
 8002614:	46c0      	nop			; (mov r8, r8)
}
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40004400 	.word	0x40004400
 8002620:	200008fc 	.word	0x200008fc
 8002624:	20000924 	.word	0x20000924
 8002628:	fbffbeaf 	.word	0xfbffbeaf

0800262c <set_timer>:
 *
 *
 */

static void set_timer(uint32_t newtime)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    timer1 = newtime;
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <set_timer+0x20>)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800263e:	b662      	cpsie	i
}
 8002640:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
    return;
 8002642:	46c0      	nop			; (mov r8, r8)
}
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000900 	.word	0x20000900

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_MspInit+0x54>)
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_MspInit+0x54>)
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	619a      	str	r2, [r3, #24]
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_MspInit+0x54>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_MspInit+0x54>)
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_MspInit+0x54>)
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	0549      	lsls	r1, r1, #21
 8002678:	430a      	orrs	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_MspInit+0x54>)
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	055b      	lsls	r3, r3, #21
 8002684:	4013      	ands	r3, r2
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2004      	movs	r0, #4
 8002690:	f001 f8c2 	bl	8003818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002694:	2004      	movs	r0, #4
 8002696:	f001 f8d4 	bl	8003842 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_RTC_MspInit+0x28>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d106      	bne.n	80026c8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RTC_MspInit+0x2c>)
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RTC_MspInit+0x2c>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0209      	lsls	r1, r1, #8
 80026c4:	430a      	orrs	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40002800 	.word	0x40002800
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b08b      	sub	sp, #44	; 0x2c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	2414      	movs	r4, #20
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	0018      	movs	r0, r3
 80026e6:	2314      	movs	r3, #20
 80026e8:	001a      	movs	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f009 ffb0 	bl	800c650 <memset>
  if(hspi->Instance==SPI1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_SPI_MspInit+0xa0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d13a      	bne.n	8002770 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026fa:	4b20      	ldr	r3, [pc, #128]	; (800277c <HAL_SPI_MspInit+0xa4>)
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_SPI_MspInit+0xa4>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0149      	lsls	r1, r1, #5
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_SPI_MspInit+0xa4>)
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_SPI_MspInit+0xa4>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_SPI_MspInit+0xa4>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0289      	lsls	r1, r1, #10
 8002720:	430a      	orrs	r2, r1
 8002722:	615a      	str	r2, [r3, #20]
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_SPI_MspInit+0xa4>)
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002732:	0021      	movs	r1, r4
 8002734:	187b      	adds	r3, r7, r1
 8002736:	22e0      	movs	r2, #224	; 0xe0
 8002738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2202      	movs	r2, #2
 800273e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002746:	187b      	adds	r3, r7, r1
 8002748:	2203      	movs	r2, #3
 800274a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800274c:	187b      	adds	r3, r7, r1
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	187a      	adds	r2, r7, r1
 8002754:	2390      	movs	r3, #144	; 0x90
 8002756:	05db      	lsls	r3, r3, #23
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f001 f90c 	bl	8003978 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2019      	movs	r0, #25
 8002766:	f001 f857 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800276a:	2019      	movs	r0, #25
 800276c:	f001 f869 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b00b      	add	sp, #44	; 0x2c
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	40013000 	.word	0x40013000
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b08d      	sub	sp, #52	; 0x34
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	241c      	movs	r4, #28
 800278a:	193b      	adds	r3, r7, r4
 800278c:	0018      	movs	r0, r3
 800278e:	2314      	movs	r3, #20
 8002790:	001a      	movs	r2, r3
 8002792:	2100      	movs	r1, #0
 8002794:	f009 ff5c 	bl	800c650 <memset>
  if(huart->Instance==USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_UART_MspInit+0x124>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d13c      	bne.n	800281c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	4b40      	ldr	r3, [pc, #256]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	01c9      	lsls	r1, r1, #7
 80027ac:	430a      	orrs	r2, r1
 80027ae:	619a      	str	r2, [r3, #24]
 80027b0:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	01db      	lsls	r3, r3, #7
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0289      	lsls	r1, r1, #10
 80027c8:	430a      	orrs	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_UART_MspInit+0x128>)
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	22c0      	movs	r2, #192	; 0xc0
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	0021      	movs	r1, r4
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2202      	movs	r2, #2
 80027e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	2203      	movs	r2, #3
 80027f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	2201      	movs	r2, #1
 80027fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	187a      	adds	r2, r7, r1
 80027fe:	2390      	movs	r3, #144	; 0x90
 8002800:	05db      	lsls	r3, r3, #23
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f001 f8b7 	bl	8003978 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	201b      	movs	r0, #27
 8002810:	f001 f802 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002814:	201b      	movs	r0, #27
 8002816:	f001 f814 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800281a:	e03f      	b.n	800289c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_UART_MspInit+0x12c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d13a      	bne.n	800289c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_UART_MspInit+0x128>)
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_UART_MspInit+0x128>)
 800282c:	2180      	movs	r1, #128	; 0x80
 800282e:	0289      	lsls	r1, r1, #10
 8002830:	430a      	orrs	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_UART_MspInit+0x128>)
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	029b      	lsls	r3, r3, #10
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_UART_MspInit+0x128>)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_UART_MspInit+0x128>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0289      	lsls	r1, r1, #10
 800284c:	430a      	orrs	r2, r1
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_UART_MspInit+0x128>)
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800285e:	211c      	movs	r1, #28
 8002860:	187b      	adds	r3, r7, r1
 8002862:	220c      	movs	r2, #12
 8002864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2202      	movs	r2, #2
 800286a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2203      	movs	r2, #3
 8002876:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2201      	movs	r2, #1
 800287c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	187a      	adds	r2, r7, r1
 8002880:	2390      	movs	r3, #144	; 0x90
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f001 f876 	bl	8003978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	201c      	movs	r0, #28
 8002892:	f000 ffc1 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002896:	201c      	movs	r0, #28
 8002898:	f000 ffd3 	bl	8003842 <HAL_NVIC_EnableIRQ>
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b00d      	add	sp, #52	; 0x34
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40004400 	.word	0x40004400

080028b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <HardFault_Handler+0x4>

080028c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d8:	f000 feb2 	bl	8003640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  led_timer_ih();
 80028dc:	f7ff f89a 	bl	8001a14 <led_timer_ih>
  quec_timer_ih();
 80028e0:	f7ff fe50 	bl	8002584 <quec_timer_ih>
  gsm_timer_ih();
 80028e4:	f7fe fc38 	bl	8001158 <gsm_timer_ih>

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <TIM6_IRQHandler+0x14>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f004 fcb0 	bl	8007264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000e34 	.word	0x20000e34

08002910 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <TIM7_IRQHandler+0x14>)
 8002916:	0018      	movs	r0, r3
 8002918:	f004 fca4 	bl	8007264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000fac 	.word	0x20000fac

08002928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <SPI1_IRQHandler+0x14>)
 800292e:	0018      	movs	r0, r3
 8002930:	f004 f9b4 	bl	8006c9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	20000e7c 	.word	0x20000e7c

08002940 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <USART1_IRQHandler+0x14>)
 8002946:	0018      	movs	r0, r3
 8002948:	f004 fe2e 	bl	80075a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000d90 	.word	0x20000d90

08002958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <_sbrk+0x5c>)
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_sbrk+0x60>)
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <_sbrk+0x64>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <_sbrk+0x68>)
 8002978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	18d3      	adds	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	429a      	cmp	r2, r3
 8002986:	d207      	bcs.n	8002998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002988:	f009 fe38 	bl	800c5fc <__errno>
 800298c:	0003      	movs	r3, r0
 800298e:	220c      	movs	r2, #12
 8002990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002992:	2301      	movs	r3, #1
 8002994:	425b      	negs	r3, r3
 8002996:	e009      	b.n	80029ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	18d2      	adds	r2, r2, r3
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <_sbrk+0x64>)
 80029a8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b006      	add	sp, #24
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20004000 	.word	0x20004000
 80029b8:	00000400 	.word	0x00000400
 80029bc:	200009a4 	.word	0x200009a4
 80029c0:	20001f98 	.word	0x20001f98

080029c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <usb_printf>:
 *
 * \return - none
 */

void usb_printf(uint8_t *fspec, ... )
{
 80029d0:	b40f      	push	{r0, r1, r2, r3}
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b088      	sub	sp, #32
 80029d6:	af00      	add	r7, sp, #0
    uint32_t i;

    uint8_t *u8ptrspec;
    va_list args;

    va_start(args, fspec);
 80029d8:	232c      	movs	r3, #44	; 0x2c
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	603b      	str	r3, [r7, #0]
    prbufdex = 0;
 80029de:	4bc9      	ldr	r3, [pc, #804]	; (8002d04 <usb_printf+0x334>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
    fspecdex = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
    state = PRS_INIT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    curchar = 0xFF;
 80029ec:	231f      	movs	r3, #31
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	22ff      	movs	r2, #255	; 0xff
 80029f2:	701a      	strb	r2, [r3, #0]

    if (debug_print_ready)
 80029f4:	4bc4      	ldr	r3, [pc, #784]	; (8002d08 <usb_printf+0x338>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <usb_printf+0x36>
    {
        run = 1;
 80029fc:	231e      	movs	r3, #30
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e212      	b.n	8002e2c <usb_printf+0x45c>
    }

    else
    {
        run = 0;
 8002a06:	231e      	movs	r3, #30
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
    }

    while (run)
 8002a0e:	e20d      	b.n	8002e2c <usb_printf+0x45c>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b0b      	cmp	r3, #11
 8002a14:	d900      	bls.n	8002a18 <usb_printf+0x48>
 8002a16:	e207      	b.n	8002e28 <usb_printf+0x458>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	4bbb      	ldr	r3, [pc, #748]	; (8002d0c <usb_printf+0x33c>)
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	469f      	mov	pc, r3
        switch (state)
        {

            case PRS_INIT:
            {
                curchar = fspec[fspecdex];
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	18d2      	adds	r2, r2, r3
 8002a2a:	211f      	movs	r1, #31
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <usb_printf+0x82>
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b7e      	cmp	r3, #126	; 0x7e
 8002a46:	d804      	bhi.n	8002a52 <usb_printf+0x82>
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d902      	bls.n	8002a58 <usb_printf+0x88>
                {
                	state = PRS_DONE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e00d      	b.n	8002a74 <usb_printf+0xa4>
                }

                else if (curchar == '%')
 8002a58:	231f      	movs	r3, #31
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b25      	cmp	r3, #37	; 0x25
 8002a60:	d102      	bne.n	8002a68 <usb_printf+0x98>
                {
                    state = PRS_PERCENT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e1e1      	b.n	8002e2c <usb_printf+0x45c>
                }

                else
                {
                    store_curchar(curchar);
 8002a68:	231f      	movs	r3, #31
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fc32 	bl	80032d8 <store_curchar>
                }

                break;
 8002a74:	e1da      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_DONE:
            {

                if (prbufdex > 0)
 8002a76:	4ba3      	ldr	r3, [pc, #652]	; (8002d04 <usb_printf+0x334>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <usb_printf+0xbc>
                {
                    usb_write_fixed(prbuf, prbufdex);
 8002a7e:	4ba1      	ldr	r3, [pc, #644]	; (8002d04 <usb_printf+0x334>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4ba3      	ldr	r3, [pc, #652]	; (8002d10 <usb_printf+0x340>)
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 faa5 	bl	8002fd6 <usb_write_fixed>
                }

                run = 0;
 8002a8c:	231e      	movs	r3, #30
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
                break;
 8002a94:	e1ca      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_PERCENT:
            {
                curchar = fspec[fspecdex];
 8002a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	18d2      	adds	r2, r2, r3
 8002a9c:	211f      	movs	r1, #31
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
                zflag = 0x00;
 8002aaa:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <usb_printf+0x344>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
                width = 0;
 8002ab0:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <usb_printf+0x348>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
                pfield = 255;
 8002ab6:	4b99      	ldr	r3, [pc, #612]	; (8002d1c <usb_printf+0x34c>)
 8002ab8:	22ff      	movs	r2, #255	; 0xff
 8002aba:	701a      	strb	r2, [r3, #0]
                negflag = 0;
 8002abc:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <usb_printf+0x350>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <usb_printf+0x10c>
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b7e      	cmp	r3, #126	; 0x7e
 8002ad0:	d804      	bhi.n	8002adc <usb_printf+0x10c>
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d902      	bls.n	8002ae2 <usb_printf+0x112>
                {
                	state = PRS_DONE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e043      	b.n	8002b6a <usb_printf+0x19a>
                }

                else if (curchar == '%')
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b25      	cmp	r3, #37	; 0x25
 8002aea:	d105      	bne.n	8002af8 <usb_printf+0x128>
                {
                    store_curchar('%');
 8002aec:	2025      	movs	r0, #37	; 0x25
 8002aee:	f000 fbf3 	bl	80032d8 <store_curchar>
                    state = PRS_INIT;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	e199      	b.n	8002e2c <usb_printf+0x45c>
                }

                else if ((curchar == '0') || (curchar == '+') || (curchar == '-') || (curchar == 0x20) || (curchar == '#'))
 8002af8:	221f      	movs	r2, #31
 8002afa:	18bb      	adds	r3, r7, r2
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b30      	cmp	r3, #48	; 0x30
 8002b00:	d00f      	beq.n	8002b22 <usb_printf+0x152>
 8002b02:	18bb      	adds	r3, r7, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b2b      	cmp	r3, #43	; 0x2b
 8002b08:	d00b      	beq.n	8002b22 <usb_printf+0x152>
 8002b0a:	18bb      	adds	r3, r7, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b2d      	cmp	r3, #45	; 0x2d
 8002b10:	d007      	beq.n	8002b22 <usb_printf+0x152>
 8002b12:	18bb      	adds	r3, r7, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d003      	beq.n	8002b22 <usb_printf+0x152>
 8002b1a:	18bb      	adds	r3, r7, r2
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b23      	cmp	r3, #35	; 0x23
 8002b20:	d107      	bne.n	8002b32 <usb_printf+0x162>
                {
                    zflag = curchar;
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <usb_printf+0x344>)
 8002b24:	221f      	movs	r2, #31
 8002b26:	18ba      	adds	r2, r7, r2
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	701a      	strb	r2, [r3, #0]
                    state = PRS_WIDTH;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e01b      	b.n	8002b6a <usb_printf+0x19a>
                }

                else if ((curchar >= '1') && (curchar <= '9'))
 8002b32:	221f      	movs	r2, #31
 8002b34:	18bb      	adds	r3, r7, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d90c      	bls.n	8002b56 <usb_printf+0x186>
 8002b3c:	18bb      	adds	r3, r7, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b39      	cmp	r3, #57	; 0x39
 8002b42:	d808      	bhi.n	8002b56 <usb_printf+0x186>
                {
                    width = curchar - 0x30;
 8002b44:	18bb      	adds	r3, r7, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3b30      	subs	r3, #48	; 0x30
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <usb_printf+0x348>)
 8002b4e:	701a      	strb	r2, [r3, #0]
                    state = PRS_WIDTH;
 8002b50:	2304      	movs	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e009      	b.n	8002b6a <usb_printf+0x19a>
                }

                else if (curchar == '.')
 8002b56:	231f      	movs	r3, #31
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8002b5e:	d102      	bne.n	8002b66 <usb_printf+0x196>
                {
                	state = PRS_PFIELD;
 8002b60:	2305      	movs	r3, #5
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e162      	b.n	8002e2c <usb_printf+0x45c>
                }

                else
                {
                    state = PRS_TYPE;
 8002b66:	230b      	movs	r3, #11
 8002b68:	617b      	str	r3, [r7, #20]
                }

                break;
 8002b6a:	e15f      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_WIDTH:
            {
                curchar = fspec[fspecdex];
 8002b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	211f      	movs	r1, #31
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61bb      	str	r3, [r7, #24]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002b80:	187b      	adds	r3, r7, r1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <usb_printf+0x1ca>
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b7e      	cmp	r3, #126	; 0x7e
 8002b8e:	d804      	bhi.n	8002b9a <usb_printf+0x1ca>
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d902      	bls.n	8002ba0 <usb_printf+0x1d0>
                {
                	state = PRS_DONE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e029      	b.n	8002bf4 <usb_printf+0x224>
                }

  				else if ((curchar >= '0') && (curchar <= '9'))
 8002ba0:	211f      	movs	r1, #31
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ba8:	d917      	bls.n	8002bda <usb_printf+0x20a>
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b39      	cmp	r3, #57	; 0x39
 8002bb0:	d813      	bhi.n	8002bda <usb_printf+0x20a>
  				{
  				    width *= 10;
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <usb_printf+0x348>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	1c1a      	adds	r2, r3, #0
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	18db      	adds	r3, r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <usb_printf+0x348>)
 8002bc2:	701a      	strb	r2, [r3, #0]
  				    width = width + (curchar - 0x30);
 8002bc4:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <usb_printf+0x348>)
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	18d3      	adds	r3, r2, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3b30      	subs	r3, #48	; 0x30
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <usb_printf+0x348>)
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e00c      	b.n	8002bf4 <usb_printf+0x224>
  				}

  				else if (curchar == '.')
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b2e      	cmp	r3, #46	; 0x2e
 8002be2:	d105      	bne.n	8002bf0 <usb_printf+0x220>
  				{
  				    pfield = 0;
 8002be4:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <usb_printf+0x34c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
  				    state = PRS_PFIELD;
 8002bea:	2305      	movs	r3, #5
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e11d      	b.n	8002e2c <usb_printf+0x45c>
  				}

  				else
  				{
  				    state = PRS_TYPE;
 8002bf0:	230b      	movs	r3, #11
 8002bf2:	617b      	str	r3, [r7, #20]
  				}

  				break;
 8002bf4:	e11a      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_PFIELD:
            {
                curchar = fspec[fspecdex];
 8002bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	18d2      	adds	r2, r2, r3
 8002bfc:	211f      	movs	r1, #31
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	3301      	adds	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <usb_printf+0x254>
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b7e      	cmp	r3, #126	; 0x7e
 8002c18:	d804      	bhi.n	8002c24 <usb_printf+0x254>
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d902      	bls.n	8002c2a <usb_printf+0x25a>
                {
                	state = PRS_DONE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e02b      	b.n	8002c82 <usb_printf+0x2b2>
                }

                else if ((curchar >= '0') && (curchar <= '9'))
 8002c2a:	211f      	movs	r1, #31
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b2f      	cmp	r3, #47	; 0x2f
 8002c32:	d91e      	bls.n	8002c72 <usb_printf+0x2a2>
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b39      	cmp	r3, #57	; 0x39
 8002c3a:	d81a      	bhi.n	8002c72 <usb_printf+0x2a2>
                {
  				    pfield *= 10;
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <usb_printf+0x34c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	1c1a      	adds	r2, r3, #0
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	18db      	adds	r3, r3, r3
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <usb_printf+0x34c>)
 8002c4c:	701a      	strb	r2, [r3, #0]
  				    pfield = pfield + (curchar - 0x30);
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <usb_printf+0x34c>)
 8002c50:	781a      	ldrb	r2, [r3, #0]
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3b30      	subs	r3, #48	; 0x30
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <usb_printf+0x34c>)
 8002c60:	701a      	strb	r2, [r3, #0]
  				    pfield &= 0x7F;
 8002c62:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <usb_printf+0x34c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	227f      	movs	r2, #127	; 0x7f
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <usb_printf+0x34c>)
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e007      	b.n	8002c82 <usb_printf+0x2b2>
                }

                else
                {
                    store_curchar(curchar);
 8002c72:	231f      	movs	r3, #31
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fb2d 	bl	80032d8 <store_curchar>
                    state = PRS_DONE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
                }

                break;
 8002c82:	e0d3      	b.n	8002e2c <usb_printf+0x45c>


            case PRS_TYPE:
            {

  				if (curchar == 'c')
 8002c84:	231f      	movs	r3, #31
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b63      	cmp	r3, #99	; 0x63
 8002c8c:	d102      	bne.n	8002c94 <usb_printf+0x2c4>
  				{
                    state = PRS_CSPEC;
 8002c8e:	2306      	movs	r3, #6
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e0cb      	b.n	8002e2c <usb_printf+0x45c>
                }

				else if (curchar == 'd')
 8002c94:	231f      	movs	r3, #31
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d102      	bne.n	8002ca4 <usb_printf+0x2d4>
				{
				    state = PRS_DSPEC;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e0c3      	b.n	8002e2c <usb_printf+0x45c>
				}

				else if (curchar == 'u')
 8002ca4:	231f      	movs	r3, #31
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b75      	cmp	r3, #117	; 0x75
 8002cac:	d102      	bne.n	8002cb4 <usb_printf+0x2e4>
				{
				    state = PRS_USPEC;
 8002cae:	2309      	movs	r3, #9
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e0bb      	b.n	8002e2c <usb_printf+0x45c>
				}

				else if (curchar == 's')
 8002cb4:	231f      	movs	r3, #31
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b73      	cmp	r3, #115	; 0x73
 8002cbc:	d102      	bne.n	8002cc4 <usb_printf+0x2f4>
				{
				    state = PRS_SSPEC;
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e0b3      	b.n	8002e2c <usb_printf+0x45c>
				}

				else if (curchar == 'X')
 8002cc4:	231f      	movs	r3, #31
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b58      	cmp	r3, #88	; 0x58
 8002ccc:	d102      	bne.n	8002cd4 <usb_printf+0x304>
				{
				    state = PRS_XSPEC;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e0ab      	b.n	8002e2c <usb_printf+0x45c>
				}

				else
				{
				    store_curchar(curchar);
 8002cd4:	231f      	movs	r3, #31
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fafc 	bl	80032d8 <store_curchar>
				    state = PRS_INIT;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
				}

				break;
 8002ce4:	e0a2      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_CSPEC:
            {
                u8spec = (uint8_t)(va_arg(args, uint32_t));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	1d1a      	adds	r2, r3, #4
 8002cea:	603a      	str	r2, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	1dbb      	adds	r3, r7, #6
 8002cf0:	701a      	strb	r2, [r3, #0]
                store_curchar(u8spec);
 8002cf2:	1dbb      	adds	r3, r7, #6
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 faee 	bl	80032d8 <store_curchar>
                state = PRS_INIT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
                break;
 8002d00:	e094      	b.n	8002e2c <usb_printf+0x45c>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	200009ac 	.word	0x200009ac
 8002d08:	200012bc 	.word	0x200012bc
 8002d0c:	0800d720 	.word	0x0800d720
 8002d10:	200009b0 	.word	0x200009b0
 8002d14:	200009a8 	.word	0x200009a8
 8002d18:	200009ab 	.word	0x200009ab
 8002d1c:	200009a9 	.word	0x200009a9
 8002d20:	200009aa 	.word	0x200009aa
            }

            case PRS_DSPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	603a      	str	r2, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	613b      	str	r3, [r7, #16]

                if (u32spec & 0x80000000)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da05      	bge.n	8002d40 <usb_printf+0x370>
                {
                    u32spec = -u32spec;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	425b      	negs	r3, r3
 8002d38:	613b      	str	r3, [r7, #16]
                    negflag = 1;
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <usb_printf+0x478>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
                }

                format_du(u32spec);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f974 	bl	8003030 <format_du>
                state = PRS_INIT;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
                break;
 8002d4c:	e06e      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_USPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	1d1a      	adds	r2, r3, #4
 8002d52:	603a      	str	r2, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
                format_du(u32spec);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f968 	bl	8003030 <format_du>
                state = PRS_INIT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
                break;
 8002d64:	e062      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_SSPEC:
            {
                u8ptrspec = (uint8_t *)(va_arg(args, uint32_t));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	1d1a      	adds	r2, r3, #4
 8002d6a:	603a      	str	r2, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60bb      	str	r3, [r7, #8]
                i = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]

                while (1)
                {

                    if ((u8ptrspec[i] == 0x00) || ((width > 0) && (i >= width)))
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	18d3      	adds	r3, r2, r3
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d044      	beq.n	8002e0a <usb_printf+0x43a>
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <usb_printf+0x47c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <usb_printf+0x3c4>
 8002d88:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <usb_printf+0x47c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d23a      	bcs.n	8002e0a <usb_printf+0x43a>
                    {
                        break;
                    }

                    if ((u8ptrspec[i] >= 0x20) && (u8ptrspec[i] < 0x7F))
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b1f      	cmp	r3, #31
 8002d9e:	d90d      	bls.n	8002dbc <usb_printf+0x3ec>
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	18d3      	adds	r3, r2, r3
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b7e      	cmp	r3, #126	; 0x7e
 8002daa:	d807      	bhi.n	8002dbc <usb_printf+0x3ec>
                    {
                        store_curchar(u8ptrspec[i]);
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	18d3      	adds	r3, r2, r3
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 fa8f 	bl	80032d8 <store_curchar>
 8002dba:	e022      	b.n	8002e02 <usb_printf+0x432>
                    }

                    else
                    {
                        store_curchar('<');
 8002dbc:	203c      	movs	r0, #60	; 0x3c
 8002dbe:	f000 fa8b 	bl	80032d8 <store_curchar>
                        nibble = u8ptrspec[i] >> 4;
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	18d3      	adds	r3, r2, r3
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	0912      	lsrs	r2, r2, #4
 8002dce:	701a      	strb	r2, [r3, #0]
                        store_curchar(bin2hex[nibble]);
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <usb_printf+0x480>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fa7d 	bl	80032d8 <store_curchar>
                        nibble = u8ptrspec[i] & 0x0F;
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	210f      	movs	r1, #15
 8002dea:	400a      	ands	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]
                        store_curchar(bin2hex[nibble]);
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <usb_printf+0x480>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fa6e 	bl	80032d8 <store_curchar>
                        store_curchar('>');
 8002dfc:	203e      	movs	r0, #62	; 0x3e
 8002dfe:	f000 fa6b 	bl	80032d8 <store_curchar>
                    }

                    i++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
                    if ((u8ptrspec[i] == 0x00) || ((width > 0) && (i >= width)))
 8002e08:	e7b4      	b.n	8002d74 <usb_printf+0x3a4>
                }

                state = PRS_INIT;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
                break;
 8002e0e:	e00d      	b.n	8002e2c <usb_printf+0x45c>
            }

            case PRS_XSPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	1d1a      	adds	r2, r3, #4
 8002e14:	603a      	str	r2, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
                format_x(u32spec);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f9bf 	bl	80031a0 <format_x>
                state = PRS_INIT;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
                break;
 8002e26:	e001      	b.n	8002e2c <usb_printf+0x45c>
            }

            default:
            {
                crash();
 8002e28:	f7fd fbc4 	bl	80005b4 <crash>
    while (run)
 8002e2c:	231e      	movs	r3, #30
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d000      	beq.n	8002e38 <usb_printf+0x468>
 8002e36:	e5eb      	b.n	8002a10 <usb_printf+0x40>
        }

    }

    va_end(args);
    return;
 8002e38:	46c0      	nop			; (mov r8, r8)
}
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b008      	add	sp, #32
 8002e3e:	bc80      	pop	{r7}
 8002e40:	bc08      	pop	{r3}
 8002e42:	b004      	add	sp, #16
 8002e44:	4718      	bx	r3
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	200009aa 	.word	0x200009aa
 8002e4c:	200009ab 	.word	0x200009ab
 8002e50:	0800d70c 	.word	0x0800d70c

08002e54 <usb_print_ih>:
 *
 * \return - none
 */

void usb_print_ih(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
    uint16_t intstat;

    intstat = USB->ISTR;
 8002e5a:	494b      	ldr	r1, [pc, #300]	; (8002f88 <usb_print_ih+0x134>)
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	2244      	movs	r2, #68	; 0x44
 8002e60:	5a8a      	ldrh	r2, [r1, r2]
 8002e62:	801a      	strh	r2, [r3, #0]

    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */

    if (intstat & USB_ISTR_CTR)
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	2200      	movs	r2, #0
 8002e68:	5e9b      	ldrsh	r3, [r3, r2]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da03      	bge.n	8002e76 <usb_print_ih+0x22>
    {
        PCD_EP_ISR_Handler(&hpcd_USB_FS);
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <usb_print_ih+0x138>)
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 fa99 	bl	80043a8 <PCD_EP_ISR_Handler>
    }

    if (intstat & USB_ISTR_RESET)
 8002e76:	1dbb      	adds	r3, r7, #6
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d008      	beq.n	8002e94 <usb_print_ih+0x40>
    {
        HAL_PCD_ResetCallback(&hpcd_USB_FS);
 8002e82:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <usb_print_ih+0x138>)
 8002e84:	0018      	movs	r0, r3
 8002e86:	f009 f8e0 	bl	800c04a <HAL_PCD_ResetCallback>
        HAL_PCD_SetAddress(&hpcd_USB_FS, 0U);
 8002e8a:	4b40      	ldr	r3, [pc, #256]	; (8002f8c <usb_print_ih+0x138>)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f001 f835 	bl	8003efe <HAL_PCD_SetAddress>
    }

    if (intstat & USB_ISTR_ERR)
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	019b      	lsls	r3, r3, #6
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d00c      	beq.n	8002eba <usb_print_ih+0x66>
    {
        debug_print_ready = 0;
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <usb_print_ih+0x13c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
        USB->CNTR &= 0x007F;
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <usb_print_ih+0x134>)
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	5ad3      	ldrh	r3, [r2, r3]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <usb_print_ih+0x134>)
 8002eb0:	217f      	movs	r1, #127	; 0x7f
 8002eb2:	400b      	ands	r3, r1
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	2340      	movs	r3, #64	; 0x40
 8002eb8:	52d1      	strh	r1, [r2, r3]
    }

    if (intstat & USB_ISTR_WKUP)
 8002eba:	1dbb      	adds	r3, r7, #6
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	015b      	lsls	r3, r3, #5
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d027      	beq.n	8002f16 <usb_print_ih+0xc2>
    {
        USB->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ec6:	4a30      	ldr	r2, [pc, #192]	; (8002f88 <usb_print_ih+0x134>)
 8002ec8:	2340      	movs	r3, #64	; 0x40
 8002eca:	5ad3      	ldrh	r3, [r2, r3]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <usb_print_ih+0x134>)
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	438b      	bics	r3, r1
 8002ed4:	b299      	uxth	r1, r3
 8002ed6:	2340      	movs	r3, #64	; 0x40
 8002ed8:	52d1      	strh	r1, [r2, r3]
        USB->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002eda:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <usb_print_ih+0x134>)
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	5ad3      	ldrh	r3, [r2, r3]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <usb_print_ih+0x134>)
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	438b      	bics	r3, r1
 8002ee8:	b299      	uxth	r1, r3
 8002eea:	2340      	movs	r3, #64	; 0x40
 8002eec:	52d1      	strh	r1, [r2, r3]

        if (hpcd_USB_FS.LPM_State == LPM_L1)
 8002eee:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <usb_print_ih+0x138>)
 8002ef0:	23b8      	movs	r3, #184	; 0xb8
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10d      	bne.n	8002f16 <usb_print_ih+0xc2>
        {
            hpcd_USB_FS.LPM_State = LPM_L0;
 8002efa:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <usb_print_ih+0x138>)
 8002efc:	23b8      	movs	r3, #184	; 0xb8
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	2100      	movs	r1, #0
 8002f02:	54d1      	strb	r1, [r2, r3]

            HAL_PCDEx_LPM_Callback(&hpcd_USB_FS, PCD_LPM_L0_ACTIVE);
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <usb_print_ih+0x138>)
 8002f06:	2100      	movs	r1, #0
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f002 f9cf 	bl	80052ac <HAL_PCDEx_LPM_Callback>
            HAL_PCD_ResumeCallback(&hpcd_USB_FS);
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <usb_print_ih+0x138>)
 8002f10:	0018      	movs	r0, r3
 8002f12:	f009 f8db 	bl	800c0cc <HAL_PCD_ResumeCallback>
        }

    }

    if (intstat & USB_ISTR_SUSP)
 8002f16:	1dbb      	adds	r3, r7, #6
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d017      	beq.n	8002f52 <usb_print_ih+0xfe>
    {
        USB->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <usb_print_ih+0x134>)
 8002f24:	2340      	movs	r3, #64	; 0x40
 8002f26:	5ad3      	ldrh	r3, [r2, r3]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <usb_print_ih+0x134>)
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	b299      	uxth	r1, r3
 8002f32:	2340      	movs	r3, #64	; 0x40
 8002f34:	52d1      	strh	r1, [r2, r3]
        USB->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <usb_print_ih+0x134>)
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	5ad3      	ldrh	r3, [r2, r3]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <usb_print_ih+0x134>)
 8002f40:	2104      	movs	r1, #4
 8002f42:	430b      	orrs	r3, r1
 8002f44:	b299      	uxth	r1, r3
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	52d1      	strh	r1, [r2, r3]
        HAL_PCD_SuspendCallback(&hpcd_USB_FS);
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <usb_print_ih+0x138>)
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f009 f8a1 	bl	800c094 <HAL_PCD_SuspendCallback>
    }

  /* Handle LPM Interrupt */
    if (intstat & USB_ISTR_L1REQ)
 8002f52:	1dbb      	adds	r3, r7, #6
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <usb_print_ih+0x110>
            HAL_PCDEx_LPM_Callback(&hpcd_USB_FS, PCD_LPM_L1_ACTIVE);
        }

        else
        {
            HAL_PCD_SuspendCallback(&hpcd_USB_FS);
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <usb_print_ih+0x138>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f009 f898 	bl	800c094 <HAL_PCD_SuspendCallback>
        }

    }

    if (intstat & USB_ISTR_SOF)
 8002f64:	1dbb      	adds	r3, r7, #6
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <usb_print_ih+0x124>
    {
        HAL_PCD_SOFCallback(&hpcd_USB_FS);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <usb_print_ih+0x138>)
 8002f72:	0018      	movs	r0, r3
 8002f74:	f009 f85a 	bl	800c02c <HAL_PCD_SOFCallback>
    }

    USB->ISTR = ~0x7F80;
 8002f78:	4a03      	ldr	r2, [pc, #12]	; (8002f88 <usb_print_ih+0x134>)
 8002f7a:	2344      	movs	r3, #68	; 0x44
 8002f7c:	4905      	ldr	r1, [pc, #20]	; (8002f94 <usb_print_ih+0x140>)
 8002f7e:	52d1      	strh	r1, [r2, r3]
    return;
 8002f80:	46c0      	nop			; (mov r8, r8)
}
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40005c00 	.word	0x40005c00
 8002f8c:	20001c94 	.word	0x20001c94
 8002f90:	200012bc 	.word	0x200012bc
 8002f94:	ffff807f 	.word	0xffff807f

08002f98 <usb_write>:
 *
 * \return - none
 */

void usb_write(uint8_t *obuf)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
#if USB_ENABLED != 0
    uint32_t i;

    for (i = 0; i < USB_MAX_BUF_LEN; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e008      	b.n	8002fb8 <usb_write+0x20>
    {

    	if (obuf[i] == 0x00)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	18d3      	adds	r3, r2, r3
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <usb_write+0x28>
    for (i = 0; i < USB_MAX_BUF_LEN; i++)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b3f      	cmp	r3, #63	; 0x3f
 8002fbc:	d9f3      	bls.n	8002fa6 <usb_write+0xe>
 8002fbe:	e000      	b.n	8002fc2 <usb_write+0x2a>
        {
            break;
 8002fc0:	46c0      	nop			; (mov r8, r8)
        }

    }

    usb_write_fixed(obuf, i);
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f804 	bl	8002fd6 <usb_write_fixed>
#endif

    return;
 8002fce:	46c0      	nop			; (mov r8, r8)
}
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b004      	add	sp, #16
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <usb_write_fixed>:
 *
 * \return - none
 */

void usb_write_fixed(uint8_t *obuf, uint32_t len)
{
 8002fd6:	b5b0      	push	{r4, r5, r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
    uint32_t wrtlen;
    uint32_t i;
#endif

#if USB_ENABLED != 0
    wrtlen = len;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	617b      	str	r3, [r7, #20]

    if (wrtlen > USB_MAX_BUF_LEN)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d901      	bls.n	8002fee <usb_write_fixed+0x18>
    {
        wrtlen = USB_MAX_BUF_LEN;
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	617b      	str	r3, [r7, #20]
    }

    for (i = 0; i < 10; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e014      	b.n	800301e <usb_write_fixed+0x48>
    {
        stat = CDC_Transmit_FS(obuf, wrtlen);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	250f      	movs	r5, #15
 8002ffa:	197c      	adds	r4, r7, r5
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f008 fe39 	bl	800bc78 <CDC_Transmit_FS>
 8003006:	0003      	movs	r3, r0
 8003008:	7023      	strb	r3, [r4, #0]

        if (stat != USBD_BUSY)
 800300a:	197b      	adds	r3, r7, r5
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d109      	bne.n	8003026 <usb_write_fixed+0x50>
        {
        	break;
        }

        HAL_Delay(20);
 8003012:	2014      	movs	r0, #20
 8003014:	f000 fb30 	bl	8003678 <HAL_Delay>
    for (i = 0; i < 10; i++)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3301      	adds	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d9e7      	bls.n	8002ff4 <usb_write_fixed+0x1e>
    }

#endif

    return;
 8003024:	e000      	b.n	8003028 <usb_write_fixed+0x52>
        	break;
 8003026:	46c0      	nop			; (mov r8, r8)
    return;
 8003028:	46c0      	nop			; (mov r8, r8)
}
 800302a:	46bd      	mov	sp, r7
 800302c:	b006      	add	sp, #24
 800302e:	bdb0      	pop	{r4, r5, r7, pc}

08003030 <format_du>:
 * \return - none
 */


static void format_du(uint32_t binval)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
    uint32_t remain;
    uint32_t outdex;
    uint32_t signcount;
    uint8_t ascdec[10];

    signcount = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    outdex = 10;
 800303c:	230a      	movs	r3, #10
 800303e:	61fb      	str	r3, [r7, #28]
    remain = binval;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	623b      	str	r3, [r7, #32]

    if (remain == 0)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d121      	bne.n	800308e <format_du+0x5e>
    {
        numdigits = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
        ascdec[9] = '0';
 800304e:	230c      	movs	r3, #12
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2230      	movs	r2, #48	; 0x30
 8003054:	725a      	strb	r2, [r3, #9]
        outdex = 9;
 8003056:	2309      	movs	r3, #9
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e01f      	b.n	800309c <format_du+0x6c>
    else
    {

        while (remain != 0)
        {
            outdex--;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
            ascdec[outdex] = (remain % 10) + '0';
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	210a      	movs	r1, #10
 8003066:	0018      	movs	r0, r3
 8003068:	f7fd f8e6 	bl	8000238 <__aeabi_uidivmod>
 800306c:	000b      	movs	r3, r1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3330      	adds	r3, #48	; 0x30
 8003072:	b2d9      	uxtb	r1, r3
 8003074:	230c      	movs	r3, #12
 8003076:	18fa      	adds	r2, r7, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	1c0a      	adds	r2, r1, #0
 800307e:	701a      	strb	r2, [r3, #0]
            remain = remain / 10;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	210a      	movs	r1, #10
 8003084:	0018      	movs	r0, r3
 8003086:	f7fd f851 	bl	800012c <__udivsi3>
 800308a:	0003      	movs	r3, r0
 800308c:	623b      	str	r3, [r7, #32]
        while (remain != 0)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e3      	bne.n	800305c <format_du+0x2c>
        }

        numdigits = 10 - outdex;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	220a      	movs	r2, #10
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (negflag)
 800309c:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <format_du+0x164>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <format_du+0x82>
    {
        signcount = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	61bb      	str	r3, [r7, #24]
        signchar = '-';
 80030a8:	232f      	movs	r3, #47	; 0x2f
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	222d      	movs	r2, #45	; 0x2d
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e009      	b.n	80030c6 <format_du+0x96>
    }

    else if (zflag == '+')
 80030b2:	4b39      	ldr	r3, [pc, #228]	; (8003198 <format_du+0x168>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b2b      	cmp	r3, #43	; 0x2b
 80030b8:	d105      	bne.n	80030c6 <format_du+0x96>
    {
        signcount = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
        signchar = '+';
 80030be:	232f      	movs	r3, #47	; 0x2f
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	222b      	movs	r2, #43	; 0x2b
 80030c4:	701a      	strb	r2, [r3, #0]
    }

    if ((zflag == '0') && (width > (numdigits + signcount)))
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <format_du+0x168>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	d123      	bne.n	8003116 <format_du+0xe6>
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <format_du+0x16c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	0019      	movs	r1, r3
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	4299      	cmp	r1, r3
 80030dc:	d91b      	bls.n	8003116 <format_du+0xe6>
    {

        if (signcount)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <format_du+0xc0>
        {
            store_curchar(signchar);
 80030e4:	232f      	movs	r3, #47	; 0x2f
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f8f4 	bl	80032d8 <store_curchar>
        }

        for (i = 0; i < (width - (numdigits + signcount)); i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f4:	e005      	b.n	8003102 <format_du+0xd2>
        {
            store_curchar('0');
 80030f6:	2030      	movs	r0, #48	; 0x30
 80030f8:	f000 f8ee 	bl	80032d8 <store_curchar>
        for (i = 0; i < (width - (numdigits + signcount)); i++)
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	3301      	adds	r3, #1
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <format_du+0x16c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0019      	movs	r1, r3
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	1acb      	subs	r3, r1, r3
 8003110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003112:	429a      	cmp	r2, r3
 8003114:	d3ef      	bcc.n	80030f6 <format_du+0xc6>
        }

    }

    if ((zflag != '0') && (width > (numdigits + signcount)))
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <format_du+0x168>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d023      	beq.n	8003166 <format_du+0x136>
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <format_du+0x16c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	0019      	movs	r1, r3
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	18d3      	adds	r3, r2, r3
 800312a:	4299      	cmp	r1, r3
 800312c:	d91b      	bls.n	8003166 <format_du+0x136>
    {

        for (i = 0; i < (width - (numdigits + signcount)); i++)
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	e005      	b.n	8003140 <format_du+0x110>
        {
            store_curchar(' ');
 8003134:	2020      	movs	r0, #32
 8003136:	f000 f8cf 	bl	80032d8 <store_curchar>
        for (i = 0; i < (width - (numdigits + signcount)); i++)
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	3301      	adds	r3, #1
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003140:	4b16      	ldr	r3, [pc, #88]	; (800319c <format_du+0x16c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	0019      	movs	r1, r3
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	1acb      	subs	r3, r1, r3
 800314e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003150:	429a      	cmp	r2, r3
 8003152:	d3ef      	bcc.n	8003134 <format_du+0x104>
        }

        if (signcount)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <format_du+0x136>
        {
            store_curchar(signchar);
 800315a:	232f      	movs	r3, #47	; 0x2f
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 f8b9 	bl	80032d8 <store_curchar>
        }

    }

    for (i = 0; i < numdigits; i++)
 8003166:	2300      	movs	r3, #0
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
 800316a:	e00b      	b.n	8003184 <format_du+0x154>
    {
        store_curchar(ascdec[outdex + i]);
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	18d3      	adds	r3, r2, r3
 8003172:	220c      	movs	r2, #12
 8003174:	18ba      	adds	r2, r7, r2
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f8ad 	bl	80032d8 <store_curchar>
    for (i = 0; i < numdigits; i++)
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	3301      	adds	r3, #1
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
 8003184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	429a      	cmp	r2, r3
 800318a:	d3ef      	bcc.n	800316c <format_du+0x13c>
    }

    return;
 800318c:	46c0      	nop			; (mov r8, r8)
}
 800318e:	46bd      	mov	sp, r7
 8003190:	b00c      	add	sp, #48	; 0x30
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200009aa 	.word	0x200009aa
 8003198:	200009a8 	.word	0x200009a8
 800319c:	200009ab 	.word	0x200009ab

080031a0 <format_x>:
 * \return - none
 */


static void format_x(uint32_t binval)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    uint32_t numdigits;
    uint32_t remain;
    uint32_t outdex;
    uint8_t aschex[8];

    outdex = 8;
 80031a8:	2308      	movs	r3, #8
 80031aa:	613b      	str	r3, [r7, #16]
    remain = binval;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	617b      	str	r3, [r7, #20]

    if (remain == 0)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d137      	bne.n	8003226 <format_x+0x86>
    {
        numdigits = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
        aschex[7] = '0';
 80031ba:	2308      	movs	r3, #8
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2230      	movs	r2, #48	; 0x30
 80031c0:	71da      	strb	r2, [r3, #7]
        outdex = 7;
 80031c2:	2307      	movs	r3, #7
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	e035      	b.n	8003234 <format_x+0x94>
    else
    {

        while (remain != 0)
        {
            outdex--;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
            aschex[outdex] = (remain & 0x0F);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	220f      	movs	r2, #15
 80031d4:	4013      	ands	r3, r2
 80031d6:	b2d9      	uxtb	r1, r3
 80031d8:	2008      	movs	r0, #8
 80031da:	183a      	adds	r2, r7, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	18d3      	adds	r3, r2, r3
 80031e0:	1c0a      	adds	r2, r1, #0
 80031e2:	701a      	strb	r2, [r3, #0]
            remain = remain >> 4;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	617b      	str	r3, [r7, #20]

            if (aschex[outdex] < 10)
 80031ea:	183a      	adds	r2, r7, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	d80b      	bhi.n	800320e <format_x+0x6e>
            {
                aschex[outdex] += '0';
 80031f6:	183a      	adds	r2, r7, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	3330      	adds	r3, #48	; 0x30
 8003200:	b2d9      	uxtb	r1, r3
 8003202:	183a      	adds	r2, r7, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	18d3      	adds	r3, r2, r3
 8003208:	1c0a      	adds	r2, r1, #0
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e00b      	b.n	8003226 <format_x+0x86>
            }
            else
            {
                aschex[outdex] += ('A' - 10);
 800320e:	2008      	movs	r0, #8
 8003210:	183a      	adds	r2, r7, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3337      	adds	r3, #55	; 0x37
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	183a      	adds	r2, r7, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	1c0a      	adds	r2, r1, #0
 8003224:	701a      	strb	r2, [r3, #0]
        while (remain != 0)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1cd      	bne.n	80031c8 <format_x+0x28>
            }

        }

        numdigits = 8 - outdex;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2208      	movs	r2, #8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	61bb      	str	r3, [r7, #24]
    }

    if ((zflag == '0') && (width > numdigits))
 8003234:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <format_x+0x130>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d116      	bne.n	800326a <format_x+0xca>
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <format_x+0x134>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	001a      	movs	r2, r3
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4293      	cmp	r3, r2
 8003246:	d210      	bcs.n	800326a <format_x+0xca>
    {

        for (i = 0; i < (width - numdigits); i++)
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
 800324c:	e005      	b.n	800325a <format_x+0xba>
        {
            store_curchar('0');
 800324e:	2030      	movs	r0, #48	; 0x30
 8003250:	f000 f842 	bl	80032d8 <store_curchar>
        for (i = 0; i < (width - numdigits); i++)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <format_x+0x134>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	001a      	movs	r2, r3
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3f1      	bcc.n	800324e <format_x+0xae>
        }

    }

    if ((zflag != '0') && (width > numdigits))
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <format_x+0x130>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	d016      	beq.n	80032a0 <format_x+0x100>
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <format_x+0x134>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	001a      	movs	r2, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4293      	cmp	r3, r2
 800327c:	d210      	bcs.n	80032a0 <format_x+0x100>
    {

        for (i = 0; i < (width - numdigits); i++)
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e005      	b.n	8003290 <format_x+0xf0>
        {
            store_curchar(' ');
 8003284:	2020      	movs	r0, #32
 8003286:	f000 f827 	bl	80032d8 <store_curchar>
        for (i = 0; i < (width - numdigits); i++)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <format_x+0x134>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3f1      	bcc.n	8003284 <format_x+0xe4>
        }

    }

    for (i = 0; i < numdigits; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e00b      	b.n	80032be <format_x+0x11e>
    {
        store_curchar(aschex[outdex + i]);
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	18d3      	adds	r3, r2, r3
 80032ac:	2208      	movs	r2, #8
 80032ae:	18ba      	adds	r2, r7, r2
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f810 	bl	80032d8 <store_curchar>
    for (i = 0; i < numdigits; i++)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3ef      	bcc.n	80032a6 <format_x+0x106>
    }

    return;
 80032c6:	46c0      	nop			; (mov r8, r8)
}
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b008      	add	sp, #32
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	200009a8 	.word	0x200009a8
 80032d4:	200009ab 	.word	0x200009ab

080032d8 <store_curchar>:
 *
 * \return - none
 */

static void store_curchar(uint8_t nxtchar)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	0002      	movs	r2, r0
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	701a      	strb	r2, [r3, #0]
    prbuf[prbufdex] = nxtchar;
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <store_curchar+0x44>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <store_curchar+0x48>)
 80032ea:	1df9      	adds	r1, r7, #7
 80032ec:	7809      	ldrb	r1, [r1, #0]
 80032ee:	54d1      	strb	r1, [r2, r3]
    prbufdex++;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <store_curchar+0x44>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <store_curchar+0x44>)
 80032f8:	601a      	str	r2, [r3, #0]

    if (prbufdex >= USB_MAX_BUF_LEN)
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <store_curchar+0x44>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b3f      	cmp	r3, #63	; 0x3f
 8003300:	d908      	bls.n	8003314 <store_curchar+0x3c>
    {
        usb_write_fixed(prbuf, USB_MAX_BUF_LEN);
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <store_curchar+0x48>)
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff fe65 	bl	8002fd6 <usb_write_fixed>
        prbufdex = 0;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <store_curchar+0x44>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    }

    return;
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46c0      	nop			; (mov r8, r8)
}
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200009ac 	.word	0x200009ac
 8003320:	200009b0 	.word	0x200009b0

08003324 <sFLASH_CS_LOW>:
// write 1 - 256 bytes in a page
//pages can be erased in a group of 16 (1 sector, 4KB) , 0 - 15
//total 4096 sectors

void sFLASH_CS_LOW(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8003328:	2390      	movs	r3, #144	; 0x90
 800332a:	05db      	lsls	r3, r3, #23
 800332c:	2200      	movs	r2, #0
 800332e:	2110      	movs	r1, #16
 8003330:	0018      	movs	r0, r3
 8003332:	f000 fc91 	bl	8003c58 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003340:	2390      	movs	r3, #144	; 0x90
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	2201      	movs	r2, #1
 8003346:	2110      	movs	r1, #16
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fc85 	bl	8003c58 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <sFLASH_Init>:
 * return - none
 */


void sFLASH_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    initstruc.Pin = FLASH_CS_Pin;
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2210      	movs	r2, #16
 800335e:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2201      	movs	r2, #1
 8003364:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_CS_GPIO_Port, &initstruc);
 8003378:	1d3a      	adds	r2, r7, #4
 800337a:	2390      	movs	r3, #144	; 0x90
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 faf9 	bl	8003978 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003386:	2390      	movs	r3, #144	; 0x90
 8003388:	05db      	lsls	r3, r3, #23
 800338a:	2201      	movs	r2, #1
 800338c:	2110      	movs	r1, #16
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fc62 	bl	8003c58 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8003394:	2002      	movs	r0, #2
 8003396:	f000 f96f 	bl	8003678 <HAL_Delay>

  sFLASH_CS_LOW();
 800339a:	f7ff ffc3 	bl	8003324 <sFLASH_CS_LOW>
    sFLASH_SendByte(0x06);
 800339e:	2006      	movs	r0, #6
 80033a0:	f000 f88a 	bl	80034b8 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80033a4:	f7ff ffca 	bl	800333c <sFLASH_CS_HIGH>

    sFLASH_CS_LOW();
 80033a8:	f7ff ffbc 	bl	8003324 <sFLASH_CS_LOW>
    sFLASH_SendByte(0x98);
 80033ac:	2098      	movs	r0, #152	; 0x98
 80033ae:	f000 f883 	bl	80034b8 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80033b2:	f7ff ffc3 	bl	800333c <sFLASH_CS_HIGH>
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b006      	add	sp, #24
 80033bc:	bd80      	pop	{r7, pc}

080033be <sFLASH_EraseSector>:

//void sFLASH_EraseSector(uint32_t SectorAddr, _Bool page_erase)
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80033c6:	f000 f89d 	bl	8003504 <sFLASH_WriteEnable>

  /* Sector Erase */
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80033ca:	f7ff ffab 	bl	8003324 <sFLASH_CS_LOW>
  /* Send Sector Erase instruction */
//    if(page_erase)
        sFLASH_SendByte(sFLASH_CMD_SE); //4KB sector erase
 80033ce:	2020      	movs	r0, #32
 80033d0:	f000 f872 	bl	80034b8 <sFLASH_SendByte>
//    else
//        sFLASH_SendByte(sFLASH_CMD_QE);
  /* Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 f86c 	bl	80034b8 <sFLASH_SendByte>
  /* Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f866 	bl	80034b8 <sFLASH_SendByte>
  /* Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f861 	bl	80034b8 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80033f6:	f7ff ffa1 	bl	800333c <sFLASH_CS_HIGH>

  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80033fa:	f000 f88f 	bl	800351c <sFLASH_WaitForWriteEnd>
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}

08003406 <sFLASH_WriteByte>:
//{
//    sFLASH_WriteByte(WriteAddr, byte);
//}

void sFLASH_WriteByte(uint32_t WriteAddr, uint8_t data_byte)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	000a      	movs	r2, r1
 8003410:	1cfb      	adds	r3, r7, #3
 8003412:	701a      	strb	r2, [r3, #0]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8003414:	f000 f876 	bl	8003504 <sFLASH_WriteEnable>
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8003418:	f7ff ff84 	bl	8003324 <sFLASH_CS_LOW>
  /* Send "Byte Program" instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800341c:	2002      	movs	r0, #2
 800341e:	f000 f84b 	bl	80034b8 <sFLASH_SendByte>
  /* Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b2db      	uxtb	r3, r3
 8003428:	0018      	movs	r0, r3
 800342a:	f000 f845 	bl	80034b8 <sFLASH_SendByte>
  /* Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0a1b      	lsrs	r3, r3, #8
 8003432:	b2db      	uxtb	r3, r3
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f83f 	bl	80034b8 <sFLASH_SendByte>
  /* Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f83a 	bl	80034b8 <sFLASH_SendByte>
  /* Send the byte */
  sFLASH_SendByte(data_byte);
 8003444:	1cfb      	adds	r3, r7, #3
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f835 	bl	80034b8 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800344e:	f7ff ff75 	bl	800333c <sFLASH_CS_HIGH>
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8003452:	f000 f863 	bl	800351c <sFLASH_WaitForWriteEnd>
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	46bd      	mov	sp, r7
 800345a:	b002      	add	sp, #8
 800345c:	bd80      	pop	{r7, pc}

0800345e <sFLASH_ReadByte1>:

//  sFLASH_CS_HIGH();
//}

uint8_t sFLASH_ReadByte1(uint32_t ReadAddr)
{
 800345e:	b5b0      	push	{r4, r5, r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint8_t aaa=0;
 8003466:	240f      	movs	r4, #15
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
    sFLASH_CS_LOW();
 800346e:	f7ff ff59 	bl	8003324 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_READ);
 8003472:	2003      	movs	r0, #3
 8003474:	f000 f820 	bl	80034b8 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0c1b      	lsrs	r3, r3, #16
 800347c:	b2db      	uxtb	r3, r3
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f81a 	bl	80034b8 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b2db      	uxtb	r3, r3
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f814 	bl	80034b8 <sFLASH_SendByte>

  sFLASH_SendByte(ReadAddr & 0xFF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f80f 	bl	80034b8 <sFLASH_SendByte>


    aaa = sFLASH_ReadByte();
 800349a:	0025      	movs	r5, r4
 800349c:	193c      	adds	r4, r7, r4
 800349e:	f000 f81d 	bl	80034dc <sFLASH_ReadByte>
 80034a2:	0003      	movs	r3, r0
 80034a4:	7023      	strb	r3, [r4, #0]

  sFLASH_CS_HIGH();
 80034a6:	f7ff ff49 	bl	800333c <sFLASH_CS_HIGH>

    return aaa;
 80034aa:	197b      	adds	r3, r7, r5
 80034ac:	781b      	ldrb	r3, [r3, #0]

}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080034b8 <sFLASH_SendByte>:

  return (byte[0] << 16) | (byte[1] << 8) | byte[2];
}*/

void sFLASH_SendByte(uint8_t data_byte)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	0002      	movs	r2, r0
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &data_byte, 1, 10);
 80034c4:	1df9      	adds	r1, r7, #7
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <sFLASH_SendByte+0x20>)
 80034c8:	230a      	movs	r3, #10
 80034ca:	2201      	movs	r2, #1
 80034cc:	f002 ff70 	bl	80063b0 <HAL_SPI_Transmit>
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000e7c 	.word	0x20000e7c

080034dc <sFLASH_ReadByte>:

uint8_t sFLASH_ReadByte(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
  uint8_t mem_var=0;
 80034e2:	1dfb      	adds	r3, r7, #7
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, &mem_var, 1, 10);
 80034e8:	1df9      	adds	r1, r7, #7
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <sFLASH_ReadByte+0x24>)
 80034ec:	230a      	movs	r3, #10
 80034ee:	2201      	movs	r2, #1
 80034f0:	f003 f8b6 	bl	8006660 <HAL_SPI_Receive>
    return mem_var;
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	781b      	ldrb	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000e7c 	.word	0x20000e7c

08003504 <sFLASH_WriteEnable>:

void sFLASH_WriteEnable(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  sFLASH_CS_LOW();
 8003508:	f7ff ff0c 	bl	8003324 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WREN);
 800350c:	2006      	movs	r0, #6
 800350e:	f7ff ffd3 	bl	80034b8 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8003512:	f7ff ff13 	bl	800333c <sFLASH_CS_HIGH>
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <sFLASH_WaitForWriteEnd>:
  sFLASH_CS_HIGH();
}*/


void sFLASH_WaitForWriteEnd(void)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]

    sFLASH_CS_LOW();
 8003528:	f7ff fefc 	bl	8003324 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_RDSR1);
 800352c:	2005      	movs	r0, #5
 800352e:	f7ff ffc3 	bl	80034b8 <sFLASH_SendByte>

    flashstatus = sFLASH_ReadByte();
 8003532:	1dfc      	adds	r4, r7, #7
 8003534:	f7ff ffd2 	bl	80034dc <sFLASH_ReadByte>
 8003538:	0003      	movs	r3, r0
 800353a:	7023      	strb	r3, [r4, #0]

  do
  {
    flashstatus = sFLASH_ReadByte();
 800353c:	1dfc      	adds	r4, r7, #7
 800353e:	f7ff ffcd 	bl	80034dc <sFLASH_ReadByte>
 8003542:	0003      	movs	r3, r0
 8003544:	7023      	strb	r3, [r4, #0]
  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2201      	movs	r2, #1
 800354c:	4013      	ands	r3, r2
 800354e:	d1f5      	bne.n	800353c <sFLASH_WaitForWriteEnd+0x20>

    sFLASH_CS_HIGH();
 8003550:	f7ff fef4 	bl	800333c <sFLASH_CS_HIGH>
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b003      	add	sp, #12
 800355a:	bd90      	pop	{r4, r7, pc}

0800355c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800355c:	480d      	ldr	r0, [pc, #52]	; (8003594 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800355e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003560:	480d      	ldr	r0, [pc, #52]	; (8003598 <LoopForever+0x6>)
  ldr r1, =_edata
 8003562:	490e      	ldr	r1, [pc, #56]	; (800359c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003564:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <LoopForever+0xe>)
  movs r3, #0
 8003566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003568:	e002      	b.n	8003570 <LoopCopyDataInit>

0800356a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800356a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800356c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356e:	3304      	adds	r3, #4

08003570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003574:	d3f9      	bcc.n	800356a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003576:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003578:	4c0b      	ldr	r4, [pc, #44]	; (80035a8 <LoopForever+0x16>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800357c:	e001      	b.n	8003582 <LoopFillZerobss>

0800357e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003580:	3204      	adds	r2, #4

08003582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003584:	d3fb      	bcc.n	800357e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003586:	f7ff fa1d 	bl	80029c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800358a:	f009 f83d 	bl	800c608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800358e:	f7fe fab9 	bl	8001b04 <main>

08003592 <LoopForever>:

LoopForever:
    b LoopForever
 8003592:	e7fe      	b.n	8003592 <LoopForever>
  ldr   r0, =_estack
 8003594:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800359c:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80035a0:	0800d97c 	.word	0x0800d97c
  ldr r2, =_sbss
 80035a4:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80035a8:	20001f98 	.word	0x20001f98

080035ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035ac:	e7fe      	b.n	80035ac <ADC1_IRQHandler>
	...

080035b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b4:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <HAL_Init+0x24>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_Init+0x24>)
 80035ba:	2110      	movs	r1, #16
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f000 f809 	bl	80035d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c6:	f7ff f843 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40022000 	.word	0x40022000

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_InitTick+0x5c>)
 80035e2:	681c      	ldr	r4, [r3, #0]
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_InitTick+0x60>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	0019      	movs	r1, r3
 80035ea:	23fa      	movs	r3, #250	; 0xfa
 80035ec:	0098      	lsls	r0, r3, #2
 80035ee:	f7fc fd9d 	bl	800012c <__udivsi3>
 80035f2:	0003      	movs	r3, r0
 80035f4:	0019      	movs	r1, r3
 80035f6:	0020      	movs	r0, r4
 80035f8:	f7fc fd98 	bl	800012c <__udivsi3>
 80035fc:	0003      	movs	r3, r0
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 f92f 	bl	8003862 <HAL_SYSTICK_Config>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e00f      	b.n	800362c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d80b      	bhi.n	800362a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	2301      	movs	r3, #1
 8003616:	425b      	negs	r3, r3
 8003618:	2200      	movs	r2, #0
 800361a:	0018      	movs	r0, r3
 800361c:	f000 f8fc 	bl	8003818 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_InitTick+0x64>)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e000      	b.n	800362c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b003      	add	sp, #12
 8003632:	bd90      	pop	{r4, r7, pc}
 8003634:	200000c4 	.word	0x200000c4
 8003638:	200000cc 	.word	0x200000cc
 800363c:	200000c8 	.word	0x200000c8

08003640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_IncTick+0x1c>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	001a      	movs	r2, r3
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_IncTick+0x20>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	18d2      	adds	r2, r2, r3
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_IncTick+0x20>)
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	200000cc 	.word	0x200000cc
 8003660:	200012c0 	.word	0x200012c0

08003664 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  return uwTick;
 8003668:	4b02      	ldr	r3, [pc, #8]	; (8003674 <HAL_GetTick+0x10>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	200012c0 	.word	0x200012c0

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff fff0 	bl	8003664 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	001a      	movs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	189b      	adds	r3, r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	f7ff ffe0 	bl	8003664 <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b004      	add	sp, #16
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	200000cc 	.word	0x200000cc

080036c0 <__NVIC_EnableIRQ>:
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	0002      	movs	r2, r0
 80036c8:	1dfb      	adds	r3, r7, #7
 80036ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b7f      	cmp	r3, #127	; 0x7f
 80036d2:	d809      	bhi.n	80036e8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d4:	1dfb      	adds	r3, r7, #7
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	001a      	movs	r2, r3
 80036da:	231f      	movs	r3, #31
 80036dc:	401a      	ands	r2, r3
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <__NVIC_EnableIRQ+0x30>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	4091      	lsls	r1, r2
 80036e4:	000a      	movs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0002      	movs	r2, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b7f      	cmp	r3, #127	; 0x7f
 8003708:	d828      	bhi.n	800375c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <__NVIC_SetPriority+0xd4>)
 800370c:	1dfb      	adds	r3, r7, #7
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b25b      	sxtb	r3, r3
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	33c0      	adds	r3, #192	; 0xc0
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	589b      	ldr	r3, [r3, r2]
 800371a:	1dfa      	adds	r2, r7, #7
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	0011      	movs	r1, r2
 8003720:	2203      	movs	r2, #3
 8003722:	400a      	ands	r2, r1
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	21ff      	movs	r1, #255	; 0xff
 8003728:	4091      	lsls	r1, r2
 800372a:	000a      	movs	r2, r1
 800372c:	43d2      	mvns	r2, r2
 800372e:	401a      	ands	r2, r3
 8003730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	401a      	ands	r2, r3
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	0018      	movs	r0, r3
 8003740:	2303      	movs	r3, #3
 8003742:	4003      	ands	r3, r0
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <__NVIC_SetPriority+0xd4>)
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	430a      	orrs	r2, r1
 8003754:	33c0      	adds	r3, #192	; 0xc0
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	501a      	str	r2, [r3, r0]
}
 800375a:	e031      	b.n	80037c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800375c:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <__NVIC_SetPriority+0xd8>)
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	0019      	movs	r1, r3
 8003764:	230f      	movs	r3, #15
 8003766:	400b      	ands	r3, r1
 8003768:	3b08      	subs	r3, #8
 800376a:	089b      	lsrs	r3, r3, #2
 800376c:	3306      	adds	r3, #6
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	3304      	adds	r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	1dfa      	adds	r2, r7, #7
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	0011      	movs	r1, r2
 800377c:	2203      	movs	r2, #3
 800377e:	400a      	ands	r2, r1
 8003780:	00d2      	lsls	r2, r2, #3
 8003782:	21ff      	movs	r1, #255	; 0xff
 8003784:	4091      	lsls	r1, r2
 8003786:	000a      	movs	r2, r1
 8003788:	43d2      	mvns	r2, r2
 800378a:	401a      	ands	r2, r3
 800378c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	401a      	ands	r2, r3
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	0018      	movs	r0, r3
 800379c:	2303      	movs	r3, #3
 800379e:	4003      	ands	r3, r0
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <__NVIC_SetPriority+0xd8>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	001c      	movs	r4, r3
 80037ac:	230f      	movs	r3, #15
 80037ae:	4023      	ands	r3, r4
 80037b0:	3b08      	subs	r3, #8
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	430a      	orrs	r2, r1
 80037b6:	3306      	adds	r3, #6
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	18c3      	adds	r3, r0, r3
 80037bc:	3304      	adds	r3, #4
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b003      	add	sp, #12
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	e000e100 	.word	0xe000e100
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	045b      	lsls	r3, r3, #17
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d301      	bcc.n	80037e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e4:	2301      	movs	r3, #1
 80037e6:	e010      	b.n	800380a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <SysTick_Config+0x44>)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f0:	2301      	movs	r3, #1
 80037f2:	425b      	negs	r3, r3
 80037f4:	2103      	movs	r1, #3
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff ff7c 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x44>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x44>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	210f      	movs	r1, #15
 8003824:	187b      	adds	r3, r7, r1
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	187b      	adds	r3, r7, r1
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff ff5d 	bl	80036f4 <__NVIC_SetPriority>
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	0002      	movs	r2, r0
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b25b      	sxtb	r3, r3
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff ff33 	bl	80036c0 <__NVIC_EnableIRQ>
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff ffaf 	bl	80037d0 <SysTick_Config>
 8003872:	0003      	movs	r3, r0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2221      	movs	r2, #33	; 0x21
 8003888:	5c9b      	ldrb	r3, [r3, r2]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	2100      	movs	r1, #0
 800389c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e020      	b.n	80038e4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	210e      	movs	r1, #14
 80038ae:	438a      	bics	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2101      	movs	r1, #1
 80038be:	438a      	bics	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	4091      	lsls	r1, r2
 80038ce:	000a      	movs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2221      	movs	r2, #33	; 0x21
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	2100      	movs	r1, #0
 80038e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b002      	add	sp, #8
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f4:	210f      	movs	r1, #15
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2221      	movs	r2, #33	; 0x21
 8003900:	5c9b      	ldrb	r3, [r3, r2]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d006      	beq.n	8003916 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2204      	movs	r2, #4
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e028      	b.n	8003968 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	210e      	movs	r1, #14
 8003922:	438a      	bics	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	2101      	movs	r1, #1
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2221      	movs	r2, #33	; 0x21
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	0010      	movs	r0, r2
 8003966:	4798      	blx	r3
    } 
  }
  return status;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e14f      	b.n	8003c28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4091      	lsls	r1, r2
 8003992:	000a      	movs	r2, r1
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d100      	bne.n	80039a0 <HAL_GPIO_Init+0x28>
 800399e:	e140      	b.n	8003c22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d00b      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b4:	2b11      	cmp	r3, #17
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	409a      	lsls	r2, r3
 80039ce:	0013      	movs	r3, r2
 80039d0:	43da      	mvns	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	409a      	lsls	r2, r3
 80039e2:	0013      	movs	r3, r2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	43da      	mvns	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	401a      	ands	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	409a      	lsls	r2, r3
 8003a14:	0013      	movs	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	0013      	movs	r3, r2
 8003a32:	43da      	mvns	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	409a      	lsls	r2, r3
 8003a44:	0013      	movs	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0xea>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b12      	cmp	r3, #18
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	58d3      	ldr	r3, [r2, r3]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2207      	movs	r2, #7
 8003a74:	4013      	ands	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2107      	movs	r1, #7
 8003a8e:	400b      	ands	r3, r1
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	43da      	mvns	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	0013      	movs	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	055b      	lsls	r3, r3, #21
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d100      	bne.n	8003aec <HAL_GPIO_Init+0x174>
 8003aea:	e09a      	b.n	8003c22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aec:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <HAL_GPIO_Init+0x2c8>)
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_GPIO_Init+0x2c8>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	430a      	orrs	r2, r1
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_GPIO_Init+0x2c8>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2201      	movs	r2, #1
 8003afe:	4013      	ands	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b04:	4a4f      	ldr	r2, [pc, #316]	; (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	589b      	ldr	r3, [r3, r2]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	0013      	movs	r3, r2
 8003b20:	43da      	mvns	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	2390      	movs	r3, #144	; 0x90
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d013      	beq.n	8003b5a <HAL_GPIO_Init+0x1e2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a44      	ldr	r2, [pc, #272]	; (8003c48 <HAL_GPIO_Init+0x2d0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00d      	beq.n	8003b56 <HAL_GPIO_Init+0x1de>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <HAL_GPIO_Init+0x2d4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d007      	beq.n	8003b52 <HAL_GPIO_Init+0x1da>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a42      	ldr	r2, [pc, #264]	; (8003c50 <HAL_GPIO_Init+0x2d8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_GPIO_Init+0x1d6>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x1e4>
 8003b4e:	2305      	movs	r3, #5
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x1e4>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x1e4>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x1e4>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	2103      	movs	r1, #3
 8003b60:	400a      	ands	r2, r1
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4093      	lsls	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b6c:	4935      	ldr	r1, [pc, #212]	; (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	4013      	ands	r3, r2
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	029b      	lsls	r3, r3, #10
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	035b      	lsls	r3, r3, #13
 8003be6:	4013      	ands	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	039b      	lsls	r3, r3, #14
 8003c10:	4013      	ands	r3, r2
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	3301      	adds	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	40da      	lsrs	r2, r3
 8003c30:	1e13      	subs	r3, r2, #0
 8003c32:	d000      	beq.n	8003c36 <HAL_GPIO_Init+0x2be>
 8003c34:	e6a8      	b.n	8003988 <HAL_GPIO_Init+0x10>
  } 
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	48000400 	.word	0x48000400
 8003c4c:	48000800 	.word	0x48000800
 8003c50:	48000c00 	.word	0x48000c00
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	0008      	movs	r0, r1
 8003c62:	0011      	movs	r1, r2
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	1c02      	adds	r2, r0, #0
 8003c68:	801a      	strh	r2, [r3, #0]
 8003c6a:	1c7b      	adds	r3, r7, #1
 8003c6c:	1c0a      	adds	r2, r1, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c70:	1c7b      	adds	r3, r7, #1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c78:	1cbb      	adds	r3, r7, #2
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c82:	1cbb      	adds	r3, r7, #2
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	b08b      	sub	sp, #44	; 0x2c
 8003c98:	af06      	add	r7, sp, #24
 8003c9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0ff      	b.n	8003ea6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a81      	ldr	r2, [pc, #516]	; (8003eb0 <HAL_PCD_Init+0x21c>)
 8003caa:	5c9b      	ldrb	r3, [r3, r2]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	23aa      	movs	r3, #170	; 0xaa
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	2100      	movs	r1, #0
 8003cba:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f008 f938 	bl	800bf34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a7a      	ldr	r2, [pc, #488]	; (8003eb0 <HAL_PCD_Init+0x21c>)
 8003cc8:	2103      	movs	r1, #3
 8003cca:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f004 f9bd 	bl	8008050 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e058      	b.n	8003d92 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ce0:	200f      	movs	r0, #15
 8003ce2:	183b      	adds	r3, r7, r0
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	0013      	movs	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	18cb      	adds	r3, r1, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	0013      	movs	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	183a      	adds	r2, r7, r0
 8003d0c:	7812      	ldrb	r2, [r2, #0]
 8003d0e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d10:	0004      	movs	r4, r0
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	193b      	adds	r3, r7, r4
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b298      	uxth	r0, r3
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	0013      	movs	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	18cb      	adds	r3, r1, r3
 8003d28:	3336      	adds	r3, #54	; 0x36
 8003d2a:	1c02      	adds	r2, r0, #0
 8003d2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d2e:	193b      	adds	r3, r7, r4
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	0013      	movs	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	18cb      	adds	r3, r1, r3
 8003d40:	3303      	adds	r3, #3
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d46:	193b      	adds	r3, r7, r4
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	18cb      	adds	r3, r1, r3
 8003d56:	3338      	adds	r3, #56	; 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	0013      	movs	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	18cb      	adds	r3, r1, r3
 8003d6c:	333c      	adds	r3, #60	; 0x3c
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	0013      	movs	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	18cb      	adds	r3, r1, r3
 8003d82:	3340      	adds	r3, #64	; 0x40
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d88:	193b      	adds	r3, r7, r4
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	3201      	adds	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	210f      	movs	r1, #15
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d39f      	bcc.n	8003ce0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	e056      	b.n	8003e56 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003da8:	240f      	movs	r4, #15
 8003daa:	193b      	adds	r3, r7, r4
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	236a      	movs	r3, #106	; 0x6a
 8003db2:	33ff      	adds	r3, #255	; 0xff
 8003db4:	0019      	movs	r1, r3
 8003db6:	0013      	movs	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	18c3      	adds	r3, r0, r3
 8003dc0:	185b      	adds	r3, r3, r1
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	23b4      	movs	r3, #180	; 0xb4
 8003dce:	0059      	lsls	r1, r3, #1
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	18c3      	adds	r3, r0, r3
 8003dda:	185b      	adds	r3, r3, r1
 8003ddc:	193a      	adds	r2, r7, r4
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003de2:	193b      	adds	r3, r7, r4
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	236c      	movs	r3, #108	; 0x6c
 8003dea:	33ff      	adds	r3, #255	; 0xff
 8003dec:	0019      	movs	r1, r3
 8003dee:	0013      	movs	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	18c3      	adds	r3, r0, r3
 8003df8:	185b      	adds	r3, r3, r1
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	23bc      	movs	r3, #188	; 0xbc
 8003e06:	0059      	lsls	r1, r3, #1
 8003e08:	0013      	movs	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	189b      	adds	r3, r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	18c3      	adds	r3, r0, r3
 8003e12:	185b      	adds	r3, r3, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e18:	193b      	adds	r3, r7, r4
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	23be      	movs	r3, #190	; 0xbe
 8003e20:	0059      	lsls	r1, r3, #1
 8003e22:	0013      	movs	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	18c3      	adds	r3, r0, r3
 8003e2c:	185b      	adds	r3, r3, r1
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	23c0      	movs	r3, #192	; 0xc0
 8003e3a:	0059      	lsls	r1, r3, #1
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	189b      	adds	r3, r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	18c3      	adds	r3, r0, r3
 8003e46:	185b      	adds	r3, r3, r1
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	193b      	adds	r3, r7, r4
 8003e52:	3201      	adds	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
 8003e56:	230f      	movs	r3, #15
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3a1      	bcc.n	8003da8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	466a      	mov	r2, sp
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	001a      	movs	r2, r3
 8003e70:	3210      	adds	r2, #16
 8003e72:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003e74:	c170      	stmia	r1!, {r4, r5, r6}
 8003e76:	ca30      	ldmia	r2!, {r4, r5}
 8003e78:	c130      	stmia	r1!, {r4, r5}
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f004 f900 	bl	8008084 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	; 0x24
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <HAL_PCD_Init+0x21c>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d103      	bne.n	8003ea4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f001 f9da 	bl	8005258 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b005      	add	sp, #20
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	000002a9 	.word	0x000002a9

08003eb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	23aa      	movs	r3, #170	; 0xaa
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_PCD_Start+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e014      	b.n	8003ef6 <HAL_PCD_Start+0x42>
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	23aa      	movs	r3, #170	; 0xaa
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	0018      	movs	r0, r3
 8003edc:	f004 f8a2 	bl	8008024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f006 f847 	bl	8009f78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	23aa      	movs	r3, #170	; 0xaa
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b002      	add	sp, #8
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	000a      	movs	r2, r1
 8003f08:	1cfb      	adds	r3, r7, #3
 8003f0a:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	23aa      	movs	r3, #170	; 0xaa
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_PCD_SetAddress+0x1e>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e017      	b.n	8003f4c <HAL_PCD_SetAddress+0x4e>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	23aa      	movs	r3, #170	; 0xaa
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	2101      	movs	r1, #1
 8003f24:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1cfa      	adds	r2, r7, #3
 8003f2a:	2124      	movs	r1, #36	; 0x24
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	1cfb      	adds	r3, r7, #3
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	0019      	movs	r1, r3
 8003f3a:	0010      	movs	r0, r2
 8003f3c:	f006 f808 	bl	8009f50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	23aa      	movs	r3, #170	; 0xaa
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	2100      	movs	r1, #0
 8003f48:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	000c      	movs	r4, r1
 8003f5e:	0010      	movs	r0, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	1cfb      	adds	r3, r7, #3
 8003f64:	1c22      	adds	r2, r4, #0
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	003b      	movs	r3, r7
 8003f6a:	1c02      	adds	r2, r0, #0
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	1cbb      	adds	r3, r7, #2
 8003f70:	1c0a      	adds	r2, r1, #0
 8003f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f74:	230b      	movs	r3, #11
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f7c:	1cfb      	adds	r3, r7, #3
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da0f      	bge.n	8003fa6 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f86:	1cfb      	adds	r3, r7, #3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	0013      	movs	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	18d3      	adds	r3, r2, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	705a      	strb	r2, [r3, #1]
 8003fa4:	e00f      	b.n	8003fc6 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa6:	1cfb      	adds	r3, r7, #3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2207      	movs	r2, #7
 8003fac:	401a      	ands	r2, r3
 8003fae:	0013      	movs	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	3369      	adds	r3, #105	; 0x69
 8003fb8:	33ff      	adds	r3, #255	; 0xff
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc6:	1cfb      	adds	r3, r7, #3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2207      	movs	r2, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fd4:	003b      	movs	r3, r7
 8003fd6:	881a      	ldrh	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1cba      	adds	r2, r7, #2
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	785b      	ldrb	r3, [r3, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ff6:	1cbb      	adds	r3, r7, #2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d102      	bne.n	8004004 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	23aa      	movs	r3, #170	; 0xaa
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_PCD_EP_Open+0xc0>
 8004010:	2302      	movs	r3, #2
 8004012:	e013      	b.n	800403c <HAL_PCD_EP_Open+0xe8>
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	23aa      	movs	r3, #170	; 0xaa
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	2101      	movs	r1, #1
 800401c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f004 f858 	bl	80080dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	23aa      	movs	r3, #170	; 0xaa
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	2100      	movs	r1, #0
 8004034:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004036:	230b      	movs	r3, #11
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	781b      	ldrb	r3, [r3, #0]
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b005      	add	sp, #20
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	000a      	movs	r2, r1
 800404e:	1cfb      	adds	r3, r7, #3
 8004050:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004052:	1cfb      	adds	r3, r7, #3
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b25b      	sxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	da0f      	bge.n	800407c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405c:	1cfb      	adds	r3, r7, #3
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2207      	movs	r2, #7
 8004062:	4013      	ands	r3, r2
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	0013      	movs	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	189b      	adds	r3, r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	18d3      	adds	r3, r2, r3
 8004072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	705a      	strb	r2, [r3, #1]
 800407a:	e00f      	b.n	800409c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407c:	1cfb      	adds	r3, r7, #3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2207      	movs	r2, #7
 8004082:	401a      	ands	r2, r3
 8004084:	0013      	movs	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	189b      	adds	r3, r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	3369      	adds	r3, #105	; 0x69
 800408e:	33ff      	adds	r3, #255	; 0xff
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	18d3      	adds	r3, r2, r3
 8004094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800409c:	1cfb      	adds	r3, r7, #3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2207      	movs	r2, #7
 80040a2:	4013      	ands	r3, r2
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	23aa      	movs	r3, #170	; 0xaa
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_PCD_EP_Close+0x76>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e011      	b.n	80040de <HAL_PCD_EP_Close+0x9a>
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	23aa      	movs	r3, #170	; 0xaa
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	2101      	movs	r1, #1
 80040c2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f004 fb5b 	bl	8008788 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	23aa      	movs	r3, #170	; 0xaa
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	2100      	movs	r1, #0
 80040da:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b004      	add	sp, #16
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	200b      	movs	r0, #11
 80040f4:	183b      	adds	r3, r7, r0
 80040f6:	1c0a      	adds	r2, r1, #0
 80040f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	0001      	movs	r1, r0
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2207      	movs	r2, #7
 8004102:	401a      	ands	r2, r3
 8004104:	0013      	movs	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	189b      	adds	r3, r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	3369      	adds	r3, #105	; 0x69
 800410e:	33ff      	adds	r3, #255	; 0xff
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	18d3      	adds	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800412e:	187b      	adds	r3, r7, r1
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2207      	movs	r2, #7
 8004134:	4013      	ands	r3, r2
 8004136:	b2da      	uxtb	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413c:	187b      	adds	r3, r7, r1
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2207      	movs	r2, #7
 8004142:	4013      	ands	r3, r2
 8004144:	d107      	bne.n	8004156 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	0011      	movs	r1, r2
 800414e:	0018      	movs	r0, r3
 8004150:	f004 fcda 	bl	8008b08 <USB_EPStartXfer>
 8004154:	e006      	b.n	8004164 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	0011      	movs	r1, r2
 800415e:	0018      	movs	r0, r3
 8004160:	f004 fcd2 	bl	8008b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b006      	add	sp, #24
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	000a      	movs	r2, r1
 8004178:	1cfb      	adds	r3, r7, #3
 800417a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800417c:	1cfb      	adds	r3, r7, #3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2207      	movs	r2, #7
 8004182:	401a      	ands	r2, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	23c2      	movs	r3, #194	; 0xc2
 8004188:	0059      	lsls	r1, r3, #1
 800418a:	0013      	movs	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	189b      	adds	r3, r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	18c3      	adds	r3, r0, r3
 8004194:	185b      	adds	r3, r3, r1
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	200b      	movs	r0, #11
 80041ae:	183b      	adds	r3, r7, r0
 80041b0:	1c0a      	adds	r2, r1, #0
 80041b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2207      	movs	r2, #7
 80041ba:	4013      	ands	r3, r2
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	0013      	movs	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	18d3      	adds	r3, r2, r3
 80041ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	2101      	movs	r1, #1
 80041de:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2201      	movs	r2, #1
 80041f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2207      	movs	r2, #7
 80041f8:	4013      	ands	r3, r2
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004200:	183b      	adds	r3, r7, r0
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2207      	movs	r2, #7
 8004206:	4013      	ands	r3, r2
 8004208:	d107      	bne.n	800421a <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	0011      	movs	r1, r2
 8004212:	0018      	movs	r0, r3
 8004214:	f004 fc78 	bl	8008b08 <USB_EPStartXfer>
 8004218:	e006      	b.n	8004228 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f004 fc70 	bl	8008b08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b006      	add	sp, #24
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	000a      	movs	r2, r1
 800423c:	1cfb      	adds	r3, r7, #3
 800423e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004240:	1cfb      	adds	r3, r7, #3
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2207      	movs	r2, #7
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d901      	bls.n	8004254 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e046      	b.n	80042e2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004254:	1cfb      	adds	r3, r7, #3
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25b      	sxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0f      	bge.n	800427e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	1cfb      	adds	r3, r7, #3
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2207      	movs	r2, #7
 8004264:	4013      	ands	r3, r2
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	0013      	movs	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	189b      	adds	r3, r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	18d3      	adds	r3, r2, r3
 8004274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	705a      	strb	r2, [r3, #1]
 800427c:	e00d      	b.n	800429a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800427e:	1cfb      	adds	r3, r7, #3
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	0013      	movs	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	189b      	adds	r3, r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	3369      	adds	r3, #105	; 0x69
 800428c:	33ff      	adds	r3, #255	; 0xff
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a0:	1cfb      	adds	r3, r7, #3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2207      	movs	r2, #7
 80042a6:	4013      	ands	r3, r2
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	23aa      	movs	r3, #170	; 0xaa
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	5cd3      	ldrb	r3, [r2, r3]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_PCD_EP_SetStall+0x8c>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e011      	b.n	80042e2 <HAL_PCD_EP_SetStall+0xb0>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	23aa      	movs	r3, #170	; 0xaa
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	2101      	movs	r1, #1
 80042c6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	0011      	movs	r1, r2
 80042d0:	0018      	movs	r0, r3
 80042d2:	f005 fd3b 	bl	8009d4c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	23aa      	movs	r3, #170	; 0xaa
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	2100      	movs	r1, #0
 80042de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	0018      	movs	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	000a      	movs	r2, r1
 80042f4:	1cfb      	adds	r3, r7, #3
 80042f6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042f8:	1cfb      	adds	r3, r7, #3
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	220f      	movs	r2, #15
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d901      	bls.n	800430c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e048      	b.n	800439e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800430c:	1cfb      	adds	r3, r7, #3
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	da0f      	bge.n	8004336 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004316:	1cfb      	adds	r3, r7, #3
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2207      	movs	r2, #7
 800431c:	4013      	ands	r3, r2
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	0013      	movs	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	189b      	adds	r3, r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	705a      	strb	r2, [r3, #1]
 8004334:	e00f      	b.n	8004356 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004336:	1cfb      	adds	r3, r7, #3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2207      	movs	r2, #7
 800433c:	401a      	ands	r2, r3
 800433e:	0013      	movs	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	189b      	adds	r3, r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	3369      	adds	r3, #105	; 0x69
 8004348:	33ff      	adds	r3, #255	; 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	18d3      	adds	r3, r2, r3
 800434e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435c:	1cfb      	adds	r3, r7, #3
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2207      	movs	r2, #7
 8004362:	4013      	ands	r3, r2
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	23aa      	movs	r3, #170	; 0xaa
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_PCD_EP_ClrStall+0x90>
 8004376:	2302      	movs	r3, #2
 8004378:	e011      	b.n	800439e <HAL_PCD_EP_ClrStall+0xb4>
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	23aa      	movs	r3, #170	; 0xaa
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	2101      	movs	r1, #1
 8004382:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	0011      	movs	r1, r2
 800438c:	0018      	movs	r0, r3
 800438e:	f005 fd2d 	bl	8009dec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	23aa      	movs	r3, #170	; 0xaa
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	2100      	movs	r1, #0
 800439a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b004      	add	sp, #16
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b08e      	sub	sp, #56	; 0x38
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043b0:	e31c      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
  {
    wIstr = hpcd->Instance->ISTR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	202e      	movs	r0, #46	; 0x2e
 80043b8:	183b      	adds	r3, r7, r0
 80043ba:	2144      	movs	r1, #68	; 0x44
 80043bc:	5a52      	ldrh	r2, [r2, r1]
 80043be:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80043c0:	183b      	adds	r3, r7, r0
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	242d      	movs	r4, #45	; 0x2d
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	210f      	movs	r1, #15
 80043cc:	400a      	ands	r2, r1
 80043ce:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80043d0:	193b      	adds	r3, r7, r4
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d000      	beq.n	80043da <PCD_EP_ISR_Handler+0x32>
 80043d8:	e15d      	b.n	8004696 <PCD_EP_ISR_Handler+0x2ee>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043da:	183b      	adds	r3, r7, r0
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	2210      	movs	r2, #16
 80043e0:	4013      	ands	r3, r2
 80043e2:	d152      	bne.n	800448a <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	200e      	movs	r0, #14
 80043ee:	183b      	adds	r3, r7, r0
 80043f0:	49da      	ldr	r1, [pc, #872]	; (800475c <PCD_EP_ISR_Handler+0x3b4>)
 80043f2:	400a      	ands	r2, r1
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	183a      	adds	r2, r7, r0
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	49d8      	ldr	r1, [pc, #864]	; (8004760 <PCD_EP_ISR_Handler+0x3b8>)
 8004400:	430a      	orrs	r2, r1
 8004402:	b292      	uxth	r2, r2
 8004404:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3328      	adds	r3, #40	; 0x28
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2250      	movs	r2, #80	; 0x50
 8004412:	5a9b      	ldrh	r3, [r3, r2]
 8004414:	b29b      	uxth	r3, r3
 8004416:	001a      	movs	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	18d2      	adds	r2, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	4acf      	ldr	r2, [pc, #828]	; (8004764 <PCD_EP_ISR_Handler+0x3bc>)
 8004428:	4694      	mov	ip, r2
 800442a:	4463      	add	r3, ip
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	059b      	lsls	r3, r3, #22
 8004430:	0d9a      	lsrs	r2, r3, #22
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	18d2      	adds	r2, r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2100      	movs	r1, #0
 8004448:	0018      	movs	r0, r3
 800444a:	f007 fdd1 	bl	800bff0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2224      	movs	r2, #36	; 0x24
 8004452:	5c9b      	ldrb	r3, [r3, r2]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <PCD_EP_ISR_Handler+0xb4>
 800445a:	e2c7      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d000      	beq.n	8004466 <PCD_EP_ISR_Handler+0xbe>
 8004464:	e2c2      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2224      	movs	r2, #36	; 0x24
 800446a:	5c9b      	ldrb	r3, [r3, r2]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	4252      	negs	r2, r2
 8004472:	4313      	orrs	r3, r2
 8004474:	b2da      	uxtb	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	b291      	uxth	r1, r2
 800447c:	224c      	movs	r2, #76	; 0x4c
 800447e:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]
 8004488:	e2b0      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3369      	adds	r3, #105	; 0x69
 800448e:	33ff      	adds	r3, #255	; 0xff
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	212a      	movs	r1, #42	; 0x2a
 8004498:	187b      	adds	r3, r7, r1
 800449a:	8812      	ldrh	r2, [r2, #0]
 800449c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4013      	ands	r3, r2
 80044a8:	d037      	beq.n	800451a <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2250      	movs	r2, #80	; 0x50
 80044b0:	5a9b      	ldrh	r3, [r3, r2]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	001a      	movs	r2, r3
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	18d2      	adds	r2, r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	18d3      	adds	r3, r2, r3
 80044c4:	4aa8      	ldr	r2, [pc, #672]	; (8004768 <PCD_EP_ISR_Handler+0x3c0>)
 80044c6:	4694      	mov	ip, r2
 80044c8:	4463      	add	r3, ip
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	059b      	lsls	r3, r3, #22
 80044ce:	0d9a      	lsrs	r2, r3, #22
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	22ac      	movs	r2, #172	; 0xac
 80044dc:	0092      	lsls	r2, r2, #2
 80044de:	1899      	adds	r1, r3, r2
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f005 fd9f 	bl	800a02c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	2010      	movs	r0, #16
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	499c      	ldr	r1, [pc, #624]	; (800476c <PCD_EP_ISR_Handler+0x3c4>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	183a      	adds	r2, r7, r0
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	430a      	orrs	r2, r1
 800450c:	b292      	uxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	0018      	movs	r0, r3
 8004514:	f007 fd36 	bl	800bf84 <HAL_PCD_SetupStageCallback>
 8004518:	e268      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800451a:	232a      	movs	r3, #42	; 0x2a
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	2200      	movs	r2, #0
 8004520:	5e9b      	ldrsh	r3, [r3, r2]
 8004522:	2b00      	cmp	r3, #0
 8004524:	db00      	blt.n	8004528 <PCD_EP_ISR_Handler+0x180>
 8004526:	e261      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29a      	uxth	r2, r3
 8004530:	201c      	movs	r0, #28
 8004532:	183b      	adds	r3, r7, r0
 8004534:	498d      	ldr	r1, [pc, #564]	; (800476c <PCD_EP_ISR_Handler+0x3c4>)
 8004536:	400a      	ands	r2, r1
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	183a      	adds	r2, r7, r0
 8004540:	8812      	ldrh	r2, [r2, #0]
 8004542:	2180      	movs	r1, #128	; 0x80
 8004544:	430a      	orrs	r2, r1
 8004546:	b292      	uxth	r2, r2
 8004548:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2250      	movs	r2, #80	; 0x50
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	b29b      	uxth	r3, r3
 8004554:	001a      	movs	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	18d2      	adds	r2, r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	4a80      	ldr	r2, [pc, #512]	; (8004768 <PCD_EP_ISR_Handler+0x3c0>)
 8004566:	4694      	mov	ip, r2
 8004568:	4463      	add	r3, ip
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	0d9a      	lsrs	r2, r3, #22
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01a      	beq.n	80045b2 <PCD_EP_ISR_Handler+0x20a>
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d016      	beq.n	80045b2 <PCD_EP_ISR_Handler+0x20a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	6959      	ldr	r1, [r3, #20]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004594:	b29b      	uxth	r3, r3
 8004596:	f005 fd49 	bl	800a02c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	18d2      	adds	r2, r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2100      	movs	r1, #0
 80045ac:	0018      	movs	r0, r3
 80045ae:	f007 fcfe 	bl	800bfae <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2250      	movs	r2, #80	; 0x50
 80045be:	5a9b      	ldrh	r3, [r3, r2]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	001a      	movs	r2, r3
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4a66      	ldr	r2, [pc, #408]	; (8004768 <PCD_EP_ISR_Handler+0x3c0>)
 80045ce:	4694      	mov	ip, r2
 80045d0:	4463      	add	r3, ip
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <PCD_EP_ISR_Handler+0x256>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	4a63      	ldr	r2, [pc, #396]	; (8004770 <PCD_EP_ISR_Handler+0x3c8>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4a5b      	ldr	r2, [pc, #364]	; (8004760 <PCD_EP_ISR_Handler+0x3b8>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e02b      	b.n	8004656 <PCD_EP_ISR_Handler+0x2ae>
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b3e      	cmp	r3, #62	; 0x3e
 8004604:	d812      	bhi.n	800462c <PCD_EP_ISR_Handler+0x284>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2201      	movs	r2, #1
 8004614:	4013      	ands	r3, r2
 8004616:	d002      	beq.n	800461e <PCD_EP_ISR_Handler+0x276>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3301      	adds	r3, #1
 800461c:	633b      	str	r3, [r7, #48]	; 0x30
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	b29b      	uxth	r3, r3
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	b29a      	uxth	r2, r3
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	801a      	strh	r2, [r3, #0]
 800462a:	e014      	b.n	8004656 <PCD_EP_ISR_Handler+0x2ae>
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	221f      	movs	r2, #31
 800463a:	4013      	ands	r3, r2
 800463c:	d102      	bne.n	8004644 <PCD_EP_ISR_Handler+0x29c>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	3b01      	subs	r3, #1
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	b29b      	uxth	r3, r3
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	b29b      	uxth	r3, r3
 800464c:	4a44      	ldr	r2, [pc, #272]	; (8004760 <PCD_EP_ISR_Handler+0x3b8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	b29a      	uxth	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	2012      	movs	r0, #18
 8004660:	183b      	adds	r3, r7, r0
 8004662:	4944      	ldr	r1, [pc, #272]	; (8004774 <PCD_EP_ISR_Handler+0x3cc>)
 8004664:	400a      	ands	r2, r1
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	183b      	adds	r3, r7, r0
 800466a:	183a      	adds	r2, r7, r0
 800466c:	8812      	ldrh	r2, [r2, #0]
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	0149      	lsls	r1, r1, #5
 8004672:	404a      	eors	r2, r1
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	183b      	adds	r3, r7, r0
 8004678:	183a      	adds	r2, r7, r0
 800467a:	8812      	ldrh	r2, [r2, #0]
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	0189      	lsls	r1, r1, #6
 8004680:	404a      	eors	r2, r1
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	183a      	adds	r2, r7, r0
 800468a:	8812      	ldrh	r2, [r2, #0]
 800468c:	493a      	ldr	r1, [pc, #232]	; (8004778 <PCD_EP_ISR_Handler+0x3d0>)
 800468e:	430a      	orrs	r2, r1
 8004690:	b292      	uxth	r2, r2
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e1aa      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	001a      	movs	r2, r3
 800469c:	202d      	movs	r0, #45	; 0x2d
 800469e:	183b      	adds	r3, r7, r0
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	18d2      	adds	r2, r2, r3
 80046a6:	212a      	movs	r1, #42	; 0x2a
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046ae:	187b      	adds	r3, r7, r1
 80046b0:	2200      	movs	r2, #0
 80046b2:	5e9b      	ldrsh	r3, [r3, r2]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	db00      	blt.n	80046ba <PCD_EP_ISR_Handler+0x312>
 80046b8:	e10b      	b.n	80048d2 <PCD_EP_ISR_Handler+0x52a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	001a      	movs	r2, r3
 80046c0:	183b      	adds	r3, r7, r0
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	2428      	movs	r4, #40	; 0x28
 80046ce:	193b      	adds	r3, r7, r4
 80046d0:	4926      	ldr	r1, [pc, #152]	; (800476c <PCD_EP_ISR_Handler+0x3c4>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	001a      	movs	r2, r3
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	18d3      	adds	r3, r2, r3
 80046e4:	193a      	adds	r2, r7, r4
 80046e6:	8812      	ldrh	r2, [r2, #0]
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	430a      	orrs	r2, r1
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046f0:	183b      	adds	r3, r7, r0
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	0013      	movs	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	3369      	adds	r3, #105	; 0x69
 80046fe:	33ff      	adds	r3, #255	; 0xff
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d136      	bne.n	800477c <PCD_EP_ISR_Handler+0x3d4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2250      	movs	r2, #80	; 0x50
 8004714:	5a9b      	ldrh	r3, [r3, r2]
 8004716:	b29b      	uxth	r3, r3
 8004718:	001a      	movs	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	18d2      	adds	r2, r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	18d3      	adds	r3, r2, r3
 8004728:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <PCD_EP_ISR_Handler+0x3c0>)
 800472a:	4694      	mov	ip, r2
 800472c:	4463      	add	r3, ip
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	2436      	movs	r4, #54	; 0x36
 8004732:	193b      	adds	r3, r7, r4
 8004734:	0592      	lsls	r2, r2, #22
 8004736:	0d92      	lsrs	r2, r2, #22
 8004738:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800473a:	193b      	adds	r3, r7, r4
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d100      	bne.n	8004744 <PCD_EP_ISR_Handler+0x39c>
 8004742:	e09e      	b.n	8004882 <PCD_EP_ISR_Handler+0x4da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	6959      	ldr	r1, [r3, #20]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	88da      	ldrh	r2, [r3, #6]
 8004750:	193b      	adds	r3, r7, r4
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	f005 fc6a 	bl	800a02c <USB_ReadPMA>
 8004758:	e093      	b.n	8004882 <PCD_EP_ISR_Handler+0x4da>
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	ffff8f0f 	.word	0xffff8f0f
 8004760:	ffff8000 	.word	0xffff8000
 8004764:	00000402 	.word	0x00000402
 8004768:	00000406 	.word	0x00000406
 800476c:	00000f8f 	.word	0x00000f8f
 8004770:	ffff83ff 	.word	0xffff83ff
 8004774:	ffffbf8f 	.word	0xffffbf8f
 8004778:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	78db      	ldrb	r3, [r3, #3]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d10c      	bne.n	800479e <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004784:	2336      	movs	r3, #54	; 0x36
 8004786:	18fc      	adds	r4, r7, r3
 8004788:	232a      	movs	r3, #42	; 0x2a
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f944 	bl	8004a20 <HAL_PCD_EP_DB_Receive>
 8004798:	0003      	movs	r3, r0
 800479a:	8023      	strh	r3, [r4, #0]
 800479c:	e071      	b.n	8004882 <PCD_EP_ISR_Handler+0x4da>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	001a      	movs	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	2022      	movs	r0, #34	; 0x22
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	4994      	ldr	r1, [pc, #592]	; (8004a08 <PCD_EP_ISR_Handler+0x660>)
 80047b6:	400a      	ands	r2, r1
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	001a      	movs	r2, r3
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	183a      	adds	r2, r7, r0
 80047ca:	8812      	ldrh	r2, [r2, #0]
 80047cc:	498f      	ldr	r1, [pc, #572]	; (8004a0c <PCD_EP_ISR_Handler+0x664>)
 80047ce:	430a      	orrs	r2, r1
 80047d0:	b292      	uxth	r2, r2
 80047d2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	001a      	movs	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	18d3      	adds	r3, r2, r3
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	001a      	movs	r2, r3
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	4013      	ands	r3, r2
 80047ee:	d024      	beq.n	800483a <PCD_EP_ISR_Handler+0x492>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2250      	movs	r2, #80	; 0x50
 80047f6:	5a9b      	ldrh	r3, [r3, r2]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	001a      	movs	r2, r3
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	18d2      	adds	r2, r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	18d3      	adds	r3, r2, r3
 800480a:	4a81      	ldr	r2, [pc, #516]	; (8004a10 <PCD_EP_ISR_Handler+0x668>)
 800480c:	4694      	mov	ip, r2
 800480e:	4463      	add	r3, ip
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	2436      	movs	r4, #54	; 0x36
 8004814:	193b      	adds	r3, r7, r4
 8004816:	0592      	lsls	r2, r2, #22
 8004818:	0d92      	lsrs	r2, r2, #22
 800481a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800481c:	193b      	adds	r3, r7, r4
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d02e      	beq.n	8004882 <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	6959      	ldr	r1, [r3, #20]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	891a      	ldrh	r2, [r3, #8]
 8004830:	193b      	adds	r3, r7, r4
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	f005 fbfa 	bl	800a02c <USB_ReadPMA>
 8004838:	e023      	b.n	8004882 <PCD_EP_ISR_Handler+0x4da>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2250      	movs	r2, #80	; 0x50
 8004840:	5a9b      	ldrh	r3, [r3, r2]
 8004842:	b29b      	uxth	r3, r3
 8004844:	001a      	movs	r2, r3
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	18d2      	adds	r2, r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	18d3      	adds	r3, r2, r3
 8004854:	4a6f      	ldr	r2, [pc, #444]	; (8004a14 <PCD_EP_ISR_Handler+0x66c>)
 8004856:	4694      	mov	ip, r2
 8004858:	4463      	add	r3, ip
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	2436      	movs	r4, #54	; 0x36
 800485e:	193b      	adds	r3, r7, r4
 8004860:	0592      	lsls	r2, r2, #22
 8004862:	0d92      	lsrs	r2, r2, #22
 8004864:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004866:	193b      	adds	r3, r7, r4
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6959      	ldr	r1, [r3, #20]
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	895a      	ldrh	r2, [r3, #10]
 800487a:	193b      	adds	r3, r7, r4
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	f005 fbd5 	bl	800a02c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	2136      	movs	r1, #54	; 0x36
 8004888:	187b      	adds	r3, r7, r1
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	18d2      	adds	r2, r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	187b      	adds	r3, r7, r1
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	18d2      	adds	r2, r2, r3
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <PCD_EP_ISR_Handler+0x50c>
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d207      	bcs.n	80048c4 <PCD_EP_ISR_Handler+0x51c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f007 fb76 	bl	800bfae <HAL_PCD_DataOutStageCallback>
 80048c2:	e006      	b.n	80048d2 <PCD_EP_ISR_Handler+0x52a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	0011      	movs	r1, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f004 f91b 	bl	8008b08 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048d2:	242a      	movs	r4, #42	; 0x2a
 80048d4:	193b      	adds	r3, r7, r4
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	4013      	ands	r3, r2
 80048dc:	d100      	bne.n	80048e0 <PCD_EP_ISR_Handler+0x538>
 80048de:	e085      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[epindex];
 80048e0:	202d      	movs	r0, #45	; 0x2d
 80048e2:	183b      	adds	r3, r7, r0
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	0013      	movs	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	18d3      	adds	r3, r2, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	001a      	movs	r2, r3
 80048fc:	183b      	adds	r3, r7, r0
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	18d3      	adds	r3, r2, r3
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29a      	uxth	r2, r3
 8004908:	2520      	movs	r5, #32
 800490a:	197b      	adds	r3, r7, r5
 800490c:	4942      	ldr	r1, [pc, #264]	; (8004a18 <PCD_EP_ISR_Handler+0x670>)
 800490e:	400a      	ands	r2, r1
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	001a      	movs	r2, r3
 8004918:	183b      	adds	r3, r7, r0
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	18d3      	adds	r3, r2, r3
 8004920:	197a      	adds	r2, r7, r5
 8004922:	8812      	ldrh	r2, [r2, #0]
 8004924:	493d      	ldr	r1, [pc, #244]	; (8004a1c <PCD_EP_ISR_Handler+0x674>)
 8004926:	430a      	orrs	r2, r1
 8004928:	b292      	uxth	r2, r2
 800492a:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d109      	bne.n	8004948 <PCD_EP_ISR_Handler+0x5a0>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004938:	2b02      	cmp	r3, #2
 800493a:	d14f      	bne.n	80049dc <PCD_EP_ISR_Handler+0x634>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800493c:	193b      	adds	r3, r7, r4
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d149      	bne.n	80049dc <PCD_EP_ISR_Handler+0x634>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2250      	movs	r2, #80	; 0x50
 800494e:	5a9b      	ldrh	r3, [r3, r2]
 8004950:	b29b      	uxth	r3, r3
 8004952:	001a      	movs	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	18d2      	adds	r2, r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <PCD_EP_ISR_Handler+0x668>)
 8004964:	4694      	mov	ip, r2
 8004966:	4463      	add	r3, ip
 8004968:	881a      	ldrh	r2, [r3, #0]
 800496a:	211e      	movs	r1, #30
 800496c:	187b      	adds	r3, r7, r1
 800496e:	0592      	lsls	r2, r2, #22
 8004970:	0d92      	lsrs	r2, r2, #22
 8004972:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	699a      	ldr	r2, [r3, #24]
 8004978:	187b      	adds	r3, r7, r1
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d907      	bls.n	8004990 <PCD_EP_ISR_Handler+0x5e8>
          {
            ep->xfer_len -= TxByteNbre;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	619a      	str	r2, [r3, #24]
 800498e:	e002      	b.n	8004996 <PCD_EP_ISR_Handler+0x5ee>
          }
          else
          {
            ep->xfer_len = 0U;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	2200      	movs	r2, #0
 8004994:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <PCD_EP_ISR_Handler+0x606>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f007 fb22 	bl	800bff0 <HAL_PCD_DataInStageCallback>
 80049ac:	e01e      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	211e      	movs	r1, #30
 80049b4:	187b      	adds	r3, r7, r1
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	18d2      	adds	r2, r2, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	18d2      	adds	r2, r2, r3
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d2:	0011      	movs	r1, r2
 80049d4:	0018      	movs	r0, r3
 80049d6:	f004 f897 	bl	8008b08 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80049da:	e007      	b.n	80049ec <PCD_EP_ISR_Handler+0x644>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80049dc:	232a      	movs	r3, #42	; 0x2a
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 f936 	bl	8004c58 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2244      	movs	r2, #68	; 0x44
 80049f2:	5a9b      	ldrh	r3, [r3, r2]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	b21b      	sxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da00      	bge.n	80049fe <PCD_EP_ISR_Handler+0x656>
 80049fc:	e4d9      	b.n	80043b2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b00e      	add	sp, #56	; 0x38
 8004a06:	bdb0      	pop	{r4, r5, r7, pc}
 8004a08:	ffff8f8f 	.word	0xffff8f8f
 8004a0c:	ffff80c0 	.word	0xffff80c0
 8004a10:	00000402 	.word	0x00000402
 8004a14:	00000406 	.word	0x00000406
 8004a18:	ffff8f0f 	.word	0xffff8f0f
 8004a1c:	ffff8000 	.word	0xffff8000

08004a20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	1dbb      	adds	r3, r7, #6
 8004a2c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4013      	ands	r3, r2
 8004a38:	d100      	bne.n	8004a3c <HAL_PCD_EP_DB_Receive+0x1c>
 8004a3a:	e07d      	b.n	8004b38 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2250      	movs	r2, #80	; 0x50
 8004a42:	5a9b      	ldrh	r3, [r3, r2]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	001a      	movs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	18d2      	adds	r2, r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	18d3      	adds	r3, r2, r3
 8004a56:	4a7a      	ldr	r2, [pc, #488]	; (8004c40 <HAL_PCD_EP_DB_Receive+0x220>)
 8004a58:	4694      	mov	ip, r2
 8004a5a:	4463      	add	r3, ip
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	211a      	movs	r1, #26
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	0592      	lsls	r2, r2, #22
 8004a64:	0d92      	lsrs	r2, r2, #22
 8004a66:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d307      	bcc.n	8004a84 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	1ad2      	subs	r2, r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	619a      	str	r2, [r3, #24]
 8004a82:	e002      	b.n	8004a8a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d121      	bne.n	8004ad6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	001a      	movs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	18d3      	adds	r3, r2, r3
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	2018      	movs	r0, #24
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	4966      	ldr	r1, [pc, #408]	; (8004c44 <HAL_PCD_EP_DB_Receive+0x224>)
 8004aaa:	400a      	ands	r2, r1
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	183b      	adds	r3, r7, r0
 8004ab0:	183a      	adds	r2, r7, r0
 8004ab2:	8812      	ldrh	r2, [r2, #0]
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	0189      	lsls	r1, r1, #6
 8004ab8:	404a      	eors	r2, r1
 8004aba:	801a      	strh	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	183a      	adds	r2, r7, r0
 8004acc:	8812      	ldrh	r2, [r2, #0]
 8004ace:	495e      	ldr	r1, [pc, #376]	; (8004c48 <HAL_PCD_EP_DB_Receive+0x228>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ad6:	1dbb      	adds	r3, r7, #6
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	4013      	ands	r3, r2
 8004ade:	d01a      	beq.n	8004b16 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	18d3      	adds	r3, r2, r3
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	2016      	movs	r0, #22
 8004af4:	183b      	adds	r3, r7, r0
 8004af6:	4955      	ldr	r1, [pc, #340]	; (8004c4c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	001a      	movs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	18d3      	adds	r3, r2, r3
 8004b0a:	183a      	adds	r2, r7, r0
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	4950      	ldr	r1, [pc, #320]	; (8004c50 <HAL_PCD_EP_DB_Receive+0x230>)
 8004b10:	430a      	orrs	r2, r1
 8004b12:	b292      	uxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004b16:	241a      	movs	r4, #26
 8004b18:	193b      	adds	r3, r7, r4
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d100      	bne.n	8004b22 <HAL_PCD_EP_DB_Receive+0x102>
 8004b20:	e086      	b.n	8004c30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6959      	ldr	r1, [r3, #20]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	891a      	ldrh	r2, [r3, #8]
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	f005 fa7b 	bl	800a02c <USB_ReadPMA>
 8004b36:	e07b      	b.n	8004c30 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2250      	movs	r2, #80	; 0x50
 8004b3e:	5a9b      	ldrh	r3, [r3, r2]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	001a      	movs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	18d2      	adds	r2, r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	18d3      	adds	r3, r2, r3
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <HAL_PCD_EP_DB_Receive+0x234>)
 8004b54:	4694      	mov	ip, r2
 8004b56:	4463      	add	r3, ip
 8004b58:	881a      	ldrh	r2, [r3, #0]
 8004b5a:	211a      	movs	r1, #26
 8004b5c:	187b      	adds	r3, r7, r1
 8004b5e:	0592      	lsls	r2, r2, #22
 8004b60:	0d92      	lsrs	r2, r2, #22
 8004b62:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d307      	bcc.n	8004b80 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	619a      	str	r2, [r3, #24]
 8004b7e:	e002      	b.n	8004b86 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d121      	bne.n	8004bd2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	001a      	movs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	18d3      	adds	r3, r2, r3
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	201e      	movs	r0, #30
 8004ba2:	183b      	adds	r3, r7, r0
 8004ba4:	4927      	ldr	r1, [pc, #156]	; (8004c44 <HAL_PCD_EP_DB_Receive+0x224>)
 8004ba6:	400a      	ands	r2, r1
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	183b      	adds	r3, r7, r0
 8004bac:	183a      	adds	r2, r7, r0
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	0189      	lsls	r1, r1, #6
 8004bb4:	404a      	eors	r2, r1
 8004bb6:	801a      	strh	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	001a      	movs	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	18d3      	adds	r3, r2, r3
 8004bc6:	183a      	adds	r2, r7, r0
 8004bc8:	8812      	ldrh	r2, [r2, #0]
 8004bca:	491f      	ldr	r1, [pc, #124]	; (8004c48 <HAL_PCD_EP_DB_Receive+0x228>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	b292      	uxth	r2, r2
 8004bd0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004bd2:	1dbb      	adds	r3, r7, #6
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d11a      	bne.n	8004c12 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	001a      	movs	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	201c      	movs	r0, #28
 8004bf0:	183b      	adds	r3, r7, r0
 8004bf2:	4916      	ldr	r1, [pc, #88]	; (8004c4c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	18d3      	adds	r3, r2, r3
 8004c06:	183a      	adds	r2, r7, r0
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	4911      	ldr	r1, [pc, #68]	; (8004c50 <HAL_PCD_EP_DB_Receive+0x230>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004c12:	241a      	movs	r4, #26
 8004c14:	193b      	adds	r3, r7, r4
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	6959      	ldr	r1, [r3, #20]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	895a      	ldrh	r2, [r3, #10]
 8004c28:	193b      	adds	r3, r7, r4
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f005 f9fe 	bl	800a02c <USB_ReadPMA>
    }
  }

  return count;
 8004c30:	231a      	movs	r3, #26
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	881b      	ldrh	r3, [r3, #0]
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b009      	add	sp, #36	; 0x24
 8004c3c:	bd90      	pop	{r4, r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	00000402 	.word	0x00000402
 8004c44:	ffffbf8f 	.word	0xffffbf8f
 8004c48:	ffff8080 	.word	0xffff8080
 8004c4c:	ffff8f8f 	.word	0xffff8f8f
 8004c50:	ffff80c0 	.word	0xffff80c0
 8004c54:	00000406 	.word	0x00000406

08004c58 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b094      	sub	sp, #80	; 0x50
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	1dbb      	adds	r3, r7, #6
 8004c64:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c66:	1dbb      	adds	r3, r7, #6
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	2240      	movs	r2, #64	; 0x40
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004c70:	e12e      	b.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x278>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2250      	movs	r2, #80	; 0x50
 8004c78:	5a9b      	ldrh	r3, [r3, r2]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	18d2      	adds	r2, r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	4abb      	ldr	r2, [pc, #748]	; (8004f7c <HAL_PCD_EP_DB_Transmit+0x324>)
 8004c8e:	4694      	mov	ip, r2
 8004c90:	4463      	add	r3, ip
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	2148      	movs	r1, #72	; 0x48
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	0592      	lsls	r2, r2, #22
 8004c9a:	0d92      	lsrs	r2, r2, #22
 8004c9c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d907      	bls.n	8004cba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	187b      	adds	r3, r7, r1
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	619a      	str	r2, [r3, #24]
 8004cb8:	e002      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d129      	bne.n	8004d1c <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	0011      	movs	r1, r2
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f007 f98d 	bl	800bff0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cd6:	1dbb      	adds	r3, r7, #6
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d100      	bne.n	8004ce4 <HAL_PCD_EP_DB_Transmit+0x8c>
 8004ce2:	e230      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	001a      	movs	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	2016      	movs	r0, #22
 8004cf8:	183b      	adds	r3, r7, r0
 8004cfa:	49a1      	ldr	r1, [pc, #644]	; (8004f80 <HAL_PCD_EP_DB_Transmit+0x328>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	001a      	movs	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	183a      	adds	r2, r7, r0
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	499c      	ldr	r1, [pc, #624]	; (8004f84 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8004d14:	430a      	orrs	r2, r1
 8004d16:	b292      	uxth	r2, r2
 8004d18:	801a      	strh	r2, [r3, #0]
 8004d1a:	e214      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d1c:	1dbb      	adds	r3, r7, #6
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	01db      	lsls	r3, r3, #7
 8004d24:	4013      	ands	r3, r2
 8004d26:	d01a      	beq.n	8004d5e <HAL_PCD_EP_DB_Transmit+0x106>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	18d3      	adds	r3, r2, r3
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	202a      	movs	r0, #42	; 0x2a
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	4990      	ldr	r1, [pc, #576]	; (8004f80 <HAL_PCD_EP_DB_Transmit+0x328>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	801a      	strh	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	183a      	adds	r2, r7, r0
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	498b      	ldr	r1, [pc, #556]	; (8004f84 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2224      	movs	r2, #36	; 0x24
 8004d62:	5c9b      	ldrb	r3, [r3, r2]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d000      	beq.n	8004d6a <HAL_PCD_EP_DB_Transmit+0x112>
 8004d68:	e1ed      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	2148      	movs	r1, #72	; 0x48
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	18d2      	adds	r2, r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	18d2      	adds	r2, r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d309      	bcc.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x150>
        {
          len = ep->maxpacket;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da0:	1ad2      	subs	r2, r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	621a      	str	r2, [r3, #32]
 8004da6:	e016      	b.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else if (ep->xfer_len_db == 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <HAL_PCD_EP_DB_Transmit+0x16a>
        {
          len = TxByteNbre;
 8004db0:	2348      	movs	r3, #72	; 0x48
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	5499      	strb	r1, [r3, r2]
 8004dc0:	e009      	b.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d150      	bne.n	8004e80 <HAL_PCD_EP_DB_Transmit+0x228>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2250      	movs	r2, #80	; 0x50
 8004dea:	5a9b      	ldrh	r3, [r3, r2]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	001a      	movs	r2, r3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00da      	lsls	r2, r3, #3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	18d3      	adds	r3, r2, r3
 8004e00:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <HAL_PCD_EP_DB_Transmit+0x324>)
 8004e02:	4694      	mov	ip, r2
 8004e04:	4463      	add	r3, ip
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d110      	bne.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4a5c      	ldr	r2, [pc, #368]	; (8004f88 <HAL_PCD_EP_DB_Transmit+0x330>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	801a      	strh	r2, [r3, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4a59      	ldr	r2, [pc, #356]	; (8004f8c <HAL_PCD_EP_DB_Transmit+0x334>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e044      	b.n	8004eba <HAL_PCD_EP_DB_Transmit+0x262>
 8004e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e32:	2b3e      	cmp	r3, #62	; 0x3e
 8004e34:	d810      	bhi.n	8004e58 <HAL_PCD_EP_DB_Transmit+0x200>
 8004e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	d002      	beq.n	8004e4a <HAL_PCD_EP_DB_Transmit+0x1f2>
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	3301      	adds	r3, #1
 8004e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	029b      	lsls	r3, r3, #10
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e030      	b.n	8004eba <HAL_PCD_EP_DB_Transmit+0x262>
 8004e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e60:	221f      	movs	r2, #31
 8004e62:	4013      	ands	r3, r2
 8004e64:	d102      	bne.n	8004e6c <HAL_PCD_EP_DB_Transmit+0x214>
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	029b      	lsls	r3, r3, #10
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4a45      	ldr	r2, [pc, #276]	; (8004f8c <HAL_PCD_EP_DB_Transmit+0x334>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	e01c      	b.n	8004eba <HAL_PCD_EP_DB_Transmit+0x262>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d118      	bne.n	8004eba <HAL_PCD_EP_DB_Transmit+0x262>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2250      	movs	r2, #80	; 0x50
 8004e94:	5a9b      	ldrh	r3, [r3, r2]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	001a      	movs	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	00da      	lsls	r2, r3, #3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	18d3      	adds	r3, r2, r3
 8004eaa:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <HAL_PCD_EP_DB_Transmit+0x324>)
 8004eac:	4694      	mov	ip, r2
 8004eae:	4463      	add	r3, ip
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6959      	ldr	r1, [r3, #20]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	891a      	ldrh	r2, [r3, #8]
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f005 f86b 	bl	8009fa4 <USB_WritePMA>
 8004ece:	e13a      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2250      	movs	r2, #80	; 0x50
 8004ed6:	5a9b      	ldrh	r3, [r3, r2]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	001a      	movs	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	18d2      	adds	r2, r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	18d3      	adds	r3, r2, r3
 8004eea:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <HAL_PCD_EP_DB_Transmit+0x338>)
 8004eec:	4694      	mov	ip, r2
 8004eee:	4463      	add	r3, ip
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	2148      	movs	r1, #72	; 0x48
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	0592      	lsls	r2, r2, #22
 8004ef8:	0d92      	lsrs	r2, r2, #22
 8004efa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d307      	bcc.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	619a      	str	r2, [r3, #24]
 8004f16:	e002      	b.n	8004f1e <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d136      	bne.n	8004f94 <HAL_PCD_EP_DB_Transmit+0x33c>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	0011      	movs	r1, r2
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f007 f85e 	bl	800bff0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f34:	1dbb      	adds	r3, r7, #6
 8004f36:	881a      	ldrh	r2, [r3, #0]
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d000      	beq.n	8004f42 <HAL_PCD_EP_DB_Transmit+0x2ea>
 8004f40:	e101      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	001a      	movs	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	18d3      	adds	r3, r2, r3
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	204a      	movs	r0, #74	; 0x4a
 8004f56:	183b      	adds	r3, r7, r0
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <HAL_PCD_EP_DB_Transmit+0x328>)
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	801a      	strh	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	001a      	movs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	18d3      	adds	r3, r2, r3
 8004f6c:	183a      	adds	r2, r7, r0
 8004f6e:	8812      	ldrh	r2, [r2, #0]
 8004f70:	4904      	ldr	r1, [pc, #16]	; (8004f84 <HAL_PCD_EP_DB_Transmit+0x32c>)
 8004f72:	430a      	orrs	r2, r1
 8004f74:	b292      	uxth	r2, r2
 8004f76:	801a      	strh	r2, [r3, #0]
 8004f78:	e0e5      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	00000402 	.word	0x00000402
 8004f80:	ffff8f8f 	.word	0xffff8f8f
 8004f84:	ffffc080 	.word	0xffffc080
 8004f88:	ffff83ff 	.word	0xffff83ff
 8004f8c:	ffff8000 	.word	0xffff8000
 8004f90:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f94:	1dbb      	adds	r3, r7, #6
 8004f96:	881a      	ldrh	r2, [r3, #0]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	01db      	lsls	r3, r3, #7
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d11a      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x37e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	18d3      	adds	r3, r2, r3
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	2032      	movs	r0, #50	; 0x32
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	497a      	ldr	r1, [pc, #488]	; (80051a0 <HAL_PCD_EP_DB_Transmit+0x548>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	18d3      	adds	r3, r2, r3
 8004fca:	183a      	adds	r2, r7, r0
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	4975      	ldr	r1, [pc, #468]	; (80051a4 <HAL_PCD_EP_DB_Transmit+0x54c>)
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2224      	movs	r2, #36	; 0x24
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d000      	beq.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x38a>
 8004fe0:	e0b1      	b.n	8005146 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	2148      	movs	r1, #72	; 0x48
 8004fe8:	187b      	adds	r3, r7, r1
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	18d2      	adds	r2, r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	187b      	adds	r3, r7, r1
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	18d2      	adds	r2, r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	429a      	cmp	r2, r3
 800500a:	d309      	bcc.n	8005020 <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	1ad2      	subs	r2, r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	621a      	str	r2, [r3, #32]
 800501e:	e016      	b.n	800504e <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else if (ep->xfer_len_db == 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <HAL_PCD_EP_DB_Transmit+0x3e2>
        {
          len = TxByteNbre;
 8005028:	2348      	movs	r3, #72	; 0x48
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2224      	movs	r2, #36	; 0x24
 8005034:	2100      	movs	r1, #0
 8005036:	5499      	strb	r1, [r3, r2]
 8005038:	e009      	b.n	800504e <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else
        {
          len = ep->xfer_len_db;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d150      	bne.n	80050fe <HAL_PCD_EP_DB_Transmit+0x4a6>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	63bb      	str	r3, [r7, #56]	; 0x38
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2250      	movs	r2, #80	; 0x50
 8005068:	5a9b      	ldrh	r3, [r3, r2]
 800506a:	b29b      	uxth	r3, r3
 800506c:	001a      	movs	r2, r3
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	189b      	adds	r3, r3, r2
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	00da      	lsls	r2, r3, #3
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	18d3      	adds	r3, r2, r3
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <HAL_PCD_EP_DB_Transmit+0x550>)
 8005080:	4694      	mov	ip, r2
 8005082:	4463      	add	r3, ip
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
 8005086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <HAL_PCD_EP_DB_Transmit+0x456>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	4a46      	ldr	r2, [pc, #280]	; (80051ac <HAL_PCD_EP_DB_Transmit+0x554>)
 8005094:	4013      	ands	r3, r2
 8005096:	b29a      	uxth	r2, r3
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4a43      	ldr	r2, [pc, #268]	; (80051b0 <HAL_PCD_EP_DB_Transmit+0x558>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e041      	b.n	8005132 <HAL_PCD_EP_DB_Transmit+0x4da>
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	2b3e      	cmp	r3, #62	; 0x3e
 80050b2:	d810      	bhi.n	80050d6 <HAL_PCD_EP_DB_Transmit+0x47e>
 80050b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050bc:	2201      	movs	r2, #1
 80050be:	4013      	ands	r3, r2
 80050c0:	d002      	beq.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x470>
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	3301      	adds	r3, #1
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e02d      	b.n	8005132 <HAL_PCD_EP_DB_Transmit+0x4da>
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050de:	221f      	movs	r2, #31
 80050e0:	4013      	ands	r3, r2
 80050e2:	d102      	bne.n	80050ea <HAL_PCD_EP_DB_Transmit+0x492>
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	3b01      	subs	r3, #1
 80050e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	029b      	lsls	r3, r3, #10
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_PCD_EP_DB_Transmit+0x558>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	e019      	b.n	8005132 <HAL_PCD_EP_DB_Transmit+0x4da>
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d115      	bne.n	8005132 <HAL_PCD_EP_DB_Transmit+0x4da>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2250      	movs	r2, #80	; 0x50
 800510c:	5a9b      	ldrh	r3, [r3, r2]
 800510e:	b29b      	uxth	r3, r3
 8005110:	001a      	movs	r2, r3
 8005112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005114:	189b      	adds	r3, r3, r2
 8005116:	643b      	str	r3, [r7, #64]	; 0x40
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	00da      	lsls	r2, r3, #3
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005120:	18d3      	adds	r3, r2, r3
 8005122:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <HAL_PCD_EP_DB_Transmit+0x550>)
 8005124:	4694      	mov	ip, r2
 8005126:	4463      	add	r3, ip
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512c:	b29a      	uxth	r2, r3
 800512e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005130:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6959      	ldr	r1, [r3, #20]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	895a      	ldrh	r2, [r3, #10]
 800513e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005140:	b29b      	uxth	r3, r3
 8005142:	f004 ff2f 	bl	8009fa4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	001a      	movs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	18d3      	adds	r3, r2, r3
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29a      	uxth	r2, r3
 8005158:	2014      	movs	r0, #20
 800515a:	183b      	adds	r3, r7, r0
 800515c:	4915      	ldr	r1, [pc, #84]	; (80051b4 <HAL_PCD_EP_DB_Transmit+0x55c>)
 800515e:	400a      	ands	r2, r1
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	183b      	adds	r3, r7, r0
 8005164:	183a      	adds	r2, r7, r0
 8005166:	8812      	ldrh	r2, [r2, #0]
 8005168:	2110      	movs	r1, #16
 800516a:	404a      	eors	r2, r1
 800516c:	801a      	strh	r2, [r3, #0]
 800516e:	183b      	adds	r3, r7, r0
 8005170:	183a      	adds	r2, r7, r0
 8005172:	8812      	ldrh	r2, [r2, #0]
 8005174:	2120      	movs	r1, #32
 8005176:	404a      	eors	r2, r1
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	001a      	movs	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	18d3      	adds	r3, r2, r3
 8005188:	183a      	adds	r2, r7, r0
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	490a      	ldr	r1, [pc, #40]	; (80051b8 <HAL_PCD_EP_DB_Transmit+0x560>)
 800518e:	430a      	orrs	r2, r1
 8005190:	b292      	uxth	r2, r2
 8005192:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b014      	add	sp, #80	; 0x50
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	ffff8f8f 	.word	0xffff8f8f
 80051a4:	ffffc080 	.word	0xffffc080
 80051a8:	00000406 	.word	0x00000406
 80051ac:	ffff83ff 	.word	0xffff83ff
 80051b0:	ffff8000 	.word	0xffff8000
 80051b4:	ffff8fbf 	.word	0xffff8fbf
 80051b8:	ffff8080 	.word	0xffff8080

080051bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	0008      	movs	r0, r1
 80051c6:	0011      	movs	r1, r2
 80051c8:	607b      	str	r3, [r7, #4]
 80051ca:	240a      	movs	r4, #10
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	1c02      	adds	r2, r0, #0
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	2308      	movs	r3, #8
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	1c0a      	adds	r2, r1, #0
 80051d8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051da:	0021      	movs	r1, r4
 80051dc:	187b      	adds	r3, r7, r1
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	2207      	movs	r2, #7
 80051f0:	4013      	ands	r3, r2
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	0013      	movs	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	e00b      	b.n	800521c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005204:	230a      	movs	r3, #10
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	0013      	movs	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	189b      	adds	r3, r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	3369      	adds	r3, #105	; 0x69
 8005214:	33ff      	adds	r3, #255	; 0xff
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	18d3      	adds	r3, r2, r3
 800521a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800521c:	2308      	movs	r3, #8
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	b29a      	uxth	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	80da      	strh	r2, [r3, #6]
 8005234:	e00b      	b.n	800524e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2201      	movs	r2, #1
 800523a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	b29a      	uxth	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	0c1b      	lsrs	r3, r3, #16
 8005248:	b29a      	uxth	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b007      	add	sp, #28
 8005256:	bd90      	pop	{r4, r7, pc}

08005258 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	23ba      	movs	r3, #186	; 0xba
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	2101      	movs	r1, #1
 800526e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	23b8      	movs	r3, #184	; 0xb8
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	2100      	movs	r1, #0
 8005278:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2254      	movs	r2, #84	; 0x54
 800527e:	5a9b      	ldrh	r3, [r3, r2]
 8005280:	b29b      	uxth	r3, r3
 8005282:	2201      	movs	r2, #1
 8005284:	4313      	orrs	r3, r2
 8005286:	b299      	uxth	r1, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2254      	movs	r2, #84	; 0x54
 800528c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2254      	movs	r2, #84	; 0x54
 8005292:	5a9b      	ldrh	r3, [r3, r2]
 8005294:	b29b      	uxth	r3, r3
 8005296:	2202      	movs	r2, #2
 8005298:	4313      	orrs	r3, r2
 800529a:	b299      	uxth	r1, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2254      	movs	r2, #84	; 0x54
 80052a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	000a      	movs	r2, r1
 80052b6:	1cfb      	adds	r3, r7, #3
 80052b8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b002      	add	sp, #8
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e305      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	4013      	ands	r3, r2
 80052de:	d100      	bne.n	80052e2 <HAL_RCC_OscConfig+0x1e>
 80052e0:	e08d      	b.n	80053fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80052e2:	4bc5      	ldr	r3, [pc, #788]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	220c      	movs	r2, #12
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d00e      	beq.n	800530c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052ee:	4bc2      	ldr	r3, [pc, #776]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	220c      	movs	r2, #12
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d116      	bne.n	8005328 <HAL_RCC_OscConfig+0x64>
 80052fa:	4bbf      	ldr	r3, [pc, #764]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	23c0      	movs	r3, #192	; 0xc0
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	401a      	ands	r2, r3
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	025b      	lsls	r3, r3, #9
 8005308:	429a      	cmp	r2, r3
 800530a:	d10d      	bne.n	8005328 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	4bba      	ldr	r3, [pc, #744]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	4013      	ands	r3, r2
 8005316:	d100      	bne.n	800531a <HAL_RCC_OscConfig+0x56>
 8005318:	e070      	b.n	80053fc <HAL_RCC_OscConfig+0x138>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d000      	beq.n	8005324 <HAL_RCC_OscConfig+0x60>
 8005322:	e06b      	b.n	80053fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e2dc      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <HAL_RCC_OscConfig+0x7c>
 8005330:	4bb1      	ldr	r3, [pc, #708]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4bb0      	ldr	r3, [pc, #704]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	0249      	lsls	r1, r1, #9
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e02f      	b.n	80053a0 <HAL_RCC_OscConfig+0xdc>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10c      	bne.n	8005362 <HAL_RCC_OscConfig+0x9e>
 8005348:	4bab      	ldr	r3, [pc, #684]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	4baa      	ldr	r3, [pc, #680]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800534e:	49ab      	ldr	r1, [pc, #684]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005350:	400a      	ands	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	4ba8      	ldr	r3, [pc, #672]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4ba7      	ldr	r3, [pc, #668]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800535a:	49a9      	ldr	r1, [pc, #676]	; (8005600 <HAL_RCC_OscConfig+0x33c>)
 800535c:	400a      	ands	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e01e      	b.n	80053a0 <HAL_RCC_OscConfig+0xdc>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d10e      	bne.n	8005388 <HAL_RCC_OscConfig+0xc4>
 800536a:	4ba3      	ldr	r3, [pc, #652]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4ba2      	ldr	r3, [pc, #648]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	02c9      	lsls	r1, r1, #11
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	4b9f      	ldr	r3, [pc, #636]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b9e      	ldr	r3, [pc, #632]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	0249      	lsls	r1, r1, #9
 8005382:	430a      	orrs	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xdc>
 8005388:	4b9b      	ldr	r3, [pc, #620]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b9a      	ldr	r3, [pc, #616]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800538e:	499b      	ldr	r1, [pc, #620]	; (80055fc <HAL_RCC_OscConfig+0x338>)
 8005390:	400a      	ands	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	4b98      	ldr	r3, [pc, #608]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b97      	ldr	r3, [pc, #604]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800539a:	4999      	ldr	r1, [pc, #612]	; (8005600 <HAL_RCC_OscConfig+0x33c>)
 800539c:	400a      	ands	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d014      	beq.n	80053d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f7fe f95c 	bl	8003664 <HAL_GetTick>
 80053ac:	0003      	movs	r3, r0
 80053ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b2:	f7fe f957 	bl	8003664 <HAL_GetTick>
 80053b6:	0002      	movs	r2, r0
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b64      	cmp	r3, #100	; 0x64
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e28e      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c4:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	4013      	ands	r3, r2
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0xee>
 80053d0:	e015      	b.n	80053fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fe f947 	bl	8003664 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fe f942 	bl	8003664 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	; 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e279      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	4b82      	ldr	r3, [pc, #520]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	4013      	ands	r3, r2
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x118>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2202      	movs	r2, #2
 8005404:	4013      	ands	r3, r2
 8005406:	d100      	bne.n	800540a <HAL_RCC_OscConfig+0x146>
 8005408:	e06c      	b.n	80054e4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800540a:	4b7b      	ldr	r3, [pc, #492]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	220c      	movs	r2, #12
 8005410:	4013      	ands	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005414:	4b78      	ldr	r3, [pc, #480]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	220c      	movs	r2, #12
 800541a:	4013      	ands	r3, r2
 800541c:	2b08      	cmp	r3, #8
 800541e:	d11f      	bne.n	8005460 <HAL_RCC_OscConfig+0x19c>
 8005420:	4b75      	ldr	r3, [pc, #468]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	23c0      	movs	r3, #192	; 0xc0
 8005426:	025b      	lsls	r3, r3, #9
 8005428:	401a      	ands	r2, r3
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	429a      	cmp	r2, r3
 8005430:	d116      	bne.n	8005460 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005432:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d005      	beq.n	8005448 <HAL_RCC_OscConfig+0x184>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e24c      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005448:	4b6b      	ldr	r3, [pc, #428]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	22f8      	movs	r2, #248	; 0xf8
 800544e:	4393      	bics	r3, r2
 8005450:	0019      	movs	r1, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00da      	lsls	r2, r3, #3
 8005458:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	e041      	b.n	80054e4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d024      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005468:	4b63      	ldr	r3, [pc, #396]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b62      	ldr	r3, [pc, #392]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800546e:	2101      	movs	r1, #1
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fe f8f6 	bl	8003664 <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547e:	f7fe f8f1 	bl	8003664 <HAL_GetTick>
 8005482:	0002      	movs	r2, r0
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e228      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005490:	4b59      	ldr	r3, [pc, #356]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2202      	movs	r2, #2
 8005496:	4013      	ands	r3, r2
 8005498:	d0f1      	beq.n	800547e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800549a:	4b57      	ldr	r3, [pc, #348]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	22f8      	movs	r2, #248	; 0xf8
 80054a0:	4393      	bics	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	00da      	lsls	r2, r3, #3
 80054aa:	4b53      	ldr	r3, [pc, #332]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e018      	b.n	80054e4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054b2:	4b51      	ldr	r3, [pc, #324]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054b8:	2101      	movs	r1, #1
 80054ba:	438a      	bics	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054be:	f7fe f8d1 	bl	8003664 <HAL_GetTick>
 80054c2:	0003      	movs	r3, r0
 80054c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054c8:	f7fe f8cc 	bl	8003664 <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e203      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2202      	movs	r2, #2
 80054e0:	4013      	ands	r3, r2
 80054e2:	d1f1      	bne.n	80054c8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2208      	movs	r2, #8
 80054ea:	4013      	ands	r3, r2
 80054ec:	d036      	beq.n	800555c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d019      	beq.n	800552a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054f6:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fa:	4b3f      	ldr	r3, [pc, #252]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80054fc:	2101      	movs	r1, #1
 80054fe:	430a      	orrs	r2, r1
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005502:	f7fe f8af 	bl	8003664 <HAL_GetTick>
 8005506:	0003      	movs	r3, r0
 8005508:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800550c:	f7fe f8aa 	bl	8003664 <HAL_GetTick>
 8005510:	0002      	movs	r2, r0
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1e1      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2202      	movs	r2, #2
 8005524:	4013      	ands	r3, r2
 8005526:	d0f1      	beq.n	800550c <HAL_RCC_OscConfig+0x248>
 8005528:	e018      	b.n	800555c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800552a:	4b33      	ldr	r3, [pc, #204]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800552c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552e:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005530:	2101      	movs	r1, #1
 8005532:	438a      	bics	r2, r1
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005536:	f7fe f895 	bl	8003664 <HAL_GetTick>
 800553a:	0003      	movs	r3, r0
 800553c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005540:	f7fe f890 	bl	8003664 <HAL_GetTick>
 8005544:	0002      	movs	r2, r0
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e1c7      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005552:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2202      	movs	r2, #2
 8005558:	4013      	ands	r3, r2
 800555a:	d1f1      	bne.n	8005540 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2204      	movs	r2, #4
 8005562:	4013      	ands	r3, r2
 8005564:	d100      	bne.n	8005568 <HAL_RCC_OscConfig+0x2a4>
 8005566:	e0b5      	b.n	80056d4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005568:	201f      	movs	r0, #31
 800556a:	183b      	adds	r3, r7, r0
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005572:	69da      	ldr	r2, [r3, #28]
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	055b      	lsls	r3, r3, #21
 8005578:	4013      	ands	r3, r2
 800557a:	d110      	bne.n	800559e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557c:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	0549      	lsls	r1, r1, #21
 8005586:	430a      	orrs	r2, r1
 8005588:	61da      	str	r2, [r3, #28]
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	2380      	movs	r3, #128	; 0x80
 8005590:	055b      	lsls	r3, r3, #21
 8005592:	4013      	ands	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005598:	183b      	adds	r3, r7, r0
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559e:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCC_OscConfig+0x340>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4013      	ands	r3, r2
 80055a8:	d11a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055aa:	4b16      	ldr	r3, [pc, #88]	; (8005604 <HAL_RCC_OscConfig+0x340>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_RCC_OscConfig+0x340>)
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	0049      	lsls	r1, r1, #1
 80055b4:	430a      	orrs	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fe f854 	bl	8003664 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7fe f84f 	bl	8003664 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b64      	cmp	r3, #100	; 0x64
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e186      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCC_OscConfig+0x340>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10f      	bne.n	8005608 <HAL_RCC_OscConfig+0x344>
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80055ea:	6a1a      	ldr	r2, [r3, #32]
 80055ec:	4b02      	ldr	r3, [pc, #8]	; (80055f8 <HAL_RCC_OscConfig+0x334>)
 80055ee:	2101      	movs	r1, #1
 80055f0:	430a      	orrs	r2, r1
 80055f2:	621a      	str	r2, [r3, #32]
 80055f4:	e036      	b.n	8005664 <HAL_RCC_OscConfig+0x3a0>
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40021000 	.word	0x40021000
 80055fc:	fffeffff 	.word	0xfffeffff
 8005600:	fffbffff 	.word	0xfffbffff
 8005604:	40007000 	.word	0x40007000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10c      	bne.n	800562a <HAL_RCC_OscConfig+0x366>
 8005610:	4bb6      	ldr	r3, [pc, #728]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	4bb5      	ldr	r3, [pc, #724]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005616:	2101      	movs	r1, #1
 8005618:	438a      	bics	r2, r1
 800561a:	621a      	str	r2, [r3, #32]
 800561c:	4bb3      	ldr	r3, [pc, #716]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800561e:	6a1a      	ldr	r2, [r3, #32]
 8005620:	4bb2      	ldr	r3, [pc, #712]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005622:	2104      	movs	r1, #4
 8005624:	438a      	bics	r2, r1
 8005626:	621a      	str	r2, [r3, #32]
 8005628:	e01c      	b.n	8005664 <HAL_RCC_OscConfig+0x3a0>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b05      	cmp	r3, #5
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x388>
 8005632:	4bae      	ldr	r3, [pc, #696]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	4bad      	ldr	r3, [pc, #692]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005638:	2104      	movs	r1, #4
 800563a:	430a      	orrs	r2, r1
 800563c:	621a      	str	r2, [r3, #32]
 800563e:	4bab      	ldr	r3, [pc, #684]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	4baa      	ldr	r3, [pc, #680]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005644:	2101      	movs	r1, #1
 8005646:	430a      	orrs	r2, r1
 8005648:	621a      	str	r2, [r3, #32]
 800564a:	e00b      	b.n	8005664 <HAL_RCC_OscConfig+0x3a0>
 800564c:	4ba7      	ldr	r3, [pc, #668]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	4ba6      	ldr	r3, [pc, #664]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	621a      	str	r2, [r3, #32]
 8005658:	4ba4      	ldr	r3, [pc, #656]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	4ba3      	ldr	r3, [pc, #652]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800565e:	2104      	movs	r1, #4
 8005660:	438a      	bics	r2, r1
 8005662:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d014      	beq.n	8005696 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566c:	f7fd fffa 	bl	8003664 <HAL_GetTick>
 8005670:	0003      	movs	r3, r0
 8005672:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	e009      	b.n	800568a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fd fff5 	bl	8003664 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	4a9b      	ldr	r2, [pc, #620]	; (80058f0 <HAL_RCC_OscConfig+0x62c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e12b      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568a:	4b98      	ldr	r3, [pc, #608]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	2202      	movs	r2, #2
 8005690:	4013      	ands	r3, r2
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x3b2>
 8005694:	e013      	b.n	80056be <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005696:	f7fd ffe5 	bl	8003664 <HAL_GetTick>
 800569a:	0003      	movs	r3, r0
 800569c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569e:	e009      	b.n	80056b4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a0:	f7fd ffe0 	bl	8003664 <HAL_GetTick>
 80056a4:	0002      	movs	r2, r0
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	4a91      	ldr	r2, [pc, #580]	; (80058f0 <HAL_RCC_OscConfig+0x62c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e116      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b4:	4b8d      	ldr	r3, [pc, #564]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	2202      	movs	r2, #2
 80056ba:	4013      	ands	r3, r2
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056be:	231f      	movs	r3, #31
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c8:	4b88      	ldr	r3, [pc, #544]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	4b87      	ldr	r3, [pc, #540]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056ce:	4989      	ldr	r1, [pc, #548]	; (80058f4 <HAL_RCC_OscConfig+0x630>)
 80056d0:	400a      	ands	r2, r1
 80056d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2210      	movs	r2, #16
 80056da:	4013      	ands	r3, r2
 80056dc:	d063      	beq.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d12a      	bne.n	800573c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056e6:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ea:	4b80      	ldr	r3, [pc, #512]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056ec:	2104      	movs	r1, #4
 80056ee:	430a      	orrs	r2, r1
 80056f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80056f2:	4b7e      	ldr	r3, [pc, #504]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f6:	4b7d      	ldr	r3, [pc, #500]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80056f8:	2101      	movs	r1, #1
 80056fa:	430a      	orrs	r2, r1
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fd ffb1 	bl	8003664 <HAL_GetTick>
 8005702:	0003      	movs	r3, r0
 8005704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005708:	f7fd ffac 	bl	8003664 <HAL_GetTick>
 800570c:	0002      	movs	r2, r0
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0e3      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800571a:	4b74      	ldr	r3, [pc, #464]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800571c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571e:	2202      	movs	r2, #2
 8005720:	4013      	ands	r3, r2
 8005722:	d0f1      	beq.n	8005708 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005724:	4b71      	ldr	r3, [pc, #452]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	22f8      	movs	r2, #248	; 0xf8
 800572a:	4393      	bics	r3, r2
 800572c:	0019      	movs	r1, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	00da      	lsls	r2, r3, #3
 8005734:	4b6d      	ldr	r3, [pc, #436]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005736:	430a      	orrs	r2, r1
 8005738:	635a      	str	r2, [r3, #52]	; 0x34
 800573a:	e034      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	3305      	adds	r3, #5
 8005742:	d111      	bne.n	8005768 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005744:	4b69      	ldr	r3, [pc, #420]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005748:	4b68      	ldr	r3, [pc, #416]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800574a:	2104      	movs	r1, #4
 800574c:	438a      	bics	r2, r1
 800574e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005750:	4b66      	ldr	r3, [pc, #408]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	22f8      	movs	r2, #248	; 0xf8
 8005756:	4393      	bics	r3, r2
 8005758:	0019      	movs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	4b62      	ldr	r3, [pc, #392]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005762:	430a      	orrs	r2, r1
 8005764:	635a      	str	r2, [r3, #52]	; 0x34
 8005766:	e01e      	b.n	80057a6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005768:	4b60      	ldr	r3, [pc, #384]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800576a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576c:	4b5f      	ldr	r3, [pc, #380]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800576e:	2104      	movs	r1, #4
 8005770:	430a      	orrs	r2, r1
 8005772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005774:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	4b5c      	ldr	r3, [pc, #368]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800577a:	2101      	movs	r1, #1
 800577c:	438a      	bics	r2, r1
 800577e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005780:	f7fd ff70 	bl	8003664 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800578a:	f7fd ff6b 	bl	8003664 <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0a2      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800579c:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	2202      	movs	r2, #2
 80057a2:	4013      	ands	r3, r2
 80057a4:	d1f1      	bne.n	800578a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d100      	bne.n	80057b0 <HAL_RCC_OscConfig+0x4ec>
 80057ae:	e097      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b0:	4b4e      	ldr	r3, [pc, #312]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	220c      	movs	r2, #12
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d100      	bne.n	80057be <HAL_RCC_OscConfig+0x4fa>
 80057bc:	e06b      	b.n	8005896 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d14c      	bne.n	8005860 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b48      	ldr	r3, [pc, #288]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057cc:	494a      	ldr	r1, [pc, #296]	; (80058f8 <HAL_RCC_OscConfig+0x634>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd ff47 	bl	8003664 <HAL_GetTick>
 80057d6:	0003      	movs	r3, r0
 80057d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fd ff42 	bl	8003664 <HAL_GetTick>
 80057e0:	0002      	movs	r2, r0
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e079      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ee:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	049b      	lsls	r3, r3, #18
 80057f6:	4013      	ands	r3, r2
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fa:	4b3c      	ldr	r3, [pc, #240]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	220f      	movs	r2, #15
 8005800:	4393      	bics	r3, r2
 8005802:	0019      	movs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
 800580e:	4b37      	ldr	r3, [pc, #220]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_RCC_OscConfig+0x638>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	431a      	orrs	r2, r3
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005828:	4b30      	ldr	r3, [pc, #192]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	0449      	lsls	r1, r1, #17
 8005832:	430a      	orrs	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7fd ff15 	bl	8003664 <HAL_GetTick>
 800583a:	0003      	movs	r3, r0
 800583c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7fd ff10 	bl	8003664 <HAL_GetTick>
 8005844:	0002      	movs	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e047      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	049b      	lsls	r3, r3, #18
 800585a:	4013      	ands	r3, r2
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x57c>
 800585e:	e03f      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 8005866:	4924      	ldr	r1, [pc, #144]	; (80058f8 <HAL_RCC_OscConfig+0x634>)
 8005868:	400a      	ands	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586c:	f7fd fefa 	bl	8003664 <HAL_GetTick>
 8005870:	0003      	movs	r3, r0
 8005872:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005876:	f7fd fef5 	bl	8003664 <HAL_GetTick>
 800587a:	0002      	movs	r2, r0
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e02c      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005888:	4b18      	ldr	r3, [pc, #96]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	049b      	lsls	r3, r3, #18
 8005890:	4013      	ands	r3, r2
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x5b2>
 8005894:	e024      	b.n	80058e0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e01f      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <HAL_RCC_OscConfig+0x628>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	23c0      	movs	r3, #192	; 0xc0
 80058b2:	025b      	lsls	r3, r3, #9
 80058b4:	401a      	ands	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d10e      	bne.n	80058dc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	220f      	movs	r2, #15
 80058c2:	401a      	ands	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	23f0      	movs	r3, #240	; 0xf0
 80058d0:	039b      	lsls	r3, r3, #14
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b008      	add	sp, #32
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40021000 	.word	0x40021000
 80058f0:	00001388 	.word	0x00001388
 80058f4:	efffffff 	.word	0xefffffff
 80058f8:	feffffff 	.word	0xfeffffff
 80058fc:	ffc27fff 	.word	0xffc27fff

08005900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b3      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005914:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	4013      	ands	r3, r2
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d911      	bls.n	8005946 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b58      	ldr	r3, [pc, #352]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4393      	bics	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2201      	movs	r2, #1
 800593a:	4013      	ands	r3, r2
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e09a      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2202      	movs	r2, #2
 800594c:	4013      	ands	r3, r2
 800594e:	d015      	beq.n	800597c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2204      	movs	r2, #4
 8005956:	4013      	ands	r3, r2
 8005958:	d006      	beq.n	8005968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800595a:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	4b4a      	ldr	r3, [pc, #296]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005960:	21e0      	movs	r1, #224	; 0xe0
 8005962:	00c9      	lsls	r1, r1, #3
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	22f0      	movs	r2, #240	; 0xf0
 800596e:	4393      	bics	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	4013      	ands	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598e:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	4013      	ands	r3, r2
 8005998:	d114      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e06e      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059a6:	4b38      	ldr	r3, [pc, #224]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	2380      	movs	r3, #128	; 0x80
 80059ac:	049b      	lsls	r3, r3, #18
 80059ae:	4013      	ands	r3, r2
 80059b0:	d108      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e062      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2202      	movs	r2, #2
 80059bc:	4013      	ands	r3, r2
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e05b      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059c4:	4b30      	ldr	r3, [pc, #192]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	4393      	bics	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4b2d      	ldr	r3, [pc, #180]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059d8:	f7fd fe44 	bl	8003664 <HAL_GetTick>
 80059dc:	0003      	movs	r3, r0
 80059de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e0:	e009      	b.n	80059f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e2:	f7fd fe3f 	bl	8003664 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <HAL_RCC_ClockConfig+0x18c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e042      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	220c      	movs	r2, #12
 80059fc:	401a      	ands	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d1ec      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a08:	4b1e      	ldr	r3, [pc, #120]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	4013      	ands	r3, r2
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d211      	bcs.n	8005a3a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4393      	bics	r3, r2
 8005a1e:	0019      	movs	r1, r3
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a28:	4b16      	ldr	r3, [pc, #88]	; (8005a84 <HAL_RCC_ClockConfig+0x184>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e020      	b.n	8005a7c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	4013      	ands	r3, r2
 8005a42:	d009      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <HAL_RCC_ClockConfig+0x190>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a58:	f000 f820 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8005a5c:	0001      	movs	r1, r0
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_RCC_ClockConfig+0x188>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	220f      	movs	r2, #15
 8005a66:	4013      	ands	r3, r2
 8005a68:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <HAL_RCC_ClockConfig+0x194>)
 8005a6a:	5cd3      	ldrb	r3, [r2, r3]
 8005a6c:	000a      	movs	r2, r1
 8005a6e:	40da      	lsrs	r2, r3
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_RCC_ClockConfig+0x198>)
 8005a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a74:	2000      	movs	r0, #0
 8005a76:	f7fd fdaf 	bl	80035d8 <HAL_InitTick>
  
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b004      	add	sp, #16
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40022000 	.word	0x40022000
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	00001388 	.word	0x00001388
 8005a90:	fffff8ff 	.word	0xfffff8ff
 8005a94:	0800d6f4 	.word	0x0800d6f4
 8005a98:	200000c4 	.word	0x200000c4

08005a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b08f      	sub	sp, #60	; 0x3c
 8005aa0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005aa2:	2314      	movs	r3, #20
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	4a2c      	ldr	r2, [pc, #176]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ab4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ab6:	c313      	stmia	r3!, {r0, r1, r4}
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac8:	2300      	movs	r3, #0
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ad0:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	220c      	movs	r2, #12
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d002      	beq.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x4a>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d003      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x50>
 8005ae4:	e02f      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ae6:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005aea:	e02f      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	0c9b      	lsrs	r3, r3, #18
 8005af0:	220f      	movs	r2, #15
 8005af2:	4013      	ands	r3, r2
 8005af4:	2214      	movs	r2, #20
 8005af6:	18ba      	adds	r2, r7, r2
 8005af8:	5cd3      	ldrb	r3, [r2, r3]
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005afc:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	220f      	movs	r2, #15
 8005b02:	4013      	ands	r3, r2
 8005b04:	1d3a      	adds	r2, r7, #4
 8005b06:	5cd3      	ldrb	r3, [r2, r3]
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0c:	23c0      	movs	r3, #192	; 0xc0
 8005b0e:	025b      	lsls	r3, r3, #9
 8005b10:	401a      	ands	r2, r3
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	025b      	lsls	r3, r3, #9
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d109      	bne.n	8005b2e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b1c:	4811      	ldr	r0, [pc, #68]	; (8005b64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b1e:	f7fa fb05 	bl	800012c <__udivsi3>
 8005b22:	0003      	movs	r3, r0
 8005b24:	001a      	movs	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	4353      	muls	r3, r2
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b30:	480d      	ldr	r0, [pc, #52]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b32:	f7fa fafb 	bl	800012c <__udivsi3>
 8005b36:	0003      	movs	r3, r0
 8005b38:	001a      	movs	r2, r3
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	4353      	muls	r3, r2
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b44:	e002      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b4a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b00f      	add	sp, #60	; 0x3c
 8005b54:	bd90      	pop	{r4, r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	0800d248 	.word	0x0800d248
 8005b5c:	0800d258 	.word	0x0800d258
 8005b60:	40021000 	.word	0x40021000
 8005b64:	00f42400 	.word	0x00f42400
 8005b68:	007a1200 	.word	0x007a1200

08005b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	200000c4 	.word	0x200000c4

08005b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005b84:	f7ff fff2 	bl	8005b6c <HAL_RCC_GetHCLKFreq>
 8005b88:	0001      	movs	r1, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	2207      	movs	r2, #7
 8005b92:	4013      	ands	r3, r2
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	40d9      	lsrs	r1, r3
 8005b9a:	000b      	movs	r3, r1
}    
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	0800d704 	.word	0x0800d704

08005bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	025b      	lsls	r3, r3, #9
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d100      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005bc8:	e08e      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005bca:	2017      	movs	r0, #23
 8005bcc:	183b      	adds	r3, r7, r0
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bd2:	4b5f      	ldr	r3, [pc, #380]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	055b      	lsls	r3, r3, #21
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d110      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	4b5b      	ldr	r3, [pc, #364]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0549      	lsls	r1, r1, #21
 8005be8:	430a      	orrs	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
 8005bec:	4b58      	ldr	r3, [pc, #352]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	055b      	lsls	r3, r3, #21
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c00:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d11a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c0c:	4b51      	ldr	r3, [pc, #324]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	0049      	lsls	r1, r1, #1
 8005c16:	430a      	orrs	r2, r1
 8005c18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fd fd23 	bl	8003664 <HAL_GetTick>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c22:	e008      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fd fd1e 	bl	8003664 <HAL_GetTick>
 8005c28:	0002      	movs	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e087      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c42:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	23c0      	movs	r3, #192	; 0xc0
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d034      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	23c0      	movs	r3, #192	; 0xc0
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d02c      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c64:	4b3a      	ldr	r3, [pc, #232]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c6e:	4b38      	ldr	r3, [pc, #224]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	0249      	lsls	r1, r1, #9
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c82:	4936      	ldr	r1, [pc, #216]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c84:	400a      	ands	r2, r1
 8005c86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c88:	4b31      	ldr	r3, [pc, #196]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	4013      	ands	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fd fce5 	bl	8003664 <HAL_GetTick>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fd fce0 	bl	8003664 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e048      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	4b26      	ldr	r3, [pc, #152]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a25      	ldr	r2, [pc, #148]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cd2:	2317      	movs	r3, #23
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ce2:	4920      	ldr	r1, [pc, #128]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce4:	400a      	ands	r2, r1
 8005ce6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d009      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d02:	430a      	orrs	r2, r1
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	d009      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2210      	movs	r2, #16
 8005d16:	4393      	bics	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d20:	430a      	orrs	r2, r1
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	4393      	bics	r3, r2
 8005d38:	0019      	movs	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d40:	430a      	orrs	r2, r1
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b006      	add	sp, #24
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
 8005d58:	fffffcff 	.word	0xfffffcff
 8005d5c:	fffeffff 	.word	0xfffeffff
 8005d60:	00001388 	.word	0x00001388
 8005d64:	efffffff 	.word	0xefffffff

08005d68 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e081      	b.n	8005e7e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	7f5b      	ldrb	r3, [r3, #29]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7fc fc8b 	bl	80026a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	22ca      	movs	r2, #202	; 0xca
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2253      	movs	r2, #83	; 0x53
 8005da6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f9fb 	bl	80061a6 <RTC_EnterInitMode>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	22ff      	movs	r2, #255	; 0xff
 8005dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e05b      	b.n	8005e7e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	492d      	ldr	r1, [pc, #180]	; (8005e88 <HAL_RTC_Init+0x120>)
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6899      	ldr	r1, [r3, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68d2      	ldr	r2, [r2, #12]
 8005dfc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6919      	ldr	r1, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	041a      	lsls	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	438a      	bics	r2, r1
 8005e20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d10e      	bne.n	8005e4c <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 f98f 	bl	8006154 <HAL_RTC_WaitForSynchro>
 8005e36:	1e03      	subs	r3, r0, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e018      	b.n	8005e7e <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	490d      	ldr	r1, [pc, #52]	; (8005e8c <HAL_RTC_Init+0x124>)
 8005e58:	400a      	ands	r2, r1
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	22ff      	movs	r2, #255	; 0xff
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
  }
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b002      	add	sp, #8
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	ff8fffbf 	.word	0xff8fffbf
 8005e8c:	fffbffff 	.word	0xfffbffff

08005e90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	7f1b      	ldrb	r3, [r3, #28]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_RTC_SetTime+0x1c>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e0a5      	b.n	8005ff8 <HAL_RTC_SetTime+0x168>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d125      	bne.n	8005f0a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f000 f992 	bl	80061fe <RTC_ByteToBcd2>
 8005eda:	0003      	movs	r3, r0
 8005edc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 f98b 	bl	80061fe <RTC_ByteToBcd2>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005eec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	789b      	ldrb	r3, [r3, #2]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 f983 	bl	80061fe <RTC_ByteToBcd2>
 8005ef8:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005efa:	0022      	movs	r2, r4
 8005efc:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	e017      	b.n	8005f3a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	4013      	ands	r3, r2
 8005f14:	d102      	bne.n	8005f1c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f28:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f2e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	22ca      	movs	r2, #202	; 0xca
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2253      	movs	r2, #83	; 0x53
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 f92a 	bl	80061a6 <RTC_EnterInitMode>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	22ff      	movs	r2, #255	; 0xff
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2204      	movs	r2, #4
 8005f62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e044      	b.n	8005ff8 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4922      	ldr	r1, [pc, #136]	; (8006000 <HAL_RTC_SetTime+0x170>)
 8005f76:	400a      	ands	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	491f      	ldr	r1, [pc, #124]	; (8006004 <HAL_RTC_SetTime+0x174>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2180      	movs	r1, #128	; 0x80
 8005fae:	438a      	bics	r2, r1
 8005fb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d111      	bne.n	8005fe2 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f000 f8c7 	bl	8006154 <HAL_RTC_WaitForSynchro>
 8005fc6:	1e03      	subs	r3, r0, #0
 8005fc8:	d00b      	beq.n	8005fe2 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	22ff      	movs	r2, #255	; 0xff
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
  }
}
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	b007      	add	sp, #28
 8005ffe:	bd90      	pop	{r4, r7, pc}
 8006000:	007f7f7f 	.word	0x007f7f7f
 8006004:	fffbffff 	.word	0xfffbffff

08006008 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7f1b      	ldrb	r3, [r3, #28]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_RTC_SetDate+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e091      	b.n	8006148 <HAL_RTC_SetDate+0x140>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2202      	movs	r2, #2
 800602e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10e      	bne.n	8006054 <HAL_RTC_SetDate+0x4c>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	001a      	movs	r2, r3
 800603c:	2310      	movs	r3, #16
 800603e:	4013      	ands	r3, r2
 8006040:	d008      	beq.n	8006054 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2210      	movs	r2, #16
 8006048:	4393      	bics	r3, r2
 800604a:	b2db      	uxtb	r3, r3
 800604c:	330a      	adds	r3, #10
 800604e:	b2da      	uxtb	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d11c      	bne.n	8006094 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	0018      	movs	r0, r3
 8006060:	f000 f8cd 	bl	80061fe <RTC_ByteToBcd2>
 8006064:	0003      	movs	r3, r0
 8006066:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f8c6 	bl	80061fe <RTC_ByteToBcd2>
 8006072:	0003      	movs	r3, r0
 8006074:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006076:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	789b      	ldrb	r3, [r3, #2]
 800607c:	0018      	movs	r0, r3
 800607e:	f000 f8be 	bl	80061fe <RTC_ByteToBcd2>
 8006082:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006084:	0022      	movs	r2, r4
 8006086:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e00e      	b.n	80060b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	78db      	ldrb	r3, [r3, #3]
 8006098:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ca      	movs	r2, #202	; 0xca
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2253      	movs	r2, #83	; 0x53
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f86e 	bl	80061a6 <RTC_EnterInitMode>
 80060ca:	1e03      	subs	r3, r0, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	22ff      	movs	r2, #255	; 0xff
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2204      	movs	r2, #4
 80060da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e030      	b.n	8006148 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4918      	ldr	r1, [pc, #96]	; (8006150 <HAL_RTC_SetDate+0x148>)
 80060ee:	400a      	ands	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	438a      	bics	r2, r1
 8006100:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2220      	movs	r2, #32
 800610a:	4013      	ands	r3, r2
 800610c:	d111      	bne.n	8006132 <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f81f 	bl	8006154 <HAL_RTC_WaitForSynchro>
 8006116:	1e03      	subs	r3, r0, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2204      	movs	r2, #4
 8006126:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e00a      	b.n	8006148 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006146:	2300      	movs	r3, #0
  }
}
 8006148:	0018      	movs	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	b007      	add	sp, #28
 800614e:	bd90      	pop	{r4, r7, pc}
 8006150:	00ffff3f 	.word	0x00ffff3f

08006154 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	21a0      	movs	r1, #160	; 0xa0
 800616c:	438a      	bics	r2, r1
 800616e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006170:	f7fd fa78 	bl	8003664 <HAL_GetTick>
 8006174:	0003      	movs	r3, r0
 8006176:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006178:	e00a      	b.n	8006190 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800617a:	f7fd fa73 	bl	8003664 <HAL_GetTick>
 800617e:	0002      	movs	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	23fa      	movs	r3, #250	; 0xfa
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	429a      	cmp	r2, r3
 800618a:	d901      	bls.n	8006190 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e006      	b.n	800619e <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	4013      	ands	r3, r2
 800619a:	d0ee      	beq.n	800617a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b004      	add	sp, #16
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2240      	movs	r2, #64	; 0x40
 80061ba:	4013      	ands	r3, r2
 80061bc:	d11a      	bne.n	80061f4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2201      	movs	r2, #1
 80061c4:	4252      	negs	r2, r2
 80061c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061c8:	f7fd fa4c 	bl	8003664 <HAL_GetTick>
 80061cc:	0003      	movs	r3, r0
 80061ce:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061d0:	e00a      	b.n	80061e8 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061d2:	f7fd fa47 	bl	8003664 <HAL_GetTick>
 80061d6:	0002      	movs	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	23fa      	movs	r3, #250	; 0xfa
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d901      	bls.n	80061e8 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e006      	b.n	80061f6 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2240      	movs	r2, #64	; 0x40
 80061f0:	4013      	ands	r3, r2
 80061f2:	d0ee      	beq.n	80061d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	0018      	movs	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b004      	add	sp, #16
 80061fc:	bd80      	pop	{r7, pc}

080061fe <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	0002      	movs	r2, r0
 8006206:	1dfb      	adds	r3, r7, #7
 8006208:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800620e:	e007      	b.n	8006220 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006216:	1dfb      	adds	r3, r7, #7
 8006218:	1dfa      	adds	r2, r7, #7
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	3a0a      	subs	r2, #10
 800621e:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 8006220:	1dfb      	adds	r3, r7, #7
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b09      	cmp	r3, #9
 8006226:	d8f3      	bhi.n	8006210 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	b2da      	uxtb	r2, r3
 8006230:	1dfb      	adds	r3, r7, #7
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	4313      	orrs	r3, r2
 8006236:	b2db      	uxtb	r3, r3
}
 8006238:	0018      	movs	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	b004      	add	sp, #16
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0a8      	b.n	80063a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	2382      	movs	r3, #130	; 0x82
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	429a      	cmp	r2, r3
 8006264:	d009      	beq.n	800627a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	61da      	str	r2, [r3, #28]
 800626c:	e005      	b.n	800627a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	225d      	movs	r2, #93	; 0x5d
 8006284:	5c9b      	ldrb	r3, [r3, r2]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	225c      	movs	r2, #92	; 0x5c
 8006290:	2100      	movs	r1, #0
 8006292:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0018      	movs	r0, r3
 8006298:	f7fc fa1e 	bl	80026d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	225d      	movs	r2, #93	; 0x5d
 80062a0:	2102      	movs	r1, #2
 80062a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2140      	movs	r1, #64	; 0x40
 80062b0:	438a      	bics	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	23e0      	movs	r3, #224	; 0xe0
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	429a      	cmp	r2, r3
 80062be:	d902      	bls.n	80062c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062c6:	2380      	movs	r3, #128	; 0x80
 80062c8:	015b      	lsls	r3, r3, #5
 80062ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	23f0      	movs	r3, #240	; 0xf0
 80062d2:	011b      	lsls	r3, r3, #4
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d008      	beq.n	80062ea <HAL_SPI_Init+0xaa>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	23e0      	movs	r3, #224	; 0xe0
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d002      	beq.n	80062ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	2382      	movs	r3, #130	; 0x82
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	401a      	ands	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6899      	ldr	r1, [r3, #8]
 80062f8:	2384      	movs	r3, #132	; 0x84
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	400b      	ands	r3, r1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2102      	movs	r1, #2
 8006306:	400b      	ands	r3, r1
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	2101      	movs	r1, #1
 8006310:	400b      	ands	r3, r1
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6999      	ldr	r1, [r3, #24]
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	400b      	ands	r3, r1
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	2138      	movs	r1, #56	; 0x38
 8006326:	400b      	ands	r3, r1
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	400b      	ands	r3, r1
 8006332:	431a      	orrs	r2, r3
 8006334:	0011      	movs	r1, r2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	019b      	lsls	r3, r3, #6
 800633e:	401a      	ands	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	2204      	movs	r2, #4
 8006350:	401a      	ands	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	2110      	movs	r1, #16
 8006358:	400b      	ands	r3, r1
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	2108      	movs	r1, #8
 8006362:	400b      	ands	r3, r1
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68d9      	ldr	r1, [r3, #12]
 800636a:	23f0      	movs	r3, #240	; 0xf0
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	400b      	ands	r3, r1
 8006370:	431a      	orrs	r2, r3
 8006372:	0011      	movs	r1, r2
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	2380      	movs	r3, #128	; 0x80
 8006378:	015b      	lsls	r3, r3, #5
 800637a:	401a      	ands	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4907      	ldr	r1, [pc, #28]	; (80063ac <HAL_SPI_Init+0x16c>)
 8006390:	400a      	ands	r2, r1
 8006392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	225d      	movs	r2, #93	; 0x5d
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	b004      	add	sp, #16
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	fffff7ff 	.word	0xfffff7ff

080063b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	1dbb      	adds	r3, r7, #6
 80063be:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063c0:	231f      	movs	r3, #31
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	225c      	movs	r2, #92	; 0x5c
 80063cc:	5c9b      	ldrb	r3, [r3, r2]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_SPI_Transmit+0x26>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e140      	b.n	8006658 <HAL_SPI_Transmit+0x2a8>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	225c      	movs	r2, #92	; 0x5c
 80063da:	2101      	movs	r1, #1
 80063dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063de:	f7fd f941 	bl	8003664 <HAL_GetTick>
 80063e2:	0003      	movs	r3, r0
 80063e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80063e6:	2316      	movs	r3, #22
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	1dba      	adds	r2, r7, #6
 80063ec:	8812      	ldrh	r2, [r2, #0]
 80063ee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	225d      	movs	r2, #93	; 0x5d
 80063f4:	5c9b      	ldrb	r3, [r3, r2]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d004      	beq.n	8006406 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80063fc:	231f      	movs	r3, #31
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2202      	movs	r2, #2
 8006402:	701a      	strb	r2, [r3, #0]
    goto error;
 8006404:	e11d      	b.n	8006642 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_SPI_Transmit+0x64>
 800640c:	1dbb      	adds	r3, r7, #6
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006414:	231f      	movs	r3, #31
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	2201      	movs	r2, #1
 800641a:	701a      	strb	r2, [r3, #0]
    goto error;
 800641c:	e111      	b.n	8006642 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	225d      	movs	r2, #93	; 0x5d
 8006422:	2103      	movs	r1, #3
 8006424:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1dba      	adds	r2, r7, #6
 8006436:	8812      	ldrh	r2, [r2, #0]
 8006438:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1dba      	adds	r2, r7, #6
 800643e:	8812      	ldrh	r2, [r2, #0]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2244      	movs	r2, #68	; 0x44
 800644c:	2100      	movs	r1, #0
 800644e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2246      	movs	r2, #70	; 0x46
 8006454:	2100      	movs	r1, #0
 8006456:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	2380      	movs	r3, #128	; 0x80
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	429a      	cmp	r2, r3
 800646e:	d110      	bne.n	8006492 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2140      	movs	r1, #64	; 0x40
 800647c:	438a      	bics	r2, r1
 800647e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	01c9      	lsls	r1, r1, #7
 800648e:	430a      	orrs	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	4013      	ands	r3, r2
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d007      	beq.n	80064b0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2140      	movs	r1, #64	; 0x40
 80064ac:	430a      	orrs	r2, r1
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	23e0      	movs	r3, #224	; 0xe0
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d94e      	bls.n	800655a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <HAL_SPI_Transmit+0x11e>
 80064c4:	2316      	movs	r3, #22
 80064c6:	18fb      	adds	r3, r7, r3
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d13f      	bne.n	800654e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	1c9a      	adds	r2, r3, #2
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064f2:	e02c      	b.n	800654e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2202      	movs	r2, #2
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d112      	bne.n	8006528 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	881a      	ldrh	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	1c9a      	adds	r2, r3, #2
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006526:	e012      	b.n	800654e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006528:	f7fd f89c 	bl	8003664 <HAL_GetTick>
 800652c:	0002      	movs	r2, r0
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d802      	bhi.n	800653e <HAL_SPI_Transmit+0x18e>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	d102      	bne.n	8006544 <HAL_SPI_Transmit+0x194>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006544:	231f      	movs	r3, #31
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	2203      	movs	r2, #3
 800654a:	701a      	strb	r2, [r3, #0]
          goto error;
 800654c:	e079      	b.n	8006642 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1cd      	bne.n	80064f4 <HAL_SPI_Transmit+0x144>
 8006558:	e04f      	b.n	80065fa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_SPI_Transmit+0x1bc>
 8006562:	2316      	movs	r3, #22
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d141      	bne.n	80065f0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	330c      	adds	r3, #12
 8006576:	7812      	ldrb	r2, [r2, #0]
 8006578:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006592:	e02d      	b.n	80065f0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2202      	movs	r2, #2
 800659c:	4013      	ands	r3, r2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d113      	bne.n	80065ca <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065c8:	e012      	b.n	80065f0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ca:	f7fd f84b 	bl	8003664 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d802      	bhi.n	80065e0 <HAL_SPI_Transmit+0x230>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	d102      	bne.n	80065e6 <HAL_SPI_Transmit+0x236>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80065e6:	231f      	movs	r3, #31
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	2203      	movs	r2, #3
 80065ec:	701a      	strb	r2, [r3, #0]
          goto error;
 80065ee:	e028      	b.n	8006642 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1cc      	bne.n	8006594 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	0018      	movs	r0, r3
 8006602:	f000 fde9 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006606:	1e03      	subs	r3, r0, #0
 8006608:	d002      	beq.n	8006610 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006618:	2300      	movs	r3, #0
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006636:	231f      	movs	r3, #31
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e000      	b.n	8006642 <HAL_SPI_Transmit+0x292>
  }

error:
 8006640:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	225d      	movs	r2, #93	; 0x5d
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	225c      	movs	r2, #92	; 0x5c
 800664e:	2100      	movs	r1, #0
 8006650:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006652:	231f      	movs	r3, #31
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	781b      	ldrb	r3, [r3, #0]
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b008      	add	sp, #32
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	1dbb      	adds	r3, r7, #6
 800666e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006670:	2317      	movs	r3, #23
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	2382      	movs	r3, #130	; 0x82
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	429a      	cmp	r2, r3
 8006682:	d113      	bne.n	80066ac <HAL_SPI_Receive+0x4c>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10f      	bne.n	80066ac <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	225d      	movs	r2, #93	; 0x5d
 8006690:	2104      	movs	r1, #4
 8006692:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006694:	1dbb      	adds	r3, r7, #6
 8006696:	881c      	ldrh	r4, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	0023      	movs	r3, r4
 80066a4:	f000 f928 	bl	80068f8 <HAL_SPI_TransmitReceive>
 80066a8:	0003      	movs	r3, r0
 80066aa:	e11c      	b.n	80068e6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	225c      	movs	r2, #92	; 0x5c
 80066b0:	5c9b      	ldrb	r3, [r3, r2]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_SPI_Receive+0x5a>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e115      	b.n	80068e6 <HAL_SPI_Receive+0x286>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	225c      	movs	r2, #92	; 0x5c
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066c2:	f7fc ffcf 	bl	8003664 <HAL_GetTick>
 80066c6:	0003      	movs	r3, r0
 80066c8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	225d      	movs	r2, #93	; 0x5d
 80066ce:	5c9b      	ldrb	r3, [r3, r2]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d004      	beq.n	80066e0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80066d6:	2317      	movs	r3, #23
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80066de:	e0f7      	b.n	80068d0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_SPI_Receive+0x8e>
 80066e6:	1dbb      	adds	r3, r7, #6
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80066ee:	2317      	movs	r3, #23
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80066f6:	e0eb      	b.n	80068d0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	225d      	movs	r2, #93	; 0x5d
 80066fc:	2104      	movs	r1, #4
 80066fe:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1dba      	adds	r2, r7, #6
 8006710:	2144      	movs	r1, #68	; 0x44
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1dba      	adds	r2, r7, #6
 800671a:	2146      	movs	r1, #70	; 0x46
 800671c:	8812      	ldrh	r2, [r2, #0]
 800671e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	23e0      	movs	r3, #224	; 0xe0
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	429a      	cmp	r2, r3
 8006748:	d908      	bls.n	800675c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4966      	ldr	r1, [pc, #408]	; (80068f0 <HAL_SPI_Receive+0x290>)
 8006756:	400a      	ands	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	e008      	b.n	800676e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	0149      	lsls	r1, r1, #5
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	429a      	cmp	r2, r3
 8006778:	d10f      	bne.n	800679a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2140      	movs	r1, #64	; 0x40
 8006786:	438a      	bics	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4957      	ldr	r1, [pc, #348]	; (80068f4 <HAL_SPI_Receive+0x294>)
 8006796:	400a      	ands	r2, r1
 8006798:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2240      	movs	r2, #64	; 0x40
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d007      	beq.n	80067b8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2140      	movs	r1, #64	; 0x40
 80067b4:	430a      	orrs	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	23e0      	movs	r3, #224	; 0xe0
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d900      	bls.n	80067c6 <HAL_SPI_Receive+0x166>
 80067c4:	e069      	b.n	800689a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067c6:	e031      	b.n	800682c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2201      	movs	r2, #1
 80067d0:	4013      	ands	r3, r2
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d117      	bne.n	8006806 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	001a      	movs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2246      	movs	r2, #70	; 0x46
 80067f6:	5a9b      	ldrh	r3, [r3, r2]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b299      	uxth	r1, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2246      	movs	r2, #70	; 0x46
 8006802:	5299      	strh	r1, [r3, r2]
 8006804:	e012      	b.n	800682c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006806:	f7fc ff2d 	bl	8003664 <HAL_GetTick>
 800680a:	0002      	movs	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d802      	bhi.n	800681c <HAL_SPI_Receive+0x1bc>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	d102      	bne.n	8006822 <HAL_SPI_Receive+0x1c2>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006822:	2317      	movs	r3, #23
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	2203      	movs	r2, #3
 8006828:	701a      	strb	r2, [r3, #0]
          goto error;
 800682a:	e051      	b.n	80068d0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2246      	movs	r2, #70	; 0x46
 8006830:	5a9b      	ldrh	r3, [r3, r2]
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1c7      	bne.n	80067c8 <HAL_SPI_Receive+0x168>
 8006838:	e035      	b.n	80068a6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2201      	movs	r2, #1
 8006842:	4013      	ands	r3, r2
 8006844:	2b01      	cmp	r3, #1
 8006846:	d115      	bne.n	8006874 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	b292      	uxth	r2, r2
 8006854:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2246      	movs	r2, #70	; 0x46
 8006864:	5a9b      	ldrh	r3, [r3, r2]
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b299      	uxth	r1, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2246      	movs	r2, #70	; 0x46
 8006870:	5299      	strh	r1, [r3, r2]
 8006872:	e012      	b.n	800689a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006874:	f7fc fef6 	bl	8003664 <HAL_GetTick>
 8006878:	0002      	movs	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d802      	bhi.n	800688a <HAL_SPI_Receive+0x22a>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	3301      	adds	r3, #1
 8006888:	d102      	bne.n	8006890 <HAL_SPI_Receive+0x230>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006890:	2317      	movs	r3, #23
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	2203      	movs	r2, #3
 8006896:	701a      	strb	r2, [r3, #0]
          goto error;
 8006898:	e01a      	b.n	80068d0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2246      	movs	r2, #70	; 0x46
 800689e:	5a9b      	ldrh	r3, [r3, r2]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1c9      	bne.n	800683a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	0018      	movs	r0, r3
 80068ae:	f000 fc35 	bl	800711c <SPI_EndRxTransaction>
 80068b2:	1e03      	subs	r3, r0, #0
 80068b4:	d002      	beq.n	80068bc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80068c4:	2317      	movs	r3, #23
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	e000      	b.n	80068d0 <HAL_SPI_Receive+0x270>
  }

error :
 80068ce:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	225d      	movs	r2, #93	; 0x5d
 80068d4:	2101      	movs	r1, #1
 80068d6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	225c      	movs	r2, #92	; 0x5c
 80068dc:	2100      	movs	r1, #0
 80068de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068e0:	2317      	movs	r3, #23
 80068e2:	18fb      	adds	r3, r7, r3
 80068e4:	781b      	ldrb	r3, [r3, #0]
}
 80068e6:	0018      	movs	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b007      	add	sp, #28
 80068ec:	bd90      	pop	{r4, r7, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	ffffefff 	.word	0xffffefff
 80068f4:	ffffbfff 	.word	0xffffbfff

080068f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	001a      	movs	r2, r3
 8006906:	1cbb      	adds	r3, r7, #2
 8006908:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800690a:	2301      	movs	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800690e:	2323      	movs	r3, #35	; 0x23
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	2200      	movs	r2, #0
 8006914:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	225c      	movs	r2, #92	; 0x5c
 800691a:	5c9b      	ldrb	r3, [r3, r2]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_SPI_TransmitReceive+0x2c>
 8006920:	2302      	movs	r3, #2
 8006922:	e1b5      	b.n	8006c90 <HAL_SPI_TransmitReceive+0x398>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	225c      	movs	r2, #92	; 0x5c
 8006928:	2101      	movs	r1, #1
 800692a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800692c:	f7fc fe9a 	bl	8003664 <HAL_GetTick>
 8006930:	0003      	movs	r3, r0
 8006932:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006934:	201b      	movs	r0, #27
 8006936:	183b      	adds	r3, r7, r0
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	215d      	movs	r1, #93	; 0x5d
 800693c:	5c52      	ldrb	r2, [r2, r1]
 800693e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006946:	2312      	movs	r3, #18
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	1cba      	adds	r2, r7, #2
 800694c:	8812      	ldrh	r2, [r2, #0]
 800694e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006950:	183b      	adds	r3, r7, r0
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d011      	beq.n	800697c <HAL_SPI_TransmitReceive+0x84>
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	2382      	movs	r3, #130	; 0x82
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	429a      	cmp	r2, r3
 8006960:	d107      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x7a>
 800696a:	183b      	adds	r3, r7, r0
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b04      	cmp	r3, #4
 8006970:	d004      	beq.n	800697c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006972:	2323      	movs	r3, #35	; 0x23
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	2202      	movs	r2, #2
 8006978:	701a      	strb	r2, [r3, #0]
    goto error;
 800697a:	e17e      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x98>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x98>
 8006988:	1cbb      	adds	r3, r7, #2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006990:	2323      	movs	r3, #35	; 0x23
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
    goto error;
 8006998:	e16f      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	225d      	movs	r2, #93	; 0x5d
 800699e:	5c9b      	ldrb	r3, [r3, r2]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d003      	beq.n	80069ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	225d      	movs	r2, #93	; 0x5d
 80069aa:	2105      	movs	r1, #5
 80069ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	1cba      	adds	r2, r7, #2
 80069be:	2146      	movs	r1, #70	; 0x46
 80069c0:	8812      	ldrh	r2, [r2, #0]
 80069c2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1cba      	adds	r2, r7, #2
 80069c8:	2144      	movs	r1, #68	; 0x44
 80069ca:	8812      	ldrh	r2, [r2, #0]
 80069cc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1cba      	adds	r2, r7, #2
 80069d8:	8812      	ldrh	r2, [r2, #0]
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1cba      	adds	r2, r7, #2
 80069e0:	8812      	ldrh	r2, [r2, #0]
 80069e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	23e0      	movs	r3, #224	; 0xe0
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d908      	bls.n	8006a0e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	49a4      	ldr	r1, [pc, #656]	; (8006c98 <HAL_SPI_TransmitReceive+0x3a0>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]
 8006a0c:	e008      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	0149      	lsls	r1, r1, #5
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d007      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2140      	movs	r1, #64	; 0x40
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	23e0      	movs	r3, #224	; 0xe0
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d800      	bhi.n	8006a4c <HAL_SPI_TransmitReceive+0x154>
 8006a4a:	e07f      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x168>
 8006a54:	2312      	movs	r3, #18
 8006a56:	18fb      	adds	r3, r7, r3
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d000      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x168>
 8006a5e:	e069      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a84:	e056      	b.n	8006b34 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d11b      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x1d4>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d016      	beq.n	8006acc <HAL_SPI_TransmitReceive+0x1d4>
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d113      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d11c      	bne.n	8006b14 <HAL_SPI_TransmitReceive+0x21c>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2246      	movs	r2, #70	; 0x46
 8006ade:	5a9b      	ldrh	r3, [r3, r2]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	b292      	uxth	r2, r2
 8006af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2246      	movs	r2, #70	; 0x46
 8006b02:	5a9b      	ldrh	r3, [r3, r2]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b299      	uxth	r1, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2246      	movs	r2, #70	; 0x46
 8006b0e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b10:	2301      	movs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b14:	f7fc fda6 	bl	8003664 <HAL_GetTick>
 8006b18:	0002      	movs	r2, r0
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d807      	bhi.n	8006b34 <HAL_SPI_TransmitReceive+0x23c>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	3301      	adds	r3, #1
 8006b28:	d004      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006b2a:	2323      	movs	r3, #35	; 0x23
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	2203      	movs	r2, #3
 8006b30:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b32:	e0a2      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1a3      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x18e>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2246      	movs	r2, #70	; 0x46
 8006b42:	5a9b      	ldrh	r3, [r3, r2]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d19d      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x18e>
 8006b4a:	e085      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x268>
 8006b54:	2312      	movs	r3, #18
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d000      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x268>
 8006b5e:	e070      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b86:	e05c      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d11c      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x2d8>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d017      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x2d8>
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d114      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d11e      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x324>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2246      	movs	r2, #70	; 0x46
 8006be2:	5a9b      	ldrh	r3, [r3, r2]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d018      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	001a      	movs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	7812      	ldrb	r2, [r2, #0]
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2246      	movs	r2, #70	; 0x46
 8006c0a:	5a9b      	ldrh	r3, [r3, r2]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b299      	uxth	r1, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2246      	movs	r2, #70	; 0x46
 8006c16:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c1c:	f7fc fd22 	bl	8003664 <HAL_GetTick>
 8006c20:	0002      	movs	r2, r0
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d802      	bhi.n	8006c32 <HAL_SPI_TransmitReceive+0x33a>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	3301      	adds	r3, #1
 8006c30:	d102      	bne.n	8006c38 <HAL_SPI_TransmitReceive+0x340>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006c38:	2323      	movs	r3, #35	; 0x23
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c40:	e01b      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d19d      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x290>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2246      	movs	r2, #70	; 0x46
 8006c50:	5a9b      	ldrh	r3, [r3, r2]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d197      	bne.n	8006b88 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 faba 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006c64:	1e03      	subs	r3, r0, #0
 8006c66:	d007      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006c68:	2323      	movs	r3, #35	; 0x23
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	661a      	str	r2, [r3, #96]	; 0x60
 8006c76:	e000      	b.n	8006c7a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006c78:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	225d      	movs	r2, #93	; 0x5d
 8006c7e:	2101      	movs	r1, #1
 8006c80:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	225c      	movs	r2, #92	; 0x5c
 8006c86:	2100      	movs	r1, #0
 8006c88:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c8a:	2323      	movs	r3, #35	; 0x23
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	781b      	ldrb	r3, [r3, #0]
}
 8006c90:	0018      	movs	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b00a      	add	sp, #40	; 0x28
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	ffffefff 	.word	0xffffefff

08006c9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	099b      	lsrs	r3, r3, #6
 8006cb8:	001a      	movs	r2, r3
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d10f      	bne.n	8006ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cc6:	d00b      	beq.n	8006ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d005      	beq.n	8006ce0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	0010      	movs	r0, r2
 8006cdc:	4798      	blx	r3
    return;
 8006cde:	e0d5      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d00b      	beq.n	8006d04 <HAL_SPI_IRQHandler+0x68>
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	09db      	lsrs	r3, r3, #7
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d005      	beq.n	8006d04 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	0010      	movs	r0, r2
 8006d00:	4798      	blx	r3
    return;
 8006d02:	e0c3      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	001a      	movs	r2, r3
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	d10c      	bne.n	8006d2a <HAL_SPI_IRQHandler+0x8e>
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	001a      	movs	r2, r3
 8006d16:	2301      	movs	r3, #1
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d106      	bne.n	8006d2a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	001a      	movs	r2, r3
 8006d22:	2301      	movs	r3, #1
 8006d24:	4013      	ands	r3, r2
 8006d26:	d100      	bne.n	8006d2a <HAL_SPI_IRQHandler+0x8e>
 8006d28:	e0b0      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1f0>
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	001a      	movs	r2, r3
 8006d30:	2301      	movs	r3, #1
 8006d32:	4013      	ands	r3, r2
 8006d34:	d100      	bne.n	8006d38 <HAL_SPI_IRQHandler+0x9c>
 8006d36:	e0a9      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	099b      	lsrs	r3, r3, #6
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d023      	beq.n	8006d8c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	225d      	movs	r2, #93	; 0x5d
 8006d48:	5c9b      	ldrb	r3, [r3, r2]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d011      	beq.n	8006d74 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	2204      	movs	r2, #4
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e00b      	b.n	8006d8c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
        return;
 8006d8a:	e07f      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	095b      	lsrs	r3, r3, #5
 8006d90:	001a      	movs	r2, r3
 8006d92:	2301      	movs	r3, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d014      	beq.n	8006dc2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2140      	movs	r1, #64	; 0x40
 8006dbc:	438a      	bics	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	0a1b      	lsrs	r3, r3, #8
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	2301      	movs	r3, #1
 8006dca:	4013      	ands	r3, r2
 8006dcc:	d00c      	beq.n	8006de8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d04c      	beq.n	8006e8a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	21e0      	movs	r1, #224	; 0xe0
 8006dfc:	438a      	bics	r2, r1
 8006dfe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	225d      	movs	r2, #93	; 0x5d
 8006e04:	2101      	movs	r1, #1
 8006e06:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d103      	bne.n	8006e18 <HAL_SPI_IRQHandler+0x17c>
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2201      	movs	r2, #1
 8006e14:	4013      	ands	r3, r2
 8006e16:	d032      	beq.n	8006e7e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2103      	movs	r1, #3
 8006e24:	438a      	bics	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <HAL_SPI_IRQHandler+0x1f8>)
 8006e36:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fc fd55 	bl	80038ec <HAL_DMA_Abort_IT>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d016      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	4a0d      	ldr	r2, [pc, #52]	; (8006e94 <HAL_SPI_IRQHandler+0x1f8>)
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	0018      	movs	r0, r3
 8006e68:	f7fc fd40 	bl	80038ec <HAL_DMA_Abort_IT>
 8006e6c:	1e03      	subs	r3, r0, #0
 8006e6e:	d00b      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	2240      	movs	r2, #64	; 0x40
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006e7c:	e004      	b.n	8006e88 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f000 f809 	bl	8006e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e86:	e000      	b.n	8006e8a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006e88:	46c0      	nop			; (mov r8, r8)
    return;
 8006e8a:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b008      	add	sp, #32
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	08006ea9 	.word	0x08006ea9

08006e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2246      	movs	r2, #70	; 0x46
 8006eba:	2100      	movs	r1, #0
 8006ebc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7ff ffe6 	bl	8006e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b004      	add	sp, #16
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	1dfb      	adds	r3, r7, #7
 8006ee2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ee4:	f7fc fbbe 	bl	8003664 <HAL_GetTick>
 8006ee8:	0002      	movs	r2, r0
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ef4:	f7fc fbb6 	bl	8003664 <HAL_GetTick>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006efc:	4b3a      	ldr	r3, [pc, #232]	; (8006fe8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	015b      	lsls	r3, r3, #5
 8006f02:	0d1b      	lsrs	r3, r3, #20
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	4353      	muls	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f0a:	e058      	b.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	d055      	beq.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f12:	f7fc fba7 	bl	8003664 <HAL_GetTick>
 8006f16:	0002      	movs	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d902      	bls.n	8006f28 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d142      	bne.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	21e0      	movs	r1, #224	; 0xe0
 8006f34:	438a      	bics	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	2382      	movs	r3, #130	; 0x82
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d113      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d005      	beq.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d107      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2140      	movs	r1, #64	; 0x40
 8006f68:	438a      	bics	r2, r1
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f70:	2380      	movs	r3, #128	; 0x80
 8006f72:	019b      	lsls	r3, r3, #6
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d110      	bne.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	491a      	ldr	r1, [pc, #104]	; (8006fec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006f84:	400a      	ands	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2180      	movs	r1, #128	; 0x80
 8006f94:	0189      	lsls	r1, r1, #6
 8006f96:	430a      	orrs	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	225d      	movs	r2, #93	; 0x5d
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	225c      	movs	r2, #92	; 0x5c
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e017      	b.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	425a      	negs	r2, r3
 8006fce:	4153      	adcs	r3, r2
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	1dfb      	adds	r3, r7, #7
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d197      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b008      	add	sp, #32
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	200000c4 	.word	0x200000c4
 8006fec:	ffffdfff 	.word	0xffffdfff

08006ff0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ffe:	f7fc fb31 	bl	8003664 <HAL_GetTick>
 8007002:	0002      	movs	r2, r0
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	1a9b      	subs	r3, r3, r2
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	18d3      	adds	r3, r2, r3
 800700c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800700e:	f7fc fb29 	bl	8003664 <HAL_GetTick>
 8007012:	0003      	movs	r3, r0
 8007014:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007016:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	0013      	movs	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	189b      	adds	r3, r3, r2
 8007020:	00da      	lsls	r2, r3, #3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	0d1b      	lsrs	r3, r3, #20
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	4353      	muls	r3, r2
 800702a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800702c:	e064      	b.n	80070f8 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	23c0      	movs	r3, #192	; 0xc0
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	429a      	cmp	r2, r3
 8007036:	d106      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	d055      	beq.n	80070f8 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800704c:	f7fc fb0a 	bl	8003664 <HAL_GetTick>
 8007050:	0002      	movs	r2, r0
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	429a      	cmp	r2, r3
 800705a:	d902      	bls.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x72>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d142      	bne.n	80070e8 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	21e0      	movs	r1, #224	; 0xe0
 800706e:	438a      	bics	r2, r1
 8007070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	2382      	movs	r3, #130	; 0x82
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	429a      	cmp	r2, r3
 800707c:	d113      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	2380      	movs	r3, #128	; 0x80
 8007084:	021b      	lsls	r3, r3, #8
 8007086:	429a      	cmp	r2, r3
 8007088:	d005      	beq.n	8007096 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	2380      	movs	r3, #128	; 0x80
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	429a      	cmp	r2, r3
 8007094:	d107      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2140      	movs	r1, #64	; 0x40
 80070a2:	438a      	bics	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	019b      	lsls	r3, r3, #6
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d110      	bne.n	80070d4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4916      	ldr	r1, [pc, #88]	; (8007118 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070be:	400a      	ands	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2180      	movs	r1, #128	; 0x80
 80070ce:	0189      	lsls	r1, r1, #6
 80070d0:	430a      	orrs	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	225d      	movs	r2, #93	; 0x5d
 80070d8:	2101      	movs	r1, #1
 80070da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	225c      	movs	r2, #92	; 0x5c
 80070e0:	2100      	movs	r1, #0
 80070e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e010      	b.n	800710a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d192      	bne.n	800702e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	0018      	movs	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	b008      	add	sp, #32
 8007110:	bd80      	pop	{r7, pc}
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	200000c4 	.word	0x200000c4
 8007118:	ffffdfff 	.word	0xffffdfff

0800711c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	2382      	movs	r3, #130	; 0x82
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	429a      	cmp	r2, r3
 8007132:	d113      	bne.n	800715c <SPI_EndRxTransaction+0x40>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	429a      	cmp	r2, r3
 800713e:	d005      	beq.n	800714c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689a      	ldr	r2, [r3, #8]
 8007144:	2380      	movs	r3, #128	; 0x80
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	429a      	cmp	r2, r3
 800714a:	d107      	bne.n	800715c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2140      	movs	r1, #64	; 0x40
 8007158:	438a      	bics	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	0013      	movs	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	2180      	movs	r1, #128	; 0x80
 800716a:	f7ff feb3 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 800716e:	1e03      	subs	r3, r0, #0
 8007170:	d007      	beq.n	8007182 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007176:	2220      	movs	r2, #32
 8007178:	431a      	orrs	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e026      	b.n	80071d0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	2382      	movs	r3, #130	; 0x82
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	429a      	cmp	r2, r3
 800718c:	d11f      	bne.n	80071ce <SPI_EndRxTransaction+0xb2>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	429a      	cmp	r2, r3
 8007198:	d005      	beq.n	80071a6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	2380      	movs	r3, #128	; 0x80
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d113      	bne.n	80071ce <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	23c0      	movs	r3, #192	; 0xc0
 80071aa:	00d9      	lsls	r1, r3, #3
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	0013      	movs	r3, r2
 80071b4:	2200      	movs	r2, #0
 80071b6:	f7ff ff1b 	bl	8006ff0 <SPI_WaitFifoStateUntilTimeout>
 80071ba:	1e03      	subs	r3, r0, #0
 80071bc:	d007      	beq.n	80071ce <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	2220      	movs	r2, #32
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e000      	b.n	80071d0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b004      	add	sp, #16
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	23c0      	movs	r3, #192	; 0xc0
 80071e8:	0159      	lsls	r1, r3, #5
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	0013      	movs	r3, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	f7ff fefc 	bl	8006ff0 <SPI_WaitFifoStateUntilTimeout>
 80071f8:	1e03      	subs	r3, r0, #0
 80071fa:	d007      	beq.n	800720c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	2220      	movs	r2, #32
 8007202:	431a      	orrs	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e027      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	0013      	movs	r3, r2
 8007216:	2200      	movs	r2, #0
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	f7ff fe5b 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 800721e:	1e03      	subs	r3, r0, #0
 8007220:	d007      	beq.n	8007232 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007226:	2220      	movs	r2, #32
 8007228:	431a      	orrs	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e014      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	23c0      	movs	r3, #192	; 0xc0
 8007236:	00d9      	lsls	r1, r3, #3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	0013      	movs	r3, r2
 8007240:	2200      	movs	r2, #0
 8007242:	f7ff fed5 	bl	8006ff0 <SPI_WaitFifoStateUntilTimeout>
 8007246:	1e03      	subs	r3, r0, #0
 8007248:	d007      	beq.n	800725a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724e:	2220      	movs	r2, #32
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e000      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	0018      	movs	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	b004      	add	sp, #16
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2202      	movs	r2, #2
 8007274:	4013      	ands	r3, r2
 8007276:	2b02      	cmp	r3, #2
 8007278:	d124      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2202      	movs	r2, #2
 8007282:	4013      	ands	r3, r2
 8007284:	2b02      	cmp	r3, #2
 8007286:	d11d      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2203      	movs	r2, #3
 800728e:	4252      	negs	r2, r2
 8007290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	2203      	movs	r2, #3
 80072a0:	4013      	ands	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f902 	bl	80074b0 <HAL_TIM_IC_CaptureCallback>
 80072ac:	e007      	b.n	80072be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0018      	movs	r0, r3
 80072b2:	f000 f8f5 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f000 f901 	bl	80074c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2204      	movs	r2, #4
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d125      	bne.n	800731e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	2204      	movs	r2, #4
 80072da:	4013      	ands	r3, r2
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d11e      	bne.n	800731e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2205      	movs	r2, #5
 80072e6:	4252      	negs	r2, r2
 80072e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	23c0      	movs	r3, #192	; 0xc0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4013      	ands	r3, r2
 80072fc:	d004      	beq.n	8007308 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0018      	movs	r0, r3
 8007302:	f000 f8d5 	bl	80074b0 <HAL_TIM_IC_CaptureCallback>
 8007306:	e007      	b.n	8007318 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0018      	movs	r0, r3
 800730c:	f000 f8c8 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	0018      	movs	r0, r3
 8007314:	f000 f8d4 	bl	80074c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	2208      	movs	r2, #8
 8007326:	4013      	ands	r3, r2
 8007328:	2b08      	cmp	r3, #8
 800732a:	d124      	bne.n	8007376 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2208      	movs	r2, #8
 8007334:	4013      	ands	r3, r2
 8007336:	2b08      	cmp	r3, #8
 8007338:	d11d      	bne.n	8007376 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2209      	movs	r2, #9
 8007340:	4252      	negs	r2, r2
 8007342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2204      	movs	r2, #4
 8007348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	2203      	movs	r2, #3
 8007352:	4013      	ands	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 f8a9 	bl	80074b0 <HAL_TIM_IC_CaptureCallback>
 800735e:	e007      	b.n	8007370 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f000 f89c 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	0018      	movs	r0, r3
 800736c:	f000 f8a8 	bl	80074c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2210      	movs	r2, #16
 800737e:	4013      	ands	r3, r2
 8007380:	2b10      	cmp	r3, #16
 8007382:	d125      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2210      	movs	r2, #16
 800738c:	4013      	ands	r3, r2
 800738e:	2b10      	cmp	r3, #16
 8007390:	d11e      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2211      	movs	r2, #17
 8007398:	4252      	negs	r2, r2
 800739a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2208      	movs	r2, #8
 80073a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	23c0      	movs	r3, #192	; 0xc0
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4013      	ands	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 f87c 	bl	80074b0 <HAL_TIM_IC_CaptureCallback>
 80073b8:	e007      	b.n	80073ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 f86f 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 f87b 	bl	80074c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2201      	movs	r2, #1
 80073d8:	4013      	ands	r3, r2
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d10f      	bne.n	80073fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d108      	bne.n	80073fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2202      	movs	r2, #2
 80073f2:	4252      	negs	r2, r2
 80073f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 f849 	bl	8007490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2280      	movs	r2, #128	; 0x80
 8007406:	4013      	ands	r3, r2
 8007408:	2b80      	cmp	r3, #128	; 0x80
 800740a:	d10f      	bne.n	800742c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	4013      	ands	r3, r2
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d108      	bne.n	800742c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2281      	movs	r2, #129	; 0x81
 8007420:	4252      	negs	r2, r2
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f862 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2240      	movs	r2, #64	; 0x40
 8007434:	4013      	ands	r3, r2
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d10f      	bne.n	800745a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2240      	movs	r2, #64	; 0x40
 8007442:	4013      	ands	r3, r2
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d108      	bne.n	800745a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2241      	movs	r2, #65	; 0x41
 800744e:	4252      	negs	r2, r2
 8007450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	0018      	movs	r0, r3
 8007456:	f000 f83b 	bl	80074d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2220      	movs	r2, #32
 8007462:	4013      	ands	r3, r2
 8007464:	2b20      	cmp	r3, #32
 8007466:	d10f      	bne.n	8007488 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	4013      	ands	r3, r2
 8007472:	2b20      	cmp	r3, #32
 8007474:	d108      	bne.n	8007488 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2221      	movs	r2, #33	; 0x21
 800747c:	4252      	negs	r2, r2
 800747e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	0018      	movs	r0, r3
 8007484:	f000 f82c 	bl	80074e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	b002      	add	sp, #8
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007498:	46c0      	nop			; (mov r8, r8)
 800749a:	46bd      	mov	sp, r7
 800749c:	b002      	add	sp, #8
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a8:	46c0      	nop			; (mov r8, r8)
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b002      	add	sp, #8
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b002      	add	sp, #8
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c8:	46c0      	nop			; (mov r8, r8)
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b002      	add	sp, #8
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46bd      	mov	sp, r7
 80074dc:	b002      	add	sp, #8
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e8:	46c0      	nop			; (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b002      	add	sp, #8
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b002      	add	sp, #8
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e044      	b.n	800759c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2274      	movs	r2, #116	; 0x74
 800751e:	2100      	movs	r1, #0
 8007520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	0018      	movs	r0, r3
 8007526:	f7fb f92b 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2224      	movs	r2, #36	; 0x24
 800752e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2101      	movs	r1, #1
 800753c:	438a      	bics	r2, r1
 800753e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0018      	movs	r0, r3
 8007544:	f000 fa3a 	bl	80079bc <UART_SetConfig>
 8007548:	0003      	movs	r3, r0
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e024      	b.n	800759c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	0018      	movs	r0, r3
 800755e:	f000 fb85 	bl	8007c6c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	490d      	ldr	r1, [pc, #52]	; (80075a4 <HAL_UART_Init+0xa4>)
 800756e:	400a      	ands	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689a      	ldr	r2, [r3, #8]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2108      	movs	r1, #8
 800757e:	438a      	bics	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2101      	movs	r1, #1
 800758e:	430a      	orrs	r2, r1
 8007590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	0018      	movs	r0, r3
 8007596:	f000 fc1d 	bl	8007dd4 <UART_CheckIdleState>
 800759a:	0003      	movs	r3, r0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	fffff7ff 	.word	0xfffff7ff

080075a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4ab4      	ldr	r2, [pc, #720]	; (800789c <HAL_UART_IRQHandler+0x2f4>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d112      	bne.n	80075fc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2220      	movs	r2, #32
 80075da:	4013      	ands	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2220      	movs	r2, #32
 80075e2:	4013      	ands	r3, r2
 80075e4:	d00a      	beq.n	80075fc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d100      	bne.n	80075f0 <HAL_UART_IRQHandler+0x48>
 80075ee:	e1ba      	b.n	8007966 <HAL_UART_IRQHandler+0x3be>
      {
        huart->RxISR(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	0010      	movs	r0, r2
 80075f8:	4798      	blx	r3
      }
      return;
 80075fa:	e1b4      	b.n	8007966 <HAL_UART_IRQHandler+0x3be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d100      	bne.n	8007604 <HAL_UART_IRQHandler+0x5c>
 8007602:	e0d9      	b.n	80077b8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2201      	movs	r2, #1
 8007608:	4013      	ands	r3, r2
 800760a:	d104      	bne.n	8007616 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	4aa4      	ldr	r2, [pc, #656]	; (80078a0 <HAL_UART_IRQHandler+0x2f8>)
 8007610:	4013      	ands	r3, r2
 8007612:	d100      	bne.n	8007616 <HAL_UART_IRQHandler+0x6e>
 8007614:	e0d0      	b.n	80077b8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	2201      	movs	r2, #1
 800761a:	4013      	ands	r3, r2
 800761c:	d010      	beq.n	8007640 <HAL_UART_IRQHandler+0x98>
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	2380      	movs	r3, #128	; 0x80
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4013      	ands	r3, r2
 8007626:	d00b      	beq.n	8007640 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2201      	movs	r2, #1
 800762e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2280      	movs	r2, #128	; 0x80
 8007634:	589b      	ldr	r3, [r3, r2]
 8007636:	2201      	movs	r2, #1
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2202      	movs	r2, #2
 8007644:	4013      	ands	r3, r2
 8007646:	d00f      	beq.n	8007668 <HAL_UART_IRQHandler+0xc0>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2201      	movs	r2, #1
 800764c:	4013      	ands	r3, r2
 800764e:	d00b      	beq.n	8007668 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2202      	movs	r2, #2
 8007656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	589b      	ldr	r3, [r3, r2]
 800765e:	2204      	movs	r2, #4
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2204      	movs	r2, #4
 800766c:	4013      	ands	r3, r2
 800766e:	d00f      	beq.n	8007690 <HAL_UART_IRQHandler+0xe8>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2201      	movs	r2, #1
 8007674:	4013      	ands	r3, r2
 8007676:	d00b      	beq.n	8007690 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2204      	movs	r2, #4
 800767e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2280      	movs	r2, #128	; 0x80
 8007684:	589b      	ldr	r3, [r3, r2]
 8007686:	2202      	movs	r2, #2
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2180      	movs	r1, #128	; 0x80
 800768e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2208      	movs	r2, #8
 8007694:	4013      	ands	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2220      	movs	r2, #32
 800769c:	4013      	ands	r3, r2
 800769e:	d103      	bne.n	80076a8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2201      	movs	r2, #1
 80076a4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076a6:	d00b      	beq.n	80076c0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2208      	movs	r2, #8
 80076ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2280      	movs	r2, #128	; 0x80
 80076b4:	589b      	ldr	r3, [r3, r2]
 80076b6:	2208      	movs	r2, #8
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	2380      	movs	r3, #128	; 0x80
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4013      	ands	r3, r2
 80076c8:	d011      	beq.n	80076ee <HAL_UART_IRQHandler+0x146>
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	04db      	lsls	r3, r3, #19
 80076d0:	4013      	ands	r3, r2
 80076d2:	d00c      	beq.n	80076ee <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	0112      	lsls	r2, r2, #4
 80076dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2280      	movs	r2, #128	; 0x80
 80076e2:	589b      	ldr	r3, [r3, r2]
 80076e4:	2220      	movs	r2, #32
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2280      	movs	r2, #128	; 0x80
 80076f2:	589b      	ldr	r3, [r3, r2]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d100      	bne.n	80076fa <HAL_UART_IRQHandler+0x152>
 80076f8:	e137      	b.n	800796a <HAL_UART_IRQHandler+0x3c2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2220      	movs	r2, #32
 80076fe:	4013      	ands	r3, r2
 8007700:	d00c      	beq.n	800771c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2220      	movs	r2, #32
 8007706:	4013      	ands	r3, r2
 8007708:	d008      	beq.n	800771c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	0010      	movs	r0, r2
 800771a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2280      	movs	r2, #128	; 0x80
 8007720:	589b      	ldr	r3, [r3, r2]
 8007722:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2240      	movs	r2, #64	; 0x40
 800772c:	4013      	ands	r3, r2
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d003      	beq.n	800773a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2228      	movs	r2, #40	; 0x28
 8007736:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007738:	d033      	beq.n	80077a2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0018      	movs	r0, r3
 800773e:	f000 fc0f 	bl	8007f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	4013      	ands	r3, r2
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d123      	bne.n	8007798 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2140      	movs	r1, #64	; 0x40
 800775c:	438a      	bics	r2, r1
 800775e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776c:	4a4d      	ldr	r2, [pc, #308]	; (80078a4 <HAL_UART_IRQHandler+0x2fc>)
 800776e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007774:	0018      	movs	r0, r3
 8007776:	f7fc f8b9 	bl	80038ec <HAL_DMA_Abort_IT>
 800777a:	1e03      	subs	r3, r0, #0
 800777c:	d01a      	beq.n	80077b4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007788:	0018      	movs	r0, r3
 800778a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778c:	e012      	b.n	80077b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	0018      	movs	r0, r3
 8007792:	f000 f8ff 	bl	8007994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007796:	e00d      	b.n	80077b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	0018      	movs	r0, r3
 800779c:	f000 f8fa 	bl	8007994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a0:	e008      	b.n	80077b4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f000 f8f5 	bl	8007994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	2100      	movs	r1, #0
 80077b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80077b2:	e0da      	b.n	800796a <HAL_UART_IRQHandler+0x3c2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b4:	46c0      	nop			; (mov r8, r8)
    return;
 80077b6:	e0d8      	b.n	800796a <HAL_UART_IRQHandler+0x3c2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d000      	beq.n	80077c2 <HAL_UART_IRQHandler+0x21a>
 80077c0:	e0b2      	b.n	8007928 <HAL_UART_IRQHandler+0x380>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2210      	movs	r2, #16
 80077c6:	4013      	ands	r3, r2
 80077c8:	d100      	bne.n	80077cc <HAL_UART_IRQHandler+0x224>
 80077ca:	e0ad      	b.n	8007928 <HAL_UART_IRQHandler+0x380>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2210      	movs	r2, #16
 80077d0:	4013      	ands	r3, r2
 80077d2:	d100      	bne.n	80077d6 <HAL_UART_IRQHandler+0x22e>
 80077d4:	e0a8      	b.n	8007928 <HAL_UART_IRQHandler+0x380>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2210      	movs	r2, #16
 80077dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2240      	movs	r2, #64	; 0x40
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	d15f      	bne.n	80078ac <HAL_UART_IRQHandler+0x304>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	2108      	movs	r1, #8
 80077f6:	187b      	adds	r3, r7, r1
 80077f8:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80077fa:	187b      	adds	r3, r7, r1
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d100      	bne.n	8007804 <HAL_UART_IRQHandler+0x25c>
 8007802:	e0b4      	b.n	800796e <HAL_UART_IRQHandler+0x3c6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2258      	movs	r2, #88	; 0x58
 8007808:	5a9b      	ldrh	r3, [r3, r2]
 800780a:	187a      	adds	r2, r7, r1
 800780c:	8812      	ldrh	r2, [r2, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d300      	bcc.n	8007814 <HAL_UART_IRQHandler+0x26c>
 8007812:	e0ac      	b.n	800796e <HAL_UART_IRQHandler+0x3c6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	187a      	adds	r2, r7, r1
 8007818:	215a      	movs	r1, #90	; 0x5a
 800781a:	8812      	ldrh	r2, [r2, #0]
 800781c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	2b20      	cmp	r3, #32
 8007826:	d02a      	beq.n	800787e <HAL_UART_IRQHandler+0x2d6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	491d      	ldr	r1, [pc, #116]	; (80078a8 <HAL_UART_IRQHandler+0x300>)
 8007834:	400a      	ands	r2, r1
 8007836:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2101      	movs	r1, #1
 8007844:	438a      	bics	r2, r1
 8007846:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2140      	movs	r1, #64	; 0x40
 8007854:	438a      	bics	r2, r1
 8007856:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2110      	movs	r1, #16
 8007870:	438a      	bics	r2, r1
 8007872:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	0018      	movs	r0, r3
 800787a:	f7fb ffff 	bl	800387c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2258      	movs	r2, #88	; 0x58
 8007882:	5a9a      	ldrh	r2, [r3, r2]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	215a      	movs	r1, #90	; 0x5a
 8007888:	5a5b      	ldrh	r3, [r3, r1]
 800788a:	b29b      	uxth	r3, r3
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	0011      	movs	r1, r2
 8007894:	0018      	movs	r0, r3
 8007896:	f000 f885 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800789a:	e068      	b.n	800796e <HAL_UART_IRQHandler+0x3c6>
 800789c:	0000080f 	.word	0x0000080f
 80078a0:	04000120 	.word	0x04000120
 80078a4:	08007fc1 	.word	0x08007fc1
 80078a8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2258      	movs	r2, #88	; 0x58
 80078b0:	5a99      	ldrh	r1, [r3, r2]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	225a      	movs	r2, #90	; 0x5a
 80078b6:	5a9b      	ldrh	r3, [r3, r2]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	200a      	movs	r0, #10
 80078bc:	183b      	adds	r3, r7, r0
 80078be:	1a8a      	subs	r2, r1, r2
 80078c0:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	225a      	movs	r2, #90	; 0x5a
 80078c6:	5a9b      	ldrh	r3, [r3, r2]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d051      	beq.n	8007972 <HAL_UART_IRQHandler+0x3ca>
          &&(nb_rx_data > 0U) )
 80078ce:	183b      	adds	r3, r7, r0
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d04d      	beq.n	8007972 <HAL_UART_IRQHandler+0x3ca>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4927      	ldr	r1, [pc, #156]	; (8007980 <HAL_UART_IRQHandler+0x3d8>)
 80078e2:	400a      	ands	r2, r1
 80078e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2101      	movs	r1, #1
 80078f2:	438a      	bics	r2, r1
 80078f4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2110      	movs	r1, #16
 8007914:	438a      	bics	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007918:	183b      	adds	r3, r7, r0
 800791a:	881a      	ldrh	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	0011      	movs	r1, r2
 8007920:	0018      	movs	r0, r3
 8007922:	f000 f83f 	bl	80079a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007926:	e024      	b.n	8007972 <HAL_UART_IRQHandler+0x3ca>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	4013      	ands	r3, r2
 800792e:	d00d      	beq.n	800794c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	4013      	ands	r3, r2
 8007936:	d009      	beq.n	800794c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <HAL_UART_IRQHandler+0x3ce>
    {
      huart->TxISR(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	0010      	movs	r0, r2
 8007948:	4798      	blx	r3
    }
    return;
 800794a:	e014      	b.n	8007976 <HAL_UART_IRQHandler+0x3ce>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2240      	movs	r2, #64	; 0x40
 8007950:	4013      	ands	r3, r2
 8007952:	d011      	beq.n	8007978 <HAL_UART_IRQHandler+0x3d0>
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2240      	movs	r2, #64	; 0x40
 8007958:	4013      	ands	r3, r2
 800795a:	d00d      	beq.n	8007978 <HAL_UART_IRQHandler+0x3d0>
  {
    UART_EndTransmit_IT(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	0018      	movs	r0, r3
 8007960:	f000 fb45 	bl	8007fee <UART_EndTransmit_IT>
    return;
 8007964:	e008      	b.n	8007978 <HAL_UART_IRQHandler+0x3d0>
      return;
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	e006      	b.n	8007978 <HAL_UART_IRQHandler+0x3d0>
    return;
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	e004      	b.n	8007978 <HAL_UART_IRQHandler+0x3d0>
      return;
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	e002      	b.n	8007978 <HAL_UART_IRQHandler+0x3d0>
      return;
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	e000      	b.n	8007978 <HAL_UART_IRQHandler+0x3d0>
    return;
 8007976:	46c0      	nop			; (mov r8, r8)
  }

}
 8007978:	46bd      	mov	sp, r7
 800797a:	b008      	add	sp, #32
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	fffffedf 	.word	0xfffffedf

08007984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800799c:	46c0      	nop			; (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	000a      	movs	r2, r1
 80079ae:	1cbb      	adds	r3, r7, #2
 80079b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b002      	add	sp, #8
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c4:	231e      	movs	r3, #30
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a97      	ldr	r2, [pc, #604]	; (8007c48 <UART_SetConfig+0x28c>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	0019      	movs	r1, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4a92      	ldr	r2, [pc, #584]	; (8007c4c <UART_SetConfig+0x290>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	0019      	movs	r1, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	4a89      	ldr	r2, [pc, #548]	; (8007c50 <UART_SetConfig+0x294>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	0019      	movs	r1, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a85      	ldr	r2, [pc, #532]	; (8007c54 <UART_SetConfig+0x298>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d127      	bne.n	8007a92 <UART_SetConfig+0xd6>
 8007a42:	4b85      	ldr	r3, [pc, #532]	; (8007c58 <UART_SetConfig+0x29c>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	2203      	movs	r2, #3
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d00d      	beq.n	8007a6a <UART_SetConfig+0xae>
 8007a4e:	d81b      	bhi.n	8007a88 <UART_SetConfig+0xcc>
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d014      	beq.n	8007a7e <UART_SetConfig+0xc2>
 8007a54:	d818      	bhi.n	8007a88 <UART_SetConfig+0xcc>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <UART_SetConfig+0xa4>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00a      	beq.n	8007a74 <UART_SetConfig+0xb8>
 8007a5e:	e013      	b.n	8007a88 <UART_SetConfig+0xcc>
 8007a60:	231f      	movs	r3, #31
 8007a62:	18fb      	adds	r3, r7, r3
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e035      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007a6a:	231f      	movs	r3, #31
 8007a6c:	18fb      	adds	r3, r7, r3
 8007a6e:	2202      	movs	r2, #2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e030      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007a74:	231f      	movs	r3, #31
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	2204      	movs	r2, #4
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e02b      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007a7e:	231f      	movs	r3, #31
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	e026      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007a88:	231f      	movs	r3, #31
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e021      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a71      	ldr	r2, [pc, #452]	; (8007c5c <UART_SetConfig+0x2a0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d104      	bne.n	8007aa6 <UART_SetConfig+0xea>
 8007a9c:	231f      	movs	r3, #31
 8007a9e:	18fb      	adds	r3, r7, r3
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	e017      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6d      	ldr	r2, [pc, #436]	; (8007c60 <UART_SetConfig+0x2a4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d104      	bne.n	8007aba <UART_SetConfig+0xfe>
 8007ab0:	231f      	movs	r3, #31
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e00d      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a69      	ldr	r2, [pc, #420]	; (8007c64 <UART_SetConfig+0x2a8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d104      	bne.n	8007ace <UART_SetConfig+0x112>
 8007ac4:	231f      	movs	r3, #31
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e003      	b.n	8007ad6 <UART_SetConfig+0x11a>
 8007ace:	231f      	movs	r3, #31
 8007ad0:	18fb      	adds	r3, r7, r3
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69da      	ldr	r2, [r3, #28]
 8007ada:	2380      	movs	r3, #128	; 0x80
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d15d      	bne.n	8007b9e <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8007ae2:	231f      	movs	r3, #31
 8007ae4:	18fb      	adds	r3, r7, r3
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d015      	beq.n	8007b18 <UART_SetConfig+0x15c>
 8007aec:	dc18      	bgt.n	8007b20 <UART_SetConfig+0x164>
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d00d      	beq.n	8007b0e <UART_SetConfig+0x152>
 8007af2:	dc15      	bgt.n	8007b20 <UART_SetConfig+0x164>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <UART_SetConfig+0x142>
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d005      	beq.n	8007b08 <UART_SetConfig+0x14c>
 8007afc:	e010      	b.n	8007b20 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007afe:	f7fe f83f 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007b02:	0003      	movs	r3, r0
 8007b04:	61bb      	str	r3, [r7, #24]
        break;
 8007b06:	e012      	b.n	8007b2e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b08:	4b57      	ldr	r3, [pc, #348]	; (8007c68 <UART_SetConfig+0x2ac>)
 8007b0a:	61bb      	str	r3, [r7, #24]
        break;
 8007b0c:	e00f      	b.n	8007b2e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b0e:	f7fd ffc5 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8007b12:	0003      	movs	r3, r0
 8007b14:	61bb      	str	r3, [r7, #24]
        break;
 8007b16:	e00a      	b.n	8007b2e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	61bb      	str	r3, [r7, #24]
        break;
 8007b1e:	e006      	b.n	8007b2e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b24:	231e      	movs	r3, #30
 8007b26:	18fb      	adds	r3, r7, r3
 8007b28:	2201      	movs	r2, #1
 8007b2a:	701a      	strb	r2, [r3, #0]
        break;
 8007b2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d100      	bne.n	8007b36 <UART_SetConfig+0x17a>
 8007b34:	e07b      	b.n	8007c2e <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	005a      	lsls	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	18d2      	adds	r2, r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	0019      	movs	r1, r3
 8007b48:	0010      	movs	r0, r2
 8007b4a:	f7f8 faef 	bl	800012c <__udivsi3>
 8007b4e:	0003      	movs	r3, r0
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d91c      	bls.n	8007b94 <UART_SetConfig+0x1d8>
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	2380      	movs	r3, #128	; 0x80
 8007b5e:	025b      	lsls	r3, r3, #9
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d217      	bcs.n	8007b94 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	200e      	movs	r0, #14
 8007b6a:	183b      	adds	r3, r7, r0
 8007b6c:	210f      	movs	r1, #15
 8007b6e:	438a      	bics	r2, r1
 8007b70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2207      	movs	r2, #7
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	b299      	uxth	r1, r3
 8007b7e:	183b      	adds	r3, r7, r0
 8007b80:	183a      	adds	r2, r7, r0
 8007b82:	8812      	ldrh	r2, [r2, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	183a      	adds	r2, r7, r0
 8007b8e:	8812      	ldrh	r2, [r2, #0]
 8007b90:	60da      	str	r2, [r3, #12]
 8007b92:	e04c      	b.n	8007c2e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007b94:	231e      	movs	r3, #30
 8007b96:	18fb      	adds	r3, r7, r3
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e047      	b.n	8007c2e <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b9e:	231f      	movs	r3, #31
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d015      	beq.n	8007bd4 <UART_SetConfig+0x218>
 8007ba8:	dc18      	bgt.n	8007bdc <UART_SetConfig+0x220>
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d00d      	beq.n	8007bca <UART_SetConfig+0x20e>
 8007bae:	dc15      	bgt.n	8007bdc <UART_SetConfig+0x220>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <UART_SetConfig+0x1fe>
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d005      	beq.n	8007bc4 <UART_SetConfig+0x208>
 8007bb8:	e010      	b.n	8007bdc <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bba:	f7fd ffe1 	bl	8005b80 <HAL_RCC_GetPCLK1Freq>
 8007bbe:	0003      	movs	r3, r0
 8007bc0:	61bb      	str	r3, [r7, #24]
        break;
 8007bc2:	e012      	b.n	8007bea <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b28      	ldr	r3, [pc, #160]	; (8007c68 <UART_SetConfig+0x2ac>)
 8007bc6:	61bb      	str	r3, [r7, #24]
        break;
 8007bc8:	e00f      	b.n	8007bea <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7fd ff67 	bl	8005a9c <HAL_RCC_GetSysClockFreq>
 8007bce:	0003      	movs	r3, r0
 8007bd0:	61bb      	str	r3, [r7, #24]
        break;
 8007bd2:	e00a      	b.n	8007bea <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	61bb      	str	r3, [r7, #24]
        break;
 8007bda:	e006      	b.n	8007bea <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be0:	231e      	movs	r3, #30
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
        break;
 8007be8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01e      	beq.n	8007c2e <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	085a      	lsrs	r2, r3, #1
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	18d2      	adds	r2, r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	0019      	movs	r1, r3
 8007c00:	0010      	movs	r0, r2
 8007c02:	f7f8 fa93 	bl	800012c <__udivsi3>
 8007c06:	0003      	movs	r3, r0
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d909      	bls.n	8007c26 <UART_SetConfig+0x26a>
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	2380      	movs	r3, #128	; 0x80
 8007c16:	025b      	lsls	r3, r3, #9
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d204      	bcs.n	8007c26 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	60da      	str	r2, [r3, #12]
 8007c24:	e003      	b.n	8007c2e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8007c26:	231e      	movs	r3, #30
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c3a:	231e      	movs	r3, #30
 8007c3c:	18fb      	adds	r3, r7, r3
 8007c3e:	781b      	ldrb	r3, [r3, #0]
}
 8007c40:	0018      	movs	r0, r3
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b008      	add	sp, #32
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	efff69f3 	.word	0xefff69f3
 8007c4c:	ffffcfff 	.word	0xffffcfff
 8007c50:	fffff4ff 	.word	0xfffff4ff
 8007c54:	40013800 	.word	0x40013800
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	40004400 	.word	0x40004400
 8007c60:	40004800 	.word	0x40004800
 8007c64:	40004c00 	.word	0x40004c00
 8007c68:	007a1200 	.word	0x007a1200

08007c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a4a      	ldr	r2, [pc, #296]	; (8007db0 <UART_AdvFeatureConfig+0x144>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	0019      	movs	r1, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	4a43      	ldr	r2, [pc, #268]	; (8007db4 <UART_AdvFeatureConfig+0x148>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	0019      	movs	r1, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d00b      	beq.n	8007cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <UART_AdvFeatureConfig+0x14c>)
 8007cca:	4013      	ands	r3, r2
 8007ccc:	0019      	movs	r1, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	2208      	movs	r2, #8
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d00b      	beq.n	8007cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4a34      	ldr	r2, [pc, #208]	; (8007dbc <UART_AdvFeatureConfig+0x150>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	0019      	movs	r1, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2210      	movs	r2, #16
 8007d02:	4013      	ands	r3, r2
 8007d04:	d00b      	beq.n	8007d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4a2c      	ldr	r2, [pc, #176]	; (8007dc0 <UART_AdvFeatureConfig+0x154>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	0019      	movs	r1, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2220      	movs	r2, #32
 8007d24:	4013      	ands	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	4a25      	ldr	r2, [pc, #148]	; (8007dc4 <UART_AdvFeatureConfig+0x158>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	0019      	movs	r1, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2240      	movs	r2, #64	; 0x40
 8007d46:	4013      	ands	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <UART_AdvFeatureConfig+0x15c>)
 8007d52:	4013      	ands	r3, r2
 8007d54:	0019      	movs	r1, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d66:	2380      	movs	r3, #128	; 0x80
 8007d68:	035b      	lsls	r3, r3, #13
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d10b      	bne.n	8007d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <UART_AdvFeatureConfig+0x160>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	0019      	movs	r1, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	d00b      	beq.n	8007da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	4a0e      	ldr	r2, [pc, #56]	; (8007dd0 <UART_AdvFeatureConfig+0x164>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b002      	add	sp, #8
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	fffdffff 	.word	0xfffdffff
 8007db4:	fffeffff 	.word	0xfffeffff
 8007db8:	fffbffff 	.word	0xfffbffff
 8007dbc:	ffff7fff 	.word	0xffff7fff
 8007dc0:	ffffefff 	.word	0xffffefff
 8007dc4:	ffffdfff 	.word	0xffffdfff
 8007dc8:	ffefffff 	.word	0xffefffff
 8007dcc:	ff9fffff 	.word	0xff9fffff
 8007dd0:	fff7ffff 	.word	0xfff7ffff

08007dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2280      	movs	r2, #128	; 0x80
 8007de0:	2100      	movs	r1, #0
 8007de2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007de4:	f7fb fc3e 	bl	8003664 <HAL_GetTick>
 8007de8:	0003      	movs	r3, r0
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2208      	movs	r2, #8
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d10c      	bne.n	8007e14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2280      	movs	r2, #128	; 0x80
 8007dfe:	0391      	lsls	r1, r2, #14
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <UART_CheckIdleState+0x8c>)
 8007e04:	9200      	str	r2, [sp, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f000 f82c 	bl	8007e64 <UART_WaitOnFlagUntilTimeout>
 8007e0c:	1e03      	subs	r3, r0, #0
 8007e0e:	d001      	beq.n	8007e14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e021      	b.n	8007e58 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d10c      	bne.n	8007e3c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2280      	movs	r2, #128	; 0x80
 8007e26:	03d1      	lsls	r1, r2, #15
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <UART_CheckIdleState+0x8c>)
 8007e2c:	9200      	str	r2, [sp, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f000 f818 	bl	8007e64 <UART_WaitOnFlagUntilTimeout>
 8007e34:	1e03      	subs	r3, r0, #0
 8007e36:	d001      	beq.n	8007e3c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e00d      	b.n	8007e58 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2220      	movs	r2, #32
 8007e46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2274      	movs	r2, #116	; 0x74
 8007e52:	2100      	movs	r1, #0
 8007e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b004      	add	sp, #16
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	01ffffff 	.word	0x01ffffff

08007e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	1dfb      	adds	r3, r7, #7
 8007e72:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e74:	e05e      	b.n	8007f34 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	d05b      	beq.n	8007f34 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7c:	f7fb fbf2 	bl	8003664 <HAL_GetTick>
 8007e80:	0002      	movs	r2, r0
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d11b      	bne.n	8007eca <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	492f      	ldr	r1, [pc, #188]	; (8007f5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2101      	movs	r1, #1
 8007eae:	438a      	bics	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2274      	movs	r2, #116	; 0x74
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e044      	b.n	8007f54 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2204      	movs	r2, #4
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d02e      	beq.n	8007f34 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	2380      	movs	r3, #128	; 0x80
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	401a      	ands	r2, r3
 8007ee2:	2380      	movs	r3, #128	; 0x80
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d124      	bne.n	8007f34 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2280      	movs	r2, #128	; 0x80
 8007ef0:	0112      	lsls	r2, r2, #4
 8007ef2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4917      	ldr	r1, [pc, #92]	; (8007f5c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007f00:	400a      	ands	r2, r1
 8007f02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2101      	movs	r1, #1
 8007f10:	438a      	bics	r2, r1
 8007f12:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	2120      	movs	r1, #32
 8007f26:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2274      	movs	r2, #116	; 0x74
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e00f      	b.n	8007f54 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	425a      	negs	r2, r3
 8007f44:	4153      	adcs	r3, r2
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	001a      	movs	r2, r3
 8007f4a:	1dfb      	adds	r3, r7, #7
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d091      	beq.n	8007e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b004      	add	sp, #16
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	fffffe5f 	.word	0xfffffe5f

08007f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4912      	ldr	r1, [pc, #72]	; (8007fbc <UART_EndRxTransfer+0x5c>)
 8007f74:	400a      	ands	r2, r1
 8007f76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2101      	movs	r1, #1
 8007f84:	438a      	bics	r2, r1
 8007f86:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d107      	bne.n	8007fa0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2110      	movs	r1, #16
 8007f9c:	438a      	bics	r2, r1
 8007f9e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b002      	add	sp, #8
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	fffffedf 	.word	0xfffffedf

08007fc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	225a      	movs	r2, #90	; 0x5a
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2252      	movs	r2, #82	; 0x52
 8007fda:	2100      	movs	r1, #0
 8007fdc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f7ff fcd7 	bl	8007994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b004      	add	sp, #16
 8007fec:	bd80      	pop	{r7, pc}

08007fee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2140      	movs	r1, #64	; 0x40
 8008002:	438a      	bics	r2, r1
 8008004:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	0018      	movs	r0, r3
 8008016:	f7ff fcb5 	bl	8007984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	46bd      	mov	sp, r7
 800801e:	b002      	add	sp, #8
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2244      	movs	r2, #68	; 0x44
 8008030:	2100      	movs	r1, #0
 8008032:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <USB_EnableGlobalInt+0x28>)
 8008036:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	b299      	uxth	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2240      	movs	r2, #64	; 0x40
 8008040:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	0018      	movs	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	b004      	add	sp, #16
 800804a:	bd80      	pop	{r7, pc}
 800804c:	0000bf80 	.word	0x0000bf80

08008050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008058:	4b09      	ldr	r3, [pc, #36]	; (8008080 <USB_DisableGlobalInt+0x30>)
 800805a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	5a9b      	ldrh	r3, [r3, r2]
 8008062:	b29b      	uxth	r3, r3
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	b292      	uxth	r2, r2
 8008068:	43d2      	mvns	r2, r2
 800806a:	b292      	uxth	r2, r2
 800806c:	4013      	ands	r3, r2
 800806e:	b299      	uxth	r1, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2240      	movs	r2, #64	; 0x40
 8008074:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	0018      	movs	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	b004      	add	sp, #16
 800807e:	bd80      	pop	{r7, pc}
 8008080:	0000bf80 	.word	0x0000bf80

08008084 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008084:	b084      	sub	sp, #16
 8008086:	b590      	push	{r4, r7, lr}
 8008088:	46c6      	mov	lr, r8
 800808a:	b500      	push	{lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	2004      	movs	r0, #4
 8008094:	2410      	movs	r4, #16
 8008096:	46a4      	mov	ip, r4
 8008098:	2408      	movs	r4, #8
 800809a:	46a0      	mov	r8, r4
 800809c:	44b8      	add	r8, r7
 800809e:	44c4      	add	ip, r8
 80080a0:	4460      	add	r0, ip
 80080a2:	6001      	str	r1, [r0, #0]
 80080a4:	6042      	str	r2, [r0, #4]
 80080a6:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	2101      	movs	r1, #1
 80080ae:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2240      	movs	r2, #64	; 0x40
 80080b4:	2100      	movs	r1, #0
 80080b6:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2244      	movs	r2, #68	; 0x44
 80080bc:	2100      	movs	r1, #0
 80080be:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2250      	movs	r2, #80	; 0x50
 80080c4:	2100      	movs	r1, #0
 80080c6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	0018      	movs	r0, r3
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b002      	add	sp, #8
 80080d0:	bc80      	pop	{r7}
 80080d2:	46b8      	mov	r8, r7
 80080d4:	bc90      	pop	{r4, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	b004      	add	sp, #16
 80080da:	4718      	bx	r3

080080dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b09a      	sub	sp, #104	; 0x68
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80080e6:	2367      	movs	r3, #103	; 0x67
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	18d3      	adds	r3, r2, r3
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	2364      	movs	r3, #100	; 0x64
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	49cf      	ldr	r1, [pc, #828]	; (8008440 <USB_ActivateEndpoint+0x364>)
 8008102:	400a      	ands	r2, r1
 8008104:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	78db      	ldrb	r3, [r3, #3]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d017      	beq.n	800813e <USB_ActivateEndpoint+0x62>
 800810e:	dc28      	bgt.n	8008162 <USB_ActivateEndpoint+0x86>
 8008110:	2b02      	cmp	r3, #2
 8008112:	d00e      	beq.n	8008132 <USB_ActivateEndpoint+0x56>
 8008114:	dc25      	bgt.n	8008162 <USB_ActivateEndpoint+0x86>
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <USB_ActivateEndpoint+0x44>
 800811a:	2b01      	cmp	r3, #1
 800811c:	d018      	beq.n	8008150 <USB_ActivateEndpoint+0x74>
 800811e:	e020      	b.n	8008162 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008120:	2264      	movs	r2, #100	; 0x64
 8008122:	18bb      	adds	r3, r7, r2
 8008124:	18ba      	adds	r2, r7, r2
 8008126:	8812      	ldrh	r2, [r2, #0]
 8008128:	2180      	movs	r1, #128	; 0x80
 800812a:	0089      	lsls	r1, r1, #2
 800812c:	430a      	orrs	r2, r1
 800812e:	801a      	strh	r2, [r3, #0]
      break;
 8008130:	e01c      	b.n	800816c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008132:	2264      	movs	r2, #100	; 0x64
 8008134:	18bb      	adds	r3, r7, r2
 8008136:	18ba      	adds	r2, r7, r2
 8008138:	8812      	ldrh	r2, [r2, #0]
 800813a:	801a      	strh	r2, [r3, #0]
      break;
 800813c:	e016      	b.n	800816c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800813e:	2264      	movs	r2, #100	; 0x64
 8008140:	18bb      	adds	r3, r7, r2
 8008142:	18ba      	adds	r2, r7, r2
 8008144:	8812      	ldrh	r2, [r2, #0]
 8008146:	21c0      	movs	r1, #192	; 0xc0
 8008148:	00c9      	lsls	r1, r1, #3
 800814a:	430a      	orrs	r2, r1
 800814c:	801a      	strh	r2, [r3, #0]
      break;
 800814e:	e00d      	b.n	800816c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008150:	2264      	movs	r2, #100	; 0x64
 8008152:	18bb      	adds	r3, r7, r2
 8008154:	18ba      	adds	r2, r7, r2
 8008156:	8812      	ldrh	r2, [r2, #0]
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	00c9      	lsls	r1, r1, #3
 800815c:	430a      	orrs	r2, r1
 800815e:	801a      	strh	r2, [r3, #0]
      break;
 8008160:	e004      	b.n	800816c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008162:	2367      	movs	r3, #103	; 0x67
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	2201      	movs	r2, #1
 8008168:	701a      	strb	r2, [r3, #0]
      break;
 800816a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	18d3      	adds	r3, r2, r3
 8008176:	2264      	movs	r2, #100	; 0x64
 8008178:	18ba      	adds	r2, r7, r2
 800817a:	8812      	ldrh	r2, [r2, #0]
 800817c:	49b1      	ldr	r1, [pc, #708]	; (8008444 <USB_ActivateEndpoint+0x368>)
 800817e:	430a      	orrs	r2, r1
 8008180:	b292      	uxth	r2, r2
 8008182:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	18d3      	adds	r3, r2, r3
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	b21b      	sxth	r3, r3
 8008194:	4aac      	ldr	r2, [pc, #688]	; (8008448 <USB_ActivateEndpoint+0x36c>)
 8008196:	4013      	ands	r3, r2
 8008198:	b21a      	sxth	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b21b      	sxth	r3, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	b21a      	sxth	r2, r3
 80081a4:	215e      	movs	r1, #94	; 0x5e
 80081a6:	187b      	adds	r3, r7, r1
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	187a      	adds	r2, r7, r1
 80081b6:	8812      	ldrh	r2, [r2, #0]
 80081b8:	49a2      	ldr	r1, [pc, #648]	; (8008444 <USB_ActivateEndpoint+0x368>)
 80081ba:	430a      	orrs	r2, r1
 80081bc:	b292      	uxth	r2, r2
 80081be:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	7b1b      	ldrb	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d000      	beq.n	80081ca <USB_ActivateEndpoint+0xee>
 80081c8:	e150      	b.n	800846c <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	785b      	ldrb	r3, [r3, #1]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d100      	bne.n	80081d4 <USB_ActivateEndpoint+0xf8>
 80081d2:	e07a      	b.n	80082ca <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2250      	movs	r2, #80	; 0x50
 80081dc:	5a9b      	ldrh	r3, [r3, r2]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	001a      	movs	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	189b      	adds	r3, r3, r2
 80081e6:	617b      	str	r3, [r7, #20]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	00da      	lsls	r2, r3, #3
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	18d3      	adds	r3, r2, r3
 80081f2:	2280      	movs	r2, #128	; 0x80
 80081f4:	00d2      	lsls	r2, r2, #3
 80081f6:	4694      	mov	ip, r2
 80081f8:	4463      	add	r3, ip
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	18db      	adds	r3, r3, r3
 8008206:	b29a      	uxth	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	18d2      	adds	r2, r2, r3
 8008216:	210e      	movs	r1, #14
 8008218:	187b      	adds	r3, r7, r1
 800821a:	8812      	ldrh	r2, [r2, #0]
 800821c:	801a      	strh	r2, [r3, #0]
 800821e:	187b      	adds	r3, r7, r1
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	2240      	movs	r2, #64	; 0x40
 8008224:	4013      	ands	r3, r2
 8008226:	d016      	beq.n	8008256 <USB_ActivateEndpoint+0x17a>
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	18d3      	adds	r3, r2, r3
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	200c      	movs	r0, #12
 8008238:	183b      	adds	r3, r7, r0
 800823a:	4983      	ldr	r1, [pc, #524]	; (8008448 <USB_ActivateEndpoint+0x36c>)
 800823c:	400a      	ands	r2, r1
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	183a      	adds	r2, r7, r0
 800824c:	8812      	ldrh	r2, [r2, #0]
 800824e:	497f      	ldr	r1, [pc, #508]	; (800844c <USB_ActivateEndpoint+0x370>)
 8008250:	430a      	orrs	r2, r1
 8008252:	b292      	uxth	r2, r2
 8008254:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	78db      	ldrb	r3, [r3, #3]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d01d      	beq.n	800829a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29a      	uxth	r2, r3
 800826c:	2008      	movs	r0, #8
 800826e:	183b      	adds	r3, r7, r0
 8008270:	4977      	ldr	r1, [pc, #476]	; (8008450 <USB_ActivateEndpoint+0x374>)
 8008272:	400a      	ands	r2, r1
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	183b      	adds	r3, r7, r0
 8008278:	183a      	adds	r2, r7, r0
 800827a:	8812      	ldrh	r2, [r2, #0]
 800827c:	2120      	movs	r1, #32
 800827e:	404a      	eors	r2, r1
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	18d3      	adds	r3, r2, r3
 800828c:	183a      	adds	r2, r7, r0
 800828e:	8812      	ldrh	r2, [r2, #0]
 8008290:	496c      	ldr	r1, [pc, #432]	; (8008444 <USB_ActivateEndpoint+0x368>)
 8008292:	430a      	orrs	r2, r1
 8008294:	b292      	uxth	r2, r2
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e25e      	b.n	8008758 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	200a      	movs	r0, #10
 80082aa:	183b      	adds	r3, r7, r0
 80082ac:	4968      	ldr	r1, [pc, #416]	; (8008450 <USB_ActivateEndpoint+0x374>)
 80082ae:	400a      	ands	r2, r1
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	18d3      	adds	r3, r2, r3
 80082bc:	183a      	adds	r2, r7, r0
 80082be:	8812      	ldrh	r2, [r2, #0]
 80082c0:	4960      	ldr	r1, [pc, #384]	; (8008444 <USB_ActivateEndpoint+0x368>)
 80082c2:	430a      	orrs	r2, r1
 80082c4:	b292      	uxth	r2, r2
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e246      	b.n	8008758 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2250      	movs	r2, #80	; 0x50
 80082d2:	5a9b      	ldrh	r3, [r3, r2]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	001a      	movs	r2, r3
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	00da      	lsls	r2, r3, #3
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	18d3      	adds	r3, r2, r3
 80082e8:	4a5a      	ldr	r2, [pc, #360]	; (8008454 <USB_ActivateEndpoint+0x378>)
 80082ea:	4694      	mov	ip, r2
 80082ec:	4463      	add	r3, ip
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	88db      	ldrh	r3, [r3, #6]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	18db      	adds	r3, r3, r3
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2250      	movs	r2, #80	; 0x50
 8008308:	5a9b      	ldrh	r3, [r3, r2]
 800830a:	b29b      	uxth	r3, r3
 800830c:	001a      	movs	r2, r3
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	189b      	adds	r3, r3, r2
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	00da      	lsls	r2, r3, #3
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	18d3      	adds	r3, r2, r3
 800831e:	4a4e      	ldr	r2, [pc, #312]	; (8008458 <USB_ActivateEndpoint+0x37c>)
 8008320:	4694      	mov	ip, r2
 8008322:	4463      	add	r3, ip
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d110      	bne.n	8008350 <USB_ActivateEndpoint+0x274>
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	4a49      	ldr	r2, [pc, #292]	; (800845c <USB_ActivateEndpoint+0x380>)
 8008336:	4013      	ands	r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	4a46      	ldr	r2, [pc, #280]	; (8008460 <USB_ActivateEndpoint+0x384>)
 8008346:	4313      	orrs	r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e02b      	b.n	80083a8 <USB_ActivateEndpoint+0x2cc>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b3e      	cmp	r3, #62	; 0x3e
 8008356:	d812      	bhi.n	800837e <USB_ActivateEndpoint+0x2a2>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	663b      	str	r3, [r7, #96]	; 0x60
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2201      	movs	r2, #1
 8008366:	4013      	ands	r3, r2
 8008368:	d002      	beq.n	8008370 <USB_ActivateEndpoint+0x294>
 800836a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800836c:	3301      	adds	r3, #1
 800836e:	663b      	str	r3, [r7, #96]	; 0x60
 8008370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008372:	b29b      	uxth	r3, r3
 8008374:	029b      	lsls	r3, r3, #10
 8008376:	b29a      	uxth	r2, r3
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e014      	b.n	80083a8 <USB_ActivateEndpoint+0x2cc>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	663b      	str	r3, [r7, #96]	; 0x60
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	221f      	movs	r2, #31
 800838c:	4013      	ands	r3, r2
 800838e:	d102      	bne.n	8008396 <USB_ActivateEndpoint+0x2ba>
 8008390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008392:	3b01      	subs	r3, #1
 8008394:	663b      	str	r3, [r7, #96]	; 0x60
 8008396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008398:	b29b      	uxth	r3, r3
 800839a:	029b      	lsls	r3, r3, #10
 800839c:	b29b      	uxth	r3, r3
 800839e:	4a30      	ldr	r2, [pc, #192]	; (8008460 <USB_ActivateEndpoint+0x384>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	18d2      	adds	r2, r2, r3
 80083b2:	211e      	movs	r1, #30
 80083b4:	187b      	adds	r3, r7, r1
 80083b6:	8812      	ldrh	r2, [r2, #0]
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	187b      	adds	r3, r7, r1
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	2380      	movs	r3, #128	; 0x80
 80083c0:	01db      	lsls	r3, r3, #7
 80083c2:	4013      	ands	r3, r2
 80083c4:	d016      	beq.n	80083f4 <USB_ActivateEndpoint+0x318>
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	18d3      	adds	r3, r2, r3
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	201c      	movs	r0, #28
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	491b      	ldr	r1, [pc, #108]	; (8008448 <USB_ActivateEndpoint+0x36c>)
 80083da:	400a      	ands	r2, r1
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	18d3      	adds	r3, r2, r3
 80083e8:	183a      	adds	r2, r7, r0
 80083ea:	8812      	ldrh	r2, [r2, #0]
 80083ec:	491d      	ldr	r1, [pc, #116]	; (8008464 <USB_ActivateEndpoint+0x388>)
 80083ee:	430a      	orrs	r2, r1
 80083f0:	b292      	uxth	r2, r2
 80083f2:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	18d3      	adds	r3, r2, r3
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29a      	uxth	r2, r3
 8008402:	201a      	movs	r0, #26
 8008404:	183b      	adds	r3, r7, r0
 8008406:	4918      	ldr	r1, [pc, #96]	; (8008468 <USB_ActivateEndpoint+0x38c>)
 8008408:	400a      	ands	r2, r1
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	183b      	adds	r3, r7, r0
 800840e:	183a      	adds	r2, r7, r0
 8008410:	8812      	ldrh	r2, [r2, #0]
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	0149      	lsls	r1, r1, #5
 8008416:	404a      	eors	r2, r1
 8008418:	801a      	strh	r2, [r3, #0]
 800841a:	183b      	adds	r3, r7, r0
 800841c:	183a      	adds	r2, r7, r0
 800841e:	8812      	ldrh	r2, [r2, #0]
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	0189      	lsls	r1, r1, #6
 8008424:	404a      	eors	r2, r1
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	18d3      	adds	r3, r2, r3
 8008432:	183a      	adds	r2, r7, r0
 8008434:	8812      	ldrh	r2, [r2, #0]
 8008436:	4903      	ldr	r1, [pc, #12]	; (8008444 <USB_ActivateEndpoint+0x368>)
 8008438:	430a      	orrs	r2, r1
 800843a:	b292      	uxth	r2, r2
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	e18b      	b.n	8008758 <USB_ActivateEndpoint+0x67c>
 8008440:	ffff898f 	.word	0xffff898f
 8008444:	ffff8080 	.word	0xffff8080
 8008448:	ffff8f8f 	.word	0xffff8f8f
 800844c:	ffff80c0 	.word	0xffff80c0
 8008450:	ffff8fbf 	.word	0xffff8fbf
 8008454:	00000404 	.word	0x00000404
 8008458:	00000406 	.word	0x00000406
 800845c:	ffff83ff 	.word	0xffff83ff
 8008460:	ffff8000 	.word	0xffff8000
 8008464:	ffffc080 	.word	0xffffc080
 8008468:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	18d3      	adds	r3, r2, r3
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29a      	uxth	r2, r3
 800847a:	205c      	movs	r0, #92	; 0x5c
 800847c:	183b      	adds	r3, r7, r0
 800847e:	49ba      	ldr	r1, [pc, #744]	; (8008768 <USB_ActivateEndpoint+0x68c>)
 8008480:	400a      	ands	r2, r1
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	18d3      	adds	r3, r2, r3
 800848e:	183a      	adds	r2, r7, r0
 8008490:	8812      	ldrh	r2, [r2, #0]
 8008492:	49b6      	ldr	r1, [pc, #728]	; (800876c <USB_ActivateEndpoint+0x690>)
 8008494:	430a      	orrs	r2, r1
 8008496:	b292      	uxth	r2, r2
 8008498:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	65bb      	str	r3, [r7, #88]	; 0x58
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2250      	movs	r2, #80	; 0x50
 80084a2:	5a9b      	ldrh	r3, [r3, r2]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	001a      	movs	r2, r3
 80084a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084aa:	189b      	adds	r3, r3, r2
 80084ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	00da      	lsls	r2, r3, #3
 80084b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084b6:	18d3      	adds	r3, r2, r3
 80084b8:	2280      	movs	r2, #128	; 0x80
 80084ba:	00d2      	lsls	r2, r2, #3
 80084bc:	4694      	mov	ip, r2
 80084be:	4463      	add	r3, ip
 80084c0:	657b      	str	r3, [r7, #84]	; 0x54
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	891b      	ldrh	r3, [r3, #8]
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	18db      	adds	r3, r3, r3
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	653b      	str	r3, [r7, #80]	; 0x50
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2250      	movs	r2, #80	; 0x50
 80084da:	5a9b      	ldrh	r3, [r3, r2]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	001a      	movs	r2, r3
 80084e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	653b      	str	r3, [r7, #80]	; 0x50
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	00da      	lsls	r2, r3, #3
 80084ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ee:	18d3      	adds	r3, r2, r3
 80084f0:	4a9f      	ldr	r2, [pc, #636]	; (8008770 <USB_ActivateEndpoint+0x694>)
 80084f2:	4694      	mov	ip, r2
 80084f4:	4463      	add	r3, ip
 80084f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	895b      	ldrh	r3, [r3, #10]
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	b29b      	uxth	r3, r3
 8008500:	18db      	adds	r3, r3, r3
 8008502:	b29a      	uxth	r2, r3
 8008504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008506:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d000      	beq.n	8008512 <USB_ActivateEndpoint+0x436>
 8008510:	e087      	b.n	8008622 <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	18d2      	adds	r2, r2, r3
 800851c:	213c      	movs	r1, #60	; 0x3c
 800851e:	187b      	adds	r3, r7, r1
 8008520:	8812      	ldrh	r2, [r2, #0]
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	187b      	adds	r3, r7, r1
 8008526:	881a      	ldrh	r2, [r3, #0]
 8008528:	2380      	movs	r3, #128	; 0x80
 800852a:	01db      	lsls	r3, r3, #7
 800852c:	4013      	ands	r3, r2
 800852e:	d016      	beq.n	800855e <USB_ActivateEndpoint+0x482>
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	18d3      	adds	r3, r2, r3
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	203a      	movs	r0, #58	; 0x3a
 8008540:	183b      	adds	r3, r7, r0
 8008542:	4989      	ldr	r1, [pc, #548]	; (8008768 <USB_ActivateEndpoint+0x68c>)
 8008544:	400a      	ands	r2, r1
 8008546:	801a      	strh	r2, [r3, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	18d3      	adds	r3, r2, r3
 8008552:	183a      	adds	r2, r7, r0
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	4987      	ldr	r1, [pc, #540]	; (8008774 <USB_ActivateEndpoint+0x698>)
 8008558:	430a      	orrs	r2, r1
 800855a:	b292      	uxth	r2, r2
 800855c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	18d2      	adds	r2, r2, r3
 8008568:	2138      	movs	r1, #56	; 0x38
 800856a:	187b      	adds	r3, r7, r1
 800856c:	8812      	ldrh	r2, [r2, #0]
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	187b      	adds	r3, r7, r1
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	2240      	movs	r2, #64	; 0x40
 8008576:	4013      	ands	r3, r2
 8008578:	d016      	beq.n	80085a8 <USB_ActivateEndpoint+0x4cc>
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	18d3      	adds	r3, r2, r3
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29a      	uxth	r2, r3
 8008588:	2036      	movs	r0, #54	; 0x36
 800858a:	183b      	adds	r3, r7, r0
 800858c:	4976      	ldr	r1, [pc, #472]	; (8008768 <USB_ActivateEndpoint+0x68c>)
 800858e:	400a      	ands	r2, r1
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	18d3      	adds	r3, r2, r3
 800859c:	183a      	adds	r2, r7, r0
 800859e:	8812      	ldrh	r2, [r2, #0]
 80085a0:	4975      	ldr	r1, [pc, #468]	; (8008778 <USB_ActivateEndpoint+0x69c>)
 80085a2:	430a      	orrs	r2, r1
 80085a4:	b292      	uxth	r2, r2
 80085a6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	18d3      	adds	r3, r2, r3
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	2034      	movs	r0, #52	; 0x34
 80085b8:	183b      	adds	r3, r7, r0
 80085ba:	4970      	ldr	r1, [pc, #448]	; (800877c <USB_ActivateEndpoint+0x6a0>)
 80085bc:	400a      	ands	r2, r1
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	183b      	adds	r3, r7, r0
 80085c2:	183a      	adds	r2, r7, r0
 80085c4:	8812      	ldrh	r2, [r2, #0]
 80085c6:	2180      	movs	r1, #128	; 0x80
 80085c8:	0149      	lsls	r1, r1, #5
 80085ca:	404a      	eors	r2, r1
 80085cc:	801a      	strh	r2, [r3, #0]
 80085ce:	183b      	adds	r3, r7, r0
 80085d0:	183a      	adds	r2, r7, r0
 80085d2:	8812      	ldrh	r2, [r2, #0]
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	0189      	lsls	r1, r1, #6
 80085d8:	404a      	eors	r2, r1
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	18d3      	adds	r3, r2, r3
 80085e6:	183a      	adds	r2, r7, r0
 80085e8:	8812      	ldrh	r2, [r2, #0]
 80085ea:	4965      	ldr	r1, [pc, #404]	; (8008780 <USB_ActivateEndpoint+0x6a4>)
 80085ec:	430a      	orrs	r2, r1
 80085ee:	b292      	uxth	r2, r2
 80085f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	2032      	movs	r0, #50	; 0x32
 8008602:	183b      	adds	r3, r7, r0
 8008604:	495f      	ldr	r1, [pc, #380]	; (8008784 <USB_ActivateEndpoint+0x6a8>)
 8008606:	400a      	ands	r2, r1
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	18d3      	adds	r3, r2, r3
 8008614:	183a      	adds	r2, r7, r0
 8008616:	8812      	ldrh	r2, [r2, #0]
 8008618:	4959      	ldr	r1, [pc, #356]	; (8008780 <USB_ActivateEndpoint+0x6a4>)
 800861a:	430a      	orrs	r2, r1
 800861c:	b292      	uxth	r2, r2
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	e09a      	b.n	8008758 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	18d2      	adds	r2, r2, r3
 800862c:	214a      	movs	r1, #74	; 0x4a
 800862e:	187b      	adds	r3, r7, r1
 8008630:	8812      	ldrh	r2, [r2, #0]
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	187b      	adds	r3, r7, r1
 8008636:	881a      	ldrh	r2, [r3, #0]
 8008638:	2380      	movs	r3, #128	; 0x80
 800863a:	01db      	lsls	r3, r3, #7
 800863c:	4013      	ands	r3, r2
 800863e:	d016      	beq.n	800866e <USB_ActivateEndpoint+0x592>
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	18d3      	adds	r3, r2, r3
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b29a      	uxth	r2, r3
 800864e:	2048      	movs	r0, #72	; 0x48
 8008650:	183b      	adds	r3, r7, r0
 8008652:	4945      	ldr	r1, [pc, #276]	; (8008768 <USB_ActivateEndpoint+0x68c>)
 8008654:	400a      	ands	r2, r1
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	183a      	adds	r2, r7, r0
 8008664:	8812      	ldrh	r2, [r2, #0]
 8008666:	4943      	ldr	r1, [pc, #268]	; (8008774 <USB_ActivateEndpoint+0x698>)
 8008668:	430a      	orrs	r2, r1
 800866a:	b292      	uxth	r2, r2
 800866c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	18d2      	adds	r2, r2, r3
 8008678:	2146      	movs	r1, #70	; 0x46
 800867a:	187b      	adds	r3, r7, r1
 800867c:	8812      	ldrh	r2, [r2, #0]
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	187b      	adds	r3, r7, r1
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	2240      	movs	r2, #64	; 0x40
 8008686:	4013      	ands	r3, r2
 8008688:	d016      	beq.n	80086b8 <USB_ActivateEndpoint+0x5dc>
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29a      	uxth	r2, r3
 8008698:	2044      	movs	r0, #68	; 0x44
 800869a:	183b      	adds	r3, r7, r0
 800869c:	4932      	ldr	r1, [pc, #200]	; (8008768 <USB_ActivateEndpoint+0x68c>)
 800869e:	400a      	ands	r2, r1
 80086a0:	801a      	strh	r2, [r3, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	18d3      	adds	r3, r2, r3
 80086ac:	183a      	adds	r2, r7, r0
 80086ae:	8812      	ldrh	r2, [r2, #0]
 80086b0:	4931      	ldr	r1, [pc, #196]	; (8008778 <USB_ActivateEndpoint+0x69c>)
 80086b2:	430a      	orrs	r2, r1
 80086b4:	b292      	uxth	r2, r2
 80086b6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	78db      	ldrb	r3, [r3, #3]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d01d      	beq.n	80086fc <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	18d3      	adds	r3, r2, r3
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	2040      	movs	r0, #64	; 0x40
 80086d0:	183b      	adds	r3, r7, r0
 80086d2:	492c      	ldr	r1, [pc, #176]	; (8008784 <USB_ActivateEndpoint+0x6a8>)
 80086d4:	400a      	ands	r2, r1
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	183b      	adds	r3, r7, r0
 80086da:	183a      	adds	r2, r7, r0
 80086dc:	8812      	ldrh	r2, [r2, #0]
 80086de:	2120      	movs	r1, #32
 80086e0:	404a      	eors	r2, r1
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	18d3      	adds	r3, r2, r3
 80086ee:	183a      	adds	r2, r7, r0
 80086f0:	8812      	ldrh	r2, [r2, #0]
 80086f2:	4923      	ldr	r1, [pc, #140]	; (8008780 <USB_ActivateEndpoint+0x6a4>)
 80086f4:	430a      	orrs	r2, r1
 80086f6:	b292      	uxth	r2, r2
 80086f8:	801a      	strh	r2, [r3, #0]
 80086fa:	e016      	b.n	800872a <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	18d3      	adds	r3, r2, r3
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	b29a      	uxth	r2, r3
 800870a:	2042      	movs	r0, #66	; 0x42
 800870c:	183b      	adds	r3, r7, r0
 800870e:	491d      	ldr	r1, [pc, #116]	; (8008784 <USB_ActivateEndpoint+0x6a8>)
 8008710:	400a      	ands	r2, r1
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	18d3      	adds	r3, r2, r3
 800871e:	183a      	adds	r2, r7, r0
 8008720:	8812      	ldrh	r2, [r2, #0]
 8008722:	4917      	ldr	r1, [pc, #92]	; (8008780 <USB_ActivateEndpoint+0x6a4>)
 8008724:	430a      	orrs	r2, r1
 8008726:	b292      	uxth	r2, r2
 8008728:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	18d3      	adds	r3, r2, r3
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29a      	uxth	r2, r3
 8008738:	203e      	movs	r0, #62	; 0x3e
 800873a:	183b      	adds	r3, r7, r0
 800873c:	490f      	ldr	r1, [pc, #60]	; (800877c <USB_ActivateEndpoint+0x6a0>)
 800873e:	400a      	ands	r2, r1
 8008740:	801a      	strh	r2, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	18d3      	adds	r3, r2, r3
 800874c:	183a      	adds	r2, r7, r0
 800874e:	8812      	ldrh	r2, [r2, #0]
 8008750:	490b      	ldr	r1, [pc, #44]	; (8008780 <USB_ActivateEndpoint+0x6a4>)
 8008752:	430a      	orrs	r2, r1
 8008754:	b292      	uxth	r2, r2
 8008756:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8008758:	2367      	movs	r3, #103	; 0x67
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	781b      	ldrb	r3, [r3, #0]
}
 800875e:	0018      	movs	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	b01a      	add	sp, #104	; 0x68
 8008764:	bd80      	pop	{r7, pc}
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	ffff8f8f 	.word	0xffff8f8f
 800876c:	ffff8180 	.word	0xffff8180
 8008770:	00000404 	.word	0x00000404
 8008774:	ffffc080 	.word	0xffffc080
 8008778:	ffff80c0 	.word	0xffff80c0
 800877c:	ffffbf8f 	.word	0xffffbf8f
 8008780:	ffff8080 	.word	0xffff8080
 8008784:	ffff8fbf 	.word	0xffff8fbf

08008788 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08c      	sub	sp, #48	; 0x30
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d000      	beq.n	800879c <USB_DeactivateEndpoint+0x14>
 800879a:	e07e      	b.n	800889a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	785b      	ldrb	r3, [r3, #1]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d03c      	beq.n	800881e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	18d2      	adds	r2, r2, r3
 80087ae:	210c      	movs	r1, #12
 80087b0:	187b      	adds	r3, r7, r1
 80087b2:	8812      	ldrh	r2, [r2, #0]
 80087b4:	801a      	strh	r2, [r3, #0]
 80087b6:	187b      	adds	r3, r7, r1
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	2240      	movs	r2, #64	; 0x40
 80087bc:	4013      	ands	r3, r2
 80087be:	d016      	beq.n	80087ee <USB_DeactivateEndpoint+0x66>
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	18d3      	adds	r3, r2, r3
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	200a      	movs	r0, #10
 80087d0:	183b      	adds	r3, r7, r0
 80087d2:	49c7      	ldr	r1, [pc, #796]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 80087d4:	400a      	ands	r2, r1
 80087d6:	801a      	strh	r2, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	18d3      	adds	r3, r2, r3
 80087e2:	183a      	adds	r2, r7, r0
 80087e4:	8812      	ldrh	r2, [r2, #0]
 80087e6:	49c3      	ldr	r1, [pc, #780]	; (8008af4 <USB_DeactivateEndpoint+0x36c>)
 80087e8:	430a      	orrs	r2, r1
 80087ea:	b292      	uxth	r2, r2
 80087ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	18d3      	adds	r3, r2, r3
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	2008      	movs	r0, #8
 80087fe:	183b      	adds	r3, r7, r0
 8008800:	49bd      	ldr	r1, [pc, #756]	; (8008af8 <USB_DeactivateEndpoint+0x370>)
 8008802:	400a      	ands	r2, r1
 8008804:	801a      	strh	r2, [r3, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	18d3      	adds	r3, r2, r3
 8008810:	183a      	adds	r2, r7, r0
 8008812:	8812      	ldrh	r2, [r2, #0]
 8008814:	49b9      	ldr	r1, [pc, #740]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 8008816:	430a      	orrs	r2, r1
 8008818:	b292      	uxth	r2, r2
 800881a:	801a      	strh	r2, [r3, #0]
 800881c:	e163      	b.n	8008ae6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	18d2      	adds	r2, r2, r3
 8008828:	2112      	movs	r1, #18
 800882a:	187b      	adds	r3, r7, r1
 800882c:	8812      	ldrh	r2, [r2, #0]
 800882e:	801a      	strh	r2, [r3, #0]
 8008830:	187b      	adds	r3, r7, r1
 8008832:	881a      	ldrh	r2, [r3, #0]
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	4013      	ands	r3, r2
 800883a:	d016      	beq.n	800886a <USB_DeactivateEndpoint+0xe2>
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	18d3      	adds	r3, r2, r3
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	b29a      	uxth	r2, r3
 800884a:	2010      	movs	r0, #16
 800884c:	183b      	adds	r3, r7, r0
 800884e:	49a8      	ldr	r1, [pc, #672]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 8008850:	400a      	ands	r2, r1
 8008852:	801a      	strh	r2, [r3, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	18d3      	adds	r3, r2, r3
 800885e:	183a      	adds	r2, r7, r0
 8008860:	8812      	ldrh	r2, [r2, #0]
 8008862:	49a7      	ldr	r1, [pc, #668]	; (8008b00 <USB_DeactivateEndpoint+0x378>)
 8008864:	430a      	orrs	r2, r1
 8008866:	b292      	uxth	r2, r2
 8008868:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	18d3      	adds	r3, r2, r3
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29a      	uxth	r2, r3
 8008878:	200e      	movs	r0, #14
 800887a:	183b      	adds	r3, r7, r0
 800887c:	49a1      	ldr	r1, [pc, #644]	; (8008b04 <USB_DeactivateEndpoint+0x37c>)
 800887e:	400a      	ands	r2, r1
 8008880:	801a      	strh	r2, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	183a      	adds	r2, r7, r0
 800888e:	8812      	ldrh	r2, [r2, #0]
 8008890:	499a      	ldr	r1, [pc, #616]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 8008892:	430a      	orrs	r2, r1
 8008894:	b292      	uxth	r2, r2
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e125      	b.n	8008ae6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d000      	beq.n	80088a4 <USB_DeactivateEndpoint+0x11c>
 80088a2:	e090      	b.n	80089c6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	18d2      	adds	r2, r2, r3
 80088ae:	2120      	movs	r1, #32
 80088b0:	187b      	adds	r3, r7, r1
 80088b2:	8812      	ldrh	r2, [r2, #0]
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	187b      	adds	r3, r7, r1
 80088b8:	881a      	ldrh	r2, [r3, #0]
 80088ba:	2380      	movs	r3, #128	; 0x80
 80088bc:	01db      	lsls	r3, r3, #7
 80088be:	4013      	ands	r3, r2
 80088c0:	d016      	beq.n	80088f0 <USB_DeactivateEndpoint+0x168>
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	18d3      	adds	r3, r2, r3
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	201e      	movs	r0, #30
 80088d2:	183b      	adds	r3, r7, r0
 80088d4:	4986      	ldr	r1, [pc, #536]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 80088d6:	400a      	ands	r2, r1
 80088d8:	801a      	strh	r2, [r3, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	18d3      	adds	r3, r2, r3
 80088e4:	183a      	adds	r2, r7, r0
 80088e6:	8812      	ldrh	r2, [r2, #0]
 80088e8:	4985      	ldr	r1, [pc, #532]	; (8008b00 <USB_DeactivateEndpoint+0x378>)
 80088ea:	430a      	orrs	r2, r1
 80088ec:	b292      	uxth	r2, r2
 80088ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	18d2      	adds	r2, r2, r3
 80088fa:	211c      	movs	r1, #28
 80088fc:	187b      	adds	r3, r7, r1
 80088fe:	8812      	ldrh	r2, [r2, #0]
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	187b      	adds	r3, r7, r1
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	2240      	movs	r2, #64	; 0x40
 8008908:	4013      	ands	r3, r2
 800890a:	d016      	beq.n	800893a <USB_DeactivateEndpoint+0x1b2>
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	18d3      	adds	r3, r2, r3
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29a      	uxth	r2, r3
 800891a:	201a      	movs	r0, #26
 800891c:	183b      	adds	r3, r7, r0
 800891e:	4974      	ldr	r1, [pc, #464]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 8008920:	400a      	ands	r2, r1
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	18d3      	adds	r3, r2, r3
 800892e:	183a      	adds	r2, r7, r0
 8008930:	8812      	ldrh	r2, [r2, #0]
 8008932:	4970      	ldr	r1, [pc, #448]	; (8008af4 <USB_DeactivateEndpoint+0x36c>)
 8008934:	430a      	orrs	r2, r1
 8008936:	b292      	uxth	r2, r2
 8008938:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	b29a      	uxth	r2, r3
 8008948:	2018      	movs	r0, #24
 800894a:	183b      	adds	r3, r7, r0
 800894c:	4968      	ldr	r1, [pc, #416]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 800894e:	400a      	ands	r2, r1
 8008950:	801a      	strh	r2, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	18d3      	adds	r3, r2, r3
 800895c:	183a      	adds	r2, r7, r0
 800895e:	8812      	ldrh	r2, [r2, #0]
 8008960:	4964      	ldr	r1, [pc, #400]	; (8008af4 <USB_DeactivateEndpoint+0x36c>)
 8008962:	430a      	orrs	r2, r1
 8008964:	b292      	uxth	r2, r2
 8008966:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	18d3      	adds	r3, r2, r3
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	2016      	movs	r0, #22
 8008978:	183b      	adds	r3, r7, r0
 800897a:	4962      	ldr	r1, [pc, #392]	; (8008b04 <USB_DeactivateEndpoint+0x37c>)
 800897c:	400a      	ands	r2, r1
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	18d3      	adds	r3, r2, r3
 800898a:	183a      	adds	r2, r7, r0
 800898c:	8812      	ldrh	r2, [r2, #0]
 800898e:	495b      	ldr	r1, [pc, #364]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 8008990:	430a      	orrs	r2, r1
 8008992:	b292      	uxth	r2, r2
 8008994:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	18d3      	adds	r3, r2, r3
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	2014      	movs	r0, #20
 80089a6:	183b      	adds	r3, r7, r0
 80089a8:	4953      	ldr	r1, [pc, #332]	; (8008af8 <USB_DeactivateEndpoint+0x370>)
 80089aa:	400a      	ands	r2, r1
 80089ac:	801a      	strh	r2, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	18d3      	adds	r3, r2, r3
 80089b8:	183a      	adds	r2, r7, r0
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	494f      	ldr	r1, [pc, #316]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 80089be:	430a      	orrs	r2, r1
 80089c0:	b292      	uxth	r2, r2
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e08f      	b.n	8008ae6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	18d2      	adds	r2, r2, r3
 80089d0:	212e      	movs	r1, #46	; 0x2e
 80089d2:	187b      	adds	r3, r7, r1
 80089d4:	8812      	ldrh	r2, [r2, #0]
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	881a      	ldrh	r2, [r3, #0]
 80089dc:	2380      	movs	r3, #128	; 0x80
 80089de:	01db      	lsls	r3, r3, #7
 80089e0:	4013      	ands	r3, r2
 80089e2:	d016      	beq.n	8008a12 <USB_DeactivateEndpoint+0x28a>
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	18d3      	adds	r3, r2, r3
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	202c      	movs	r0, #44	; 0x2c
 80089f4:	183b      	adds	r3, r7, r0
 80089f6:	493e      	ldr	r1, [pc, #248]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 80089f8:	400a      	ands	r2, r1
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	18d3      	adds	r3, r2, r3
 8008a06:	183a      	adds	r2, r7, r0
 8008a08:	8812      	ldrh	r2, [r2, #0]
 8008a0a:	493d      	ldr	r1, [pc, #244]	; (8008b00 <USB_DeactivateEndpoint+0x378>)
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	18d2      	adds	r2, r2, r3
 8008a1c:	212a      	movs	r1, #42	; 0x2a
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	8812      	ldrh	r2, [r2, #0]
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	187b      	adds	r3, r7, r1
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	2240      	movs	r2, #64	; 0x40
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d016      	beq.n	8008a5c <USB_DeactivateEndpoint+0x2d4>
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	18d3      	adds	r3, r2, r3
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	2028      	movs	r0, #40	; 0x28
 8008a3e:	183b      	adds	r3, r7, r0
 8008a40:	492b      	ldr	r1, [pc, #172]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 8008a42:	400a      	ands	r2, r1
 8008a44:	801a      	strh	r2, [r3, #0]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	18d3      	adds	r3, r2, r3
 8008a50:	183a      	adds	r2, r7, r0
 8008a52:	8812      	ldrh	r2, [r2, #0]
 8008a54:	4927      	ldr	r1, [pc, #156]	; (8008af4 <USB_DeactivateEndpoint+0x36c>)
 8008a56:	430a      	orrs	r2, r1
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	18d3      	adds	r3, r2, r3
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	2026      	movs	r0, #38	; 0x26
 8008a6c:	183b      	adds	r3, r7, r0
 8008a6e:	4920      	ldr	r1, [pc, #128]	; (8008af0 <USB_DeactivateEndpoint+0x368>)
 8008a70:	400a      	ands	r2, r1
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	18d3      	adds	r3, r2, r3
 8008a7e:	183a      	adds	r2, r7, r0
 8008a80:	8812      	ldrh	r2, [r2, #0]
 8008a82:	491f      	ldr	r1, [pc, #124]	; (8008b00 <USB_DeactivateEndpoint+0x378>)
 8008a84:	430a      	orrs	r2, r1
 8008a86:	b292      	uxth	r2, r2
 8008a88:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	18d3      	adds	r3, r2, r3
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	2024      	movs	r0, #36	; 0x24
 8008a9a:	183b      	adds	r3, r7, r0
 8008a9c:	4916      	ldr	r1, [pc, #88]	; (8008af8 <USB_DeactivateEndpoint+0x370>)
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	801a      	strh	r2, [r3, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	18d3      	adds	r3, r2, r3
 8008aac:	183a      	adds	r2, r7, r0
 8008aae:	8812      	ldrh	r2, [r2, #0]
 8008ab0:	4912      	ldr	r1, [pc, #72]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	18d3      	adds	r3, r2, r3
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	2022      	movs	r0, #34	; 0x22
 8008ac8:	183b      	adds	r3, r7, r0
 8008aca:	490e      	ldr	r1, [pc, #56]	; (8008b04 <USB_DeactivateEndpoint+0x37c>)
 8008acc:	400a      	ands	r2, r1
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	18d3      	adds	r3, r2, r3
 8008ada:	183a      	adds	r2, r7, r0
 8008adc:	8812      	ldrh	r2, [r2, #0]
 8008ade:	4907      	ldr	r1, [pc, #28]	; (8008afc <USB_DeactivateEndpoint+0x374>)
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	b292      	uxth	r2, r2
 8008ae4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	0018      	movs	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b00c      	add	sp, #48	; 0x30
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	ffff8f8f 	.word	0xffff8f8f
 8008af4:	ffff80c0 	.word	0xffff80c0
 8008af8:	ffff8fbf 	.word	0xffff8fbf
 8008afc:	ffff8080 	.word	0xffff8080
 8008b00:	ffffc080 	.word	0xffffc080
 8008b04:	ffffbf8f 	.word	0xffffbf8f

08008b08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b08:	b5b0      	push	{r4, r5, r7, lr}
 8008b0a:	b0c4      	sub	sp, #272	; 0x110
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	785b      	ldrb	r3, [r3, #1]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d001      	beq.n	8008b1e <USB_EPStartXfer+0x16>
 8008b1a:	f000 fd49 	bl	80095b0 <USB_EPStartXfer+0xaa8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	699a      	ldr	r2, [r3, #24]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d906      	bls.n	8008b38 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2286      	movs	r2, #134	; 0x86
 8008b30:	0052      	lsls	r2, r2, #1
 8008b32:	18ba      	adds	r2, r7, r2
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	e005      	b.n	8008b44 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	2286      	movs	r2, #134	; 0x86
 8008b3e:	0052      	lsls	r2, r2, #1
 8008b40:	18ba      	adds	r2, r7, r2
 8008b42:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	7b1b      	ldrb	r3, [r3, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d125      	bne.n	8008b98 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	6959      	ldr	r1, [r3, #20]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	88da      	ldrh	r2, [r3, #6]
 8008b54:	2486      	movs	r4, #134	; 0x86
 8008b56:	0064      	lsls	r4, r4, #1
 8008b58:	193b      	adds	r3, r7, r4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 fa20 	bl	8009fa4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2250      	movs	r2, #80	; 0x50
 8008b6c:	5a9b      	ldrh	r3, [r3, r2]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	001a      	movs	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	189b      	adds	r3, r3, r2
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	00da      	lsls	r2, r3, #3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	18d3      	adds	r3, r2, r3
 8008b82:	4ad0      	ldr	r2, [pc, #832]	; (8008ec4 <USB_EPStartXfer+0x3bc>)
 8008b84:	4694      	mov	ip, r2
 8008b86:	4463      	add	r3, ip
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	193b      	adds	r3, r7, r4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	801a      	strh	r2, [r3, #0]
 8008b94:	f000 fcca 	bl	800952c <USB_EPStartXfer+0xa24>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	78db      	ldrb	r3, [r3, #3]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d000      	beq.n	8008ba2 <USB_EPStartXfer+0x9a>
 8008ba0:	e346      	b.n	8009230 <USB_EPStartXfer+0x728>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6a1a      	ldr	r2, [r3, #32]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d800      	bhi.n	8008bb0 <USB_EPStartXfer+0xa8>
 8008bae:	e2ec      	b.n	800918a <USB_EPStartXfer+0x682>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	18d3      	adds	r3, r2, r3
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	205a      	movs	r0, #90	; 0x5a
 8008bc0:	183b      	adds	r3, r7, r0
 8008bc2:	49c1      	ldr	r1, [pc, #772]	; (8008ec8 <USB_EPStartXfer+0x3c0>)
 8008bc4:	400a      	ands	r2, r1
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	18d3      	adds	r3, r2, r3
 8008bd2:	183a      	adds	r2, r7, r0
 8008bd4:	8812      	ldrh	r2, [r2, #0]
 8008bd6:	49bd      	ldr	r1, [pc, #756]	; (8008ecc <USB_EPStartXfer+0x3c4>)
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	b292      	uxth	r2, r2
 8008bdc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	2186      	movs	r1, #134	; 0x86
 8008be4:	0049      	lsls	r1, r1, #1
 8008be6:	187b      	adds	r3, r7, r1
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	18d3      	adds	r3, r2, r3
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	001a      	movs	r2, r3
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	4013      	ands	r3, r2
 8008c04:	d100      	bne.n	8008c08 <USB_EPStartXfer+0x100>
 8008c06:	e169      	b.n	8008edc <USB_EPStartXfer+0x3d4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	785b      	ldrb	r3, [r3, #1]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d168      	bne.n	8008ce6 <USB_EPStartXfer+0x1de>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2250      	movs	r2, #80	; 0x50
 8008c1c:	5a9b      	ldrh	r3, [r3, r2]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	001a      	movs	r2, r3
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	189b      	adds	r3, r3, r2
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	00da      	lsls	r2, r3, #3
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	18d3      	adds	r3, r2, r3
 8008c32:	4aa7      	ldr	r2, [pc, #668]	; (8008ed0 <USB_EPStartXfer+0x3c8>)
 8008c34:	4694      	mov	ip, r2
 8008c36:	4463      	add	r3, ip
 8008c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d110      	bne.n	8008c64 <USB_EPStartXfer+0x15c>
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4aa2      	ldr	r2, [pc, #648]	; (8008ed4 <USB_EPStartXfer+0x3cc>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4a9f      	ldr	r2, [pc, #636]	; (8008ed8 <USB_EPStartXfer+0x3d0>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	e05c      	b.n	8008d1e <USB_EPStartXfer+0x216>
 8008c64:	2286      	movs	r2, #134	; 0x86
 8008c66:	0052      	lsls	r2, r2, #1
 8008c68:	18bb      	adds	r3, r7, r2
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c6e:	d81a      	bhi.n	8008ca6 <USB_EPStartXfer+0x19e>
 8008c70:	18bb      	adds	r3, r7, r2
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	1d79      	adds	r1, r7, #5
 8008c78:	31ff      	adds	r1, #255	; 0xff
 8008c7a:	600b      	str	r3, [r1, #0]
 8008c7c:	18bb      	adds	r3, r7, r2
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2201      	movs	r2, #1
 8008c82:	4013      	ands	r3, r2
 8008c84:	d006      	beq.n	8008c94 <USB_EPStartXfer+0x18c>
 8008c86:	1d7b      	adds	r3, r7, #5
 8008c88:	33ff      	adds	r3, #255	; 0xff
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	1d7a      	adds	r2, r7, #5
 8008c90:	32ff      	adds	r2, #255	; 0xff
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	1d7b      	adds	r3, r7, #5
 8008c96:	33ff      	adds	r3, #255	; 0xff
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	029b      	lsls	r3, r3, #10
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	801a      	strh	r2, [r3, #0]
 8008ca4:	e03b      	b.n	8008d1e <USB_EPStartXfer+0x216>
 8008ca6:	2286      	movs	r2, #134	; 0x86
 8008ca8:	0052      	lsls	r2, r2, #1
 8008caa:	18bb      	adds	r3, r7, r2
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	095b      	lsrs	r3, r3, #5
 8008cb0:	1d79      	adds	r1, r7, #5
 8008cb2:	31ff      	adds	r1, #255	; 0xff
 8008cb4:	600b      	str	r3, [r1, #0]
 8008cb6:	18bb      	adds	r3, r7, r2
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	221f      	movs	r2, #31
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	d106      	bne.n	8008cce <USB_EPStartXfer+0x1c6>
 8008cc0:	1d7b      	adds	r3, r7, #5
 8008cc2:	33ff      	adds	r3, #255	; 0xff
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	1d7a      	adds	r2, r7, #5
 8008cca:	32ff      	adds	r2, #255	; 0xff
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	1d7b      	adds	r3, r7, #5
 8008cd0:	33ff      	adds	r3, #255	; 0xff
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	029b      	lsls	r3, r3, #10
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4a7f      	ldr	r2, [pc, #508]	; (8008ed8 <USB_EPStartXfer+0x3d0>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	801a      	strh	r2, [r3, #0]
 8008ce4:	e01b      	b.n	8008d1e <USB_EPStartXfer+0x216>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	785b      	ldrb	r3, [r3, #1]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d117      	bne.n	8008d1e <USB_EPStartXfer+0x216>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2250      	movs	r2, #80	; 0x50
 8008cf2:	5a9b      	ldrh	r3, [r3, r2]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	001a      	movs	r2, r3
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	00da      	lsls	r2, r3, #3
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	18d3      	adds	r3, r2, r3
 8008d08:	4a71      	ldr	r2, [pc, #452]	; (8008ed0 <USB_EPStartXfer+0x3c8>)
 8008d0a:	4694      	mov	ip, r2
 8008d0c:	4463      	add	r3, ip
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d10:	2386      	movs	r3, #134	; 0x86
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d1e:	2085      	movs	r0, #133	; 0x85
 8008d20:	0040      	lsls	r0, r0, #1
 8008d22:	183b      	adds	r3, r7, r0
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	8952      	ldrh	r2, [r2, #10]
 8008d28:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	6959      	ldr	r1, [r3, #20]
 8008d2e:	2586      	movs	r5, #134	; 0x86
 8008d30:	006d      	lsls	r5, r5, #1
 8008d32:	197b      	adds	r3, r7, r5
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	b29c      	uxth	r4, r3
 8008d38:	183b      	adds	r3, r7, r0
 8008d3a:	881a      	ldrh	r2, [r3, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	0023      	movs	r3, r4
 8008d40:	f001 f930 	bl	8009fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695a      	ldr	r2, [r3, #20]
 8008d48:	197b      	adds	r3, r7, r5
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	18d2      	adds	r2, r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d907      	bls.n	8008d6e <USB_EPStartXfer+0x266>
            {
              ep->xfer_len_db -= len;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6a1a      	ldr	r2, [r3, #32]
 8008d62:	197b      	adds	r3, r7, r5
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	621a      	str	r2, [r3, #32]
 8008d6c:	e008      	b.n	8008d80 <USB_EPStartXfer+0x278>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	2286      	movs	r2, #134	; 0x86
 8008d74:	0052      	lsls	r2, r2, #1
 8008d76:	18ba      	adds	r2, r7, r2
 8008d78:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d16a      	bne.n	8008e5e <USB_EPStartXfer+0x356>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	61fb      	str	r3, [r7, #28]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2250      	movs	r2, #80	; 0x50
 8008d90:	5a9b      	ldrh	r3, [r3, r2]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	001a      	movs	r2, r3
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	189b      	adds	r3, r3, r2
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	00da      	lsls	r2, r3, #3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	18d3      	adds	r3, r2, r3
 8008da6:	4a47      	ldr	r2, [pc, #284]	; (8008ec4 <USB_EPStartXfer+0x3bc>)
 8008da8:	4694      	mov	ip, r2
 8008daa:	4463      	add	r3, ip
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	2386      	movs	r3, #134	; 0x86
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	18fb      	adds	r3, r7, r3
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d110      	bne.n	8008ddc <USB_EPStartXfer+0x2d4>
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4a44      	ldr	r2, [pc, #272]	; (8008ed4 <USB_EPStartXfer+0x3cc>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4a41      	ldr	r2, [pc, #260]	; (8008ed8 <USB_EPStartXfer+0x3d0>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	801a      	strh	r2, [r3, #0]
 8008dda:	e05e      	b.n	8008e9a <USB_EPStartXfer+0x392>
 8008ddc:	2286      	movs	r2, #134	; 0x86
 8008dde:	0052      	lsls	r2, r2, #1
 8008de0:	18bb      	adds	r3, r7, r2
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b3e      	cmp	r3, #62	; 0x3e
 8008de6:	d81a      	bhi.n	8008e1e <USB_EPStartXfer+0x316>
 8008de8:	18bb      	adds	r3, r7, r2
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	085b      	lsrs	r3, r3, #1
 8008dee:	1c79      	adds	r1, r7, #1
 8008df0:	31ff      	adds	r1, #255	; 0xff
 8008df2:	600b      	str	r3, [r1, #0]
 8008df4:	18bb      	adds	r3, r7, r2
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	d006      	beq.n	8008e0c <USB_EPStartXfer+0x304>
 8008dfe:	1c7b      	adds	r3, r7, #1
 8008e00:	33ff      	adds	r3, #255	; 0xff
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3301      	adds	r3, #1
 8008e06:	1c7a      	adds	r2, r7, #1
 8008e08:	32ff      	adds	r2, #255	; 0xff
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	1c7b      	adds	r3, r7, #1
 8008e0e:	33ff      	adds	r3, #255	; 0xff
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	029b      	lsls	r3, r3, #10
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e03d      	b.n	8008e9a <USB_EPStartXfer+0x392>
 8008e1e:	2286      	movs	r2, #134	; 0x86
 8008e20:	0052      	lsls	r2, r2, #1
 8008e22:	18bb      	adds	r3, r7, r2
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	095b      	lsrs	r3, r3, #5
 8008e28:	1c79      	adds	r1, r7, #1
 8008e2a:	31ff      	adds	r1, #255	; 0xff
 8008e2c:	600b      	str	r3, [r1, #0]
 8008e2e:	18bb      	adds	r3, r7, r2
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	221f      	movs	r2, #31
 8008e34:	4013      	ands	r3, r2
 8008e36:	d106      	bne.n	8008e46 <USB_EPStartXfer+0x33e>
 8008e38:	1c7b      	adds	r3, r7, #1
 8008e3a:	33ff      	adds	r3, #255	; 0xff
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	1c7a      	adds	r2, r7, #1
 8008e42:	32ff      	adds	r2, #255	; 0xff
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	1c7b      	adds	r3, r7, #1
 8008e48:	33ff      	adds	r3, #255	; 0xff
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	029b      	lsls	r3, r3, #10
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	4a21      	ldr	r2, [pc, #132]	; (8008ed8 <USB_EPStartXfer+0x3d0>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	e01d      	b.n	8008e9a <USB_EPStartXfer+0x392>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	785b      	ldrb	r3, [r3, #1]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d119      	bne.n	8008e9a <USB_EPStartXfer+0x392>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2250      	movs	r2, #80	; 0x50
 8008e6e:	5a9b      	ldrh	r3, [r3, r2]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	001a      	movs	r2, r3
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	189b      	adds	r3, r3, r2
 8008e78:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	00da      	lsls	r2, r3, #3
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	4a0f      	ldr	r2, [pc, #60]	; (8008ec4 <USB_EPStartXfer+0x3bc>)
 8008e86:	4694      	mov	ip, r2
 8008e88:	4463      	add	r3, ip
 8008e8a:	623b      	str	r3, [r7, #32]
 8008e8c:	2386      	movs	r3, #134	; 0x86
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	18fb      	adds	r3, r7, r3
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e9a:	2085      	movs	r0, #133	; 0x85
 8008e9c:	0040      	lsls	r0, r0, #1
 8008e9e:	183b      	adds	r3, r7, r0
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	8912      	ldrh	r2, [r2, #8]
 8008ea4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6959      	ldr	r1, [r3, #20]
 8008eaa:	2386      	movs	r3, #134	; 0x86
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	b29c      	uxth	r4, r3
 8008eb4:	183b      	adds	r3, r7, r0
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	0023      	movs	r3, r4
 8008ebc:	f001 f872 	bl	8009fa4 <USB_WritePMA>
 8008ec0:	e334      	b.n	800952c <USB_EPStartXfer+0xa24>
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	00000402 	.word	0x00000402
 8008ec8:	ffff8f8f 	.word	0xffff8f8f
 8008ecc:	ffff8180 	.word	0xffff8180
 8008ed0:	00000406 	.word	0x00000406
 8008ed4:	ffff83ff 	.word	0xffff83ff
 8008ed8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d166      	bne.n	8008fb2 <USB_EPStartXfer+0x4aa>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2250      	movs	r2, #80	; 0x50
 8008eec:	5a9b      	ldrh	r3, [r3, r2]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	001a      	movs	r2, r3
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	00da      	lsls	r2, r3, #3
 8008efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f00:	18d3      	adds	r3, r2, r3
 8008f02:	4ac5      	ldr	r2, [pc, #788]	; (8009218 <USB_EPStartXfer+0x710>)
 8008f04:	4694      	mov	ip, r2
 8008f06:	4463      	add	r3, ip
 8008f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f0a:	2386      	movs	r3, #134	; 0x86
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	18fb      	adds	r3, r7, r3
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USB_EPStartXfer+0x430>
 8008f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	4abf      	ldr	r2, [pc, #764]	; (800921c <USB_EPStartXfer+0x714>)
 8008f1e:	4013      	ands	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	4abc      	ldr	r2, [pc, #752]	; (8009220 <USB_EPStartXfer+0x718>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e05a      	b.n	8008fee <USB_EPStartXfer+0x4e6>
 8008f38:	2286      	movs	r2, #134	; 0x86
 8008f3a:	0052      	lsls	r2, r2, #1
 8008f3c:	18bb      	adds	r3, r7, r2
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b3e      	cmp	r3, #62	; 0x3e
 8008f42:	d818      	bhi.n	8008f76 <USB_EPStartXfer+0x46e>
 8008f44:	18bb      	adds	r3, r7, r2
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	21fc      	movs	r1, #252	; 0xfc
 8008f4c:	1878      	adds	r0, r7, r1
 8008f4e:	6003      	str	r3, [r0, #0]
 8008f50:	18bb      	adds	r3, r7, r2
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2201      	movs	r2, #1
 8008f56:	4013      	ands	r3, r2
 8008f58:	d004      	beq.n	8008f64 <USB_EPStartXfer+0x45c>
 8008f5a:	187b      	adds	r3, r7, r1
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	187a      	adds	r2, r7, r1
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	23fc      	movs	r3, #252	; 0xfc
 8008f66:	18fb      	adds	r3, r7, r3
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	029b      	lsls	r3, r3, #10
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	e03b      	b.n	8008fee <USB_EPStartXfer+0x4e6>
 8008f76:	2286      	movs	r2, #134	; 0x86
 8008f78:	0052      	lsls	r2, r2, #1
 8008f7a:	18bb      	adds	r3, r7, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	21fc      	movs	r1, #252	; 0xfc
 8008f82:	1878      	adds	r0, r7, r1
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	18bb      	adds	r3, r7, r2
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	221f      	movs	r2, #31
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	d104      	bne.n	8008f9a <USB_EPStartXfer+0x492>
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	187a      	adds	r2, r7, r1
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	23fc      	movs	r3, #252	; 0xfc
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4a9e      	ldr	r2, [pc, #632]	; (8009220 <USB_EPStartXfer+0x718>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e01d      	b.n	8008fee <USB_EPStartXfer+0x4e6>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d119      	bne.n	8008fee <USB_EPStartXfer+0x4e6>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2250      	movs	r2, #80	; 0x50
 8008fc2:	5a9b      	ldrh	r3, [r3, r2]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	001a      	movs	r2, r3
 8008fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fca:	189b      	adds	r3, r3, r2
 8008fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	00da      	lsls	r2, r3, #3
 8008fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fd6:	18d3      	adds	r3, r2, r3
 8008fd8:	4a8f      	ldr	r2, [pc, #572]	; (8009218 <USB_EPStartXfer+0x710>)
 8008fda:	4694      	mov	ip, r2
 8008fdc:	4463      	add	r3, ip
 8008fde:	653b      	str	r3, [r7, #80]	; 0x50
 8008fe0:	2386      	movs	r3, #134	; 0x86
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	18fb      	adds	r3, r7, r3
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fee:	2085      	movs	r0, #133	; 0x85
 8008ff0:	0040      	lsls	r0, r0, #1
 8008ff2:	183b      	adds	r3, r7, r0
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	8912      	ldrh	r2, [r2, #8]
 8008ff8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6959      	ldr	r1, [r3, #20]
 8008ffe:	2586      	movs	r5, #134	; 0x86
 8009000:	006d      	lsls	r5, r5, #1
 8009002:	197b      	adds	r3, r7, r5
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	b29c      	uxth	r4, r3
 8009008:	183b      	adds	r3, r7, r0
 800900a:	881a      	ldrh	r2, [r3, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	0023      	movs	r3, r4
 8009010:	f000 ffc8 	bl	8009fa4 <USB_WritePMA>
            ep->xfer_buff += len;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	695a      	ldr	r2, [r3, #20]
 8009018:	197b      	adds	r3, r7, r5
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	18d2      	adds	r2, r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d907      	bls.n	800903e <USB_EPStartXfer+0x536>
            {
              ep->xfer_len_db -= len;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6a1a      	ldr	r2, [r3, #32]
 8009032:	197b      	adds	r3, r7, r5
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	621a      	str	r2, [r3, #32]
 800903c:	e008      	b.n	8009050 <USB_EPStartXfer+0x548>
            }
            else
            {
              len = ep->xfer_len_db;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	2286      	movs	r2, #134	; 0x86
 8009044:	0052      	lsls	r2, r2, #1
 8009046:	18ba      	adds	r2, r7, r2
 8009048:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d166      	bne.n	800912a <USB_EPStartXfer+0x622>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2250      	movs	r2, #80	; 0x50
 8009064:	5a9b      	ldrh	r3, [r3, r2]
 8009066:	b29b      	uxth	r3, r3
 8009068:	001a      	movs	r2, r3
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	189b      	adds	r3, r3, r2
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	00da      	lsls	r2, r3, #3
 8009076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009078:	18d3      	adds	r3, r2, r3
 800907a:	4a6a      	ldr	r2, [pc, #424]	; (8009224 <USB_EPStartXfer+0x71c>)
 800907c:	4694      	mov	ip, r2
 800907e:	4463      	add	r3, ip
 8009080:	63bb      	str	r3, [r7, #56]	; 0x38
 8009082:	2386      	movs	r3, #134	; 0x86
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	18fb      	adds	r3, r7, r3
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d110      	bne.n	80090b0 <USB_EPStartXfer+0x5a8>
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	b29b      	uxth	r3, r3
 8009094:	4a61      	ldr	r2, [pc, #388]	; (800921c <USB_EPStartXfer+0x714>)
 8009096:	4013      	ands	r3, r2
 8009098:	b29a      	uxth	r2, r3
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	4a5e      	ldr	r2, [pc, #376]	; (8009220 <USB_EPStartXfer+0x718>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	e058      	b.n	8009162 <USB_EPStartXfer+0x65a>
 80090b0:	2286      	movs	r2, #134	; 0x86
 80090b2:	0052      	lsls	r2, r2, #1
 80090b4:	18bb      	adds	r3, r7, r2
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b3e      	cmp	r3, #62	; 0x3e
 80090ba:	d818      	bhi.n	80090ee <USB_EPStartXfer+0x5e6>
 80090bc:	18bb      	adds	r3, r7, r2
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	085b      	lsrs	r3, r3, #1
 80090c2:	21f8      	movs	r1, #248	; 0xf8
 80090c4:	1878      	adds	r0, r7, r1
 80090c6:	6003      	str	r3, [r0, #0]
 80090c8:	18bb      	adds	r3, r7, r2
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2201      	movs	r2, #1
 80090ce:	4013      	ands	r3, r2
 80090d0:	d004      	beq.n	80090dc <USB_EPStartXfer+0x5d4>
 80090d2:	187b      	adds	r3, r7, r1
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	187a      	adds	r2, r7, r1
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	23f8      	movs	r3, #248	; 0xf8
 80090de:	18fb      	adds	r3, r7, r3
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	029b      	lsls	r3, r3, #10
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e039      	b.n	8009162 <USB_EPStartXfer+0x65a>
 80090ee:	2286      	movs	r2, #134	; 0x86
 80090f0:	0052      	lsls	r2, r2, #1
 80090f2:	18bb      	adds	r3, r7, r2
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	21f8      	movs	r1, #248	; 0xf8
 80090fa:	1878      	adds	r0, r7, r1
 80090fc:	6003      	str	r3, [r0, #0]
 80090fe:	18bb      	adds	r3, r7, r2
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	221f      	movs	r2, #31
 8009104:	4013      	ands	r3, r2
 8009106:	d104      	bne.n	8009112 <USB_EPStartXfer+0x60a>
 8009108:	187b      	adds	r3, r7, r1
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3b01      	subs	r3, #1
 800910e:	187a      	adds	r2, r7, r1
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	23f8      	movs	r3, #248	; 0xf8
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	b29b      	uxth	r3, r3
 800911e:	4a40      	ldr	r2, [pc, #256]	; (8009220 <USB_EPStartXfer+0x718>)
 8009120:	4313      	orrs	r3, r2
 8009122:	b29a      	uxth	r2, r3
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	e01b      	b.n	8009162 <USB_EPStartXfer+0x65a>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	785b      	ldrb	r3, [r3, #1]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d117      	bne.n	8009162 <USB_EPStartXfer+0x65a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2250      	movs	r2, #80	; 0x50
 8009136:	5a9b      	ldrh	r3, [r3, r2]
 8009138:	b29b      	uxth	r3, r3
 800913a:	001a      	movs	r2, r3
 800913c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800913e:	189b      	adds	r3, r3, r2
 8009140:	647b      	str	r3, [r7, #68]	; 0x44
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	00da      	lsls	r2, r3, #3
 8009148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914a:	18d3      	adds	r3, r2, r3
 800914c:	4a35      	ldr	r2, [pc, #212]	; (8009224 <USB_EPStartXfer+0x71c>)
 800914e:	4694      	mov	ip, r2
 8009150:	4463      	add	r3, ip
 8009152:	643b      	str	r3, [r7, #64]	; 0x40
 8009154:	2386      	movs	r3, #134	; 0x86
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	18fb      	adds	r3, r7, r3
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b29a      	uxth	r2, r3
 800915e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009162:	2085      	movs	r0, #133	; 0x85
 8009164:	0040      	lsls	r0, r0, #1
 8009166:	183b      	adds	r3, r7, r0
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	8952      	ldrh	r2, [r2, #10]
 800916c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6959      	ldr	r1, [r3, #20]
 8009172:	2386      	movs	r3, #134	; 0x86
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	b29c      	uxth	r4, r3
 800917c:	183b      	adds	r3, r7, r0
 800917e:	881a      	ldrh	r2, [r3, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	0023      	movs	r3, r4
 8009184:	f000 ff0e 	bl	8009fa4 <USB_WritePMA>
 8009188:	e1d0      	b.n	800952c <USB_EPStartXfer+0xa24>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	2086      	movs	r0, #134	; 0x86
 8009190:	0040      	lsls	r0, r0, #1
 8009192:	183a      	adds	r2, r7, r0
 8009194:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	18d3      	adds	r3, r2, r3
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	2466      	movs	r4, #102	; 0x66
 80091a6:	193b      	adds	r3, r7, r4
 80091a8:	491f      	ldr	r1, [pc, #124]	; (8009228 <USB_EPStartXfer+0x720>)
 80091aa:	400a      	ands	r2, r1
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	18d3      	adds	r3, r2, r3
 80091b8:	193a      	adds	r2, r7, r4
 80091ba:	8812      	ldrh	r2, [r2, #0]
 80091bc:	491b      	ldr	r1, [pc, #108]	; (800922c <USB_EPStartXfer+0x724>)
 80091be:	430a      	orrs	r2, r1
 80091c0:	b292      	uxth	r2, r2
 80091c2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	663b      	str	r3, [r7, #96]	; 0x60
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2250      	movs	r2, #80	; 0x50
 80091cc:	5a9b      	ldrh	r3, [r3, r2]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	001a      	movs	r2, r3
 80091d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091d4:	189b      	adds	r3, r3, r2
 80091d6:	663b      	str	r3, [r7, #96]	; 0x60
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	00da      	lsls	r2, r3, #3
 80091de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091e0:	18d3      	adds	r3, r2, r3
 80091e2:	4a0d      	ldr	r2, [pc, #52]	; (8009218 <USB_EPStartXfer+0x710>)
 80091e4:	4694      	mov	ip, r2
 80091e6:	4463      	add	r3, ip
 80091e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ea:	183b      	adds	r3, r7, r0
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091f4:	2585      	movs	r5, #133	; 0x85
 80091f6:	006d      	lsls	r5, r5, #1
 80091f8:	197b      	adds	r3, r7, r5
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	8912      	ldrh	r2, [r2, #8]
 80091fe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	6959      	ldr	r1, [r3, #20]
 8009204:	183b      	adds	r3, r7, r0
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	b29c      	uxth	r4, r3
 800920a:	197b      	adds	r3, r7, r5
 800920c:	881a      	ldrh	r2, [r3, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	0023      	movs	r3, r4
 8009212:	f000 fec7 	bl	8009fa4 <USB_WritePMA>
 8009216:	e189      	b.n	800952c <USB_EPStartXfer+0xa24>
 8009218:	00000402 	.word	0x00000402
 800921c:	ffff83ff 	.word	0xffff83ff
 8009220:	ffff8000 	.word	0xffff8000
 8009224:	00000406 	.word	0x00000406
 8009228:	ffff8e8f 	.word	0xffff8e8f
 800922c:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	18d3      	adds	r3, r2, r3
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	001a      	movs	r2, r3
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	4013      	ands	r3, r2
 8009244:	d100      	bne.n	8009248 <USB_EPStartXfer+0x740>
 8009246:	e08f      	b.n	8009368 <USB_EPStartXfer+0x860>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	67bb      	str	r3, [r7, #120]	; 0x78
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	785b      	ldrb	r3, [r3, #1]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d166      	bne.n	8009322 <USB_EPStartXfer+0x81a>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	673b      	str	r3, [r7, #112]	; 0x70
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2250      	movs	r2, #80	; 0x50
 800925c:	5a9b      	ldrh	r3, [r3, r2]
 800925e:	b29b      	uxth	r3, r3
 8009260:	001a      	movs	r2, r3
 8009262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009264:	189b      	adds	r3, r3, r2
 8009266:	673b      	str	r3, [r7, #112]	; 0x70
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	00da      	lsls	r2, r3, #3
 800926e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009270:	18d3      	adds	r3, r2, r3
 8009272:	4adc      	ldr	r2, [pc, #880]	; (80095e4 <USB_EPStartXfer+0xadc>)
 8009274:	4694      	mov	ip, r2
 8009276:	4463      	add	r3, ip
 8009278:	66fb      	str	r3, [r7, #108]	; 0x6c
 800927a:	2386      	movs	r3, #134	; 0x86
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	18fb      	adds	r3, r7, r3
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d110      	bne.n	80092a8 <USB_EPStartXfer+0x7a0>
 8009286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	4ad6      	ldr	r2, [pc, #856]	; (80095e8 <USB_EPStartXfer+0xae0>)
 800928e:	4013      	ands	r3, r2
 8009290:	b29a      	uxth	r2, r3
 8009292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	4ad3      	ldr	r2, [pc, #844]	; (80095ec <USB_EPStartXfer+0xae4>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	e058      	b.n	800935a <USB_EPStartXfer+0x852>
 80092a8:	2286      	movs	r2, #134	; 0x86
 80092aa:	0052      	lsls	r2, r2, #1
 80092ac:	18bb      	adds	r3, r7, r2
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b3e      	cmp	r3, #62	; 0x3e
 80092b2:	d818      	bhi.n	80092e6 <USB_EPStartXfer+0x7de>
 80092b4:	18bb      	adds	r3, r7, r2
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	085b      	lsrs	r3, r3, #1
 80092ba:	21f4      	movs	r1, #244	; 0xf4
 80092bc:	1878      	adds	r0, r7, r1
 80092be:	6003      	str	r3, [r0, #0]
 80092c0:	18bb      	adds	r3, r7, r2
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2201      	movs	r2, #1
 80092c6:	4013      	ands	r3, r2
 80092c8:	d004      	beq.n	80092d4 <USB_EPStartXfer+0x7cc>
 80092ca:	187b      	adds	r3, r7, r1
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	187a      	adds	r2, r7, r1
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	23f4      	movs	r3, #244	; 0xf4
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	029b      	lsls	r3, r3, #10
 80092de:	b29a      	uxth	r2, r3
 80092e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	e039      	b.n	800935a <USB_EPStartXfer+0x852>
 80092e6:	2286      	movs	r2, #134	; 0x86
 80092e8:	0052      	lsls	r2, r2, #1
 80092ea:	18bb      	adds	r3, r7, r2
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	21f4      	movs	r1, #244	; 0xf4
 80092f2:	1878      	adds	r0, r7, r1
 80092f4:	6003      	str	r3, [r0, #0]
 80092f6:	18bb      	adds	r3, r7, r2
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	221f      	movs	r2, #31
 80092fc:	4013      	ands	r3, r2
 80092fe:	d104      	bne.n	800930a <USB_EPStartXfer+0x802>
 8009300:	187b      	adds	r3, r7, r1
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3b01      	subs	r3, #1
 8009306:	187a      	adds	r2, r7, r1
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	23f4      	movs	r3, #244	; 0xf4
 800930c:	18fb      	adds	r3, r7, r3
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	029b      	lsls	r3, r3, #10
 8009314:	b29b      	uxth	r3, r3
 8009316:	4ab5      	ldr	r2, [pc, #724]	; (80095ec <USB_EPStartXfer+0xae4>)
 8009318:	4313      	orrs	r3, r2
 800931a:	b29a      	uxth	r2, r3
 800931c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800931e:	801a      	strh	r2, [r3, #0]
 8009320:	e01b      	b.n	800935a <USB_EPStartXfer+0x852>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d117      	bne.n	800935a <USB_EPStartXfer+0x852>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2250      	movs	r2, #80	; 0x50
 800932e:	5a9b      	ldrh	r3, [r3, r2]
 8009330:	b29b      	uxth	r3, r3
 8009332:	001a      	movs	r2, r3
 8009334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009336:	189b      	adds	r3, r3, r2
 8009338:	67bb      	str	r3, [r7, #120]	; 0x78
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	00da      	lsls	r2, r3, #3
 8009340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009342:	18d3      	adds	r3, r2, r3
 8009344:	4aa7      	ldr	r2, [pc, #668]	; (80095e4 <USB_EPStartXfer+0xadc>)
 8009346:	4694      	mov	ip, r2
 8009348:	4463      	add	r3, ip
 800934a:	677b      	str	r3, [r7, #116]	; 0x74
 800934c:	2386      	movs	r3, #134	; 0x86
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	18fb      	adds	r3, r7, r3
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	b29a      	uxth	r2, r3
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800935a:	2385      	movs	r3, #133	; 0x85
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	8952      	ldrh	r2, [r2, #10]
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e09b      	b.n	80094a0 <USB_EPStartXfer+0x998>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d16b      	bne.n	8009448 <USB_EPStartXfer+0x940>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2180      	movs	r1, #128	; 0x80
 8009374:	187a      	adds	r2, r7, r1
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2250      	movs	r2, #80	; 0x50
 800937c:	5a9b      	ldrh	r3, [r3, r2]
 800937e:	b29b      	uxth	r3, r3
 8009380:	001a      	movs	r2, r3
 8009382:	187b      	adds	r3, r7, r1
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	189b      	adds	r3, r3, r2
 8009388:	187a      	adds	r2, r7, r1
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	00da      	lsls	r2, r3, #3
 8009392:	187b      	adds	r3, r7, r1
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	4a95      	ldr	r2, [pc, #596]	; (80095f0 <USB_EPStartXfer+0xae8>)
 800939a:	4694      	mov	ip, r2
 800939c:	4463      	add	r3, ip
 800939e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093a0:	2386      	movs	r3, #134	; 0x86
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	18fb      	adds	r3, r7, r3
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d110      	bne.n	80093ce <USB_EPStartXfer+0x8c6>
 80093ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4a8d      	ldr	r2, [pc, #564]	; (80095e8 <USB_EPStartXfer+0xae0>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ba:	801a      	strh	r2, [r3, #0]
 80093bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	4a8a      	ldr	r2, [pc, #552]	; (80095ec <USB_EPStartXfer+0xae4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e062      	b.n	8009494 <USB_EPStartXfer+0x98c>
 80093ce:	2286      	movs	r2, #134	; 0x86
 80093d0:	0052      	lsls	r2, r2, #1
 80093d2:	18bb      	adds	r3, r7, r2
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b3e      	cmp	r3, #62	; 0x3e
 80093d8:	d818      	bhi.n	800940c <USB_EPStartXfer+0x904>
 80093da:	18bb      	adds	r3, r7, r2
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	085b      	lsrs	r3, r3, #1
 80093e0:	21f0      	movs	r1, #240	; 0xf0
 80093e2:	1878      	adds	r0, r7, r1
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	18bb      	adds	r3, r7, r2
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2201      	movs	r2, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	d004      	beq.n	80093fa <USB_EPStartXfer+0x8f2>
 80093f0:	187b      	adds	r3, r7, r1
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	187a      	adds	r2, r7, r1
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	23f0      	movs	r3, #240	; 0xf0
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	029b      	lsls	r3, r3, #10
 8009404:	b29a      	uxth	r2, r3
 8009406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009408:	801a      	strh	r2, [r3, #0]
 800940a:	e043      	b.n	8009494 <USB_EPStartXfer+0x98c>
 800940c:	2286      	movs	r2, #134	; 0x86
 800940e:	0052      	lsls	r2, r2, #1
 8009410:	18bb      	adds	r3, r7, r2
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	095b      	lsrs	r3, r3, #5
 8009416:	21f0      	movs	r1, #240	; 0xf0
 8009418:	1878      	adds	r0, r7, r1
 800941a:	6003      	str	r3, [r0, #0]
 800941c:	18bb      	adds	r3, r7, r2
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	221f      	movs	r2, #31
 8009422:	4013      	ands	r3, r2
 8009424:	d104      	bne.n	8009430 <USB_EPStartXfer+0x928>
 8009426:	187b      	adds	r3, r7, r1
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3b01      	subs	r3, #1
 800942c:	187a      	adds	r2, r7, r1
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	23f0      	movs	r3, #240	; 0xf0
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	029b      	lsls	r3, r3, #10
 800943a:	b29b      	uxth	r3, r3
 800943c:	4a6b      	ldr	r2, [pc, #428]	; (80095ec <USB_EPStartXfer+0xae4>)
 800943e:	4313      	orrs	r3, r2
 8009440:	b29a      	uxth	r2, r3
 8009442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009444:	801a      	strh	r2, [r3, #0]
 8009446:	e025      	b.n	8009494 <USB_EPStartXfer+0x98c>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d121      	bne.n	8009494 <USB_EPStartXfer+0x98c>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2188      	movs	r1, #136	; 0x88
 8009454:	187a      	adds	r2, r7, r1
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2250      	movs	r2, #80	; 0x50
 800945c:	5a9b      	ldrh	r3, [r3, r2]
 800945e:	b29b      	uxth	r3, r3
 8009460:	001a      	movs	r2, r3
 8009462:	187b      	adds	r3, r7, r1
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	189b      	adds	r3, r3, r2
 8009468:	187a      	adds	r2, r7, r1
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	00da      	lsls	r2, r3, #3
 8009472:	187b      	adds	r3, r7, r1
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	18d3      	adds	r3, r2, r3
 8009478:	4a5d      	ldr	r2, [pc, #372]	; (80095f0 <USB_EPStartXfer+0xae8>)
 800947a:	4694      	mov	ip, r2
 800947c:	4463      	add	r3, ip
 800947e:	2184      	movs	r1, #132	; 0x84
 8009480:	187a      	adds	r2, r7, r1
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	2386      	movs	r3, #134	; 0x86
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	b29a      	uxth	r2, r3
 800948e:	187b      	adds	r3, r7, r1
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009494:	2385      	movs	r3, #133	; 0x85
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	8912      	ldrh	r2, [r2, #8]
 800949e:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	6959      	ldr	r1, [r3, #20]
 80094a4:	2386      	movs	r3, #134	; 0x86
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	18fb      	adds	r3, r7, r3
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	b29c      	uxth	r4, r3
 80094ae:	2385      	movs	r3, #133	; 0x85
 80094b0:	005b      	lsls	r3, r3, #1
 80094b2:	18fb      	adds	r3, r7, r3
 80094b4:	881a      	ldrh	r2, [r3, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	0023      	movs	r3, r4
 80094ba:	f000 fd73 	bl	8009fa4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d117      	bne.n	80094f6 <USB_EPStartXfer+0x9ee>
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	18d3      	adds	r3, r2, r3
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	2068      	movs	r0, #104	; 0x68
 80094d6:	183b      	adds	r3, r7, r0
 80094d8:	4946      	ldr	r1, [pc, #280]	; (80095f4 <USB_EPStartXfer+0xaec>)
 80094da:	400a      	ands	r2, r1
 80094dc:	801a      	strh	r2, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	18d3      	adds	r3, r2, r3
 80094e8:	183a      	adds	r2, r7, r0
 80094ea:	8812      	ldrh	r2, [r2, #0]
 80094ec:	4942      	ldr	r1, [pc, #264]	; (80095f8 <USB_EPStartXfer+0xaf0>)
 80094ee:	430a      	orrs	r2, r1
 80094f0:	b292      	uxth	r2, r2
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	e01a      	b.n	800952c <USB_EPStartXfer+0xa24>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d116      	bne.n	800952c <USB_EPStartXfer+0xa24>
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	18d3      	adds	r3, r2, r3
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	b29a      	uxth	r2, r3
 800950c:	206a      	movs	r0, #106	; 0x6a
 800950e:	183b      	adds	r3, r7, r0
 8009510:	4938      	ldr	r1, [pc, #224]	; (80095f4 <USB_EPStartXfer+0xaec>)
 8009512:	400a      	ands	r2, r1
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	18d3      	adds	r3, r2, r3
 8009520:	183a      	adds	r2, r7, r0
 8009522:	8812      	ldrh	r2, [r2, #0]
 8009524:	4935      	ldr	r1, [pc, #212]	; (80095fc <USB_EPStartXfer+0xaf4>)
 8009526:	430a      	orrs	r2, r1
 8009528:	b292      	uxth	r2, r2
 800952a:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	18d3      	adds	r3, r2, r3
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29a      	uxth	r2, r3
 800953a:	4b31      	ldr	r3, [pc, #196]	; (8009600 <USB_EPStartXfer+0xaf8>)
 800953c:	2188      	movs	r1, #136	; 0x88
 800953e:	0049      	lsls	r1, r1, #1
 8009540:	468c      	mov	ip, r1
 8009542:	44bc      	add	ip, r7
 8009544:	4463      	add	r3, ip
 8009546:	492f      	ldr	r1, [pc, #188]	; (8009604 <USB_EPStartXfer+0xafc>)
 8009548:	400a      	ands	r2, r1
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	4b2c      	ldr	r3, [pc, #176]	; (8009600 <USB_EPStartXfer+0xaf8>)
 800954e:	2288      	movs	r2, #136	; 0x88
 8009550:	0052      	lsls	r2, r2, #1
 8009552:	4694      	mov	ip, r2
 8009554:	44bc      	add	ip, r7
 8009556:	4463      	add	r3, ip
 8009558:	4a29      	ldr	r2, [pc, #164]	; (8009600 <USB_EPStartXfer+0xaf8>)
 800955a:	2188      	movs	r1, #136	; 0x88
 800955c:	0049      	lsls	r1, r1, #1
 800955e:	468c      	mov	ip, r1
 8009560:	44bc      	add	ip, r7
 8009562:	4462      	add	r2, ip
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	2110      	movs	r1, #16
 8009568:	404a      	eors	r2, r1
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	4b24      	ldr	r3, [pc, #144]	; (8009600 <USB_EPStartXfer+0xaf8>)
 800956e:	2288      	movs	r2, #136	; 0x88
 8009570:	0052      	lsls	r2, r2, #1
 8009572:	4694      	mov	ip, r2
 8009574:	44bc      	add	ip, r7
 8009576:	4463      	add	r3, ip
 8009578:	4a21      	ldr	r2, [pc, #132]	; (8009600 <USB_EPStartXfer+0xaf8>)
 800957a:	2188      	movs	r1, #136	; 0x88
 800957c:	0049      	lsls	r1, r1, #1
 800957e:	468c      	mov	ip, r1
 8009580:	44bc      	add	ip, r7
 8009582:	4462      	add	r2, ip
 8009584:	8812      	ldrh	r2, [r2, #0]
 8009586:	2120      	movs	r1, #32
 8009588:	404a      	eors	r2, r1
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	18d3      	adds	r3, r2, r3
 8009596:	4a1a      	ldr	r2, [pc, #104]	; (8009600 <USB_EPStartXfer+0xaf8>)
 8009598:	2188      	movs	r1, #136	; 0x88
 800959a:	0049      	lsls	r1, r1, #1
 800959c:	468c      	mov	ip, r1
 800959e:	44bc      	add	ip, r7
 80095a0:	4462      	add	r2, ip
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	4918      	ldr	r1, [pc, #96]	; (8009608 <USB_EPStartXfer+0xb00>)
 80095a6:	430a      	orrs	r2, r1
 80095a8:	b292      	uxth	r2, r2
 80095aa:	801a      	strh	r2, [r3, #0]
 80095ac:	f000 fbc5 	bl	8009d3a <USB_EPStartXfer+0x1232>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	7b1b      	ldrb	r3, [r3, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d000      	beq.n	80095ba <USB_EPStartXfer+0xab2>
 80095b8:	e0a7      	b.n	800970a <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d922      	bls.n	800960c <USB_EPStartXfer+0xb04>
      {
        len = ep->maxpacket;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	2186      	movs	r1, #134	; 0x86
 80095cc:	0049      	lsls	r1, r1, #1
 80095ce:	187a      	adds	r2, r7, r1
 80095d0:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	187b      	adds	r3, r7, r1
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	619a      	str	r2, [r3, #24]
 80095e0:	e01d      	b.n	800961e <USB_EPStartXfer+0xb16>
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	00000406 	.word	0x00000406
 80095e8:	ffff83ff 	.word	0xffff83ff
 80095ec:	ffff8000 	.word	0xffff8000
 80095f0:	00000402 	.word	0x00000402
 80095f4:	ffff8f8f 	.word	0xffff8f8f
 80095f8:	ffff80c0 	.word	0xffff80c0
 80095fc:	ffffc080 	.word	0xffffc080
 8009600:	fffffefe 	.word	0xfffffefe
 8009604:	ffff8fbf 	.word	0xffff8fbf
 8009608:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	2286      	movs	r2, #134	; 0x86
 8009612:	0052      	lsls	r2, r2, #1
 8009614:	18ba      	adds	r2, r7, r2
 8009616:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2194      	movs	r1, #148	; 0x94
 8009622:	187a      	adds	r2, r7, r1
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2250      	movs	r2, #80	; 0x50
 800962a:	5a9b      	ldrh	r3, [r3, r2]
 800962c:	b29b      	uxth	r3, r3
 800962e:	001a      	movs	r2, r3
 8009630:	187b      	adds	r3, r7, r1
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	189b      	adds	r3, r3, r2
 8009636:	187a      	adds	r2, r7, r1
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	00da      	lsls	r2, r3, #3
 8009640:	187b      	adds	r3, r7, r1
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	4abc      	ldr	r2, [pc, #752]	; (8009938 <USB_EPStartXfer+0xe30>)
 8009648:	4694      	mov	ip, r2
 800964a:	4463      	add	r3, ip
 800964c:	2190      	movs	r1, #144	; 0x90
 800964e:	187a      	adds	r2, r7, r1
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	2386      	movs	r3, #134	; 0x86
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d114      	bne.n	8009688 <USB_EPStartXfer+0xb80>
 800965e:	187b      	adds	r3, r7, r1
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4ab5      	ldr	r2, [pc, #724]	; (800993c <USB_EPStartXfer+0xe34>)
 8009668:	4013      	ands	r3, r2
 800966a:	b29a      	uxth	r2, r3
 800966c:	187b      	adds	r3, r7, r1
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	187b      	adds	r3, r7, r1
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	4ab1      	ldr	r2, [pc, #708]	; (8009940 <USB_EPStartXfer+0xe38>)
 800967c:	4313      	orrs	r3, r2
 800967e:	b29a      	uxth	r2, r3
 8009680:	187b      	adds	r3, r7, r1
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	e333      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
 8009688:	2286      	movs	r2, #134	; 0x86
 800968a:	0052      	lsls	r2, r2, #1
 800968c:	18bb      	adds	r3, r7, r2
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b3e      	cmp	r3, #62	; 0x3e
 8009692:	d81a      	bhi.n	80096ca <USB_EPStartXfer+0xbc2>
 8009694:	18bb      	adds	r3, r7, r2
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	085b      	lsrs	r3, r3, #1
 800969a:	21ec      	movs	r1, #236	; 0xec
 800969c:	1878      	adds	r0, r7, r1
 800969e:	6003      	str	r3, [r0, #0]
 80096a0:	18bb      	adds	r3, r7, r2
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2201      	movs	r2, #1
 80096a6:	4013      	ands	r3, r2
 80096a8:	d004      	beq.n	80096b4 <USB_EPStartXfer+0xbac>
 80096aa:	187b      	adds	r3, r7, r1
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3301      	adds	r3, #1
 80096b0:	187a      	adds	r2, r7, r1
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	23ec      	movs	r3, #236	; 0xec
 80096b6:	18fb      	adds	r3, r7, r3
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29a      	uxth	r2, r3
 80096c0:	2390      	movs	r3, #144	; 0x90
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	e312      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
 80096ca:	2286      	movs	r2, #134	; 0x86
 80096cc:	0052      	lsls	r2, r2, #1
 80096ce:	18bb      	adds	r3, r7, r2
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	095b      	lsrs	r3, r3, #5
 80096d4:	21ec      	movs	r1, #236	; 0xec
 80096d6:	1878      	adds	r0, r7, r1
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	18bb      	adds	r3, r7, r2
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	221f      	movs	r2, #31
 80096e0:	4013      	ands	r3, r2
 80096e2:	d104      	bne.n	80096ee <USB_EPStartXfer+0xbe6>
 80096e4:	187b      	adds	r3, r7, r1
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	187a      	adds	r2, r7, r1
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	23ec      	movs	r3, #236	; 0xec
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	029b      	lsls	r3, r3, #10
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4a91      	ldr	r2, [pc, #580]	; (8009940 <USB_EPStartXfer+0xe38>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	2390      	movs	r3, #144	; 0x90
 8009702:	18fb      	adds	r3, r7, r3
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	e2f2      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	78db      	ldrb	r3, [r3, #3]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d000      	beq.n	8009714 <USB_EPStartXfer+0xc0c>
 8009712:	e179      	b.n	8009a08 <USB_EPStartXfer+0xf00>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	785b      	ldrb	r3, [r3, #1]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d16f      	bne.n	80097fc <USB_EPStartXfer+0xcf4>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	21b0      	movs	r1, #176	; 0xb0
 8009720:	187a      	adds	r2, r7, r1
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2250      	movs	r2, #80	; 0x50
 8009728:	5a9b      	ldrh	r3, [r3, r2]
 800972a:	b29b      	uxth	r3, r3
 800972c:	001a      	movs	r2, r3
 800972e:	187b      	adds	r3, r7, r1
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	189b      	adds	r3, r3, r2
 8009734:	187a      	adds	r2, r7, r1
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	00da      	lsls	r2, r3, #3
 800973e:	187b      	adds	r3, r7, r1
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	18d3      	adds	r3, r2, r3
 8009744:	4a7f      	ldr	r2, [pc, #508]	; (8009944 <USB_EPStartXfer+0xe3c>)
 8009746:	4694      	mov	ip, r2
 8009748:	4463      	add	r3, ip
 800974a:	21ac      	movs	r1, #172	; 0xac
 800974c:	187a      	adds	r2, r7, r1
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d114      	bne.n	8009782 <USB_EPStartXfer+0xc7a>
 8009758:	187b      	adds	r3, r7, r1
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	4a76      	ldr	r2, [pc, #472]	; (800993c <USB_EPStartXfer+0xe34>)
 8009762:	4013      	ands	r3, r2
 8009764:	b29a      	uxth	r2, r3
 8009766:	187b      	adds	r3, r7, r1
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	187b      	adds	r3, r7, r1
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	4a72      	ldr	r2, [pc, #456]	; (8009940 <USB_EPStartXfer+0xe38>)
 8009776:	4313      	orrs	r3, r2
 8009778:	b29a      	uxth	r2, r3
 800977a:	187b      	adds	r3, r7, r1
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e060      	b.n	8009844 <USB_EPStartXfer+0xd3c>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b3e      	cmp	r3, #62	; 0x3e
 8009788:	d81a      	bhi.n	80097c0 <USB_EPStartXfer+0xcb8>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	085b      	lsrs	r3, r3, #1
 8009790:	21e8      	movs	r1, #232	; 0xe8
 8009792:	187a      	adds	r2, r7, r1
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2201      	movs	r2, #1
 800979c:	4013      	ands	r3, r2
 800979e:	d004      	beq.n	80097aa <USB_EPStartXfer+0xca2>
 80097a0:	187b      	adds	r3, r7, r1
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	187a      	adds	r2, r7, r1
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	23e8      	movs	r3, #232	; 0xe8
 80097ac:	18fb      	adds	r3, r7, r3
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	029b      	lsls	r3, r3, #10
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	23ac      	movs	r3, #172	; 0xac
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	e041      	b.n	8009844 <USB_EPStartXfer+0xd3c>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	21e8      	movs	r1, #232	; 0xe8
 80097c8:	187a      	adds	r2, r7, r1
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	221f      	movs	r2, #31
 80097d2:	4013      	ands	r3, r2
 80097d4:	d104      	bne.n	80097e0 <USB_EPStartXfer+0xcd8>
 80097d6:	187b      	adds	r3, r7, r1
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	187a      	adds	r2, r7, r1
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	23e8      	movs	r3, #232	; 0xe8
 80097e2:	18fb      	adds	r3, r7, r3
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	029b      	lsls	r3, r3, #10
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	4a54      	ldr	r2, [pc, #336]	; (8009940 <USB_EPStartXfer+0xe38>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	23ac      	movs	r3, #172	; 0xac
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	801a      	strh	r2, [r3, #0]
 80097fa:	e023      	b.n	8009844 <USB_EPStartXfer+0xd3c>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d11f      	bne.n	8009844 <USB_EPStartXfer+0xd3c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	21b8      	movs	r1, #184	; 0xb8
 8009808:	187a      	adds	r2, r7, r1
 800980a:	6013      	str	r3, [r2, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2250      	movs	r2, #80	; 0x50
 8009810:	5a9b      	ldrh	r3, [r3, r2]
 8009812:	b29b      	uxth	r3, r3
 8009814:	001a      	movs	r2, r3
 8009816:	187b      	adds	r3, r7, r1
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	189b      	adds	r3, r3, r2
 800981c:	187a      	adds	r2, r7, r1
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	00da      	lsls	r2, r3, #3
 8009826:	187b      	adds	r3, r7, r1
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	18d3      	adds	r3, r2, r3
 800982c:	4a45      	ldr	r2, [pc, #276]	; (8009944 <USB_EPStartXfer+0xe3c>)
 800982e:	4694      	mov	ip, r2
 8009830:	4463      	add	r3, ip
 8009832:	21b4      	movs	r1, #180	; 0xb4
 8009834:	187a      	adds	r2, r7, r1
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	b29a      	uxth	r2, r3
 800983e:	187b      	adds	r3, r7, r1
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	22a8      	movs	r2, #168	; 0xa8
 8009848:	18ba      	adds	r2, r7, r2
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d000      	beq.n	8009856 <USB_EPStartXfer+0xd4e>
 8009854:	e078      	b.n	8009948 <USB_EPStartXfer+0xe40>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	21a0      	movs	r1, #160	; 0xa0
 800985a:	187a      	adds	r2, r7, r1
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2250      	movs	r2, #80	; 0x50
 8009862:	5a9b      	ldrh	r3, [r3, r2]
 8009864:	b29b      	uxth	r3, r3
 8009866:	001a      	movs	r2, r3
 8009868:	187b      	adds	r3, r7, r1
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	189b      	adds	r3, r3, r2
 800986e:	187a      	adds	r2, r7, r1
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	00da      	lsls	r2, r3, #3
 8009878:	187b      	adds	r3, r7, r1
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	18d3      	adds	r3, r2, r3
 800987e:	4a2e      	ldr	r2, [pc, #184]	; (8009938 <USB_EPStartXfer+0xe30>)
 8009880:	4694      	mov	ip, r2
 8009882:	4463      	add	r3, ip
 8009884:	219c      	movs	r1, #156	; 0x9c
 8009886:	187a      	adds	r2, r7, r1
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d114      	bne.n	80098bc <USB_EPStartXfer+0xdb4>
 8009892:	187b      	adds	r3, r7, r1
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	4a28      	ldr	r2, [pc, #160]	; (800993c <USB_EPStartXfer+0xe34>)
 800989c:	4013      	ands	r3, r2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	187b      	adds	r3, r7, r1
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4a24      	ldr	r2, [pc, #144]	; (8009940 <USB_EPStartXfer+0xe38>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	187b      	adds	r3, r7, r1
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	801a      	strh	r2, [r3, #0]
 80098ba:	e066      	b.n	800998a <USB_EPStartXfer+0xe82>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b3e      	cmp	r3, #62	; 0x3e
 80098c2:	d81a      	bhi.n	80098fa <USB_EPStartXfer+0xdf2>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	21e4      	movs	r1, #228	; 0xe4
 80098cc:	187a      	adds	r2, r7, r1
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2201      	movs	r2, #1
 80098d6:	4013      	ands	r3, r2
 80098d8:	d004      	beq.n	80098e4 <USB_EPStartXfer+0xddc>
 80098da:	187b      	adds	r3, r7, r1
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3301      	adds	r3, #1
 80098e0:	187a      	adds	r2, r7, r1
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	23e4      	movs	r3, #228	; 0xe4
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	029b      	lsls	r3, r3, #10
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	239c      	movs	r3, #156	; 0x9c
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e047      	b.n	800998a <USB_EPStartXfer+0xe82>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	21e4      	movs	r1, #228	; 0xe4
 8009902:	187a      	adds	r2, r7, r1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	221f      	movs	r2, #31
 800990c:	4013      	ands	r3, r2
 800990e:	d104      	bne.n	800991a <USB_EPStartXfer+0xe12>
 8009910:	187b      	adds	r3, r7, r1
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3b01      	subs	r3, #1
 8009916:	187a      	adds	r2, r7, r1
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	23e4      	movs	r3, #228	; 0xe4
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	029b      	lsls	r3, r3, #10
 8009924:	b29b      	uxth	r3, r3
 8009926:	4a06      	ldr	r2, [pc, #24]	; (8009940 <USB_EPStartXfer+0xe38>)
 8009928:	4313      	orrs	r3, r2
 800992a:	b29a      	uxth	r2, r3
 800992c:	239c      	movs	r3, #156	; 0x9c
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	e029      	b.n	800998a <USB_EPStartXfer+0xe82>
 8009936:	46c0      	nop			; (mov r8, r8)
 8009938:	00000406 	.word	0x00000406
 800993c:	ffff83ff 	.word	0xffff83ff
 8009940:	ffff8000 	.word	0xffff8000
 8009944:	00000402 	.word	0x00000402
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d11c      	bne.n	800998a <USB_EPStartXfer+0xe82>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2250      	movs	r2, #80	; 0x50
 8009954:	5a9b      	ldrh	r3, [r3, r2]
 8009956:	b29b      	uxth	r3, r3
 8009958:	001a      	movs	r2, r3
 800995a:	21a8      	movs	r1, #168	; 0xa8
 800995c:	187b      	adds	r3, r7, r1
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	189b      	adds	r3, r3, r2
 8009962:	187a      	adds	r2, r7, r1
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	00da      	lsls	r2, r3, #3
 800996c:	187b      	adds	r3, r7, r1
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	18d3      	adds	r3, r2, r3
 8009972:	4ad9      	ldr	r2, [pc, #868]	; (8009cd8 <USB_EPStartXfer+0x11d0>)
 8009974:	4694      	mov	ip, r2
 8009976:	4463      	add	r3, ip
 8009978:	21a4      	movs	r1, #164	; 0xa4
 800997a:	187a      	adds	r2, r7, r1
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	b29a      	uxth	r2, r3
 8009984:	187b      	adds	r3, r7, r1
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d100      	bne.n	8009994 <USB_EPStartXfer+0xe8c>
 8009992:	e1ad      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	18d2      	adds	r2, r2, r3
 800999e:	219a      	movs	r1, #154	; 0x9a
 80099a0:	187b      	adds	r3, r7, r1
 80099a2:	8812      	ldrh	r2, [r2, #0]
 80099a4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099a6:	187b      	adds	r3, r7, r1
 80099a8:	881a      	ldrh	r2, [r3, #0]
 80099aa:	2380      	movs	r3, #128	; 0x80
 80099ac:	01db      	lsls	r3, r3, #7
 80099ae:	4013      	ands	r3, r2
 80099b0:	d004      	beq.n	80099bc <USB_EPStartXfer+0xeb4>
 80099b2:	187b      	adds	r3, r7, r1
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	2240      	movs	r2, #64	; 0x40
 80099b8:	4013      	ands	r3, r2
 80099ba:	d10d      	bne.n	80099d8 <USB_EPStartXfer+0xed0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099bc:	219a      	movs	r1, #154	; 0x9a
 80099be:	187b      	adds	r3, r7, r1
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	2380      	movs	r3, #128	; 0x80
 80099c4:	01db      	lsls	r3, r3, #7
 80099c6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099c8:	d000      	beq.n	80099cc <USB_EPStartXfer+0xec4>
 80099ca:	e191      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099cc:	187b      	adds	r3, r7, r1
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	2240      	movs	r2, #64	; 0x40
 80099d2:	4013      	ands	r3, r2
 80099d4:	d000      	beq.n	80099d8 <USB_EPStartXfer+0xed0>
 80099d6:	e18b      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	18d3      	adds	r3, r2, r3
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	2098      	movs	r0, #152	; 0x98
 80099e8:	183b      	adds	r3, r7, r0
 80099ea:	49bc      	ldr	r1, [pc, #752]	; (8009cdc <USB_EPStartXfer+0x11d4>)
 80099ec:	400a      	ands	r2, r1
 80099ee:	801a      	strh	r2, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	183a      	adds	r2, r7, r0
 80099fc:	8812      	ldrh	r2, [r2, #0]
 80099fe:	49b8      	ldr	r1, [pc, #736]	; (8009ce0 <USB_EPStartXfer+0x11d8>)
 8009a00:	430a      	orrs	r2, r1
 8009a02:	b292      	uxth	r2, r2
 8009a04:	801a      	strh	r2, [r3, #0]
 8009a06:	e173      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	78db      	ldrb	r3, [r3, #3]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d000      	beq.n	8009a12 <USB_EPStartXfer+0xf0a>
 8009a10:	e160      	b.n	8009cd4 <USB_EPStartXfer+0x11cc>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d90d      	bls.n	8009a3a <USB_EPStartXfer+0xf32>
        {
          len = ep->maxpacket;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2186      	movs	r1, #134	; 0x86
 8009a24:	0049      	lsls	r1, r1, #1
 8009a26:	187a      	adds	r2, r7, r1
 8009a28:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	699a      	ldr	r2, [r3, #24]
 8009a2e:	187b      	adds	r3, r7, r1
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	1ad2      	subs	r2, r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	619a      	str	r2, [r3, #24]
 8009a38:	e008      	b.n	8009a4c <USB_EPStartXfer+0xf44>
        }
        else
        {
          len = ep->xfer_len;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2286      	movs	r2, #134	; 0x86
 8009a40:	0052      	lsls	r2, r2, #1
 8009a42:	18ba      	adds	r2, r7, r2
 8009a44:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d000      	beq.n	8009a56 <USB_EPStartXfer+0xf4e>
 8009a54:	e075      	b.n	8009b42 <USB_EPStartXfer+0x103a>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	21d0      	movs	r1, #208	; 0xd0
 8009a5a:	187a      	adds	r2, r7, r1
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2250      	movs	r2, #80	; 0x50
 8009a62:	5a9b      	ldrh	r3, [r3, r2]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	001a      	movs	r2, r3
 8009a68:	187b      	adds	r3, r7, r1
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	189b      	adds	r3, r3, r2
 8009a6e:	187a      	adds	r2, r7, r1
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	00da      	lsls	r2, r3, #3
 8009a78:	187b      	adds	r3, r7, r1
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	18d3      	adds	r3, r2, r3
 8009a7e:	4a99      	ldr	r2, [pc, #612]	; (8009ce4 <USB_EPStartXfer+0x11dc>)
 8009a80:	4694      	mov	ip, r2
 8009a82:	4463      	add	r3, ip
 8009a84:	21cc      	movs	r1, #204	; 0xcc
 8009a86:	187a      	adds	r2, r7, r1
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	2386      	movs	r3, #134	; 0x86
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	18fb      	adds	r3, r7, r3
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d114      	bne.n	8009ac0 <USB_EPStartXfer+0xfb8>
 8009a96:	187b      	adds	r3, r7, r1
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4a92      	ldr	r2, [pc, #584]	; (8009ce8 <USB_EPStartXfer+0x11e0>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	187b      	adds	r3, r7, r1
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	801a      	strh	r2, [r3, #0]
 8009aaa:	187b      	adds	r3, r7, r1
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	4a8e      	ldr	r2, [pc, #568]	; (8009cec <USB_EPStartXfer+0x11e4>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	187b      	adds	r3, r7, r1
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	801a      	strh	r2, [r3, #0]
 8009abe:	e066      	b.n	8009b8e <USB_EPStartXfer+0x1086>
 8009ac0:	2286      	movs	r2, #134	; 0x86
 8009ac2:	0052      	lsls	r2, r2, #1
 8009ac4:	18bb      	adds	r3, r7, r2
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8009aca:	d81a      	bhi.n	8009b02 <USB_EPStartXfer+0xffa>
 8009acc:	18bb      	adds	r3, r7, r2
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	085b      	lsrs	r3, r3, #1
 8009ad2:	21e0      	movs	r1, #224	; 0xe0
 8009ad4:	1878      	adds	r0, r7, r1
 8009ad6:	6003      	str	r3, [r0, #0]
 8009ad8:	18bb      	adds	r3, r7, r2
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2201      	movs	r2, #1
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d004      	beq.n	8009aec <USB_EPStartXfer+0xfe4>
 8009ae2:	187b      	adds	r3, r7, r1
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	187a      	adds	r2, r7, r1
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	23e0      	movs	r3, #224	; 0xe0
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	029b      	lsls	r3, r3, #10
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	23cc      	movs	r3, #204	; 0xcc
 8009afa:	18fb      	adds	r3, r7, r3
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	e045      	b.n	8009b8e <USB_EPStartXfer+0x1086>
 8009b02:	2286      	movs	r2, #134	; 0x86
 8009b04:	0052      	lsls	r2, r2, #1
 8009b06:	18bb      	adds	r3, r7, r2
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	095b      	lsrs	r3, r3, #5
 8009b0c:	21e0      	movs	r1, #224	; 0xe0
 8009b0e:	1878      	adds	r0, r7, r1
 8009b10:	6003      	str	r3, [r0, #0]
 8009b12:	18bb      	adds	r3, r7, r2
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	221f      	movs	r2, #31
 8009b18:	4013      	ands	r3, r2
 8009b1a:	d104      	bne.n	8009b26 <USB_EPStartXfer+0x101e>
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	187a      	adds	r2, r7, r1
 8009b24:	6013      	str	r3, [r2, #0]
 8009b26:	23e0      	movs	r3, #224	; 0xe0
 8009b28:	18fb      	adds	r3, r7, r3
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	029b      	lsls	r3, r3, #10
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4a6e      	ldr	r2, [pc, #440]	; (8009cec <USB_EPStartXfer+0x11e4>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	23cc      	movs	r3, #204	; 0xcc
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	e025      	b.n	8009b8e <USB_EPStartXfer+0x1086>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d121      	bne.n	8009b8e <USB_EPStartXfer+0x1086>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	21d8      	movs	r1, #216	; 0xd8
 8009b4e:	187a      	adds	r2, r7, r1
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2250      	movs	r2, #80	; 0x50
 8009b56:	5a9b      	ldrh	r3, [r3, r2]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	187b      	adds	r3, r7, r1
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	189b      	adds	r3, r3, r2
 8009b62:	187a      	adds	r2, r7, r1
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	00da      	lsls	r2, r3, #3
 8009b6c:	187b      	adds	r3, r7, r1
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	18d3      	adds	r3, r2, r3
 8009b72:	4a5c      	ldr	r2, [pc, #368]	; (8009ce4 <USB_EPStartXfer+0x11dc>)
 8009b74:	4694      	mov	ip, r2
 8009b76:	4463      	add	r3, ip
 8009b78:	21d4      	movs	r1, #212	; 0xd4
 8009b7a:	187a      	adds	r2, r7, r1
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	2386      	movs	r3, #134	; 0x86
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	18fb      	adds	r3, r7, r3
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	187b      	adds	r3, r7, r1
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	801a      	strh	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	22c8      	movs	r2, #200	; 0xc8
 8009b92:	18ba      	adds	r2, r7, r2
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d000      	beq.n	8009ba0 <USB_EPStartXfer+0x1098>
 8009b9e:	e075      	b.n	8009c8c <USB_EPStartXfer+0x1184>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	21c0      	movs	r1, #192	; 0xc0
 8009ba4:	187a      	adds	r2, r7, r1
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2250      	movs	r2, #80	; 0x50
 8009bac:	5a9b      	ldrh	r3, [r3, r2]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	001a      	movs	r2, r3
 8009bb2:	187b      	adds	r3, r7, r1
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	189b      	adds	r3, r3, r2
 8009bb8:	187a      	adds	r2, r7, r1
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	00da      	lsls	r2, r3, #3
 8009bc2:	187b      	adds	r3, r7, r1
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	18d3      	adds	r3, r2, r3
 8009bc8:	4a43      	ldr	r2, [pc, #268]	; (8009cd8 <USB_EPStartXfer+0x11d0>)
 8009bca:	4694      	mov	ip, r2
 8009bcc:	4463      	add	r3, ip
 8009bce:	21bc      	movs	r1, #188	; 0xbc
 8009bd0:	187a      	adds	r2, r7, r1
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	2386      	movs	r3, #134	; 0x86
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	18fb      	adds	r3, r7, r3
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d114      	bne.n	8009c0a <USB_EPStartXfer+0x1102>
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4a3f      	ldr	r2, [pc, #252]	; (8009ce8 <USB_EPStartXfer+0x11e0>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	187b      	adds	r3, r7, r1
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	801a      	strh	r2, [r3, #0]
 8009bf4:	187b      	adds	r3, r7, r1
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4a3b      	ldr	r2, [pc, #236]	; (8009cec <USB_EPStartXfer+0x11e4>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	187b      	adds	r3, r7, r1
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	801a      	strh	r2, [r3, #0]
 8009c08:	e072      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
 8009c0a:	2286      	movs	r2, #134	; 0x86
 8009c0c:	0052      	lsls	r2, r2, #1
 8009c0e:	18bb      	adds	r3, r7, r2
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b3e      	cmp	r3, #62	; 0x3e
 8009c14:	d81a      	bhi.n	8009c4c <USB_EPStartXfer+0x1144>
 8009c16:	18bb      	adds	r3, r7, r2
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	085b      	lsrs	r3, r3, #1
 8009c1c:	21dc      	movs	r1, #220	; 0xdc
 8009c1e:	1878      	adds	r0, r7, r1
 8009c20:	6003      	str	r3, [r0, #0]
 8009c22:	18bb      	adds	r3, r7, r2
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2201      	movs	r2, #1
 8009c28:	4013      	ands	r3, r2
 8009c2a:	d004      	beq.n	8009c36 <USB_EPStartXfer+0x112e>
 8009c2c:	187b      	adds	r3, r7, r1
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	187a      	adds	r2, r7, r1
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	23dc      	movs	r3, #220	; 0xdc
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	029b      	lsls	r3, r3, #10
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	23bc      	movs	r3, #188	; 0xbc
 8009c44:	18fb      	adds	r3, r7, r3
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	801a      	strh	r2, [r3, #0]
 8009c4a:	e051      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
 8009c4c:	2286      	movs	r2, #134	; 0x86
 8009c4e:	0052      	lsls	r2, r2, #1
 8009c50:	18bb      	adds	r3, r7, r2
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	095b      	lsrs	r3, r3, #5
 8009c56:	21dc      	movs	r1, #220	; 0xdc
 8009c58:	1878      	adds	r0, r7, r1
 8009c5a:	6003      	str	r3, [r0, #0]
 8009c5c:	18bb      	adds	r3, r7, r2
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	221f      	movs	r2, #31
 8009c62:	4013      	ands	r3, r2
 8009c64:	d104      	bne.n	8009c70 <USB_EPStartXfer+0x1168>
 8009c66:	187b      	adds	r3, r7, r1
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	187a      	adds	r2, r7, r1
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	23dc      	movs	r3, #220	; 0xdc
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	029b      	lsls	r3, r3, #10
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4a1b      	ldr	r2, [pc, #108]	; (8009cec <USB_EPStartXfer+0x11e4>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	23bc      	movs	r3, #188	; 0xbc
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e031      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d12d      	bne.n	8009cf0 <USB_EPStartXfer+0x11e8>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2250      	movs	r2, #80	; 0x50
 8009c98:	5a9b      	ldrh	r3, [r3, r2]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	21c8      	movs	r1, #200	; 0xc8
 8009ca0:	187b      	adds	r3, r7, r1
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	189b      	adds	r3, r3, r2
 8009ca6:	187a      	adds	r2, r7, r1
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	00da      	lsls	r2, r3, #3
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <USB_EPStartXfer+0x11d0>)
 8009cb8:	4694      	mov	ip, r2
 8009cba:	4463      	add	r3, ip
 8009cbc:	21c4      	movs	r1, #196	; 0xc4
 8009cbe:	187a      	adds	r2, r7, r1
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	2386      	movs	r3, #134	; 0x86
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	18fb      	adds	r3, r7, r3
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	187b      	adds	r3, r7, r1
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	e00d      	b.n	8009cf0 <USB_EPStartXfer+0x11e8>
      }
      else
      {
        return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e031      	b.n	8009d3c <USB_EPStartXfer+0x1234>
 8009cd8:	00000406 	.word	0x00000406
 8009cdc:	ffff8f8f 	.word	0xffff8f8f
 8009ce0:	ffff80c0 	.word	0xffff80c0
 8009ce4:	00000402 	.word	0x00000402
 8009ce8:	ffff83ff 	.word	0xffff83ff
 8009cec:	ffff8000 	.word	0xffff8000
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	18d3      	adds	r3, r2, r3
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	208e      	movs	r0, #142	; 0x8e
 8009d00:	183b      	adds	r3, r7, r0
 8009d02:	4910      	ldr	r1, [pc, #64]	; (8009d44 <USB_EPStartXfer+0x123c>)
 8009d04:	400a      	ands	r2, r1
 8009d06:	801a      	strh	r2, [r3, #0]
 8009d08:	183b      	adds	r3, r7, r0
 8009d0a:	183a      	adds	r2, r7, r0
 8009d0c:	8812      	ldrh	r2, [r2, #0]
 8009d0e:	2180      	movs	r1, #128	; 0x80
 8009d10:	0149      	lsls	r1, r1, #5
 8009d12:	404a      	eors	r2, r1
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	183b      	adds	r3, r7, r0
 8009d18:	183a      	adds	r2, r7, r0
 8009d1a:	8812      	ldrh	r2, [r2, #0]
 8009d1c:	2180      	movs	r1, #128	; 0x80
 8009d1e:	0189      	lsls	r1, r1, #6
 8009d20:	404a      	eors	r2, r1
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	18d3      	adds	r3, r2, r3
 8009d2e:	183a      	adds	r2, r7, r0
 8009d30:	8812      	ldrh	r2, [r2, #0]
 8009d32:	4905      	ldr	r1, [pc, #20]	; (8009d48 <USB_EPStartXfer+0x1240>)
 8009d34:	430a      	orrs	r2, r1
 8009d36:	b292      	uxth	r2, r2
 8009d38:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	b044      	add	sp, #272	; 0x110
 8009d42:	bdb0      	pop	{r4, r5, r7, pc}
 8009d44:	ffffbf8f 	.word	0xffffbf8f
 8009d48:	ffff8080 	.word	0xffff8080

08009d4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01d      	beq.n	8009d9a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	18d3      	adds	r3, r2, r3
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	200c      	movs	r0, #12
 8009d6e:	183b      	adds	r3, r7, r0
 8009d70:	491b      	ldr	r1, [pc, #108]	; (8009de0 <USB_EPSetStall+0x94>)
 8009d72:	400a      	ands	r2, r1
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	183b      	adds	r3, r7, r0
 8009d78:	183a      	adds	r2, r7, r0
 8009d7a:	8812      	ldrh	r2, [r2, #0]
 8009d7c:	2110      	movs	r1, #16
 8009d7e:	404a      	eors	r2, r1
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	18d3      	adds	r3, r2, r3
 8009d8c:	183a      	adds	r2, r7, r0
 8009d8e:	8812      	ldrh	r2, [r2, #0]
 8009d90:	4914      	ldr	r1, [pc, #80]	; (8009de4 <USB_EPSetStall+0x98>)
 8009d92:	430a      	orrs	r2, r1
 8009d94:	b292      	uxth	r2, r2
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	e01d      	b.n	8009dd6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	18d3      	adds	r3, r2, r3
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	200e      	movs	r0, #14
 8009daa:	183b      	adds	r3, r7, r0
 8009dac:	490e      	ldr	r1, [pc, #56]	; (8009de8 <USB_EPSetStall+0x9c>)
 8009dae:	400a      	ands	r2, r1
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	183b      	adds	r3, r7, r0
 8009db4:	183a      	adds	r2, r7, r0
 8009db6:	8812      	ldrh	r2, [r2, #0]
 8009db8:	2180      	movs	r1, #128	; 0x80
 8009dba:	0149      	lsls	r1, r1, #5
 8009dbc:	404a      	eors	r2, r1
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	18d3      	adds	r3, r2, r3
 8009dca:	183a      	adds	r2, r7, r0
 8009dcc:	8812      	ldrh	r2, [r2, #0]
 8009dce:	4905      	ldr	r1, [pc, #20]	; (8009de4 <USB_EPSetStall+0x98>)
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	b292      	uxth	r2, r2
 8009dd4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	0018      	movs	r0, r3
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b004      	add	sp, #16
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	ffff8fbf 	.word	0xffff8fbf
 8009de4:	ffff8080 	.word	0xffff8080
 8009de8:	ffffbf8f 	.word	0xffffbf8f

08009dec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	7b1b      	ldrb	r3, [r3, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d000      	beq.n	8009e00 <USB_EPClearStall+0x14>
 8009dfe:	e095      	b.n	8009f2c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d046      	beq.n	8009e96 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	18d2      	adds	r2, r2, r3
 8009e12:	2110      	movs	r1, #16
 8009e14:	187b      	adds	r3, r7, r1
 8009e16:	8812      	ldrh	r2, [r2, #0]
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	187b      	adds	r3, r7, r1
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	2240      	movs	r2, #64	; 0x40
 8009e20:	4013      	ands	r3, r2
 8009e22:	d016      	beq.n	8009e52 <USB_EPClearStall+0x66>
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	18d3      	adds	r3, r2, r3
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	200e      	movs	r0, #14
 8009e34:	183b      	adds	r3, r7, r0
 8009e36:	4940      	ldr	r1, [pc, #256]	; (8009f38 <USB_EPClearStall+0x14c>)
 8009e38:	400a      	ands	r2, r1
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	18d3      	adds	r3, r2, r3
 8009e46:	183a      	adds	r2, r7, r0
 8009e48:	8812      	ldrh	r2, [r2, #0]
 8009e4a:	493c      	ldr	r1, [pc, #240]	; (8009f3c <USB_EPClearStall+0x150>)
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	78db      	ldrb	r3, [r3, #3]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d068      	beq.n	8009f2c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	18d3      	adds	r3, r2, r3
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	200c      	movs	r0, #12
 8009e6a:	183b      	adds	r3, r7, r0
 8009e6c:	4934      	ldr	r1, [pc, #208]	; (8009f40 <USB_EPClearStall+0x154>)
 8009e6e:	400a      	ands	r2, r1
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	183a      	adds	r2, r7, r0
 8009e76:	8812      	ldrh	r2, [r2, #0]
 8009e78:	2120      	movs	r1, #32
 8009e7a:	404a      	eors	r2, r1
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	18d3      	adds	r3, r2, r3
 8009e88:	183a      	adds	r2, r7, r0
 8009e8a:	8812      	ldrh	r2, [r2, #0]
 8009e8c:	492d      	ldr	r1, [pc, #180]	; (8009f44 <USB_EPClearStall+0x158>)
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	b292      	uxth	r2, r2
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e04a      	b.n	8009f2c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	18d2      	adds	r2, r2, r3
 8009ea0:	2116      	movs	r1, #22
 8009ea2:	187b      	adds	r3, r7, r1
 8009ea4:	8812      	ldrh	r2, [r2, #0]
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	881a      	ldrh	r2, [r3, #0]
 8009eac:	2380      	movs	r3, #128	; 0x80
 8009eae:	01db      	lsls	r3, r3, #7
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	d016      	beq.n	8009ee2 <USB_EPClearStall+0xf6>
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	18d3      	adds	r3, r2, r3
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	2014      	movs	r0, #20
 8009ec4:	183b      	adds	r3, r7, r0
 8009ec6:	491c      	ldr	r1, [pc, #112]	; (8009f38 <USB_EPClearStall+0x14c>)
 8009ec8:	400a      	ands	r2, r1
 8009eca:	801a      	strh	r2, [r3, #0]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	18d3      	adds	r3, r2, r3
 8009ed6:	183a      	adds	r2, r7, r0
 8009ed8:	8812      	ldrh	r2, [r2, #0]
 8009eda:	491b      	ldr	r1, [pc, #108]	; (8009f48 <USB_EPClearStall+0x15c>)
 8009edc:	430a      	orrs	r2, r1
 8009ede:	b292      	uxth	r2, r2
 8009ee0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	18d3      	adds	r3, r2, r3
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	2012      	movs	r0, #18
 8009ef2:	183b      	adds	r3, r7, r0
 8009ef4:	4915      	ldr	r1, [pc, #84]	; (8009f4c <USB_EPClearStall+0x160>)
 8009ef6:	400a      	ands	r2, r1
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	183b      	adds	r3, r7, r0
 8009efc:	183a      	adds	r2, r7, r0
 8009efe:	8812      	ldrh	r2, [r2, #0]
 8009f00:	2180      	movs	r1, #128	; 0x80
 8009f02:	0149      	lsls	r1, r1, #5
 8009f04:	404a      	eors	r2, r1
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	183b      	adds	r3, r7, r0
 8009f0a:	183a      	adds	r2, r7, r0
 8009f0c:	8812      	ldrh	r2, [r2, #0]
 8009f0e:	2180      	movs	r1, #128	; 0x80
 8009f10:	0189      	lsls	r1, r1, #6
 8009f12:	404a      	eors	r2, r1
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	18d3      	adds	r3, r2, r3
 8009f20:	183a      	adds	r2, r7, r0
 8009f22:	8812      	ldrh	r2, [r2, #0]
 8009f24:	4907      	ldr	r1, [pc, #28]	; (8009f44 <USB_EPClearStall+0x158>)
 8009f26:	430a      	orrs	r2, r1
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	0018      	movs	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	b006      	add	sp, #24
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	ffff8f8f 	.word	0xffff8f8f
 8009f3c:	ffff80c0 	.word	0xffff80c0
 8009f40:	ffff8fbf 	.word	0xffff8fbf
 8009f44:	ffff8080 	.word	0xffff8080
 8009f48:	ffffc080 	.word	0xffffc080
 8009f4c:	ffffbf8f 	.word	0xffffbf8f

08009f50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	000a      	movs	r2, r1
 8009f5a:	1cfb      	adds	r3, r7, #3
 8009f5c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009f5e:	1cfb      	adds	r3, r7, #3
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	224c      	movs	r2, #76	; 0x4c
 8009f6a:	2180      	movs	r1, #128	; 0x80
 8009f6c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	0018      	movs	r0, r3
 8009f72:	46bd      	mov	sp, r7
 8009f74:	b002      	add	sp, #8
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2258      	movs	r2, #88	; 0x58
 8009f84:	5a9b      	ldrh	r3, [r3, r2]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	4a05      	ldr	r2, [pc, #20]	; (8009fa0 <USB_DevConnect+0x28>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b299      	uxth	r1, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2258      	movs	r2, #88	; 0x58
 8009f92:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b002      	add	sp, #8
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	ffff8000 	.word	0xffff8000

08009fa4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	; 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	0019      	movs	r1, r3
 8009fb0:	1dbb      	adds	r3, r7, #6
 8009fb2:	801a      	strh	r2, [r3, #0]
 8009fb4:	1d3b      	adds	r3, r7, #4
 8009fb6:	1c0a      	adds	r2, r1, #0
 8009fb8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009fcc:	1dbb      	adds	r3, r7, #6
 8009fce:	881a      	ldrh	r2, [r3, #0]
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	18d3      	adds	r3, r2, r3
 8009fd4:	2280      	movs	r2, #128	; 0x80
 8009fd6:	00d2      	lsls	r2, r2, #3
 8009fd8:	4694      	mov	ip, r2
 8009fda:	4463      	add	r3, ip
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fe2:	e01b      	b.n	800a01c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	3301      	adds	r3, #1
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	021b      	lsls	r3, r3, #8
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	001a      	movs	r2, r3
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	b29a      	uxth	r2, r3
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	3302      	adds	r3, #2
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	3301      	adds	r3, #1
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	3b01      	subs	r3, #1
 800a01a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e0      	bne.n	8009fe4 <USB_WritePMA+0x40>
  }
}
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	46c0      	nop			; (mov r8, r8)
 800a026:	46bd      	mov	sp, r7
 800a028:	b00c      	add	sp, #48	; 0x30
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08a      	sub	sp, #40	; 0x28
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	0019      	movs	r1, r3
 800a038:	1dbb      	adds	r3, r7, #6
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	1c0a      	adds	r2, r1, #0
 800a040:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a042:	1d3b      	adds	r3, r7, #4
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a054:	1dbb      	adds	r3, r7, #6
 800a056:	881a      	ldrh	r2, [r3, #0]
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	18d3      	adds	r3, r2, r3
 800a05c:	2280      	movs	r2, #128	; 0x80
 800a05e:	00d2      	lsls	r2, r2, #3
 800a060:	4694      	mov	ip, r2
 800a062:	4463      	add	r3, ip
 800a064:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
 800a06a:	e018      	b.n	800a09e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	3302      	adds	r3, #2
 800a078:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3301      	adds	r3, #1
 800a086:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	0a1b      	lsrs	r3, r3, #8
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	3301      	adds	r3, #1
 800a096:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	3b01      	subs	r3, #1
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
 800a09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e3      	bne.n	800a06c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a0a4:	1d3b      	adds	r3, r7, #4
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	701a      	strb	r2, [r3, #0]
  }
}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b00a      	add	sp, #40	; 0x28
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	000a      	movs	r2, r1
 800a0d4:	1cfb      	adds	r3, r7, #3
 800a0d6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a0d8:	230f      	movs	r3, #15
 800a0da:	18fb      	adds	r3, r7, r3
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7c1b      	ldrb	r3, [r3, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d116      	bne.n	800a116 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a0e8:	2380      	movs	r3, #128	; 0x80
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	2181      	movs	r1, #129	; 0x81
 800a0f2:	f002 f892 	bl	800c21a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a0fc:	2380      	movs	r3, #128	; 0x80
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	2101      	movs	r1, #1
 800a106:	f002 f888 	bl	800c21a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	23b6      	movs	r3, #182	; 0xb6
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	2101      	movs	r1, #1
 800a112:	50d1      	str	r1, [r2, r3]
 800a114:	e013      	b.n	800a13e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	2202      	movs	r2, #2
 800a11c:	2181      	movs	r1, #129	; 0x81
 800a11e:	f002 f87c 	bl	800c21a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	2340      	movs	r3, #64	; 0x40
 800a12c:	2202      	movs	r2, #2
 800a12e:	2101      	movs	r1, #1
 800a130:	f002 f873 	bl	800c21a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	23b6      	movs	r3, #182	; 0xb6
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2101      	movs	r1, #1
 800a13c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	2308      	movs	r3, #8
 800a142:	2203      	movs	r2, #3
 800a144:	2182      	movs	r1, #130	; 0x82
 800a146:	f002 f868 	bl	800c21a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a150:	2387      	movs	r3, #135	; 0x87
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	0018      	movs	r0, r3
 800a156:	f002 f9f9 	bl	800c54c <USBD_static_malloc>
 800a15a:	0001      	movs	r1, r0
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	23ae      	movs	r3, #174	; 0xae
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	23ae      	movs	r3, #174	; 0xae
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	58d3      	ldr	r3, [r2, r3]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d104      	bne.n	800a17a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a170:	230f      	movs	r3, #15
 800a172:	18fb      	adds	r3, r7, r3
 800a174:	2201      	movs	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	e02c      	b.n	800a1d4 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	23ae      	movs	r3, #174	; 0xae
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	58d3      	ldr	r3, [r2, r3]
 800a182:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	23af      	movs	r3, #175	; 0xaf
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	58d3      	ldr	r3, [r2, r3]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	2385      	movs	r3, #133	; 0x85
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	2100      	movs	r1, #0
 800a198:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	2386      	movs	r3, #134	; 0x86
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7c1b      	ldrb	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	2381      	movs	r3, #129	; 0x81
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	58d2      	ldr	r2, [r2, r3]
 800a1b4:	2380      	movs	r3, #128	; 0x80
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	f002 f978 	bl	800c4b0 <USBD_LL_PrepareReceive>
 800a1c0:	e008      	b.n	800a1d4 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	2381      	movs	r3, #129	; 0x81
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	58d2      	ldr	r2, [r2, r3]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	2340      	movs	r3, #64	; 0x40
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	f002 f96e 	bl	800c4b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a1d4:	230f      	movs	r3, #15
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	781b      	ldrb	r3, [r3, #0]
}
 800a1da:	0018      	movs	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b004      	add	sp, #16
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	000a      	movs	r2, r1
 800a1ec:	1cfb      	adds	r3, r7, #3
 800a1ee:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a1f0:	230f      	movs	r3, #15
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2181      	movs	r1, #129	; 0x81
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f002 f843 	bl	800c288 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2101      	movs	r1, #1
 800a20c:	0018      	movs	r0, r3
 800a20e:	f002 f83b 	bl	800c288 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	23b6      	movs	r3, #182	; 0xb6
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	2100      	movs	r1, #0
 800a21a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2182      	movs	r1, #130	; 0x82
 800a220:	0018      	movs	r0, r3
 800a222:	f002 f831 	bl	800c288 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	23ae      	movs	r3, #174	; 0xae
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	58d3      	ldr	r3, [r2, r3]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d011      	beq.n	800a25c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	23af      	movs	r3, #175	; 0xaf
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	58d3      	ldr	r3, [r2, r3]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	23ae      	movs	r3, #174	; 0xae
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	58d3      	ldr	r3, [r2, r3]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f002 f989 	bl	800c564 <USBD_static_free>
    pdev->pClassData = NULL;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	23ae      	movs	r3, #174	; 0xae
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	2100      	movs	r1, #0
 800a25a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a25c:	230f      	movs	r3, #15
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	781b      	ldrb	r3, [r3, #0]
}
 800a262:	0018      	movs	r0, r3
 800a264:	46bd      	mov	sp, r7
 800a266:	b004      	add	sp, #16
 800a268:	bd80      	pop	{r7, pc}
	...

0800a26c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	23ae      	movs	r3, #174	; 0xae
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	58d3      	ldr	r3, [r2, r3]
 800a27e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a280:	230f      	movs	r3, #15
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	2200      	movs	r2, #0
 800a286:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a288:	230c      	movs	r3, #12
 800a28a:	18fb      	adds	r3, r7, r3
 800a28c:	2200      	movs	r2, #0
 800a28e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a290:	2317      	movs	r3, #23
 800a292:	18fb      	adds	r3, r7, r3
 800a294:	2200      	movs	r2, #0
 800a296:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	001a      	movs	r2, r3
 800a29e:	2360      	movs	r3, #96	; 0x60
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	d03d      	beq.n	800a320 <USBD_CDC_Setup+0xb4>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d000      	beq.n	800a2aa <USBD_CDC_Setup+0x3e>
 800a2a8:	e094      	b.n	800a3d4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	88db      	ldrh	r3, [r3, #6]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d02b      	beq.n	800a30a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	b25b      	sxtb	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da12      	bge.n	800a2e2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	23af      	movs	r3, #175	; 0xaf
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	58d3      	ldr	r3, [r2, r3]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a2ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	88d2      	ldrh	r2, [r2, #6]
 800a2d0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2d2:	6939      	ldr	r1, [r7, #16]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	88da      	ldrh	r2, [r3, #6]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f001 fbb2 	bl	800ba44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a2e0:	e083      	b.n	800a3ea <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	7859      	ldrb	r1, [r3, #1]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	2380      	movs	r3, #128	; 0x80
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	b2d9      	uxtb	r1, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	4a40      	ldr	r2, [pc, #256]	; (800a3f8 <USBD_CDC_Setup+0x18c>)
 800a2f8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2fa:	6939      	ldr	r1, [r7, #16]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	88da      	ldrh	r2, [r3, #6]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	0018      	movs	r0, r3
 800a304:	f001 fbd1 	bl	800baaa <USBD_CtlPrepareRx>
      break;
 800a308:	e06f      	b.n	800a3ea <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	23af      	movs	r3, #175	; 0xaf
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	58d3      	ldr	r3, [r2, r3]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	7850      	ldrb	r0, [r2, #1]
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	4798      	blx	r3
      break;
 800a31e:	e064      	b.n	800a3ea <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b0b      	cmp	r3, #11
 800a326:	d037      	beq.n	800a398 <USBD_CDC_Setup+0x12c>
 800a328:	dc47      	bgt.n	800a3ba <USBD_CDC_Setup+0x14e>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <USBD_CDC_Setup+0xc8>
 800a32e:	2b0a      	cmp	r3, #10
 800a330:	d019      	beq.n	800a366 <USBD_CDC_Setup+0xfa>
 800a332:	e042      	b.n	800a3ba <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	23a7      	movs	r3, #167	; 0xa7
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	5cd3      	ldrb	r3, [r2, r3]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d107      	bne.n	800a350 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a340:	230c      	movs	r3, #12
 800a342:	18f9      	adds	r1, r7, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	0018      	movs	r0, r3
 800a34a:	f001 fb7b 	bl	800ba44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a34e:	e040      	b.n	800a3d2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	0011      	movs	r1, r2
 800a356:	0018      	movs	r0, r3
 800a358:	f001 faf6 	bl	800b948 <USBD_CtlError>
            ret = USBD_FAIL;
 800a35c:	2317      	movs	r3, #23
 800a35e:	18fb      	adds	r3, r7, r3
 800a360:	2202      	movs	r2, #2
 800a362:	701a      	strb	r2, [r3, #0]
          break;
 800a364:	e035      	b.n	800a3d2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	23a7      	movs	r3, #167	; 0xa7
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	5cd3      	ldrb	r3, [r2, r3]
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d107      	bne.n	800a382 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a372:	230f      	movs	r3, #15
 800a374:	18f9      	adds	r1, r7, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	0018      	movs	r0, r3
 800a37c:	f001 fb62 	bl	800ba44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a380:	e027      	b.n	800a3d2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	0011      	movs	r1, r2
 800a388:	0018      	movs	r0, r3
 800a38a:	f001 fadd 	bl	800b948 <USBD_CtlError>
            ret = USBD_FAIL;
 800a38e:	2317      	movs	r3, #23
 800a390:	18fb      	adds	r3, r7, r3
 800a392:	2202      	movs	r2, #2
 800a394:	701a      	strb	r2, [r3, #0]
          break;
 800a396:	e01c      	b.n	800a3d2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	23a7      	movs	r3, #167	; 0xa7
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	5cd3      	ldrb	r3, [r2, r3]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d015      	beq.n	800a3d0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	0011      	movs	r1, r2
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	f001 facc 	bl	800b948 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3b0:	2317      	movs	r3, #23
 800a3b2:	18fb      	adds	r3, r7, r3
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a3b8:	e00a      	b.n	800a3d0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	0011      	movs	r1, r2
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f001 fac1 	bl	800b948 <USBD_CtlError>
          ret = USBD_FAIL;
 800a3c6:	2317      	movs	r3, #23
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	701a      	strb	r2, [r3, #0]
          break;
 800a3ce:	e000      	b.n	800a3d2 <USBD_CDC_Setup+0x166>
          break;
 800a3d0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a3d2:	e00a      	b.n	800a3ea <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	0011      	movs	r1, r2
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f001 fab4 	bl	800b948 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3e0:	2317      	movs	r3, #23
 800a3e2:	18fb      	adds	r3, r7, r3
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	701a      	strb	r2, [r3, #0]
      break;
 800a3e8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a3ea:	2317      	movs	r3, #23
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	781b      	ldrb	r3, [r3, #0]
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b006      	add	sp, #24
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	00000201 	.word	0x00000201

0800a3fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	000a      	movs	r2, r1
 800a406:	1cfb      	adds	r3, r7, #3
 800a408:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	23ae      	movs	r3, #174	; 0xae
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	58d3      	ldr	r3, [r2, r3]
 800a412:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	23b0      	movs	r3, #176	; 0xb0
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	58d3      	ldr	r3, [r2, r3]
 800a41c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	23ae      	movs	r3, #174	; 0xae
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	58d3      	ldr	r3, [r2, r3]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d03e      	beq.n	800a4a8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a42a:	1cfb      	adds	r3, r7, #3
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	0013      	movs	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	189b      	adds	r3, r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	18cb      	adds	r3, r1, r3
 800a43a:	331c      	adds	r3, #28
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02b      	beq.n	800a49a <USBD_CDC_DataIn+0x9e>
 800a442:	1cfb      	adds	r3, r7, #3
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	0013      	movs	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	189b      	adds	r3, r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	18cb      	adds	r3, r1, r3
 800a452:	331c      	adds	r3, #28
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	1cfb      	adds	r3, r7, #3
 800a458:	781a      	ldrb	r2, [r3, #0]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	0013      	movs	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	189b      	adds	r3, r3, r2
 800a462:	00db      	lsls	r3, r3, #3
 800a464:	18cb      	adds	r3, r1, r3
 800a466:	3338      	adds	r3, #56	; 0x38
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	0019      	movs	r1, r3
 800a46c:	f7f5 fee4 	bl	8000238 <__aeabi_uidivmod>
 800a470:	1e0b      	subs	r3, r1, #0
 800a472:	d112      	bne.n	800a49a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a474:	1cfb      	adds	r3, r7, #3
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	0013      	movs	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	189b      	adds	r3, r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	18cb      	adds	r3, r1, r3
 800a484:	331c      	adds	r3, #28
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a48a:	1cfb      	adds	r3, r7, #3
 800a48c:	7819      	ldrb	r1, [r3, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	2300      	movs	r3, #0
 800a492:	2200      	movs	r2, #0
 800a494:	f001 ffd5 	bl	800c442 <USBD_LL_Transmit>
 800a498:	e004      	b.n	800a4a4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	2385      	movs	r3, #133	; 0x85
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e000      	b.n	800a4aa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a4a8:	2302      	movs	r3, #2
  }
}
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	b004      	add	sp, #16
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	000a      	movs	r2, r1
 800a4bc:	1cfb      	adds	r3, r7, #3
 800a4be:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	23ae      	movs	r3, #174	; 0xae
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	58d3      	ldr	r3, [r2, r3]
 800a4c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4ca:	1cfb      	adds	r3, r7, #3
 800a4cc:	781a      	ldrb	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	0011      	movs	r1, r2
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f002 f823 	bl	800c51e <USBD_LL_GetRxDataSize>
 800a4d8:	0001      	movs	r1, r0
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	2383      	movs	r3, #131	; 0x83
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	23ae      	movs	r3, #174	; 0xae
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	58d3      	ldr	r3, [r2, r3]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d011      	beq.n	800a512 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	23af      	movs	r3, #175	; 0xaf
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	58d3      	ldr	r3, [r2, r3]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	68f9      	ldr	r1, [r7, #12]
 800a4fa:	2381      	movs	r3, #129	; 0x81
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	58c8      	ldr	r0, [r1, r3]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2183      	movs	r1, #131	; 0x83
 800a504:	0089      	lsls	r1, r1, #2
 800a506:	468c      	mov	ip, r1
 800a508:	4463      	add	r3, ip
 800a50a:	0019      	movs	r1, r3
 800a50c:	4790      	blx	r2

    return USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	e000      	b.n	800a514 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a512:	2302      	movs	r3, #2
  }
}
 800a514:	0018      	movs	r0, r3
 800a516:	46bd      	mov	sp, r7
 800a518:	b004      	add	sp, #16
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a51c:	b590      	push	{r4, r7, lr}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	23ae      	movs	r3, #174	; 0xae
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	58d3      	ldr	r3, [r2, r3]
 800a52c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	23af      	movs	r3, #175	; 0xaf
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	58d3      	ldr	r3, [r2, r3]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d019      	beq.n	800a56e <USBD_CDC_EP0_RxReady+0x52>
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	2380      	movs	r3, #128	; 0x80
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	5cd3      	ldrb	r3, [r2, r3]
 800a542:	2bff      	cmp	r3, #255	; 0xff
 800a544:	d013      	beq.n	800a56e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	23af      	movs	r3, #175	; 0xaf
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	58d3      	ldr	r3, [r2, r3]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	2280      	movs	r2, #128	; 0x80
 800a554:	0092      	lsls	r2, r2, #2
 800a556:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a558:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4c06      	ldr	r4, [pc, #24]	; (800a578 <USBD_CDC_EP0_RxReady+0x5c>)
 800a55e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a560:	b292      	uxth	r2, r2
 800a562:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	2380      	movs	r3, #128	; 0x80
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	21ff      	movs	r1, #255	; 0xff
 800a56c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b005      	add	sp, #20
 800a576:	bd90      	pop	{r4, r7, pc}
 800a578:	00000201 	.word	0x00000201

0800a57c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2243      	movs	r2, #67	; 0x43
 800a588:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a58a:	4b02      	ldr	r3, [pc, #8]	; (800a594 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a58c:	0018      	movs	r0, r3
 800a58e:	46bd      	mov	sp, r7
 800a590:	b002      	add	sp, #8
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000158 	.word	0x20000158

0800a598 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2243      	movs	r2, #67	; 0x43
 800a5a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a5a6:	4b02      	ldr	r3, [pc, #8]	; (800a5b0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	b002      	add	sp, #8
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000114 	.word	0x20000114

0800a5b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2243      	movs	r2, #67	; 0x43
 800a5c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a5c2:	4b02      	ldr	r3, [pc, #8]	; (800a5cc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	2000019c 	.word	0x2000019c

0800a5d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	220a      	movs	r2, #10
 800a5dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a5de:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b002      	add	sp, #8
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200000d0 	.word	0x200000d0

0800a5ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a5f6:	200f      	movs	r0, #15
 800a5f8:	183b      	adds	r3, r7, r0
 800a5fa:	2202      	movs	r2, #2
 800a5fc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d007      	beq.n	800a614 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	23af      	movs	r3, #175	; 0xaf
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a60e:	183b      	adds	r3, r7, r0
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a614:	230f      	movs	r3, #15
 800a616:	18fb      	adds	r3, r7, r3
 800a618:	781b      	ldrb	r3, [r3, #0]
}
 800a61a:	0018      	movs	r0, r3
 800a61c:	46bd      	mov	sp, r7
 800a61e:	b004      	add	sp, #16
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	1dbb      	adds	r3, r7, #6
 800a62e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	23ae      	movs	r3, #174	; 0xae
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	58d3      	ldr	r3, [r2, r3]
 800a638:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	2382      	movs	r3, #130	; 0x82
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a644:	1dbb      	adds	r3, r7, #6
 800a646:	8819      	ldrh	r1, [r3, #0]
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	2384      	movs	r3, #132	; 0x84
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	0018      	movs	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	b006      	add	sp, #24
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	23ae      	movs	r3, #174	; 0xae
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	58d3      	ldr	r3, [r2, r3]
 800a66c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	2381      	movs	r3, #129	; 0x81
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b004      	add	sp, #16
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	23ae      	movs	r3, #174	; 0xae
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	58d3      	ldr	r3, [r2, r3]
 800a692:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	23ae      	movs	r3, #174	; 0xae
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	58d3      	ldr	r3, [r2, r3]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d022      	beq.n	800a6e6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	2385      	movs	r3, #133	; 0x85
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	58d3      	ldr	r3, [r2, r3]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d11a      	bne.n	800a6e2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	2385      	movs	r3, #133	; 0x85
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	2384      	movs	r3, #132	; 0x84
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	58d2      	ldr	r2, [r2, r3]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	2382      	movs	r3, #130	; 0x82
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	2384      	movs	r3, #132	; 0x84
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	000a      	movs	r2, r1
 800a6d8:	2181      	movs	r1, #129	; 0x81
 800a6da:	f001 feb2 	bl	800c442 <USBD_LL_Transmit>

      return USBD_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e002      	b.n	800a6e8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a6e6:	2302      	movs	r3, #2
  }
}
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b004      	add	sp, #16
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	23ae      	movs	r3, #174	; 0xae
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	58d3      	ldr	r3, [r2, r3]
 800a700:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	23ae      	movs	r3, #174	; 0xae
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	58d3      	ldr	r3, [r2, r3]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d019      	beq.n	800a742 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7c1b      	ldrb	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	2381      	movs	r3, #129	; 0x81
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	58d2      	ldr	r2, [r2, r3]
 800a71e:	2380      	movs	r3, #128	; 0x80
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	2101      	movs	r1, #1
 800a726:	f001 fec3 	bl	800c4b0 <USBD_LL_PrepareReceive>
 800a72a:	e008      	b.n	800a73e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	2381      	movs	r3, #129	; 0x81
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	58d2      	ldr	r2, [r2, r3]
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	2101      	movs	r1, #1
 800a73a:	f001 feb9 	bl	800c4b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	e000      	b.n	800a744 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a742:	2302      	movs	r3, #2
  }
}
 800a744:	0018      	movs	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	b004      	add	sp, #16
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	1dfb      	adds	r3, r7, #7
 800a758:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a760:	2302      	movs	r3, #2
 800a762:	e020      	b.n	800a7a6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	23ad      	movs	r3, #173	; 0xad
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	58d3      	ldr	r3, [r2, r3]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d004      	beq.n	800a77a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	23ad      	movs	r3, #173	; 0xad
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	2100      	movs	r1, #0
 800a778:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d004      	beq.n	800a78a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	23ac      	movs	r3, #172	; 0xac
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	23a7      	movs	r3, #167	; 0xa7
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	2101      	movs	r1, #1
 800a792:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	1dfa      	adds	r2, r7, #7
 800a798:	7812      	ldrb	r2, [r2, #0]
 800a79a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f001 fcb2 	bl	800c108 <USBD_LL_Init>

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b004      	add	sp, #16
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a7b8:	200f      	movs	r0, #15
 800a7ba:	183b      	adds	r3, r7, r0
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d008      	beq.n	800a7d8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	23ad      	movs	r3, #173	; 0xad
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a7d0:	183b      	adds	r3, r7, r0
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e003      	b.n	800a7e0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7d8:	230f      	movs	r3, #15
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	2202      	movs	r2, #2
 800a7de:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a7e0:	230f      	movs	r3, #15
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	781b      	ldrb	r3, [r3, #0]
}
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b004      	add	sp, #16
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f001 fce9 	bl	800c1d0 <USBD_LL_Start>

  return USBD_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	0018      	movs	r0, r3
 800a802:	46bd      	mov	sp, r7
 800a804:	b002      	add	sp, #8
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	0018      	movs	r0, r3
 800a814:	46bd      	mov	sp, r7
 800a816:	b002      	add	sp, #8
 800a818:	bd80      	pop	{r7, pc}

0800a81a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a81a:	b590      	push	{r4, r7, lr}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	000a      	movs	r2, r1
 800a824:	1cfb      	adds	r3, r7, #3
 800a826:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a828:	240f      	movs	r4, #15
 800a82a:	193b      	adds	r3, r7, r4
 800a82c:	2202      	movs	r2, #2
 800a82e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	23ad      	movs	r3, #173	; 0xad
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	58d3      	ldr	r3, [r2, r3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	23ad      	movs	r3, #173	; 0xad
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	58d3      	ldr	r3, [r2, r3]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	1cfa      	adds	r2, r7, #3
 800a848:	7811      	ldrb	r1, [r2, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	0010      	movs	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	1e03      	subs	r3, r0, #0
 800a852:	d102      	bne.n	800a85a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a854:	193b      	adds	r3, r7, r4
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a85a:	230f      	movs	r3, #15
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	781b      	ldrb	r3, [r3, #0]
}
 800a860:	0018      	movs	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	b005      	add	sp, #20
 800a866:	bd90      	pop	{r4, r7, pc}

0800a868 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	000a      	movs	r2, r1
 800a872:	1cfb      	adds	r3, r7, #3
 800a874:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	23ad      	movs	r3, #173	; 0xad
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	58d3      	ldr	r3, [r2, r3]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	1cfa      	adds	r2, r7, #3
 800a882:	7811      	ldrb	r1, [r2, #0]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	0010      	movs	r0, r2
 800a888:	4798      	blx	r3

  return USBD_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	0018      	movs	r0, r3
 800a88e:	46bd      	mov	sp, r7
 800a890:	b002      	add	sp, #8
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	22aa      	movs	r2, #170	; 0xaa
 800a8a2:	0092      	lsls	r2, r2, #2
 800a8a4:	4694      	mov	ip, r2
 800a8a6:	4463      	add	r3, ip
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f001 f810 	bl	800b8d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	23a5      	movs	r3, #165	; 0xa5
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a23      	ldr	r2, [pc, #140]	; (800a94c <USBD_LL_SetupStage+0xb8>)
 800a8c0:	5a9b      	ldrh	r3, [r3, r2]
 800a8c2:	0019      	movs	r1, r3
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	23a6      	movs	r3, #166	; 0xa6
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	23aa      	movs	r3, #170	; 0xaa
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	5cd3      	ldrb	r3, [r2, r3]
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	231f      	movs	r3, #31
 800a8d8:	4013      	ands	r3, r2
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d019      	beq.n	800a912 <USBD_LL_SetupStage+0x7e>
 800a8de:	d822      	bhi.n	800a926 <USBD_LL_SetupStage+0x92>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <USBD_LL_SetupStage+0x56>
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d00a      	beq.n	800a8fe <USBD_LL_SetupStage+0x6a>
 800a8e8:	e01d      	b.n	800a926 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	22aa      	movs	r2, #170	; 0xaa
 800a8ee:	0092      	lsls	r2, r2, #2
 800a8f0:	189a      	adds	r2, r3, r2
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	0011      	movs	r1, r2
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	f000 fa10 	bl	800ad1c <USBD_StdDevReq>
      break;
 800a8fc:	e020      	b.n	800a940 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	22aa      	movs	r2, #170	; 0xaa
 800a902:	0092      	lsls	r2, r2, #2
 800a904:	189a      	adds	r2, r3, r2
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	0011      	movs	r1, r2
 800a90a:	0018      	movs	r0, r3
 800a90c:	f000 fa78 	bl	800ae00 <USBD_StdItfReq>
      break;
 800a910:	e016      	b.n	800a940 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	22aa      	movs	r2, #170	; 0xaa
 800a916:	0092      	lsls	r2, r2, #2
 800a918:	189a      	adds	r2, r3, r2
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	0011      	movs	r1, r2
 800a91e:	0018      	movs	r0, r3
 800a920:	f000 fac5 	bl	800aeae <USBD_StdEPReq>
      break;
 800a924:	e00c      	b.n	800a940 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	23aa      	movs	r3, #170	; 0xaa
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	5cd3      	ldrb	r3, [r2, r3]
 800a92e:	227f      	movs	r2, #127	; 0x7f
 800a930:	4393      	bics	r3, r2
 800a932:	b2da      	uxtb	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	0011      	movs	r1, r2
 800a938:	0018      	movs	r0, r3
 800a93a:	f001 fcd0 	bl	800c2de <USBD_LL_StallEP>
      break;
 800a93e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	0018      	movs	r0, r3
 800a944:	46bd      	mov	sp, r7
 800a946:	b002      	add	sp, #8
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	000002ae 	.word	0x000002ae

0800a950 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	607a      	str	r2, [r7, #4]
 800a95a:	200b      	movs	r0, #11
 800a95c:	183b      	adds	r3, r7, r0
 800a95e:	1c0a      	adds	r2, r1, #0
 800a960:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a962:	183b      	adds	r3, r7, r0
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d154      	bne.n	800aa14 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3355      	adds	r3, #85	; 0x55
 800a96e:	33ff      	adds	r3, #255	; 0xff
 800a970:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	23a5      	movs	r3, #165	; 0xa5
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	58d3      	ldr	r3, [r2, r3]
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d139      	bne.n	800a9f2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	d919      	bls.n	800a9be <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d203      	bcs.n	800a9ac <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	e002      	b.n	800a9b2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	6879      	ldr	r1, [r7, #4]
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	f001 f89b 	bl	800baf2 <USBD_CtlContinueRx>
 800a9bc:	e045      	b.n	800aa4a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	23ad      	movs	r3, #173	; 0xad
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	58d3      	ldr	r3, [r2, r3]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00d      	beq.n	800a9e8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	23a7      	movs	r3, #167	; 0xa7
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d107      	bne.n	800a9e8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	23ad      	movs	r3, #173	; 0xad
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	58d3      	ldr	r3, [r2, r3]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	0010      	movs	r0, r2
 800a9e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f001 f894 	bl	800bb18 <USBD_CtlSendStatus>
 800a9f0:	e02b      	b.n	800aa4a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	23a5      	movs	r3, #165	; 0xa5
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	58d3      	ldr	r3, [r2, r3]
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d125      	bne.n	800aa4a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	23a5      	movs	r3, #165	; 0xa5
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	2100      	movs	r1, #0
 800aa06:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	f001 fc66 	bl	800c2de <USBD_LL_StallEP>
 800aa12:	e01a      	b.n	800aa4a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	23ad      	movs	r3, #173	; 0xad
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	58d3      	ldr	r3, [r2, r3]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d011      	beq.n	800aa46 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	23a7      	movs	r3, #167	; 0xa7
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d10b      	bne.n	800aa46 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	23ad      	movs	r3, #173	; 0xad
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	58d3      	ldr	r3, [r2, r3]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	220b      	movs	r2, #11
 800aa3a:	18ba      	adds	r2, r7, r2
 800aa3c:	7811      	ldrb	r1, [r2, #0]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	0010      	movs	r0, r2
 800aa42:	4798      	blx	r3
 800aa44:	e001      	b.n	800aa4a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	e000      	b.n	800aa4c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	b006      	add	sp, #24
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	607a      	str	r2, [r7, #4]
 800aa5e:	200b      	movs	r0, #11
 800aa60:	183b      	adds	r3, r7, r0
 800aa62:	1c0a      	adds	r2, r1, #0
 800aa64:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa66:	183b      	adds	r3, r7, r0
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d000      	beq.n	800aa70 <USBD_LL_DataInStage+0x1c>
 800aa6e:	e08e      	b.n	800ab8e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3314      	adds	r3, #20
 800aa74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	23a5      	movs	r3, #165	; 0xa5
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	58d3      	ldr	r3, [r2, r3]
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d164      	bne.n	800ab4c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d915      	bls.n	800aaba <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	f000 ffec 	bl	800ba84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	2300      	movs	r3, #0
 800aab0:	2200      	movs	r2, #0
 800aab2:	2100      	movs	r1, #0
 800aab4:	f001 fcfc 	bl	800c4b0 <USBD_LL_PrepareReceive>
 800aab8:	e059      	b.n	800ab6e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	0019      	movs	r1, r3
 800aac4:	0010      	movs	r0, r2
 800aac6:	f7f5 fbb7 	bl	8000238 <__aeabi_uidivmod>
 800aaca:	1e0b      	subs	r3, r1, #0
 800aacc:	d11f      	bne.n	800ab0e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d319      	bcc.n	800ab0e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	23a6      	movs	r3, #166	; 0xa6
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d211      	bcs.n	800ab0e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f000 ffc7 	bl	800ba84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	23a6      	movs	r3, #166	; 0xa6
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	2100      	movs	r1, #0
 800aafe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	2300      	movs	r3, #0
 800ab04:	2200      	movs	r2, #0
 800ab06:	2100      	movs	r1, #0
 800ab08:	f001 fcd2 	bl	800c4b0 <USBD_LL_PrepareReceive>
 800ab0c:	e02f      	b.n	800ab6e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	23ad      	movs	r3, #173	; 0xad
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	58d3      	ldr	r3, [r2, r3]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00d      	beq.n	800ab38 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	23a7      	movs	r3, #167	; 0xa7
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d107      	bne.n	800ab38 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	23ad      	movs	r3, #173	; 0xad
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	58d3      	ldr	r3, [r2, r3]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	0010      	movs	r0, r2
 800ab36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2180      	movs	r1, #128	; 0x80
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f001 fbce 	bl	800c2de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	0018      	movs	r0, r3
 800ab46:	f000 fffb 	bl	800bb40 <USBD_CtlReceiveStatus>
 800ab4a:	e010      	b.n	800ab6e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	23a5      	movs	r3, #165	; 0xa5
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	58d3      	ldr	r3, [r2, r3]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d005      	beq.n	800ab64 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	23a5      	movs	r3, #165	; 0xa5
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d104      	bne.n	800ab6e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2180      	movs	r1, #128	; 0x80
 800ab68:	0018      	movs	r0, r3
 800ab6a:	f001 fbb8 	bl	800c2de <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	23a8      	movs	r3, #168	; 0xa8
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	5cd3      	ldrb	r3, [r2, r3]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d124      	bne.n	800abc4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	0018      	movs	r0, r3
 800ab7e:	f7ff fe43 	bl	800a808 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	23a8      	movs	r3, #168	; 0xa8
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	2100      	movs	r1, #0
 800ab8a:	54d1      	strb	r1, [r2, r3]
 800ab8c:	e01a      	b.n	800abc4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	23ad      	movs	r3, #173	; 0xad
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	58d3      	ldr	r3, [r2, r3]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d011      	beq.n	800abc0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	23a7      	movs	r3, #167	; 0xa7
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	d10b      	bne.n	800abc0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	23ad      	movs	r3, #173	; 0xad
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	58d3      	ldr	r3, [r2, r3]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	220b      	movs	r2, #11
 800abb4:	18ba      	adds	r2, r7, r2
 800abb6:	7811      	ldrb	r1, [r2, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	0010      	movs	r0, r2
 800abbc:	4798      	blx	r3
 800abbe:	e001      	b.n	800abc4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abc0:	2302      	movs	r3, #2
 800abc2:	e000      	b.n	800abc6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	0018      	movs	r0, r3
 800abc8:	46bd      	mov	sp, r7
 800abca:	b006      	add	sp, #24
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b082      	sub	sp, #8
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	2340      	movs	r3, #64	; 0x40
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	f001 fb1c 	bl	800c21a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	23ac      	movs	r3, #172	; 0xac
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	2101      	movs	r1, #1
 800abea:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	23b2      	movs	r3, #178	; 0xb2
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	2140      	movs	r1, #64	; 0x40
 800abf4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	2340      	movs	r3, #64	; 0x40
 800abfa:	2200      	movs	r2, #0
 800abfc:	2180      	movs	r1, #128	; 0x80
 800abfe:	f001 fb0c 	bl	800c21a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2240      	movs	r2, #64	; 0x40
 800ac0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	23a7      	movs	r3, #167	; 0xa7
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	2101      	movs	r1, #1
 800ac16:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	23a5      	movs	r3, #165	; 0xa5
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	2100      	movs	r1, #0
 800ac20:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	23a9      	movs	r3, #169	; 0xa9
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	2100      	movs	r1, #0
 800ac30:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	23ae      	movs	r3, #174	; 0xae
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	58d3      	ldr	r3, [r2, r3]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	23ad      	movs	r3, #173	; 0xad
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	58d3      	ldr	r3, [r2, r3]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	b2d9      	uxtb	r1, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	0018      	movs	r0, r3
 800ac52:	4790      	blx	r2
  }

  return USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	0018      	movs	r0, r3
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	b002      	add	sp, #8
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	000a      	movs	r2, r1
 800ac68:	1cfb      	adds	r3, r7, #3
 800ac6a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1cfa      	adds	r2, r7, #3
 800ac70:	7812      	ldrb	r2, [r2, #0]
 800ac72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	0018      	movs	r0, r3
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	b002      	add	sp, #8
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	23a7      	movs	r3, #167	; 0xa7
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	5cd1      	ldrb	r1, [r2, r3]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a06      	ldr	r2, [pc, #24]	; (800acac <USBD_LL_Suspend+0x2c>)
 800ac94:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	23a7      	movs	r3, #167	; 0xa7
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	2104      	movs	r1, #4
 800ac9e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	0018      	movs	r0, r3
 800aca4:	46bd      	mov	sp, r7
 800aca6:	b002      	add	sp, #8
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	46c0      	nop			; (mov r8, r8)
 800acac:	0000029d 	.word	0x0000029d

0800acb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	23a7      	movs	r3, #167	; 0xa7
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	5cd3      	ldrb	r3, [r2, r3]
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d106      	bne.n	800acd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a05      	ldr	r2, [pc, #20]	; (800acdc <USBD_LL_Resume+0x2c>)
 800acc8:	5c99      	ldrb	r1, [r3, r2]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	23a7      	movs	r3, #167	; 0xa7
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	0018      	movs	r0, r3
 800acd6:	46bd      	mov	sp, r7
 800acd8:	b002      	add	sp, #8
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	0000029d 	.word	0x0000029d

0800ace0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	23a7      	movs	r3, #167	; 0xa7
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	5cd3      	ldrb	r3, [r2, r3]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d10e      	bne.n	800ad12 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	23ad      	movs	r3, #173	; 0xad
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	58d3      	ldr	r3, [r2, r3]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d007      	beq.n	800ad12 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	23ad      	movs	r3, #173	; 0xad
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	58d3      	ldr	r3, [r2, r3]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	0010      	movs	r0, r2
 800ad10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	0018      	movs	r0, r3
 800ad16:	46bd      	mov	sp, r7
 800ad18:	b002      	add	sp, #8
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad26:	230f      	movs	r3, #15
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	001a      	movs	r2, r3
 800ad34:	2360      	movs	r3, #96	; 0x60
 800ad36:	4013      	ands	r3, r2
 800ad38:	2b40      	cmp	r3, #64	; 0x40
 800ad3a:	d004      	beq.n	800ad46 <USBD_StdDevReq+0x2a>
 800ad3c:	d84f      	bhi.n	800adde <USBD_StdDevReq+0xc2>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00b      	beq.n	800ad5a <USBD_StdDevReq+0x3e>
 800ad42:	2b20      	cmp	r3, #32
 800ad44:	d14b      	bne.n	800adde <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	23ad      	movs	r3, #173	; 0xad
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	58d3      	ldr	r3, [r2, r3]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	0010      	movs	r0, r2
 800ad56:	4798      	blx	r3
      break;
 800ad58:	e048      	b.n	800adec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	785b      	ldrb	r3, [r3, #1]
 800ad5e:	2b09      	cmp	r3, #9
 800ad60:	d835      	bhi.n	800adce <USBD_StdDevReq+0xb2>
 800ad62:	009a      	lsls	r2, r3, #2
 800ad64:	4b25      	ldr	r3, [pc, #148]	; (800adfc <USBD_StdDevReq+0xe0>)
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	0011      	movs	r1, r2
 800ad72:	0018      	movs	r0, r3
 800ad74:	f000 fa52 	bl	800b21c <USBD_GetDescriptor>
          break;
 800ad78:	e030      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	0011      	movs	r1, r2
 800ad80:	0018      	movs	r0, r3
 800ad82:	f000 fbfd 	bl	800b580 <USBD_SetAddress>
          break;
 800ad86:	e029      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	0011      	movs	r1, r2
 800ad8e:	0018      	movs	r0, r3
 800ad90:	f000 fc4a 	bl	800b628 <USBD_SetConfig>
          break;
 800ad94:	e022      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	0011      	movs	r1, r2
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f000 fce7 	bl	800b770 <USBD_GetConfig>
          break;
 800ada2:	e01b      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	0011      	movs	r1, r2
 800adaa:	0018      	movs	r0, r3
 800adac:	f000 fd1b 	bl	800b7e6 <USBD_GetStatus>
          break;
 800adb0:	e014      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	0011      	movs	r1, r2
 800adb8:	0018      	movs	r0, r3
 800adba:	f000 fd4e 	bl	800b85a <USBD_SetFeature>
          break;
 800adbe:	e00d      	b.n	800addc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	0011      	movs	r1, r2
 800adc6:	0018      	movs	r0, r3
 800adc8:	f000 fd5d 	bl	800b886 <USBD_ClrFeature>
          break;
 800adcc:	e006      	b.n	800addc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	0011      	movs	r1, r2
 800add4:	0018      	movs	r0, r3
 800add6:	f000 fdb7 	bl	800b948 <USBD_CtlError>
          break;
 800adda:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800addc:	e006      	b.n	800adec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	0011      	movs	r1, r2
 800ade4:	0018      	movs	r0, r3
 800ade6:	f000 fdaf 	bl	800b948 <USBD_CtlError>
      break;
 800adea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800adec:	230f      	movs	r3, #15
 800adee:	18fb      	adds	r3, r7, r3
 800adf0:	781b      	ldrb	r3, [r3, #0]
}
 800adf2:	0018      	movs	r0, r3
 800adf4:	46bd      	mov	sp, r7
 800adf6:	b004      	add	sp, #16
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	0800d750 	.word	0x0800d750

0800ae00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae0a:	230f      	movs	r3, #15
 800ae0c:	18fb      	adds	r3, r7, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	001a      	movs	r2, r3
 800ae18:	2360      	movs	r3, #96	; 0x60
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	2b40      	cmp	r3, #64	; 0x40
 800ae1e:	d004      	beq.n	800ae2a <USBD_StdItfReq+0x2a>
 800ae20:	d839      	bhi.n	800ae96 <USBD_StdItfReq+0x96>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <USBD_StdItfReq+0x2a>
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d135      	bne.n	800ae96 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	23a7      	movs	r3, #167	; 0xa7
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	5cd3      	ldrb	r3, [r2, r3]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d825      	bhi.n	800ae84 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	889b      	ldrh	r3, [r3, #4]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d819      	bhi.n	800ae76 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	23ad      	movs	r3, #173	; 0xad
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	58d3      	ldr	r3, [r2, r3]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	250f      	movs	r5, #15
 800ae4e:	197c      	adds	r4, r7, r5
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	0010      	movs	r0, r2
 800ae56:	4798      	blx	r3
 800ae58:	0003      	movs	r3, r0
 800ae5a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	88db      	ldrh	r3, [r3, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d116      	bne.n	800ae92 <USBD_StdItfReq+0x92>
 800ae64:	197b      	adds	r3, r7, r5
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d112      	bne.n	800ae92 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f000 fe52 	bl	800bb18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae74:	e00d      	b.n	800ae92 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0011      	movs	r1, r2
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f000 fd63 	bl	800b948 <USBD_CtlError>
          break;
 800ae82:	e006      	b.n	800ae92 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	0011      	movs	r1, r2
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f000 fd5c 	bl	800b948 <USBD_CtlError>
          break;
 800ae90:	e000      	b.n	800ae94 <USBD_StdItfReq+0x94>
          break;
 800ae92:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ae94:	e006      	b.n	800aea4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	0011      	movs	r1, r2
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	f000 fd53 	bl	800b948 <USBD_CtlError>
      break;
 800aea2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	0018      	movs	r0, r3
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	b004      	add	sp, #16
 800aeac:	bdb0      	pop	{r4, r5, r7, pc}

0800aeae <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aeae:	b5b0      	push	{r4, r5, r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
 800aeb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb8:	230f      	movs	r3, #15
 800aeba:	18fb      	adds	r3, r7, r3
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	889a      	ldrh	r2, [r3, #4]
 800aec4:	230e      	movs	r3, #14
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	001a      	movs	r2, r3
 800aed0:	2360      	movs	r3, #96	; 0x60
 800aed2:	4013      	ands	r3, r2
 800aed4:	2b40      	cmp	r3, #64	; 0x40
 800aed6:	d006      	beq.n	800aee6 <USBD_StdEPReq+0x38>
 800aed8:	d900      	bls.n	800aedc <USBD_StdEPReq+0x2e>
 800aeda:	e190      	b.n	800b1fe <USBD_StdEPReq+0x350>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <USBD_StdEPReq+0x4c>
 800aee0:	2b20      	cmp	r3, #32
 800aee2:	d000      	beq.n	800aee6 <USBD_StdEPReq+0x38>
 800aee4:	e18b      	b.n	800b1fe <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	23ad      	movs	r3, #173	; 0xad
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	58d3      	ldr	r3, [r2, r3]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	0010      	movs	r0, r2
 800aef6:	4798      	blx	r3
      break;
 800aef8:	e188      	b.n	800b20c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	001a      	movs	r2, r3
 800af00:	2360      	movs	r3, #96	; 0x60
 800af02:	4013      	ands	r3, r2
 800af04:	2b20      	cmp	r3, #32
 800af06:	d10f      	bne.n	800af28 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	23ad      	movs	r3, #173	; 0xad
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	58d3      	ldr	r3, [r2, r3]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	250f      	movs	r5, #15
 800af14:	197c      	adds	r4, r7, r5
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	0010      	movs	r0, r2
 800af1c:	4798      	blx	r3
 800af1e:	0003      	movs	r3, r0
 800af20:	7023      	strb	r3, [r4, #0]

        return ret;
 800af22:	197b      	adds	r3, r7, r5
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	e174      	b.n	800b212 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d007      	beq.n	800af40 <USBD_StdEPReq+0x92>
 800af30:	dd00      	ble.n	800af34 <USBD_StdEPReq+0x86>
 800af32:	e15c      	b.n	800b1ee <USBD_StdEPReq+0x340>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d100      	bne.n	800af3a <USBD_StdEPReq+0x8c>
 800af38:	e092      	b.n	800b060 <USBD_StdEPReq+0x1b2>
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d04b      	beq.n	800afd6 <USBD_StdEPReq+0x128>
 800af3e:	e156      	b.n	800b1ee <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	23a7      	movs	r3, #167	; 0xa7
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	5cd3      	ldrb	r3, [r2, r3]
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d002      	beq.n	800af52 <USBD_StdEPReq+0xa4>
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d01d      	beq.n	800af8c <USBD_StdEPReq+0xde>
 800af50:	e039      	b.n	800afc6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af52:	220e      	movs	r2, #14
 800af54:	18bb      	adds	r3, r7, r2
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d010      	beq.n	800af7e <USBD_StdEPReq+0xd0>
 800af5c:	18bb      	adds	r3, r7, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	2b80      	cmp	r3, #128	; 0x80
 800af62:	d00c      	beq.n	800af7e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800af64:	18bb      	adds	r3, r7, r2
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	0011      	movs	r1, r2
 800af6c:	0018      	movs	r0, r3
 800af6e:	f001 f9b6 	bl	800c2de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2180      	movs	r1, #128	; 0x80
 800af76:	0018      	movs	r0, r3
 800af78:	f001 f9b1 	bl	800c2de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af7c:	e02a      	b.n	800afd4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0011      	movs	r1, r2
 800af84:	0018      	movs	r0, r3
 800af86:	f000 fcdf 	bl	800b948 <USBD_CtlError>
              break;
 800af8a:	e023      	b.n	800afd4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	885b      	ldrh	r3, [r3, #2]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d113      	bne.n	800afbc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800af94:	220e      	movs	r2, #14
 800af96:	18bb      	adds	r3, r7, r2
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00e      	beq.n	800afbc <USBD_StdEPReq+0x10e>
 800af9e:	18bb      	adds	r3, r7, r2
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b80      	cmp	r3, #128	; 0x80
 800afa4:	d00a      	beq.n	800afbc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	88db      	ldrh	r3, [r3, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800afae:	18bb      	adds	r3, r7, r2
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	0011      	movs	r1, r2
 800afb6:	0018      	movs	r0, r3
 800afb8:	f001 f991 	bl	800c2de <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	0018      	movs	r0, r3
 800afc0:	f000 fdaa 	bl	800bb18 <USBD_CtlSendStatus>

              break;
 800afc4:	e006      	b.n	800afd4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	0011      	movs	r1, r2
 800afcc:	0018      	movs	r0, r3
 800afce:	f000 fcbb 	bl	800b948 <USBD_CtlError>
              break;
 800afd2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800afd4:	e112      	b.n	800b1fc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	23a7      	movs	r3, #167	; 0xa7
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	5cd3      	ldrb	r3, [r2, r3]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d002      	beq.n	800afe8 <USBD_StdEPReq+0x13a>
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d01d      	beq.n	800b022 <USBD_StdEPReq+0x174>
 800afe6:	e032      	b.n	800b04e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afe8:	220e      	movs	r2, #14
 800afea:	18bb      	adds	r3, r7, r2
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d010      	beq.n	800b014 <USBD_StdEPReq+0x166>
 800aff2:	18bb      	adds	r3, r7, r2
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b80      	cmp	r3, #128	; 0x80
 800aff8:	d00c      	beq.n	800b014 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800affa:	18bb      	adds	r3, r7, r2
 800affc:	781a      	ldrb	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	0011      	movs	r1, r2
 800b002:	0018      	movs	r0, r3
 800b004:	f001 f96b 	bl	800c2de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	0018      	movs	r0, r3
 800b00e:	f001 f966 	bl	800c2de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b012:	e024      	b.n	800b05e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	0011      	movs	r1, r2
 800b01a:	0018      	movs	r0, r3
 800b01c:	f000 fc94 	bl	800b948 <USBD_CtlError>
              break;
 800b020:	e01d      	b.n	800b05e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d118      	bne.n	800b05c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b02a:	210e      	movs	r1, #14
 800b02c:	187b      	adds	r3, r7, r1
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	227f      	movs	r2, #127	; 0x7f
 800b032:	4013      	ands	r3, r2
 800b034:	d006      	beq.n	800b044 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b036:	187b      	adds	r3, r7, r1
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	0011      	movs	r1, r2
 800b03e:	0018      	movs	r0, r3
 800b040:	f001 f978 	bl	800c334 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	0018      	movs	r0, r3
 800b048:	f000 fd66 	bl	800bb18 <USBD_CtlSendStatus>
              }
              break;
 800b04c:	e006      	b.n	800b05c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	0011      	movs	r1, r2
 800b054:	0018      	movs	r0, r3
 800b056:	f000 fc77 	bl	800b948 <USBD_CtlError>
              break;
 800b05a:	e000      	b.n	800b05e <USBD_StdEPReq+0x1b0>
              break;
 800b05c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b05e:	e0cd      	b.n	800b1fc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	23a7      	movs	r3, #167	; 0xa7
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	5cd3      	ldrb	r3, [r2, r3]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d002      	beq.n	800b072 <USBD_StdEPReq+0x1c4>
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d03c      	beq.n	800b0ea <USBD_StdEPReq+0x23c>
 800b070:	e0b5      	b.n	800b1de <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b072:	220e      	movs	r2, #14
 800b074:	18bb      	adds	r3, r7, r2
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <USBD_StdEPReq+0x1e4>
 800b07c:	18bb      	adds	r3, r7, r2
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b80      	cmp	r3, #128	; 0x80
 800b082:	d006      	beq.n	800b092 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	0011      	movs	r1, r2
 800b08a:	0018      	movs	r0, r3
 800b08c:	f000 fc5c 	bl	800b948 <USBD_CtlError>
                break;
 800b090:	e0ac      	b.n	800b1ec <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b092:	220e      	movs	r2, #14
 800b094:	18bb      	adds	r3, r7, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	b25b      	sxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da0c      	bge.n	800b0b8 <USBD_StdEPReq+0x20a>
 800b09e:	18bb      	adds	r3, r7, r2
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	227f      	movs	r2, #127	; 0x7f
 800b0a4:	401a      	ands	r2, r3
 800b0a6:	0013      	movs	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	189b      	adds	r3, r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	3310      	adds	r3, #16
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	18d3      	adds	r3, r2, r3
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	e00d      	b.n	800b0d4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0b8:	230e      	movs	r3, #14
 800b0ba:	18fb      	adds	r3, r7, r3
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	227f      	movs	r2, #127	; 0x7f
 800b0c0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c2:	0013      	movs	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	189b      	adds	r3, r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	3351      	adds	r3, #81	; 0x51
 800b0cc:	33ff      	adds	r3, #255	; 0xff
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	18d3      	adds	r3, r2, r3
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f000 fcae 	bl	800ba44 <USBD_CtlSendData>
              break;
 800b0e8:	e080      	b.n	800b1ec <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0ea:	220e      	movs	r2, #14
 800b0ec:	18bb      	adds	r3, r7, r2
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da14      	bge.n	800b120 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0f6:	18bb      	adds	r3, r7, r2
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	220f      	movs	r2, #15
 800b0fc:	401a      	ands	r2, r3
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	0013      	movs	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	189b      	adds	r3, r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	18cb      	adds	r3, r1, r3
 800b10a:	3318      	adds	r3, #24
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11e      	bne.n	800b150 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	0011      	movs	r1, r2
 800b118:	0018      	movs	r0, r3
 800b11a:	f000 fc15 	bl	800b948 <USBD_CtlError>
                  break;
 800b11e:	e065      	b.n	800b1ec <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b120:	230e      	movs	r3, #14
 800b122:	18fb      	adds	r3, r7, r3
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	220f      	movs	r2, #15
 800b128:	401a      	ands	r2, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	23ac      	movs	r3, #172	; 0xac
 800b12e:	0059      	lsls	r1, r3, #1
 800b130:	0013      	movs	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	189b      	adds	r3, r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	18c3      	adds	r3, r0, r3
 800b13a:	185b      	adds	r3, r3, r1
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	0011      	movs	r1, r2
 800b148:	0018      	movs	r0, r3
 800b14a:	f000 fbfd 	bl	800b948 <USBD_CtlError>
                  break;
 800b14e:	e04d      	b.n	800b1ec <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b150:	220e      	movs	r2, #14
 800b152:	18bb      	adds	r3, r7, r2
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	b25b      	sxtb	r3, r3
 800b158:	2b00      	cmp	r3, #0
 800b15a:	da0c      	bge.n	800b176 <USBD_StdEPReq+0x2c8>
 800b15c:	18bb      	adds	r3, r7, r2
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	227f      	movs	r2, #127	; 0x7f
 800b162:	401a      	ands	r2, r3
 800b164:	0013      	movs	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	189b      	adds	r3, r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	3310      	adds	r3, #16
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	18d3      	adds	r3, r2, r3
 800b172:	3304      	adds	r3, #4
 800b174:	e00d      	b.n	800b192 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b176:	230e      	movs	r3, #14
 800b178:	18fb      	adds	r3, r7, r3
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	227f      	movs	r2, #127	; 0x7f
 800b17e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b180:	0013      	movs	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	189b      	adds	r3, r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	3351      	adds	r3, #81	; 0x51
 800b18a:	33ff      	adds	r3, #255	; 0xff
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	18d3      	adds	r3, r2, r3
 800b190:	3304      	adds	r3, #4
 800b192:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b194:	220e      	movs	r2, #14
 800b196:	18bb      	adds	r3, r7, r2
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <USBD_StdEPReq+0x2f8>
 800b19e:	18bb      	adds	r3, r7, r2
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b80      	cmp	r3, #128	; 0x80
 800b1a4:	d103      	bne.n	800b1ae <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	e010      	b.n	800b1d0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b1ae:	230e      	movs	r3, #14
 800b1b0:	18fb      	adds	r3, r7, r3
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	0011      	movs	r1, r2
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f001 f8e6 	bl	800c38a <USBD_LL_IsStallEP>
 800b1be:	1e03      	subs	r3, r0, #0
 800b1c0:	d003      	beq.n	800b1ca <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	e002      	b.n	800b1d0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	f000 fc34 	bl	800ba44 <USBD_CtlSendData>
              break;
 800b1dc:	e006      	b.n	800b1ec <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	0011      	movs	r1, r2
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f000 fbaf 	bl	800b948 <USBD_CtlError>
              break;
 800b1ea:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b1ec:	e006      	b.n	800b1fc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	0011      	movs	r1, r2
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f000 fba7 	bl	800b948 <USBD_CtlError>
          break;
 800b1fa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b1fc:	e006      	b.n	800b20c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	0011      	movs	r1, r2
 800b204:	0018      	movs	r0, r3
 800b206:	f000 fb9f 	bl	800b948 <USBD_CtlError>
      break;
 800b20a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b20c:	230f      	movs	r3, #15
 800b20e:	18fb      	adds	r3, r7, r3
 800b210:	781b      	ldrb	r3, [r3, #0]
}
 800b212:	0018      	movs	r0, r3
 800b214:	46bd      	mov	sp, r7
 800b216:	b004      	add	sp, #16
 800b218:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b21c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b226:	2308      	movs	r3, #8
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	2200      	movs	r2, #0
 800b22c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b232:	230b      	movs	r3, #11
 800b234:	18fb      	adds	r3, r7, r3
 800b236:	2200      	movs	r2, #0
 800b238:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	885b      	ldrh	r3, [r3, #2]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	2b07      	cmp	r3, #7
 800b244:	d900      	bls.n	800b248 <USBD_GetDescriptor+0x2c>
 800b246:	e159      	b.n	800b4fc <USBD_GetDescriptor+0x2e0>
 800b248:	009a      	lsls	r2, r3, #2
 800b24a:	4bcb      	ldr	r3, [pc, #812]	; (800b578 <USBD_GetDescriptor+0x35c>)
 800b24c:	18d3      	adds	r3, r2, r3
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	23ac      	movs	r3, #172	; 0xac
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	58d3      	ldr	r3, [r2, r3]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	7c12      	ldrb	r2, [r2, #16]
 800b260:	2108      	movs	r1, #8
 800b262:	1879      	adds	r1, r7, r1
 800b264:	0010      	movs	r0, r2
 800b266:	4798      	blx	r3
 800b268:	0003      	movs	r3, r0
 800b26a:	60fb      	str	r3, [r7, #12]
      break;
 800b26c:	e153      	b.n	800b516 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	7c1b      	ldrb	r3, [r3, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10f      	bne.n	800b296 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	23ad      	movs	r3, #173	; 0xad
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	58d3      	ldr	r3, [r2, r3]
 800b27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b280:	2208      	movs	r2, #8
 800b282:	18ba      	adds	r2, r7, r2
 800b284:	0010      	movs	r0, r2
 800b286:	4798      	blx	r3
 800b288:	0003      	movs	r3, r0
 800b28a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	2202      	movs	r2, #2
 800b292:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b294:	e13f      	b.n	800b516 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	23ad      	movs	r3, #173	; 0xad
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	58d3      	ldr	r3, [r2, r3]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	18ba      	adds	r2, r7, r2
 800b2a4:	0010      	movs	r0, r2
 800b2a6:	4798      	blx	r3
 800b2a8:	0003      	movs	r3, r0
 800b2aa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	701a      	strb	r2, [r3, #0]
      break;
 800b2b4:	e12f      	b.n	800b516 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d900      	bls.n	800b2c2 <USBD_GetDescriptor+0xa6>
 800b2c0:	e0d0      	b.n	800b464 <USBD_GetDescriptor+0x248>
 800b2c2:	009a      	lsls	r2, r3, #2
 800b2c4:	4bad      	ldr	r3, [pc, #692]	; (800b57c <USBD_GetDescriptor+0x360>)
 800b2c6:	18d3      	adds	r3, r2, r3
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	23ac      	movs	r3, #172	; 0xac
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	58d3      	ldr	r3, [r2, r3]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00d      	beq.n	800b2f6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	23ac      	movs	r3, #172	; 0xac
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	58d3      	ldr	r3, [r2, r3]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	2108      	movs	r1, #8
 800b2ea:	1879      	adds	r1, r7, r1
 800b2ec:	0010      	movs	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	0003      	movs	r3, r0
 800b2f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f4:	e0c3      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	0011      	movs	r1, r2
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f000 fb23 	bl	800b948 <USBD_CtlError>
            err++;
 800b302:	210b      	movs	r1, #11
 800b304:	187b      	adds	r3, r7, r1
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	187b      	adds	r3, r7, r1
 800b30a:	3201      	adds	r2, #1
 800b30c:	701a      	strb	r2, [r3, #0]
          break;
 800b30e:	e0b6      	b.n	800b47e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	23ac      	movs	r3, #172	; 0xac
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	58d3      	ldr	r3, [r2, r3]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00d      	beq.n	800b33a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	23ac      	movs	r3, #172	; 0xac
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	58d3      	ldr	r3, [r2, r3]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	7c12      	ldrb	r2, [r2, #16]
 800b32c:	2108      	movs	r1, #8
 800b32e:	1879      	adds	r1, r7, r1
 800b330:	0010      	movs	r0, r2
 800b332:	4798      	blx	r3
 800b334:	0003      	movs	r3, r0
 800b336:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b338:	e0a1      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	0011      	movs	r1, r2
 800b340:	0018      	movs	r0, r3
 800b342:	f000 fb01 	bl	800b948 <USBD_CtlError>
            err++;
 800b346:	210b      	movs	r1, #11
 800b348:	187b      	adds	r3, r7, r1
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	187b      	adds	r3, r7, r1
 800b34e:	3201      	adds	r2, #1
 800b350:	701a      	strb	r2, [r3, #0]
          break;
 800b352:	e094      	b.n	800b47e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	23ac      	movs	r3, #172	; 0xac
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	58d3      	ldr	r3, [r2, r3]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00d      	beq.n	800b37e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	23ac      	movs	r3, #172	; 0xac
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	58d3      	ldr	r3, [r2, r3]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	7c12      	ldrb	r2, [r2, #16]
 800b370:	2108      	movs	r1, #8
 800b372:	1879      	adds	r1, r7, r1
 800b374:	0010      	movs	r0, r2
 800b376:	4798      	blx	r3
 800b378:	0003      	movs	r3, r0
 800b37a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b37c:	e07f      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	0011      	movs	r1, r2
 800b384:	0018      	movs	r0, r3
 800b386:	f000 fadf 	bl	800b948 <USBD_CtlError>
            err++;
 800b38a:	210b      	movs	r1, #11
 800b38c:	187b      	adds	r3, r7, r1
 800b38e:	781a      	ldrb	r2, [r3, #0]
 800b390:	187b      	adds	r3, r7, r1
 800b392:	3201      	adds	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
          break;
 800b396:	e072      	b.n	800b47e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	23ac      	movs	r3, #172	; 0xac
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	58d3      	ldr	r3, [r2, r3]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00d      	beq.n	800b3c2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	23ac      	movs	r3, #172	; 0xac
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	58d3      	ldr	r3, [r2, r3]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	7c12      	ldrb	r2, [r2, #16]
 800b3b4:	2108      	movs	r1, #8
 800b3b6:	1879      	adds	r1, r7, r1
 800b3b8:	0010      	movs	r0, r2
 800b3ba:	4798      	blx	r3
 800b3bc:	0003      	movs	r3, r0
 800b3be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c0:	e05d      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	0011      	movs	r1, r2
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	f000 fabd 	bl	800b948 <USBD_CtlError>
            err++;
 800b3ce:	210b      	movs	r1, #11
 800b3d0:	187b      	adds	r3, r7, r1
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	187b      	adds	r3, r7, r1
 800b3d6:	3201      	adds	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
          break;
 800b3da:	e050      	b.n	800b47e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	23ac      	movs	r3, #172	; 0xac
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	58d3      	ldr	r3, [r2, r3]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00d      	beq.n	800b406 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	23ac      	movs	r3, #172	; 0xac
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	58d3      	ldr	r3, [r2, r3]
 800b3f2:	695b      	ldr	r3, [r3, #20]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	2108      	movs	r1, #8
 800b3fa:	1879      	adds	r1, r7, r1
 800b3fc:	0010      	movs	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	0003      	movs	r3, r0
 800b402:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b404:	e03b      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	0011      	movs	r1, r2
 800b40c:	0018      	movs	r0, r3
 800b40e:	f000 fa9b 	bl	800b948 <USBD_CtlError>
            err++;
 800b412:	210b      	movs	r1, #11
 800b414:	187b      	adds	r3, r7, r1
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	187b      	adds	r3, r7, r1
 800b41a:	3201      	adds	r2, #1
 800b41c:	701a      	strb	r2, [r3, #0]
          break;
 800b41e:	e02e      	b.n	800b47e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	23ac      	movs	r3, #172	; 0xac
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	58d3      	ldr	r3, [r2, r3]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00d      	beq.n	800b44a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	23ac      	movs	r3, #172	; 0xac
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	58d3      	ldr	r3, [r2, r3]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	7c12      	ldrb	r2, [r2, #16]
 800b43c:	2108      	movs	r1, #8
 800b43e:	1879      	adds	r1, r7, r1
 800b440:	0010      	movs	r0, r2
 800b442:	4798      	blx	r3
 800b444:	0003      	movs	r3, r0
 800b446:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b448:	e019      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	0011      	movs	r1, r2
 800b450:	0018      	movs	r0, r3
 800b452:	f000 fa79 	bl	800b948 <USBD_CtlError>
            err++;
 800b456:	210b      	movs	r1, #11
 800b458:	187b      	adds	r3, r7, r1
 800b45a:	781a      	ldrb	r2, [r3, #0]
 800b45c:	187b      	adds	r3, r7, r1
 800b45e:	3201      	adds	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
          break;
 800b462:	e00c      	b.n	800b47e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	0011      	movs	r1, r2
 800b46a:	0018      	movs	r0, r3
 800b46c:	f000 fa6c 	bl	800b948 <USBD_CtlError>
          err++;
 800b470:	210b      	movs	r1, #11
 800b472:	187b      	adds	r3, r7, r1
 800b474:	781a      	ldrb	r2, [r3, #0]
 800b476:	187b      	adds	r3, r7, r1
 800b478:	3201      	adds	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b47c:	e04b      	b.n	800b516 <USBD_GetDescriptor+0x2fa>
 800b47e:	e04a      	b.n	800b516 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7c1b      	ldrb	r3, [r3, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10b      	bne.n	800b4a0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	23ad      	movs	r3, #173	; 0xad
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	58d3      	ldr	r3, [r2, r3]
 800b490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b492:	2208      	movs	r2, #8
 800b494:	18ba      	adds	r2, r7, r2
 800b496:	0010      	movs	r0, r2
 800b498:	4798      	blx	r3
 800b49a:	0003      	movs	r3, r0
 800b49c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b49e:	e03a      	b.n	800b516 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	0011      	movs	r1, r2
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f000 fa4e 	bl	800b948 <USBD_CtlError>
        err++;
 800b4ac:	210b      	movs	r1, #11
 800b4ae:	187b      	adds	r3, r7, r1
 800b4b0:	781a      	ldrb	r2, [r3, #0]
 800b4b2:	187b      	adds	r3, r7, r1
 800b4b4:	3201      	adds	r2, #1
 800b4b6:	701a      	strb	r2, [r3, #0]
      break;
 800b4b8:	e02d      	b.n	800b516 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	7c1b      	ldrb	r3, [r3, #16]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10f      	bne.n	800b4e2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	23ad      	movs	r3, #173	; 0xad
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	58d3      	ldr	r3, [r2, r3]
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	18ba      	adds	r2, r7, r2
 800b4d0:	0010      	movs	r0, r2
 800b4d2:	4798      	blx	r3
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	2207      	movs	r2, #7
 800b4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4e0:	e019      	b.n	800b516 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	0011      	movs	r1, r2
 800b4e8:	0018      	movs	r0, r3
 800b4ea:	f000 fa2d 	bl	800b948 <USBD_CtlError>
        err++;
 800b4ee:	210b      	movs	r1, #11
 800b4f0:	187b      	adds	r3, r7, r1
 800b4f2:	781a      	ldrb	r2, [r3, #0]
 800b4f4:	187b      	adds	r3, r7, r1
 800b4f6:	3201      	adds	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
      break;
 800b4fa:	e00c      	b.n	800b516 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	0011      	movs	r1, r2
 800b502:	0018      	movs	r0, r3
 800b504:	f000 fa20 	bl	800b948 <USBD_CtlError>
      err++;
 800b508:	210b      	movs	r1, #11
 800b50a:	187b      	adds	r3, r7, r1
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	187b      	adds	r3, r7, r1
 800b510:	3201      	adds	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
      break;
 800b514:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b516:	230b      	movs	r3, #11
 800b518:	18fb      	adds	r3, r7, r3
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d127      	bne.n	800b570 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b520:	2108      	movs	r1, #8
 800b522:	187b      	adds	r3, r7, r1
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d019      	beq.n	800b55e <USBD_GetDescriptor+0x342>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	88db      	ldrh	r3, [r3, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d015      	beq.n	800b55e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	88da      	ldrh	r2, [r3, #6]
 800b536:	187b      	adds	r3, r7, r1
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	1c18      	adds	r0, r3, #0
 800b53c:	1c11      	adds	r1, r2, #0
 800b53e:	b28a      	uxth	r2, r1
 800b540:	b283      	uxth	r3, r0
 800b542:	429a      	cmp	r2, r3
 800b544:	d900      	bls.n	800b548 <USBD_GetDescriptor+0x32c>
 800b546:	1c01      	adds	r1, r0, #0
 800b548:	b28a      	uxth	r2, r1
 800b54a:	2108      	movs	r1, #8
 800b54c:	187b      	adds	r3, r7, r1
 800b54e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b550:	187b      	adds	r3, r7, r1
 800b552:	881a      	ldrh	r2, [r3, #0]
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	0018      	movs	r0, r3
 800b55a:	f000 fa73 	bl	800ba44 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	0018      	movs	r0, r3
 800b56a:	f000 fad5 	bl	800bb18 <USBD_CtlSendStatus>
 800b56e:	e000      	b.n	800b572 <USBD_GetDescriptor+0x356>
    return;
 800b570:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b572:	46bd      	mov	sp, r7
 800b574:	b004      	add	sp, #16
 800b576:	bd80      	pop	{r7, pc}
 800b578:	0800d778 	.word	0x0800d778
 800b57c:	0800d798 	.word	0x0800d798

0800b580 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b580:	b590      	push	{r4, r7, lr}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	889b      	ldrh	r3, [r3, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d13d      	bne.n	800b60e <USBD_SetAddress+0x8e>
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	88db      	ldrh	r3, [r3, #6]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d139      	bne.n	800b60e <USBD_SetAddress+0x8e>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	885b      	ldrh	r3, [r3, #2]
 800b59e:	2b7f      	cmp	r3, #127	; 0x7f
 800b5a0:	d835      	bhi.n	800b60e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	885b      	ldrh	r3, [r3, #2]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	230f      	movs	r3, #15
 800b5aa:	18fb      	adds	r3, r7, r3
 800b5ac:	217f      	movs	r1, #127	; 0x7f
 800b5ae:	400a      	ands	r2, r1
 800b5b0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	23a7      	movs	r3, #167	; 0xa7
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	5cd3      	ldrb	r3, [r2, r3]
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d106      	bne.n	800b5cc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	0011      	movs	r1, r2
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	f000 f9bf 	bl	800b948 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ca:	e027      	b.n	800b61c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	240f      	movs	r4, #15
 800b5d0:	193a      	adds	r2, r7, r4
 800b5d2:	4914      	ldr	r1, [pc, #80]	; (800b624 <USBD_SetAddress+0xa4>)
 800b5d4:	7812      	ldrb	r2, [r2, #0]
 800b5d6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5d8:	193b      	adds	r3, r7, r4
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	0011      	movs	r1, r2
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	f000 ff03 	bl	800c3ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	f000 fa95 	bl	800bb18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5ee:	193b      	adds	r3, r7, r4
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	23a7      	movs	r3, #167	; 0xa7
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	2102      	movs	r1, #2
 800b5fe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b600:	e00c      	b.n	800b61c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	23a7      	movs	r3, #167	; 0xa7
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	2101      	movs	r1, #1
 800b60a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60c:	e006      	b.n	800b61c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	0011      	movs	r1, r2
 800b614:	0018      	movs	r0, r3
 800b616:	f000 f997 	bl	800b948 <USBD_CtlError>
  }
}
 800b61a:	46c0      	nop			; (mov r8, r8)
 800b61c:	46c0      	nop			; (mov r8, r8)
 800b61e:	46bd      	mov	sp, r7
 800b620:	b005      	add	sp, #20
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	0000029e 	.word	0x0000029e

0800b628 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	885b      	ldrh	r3, [r3, #2]
 800b636:	b2da      	uxtb	r2, r3
 800b638:	4b4c      	ldr	r3, [pc, #304]	; (800b76c <USBD_SetConfig+0x144>)
 800b63a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b63c:	4b4b      	ldr	r3, [pc, #300]	; (800b76c <USBD_SetConfig+0x144>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d906      	bls.n	800b652 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	0011      	movs	r1, r2
 800b64a:	0018      	movs	r0, r3
 800b64c:	f000 f97c 	bl	800b948 <USBD_CtlError>
 800b650:	e088      	b.n	800b764 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	23a7      	movs	r3, #167	; 0xa7
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	5cd3      	ldrb	r3, [r2, r3]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d002      	beq.n	800b664 <USBD_SetConfig+0x3c>
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d029      	beq.n	800b6b6 <USBD_SetConfig+0x8e>
 800b662:	e071      	b.n	800b748 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b664:	4b41      	ldr	r3, [pc, #260]	; (800b76c <USBD_SetConfig+0x144>)
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01f      	beq.n	800b6ac <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b66c:	4b3f      	ldr	r3, [pc, #252]	; (800b76c <USBD_SetConfig+0x144>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	001a      	movs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	23a7      	movs	r3, #167	; 0xa7
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	2103      	movs	r1, #3
 800b67e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b680:	4b3a      	ldr	r3, [pc, #232]	; (800b76c <USBD_SetConfig+0x144>)
 800b682:	781a      	ldrb	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	0011      	movs	r1, r2
 800b688:	0018      	movs	r0, r3
 800b68a:	f7ff f8c6 	bl	800a81a <USBD_SetClassConfig>
 800b68e:	0003      	movs	r3, r0
 800b690:	2b02      	cmp	r3, #2
 800b692:	d106      	bne.n	800b6a2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	0011      	movs	r1, r2
 800b69a:	0018      	movs	r0, r3
 800b69c:	f000 f954 	bl	800b948 <USBD_CtlError>
            return;
 800b6a0:	e060      	b.n	800b764 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f000 fa37 	bl	800bb18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b6aa:	e05b      	b.n	800b764 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	f000 fa32 	bl	800bb18 <USBD_CtlSendStatus>
        break;
 800b6b4:	e056      	b.n	800b764 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b6b6:	4b2d      	ldr	r3, [pc, #180]	; (800b76c <USBD_SetConfig+0x144>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d115      	bne.n	800b6ea <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	23a7      	movs	r3, #167	; 0xa7
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	2102      	movs	r1, #2
 800b6c6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b6c8:	4b28      	ldr	r3, [pc, #160]	; (800b76c <USBD_SetConfig+0x144>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b6d2:	4b26      	ldr	r3, [pc, #152]	; (800b76c <USBD_SetConfig+0x144>)
 800b6d4:	781a      	ldrb	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	0011      	movs	r1, r2
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f7ff f8c4 	bl	800a868 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f000 fa18 	bl	800bb18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b6e8:	e03c      	b.n	800b764 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b6ea:	4b20      	ldr	r3, [pc, #128]	; (800b76c <USBD_SetConfig+0x144>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	001a      	movs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d022      	beq.n	800b73e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	0011      	movs	r1, r2
 800b702:	0018      	movs	r0, r3
 800b704:	f7ff f8b0 	bl	800a868 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b708:	4b18      	ldr	r3, [pc, #96]	; (800b76c <USBD_SetConfig+0x144>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	001a      	movs	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b712:	4b16      	ldr	r3, [pc, #88]	; (800b76c <USBD_SetConfig+0x144>)
 800b714:	781a      	ldrb	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	0011      	movs	r1, r2
 800b71a:	0018      	movs	r0, r3
 800b71c:	f7ff f87d 	bl	800a81a <USBD_SetClassConfig>
 800b720:	0003      	movs	r3, r0
 800b722:	2b02      	cmp	r3, #2
 800b724:	d106      	bne.n	800b734 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	0011      	movs	r1, r2
 800b72c:	0018      	movs	r0, r3
 800b72e:	f000 f90b 	bl	800b948 <USBD_CtlError>
            return;
 800b732:	e017      	b.n	800b764 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	0018      	movs	r0, r3
 800b738:	f000 f9ee 	bl	800bb18 <USBD_CtlSendStatus>
        break;
 800b73c:	e012      	b.n	800b764 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	0018      	movs	r0, r3
 800b742:	f000 f9e9 	bl	800bb18 <USBD_CtlSendStatus>
        break;
 800b746:	e00d      	b.n	800b764 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	0011      	movs	r1, r2
 800b74e:	0018      	movs	r0, r3
 800b750:	f000 f8fa 	bl	800b948 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <USBD_SetConfig+0x144>)
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	0011      	movs	r1, r2
 800b75c:	0018      	movs	r0, r3
 800b75e:	f7ff f883 	bl	800a868 <USBD_ClrClassConfig>
        break;
 800b762:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b764:	46bd      	mov	sp, r7
 800b766:	b002      	add	sp, #8
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	46c0      	nop			; (mov r8, r8)
 800b76c:	200009f0 	.word	0x200009f0

0800b770 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	88db      	ldrh	r3, [r3, #6]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d006      	beq.n	800b790 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	0011      	movs	r1, r2
 800b788:	0018      	movs	r0, r3
 800b78a:	f000 f8dd 	bl	800b948 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b78e:	e026      	b.n	800b7de <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	23a7      	movs	r3, #167	; 0xa7
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	5cd3      	ldrb	r3, [r2, r3]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	dc02      	bgt.n	800b7a2 <USBD_GetConfig+0x32>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dc03      	bgt.n	800b7a8 <USBD_GetConfig+0x38>
 800b7a0:	e016      	b.n	800b7d0 <USBD_GetConfig+0x60>
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d00c      	beq.n	800b7c0 <USBD_GetConfig+0x50>
 800b7a6:	e013      	b.n	800b7d0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	0019      	movs	r1, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	0018      	movs	r0, r3
 800b7ba:	f000 f943 	bl	800ba44 <USBD_CtlSendData>
        break;
 800b7be:	e00e      	b.n	800b7de <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	1d19      	adds	r1, r3, #4
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	f000 f93b 	bl	800ba44 <USBD_CtlSendData>
        break;
 800b7ce:	e006      	b.n	800b7de <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	0011      	movs	r1, r2
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f000 f8b6 	bl	800b948 <USBD_CtlError>
        break;
 800b7dc:	46c0      	nop			; (mov r8, r8)
}
 800b7de:	46c0      	nop			; (mov r8, r8)
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	b002      	add	sp, #8
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	23a7      	movs	r3, #167	; 0xa7
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	5cd3      	ldrb	r3, [r2, r3]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d822      	bhi.n	800b844 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	88db      	ldrh	r3, [r3, #6]
 800b802:	2b02      	cmp	r3, #2
 800b804:	d006      	beq.n	800b814 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	0011      	movs	r1, r2
 800b80c:	0018      	movs	r0, r3
 800b80e:	f000 f89b 	bl	800b948 <USBD_CtlError>
        break;
 800b812:	e01e      	b.n	800b852 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	23a9      	movs	r3, #169	; 0xa9
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	58d3      	ldr	r3, [r2, r3]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d005      	beq.n	800b832 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	2202      	movs	r2, #2
 800b82c:	431a      	orrs	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	330c      	adds	r3, #12
 800b836:	0019      	movs	r1, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	0018      	movs	r0, r3
 800b83e:	f000 f901 	bl	800ba44 <USBD_CtlSendData>
      break;
 800b842:	e006      	b.n	800b852 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	0011      	movs	r1, r2
 800b84a:	0018      	movs	r0, r3
 800b84c:	f000 f87c 	bl	800b948 <USBD_CtlError>
      break;
 800b850:	46c0      	nop			; (mov r8, r8)
  }
}
 800b852:	46c0      	nop			; (mov r8, r8)
 800b854:	46bd      	mov	sp, r7
 800b856:	b002      	add	sp, #8
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	885b      	ldrh	r3, [r3, #2]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d108      	bne.n	800b87e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	23a9      	movs	r3, #169	; 0xa9
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	2101      	movs	r1, #1
 800b874:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	0018      	movs	r0, r3
 800b87a:	f000 f94d 	bl	800bb18 <USBD_CtlSendStatus>
  }
}
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	46bd      	mov	sp, r7
 800b882:	b002      	add	sp, #8
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	23a7      	movs	r3, #167	; 0xa7
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	5cd3      	ldrb	r3, [r2, r3]
 800b898:	3b01      	subs	r3, #1
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d80d      	bhi.n	800b8ba <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	885b      	ldrh	r3, [r3, #2]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d110      	bne.n	800b8c8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	23a9      	movs	r3, #169	; 0xa9
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	f000 f930 	bl	800bb18 <USBD_CtlSendStatus>
      }
      break;
 800b8b8:	e006      	b.n	800b8c8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	0011      	movs	r1, r2
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 f841 	bl	800b948 <USBD_CtlError>
      break;
 800b8c6:	e000      	b.n	800b8ca <USBD_ClrFeature+0x44>
      break;
 800b8c8:	46c0      	nop			; (mov r8, r8)
  }
}
 800b8ca:	46c0      	nop			; (mov r8, r8)
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	b002      	add	sp, #8
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781a      	ldrb	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	785a      	ldrb	r2, [r3, #1]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	3302      	adds	r3, #2
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	3303      	adds	r3, #3
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	18d3      	adds	r3, r2, r3
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	3304      	adds	r3, #4
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	b29a      	uxth	r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	3305      	adds	r3, #5
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	18d3      	adds	r3, r2, r3
 800b91e:	b29a      	uxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	3306      	adds	r3, #6
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	3307      	adds	r3, #7
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	b29b      	uxth	r3, r3
 800b938:	18d3      	adds	r3, r2, r3
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	80da      	strh	r2, [r3, #6]

}
 800b940:	46c0      	nop			; (mov r8, r8)
 800b942:	46bd      	mov	sp, r7
 800b944:	b002      	add	sp, #8
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2180      	movs	r1, #128	; 0x80
 800b956:	0018      	movs	r0, r3
 800b958:	f000 fcc1 	bl	800c2de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2100      	movs	r1, #0
 800b960:	0018      	movs	r0, r3
 800b962:	f000 fcbc 	bl	800c2de <USBD_LL_StallEP>
}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	b002      	add	sp, #8
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b96e:	b590      	push	{r4, r7, lr}
 800b970:	b087      	sub	sp, #28
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b97a:	2417      	movs	r4, #23
 800b97c:	193b      	adds	r3, r7, r4
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d03c      	beq.n	800ba02 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0018      	movs	r0, r3
 800b98c:	f000 f83d 	bl	800ba0a <USBD_GetLen>
 800b990:	0003      	movs	r3, r0
 800b992:	3301      	adds	r3, #1
 800b994:	b29b      	uxth	r3, r3
 800b996:	18db      	adds	r3, r3, r3
 800b998:	b29a      	uxth	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b99e:	193b      	adds	r3, r7, r4
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	193a      	adds	r2, r7, r4
 800b9a4:	1c59      	adds	r1, r3, #1
 800b9a6:	7011      	strb	r1, [r2, #0]
 800b9a8:	001a      	movs	r2, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	189b      	adds	r3, r3, r2
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	7812      	ldrb	r2, [r2, #0]
 800b9b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b9b4:	193b      	adds	r3, r7, r4
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	193a      	adds	r2, r7, r4
 800b9ba:	1c59      	adds	r1, r3, #1
 800b9bc:	7011      	strb	r1, [r2, #0]
 800b9be:	001a      	movs	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	189b      	adds	r3, r3, r2
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b9c8:	e017      	b.n	800b9fa <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	60fa      	str	r2, [r7, #12]
 800b9d0:	2417      	movs	r4, #23
 800b9d2:	193a      	adds	r2, r7, r4
 800b9d4:	7812      	ldrb	r2, [r2, #0]
 800b9d6:	1939      	adds	r1, r7, r4
 800b9d8:	1c50      	adds	r0, r2, #1
 800b9da:	7008      	strb	r0, [r1, #0]
 800b9dc:	0011      	movs	r1, r2
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	1852      	adds	r2, r2, r1
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b9e6:	193b      	adds	r3, r7, r4
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	193a      	adds	r2, r7, r4
 800b9ec:	1c59      	adds	r1, r3, #1
 800b9ee:	7011      	strb	r1, [r2, #0]
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	189b      	adds	r3, r3, r2
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e3      	bne.n	800b9ca <USBD_GetString+0x5c>
    }
  }
}
 800ba02:	46c0      	nop			; (mov r8, r8)
 800ba04:	46bd      	mov	sp, r7
 800ba06:	b007      	add	sp, #28
 800ba08:	bd90      	pop	{r4, r7, pc}

0800ba0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba12:	230f      	movs	r3, #15
 800ba14:	18fb      	adds	r3, r7, r3
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ba1a:	e008      	b.n	800ba2e <USBD_GetLen+0x24>
  {
    len++;
 800ba1c:	210f      	movs	r1, #15
 800ba1e:	187b      	adds	r3, r7, r1
 800ba20:	781a      	ldrb	r2, [r3, #0]
 800ba22:	187b      	adds	r3, r7, r1
 800ba24:	3201      	adds	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
    buf++;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1f2      	bne.n	800ba1c <USBD_GetLen+0x12>
  }

  return len;
 800ba36:	230f      	movs	r3, #15
 800ba38:	18fb      	adds	r3, r7, r3
 800ba3a:	781b      	ldrb	r3, [r3, #0]
}
 800ba3c:	0018      	movs	r0, r3
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	b004      	add	sp, #16
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	1dbb      	adds	r3, r7, #6
 800ba50:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	23a5      	movs	r3, #165	; 0xa5
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	2102      	movs	r1, #2
 800ba5a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ba5c:	1dbb      	adds	r3, r7, #6
 800ba5e:	881a      	ldrh	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ba64:	1dbb      	adds	r3, r7, #6
 800ba66:	881a      	ldrh	r2, [r3, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba6c:	1dbb      	adds	r3, r7, #6
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	2100      	movs	r1, #0
 800ba76:	f000 fce4 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b004      	add	sp, #16
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	1dbb      	adds	r3, r7, #6
 800ba90:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba92:	1dbb      	adds	r3, r7, #6
 800ba94:	881b      	ldrh	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	f000 fcd1 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	0018      	movs	r0, r3
 800baa4:	46bd      	mov	sp, r7
 800baa6:	b004      	add	sp, #16
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	60f8      	str	r0, [r7, #12]
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	1dbb      	adds	r3, r7, #6
 800bab6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	23a5      	movs	r3, #165	; 0xa5
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	2103      	movs	r1, #3
 800bac0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bac2:	1dbb      	adds	r3, r7, #6
 800bac4:	8819      	ldrh	r1, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	23ae      	movs	r3, #174	; 0xae
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bace:	1dbb      	adds	r3, r7, #6
 800bad0:	8819      	ldrh	r1, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	23b0      	movs	r3, #176	; 0xb0
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bada:	1dbb      	adds	r3, r7, #6
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	2100      	movs	r1, #0
 800bae4:	f000 fce4 	bl	800c4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	0018      	movs	r0, r3
 800baec:	46bd      	mov	sp, r7
 800baee:	b004      	add	sp, #16
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	60b9      	str	r1, [r7, #8]
 800bafc:	1dbb      	adds	r3, r7, #6
 800bafe:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb00:	1dbb      	adds	r3, r7, #6
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	f000 fcd1 	bl	800c4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	0018      	movs	r0, r3
 800bb12:	46bd      	mov	sp, r7
 800bb14:	b004      	add	sp, #16
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	23a5      	movs	r3, #165	; 0xa5
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	2104      	movs	r1, #4
 800bb28:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2100      	movs	r1, #0
 800bb32:	f000 fc86 	bl	800c442 <USBD_LL_Transmit>

  return USBD_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	0018      	movs	r0, r3
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	b002      	add	sp, #8
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	23a5      	movs	r3, #165	; 0xa5
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	2105      	movs	r1, #5
 800bb50:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	2300      	movs	r3, #0
 800bb56:	2200      	movs	r2, #0
 800bb58:	2100      	movs	r1, #0
 800bb5a:	f000 fca9 	bl	800c4b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	0018      	movs	r0, r3
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b002      	add	sp, #8
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  /*
   * Assume initialization will succeed and set ready flag now.  If
   * there is a failure it will get cleared at that point.
   */

  debug_print_ready = 1;
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <MX_USB_DEVICE_Init+0x5c>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb72:	4915      	ldr	r1, [pc, #84]	; (800bbc8 <MX_USB_DEVICE_Init+0x60>)
 800bb74:	4b15      	ldr	r3, [pc, #84]	; (800bbcc <MX_USB_DEVICE_Init+0x64>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	0018      	movs	r0, r3
 800bb7a:	f7fe fde7 	bl	800a74c <USBD_Init>
 800bb7e:	1e03      	subs	r3, r0, #0
 800bb80:	d001      	beq.n	800bb86 <MX_USB_DEVICE_Init+0x1e>
  {
    Error_Handler();
 800bb82:	f7f6 f8df 	bl	8001d44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb86:	4a12      	ldr	r2, [pc, #72]	; (800bbd0 <MX_USB_DEVICE_Init+0x68>)
 800bb88:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <MX_USB_DEVICE_Init+0x64>)
 800bb8a:	0011      	movs	r1, r2
 800bb8c:	0018      	movs	r0, r3
 800bb8e:	f7fe fe0e 	bl	800a7ae <USBD_RegisterClass>
 800bb92:	1e03      	subs	r3, r0, #0
 800bb94:	d001      	beq.n	800bb9a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
 800bb96:	f7f6 f8d5 	bl	8001d44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb9a:	4a0e      	ldr	r2, [pc, #56]	; (800bbd4 <MX_USB_DEVICE_Init+0x6c>)
 800bb9c:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <MX_USB_DEVICE_Init+0x64>)
 800bb9e:	0011      	movs	r1, r2
 800bba0:	0018      	movs	r0, r3
 800bba2:	f7fe fd23 	bl	800a5ec <USBD_CDC_RegisterInterface>
 800bba6:	1e03      	subs	r3, r0, #0
 800bba8:	d001      	beq.n	800bbae <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800bbaa:	f7f6 f8cb 	bl	8001d44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbae:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <MX_USB_DEVICE_Init+0x64>)
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f7fe fe1c 	bl	800a7ee <USBD_Start>
 800bbb6:	1e03      	subs	r3, r0, #0
 800bbb8:	d001      	beq.n	800bbbe <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
 800bbba:	f7f6 f8c3 	bl	8001d44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	200012bc 	.word	0x200012bc
 800bbc8:	200001f0 	.word	0x200001f0
 800bbcc:	20000ff8 	.word	0x20000ff8
 800bbd0:	200000dc 	.word	0x200000dc
 800bbd4:	200001e0 	.word	0x200001e0

0800bbd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbdc:	4907      	ldr	r1, [pc, #28]	; (800bbfc <CDC_Init_FS+0x24>)
 800bbde:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <CDC_Init_FS+0x28>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	f7fe fd1d 	bl	800a622 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbe8:	4a06      	ldr	r2, [pc, #24]	; (800bc04 <CDC_Init_FS+0x2c>)
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <CDC_Init_FS+0x28>)
 800bbec:	0011      	movs	r1, r2
 800bbee:	0018      	movs	r0, r3
 800bbf0:	f7fe fd33 	bl	800a65a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbf4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	200016ac 	.word	0x200016ac
 800bc00:	20000ff8 	.word	0x20000ff8
 800bc04:	200012c4 	.word	0x200012c4

0800bc08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6039      	str	r1, [r7, #0]
 800bc1c:	0011      	movs	r1, r2
 800bc1e:	1dfb      	adds	r3, r7, #7
 800bc20:	1c02      	adds	r2, r0, #0
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	1d3b      	adds	r3, r7, #4
 800bc26:	1c0a      	adds	r2, r1, #0
 800bc28:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc2a:	1dfb      	adds	r3, r7, #7
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	2b23      	cmp	r3, #35	; 0x23
 800bc30:	d804      	bhi.n	800bc3c <CDC_Control_FS+0x28>
 800bc32:	009a      	lsls	r2, r3, #2
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <CDC_Control_FS+0x34>)
 800bc36:	18d3      	adds	r3, r2, r3
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc3c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bc3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bc40:	0018      	movs	r0, r3
 800bc42:	46bd      	mov	sp, r7
 800bc44:	b002      	add	sp, #8
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	0800d7b0 	.word	0x0800d7b0

0800bc4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <CDC_Receive_FS+0x28>)
 800bc5a:	0011      	movs	r1, r2
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f7fe fcfc 	bl	800a65a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc62:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <CDC_Receive_FS+0x28>)
 800bc64:	0018      	movs	r0, r3
 800bc66:	f7fe fd43 	bl	800a6f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	b002      	add	sp, #8
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20000ff8 	.word	0x20000ff8

0800bc78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bc78:	b5b0      	push	{r4, r5, r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	000a      	movs	r2, r1
 800bc82:	1cbb      	adds	r3, r7, #2
 800bc84:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bc86:	230f      	movs	r3, #15
 800bc88:	18fb      	adds	r3, r7, r3
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc8e:	4a11      	ldr	r2, [pc, #68]	; (800bcd4 <CDC_Transmit_FS+0x5c>)
 800bc90:	23ae      	movs	r3, #174	; 0xae
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	58d3      	ldr	r3, [r2, r3]
 800bc96:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	2385      	movs	r3, #133	; 0x85
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	58d3      	ldr	r3, [r2, r3]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e010      	b.n	800bcca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bca8:	1cbb      	adds	r3, r7, #2
 800bcaa:	881a      	ldrh	r2, [r3, #0]
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <CDC_Transmit_FS+0x5c>)
 800bcb0:	0018      	movs	r0, r3
 800bcb2:	f7fe fcb6 	bl	800a622 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bcb6:	250f      	movs	r5, #15
 800bcb8:	197c      	adds	r4, r7, r5
 800bcba:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <CDC_Transmit_FS+0x5c>)
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f7fe fce0 	bl	800a682 <USBD_CDC_TransmitPacket>
 800bcc2:	0003      	movs	r3, r0
 800bcc4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bcc6:	197b      	adds	r3, r7, r5
 800bcc8:	781b      	ldrb	r3, [r3, #0]
}
 800bcca:	0018      	movs	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b004      	add	sp, #16
 800bcd0:	bdb0      	pop	{r4, r5, r7, pc}
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	20000ff8 	.word	0x20000ff8

0800bcd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	0002      	movs	r2, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	1dfb      	adds	r3, r7, #7
 800bce4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2212      	movs	r2, #18
 800bcea:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bcec:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bcee:	0018      	movs	r0, r3
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	b002      	add	sp, #8
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	46c0      	nop			; (mov r8, r8)
 800bcf8:	2000020c 	.word	0x2000020c

0800bcfc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	0002      	movs	r2, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	1dfb      	adds	r3, r7, #7
 800bd08:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b002      	add	sp, #8
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	20000220 	.word	0x20000220

0800bd20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	0002      	movs	r2, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	1dfb      	adds	r3, r7, #7
 800bd2c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bd2e:	1dfb      	adds	r3, r7, #7
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d106      	bne.n	800bd44 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	4908      	ldr	r1, [pc, #32]	; (800bd5c <USBD_FS_ProductStrDescriptor+0x3c>)
 800bd3a:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <USBD_FS_ProductStrDescriptor+0x40>)
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	f7ff fe16 	bl	800b96e <USBD_GetString>
 800bd42:	e005      	b.n	800bd50 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	4905      	ldr	r1, [pc, #20]	; (800bd5c <USBD_FS_ProductStrDescriptor+0x3c>)
 800bd48:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <USBD_FS_ProductStrDescriptor+0x40>)
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f7ff fe0f 	bl	800b96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd50:	4b02      	ldr	r3, [pc, #8]	; (800bd5c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800bd52:	0018      	movs	r0, r3
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b002      	add	sp, #8
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	20001a94 	.word	0x20001a94
 800bd60:	0800d268 	.word	0x0800d268

0800bd64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	1dfb      	adds	r3, r7, #7
 800bd70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4904      	ldr	r1, [pc, #16]	; (800bd88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7ff fdf8 	bl	800b96e <USBD_GetString>
  return USBD_StrDesc;
 800bd7e:	4b02      	ldr	r3, [pc, #8]	; (800bd88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800bd80:	0018      	movs	r0, r3
 800bd82:	46bd      	mov	sp, r7
 800bd84:	b002      	add	sp, #8
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20001a94 	.word	0x20001a94
 800bd8c:	0800d270 	.word	0x0800d270

0800bd90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	0002      	movs	r2, r0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	1dfb      	adds	r3, r7, #7
 800bd9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	221a      	movs	r2, #26
 800bda2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bda4:	f000 f84c 	bl	800be40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bda8:	4b02      	ldr	r3, [pc, #8]	; (800bdb4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800bdaa:	0018      	movs	r0, r3
 800bdac:	46bd      	mov	sp, r7
 800bdae:	b002      	add	sp, #8
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	20000224 	.word	0x20000224

0800bdb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	0002      	movs	r2, r0
 800bdc0:	6039      	str	r1, [r7, #0]
 800bdc2:	1dfb      	adds	r3, r7, #7
 800bdc4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800bdc6:	1dfb      	adds	r3, r7, #7
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d106      	bne.n	800bddc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4908      	ldr	r1, [pc, #32]	; (800bdf4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bdd2:	4b09      	ldr	r3, [pc, #36]	; (800bdf8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f7ff fdca 	bl	800b96e <USBD_GetString>
 800bdda:	e005      	b.n	800bde8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	4905      	ldr	r1, [pc, #20]	; (800bdf4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <USBD_FS_ConfigStrDescriptor+0x40>)
 800bde2:	0018      	movs	r0, r3
 800bde4:	f7ff fdc3 	bl	800b96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bde8:	4b02      	ldr	r3, [pc, #8]	; (800bdf4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800bdea:	0018      	movs	r0, r3
 800bdec:	46bd      	mov	sp, r7
 800bdee:	b002      	add	sp, #8
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	46c0      	nop			; (mov r8, r8)
 800bdf4:	20001a94 	.word	0x20001a94
 800bdf8:	0800d27c 	.word	0x0800d27c

0800bdfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	0002      	movs	r2, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	1dfb      	adds	r3, r7, #7
 800be08:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800be0a:	1dfb      	adds	r3, r7, #7
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	4908      	ldr	r1, [pc, #32]	; (800be38 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800be16:	4b09      	ldr	r3, [pc, #36]	; (800be3c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800be18:	0018      	movs	r0, r3
 800be1a:	f7ff fda8 	bl	800b96e <USBD_GetString>
 800be1e:	e005      	b.n	800be2c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be20:	683a      	ldr	r2, [r7, #0]
 800be22:	4905      	ldr	r1, [pc, #20]	; (800be38 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <USBD_FS_InterfaceStrDescriptor+0x40>)
 800be26:	0018      	movs	r0, r3
 800be28:	f7ff fda1 	bl	800b96e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800be2e:	0018      	movs	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	b002      	add	sp, #8
 800be34:	bd80      	pop	{r7, pc}
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	20001a94 	.word	0x20001a94
 800be3c:	0800d288 	.word	0x0800d288

0800be40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be46:	4b10      	ldr	r3, [pc, #64]	; (800be88 <Get_SerialNum+0x48>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <Get_SerialNum+0x4c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be52:	4b0f      	ldr	r3, [pc, #60]	; (800be90 <Get_SerialNum+0x50>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	18d3      	adds	r3, r2, r3
 800be5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00b      	beq.n	800be7e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be66:	490b      	ldr	r1, [pc, #44]	; (800be94 <Get_SerialNum+0x54>)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2208      	movs	r2, #8
 800be6c:	0018      	movs	r0, r3
 800be6e:	f000 f815 	bl	800be9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be72:	4909      	ldr	r1, [pc, #36]	; (800be98 <Get_SerialNum+0x58>)
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2204      	movs	r2, #4
 800be78:	0018      	movs	r0, r3
 800be7a:	f000 f80f 	bl	800be9c <IntToUnicode>
  }
}
 800be7e:	46c0      	nop			; (mov r8, r8)
 800be80:	46bd      	mov	sp, r7
 800be82:	b004      	add	sp, #16
 800be84:	bd80      	pop	{r7, pc}
 800be86:	46c0      	nop			; (mov r8, r8)
 800be88:	1ffff7ac 	.word	0x1ffff7ac
 800be8c:	1ffff7b0 	.word	0x1ffff7b0
 800be90:	1ffff7b4 	.word	0x1ffff7b4
 800be94:	20000226 	.word	0x20000226
 800be98:	20000236 	.word	0x20000236

0800be9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	1dfb      	adds	r3, r7, #7
 800bea8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800beaa:	2117      	movs	r1, #23
 800beac:	187b      	adds	r3, r7, r1
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800beb2:	187b      	adds	r3, r7, r1
 800beb4:	2200      	movs	r2, #0
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	e02f      	b.n	800bf1a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	0f1b      	lsrs	r3, r3, #28
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d80d      	bhi.n	800bede <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	0f1b      	lsrs	r3, r3, #28
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	2317      	movs	r3, #23
 800beca:	18fb      	adds	r3, r7, r3
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	0019      	movs	r1, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	185b      	adds	r3, r3, r1
 800bed6:	3230      	adds	r2, #48	; 0x30
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e00c      	b.n	800bef8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	0f1b      	lsrs	r3, r3, #28
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	2317      	movs	r3, #23
 800bee6:	18fb      	adds	r3, r7, r3
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	0019      	movs	r1, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	185b      	adds	r3, r3, r1
 800bef2:	3237      	adds	r2, #55	; 0x37
 800bef4:	b2d2      	uxtb	r2, r2
 800bef6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800befe:	2117      	movs	r1, #23
 800bf00:	187b      	adds	r3, r7, r1
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	3301      	adds	r3, #1
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	18d3      	adds	r3, r2, r3
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf10:	187b      	adds	r3, r7, r1
 800bf12:	781a      	ldrb	r2, [r3, #0]
 800bf14:	187b      	adds	r3, r7, r1
 800bf16:	3201      	adds	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	2317      	movs	r3, #23
 800bf1c:	18fa      	adds	r2, r7, r3
 800bf1e:	1dfb      	adds	r3, r7, #7
 800bf20:	7812      	ldrb	r2, [r2, #0]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d3c8      	bcc.n	800beba <IntToUnicode+0x1e>
  }
}
 800bf28:	46c0      	nop			; (mov r8, r8)
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	b006      	add	sp, #24
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0e      	ldr	r2, [pc, #56]	; (800bf7c <HAL_PCD_MspInit+0x48>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d115      	bne.n	800bf72 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bf46:	4b0e      	ldr	r3, [pc, #56]	; (800bf80 <HAL_PCD_MspInit+0x4c>)
 800bf48:	69da      	ldr	r2, [r3, #28]
 800bf4a:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <HAL_PCD_MspInit+0x4c>)
 800bf4c:	2180      	movs	r1, #128	; 0x80
 800bf4e:	0409      	lsls	r1, r1, #16
 800bf50:	430a      	orrs	r2, r1
 800bf52:	61da      	str	r2, [r3, #28]
 800bf54:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <HAL_PCD_MspInit+0x4c>)
 800bf56:	69da      	ldr	r2, [r3, #28]
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	041b      	lsls	r3, r3, #16
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bf62:	2200      	movs	r2, #0
 800bf64:	2100      	movs	r1, #0
 800bf66:	201f      	movs	r0, #31
 800bf68:	f7f7 fc56 	bl	8003818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bf6c:	201f      	movs	r0, #31
 800bf6e:	f7f7 fc68 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	46bd      	mov	sp, r7
 800bf76:	b004      	add	sp, #16
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	40005c00 	.word	0x40005c00
 800bf80:	40021000 	.word	0x40021000

0800bf84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	23bc      	movs	r3, #188	; 0xbc
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	58d2      	ldr	r2, [r2, r3]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	21ac      	movs	r1, #172	; 0xac
 800bf98:	0089      	lsls	r1, r1, #2
 800bf9a:	468c      	mov	ip, r1
 800bf9c:	4463      	add	r3, ip
 800bf9e:	0019      	movs	r1, r3
 800bfa0:	0010      	movs	r0, r2
 800bfa2:	f7fe fc77 	bl	800a894 <USBD_LL_SetupStage>
}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	b002      	add	sp, #8
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfae:	b590      	push	{r4, r7, lr}
 800bfb0:	b083      	sub	sp, #12
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	000a      	movs	r2, r1
 800bfb8:	1cfb      	adds	r3, r7, #3
 800bfba:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	23bc      	movs	r3, #188	; 0xbc
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	58d4      	ldr	r4, [r2, r3]
 800bfc4:	1cfb      	adds	r3, r7, #3
 800bfc6:	781a      	ldrb	r2, [r3, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	23be      	movs	r3, #190	; 0xbe
 800bfcc:	0059      	lsls	r1, r3, #1
 800bfce:	0013      	movs	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	189b      	adds	r3, r3, r2
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	18c3      	adds	r3, r0, r3
 800bfd8:	185b      	adds	r3, r3, r1
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	1cfb      	adds	r3, r7, #3
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	0019      	movs	r1, r3
 800bfe2:	0020      	movs	r0, r4
 800bfe4:	f7fe fcb4 	bl	800a950 <USBD_LL_DataOutStage>
}
 800bfe8:	46c0      	nop			; (mov r8, r8)
 800bfea:	46bd      	mov	sp, r7
 800bfec:	b003      	add	sp, #12
 800bfee:	bd90      	pop	{r4, r7, pc}

0800bff0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	000a      	movs	r2, r1
 800bffa:	1cfb      	adds	r3, r7, #3
 800bffc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	23bc      	movs	r3, #188	; 0xbc
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	58d0      	ldr	r0, [r2, r3]
 800c006:	1cfb      	adds	r3, r7, #3
 800c008:	781a      	ldrb	r2, [r3, #0]
 800c00a:	6879      	ldr	r1, [r7, #4]
 800c00c:	0013      	movs	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	189b      	adds	r3, r3, r2
 800c012:	00db      	lsls	r3, r3, #3
 800c014:	18cb      	adds	r3, r1, r3
 800c016:	333c      	adds	r3, #60	; 0x3c
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	1cfb      	adds	r3, r7, #3
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	0019      	movs	r1, r3
 800c020:	f7fe fd18 	bl	800aa54 <USBD_LL_DataInStage>
}
 800c024:	46c0      	nop			; (mov r8, r8)
 800c026:	46bd      	mov	sp, r7
 800c028:	b002      	add	sp, #8
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	23bc      	movs	r3, #188	; 0xbc
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	58d3      	ldr	r3, [r2, r3]
 800c03c:	0018      	movs	r0, r3
 800c03e:	f7fe fe4f 	bl	800ace0 <USBD_LL_SOF>
}
 800c042:	46c0      	nop			; (mov r8, r8)
 800c044:	46bd      	mov	sp, r7
 800c046:	b002      	add	sp, #8
 800c048:	bd80      	pop	{r7, pc}

0800c04a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c052:	230f      	movs	r3, #15
 800c054:	18fb      	adds	r3, r7, r3
 800c056:	2201      	movs	r2, #1
 800c058:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d001      	beq.n	800c066 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c062:	f7f5 fe6f 	bl	8001d44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	23bc      	movs	r3, #188	; 0xbc
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	58d2      	ldr	r2, [r2, r3]
 800c06e:	230f      	movs	r3, #15
 800c070:	18fb      	adds	r3, r7, r3
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	0019      	movs	r1, r3
 800c076:	0010      	movs	r0, r2
 800c078:	f7fe fdf1 	bl	800ac5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	23bc      	movs	r3, #188	; 0xbc
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	58d3      	ldr	r3, [r2, r3]
 800c084:	0018      	movs	r0, r3
 800c086:	f7fe fda2 	bl	800abce <USBD_LL_Reset>
}
 800c08a:	46c0      	nop			; (mov r8, r8)
 800c08c:	46bd      	mov	sp, r7
 800c08e:	b004      	add	sp, #16
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	23bc      	movs	r3, #188	; 0xbc
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	58d3      	ldr	r3, [r2, r3]
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7fe fdeb 	bl	800ac80 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <HAL_PCD_SuspendCallback+0x34>)
 800c0b4:	691a      	ldr	r2, [r3, #16]
 800c0b6:	4b04      	ldr	r3, [pc, #16]	; (800c0c8 <HAL_PCD_SuspendCallback+0x34>)
 800c0b8:	2106      	movs	r1, #6
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c0be:	46c0      	nop			; (mov r8, r8)
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	b002      	add	sp, #8
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	e000ed00 	.word	0xe000ed00

0800c0cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0dc:	4b09      	ldr	r3, [pc, #36]	; (800c104 <HAL_PCD_ResumeCallback+0x38>)
 800c0de:	691a      	ldr	r2, [r3, #16]
 800c0e0:	4b08      	ldr	r3, [pc, #32]	; (800c104 <HAL_PCD_ResumeCallback+0x38>)
 800c0e2:	2106      	movs	r1, #6
 800c0e4:	438a      	bics	r2, r1
 800c0e6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c0e8:	f000 fa44 	bl	800c574 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	23bc      	movs	r3, #188	; 0xbc
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	58d3      	ldr	r3, [r2, r3]
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f7fe fddb 	bl	800acb0 <USBD_LL_Resume>
}
 800c0fa:	46c0      	nop			; (mov r8, r8)
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	b002      	add	sp, #8
 800c100:	bd80      	pop	{r7, pc}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	e000ed00 	.word	0xe000ed00

0800c108 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c110:	4a2d      	ldr	r2, [pc, #180]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c112:	23bc      	movs	r3, #188	; 0xbc
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	23b0      	movs	r3, #176	; 0xb0
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4929      	ldr	r1, [pc, #164]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c122:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c124:	4b28      	ldr	r3, [pc, #160]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c126:	4a29      	ldr	r2, [pc, #164]	; (800c1cc <USBD_LL_Init+0xc4>)
 800c128:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c12a:	4b27      	ldr	r3, [pc, #156]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c12c:	2208      	movs	r2, #8
 800c12e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c130:	4b25      	ldr	r3, [pc, #148]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c132:	2202      	movs	r2, #2
 800c134:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c136:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c138:	2202      	movs	r2, #2
 800c13a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c13c:	4b22      	ldr	r3, [pc, #136]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c13e:	2200      	movs	r2, #0
 800c140:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c142:	4b21      	ldr	r3, [pc, #132]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c144:	2200      	movs	r2, #0
 800c146:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c148:	4b1f      	ldr	r3, [pc, #124]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c14e:	4b1e      	ldr	r3, [pc, #120]	; (800c1c8 <USBD_LL_Init+0xc0>)
 800c150:	0018      	movs	r0, r3
 800c152:	f7f7 fd9f 	bl	8003c94 <HAL_PCD_Init>
 800c156:	1e03      	subs	r3, r0, #0
 800c158:	d001      	beq.n	800c15e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c15a:	f7f5 fdf3 	bl	8001d44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	23b0      	movs	r3, #176	; 0xb0
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	58d0      	ldr	r0, [r2, r3]
 800c166:	2318      	movs	r3, #24
 800c168:	2200      	movs	r2, #0
 800c16a:	2100      	movs	r1, #0
 800c16c:	f7f9 f826 	bl	80051bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	23b0      	movs	r3, #176	; 0xb0
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	58d0      	ldr	r0, [r2, r3]
 800c178:	2358      	movs	r3, #88	; 0x58
 800c17a:	2200      	movs	r2, #0
 800c17c:	2180      	movs	r1, #128	; 0x80
 800c17e:	f7f9 f81d 	bl	80051bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	23b0      	movs	r3, #176	; 0xb0
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	58d0      	ldr	r0, [r2, r3]
 800c18a:	23c0      	movs	r3, #192	; 0xc0
 800c18c:	2200      	movs	r2, #0
 800c18e:	2181      	movs	r1, #129	; 0x81
 800c190:	f7f9 f814 	bl	80051bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	23b0      	movs	r3, #176	; 0xb0
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	58d0      	ldr	r0, [r2, r3]
 800c19c:	2388      	movs	r3, #136	; 0x88
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	f7f9 f80a 	bl	80051bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	23b0      	movs	r3, #176	; 0xb0
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	58d0      	ldr	r0, [r2, r3]
 800c1b0:	2380      	movs	r3, #128	; 0x80
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2182      	movs	r1, #130	; 0x82
 800c1b8:	f7f9 f800 	bl	80051bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	0018      	movs	r0, r3
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b002      	add	sp, #8
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	46c0      	nop			; (mov r8, r8)
 800c1c8:	20001c94 	.word	0x20001c94
 800c1cc:	40005c00 	.word	0x40005c00

0800c1d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d8:	210f      	movs	r1, #15
 800c1da:	187b      	adds	r3, r7, r1
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e0:	260e      	movs	r6, #14
 800c1e2:	19bb      	adds	r3, r7, r6
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	23b0      	movs	r3, #176	; 0xb0
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	58d3      	ldr	r3, [r2, r3]
 800c1f0:	000d      	movs	r5, r1
 800c1f2:	187c      	adds	r4, r7, r1
 800c1f4:	0018      	movs	r0, r3
 800c1f6:	f7f7 fe5d 	bl	8003eb4 <HAL_PCD_Start>
 800c1fa:	0003      	movs	r3, r0
 800c1fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1fe:	19bc      	adds	r4, r7, r6
 800c200:	197b      	adds	r3, r7, r5
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	0018      	movs	r0, r3
 800c206:	f000 f9bc 	bl	800c582 <USBD_Get_USB_Status>
 800c20a:	0003      	movs	r3, r0
 800c20c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c20e:	19bb      	adds	r3, r7, r6
 800c210:	781b      	ldrb	r3, [r3, #0]
}
 800c212:	0018      	movs	r0, r3
 800c214:	46bd      	mov	sp, r7
 800c216:	b005      	add	sp, #20
 800c218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c21a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	000c      	movs	r4, r1
 800c224:	0010      	movs	r0, r2
 800c226:	0019      	movs	r1, r3
 800c228:	1cfb      	adds	r3, r7, #3
 800c22a:	1c22      	adds	r2, r4, #0
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	1cbb      	adds	r3, r7, #2
 800c230:	1c02      	adds	r2, r0, #0
 800c232:	701a      	strb	r2, [r3, #0]
 800c234:	003b      	movs	r3, r7
 800c236:	1c0a      	adds	r2, r1, #0
 800c238:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c23a:	260f      	movs	r6, #15
 800c23c:	19bb      	adds	r3, r7, r6
 800c23e:	2200      	movs	r2, #0
 800c240:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c242:	250e      	movs	r5, #14
 800c244:	197b      	adds	r3, r7, r5
 800c246:	2200      	movs	r2, #0
 800c248:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	23b0      	movs	r3, #176	; 0xb0
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	58d0      	ldr	r0, [r2, r3]
 800c252:	19bc      	adds	r4, r7, r6
 800c254:	1cbb      	adds	r3, r7, #2
 800c256:	781d      	ldrb	r5, [r3, #0]
 800c258:	003b      	movs	r3, r7
 800c25a:	881a      	ldrh	r2, [r3, #0]
 800c25c:	1cfb      	adds	r3, r7, #3
 800c25e:	7819      	ldrb	r1, [r3, #0]
 800c260:	002b      	movs	r3, r5
 800c262:	f7f7 fe77 	bl	8003f54 <HAL_PCD_EP_Open>
 800c266:	0003      	movs	r3, r0
 800c268:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c26a:	250e      	movs	r5, #14
 800c26c:	197c      	adds	r4, r7, r5
 800c26e:	19bb      	adds	r3, r7, r6
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	0018      	movs	r0, r3
 800c274:	f000 f985 	bl	800c582 <USBD_Get_USB_Status>
 800c278:	0003      	movs	r3, r0
 800c27a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c27c:	197b      	adds	r3, r7, r5
 800c27e:	781b      	ldrb	r3, [r3, #0]
}
 800c280:	0018      	movs	r0, r3
 800c282:	46bd      	mov	sp, r7
 800c284:	b005      	add	sp, #20
 800c286:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c288 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	000a      	movs	r2, r1
 800c292:	1cfb      	adds	r3, r7, #3
 800c294:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c296:	210f      	movs	r1, #15
 800c298:	187b      	adds	r3, r7, r1
 800c29a:	2200      	movs	r2, #0
 800c29c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29e:	260e      	movs	r6, #14
 800c2a0:	19bb      	adds	r3, r7, r6
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	23b0      	movs	r3, #176	; 0xb0
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	58d2      	ldr	r2, [r2, r3]
 800c2ae:	000d      	movs	r5, r1
 800c2b0:	187c      	adds	r4, r7, r1
 800c2b2:	1cfb      	adds	r3, r7, #3
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	0019      	movs	r1, r3
 800c2b8:	0010      	movs	r0, r2
 800c2ba:	f7f7 fec3 	bl	8004044 <HAL_PCD_EP_Close>
 800c2be:	0003      	movs	r3, r0
 800c2c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c2:	19bc      	adds	r4, r7, r6
 800c2c4:	197b      	adds	r3, r7, r5
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f000 f95a 	bl	800c582 <USBD_Get_USB_Status>
 800c2ce:	0003      	movs	r3, r0
 800c2d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c2d2:	19bb      	adds	r3, r7, r6
 800c2d4:	781b      	ldrb	r3, [r3, #0]
}
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	b005      	add	sp, #20
 800c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2e0:	b085      	sub	sp, #20
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	000a      	movs	r2, r1
 800c2e8:	1cfb      	adds	r3, r7, #3
 800c2ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ec:	210f      	movs	r1, #15
 800c2ee:	187b      	adds	r3, r7, r1
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2f4:	260e      	movs	r6, #14
 800c2f6:	19bb      	adds	r3, r7, r6
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	23b0      	movs	r3, #176	; 0xb0
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	58d2      	ldr	r2, [r2, r3]
 800c304:	000d      	movs	r5, r1
 800c306:	187c      	adds	r4, r7, r1
 800c308:	1cfb      	adds	r3, r7, #3
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	0019      	movs	r1, r3
 800c30e:	0010      	movs	r0, r2
 800c310:	f7f7 ff8f 	bl	8004232 <HAL_PCD_EP_SetStall>
 800c314:	0003      	movs	r3, r0
 800c316:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c318:	19bc      	adds	r4, r7, r6
 800c31a:	197b      	adds	r3, r7, r5
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	0018      	movs	r0, r3
 800c320:	f000 f92f 	bl	800c582 <USBD_Get_USB_Status>
 800c324:	0003      	movs	r3, r0
 800c326:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c328:	19bb      	adds	r3, r7, r6
 800c32a:	781b      	ldrb	r3, [r3, #0]
}
 800c32c:	0018      	movs	r0, r3
 800c32e:	46bd      	mov	sp, r7
 800c330:	b005      	add	sp, #20
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c334 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	000a      	movs	r2, r1
 800c33e:	1cfb      	adds	r3, r7, #3
 800c340:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c342:	210f      	movs	r1, #15
 800c344:	187b      	adds	r3, r7, r1
 800c346:	2200      	movs	r2, #0
 800c348:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34a:	260e      	movs	r6, #14
 800c34c:	19bb      	adds	r3, r7, r6
 800c34e:	2200      	movs	r2, #0
 800c350:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	23b0      	movs	r3, #176	; 0xb0
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	58d2      	ldr	r2, [r2, r3]
 800c35a:	000d      	movs	r5, r1
 800c35c:	187c      	adds	r4, r7, r1
 800c35e:	1cfb      	adds	r3, r7, #3
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	0019      	movs	r1, r3
 800c364:	0010      	movs	r0, r2
 800c366:	f7f7 ffc0 	bl	80042ea <HAL_PCD_EP_ClrStall>
 800c36a:	0003      	movs	r3, r0
 800c36c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c36e:	19bc      	adds	r4, r7, r6
 800c370:	197b      	adds	r3, r7, r5
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	0018      	movs	r0, r3
 800c376:	f000 f904 	bl	800c582 <USBD_Get_USB_Status>
 800c37a:	0003      	movs	r3, r0
 800c37c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c37e:	19bb      	adds	r3, r7, r6
 800c380:	781b      	ldrb	r3, [r3, #0]
}
 800c382:	0018      	movs	r0, r3
 800c384:	46bd      	mov	sp, r7
 800c386:	b005      	add	sp, #20
 800c388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c38a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	000a      	movs	r2, r1
 800c394:	1cfb      	adds	r3, r7, #3
 800c396:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	23b0      	movs	r3, #176	; 0xb0
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	58d3      	ldr	r3, [r2, r3]
 800c3a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3a2:	1cfb      	adds	r3, r7, #3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da0d      	bge.n	800c3c8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3ac:	1cfb      	adds	r3, r7, #3
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	227f      	movs	r2, #127	; 0x7f
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	68f9      	ldr	r1, [r7, #12]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	0013      	movs	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	189b      	adds	r3, r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	18cb      	adds	r3, r1, r3
 800c3c2:	3302      	adds	r3, #2
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	e00d      	b.n	800c3e4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3c8:	1cfb      	adds	r3, r7, #3
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	227f      	movs	r2, #127	; 0x7f
 800c3ce:	401a      	ands	r2, r3
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	23b5      	movs	r3, #181	; 0xb5
 800c3d4:	0059      	lsls	r1, r3, #1
 800c3d6:	0013      	movs	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	189b      	adds	r3, r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	18c3      	adds	r3, r0, r3
 800c3e0:	185b      	adds	r3, r3, r1
 800c3e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b004      	add	sp, #16
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	000a      	movs	r2, r1
 800c3f6:	1cfb      	adds	r3, r7, #3
 800c3f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fa:	210f      	movs	r1, #15
 800c3fc:	187b      	adds	r3, r7, r1
 800c3fe:	2200      	movs	r2, #0
 800c400:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c402:	260e      	movs	r6, #14
 800c404:	19bb      	adds	r3, r7, r6
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	23b0      	movs	r3, #176	; 0xb0
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	58d2      	ldr	r2, [r2, r3]
 800c412:	000d      	movs	r5, r1
 800c414:	187c      	adds	r4, r7, r1
 800c416:	1cfb      	adds	r3, r7, #3
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	0019      	movs	r1, r3
 800c41c:	0010      	movs	r0, r2
 800c41e:	f7f7 fd6e 	bl	8003efe <HAL_PCD_SetAddress>
 800c422:	0003      	movs	r3, r0
 800c424:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c426:	19bc      	adds	r4, r7, r6
 800c428:	197b      	adds	r3, r7, r5
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	0018      	movs	r0, r3
 800c42e:	f000 f8a8 	bl	800c582 <USBD_Get_USB_Status>
 800c432:	0003      	movs	r3, r0
 800c434:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c436:	19bb      	adds	r3, r7, r6
 800c438:	781b      	ldrb	r3, [r3, #0]
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b005      	add	sp, #20
 800c440:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c442 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c442:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c444:	b087      	sub	sp, #28
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	0008      	movs	r0, r1
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	0019      	movs	r1, r3
 800c450:	230b      	movs	r3, #11
 800c452:	18fb      	adds	r3, r7, r3
 800c454:	1c02      	adds	r2, r0, #0
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	2408      	movs	r4, #8
 800c45a:	193b      	adds	r3, r7, r4
 800c45c:	1c0a      	adds	r2, r1, #0
 800c45e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c460:	2117      	movs	r1, #23
 800c462:	187b      	adds	r3, r7, r1
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c468:	2516      	movs	r5, #22
 800c46a:	197b      	adds	r3, r7, r5
 800c46c:	2200      	movs	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	23b0      	movs	r3, #176	; 0xb0
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	58d0      	ldr	r0, [r2, r3]
 800c478:	193b      	adds	r3, r7, r4
 800c47a:	881d      	ldrh	r5, [r3, #0]
 800c47c:	000e      	movs	r6, r1
 800c47e:	187c      	adds	r4, r7, r1
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	230b      	movs	r3, #11
 800c484:	18fb      	adds	r3, r7, r3
 800c486:	7819      	ldrb	r1, [r3, #0]
 800c488:	002b      	movs	r3, r5
 800c48a:	f7f7 fe89 	bl	80041a0 <HAL_PCD_EP_Transmit>
 800c48e:	0003      	movs	r3, r0
 800c490:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c492:	2516      	movs	r5, #22
 800c494:	197c      	adds	r4, r7, r5
 800c496:	19bb      	adds	r3, r7, r6
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	0018      	movs	r0, r3
 800c49c:	f000 f871 	bl	800c582 <USBD_Get_USB_Status>
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c4a4:	197b      	adds	r3, r7, r5
 800c4a6:	781b      	ldrb	r3, [r3, #0]
}
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	b007      	add	sp, #28
 800c4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	0008      	movs	r0, r1
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	0019      	movs	r1, r3
 800c4be:	230b      	movs	r3, #11
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	1c02      	adds	r2, r0, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	2408      	movs	r4, #8
 800c4c8:	193b      	adds	r3, r7, r4
 800c4ca:	1c0a      	adds	r2, r1, #0
 800c4cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ce:	2117      	movs	r1, #23
 800c4d0:	187b      	adds	r3, r7, r1
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d6:	2516      	movs	r5, #22
 800c4d8:	197b      	adds	r3, r7, r5
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	23b0      	movs	r3, #176	; 0xb0
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	58d0      	ldr	r0, [r2, r3]
 800c4e6:	193b      	adds	r3, r7, r4
 800c4e8:	881d      	ldrh	r5, [r3, #0]
 800c4ea:	000e      	movs	r6, r1
 800c4ec:	187c      	adds	r4, r7, r1
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	230b      	movs	r3, #11
 800c4f2:	18fb      	adds	r3, r7, r3
 800c4f4:	7819      	ldrb	r1, [r3, #0]
 800c4f6:	002b      	movs	r3, r5
 800c4f8:	f7f7 fdf5 	bl	80040e6 <HAL_PCD_EP_Receive>
 800c4fc:	0003      	movs	r3, r0
 800c4fe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c500:	2516      	movs	r5, #22
 800c502:	197c      	adds	r4, r7, r5
 800c504:	19bb      	adds	r3, r7, r6
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	0018      	movs	r0, r3
 800c50a:	f000 f83a 	bl	800c582 <USBD_Get_USB_Status>
 800c50e:	0003      	movs	r3, r0
 800c510:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c512:	197b      	adds	r3, r7, r5
 800c514:	781b      	ldrb	r3, [r3, #0]
}
 800c516:	0018      	movs	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	b007      	add	sp, #28
 800c51c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c51e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	000a      	movs	r2, r1
 800c528:	1cfb      	adds	r3, r7, #3
 800c52a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	23b0      	movs	r3, #176	; 0xb0
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	58d2      	ldr	r2, [r2, r3]
 800c534:	1cfb      	adds	r3, r7, #3
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	0019      	movs	r1, r3
 800c53a:	0010      	movs	r0, r2
 800c53c:	f7f7 fe17 	bl	800416e <HAL_PCD_EP_GetRxCount>
 800c540:	0003      	movs	r3, r0
}
 800c542:	0018      	movs	r0, r3
 800c544:	46bd      	mov	sp, r7
 800c546:	b002      	add	sp, #8
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c554:	4b02      	ldr	r3, [pc, #8]	; (800c560 <USBD_static_malloc+0x14>)
}
 800c556:	0018      	movs	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	b002      	add	sp, #8
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	46c0      	nop			; (mov r8, r8)
 800c560:	200009f4 	.word	0x200009f4

0800c564 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]

}
 800c56c:	46c0      	nop			; (mov r8, r8)
 800c56e:	46bd      	mov	sp, r7
 800c570:	b002      	add	sp, #8
 800c572:	bd80      	pop	{r7, pc}

0800c574 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c578:	f7f5 fad8 	bl	8001b2c <SystemClock_Config>
}
 800c57c:	46c0      	nop			; (mov r8, r8)
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	0002      	movs	r2, r0
 800c58a:	1dfb      	adds	r3, r7, #7
 800c58c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58e:	230f      	movs	r3, #15
 800c590:	18fb      	adds	r3, r7, r3
 800c592:	2200      	movs	r2, #0
 800c594:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c596:	1dfb      	adds	r3, r7, #7
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d017      	beq.n	800c5ce <USBD_Get_USB_Status+0x4c>
 800c59e:	dc1b      	bgt.n	800c5d8 <USBD_Get_USB_Status+0x56>
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d00f      	beq.n	800c5c4 <USBD_Get_USB_Status+0x42>
 800c5a4:	dc18      	bgt.n	800c5d8 <USBD_Get_USB_Status+0x56>
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <USBD_Get_USB_Status+0x2e>
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d005      	beq.n	800c5ba <USBD_Get_USB_Status+0x38>
 800c5ae:	e013      	b.n	800c5d8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5b0:	230f      	movs	r3, #15
 800c5b2:	18fb      	adds	r3, r7, r3
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	701a      	strb	r2, [r3, #0]
    break;
 800c5b8:	e013      	b.n	800c5e2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ba:	230f      	movs	r3, #15
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	2202      	movs	r2, #2
 800c5c0:	701a      	strb	r2, [r3, #0]
    break;
 800c5c2:	e00e      	b.n	800c5e2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5c4:	230f      	movs	r3, #15
 800c5c6:	18fb      	adds	r3, r7, r3
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	701a      	strb	r2, [r3, #0]
    break;
 800c5cc:	e009      	b.n	800c5e2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ce:	230f      	movs	r3, #15
 800c5d0:	18fb      	adds	r3, r7, r3
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	701a      	strb	r2, [r3, #0]
    break;
 800c5d6:	e004      	b.n	800c5e2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c5d8:	230f      	movs	r3, #15
 800c5da:	18fb      	adds	r3, r7, r3
 800c5dc:	2202      	movs	r2, #2
 800c5de:	701a      	strb	r2, [r3, #0]
    break;
 800c5e0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c5e2:	230f      	movs	r3, #15
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	781b      	ldrb	r3, [r3, #0]
}
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	b004      	add	sp, #16
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <atol>:
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	220a      	movs	r2, #10
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	f000 f8e1 	bl	800c7bc <strtol>
 800c5fa:	bd10      	pop	{r4, pc}

0800c5fc <__errno>:
 800c5fc:	4b01      	ldr	r3, [pc, #4]	; (800c604 <__errno+0x8>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	4770      	bx	lr
 800c602:	46c0      	nop			; (mov r8, r8)
 800c604:	20000240 	.word	0x20000240

0800c608 <__libc_init_array>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	2600      	movs	r6, #0
 800c60c:	4d0c      	ldr	r5, [pc, #48]	; (800c640 <__libc_init_array+0x38>)
 800c60e:	4c0d      	ldr	r4, [pc, #52]	; (800c644 <__libc_init_array+0x3c>)
 800c610:	1b64      	subs	r4, r4, r5
 800c612:	10a4      	asrs	r4, r4, #2
 800c614:	42a6      	cmp	r6, r4
 800c616:	d109      	bne.n	800c62c <__libc_init_array+0x24>
 800c618:	2600      	movs	r6, #0
 800c61a:	f000 fce1 	bl	800cfe0 <_init>
 800c61e:	4d0a      	ldr	r5, [pc, #40]	; (800c648 <__libc_init_array+0x40>)
 800c620:	4c0a      	ldr	r4, [pc, #40]	; (800c64c <__libc_init_array+0x44>)
 800c622:	1b64      	subs	r4, r4, r5
 800c624:	10a4      	asrs	r4, r4, #2
 800c626:	42a6      	cmp	r6, r4
 800c628:	d105      	bne.n	800c636 <__libc_init_array+0x2e>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	00b3      	lsls	r3, r6, #2
 800c62e:	58eb      	ldr	r3, [r5, r3]
 800c630:	4798      	blx	r3
 800c632:	3601      	adds	r6, #1
 800c634:	e7ee      	b.n	800c614 <__libc_init_array+0xc>
 800c636:	00b3      	lsls	r3, r6, #2
 800c638:	58eb      	ldr	r3, [r5, r3]
 800c63a:	4798      	blx	r3
 800c63c:	3601      	adds	r6, #1
 800c63e:	e7f2      	b.n	800c626 <__libc_init_array+0x1e>
 800c640:	0800d974 	.word	0x0800d974
 800c644:	0800d974 	.word	0x0800d974
 800c648:	0800d974 	.word	0x0800d974
 800c64c:	0800d978 	.word	0x0800d978

0800c650 <memset>:
 800c650:	0003      	movs	r3, r0
 800c652:	1882      	adds	r2, r0, r2
 800c654:	4293      	cmp	r3, r2
 800c656:	d100      	bne.n	800c65a <memset+0xa>
 800c658:	4770      	bx	lr
 800c65a:	7019      	strb	r1, [r3, #0]
 800c65c:	3301      	adds	r3, #1
 800c65e:	e7f9      	b.n	800c654 <memset+0x4>

0800c660 <siprintf>:
 800c660:	b40e      	push	{r1, r2, r3}
 800c662:	b500      	push	{lr}
 800c664:	490b      	ldr	r1, [pc, #44]	; (800c694 <siprintf+0x34>)
 800c666:	b09c      	sub	sp, #112	; 0x70
 800c668:	ab1d      	add	r3, sp, #116	; 0x74
 800c66a:	9002      	str	r0, [sp, #8]
 800c66c:	9006      	str	r0, [sp, #24]
 800c66e:	9107      	str	r1, [sp, #28]
 800c670:	9104      	str	r1, [sp, #16]
 800c672:	4809      	ldr	r0, [pc, #36]	; (800c698 <siprintf+0x38>)
 800c674:	4909      	ldr	r1, [pc, #36]	; (800c69c <siprintf+0x3c>)
 800c676:	cb04      	ldmia	r3!, {r2}
 800c678:	9105      	str	r1, [sp, #20]
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	a902      	add	r1, sp, #8
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	f000 f90a 	bl	800c898 <_svfiprintf_r>
 800c684:	2300      	movs	r3, #0
 800c686:	9a02      	ldr	r2, [sp, #8]
 800c688:	7013      	strb	r3, [r2, #0]
 800c68a:	b01c      	add	sp, #112	; 0x70
 800c68c:	bc08      	pop	{r3}
 800c68e:	b003      	add	sp, #12
 800c690:	4718      	bx	r3
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	7fffffff 	.word	0x7fffffff
 800c698:	20000240 	.word	0x20000240
 800c69c:	ffff0208 	.word	0xffff0208

0800c6a0 <_strtol_l.isra.0>:
 800c6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	001e      	movs	r6, r3
 800c6a6:	9005      	str	r0, [sp, #20]
 800c6a8:	9101      	str	r1, [sp, #4]
 800c6aa:	9202      	str	r2, [sp, #8]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d045      	beq.n	800c73c <_strtol_l.isra.0+0x9c>
 800c6b0:	0008      	movs	r0, r1
 800c6b2:	2b24      	cmp	r3, #36	; 0x24
 800c6b4:	d842      	bhi.n	800c73c <_strtol_l.isra.0+0x9c>
 800c6b6:	4b3f      	ldr	r3, [pc, #252]	; (800c7b4 <_strtol_l.isra.0+0x114>)
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	469c      	mov	ip, r3
 800c6bc:	0003      	movs	r3, r0
 800c6be:	4661      	mov	r1, ip
 800c6c0:	781c      	ldrb	r4, [r3, #0]
 800c6c2:	1c45      	adds	r5, r0, #1
 800c6c4:	5d09      	ldrb	r1, [r1, r4]
 800c6c6:	0028      	movs	r0, r5
 800c6c8:	000f      	movs	r7, r1
 800c6ca:	4017      	ands	r7, r2
 800c6cc:	4211      	tst	r1, r2
 800c6ce:	d1f5      	bne.n	800c6bc <_strtol_l.isra.0+0x1c>
 800c6d0:	2c2d      	cmp	r4, #45	; 0x2d
 800c6d2:	d13a      	bne.n	800c74a <_strtol_l.isra.0+0xaa>
 800c6d4:	2701      	movs	r7, #1
 800c6d6:	782c      	ldrb	r4, [r5, #0]
 800c6d8:	1c9d      	adds	r5, r3, #2
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	d065      	beq.n	800c7aa <_strtol_l.isra.0+0x10a>
 800c6de:	2e10      	cmp	r6, #16
 800c6e0:	d109      	bne.n	800c6f6 <_strtol_l.isra.0+0x56>
 800c6e2:	2c30      	cmp	r4, #48	; 0x30
 800c6e4:	d107      	bne.n	800c6f6 <_strtol_l.isra.0+0x56>
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	782b      	ldrb	r3, [r5, #0]
 800c6ea:	4393      	bics	r3, r2
 800c6ec:	2b58      	cmp	r3, #88	; 0x58
 800c6ee:	d157      	bne.n	800c7a0 <_strtol_l.isra.0+0x100>
 800c6f0:	2610      	movs	r6, #16
 800c6f2:	786c      	ldrb	r4, [r5, #1]
 800c6f4:	3502      	adds	r5, #2
 800c6f6:	4b30      	ldr	r3, [pc, #192]	; (800c7b8 <_strtol_l.isra.0+0x118>)
 800c6f8:	0031      	movs	r1, r6
 800c6fa:	18fb      	adds	r3, r7, r3
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	9303      	str	r3, [sp, #12]
 800c700:	f7f3 fd9a 	bl	8000238 <__aeabi_uidivmod>
 800c704:	2300      	movs	r3, #0
 800c706:	2201      	movs	r2, #1
 800c708:	4684      	mov	ip, r0
 800c70a:	0018      	movs	r0, r3
 800c70c:	9104      	str	r1, [sp, #16]
 800c70e:	4252      	negs	r2, r2
 800c710:	0021      	movs	r1, r4
 800c712:	3930      	subs	r1, #48	; 0x30
 800c714:	2909      	cmp	r1, #9
 800c716:	d81d      	bhi.n	800c754 <_strtol_l.isra.0+0xb4>
 800c718:	000c      	movs	r4, r1
 800c71a:	42a6      	cmp	r6, r4
 800c71c:	dd28      	ble.n	800c770 <_strtol_l.isra.0+0xd0>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	db24      	blt.n	800c76c <_strtol_l.isra.0+0xcc>
 800c722:	0013      	movs	r3, r2
 800c724:	4584      	cmp	ip, r0
 800c726:	d306      	bcc.n	800c736 <_strtol_l.isra.0+0x96>
 800c728:	d102      	bne.n	800c730 <_strtol_l.isra.0+0x90>
 800c72a:	9904      	ldr	r1, [sp, #16]
 800c72c:	42a1      	cmp	r1, r4
 800c72e:	db02      	blt.n	800c736 <_strtol_l.isra.0+0x96>
 800c730:	2301      	movs	r3, #1
 800c732:	4370      	muls	r0, r6
 800c734:	1820      	adds	r0, r4, r0
 800c736:	782c      	ldrb	r4, [r5, #0]
 800c738:	3501      	adds	r5, #1
 800c73a:	e7e9      	b.n	800c710 <_strtol_l.isra.0+0x70>
 800c73c:	f7ff ff5e 	bl	800c5fc <__errno>
 800c740:	2316      	movs	r3, #22
 800c742:	6003      	str	r3, [r0, #0]
 800c744:	2000      	movs	r0, #0
 800c746:	b007      	add	sp, #28
 800c748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c74a:	2c2b      	cmp	r4, #43	; 0x2b
 800c74c:	d1c5      	bne.n	800c6da <_strtol_l.isra.0+0x3a>
 800c74e:	782c      	ldrb	r4, [r5, #0]
 800c750:	1c9d      	adds	r5, r3, #2
 800c752:	e7c2      	b.n	800c6da <_strtol_l.isra.0+0x3a>
 800c754:	0021      	movs	r1, r4
 800c756:	3941      	subs	r1, #65	; 0x41
 800c758:	2919      	cmp	r1, #25
 800c75a:	d801      	bhi.n	800c760 <_strtol_l.isra.0+0xc0>
 800c75c:	3c37      	subs	r4, #55	; 0x37
 800c75e:	e7dc      	b.n	800c71a <_strtol_l.isra.0+0x7a>
 800c760:	0021      	movs	r1, r4
 800c762:	3961      	subs	r1, #97	; 0x61
 800c764:	2919      	cmp	r1, #25
 800c766:	d803      	bhi.n	800c770 <_strtol_l.isra.0+0xd0>
 800c768:	3c57      	subs	r4, #87	; 0x57
 800c76a:	e7d6      	b.n	800c71a <_strtol_l.isra.0+0x7a>
 800c76c:	0013      	movs	r3, r2
 800c76e:	e7e2      	b.n	800c736 <_strtol_l.isra.0+0x96>
 800c770:	2b00      	cmp	r3, #0
 800c772:	da09      	bge.n	800c788 <_strtol_l.isra.0+0xe8>
 800c774:	2322      	movs	r3, #34	; 0x22
 800c776:	9a05      	ldr	r2, [sp, #20]
 800c778:	9803      	ldr	r0, [sp, #12]
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	9b02      	ldr	r3, [sp, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d0e1      	beq.n	800c746 <_strtol_l.isra.0+0xa6>
 800c782:	1e6b      	subs	r3, r5, #1
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	e007      	b.n	800c798 <_strtol_l.isra.0+0xf8>
 800c788:	2f00      	cmp	r7, #0
 800c78a:	d000      	beq.n	800c78e <_strtol_l.isra.0+0xee>
 800c78c:	4240      	negs	r0, r0
 800c78e:	9a02      	ldr	r2, [sp, #8]
 800c790:	2a00      	cmp	r2, #0
 800c792:	d0d8      	beq.n	800c746 <_strtol_l.isra.0+0xa6>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1f4      	bne.n	800c782 <_strtol_l.isra.0+0xe2>
 800c798:	9b02      	ldr	r3, [sp, #8]
 800c79a:	9a01      	ldr	r2, [sp, #4]
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e7d2      	b.n	800c746 <_strtol_l.isra.0+0xa6>
 800c7a0:	2430      	movs	r4, #48	; 0x30
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	d1a7      	bne.n	800c6f6 <_strtol_l.isra.0+0x56>
 800c7a6:	3608      	adds	r6, #8
 800c7a8:	e7a5      	b.n	800c6f6 <_strtol_l.isra.0+0x56>
 800c7aa:	2c30      	cmp	r4, #48	; 0x30
 800c7ac:	d09b      	beq.n	800c6e6 <_strtol_l.isra.0+0x46>
 800c7ae:	260a      	movs	r6, #10
 800c7b0:	e7a1      	b.n	800c6f6 <_strtol_l.isra.0+0x56>
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	0800d841 	.word	0x0800d841
 800c7b8:	7fffffff 	.word	0x7fffffff

0800c7bc <strtol>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	0013      	movs	r3, r2
 800c7c0:	000a      	movs	r2, r1
 800c7c2:	0001      	movs	r1, r0
 800c7c4:	4802      	ldr	r0, [pc, #8]	; (800c7d0 <strtol+0x14>)
 800c7c6:	6800      	ldr	r0, [r0, #0]
 800c7c8:	f7ff ff6a 	bl	800c6a0 <_strtol_l.isra.0>
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	46c0      	nop			; (mov r8, r8)
 800c7d0:	20000240 	.word	0x20000240

0800c7d4 <__ssputs_r>:
 800c7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d6:	688e      	ldr	r6, [r1, #8]
 800c7d8:	b085      	sub	sp, #20
 800c7da:	0007      	movs	r7, r0
 800c7dc:	000c      	movs	r4, r1
 800c7de:	9203      	str	r2, [sp, #12]
 800c7e0:	9301      	str	r3, [sp, #4]
 800c7e2:	429e      	cmp	r6, r3
 800c7e4:	d83c      	bhi.n	800c860 <__ssputs_r+0x8c>
 800c7e6:	2390      	movs	r3, #144	; 0x90
 800c7e8:	898a      	ldrh	r2, [r1, #12]
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	421a      	tst	r2, r3
 800c7ee:	d034      	beq.n	800c85a <__ssputs_r+0x86>
 800c7f0:	2503      	movs	r5, #3
 800c7f2:	6909      	ldr	r1, [r1, #16]
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	1a5b      	subs	r3, r3, r1
 800c7f8:	9302      	str	r3, [sp, #8]
 800c7fa:	6963      	ldr	r3, [r4, #20]
 800c7fc:	9802      	ldr	r0, [sp, #8]
 800c7fe:	435d      	muls	r5, r3
 800c800:	0feb      	lsrs	r3, r5, #31
 800c802:	195d      	adds	r5, r3, r5
 800c804:	9b01      	ldr	r3, [sp, #4]
 800c806:	106d      	asrs	r5, r5, #1
 800c808:	3301      	adds	r3, #1
 800c80a:	181b      	adds	r3, r3, r0
 800c80c:	42ab      	cmp	r3, r5
 800c80e:	d900      	bls.n	800c812 <__ssputs_r+0x3e>
 800c810:	001d      	movs	r5, r3
 800c812:	0553      	lsls	r3, r2, #21
 800c814:	d532      	bpl.n	800c87c <__ssputs_r+0xa8>
 800c816:	0029      	movs	r1, r5
 800c818:	0038      	movs	r0, r7
 800c81a:	f000 fb31 	bl	800ce80 <_malloc_r>
 800c81e:	1e06      	subs	r6, r0, #0
 800c820:	d109      	bne.n	800c836 <__ssputs_r+0x62>
 800c822:	230c      	movs	r3, #12
 800c824:	603b      	str	r3, [r7, #0]
 800c826:	2340      	movs	r3, #64	; 0x40
 800c828:	2001      	movs	r0, #1
 800c82a:	89a2      	ldrh	r2, [r4, #12]
 800c82c:	4240      	negs	r0, r0
 800c82e:	4313      	orrs	r3, r2
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	b005      	add	sp, #20
 800c834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c836:	9a02      	ldr	r2, [sp, #8]
 800c838:	6921      	ldr	r1, [r4, #16]
 800c83a:	f000 faba 	bl	800cdb2 <memcpy>
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	4a14      	ldr	r2, [pc, #80]	; (800c894 <__ssputs_r+0xc0>)
 800c842:	401a      	ands	r2, r3
 800c844:	2380      	movs	r3, #128	; 0x80
 800c846:	4313      	orrs	r3, r2
 800c848:	81a3      	strh	r3, [r4, #12]
 800c84a:	9b02      	ldr	r3, [sp, #8]
 800c84c:	6126      	str	r6, [r4, #16]
 800c84e:	18f6      	adds	r6, r6, r3
 800c850:	6026      	str	r6, [r4, #0]
 800c852:	6165      	str	r5, [r4, #20]
 800c854:	9e01      	ldr	r6, [sp, #4]
 800c856:	1aed      	subs	r5, r5, r3
 800c858:	60a5      	str	r5, [r4, #8]
 800c85a:	9b01      	ldr	r3, [sp, #4]
 800c85c:	429e      	cmp	r6, r3
 800c85e:	d900      	bls.n	800c862 <__ssputs_r+0x8e>
 800c860:	9e01      	ldr	r6, [sp, #4]
 800c862:	0032      	movs	r2, r6
 800c864:	9903      	ldr	r1, [sp, #12]
 800c866:	6820      	ldr	r0, [r4, #0]
 800c868:	f000 faac 	bl	800cdc4 <memmove>
 800c86c:	68a3      	ldr	r3, [r4, #8]
 800c86e:	2000      	movs	r0, #0
 800c870:	1b9b      	subs	r3, r3, r6
 800c872:	60a3      	str	r3, [r4, #8]
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	199e      	adds	r6, r3, r6
 800c878:	6026      	str	r6, [r4, #0]
 800c87a:	e7da      	b.n	800c832 <__ssputs_r+0x5e>
 800c87c:	002a      	movs	r2, r5
 800c87e:	0038      	movs	r0, r7
 800c880:	f000 fb5c 	bl	800cf3c <_realloc_r>
 800c884:	1e06      	subs	r6, r0, #0
 800c886:	d1e0      	bne.n	800c84a <__ssputs_r+0x76>
 800c888:	0038      	movs	r0, r7
 800c88a:	6921      	ldr	r1, [r4, #16]
 800c88c:	f000 faae 	bl	800cdec <_free_r>
 800c890:	e7c7      	b.n	800c822 <__ssputs_r+0x4e>
 800c892:	46c0      	nop			; (mov r8, r8)
 800c894:	fffffb7f 	.word	0xfffffb7f

0800c898 <_svfiprintf_r>:
 800c898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c89a:	b0a1      	sub	sp, #132	; 0x84
 800c89c:	9003      	str	r0, [sp, #12]
 800c89e:	001d      	movs	r5, r3
 800c8a0:	898b      	ldrh	r3, [r1, #12]
 800c8a2:	000f      	movs	r7, r1
 800c8a4:	0016      	movs	r6, r2
 800c8a6:	061b      	lsls	r3, r3, #24
 800c8a8:	d511      	bpl.n	800c8ce <_svfiprintf_r+0x36>
 800c8aa:	690b      	ldr	r3, [r1, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10e      	bne.n	800c8ce <_svfiprintf_r+0x36>
 800c8b0:	2140      	movs	r1, #64	; 0x40
 800c8b2:	f000 fae5 	bl	800ce80 <_malloc_r>
 800c8b6:	6038      	str	r0, [r7, #0]
 800c8b8:	6138      	str	r0, [r7, #16]
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d105      	bne.n	800c8ca <_svfiprintf_r+0x32>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	9a03      	ldr	r2, [sp, #12]
 800c8c2:	3801      	subs	r0, #1
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	b021      	add	sp, #132	; 0x84
 800c8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8ca:	2340      	movs	r3, #64	; 0x40
 800c8cc:	617b      	str	r3, [r7, #20]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	ac08      	add	r4, sp, #32
 800c8d2:	6163      	str	r3, [r4, #20]
 800c8d4:	3320      	adds	r3, #32
 800c8d6:	7663      	strb	r3, [r4, #25]
 800c8d8:	3310      	adds	r3, #16
 800c8da:	76a3      	strb	r3, [r4, #26]
 800c8dc:	9507      	str	r5, [sp, #28]
 800c8de:	0035      	movs	r5, r6
 800c8e0:	782b      	ldrb	r3, [r5, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <_svfiprintf_r+0x52>
 800c8e6:	2b25      	cmp	r3, #37	; 0x25
 800c8e8:	d147      	bne.n	800c97a <_svfiprintf_r+0xe2>
 800c8ea:	1bab      	subs	r3, r5, r6
 800c8ec:	9305      	str	r3, [sp, #20]
 800c8ee:	42b5      	cmp	r5, r6
 800c8f0:	d00c      	beq.n	800c90c <_svfiprintf_r+0x74>
 800c8f2:	0032      	movs	r2, r6
 800c8f4:	0039      	movs	r1, r7
 800c8f6:	9803      	ldr	r0, [sp, #12]
 800c8f8:	f7ff ff6c 	bl	800c7d4 <__ssputs_r>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	d100      	bne.n	800c902 <_svfiprintf_r+0x6a>
 800c900:	e0ae      	b.n	800ca60 <_svfiprintf_r+0x1c8>
 800c902:	6962      	ldr	r2, [r4, #20]
 800c904:	9b05      	ldr	r3, [sp, #20]
 800c906:	4694      	mov	ip, r2
 800c908:	4463      	add	r3, ip
 800c90a:	6163      	str	r3, [r4, #20]
 800c90c:	782b      	ldrb	r3, [r5, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d100      	bne.n	800c914 <_svfiprintf_r+0x7c>
 800c912:	e0a5      	b.n	800ca60 <_svfiprintf_r+0x1c8>
 800c914:	2201      	movs	r2, #1
 800c916:	2300      	movs	r3, #0
 800c918:	4252      	negs	r2, r2
 800c91a:	6062      	str	r2, [r4, #4]
 800c91c:	a904      	add	r1, sp, #16
 800c91e:	3254      	adds	r2, #84	; 0x54
 800c920:	1852      	adds	r2, r2, r1
 800c922:	1c6e      	adds	r6, r5, #1
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	60e3      	str	r3, [r4, #12]
 800c928:	60a3      	str	r3, [r4, #8]
 800c92a:	7013      	strb	r3, [r2, #0]
 800c92c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c92e:	2205      	movs	r2, #5
 800c930:	7831      	ldrb	r1, [r6, #0]
 800c932:	4854      	ldr	r0, [pc, #336]	; (800ca84 <_svfiprintf_r+0x1ec>)
 800c934:	f000 fa32 	bl	800cd9c <memchr>
 800c938:	1c75      	adds	r5, r6, #1
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d11f      	bne.n	800c97e <_svfiprintf_r+0xe6>
 800c93e:	6822      	ldr	r2, [r4, #0]
 800c940:	06d3      	lsls	r3, r2, #27
 800c942:	d504      	bpl.n	800c94e <_svfiprintf_r+0xb6>
 800c944:	2353      	movs	r3, #83	; 0x53
 800c946:	a904      	add	r1, sp, #16
 800c948:	185b      	adds	r3, r3, r1
 800c94a:	2120      	movs	r1, #32
 800c94c:	7019      	strb	r1, [r3, #0]
 800c94e:	0713      	lsls	r3, r2, #28
 800c950:	d504      	bpl.n	800c95c <_svfiprintf_r+0xc4>
 800c952:	2353      	movs	r3, #83	; 0x53
 800c954:	a904      	add	r1, sp, #16
 800c956:	185b      	adds	r3, r3, r1
 800c958:	212b      	movs	r1, #43	; 0x2b
 800c95a:	7019      	strb	r1, [r3, #0]
 800c95c:	7833      	ldrb	r3, [r6, #0]
 800c95e:	2b2a      	cmp	r3, #42	; 0x2a
 800c960:	d016      	beq.n	800c990 <_svfiprintf_r+0xf8>
 800c962:	0035      	movs	r5, r6
 800c964:	2100      	movs	r1, #0
 800c966:	200a      	movs	r0, #10
 800c968:	68e3      	ldr	r3, [r4, #12]
 800c96a:	782a      	ldrb	r2, [r5, #0]
 800c96c:	1c6e      	adds	r6, r5, #1
 800c96e:	3a30      	subs	r2, #48	; 0x30
 800c970:	2a09      	cmp	r2, #9
 800c972:	d94e      	bls.n	800ca12 <_svfiprintf_r+0x17a>
 800c974:	2900      	cmp	r1, #0
 800c976:	d111      	bne.n	800c99c <_svfiprintf_r+0x104>
 800c978:	e017      	b.n	800c9aa <_svfiprintf_r+0x112>
 800c97a:	3501      	adds	r5, #1
 800c97c:	e7b0      	b.n	800c8e0 <_svfiprintf_r+0x48>
 800c97e:	4b41      	ldr	r3, [pc, #260]	; (800ca84 <_svfiprintf_r+0x1ec>)
 800c980:	6822      	ldr	r2, [r4, #0]
 800c982:	1ac0      	subs	r0, r0, r3
 800c984:	2301      	movs	r3, #1
 800c986:	4083      	lsls	r3, r0
 800c988:	4313      	orrs	r3, r2
 800c98a:	002e      	movs	r6, r5
 800c98c:	6023      	str	r3, [r4, #0]
 800c98e:	e7ce      	b.n	800c92e <_svfiprintf_r+0x96>
 800c990:	9b07      	ldr	r3, [sp, #28]
 800c992:	1d19      	adds	r1, r3, #4
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	9107      	str	r1, [sp, #28]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	db01      	blt.n	800c9a0 <_svfiprintf_r+0x108>
 800c99c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c99e:	e004      	b.n	800c9aa <_svfiprintf_r+0x112>
 800c9a0:	425b      	negs	r3, r3
 800c9a2:	60e3      	str	r3, [r4, #12]
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	6023      	str	r3, [r4, #0]
 800c9aa:	782b      	ldrb	r3, [r5, #0]
 800c9ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ae:	d10a      	bne.n	800c9c6 <_svfiprintf_r+0x12e>
 800c9b0:	786b      	ldrb	r3, [r5, #1]
 800c9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b4:	d135      	bne.n	800ca22 <_svfiprintf_r+0x18a>
 800c9b6:	9b07      	ldr	r3, [sp, #28]
 800c9b8:	3502      	adds	r5, #2
 800c9ba:	1d1a      	adds	r2, r3, #4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	9207      	str	r2, [sp, #28]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	db2b      	blt.n	800ca1c <_svfiprintf_r+0x184>
 800c9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c6:	4e30      	ldr	r6, [pc, #192]	; (800ca88 <_svfiprintf_r+0x1f0>)
 800c9c8:	2203      	movs	r2, #3
 800c9ca:	0030      	movs	r0, r6
 800c9cc:	7829      	ldrb	r1, [r5, #0]
 800c9ce:	f000 f9e5 	bl	800cd9c <memchr>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d006      	beq.n	800c9e4 <_svfiprintf_r+0x14c>
 800c9d6:	2340      	movs	r3, #64	; 0x40
 800c9d8:	1b80      	subs	r0, r0, r6
 800c9da:	4083      	lsls	r3, r0
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	3501      	adds	r5, #1
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	7829      	ldrb	r1, [r5, #0]
 800c9e6:	2206      	movs	r2, #6
 800c9e8:	4828      	ldr	r0, [pc, #160]	; (800ca8c <_svfiprintf_r+0x1f4>)
 800c9ea:	1c6e      	adds	r6, r5, #1
 800c9ec:	7621      	strb	r1, [r4, #24]
 800c9ee:	f000 f9d5 	bl	800cd9c <memchr>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d03c      	beq.n	800ca70 <_svfiprintf_r+0x1d8>
 800c9f6:	4b26      	ldr	r3, [pc, #152]	; (800ca90 <_svfiprintf_r+0x1f8>)
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d125      	bne.n	800ca48 <_svfiprintf_r+0x1b0>
 800c9fc:	2207      	movs	r2, #7
 800c9fe:	9b07      	ldr	r3, [sp, #28]
 800ca00:	3307      	adds	r3, #7
 800ca02:	4393      	bics	r3, r2
 800ca04:	3308      	adds	r3, #8
 800ca06:	9307      	str	r3, [sp, #28]
 800ca08:	6963      	ldr	r3, [r4, #20]
 800ca0a:	9a04      	ldr	r2, [sp, #16]
 800ca0c:	189b      	adds	r3, r3, r2
 800ca0e:	6163      	str	r3, [r4, #20]
 800ca10:	e765      	b.n	800c8de <_svfiprintf_r+0x46>
 800ca12:	4343      	muls	r3, r0
 800ca14:	0035      	movs	r5, r6
 800ca16:	2101      	movs	r1, #1
 800ca18:	189b      	adds	r3, r3, r2
 800ca1a:	e7a6      	b.n	800c96a <_svfiprintf_r+0xd2>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	425b      	negs	r3, r3
 800ca20:	e7d0      	b.n	800c9c4 <_svfiprintf_r+0x12c>
 800ca22:	2300      	movs	r3, #0
 800ca24:	200a      	movs	r0, #10
 800ca26:	001a      	movs	r2, r3
 800ca28:	3501      	adds	r5, #1
 800ca2a:	6063      	str	r3, [r4, #4]
 800ca2c:	7829      	ldrb	r1, [r5, #0]
 800ca2e:	1c6e      	adds	r6, r5, #1
 800ca30:	3930      	subs	r1, #48	; 0x30
 800ca32:	2909      	cmp	r1, #9
 800ca34:	d903      	bls.n	800ca3e <_svfiprintf_r+0x1a6>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0c5      	beq.n	800c9c6 <_svfiprintf_r+0x12e>
 800ca3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca3c:	e7c3      	b.n	800c9c6 <_svfiprintf_r+0x12e>
 800ca3e:	4342      	muls	r2, r0
 800ca40:	0035      	movs	r5, r6
 800ca42:	2301      	movs	r3, #1
 800ca44:	1852      	adds	r2, r2, r1
 800ca46:	e7f1      	b.n	800ca2c <_svfiprintf_r+0x194>
 800ca48:	ab07      	add	r3, sp, #28
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	003a      	movs	r2, r7
 800ca4e:	0021      	movs	r1, r4
 800ca50:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <_svfiprintf_r+0x1fc>)
 800ca52:	9803      	ldr	r0, [sp, #12]
 800ca54:	e000      	b.n	800ca58 <_svfiprintf_r+0x1c0>
 800ca56:	bf00      	nop
 800ca58:	9004      	str	r0, [sp, #16]
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	d1d3      	bne.n	800ca08 <_svfiprintf_r+0x170>
 800ca60:	89bb      	ldrh	r3, [r7, #12]
 800ca62:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca64:	065b      	lsls	r3, r3, #25
 800ca66:	d400      	bmi.n	800ca6a <_svfiprintf_r+0x1d2>
 800ca68:	e72d      	b.n	800c8c6 <_svfiprintf_r+0x2e>
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	4240      	negs	r0, r0
 800ca6e:	e72a      	b.n	800c8c6 <_svfiprintf_r+0x2e>
 800ca70:	ab07      	add	r3, sp, #28
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	003a      	movs	r2, r7
 800ca76:	0021      	movs	r1, r4
 800ca78:	4b06      	ldr	r3, [pc, #24]	; (800ca94 <_svfiprintf_r+0x1fc>)
 800ca7a:	9803      	ldr	r0, [sp, #12]
 800ca7c:	f000 f87c 	bl	800cb78 <_printf_i>
 800ca80:	e7ea      	b.n	800ca58 <_svfiprintf_r+0x1c0>
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	0800d941 	.word	0x0800d941
 800ca88:	0800d947 	.word	0x0800d947
 800ca8c:	0800d94b 	.word	0x0800d94b
 800ca90:	00000000 	.word	0x00000000
 800ca94:	0800c7d5 	.word	0x0800c7d5

0800ca98 <_printf_common>:
 800ca98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca9a:	0015      	movs	r5, r2
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	688a      	ldr	r2, [r1, #8]
 800caa0:	690b      	ldr	r3, [r1, #16]
 800caa2:	000c      	movs	r4, r1
 800caa4:	9000      	str	r0, [sp, #0]
 800caa6:	4293      	cmp	r3, r2
 800caa8:	da00      	bge.n	800caac <_printf_common+0x14>
 800caaa:	0013      	movs	r3, r2
 800caac:	0022      	movs	r2, r4
 800caae:	602b      	str	r3, [r5, #0]
 800cab0:	3243      	adds	r2, #67	; 0x43
 800cab2:	7812      	ldrb	r2, [r2, #0]
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	d001      	beq.n	800cabc <_printf_common+0x24>
 800cab8:	3301      	adds	r3, #1
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	6823      	ldr	r3, [r4, #0]
 800cabe:	069b      	lsls	r3, r3, #26
 800cac0:	d502      	bpl.n	800cac8 <_printf_common+0x30>
 800cac2:	682b      	ldr	r3, [r5, #0]
 800cac4:	3302      	adds	r3, #2
 800cac6:	602b      	str	r3, [r5, #0]
 800cac8:	6822      	ldr	r2, [r4, #0]
 800caca:	2306      	movs	r3, #6
 800cacc:	0017      	movs	r7, r2
 800cace:	401f      	ands	r7, r3
 800cad0:	421a      	tst	r2, r3
 800cad2:	d027      	beq.n	800cb24 <_printf_common+0x8c>
 800cad4:	0023      	movs	r3, r4
 800cad6:	3343      	adds	r3, #67	; 0x43
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	1e5a      	subs	r2, r3, #1
 800cadc:	4193      	sbcs	r3, r2
 800cade:	6822      	ldr	r2, [r4, #0]
 800cae0:	0692      	lsls	r2, r2, #26
 800cae2:	d430      	bmi.n	800cb46 <_printf_common+0xae>
 800cae4:	0022      	movs	r2, r4
 800cae6:	9901      	ldr	r1, [sp, #4]
 800cae8:	9800      	ldr	r0, [sp, #0]
 800caea:	9e08      	ldr	r6, [sp, #32]
 800caec:	3243      	adds	r2, #67	; 0x43
 800caee:	47b0      	blx	r6
 800caf0:	1c43      	adds	r3, r0, #1
 800caf2:	d025      	beq.n	800cb40 <_printf_common+0xa8>
 800caf4:	2306      	movs	r3, #6
 800caf6:	6820      	ldr	r0, [r4, #0]
 800caf8:	682a      	ldr	r2, [r5, #0]
 800cafa:	68e1      	ldr	r1, [r4, #12]
 800cafc:	2500      	movs	r5, #0
 800cafe:	4003      	ands	r3, r0
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d103      	bne.n	800cb0c <_printf_common+0x74>
 800cb04:	1a8d      	subs	r5, r1, r2
 800cb06:	43eb      	mvns	r3, r5
 800cb08:	17db      	asrs	r3, r3, #31
 800cb0a:	401d      	ands	r5, r3
 800cb0c:	68a3      	ldr	r3, [r4, #8]
 800cb0e:	6922      	ldr	r2, [r4, #16]
 800cb10:	4293      	cmp	r3, r2
 800cb12:	dd01      	ble.n	800cb18 <_printf_common+0x80>
 800cb14:	1a9b      	subs	r3, r3, r2
 800cb16:	18ed      	adds	r5, r5, r3
 800cb18:	2700      	movs	r7, #0
 800cb1a:	42bd      	cmp	r5, r7
 800cb1c:	d120      	bne.n	800cb60 <_printf_common+0xc8>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	e010      	b.n	800cb44 <_printf_common+0xac>
 800cb22:	3701      	adds	r7, #1
 800cb24:	68e3      	ldr	r3, [r4, #12]
 800cb26:	682a      	ldr	r2, [r5, #0]
 800cb28:	1a9b      	subs	r3, r3, r2
 800cb2a:	42bb      	cmp	r3, r7
 800cb2c:	ddd2      	ble.n	800cad4 <_printf_common+0x3c>
 800cb2e:	0022      	movs	r2, r4
 800cb30:	2301      	movs	r3, #1
 800cb32:	9901      	ldr	r1, [sp, #4]
 800cb34:	9800      	ldr	r0, [sp, #0]
 800cb36:	9e08      	ldr	r6, [sp, #32]
 800cb38:	3219      	adds	r2, #25
 800cb3a:	47b0      	blx	r6
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	d1f0      	bne.n	800cb22 <_printf_common+0x8a>
 800cb40:	2001      	movs	r0, #1
 800cb42:	4240      	negs	r0, r0
 800cb44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb46:	2030      	movs	r0, #48	; 0x30
 800cb48:	18e1      	adds	r1, r4, r3
 800cb4a:	3143      	adds	r1, #67	; 0x43
 800cb4c:	7008      	strb	r0, [r1, #0]
 800cb4e:	0021      	movs	r1, r4
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	3145      	adds	r1, #69	; 0x45
 800cb54:	7809      	ldrb	r1, [r1, #0]
 800cb56:	18a2      	adds	r2, r4, r2
 800cb58:	3243      	adds	r2, #67	; 0x43
 800cb5a:	3302      	adds	r3, #2
 800cb5c:	7011      	strb	r1, [r2, #0]
 800cb5e:	e7c1      	b.n	800cae4 <_printf_common+0x4c>
 800cb60:	0022      	movs	r2, r4
 800cb62:	2301      	movs	r3, #1
 800cb64:	9901      	ldr	r1, [sp, #4]
 800cb66:	9800      	ldr	r0, [sp, #0]
 800cb68:	9e08      	ldr	r6, [sp, #32]
 800cb6a:	321a      	adds	r2, #26
 800cb6c:	47b0      	blx	r6
 800cb6e:	1c43      	adds	r3, r0, #1
 800cb70:	d0e6      	beq.n	800cb40 <_printf_common+0xa8>
 800cb72:	3701      	adds	r7, #1
 800cb74:	e7d1      	b.n	800cb1a <_printf_common+0x82>
	...

0800cb78 <_printf_i>:
 800cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7a:	b08b      	sub	sp, #44	; 0x2c
 800cb7c:	9206      	str	r2, [sp, #24]
 800cb7e:	000a      	movs	r2, r1
 800cb80:	3243      	adds	r2, #67	; 0x43
 800cb82:	9307      	str	r3, [sp, #28]
 800cb84:	9005      	str	r0, [sp, #20]
 800cb86:	9204      	str	r2, [sp, #16]
 800cb88:	7e0a      	ldrb	r2, [r1, #24]
 800cb8a:	000c      	movs	r4, r1
 800cb8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb8e:	2a78      	cmp	r2, #120	; 0x78
 800cb90:	d806      	bhi.n	800cba0 <_printf_i+0x28>
 800cb92:	2a62      	cmp	r2, #98	; 0x62
 800cb94:	d808      	bhi.n	800cba8 <_printf_i+0x30>
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	d100      	bne.n	800cb9c <_printf_i+0x24>
 800cb9a:	e0c0      	b.n	800cd1e <_printf_i+0x1a6>
 800cb9c:	2a58      	cmp	r2, #88	; 0x58
 800cb9e:	d052      	beq.n	800cc46 <_printf_i+0xce>
 800cba0:	0026      	movs	r6, r4
 800cba2:	3642      	adds	r6, #66	; 0x42
 800cba4:	7032      	strb	r2, [r6, #0]
 800cba6:	e022      	b.n	800cbee <_printf_i+0x76>
 800cba8:	0010      	movs	r0, r2
 800cbaa:	3863      	subs	r0, #99	; 0x63
 800cbac:	2815      	cmp	r0, #21
 800cbae:	d8f7      	bhi.n	800cba0 <_printf_i+0x28>
 800cbb0:	f7f3 fab2 	bl	8000118 <__gnu_thumb1_case_shi>
 800cbb4:	001f0016 	.word	0x001f0016
 800cbb8:	fff6fff6 	.word	0xfff6fff6
 800cbbc:	fff6fff6 	.word	0xfff6fff6
 800cbc0:	fff6001f 	.word	0xfff6001f
 800cbc4:	fff6fff6 	.word	0xfff6fff6
 800cbc8:	00a8fff6 	.word	0x00a8fff6
 800cbcc:	009a0036 	.word	0x009a0036
 800cbd0:	fff6fff6 	.word	0xfff6fff6
 800cbd4:	fff600b9 	.word	0xfff600b9
 800cbd8:	fff60036 	.word	0xfff60036
 800cbdc:	009efff6 	.word	0x009efff6
 800cbe0:	0026      	movs	r6, r4
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	3642      	adds	r6, #66	; 0x42
 800cbe6:	1d11      	adds	r1, r2, #4
 800cbe8:	6019      	str	r1, [r3, #0]
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	7033      	strb	r3, [r6, #0]
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e0a7      	b.n	800cd42 <_printf_i+0x1ca>
 800cbf2:	6808      	ldr	r0, [r1, #0]
 800cbf4:	6819      	ldr	r1, [r3, #0]
 800cbf6:	1d0a      	adds	r2, r1, #4
 800cbf8:	0605      	lsls	r5, r0, #24
 800cbfa:	d50b      	bpl.n	800cc14 <_printf_i+0x9c>
 800cbfc:	680d      	ldr	r5, [r1, #0]
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	da03      	bge.n	800cc0c <_printf_i+0x94>
 800cc04:	232d      	movs	r3, #45	; 0x2d
 800cc06:	9a04      	ldr	r2, [sp, #16]
 800cc08:	426d      	negs	r5, r5
 800cc0a:	7013      	strb	r3, [r2, #0]
 800cc0c:	4b61      	ldr	r3, [pc, #388]	; (800cd94 <_printf_i+0x21c>)
 800cc0e:	270a      	movs	r7, #10
 800cc10:	9303      	str	r3, [sp, #12]
 800cc12:	e032      	b.n	800cc7a <_printf_i+0x102>
 800cc14:	680d      	ldr	r5, [r1, #0]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	0641      	lsls	r1, r0, #25
 800cc1a:	d5f1      	bpl.n	800cc00 <_printf_i+0x88>
 800cc1c:	b22d      	sxth	r5, r5
 800cc1e:	e7ef      	b.n	800cc00 <_printf_i+0x88>
 800cc20:	680d      	ldr	r5, [r1, #0]
 800cc22:	6819      	ldr	r1, [r3, #0]
 800cc24:	1d08      	adds	r0, r1, #4
 800cc26:	6018      	str	r0, [r3, #0]
 800cc28:	062e      	lsls	r6, r5, #24
 800cc2a:	d501      	bpl.n	800cc30 <_printf_i+0xb8>
 800cc2c:	680d      	ldr	r5, [r1, #0]
 800cc2e:	e003      	b.n	800cc38 <_printf_i+0xc0>
 800cc30:	066d      	lsls	r5, r5, #25
 800cc32:	d5fb      	bpl.n	800cc2c <_printf_i+0xb4>
 800cc34:	680d      	ldr	r5, [r1, #0]
 800cc36:	b2ad      	uxth	r5, r5
 800cc38:	4b56      	ldr	r3, [pc, #344]	; (800cd94 <_printf_i+0x21c>)
 800cc3a:	270a      	movs	r7, #10
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	2a6f      	cmp	r2, #111	; 0x6f
 800cc40:	d117      	bne.n	800cc72 <_printf_i+0xfa>
 800cc42:	2708      	movs	r7, #8
 800cc44:	e015      	b.n	800cc72 <_printf_i+0xfa>
 800cc46:	3145      	adds	r1, #69	; 0x45
 800cc48:	700a      	strb	r2, [r1, #0]
 800cc4a:	4a52      	ldr	r2, [pc, #328]	; (800cd94 <_printf_i+0x21c>)
 800cc4c:	9203      	str	r2, [sp, #12]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	6821      	ldr	r1, [r4, #0]
 800cc52:	ca20      	ldmia	r2!, {r5}
 800cc54:	601a      	str	r2, [r3, #0]
 800cc56:	0608      	lsls	r0, r1, #24
 800cc58:	d550      	bpl.n	800ccfc <_printf_i+0x184>
 800cc5a:	07cb      	lsls	r3, r1, #31
 800cc5c:	d502      	bpl.n	800cc64 <_printf_i+0xec>
 800cc5e:	2320      	movs	r3, #32
 800cc60:	4319      	orrs	r1, r3
 800cc62:	6021      	str	r1, [r4, #0]
 800cc64:	2710      	movs	r7, #16
 800cc66:	2d00      	cmp	r5, #0
 800cc68:	d103      	bne.n	800cc72 <_printf_i+0xfa>
 800cc6a:	2320      	movs	r3, #32
 800cc6c:	6822      	ldr	r2, [r4, #0]
 800cc6e:	439a      	bics	r2, r3
 800cc70:	6022      	str	r2, [r4, #0]
 800cc72:	0023      	movs	r3, r4
 800cc74:	2200      	movs	r2, #0
 800cc76:	3343      	adds	r3, #67	; 0x43
 800cc78:	701a      	strb	r2, [r3, #0]
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	60a3      	str	r3, [r4, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	db03      	blt.n	800cc8a <_printf_i+0x112>
 800cc82:	2204      	movs	r2, #4
 800cc84:	6821      	ldr	r1, [r4, #0]
 800cc86:	4391      	bics	r1, r2
 800cc88:	6021      	str	r1, [r4, #0]
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	d102      	bne.n	800cc94 <_printf_i+0x11c>
 800cc8e:	9e04      	ldr	r6, [sp, #16]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00c      	beq.n	800ccae <_printf_i+0x136>
 800cc94:	9e04      	ldr	r6, [sp, #16]
 800cc96:	0028      	movs	r0, r5
 800cc98:	0039      	movs	r1, r7
 800cc9a:	f7f3 facd 	bl	8000238 <__aeabi_uidivmod>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	3e01      	subs	r6, #1
 800cca2:	5c5b      	ldrb	r3, [r3, r1]
 800cca4:	7033      	strb	r3, [r6, #0]
 800cca6:	002b      	movs	r3, r5
 800cca8:	0005      	movs	r5, r0
 800ccaa:	429f      	cmp	r7, r3
 800ccac:	d9f3      	bls.n	800cc96 <_printf_i+0x11e>
 800ccae:	2f08      	cmp	r7, #8
 800ccb0:	d109      	bne.n	800ccc6 <_printf_i+0x14e>
 800ccb2:	6823      	ldr	r3, [r4, #0]
 800ccb4:	07db      	lsls	r3, r3, #31
 800ccb6:	d506      	bpl.n	800ccc6 <_printf_i+0x14e>
 800ccb8:	6863      	ldr	r3, [r4, #4]
 800ccba:	6922      	ldr	r2, [r4, #16]
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	dc02      	bgt.n	800ccc6 <_printf_i+0x14e>
 800ccc0:	2330      	movs	r3, #48	; 0x30
 800ccc2:	3e01      	subs	r6, #1
 800ccc4:	7033      	strb	r3, [r6, #0]
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	1b9b      	subs	r3, r3, r6
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	9b07      	ldr	r3, [sp, #28]
 800ccce:	0021      	movs	r1, r4
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	9805      	ldr	r0, [sp, #20]
 800ccd4:	9b06      	ldr	r3, [sp, #24]
 800ccd6:	aa09      	add	r2, sp, #36	; 0x24
 800ccd8:	f7ff fede 	bl	800ca98 <_printf_common>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d135      	bne.n	800cd4c <_printf_i+0x1d4>
 800cce0:	2001      	movs	r0, #1
 800cce2:	4240      	negs	r0, r0
 800cce4:	b00b      	add	sp, #44	; 0x2c
 800cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce8:	2220      	movs	r2, #32
 800ccea:	6809      	ldr	r1, [r1, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	6022      	str	r2, [r4, #0]
 800ccf0:	0022      	movs	r2, r4
 800ccf2:	2178      	movs	r1, #120	; 0x78
 800ccf4:	3245      	adds	r2, #69	; 0x45
 800ccf6:	7011      	strb	r1, [r2, #0]
 800ccf8:	4a27      	ldr	r2, [pc, #156]	; (800cd98 <_printf_i+0x220>)
 800ccfa:	e7a7      	b.n	800cc4c <_printf_i+0xd4>
 800ccfc:	0648      	lsls	r0, r1, #25
 800ccfe:	d5ac      	bpl.n	800cc5a <_printf_i+0xe2>
 800cd00:	b2ad      	uxth	r5, r5
 800cd02:	e7aa      	b.n	800cc5a <_printf_i+0xe2>
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	680d      	ldr	r5, [r1, #0]
 800cd08:	1d10      	adds	r0, r2, #4
 800cd0a:	6949      	ldr	r1, [r1, #20]
 800cd0c:	6018      	str	r0, [r3, #0]
 800cd0e:	6813      	ldr	r3, [r2, #0]
 800cd10:	062e      	lsls	r6, r5, #24
 800cd12:	d501      	bpl.n	800cd18 <_printf_i+0x1a0>
 800cd14:	6019      	str	r1, [r3, #0]
 800cd16:	e002      	b.n	800cd1e <_printf_i+0x1a6>
 800cd18:	066d      	lsls	r5, r5, #25
 800cd1a:	d5fb      	bpl.n	800cd14 <_printf_i+0x19c>
 800cd1c:	8019      	strh	r1, [r3, #0]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9e04      	ldr	r6, [sp, #16]
 800cd22:	6123      	str	r3, [r4, #16]
 800cd24:	e7d2      	b.n	800cccc <_printf_i+0x154>
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	1d11      	adds	r1, r2, #4
 800cd2a:	6019      	str	r1, [r3, #0]
 800cd2c:	6816      	ldr	r6, [r2, #0]
 800cd2e:	2100      	movs	r1, #0
 800cd30:	0030      	movs	r0, r6
 800cd32:	6862      	ldr	r2, [r4, #4]
 800cd34:	f000 f832 	bl	800cd9c <memchr>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d001      	beq.n	800cd40 <_printf_i+0x1c8>
 800cd3c:	1b80      	subs	r0, r0, r6
 800cd3e:	6060      	str	r0, [r4, #4]
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	6123      	str	r3, [r4, #16]
 800cd44:	2300      	movs	r3, #0
 800cd46:	9a04      	ldr	r2, [sp, #16]
 800cd48:	7013      	strb	r3, [r2, #0]
 800cd4a:	e7bf      	b.n	800cccc <_printf_i+0x154>
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	0032      	movs	r2, r6
 800cd50:	9906      	ldr	r1, [sp, #24]
 800cd52:	9805      	ldr	r0, [sp, #20]
 800cd54:	9d07      	ldr	r5, [sp, #28]
 800cd56:	47a8      	blx	r5
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d0c1      	beq.n	800cce0 <_printf_i+0x168>
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	079b      	lsls	r3, r3, #30
 800cd60:	d415      	bmi.n	800cd8e <_printf_i+0x216>
 800cd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd64:	68e0      	ldr	r0, [r4, #12]
 800cd66:	4298      	cmp	r0, r3
 800cd68:	dabc      	bge.n	800cce4 <_printf_i+0x16c>
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	e7ba      	b.n	800cce4 <_printf_i+0x16c>
 800cd6e:	0022      	movs	r2, r4
 800cd70:	2301      	movs	r3, #1
 800cd72:	9906      	ldr	r1, [sp, #24]
 800cd74:	9805      	ldr	r0, [sp, #20]
 800cd76:	9e07      	ldr	r6, [sp, #28]
 800cd78:	3219      	adds	r2, #25
 800cd7a:	47b0      	blx	r6
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d0af      	beq.n	800cce0 <_printf_i+0x168>
 800cd80:	3501      	adds	r5, #1
 800cd82:	68e3      	ldr	r3, [r4, #12]
 800cd84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd86:	1a9b      	subs	r3, r3, r2
 800cd88:	42ab      	cmp	r3, r5
 800cd8a:	dcf0      	bgt.n	800cd6e <_printf_i+0x1f6>
 800cd8c:	e7e9      	b.n	800cd62 <_printf_i+0x1ea>
 800cd8e:	2500      	movs	r5, #0
 800cd90:	e7f7      	b.n	800cd82 <_printf_i+0x20a>
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	0800d952 	.word	0x0800d952
 800cd98:	0800d963 	.word	0x0800d963

0800cd9c <memchr>:
 800cd9c:	b2c9      	uxtb	r1, r1
 800cd9e:	1882      	adds	r2, r0, r2
 800cda0:	4290      	cmp	r0, r2
 800cda2:	d101      	bne.n	800cda8 <memchr+0xc>
 800cda4:	2000      	movs	r0, #0
 800cda6:	4770      	bx	lr
 800cda8:	7803      	ldrb	r3, [r0, #0]
 800cdaa:	428b      	cmp	r3, r1
 800cdac:	d0fb      	beq.n	800cda6 <memchr+0xa>
 800cdae:	3001      	adds	r0, #1
 800cdb0:	e7f6      	b.n	800cda0 <memchr+0x4>

0800cdb2 <memcpy>:
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d100      	bne.n	800cdbc <memcpy+0xa>
 800cdba:	bd10      	pop	{r4, pc}
 800cdbc:	5ccc      	ldrb	r4, [r1, r3]
 800cdbe:	54c4      	strb	r4, [r0, r3]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	e7f8      	b.n	800cdb6 <memcpy+0x4>

0800cdc4 <memmove>:
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	4288      	cmp	r0, r1
 800cdc8:	d902      	bls.n	800cdd0 <memmove+0xc>
 800cdca:	188b      	adds	r3, r1, r2
 800cdcc:	4298      	cmp	r0, r3
 800cdce:	d303      	bcc.n	800cdd8 <memmove+0x14>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e007      	b.n	800cde4 <memmove+0x20>
 800cdd4:	5c8b      	ldrb	r3, [r1, r2]
 800cdd6:	5483      	strb	r3, [r0, r2]
 800cdd8:	3a01      	subs	r2, #1
 800cdda:	d2fb      	bcs.n	800cdd4 <memmove+0x10>
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	5ccc      	ldrb	r4, [r1, r3]
 800cde0:	54c4      	strb	r4, [r0, r3]
 800cde2:	3301      	adds	r3, #1
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d1fa      	bne.n	800cdde <memmove+0x1a>
 800cde8:	e7f8      	b.n	800cddc <memmove+0x18>
	...

0800cdec <_free_r>:
 800cdec:	b570      	push	{r4, r5, r6, lr}
 800cdee:	0005      	movs	r5, r0
 800cdf0:	2900      	cmp	r1, #0
 800cdf2:	d010      	beq.n	800ce16 <_free_r+0x2a>
 800cdf4:	1f0c      	subs	r4, r1, #4
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	da00      	bge.n	800cdfe <_free_r+0x12>
 800cdfc:	18e4      	adds	r4, r4, r3
 800cdfe:	0028      	movs	r0, r5
 800ce00:	f000 f8d4 	bl	800cfac <__malloc_lock>
 800ce04:	4a1d      	ldr	r2, [pc, #116]	; (800ce7c <_free_r+0x90>)
 800ce06:	6813      	ldr	r3, [r2, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d105      	bne.n	800ce18 <_free_r+0x2c>
 800ce0c:	6063      	str	r3, [r4, #4]
 800ce0e:	6014      	str	r4, [r2, #0]
 800ce10:	0028      	movs	r0, r5
 800ce12:	f000 f8d3 	bl	800cfbc <__malloc_unlock>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	42a3      	cmp	r3, r4
 800ce1a:	d908      	bls.n	800ce2e <_free_r+0x42>
 800ce1c:	6821      	ldr	r1, [r4, #0]
 800ce1e:	1860      	adds	r0, r4, r1
 800ce20:	4283      	cmp	r3, r0
 800ce22:	d1f3      	bne.n	800ce0c <_free_r+0x20>
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	1841      	adds	r1, r0, r1
 800ce2a:	6021      	str	r1, [r4, #0]
 800ce2c:	e7ee      	b.n	800ce0c <_free_r+0x20>
 800ce2e:	001a      	movs	r2, r3
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <_free_r+0x4e>
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	d9f9      	bls.n	800ce2e <_free_r+0x42>
 800ce3a:	6811      	ldr	r1, [r2, #0]
 800ce3c:	1850      	adds	r0, r2, r1
 800ce3e:	42a0      	cmp	r0, r4
 800ce40:	d10b      	bne.n	800ce5a <_free_r+0x6e>
 800ce42:	6820      	ldr	r0, [r4, #0]
 800ce44:	1809      	adds	r1, r1, r0
 800ce46:	1850      	adds	r0, r2, r1
 800ce48:	6011      	str	r1, [r2, #0]
 800ce4a:	4283      	cmp	r3, r0
 800ce4c:	d1e0      	bne.n	800ce10 <_free_r+0x24>
 800ce4e:	6818      	ldr	r0, [r3, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	1841      	adds	r1, r0, r1
 800ce54:	6011      	str	r1, [r2, #0]
 800ce56:	6053      	str	r3, [r2, #4]
 800ce58:	e7da      	b.n	800ce10 <_free_r+0x24>
 800ce5a:	42a0      	cmp	r0, r4
 800ce5c:	d902      	bls.n	800ce64 <_free_r+0x78>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	602b      	str	r3, [r5, #0]
 800ce62:	e7d5      	b.n	800ce10 <_free_r+0x24>
 800ce64:	6821      	ldr	r1, [r4, #0]
 800ce66:	1860      	adds	r0, r4, r1
 800ce68:	4283      	cmp	r3, r0
 800ce6a:	d103      	bne.n	800ce74 <_free_r+0x88>
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	1841      	adds	r1, r0, r1
 800ce72:	6021      	str	r1, [r4, #0]
 800ce74:	6063      	str	r3, [r4, #4]
 800ce76:	6054      	str	r4, [r2, #4]
 800ce78:	e7ca      	b.n	800ce10 <_free_r+0x24>
 800ce7a:	46c0      	nop			; (mov r8, r8)
 800ce7c:	20000c14 	.word	0x20000c14

0800ce80 <_malloc_r>:
 800ce80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce82:	2303      	movs	r3, #3
 800ce84:	1ccd      	adds	r5, r1, #3
 800ce86:	439d      	bics	r5, r3
 800ce88:	3508      	adds	r5, #8
 800ce8a:	0006      	movs	r6, r0
 800ce8c:	2d0c      	cmp	r5, #12
 800ce8e:	d21f      	bcs.n	800ced0 <_malloc_r+0x50>
 800ce90:	250c      	movs	r5, #12
 800ce92:	42a9      	cmp	r1, r5
 800ce94:	d81e      	bhi.n	800ced4 <_malloc_r+0x54>
 800ce96:	0030      	movs	r0, r6
 800ce98:	f000 f888 	bl	800cfac <__malloc_lock>
 800ce9c:	4925      	ldr	r1, [pc, #148]	; (800cf34 <_malloc_r+0xb4>)
 800ce9e:	680a      	ldr	r2, [r1, #0]
 800cea0:	0014      	movs	r4, r2
 800cea2:	2c00      	cmp	r4, #0
 800cea4:	d11a      	bne.n	800cedc <_malloc_r+0x5c>
 800cea6:	4f24      	ldr	r7, [pc, #144]	; (800cf38 <_malloc_r+0xb8>)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d104      	bne.n	800ceb8 <_malloc_r+0x38>
 800ceae:	0021      	movs	r1, r4
 800ceb0:	0030      	movs	r0, r6
 800ceb2:	f000 f869 	bl	800cf88 <_sbrk_r>
 800ceb6:	6038      	str	r0, [r7, #0]
 800ceb8:	0029      	movs	r1, r5
 800ceba:	0030      	movs	r0, r6
 800cebc:	f000 f864 	bl	800cf88 <_sbrk_r>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d12b      	bne.n	800cf1c <_malloc_r+0x9c>
 800cec4:	230c      	movs	r3, #12
 800cec6:	0030      	movs	r0, r6
 800cec8:	6033      	str	r3, [r6, #0]
 800ceca:	f000 f877 	bl	800cfbc <__malloc_unlock>
 800cece:	e003      	b.n	800ced8 <_malloc_r+0x58>
 800ced0:	2d00      	cmp	r5, #0
 800ced2:	dade      	bge.n	800ce92 <_malloc_r+0x12>
 800ced4:	230c      	movs	r3, #12
 800ced6:	6033      	str	r3, [r6, #0]
 800ced8:	2000      	movs	r0, #0
 800ceda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	1b5b      	subs	r3, r3, r5
 800cee0:	d419      	bmi.n	800cf16 <_malloc_r+0x96>
 800cee2:	2b0b      	cmp	r3, #11
 800cee4:	d903      	bls.n	800ceee <_malloc_r+0x6e>
 800cee6:	6023      	str	r3, [r4, #0]
 800cee8:	18e4      	adds	r4, r4, r3
 800ceea:	6025      	str	r5, [r4, #0]
 800ceec:	e003      	b.n	800cef6 <_malloc_r+0x76>
 800ceee:	6863      	ldr	r3, [r4, #4]
 800cef0:	42a2      	cmp	r2, r4
 800cef2:	d10e      	bne.n	800cf12 <_malloc_r+0x92>
 800cef4:	600b      	str	r3, [r1, #0]
 800cef6:	0030      	movs	r0, r6
 800cef8:	f000 f860 	bl	800cfbc <__malloc_unlock>
 800cefc:	0020      	movs	r0, r4
 800cefe:	2207      	movs	r2, #7
 800cf00:	300b      	adds	r0, #11
 800cf02:	1d23      	adds	r3, r4, #4
 800cf04:	4390      	bics	r0, r2
 800cf06:	1ac2      	subs	r2, r0, r3
 800cf08:	4298      	cmp	r0, r3
 800cf0a:	d0e6      	beq.n	800ceda <_malloc_r+0x5a>
 800cf0c:	1a1b      	subs	r3, r3, r0
 800cf0e:	50a3      	str	r3, [r4, r2]
 800cf10:	e7e3      	b.n	800ceda <_malloc_r+0x5a>
 800cf12:	6053      	str	r3, [r2, #4]
 800cf14:	e7ef      	b.n	800cef6 <_malloc_r+0x76>
 800cf16:	0022      	movs	r2, r4
 800cf18:	6864      	ldr	r4, [r4, #4]
 800cf1a:	e7c2      	b.n	800cea2 <_malloc_r+0x22>
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	1cc4      	adds	r4, r0, #3
 800cf20:	439c      	bics	r4, r3
 800cf22:	42a0      	cmp	r0, r4
 800cf24:	d0e1      	beq.n	800ceea <_malloc_r+0x6a>
 800cf26:	1a21      	subs	r1, r4, r0
 800cf28:	0030      	movs	r0, r6
 800cf2a:	f000 f82d 	bl	800cf88 <_sbrk_r>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d1db      	bne.n	800ceea <_malloc_r+0x6a>
 800cf32:	e7c7      	b.n	800cec4 <_malloc_r+0x44>
 800cf34:	20000c14 	.word	0x20000c14
 800cf38:	20000c18 	.word	0x20000c18

0800cf3c <_realloc_r>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	0007      	movs	r7, r0
 800cf40:	000d      	movs	r5, r1
 800cf42:	0016      	movs	r6, r2
 800cf44:	2900      	cmp	r1, #0
 800cf46:	d105      	bne.n	800cf54 <_realloc_r+0x18>
 800cf48:	0011      	movs	r1, r2
 800cf4a:	f7ff ff99 	bl	800ce80 <_malloc_r>
 800cf4e:	0004      	movs	r4, r0
 800cf50:	0020      	movs	r0, r4
 800cf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf54:	2a00      	cmp	r2, #0
 800cf56:	d103      	bne.n	800cf60 <_realloc_r+0x24>
 800cf58:	f7ff ff48 	bl	800cdec <_free_r>
 800cf5c:	0034      	movs	r4, r6
 800cf5e:	e7f7      	b.n	800cf50 <_realloc_r+0x14>
 800cf60:	f000 f834 	bl	800cfcc <_malloc_usable_size_r>
 800cf64:	002c      	movs	r4, r5
 800cf66:	42b0      	cmp	r0, r6
 800cf68:	d2f2      	bcs.n	800cf50 <_realloc_r+0x14>
 800cf6a:	0031      	movs	r1, r6
 800cf6c:	0038      	movs	r0, r7
 800cf6e:	f7ff ff87 	bl	800ce80 <_malloc_r>
 800cf72:	1e04      	subs	r4, r0, #0
 800cf74:	d0ec      	beq.n	800cf50 <_realloc_r+0x14>
 800cf76:	0029      	movs	r1, r5
 800cf78:	0032      	movs	r2, r6
 800cf7a:	f7ff ff1a 	bl	800cdb2 <memcpy>
 800cf7e:	0029      	movs	r1, r5
 800cf80:	0038      	movs	r0, r7
 800cf82:	f7ff ff33 	bl	800cdec <_free_r>
 800cf86:	e7e3      	b.n	800cf50 <_realloc_r+0x14>

0800cf88 <_sbrk_r>:
 800cf88:	2300      	movs	r3, #0
 800cf8a:	b570      	push	{r4, r5, r6, lr}
 800cf8c:	4d06      	ldr	r5, [pc, #24]	; (800cfa8 <_sbrk_r+0x20>)
 800cf8e:	0004      	movs	r4, r0
 800cf90:	0008      	movs	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7f5 fce0 	bl	8002958 <_sbrk>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d103      	bne.n	800cfa4 <_sbrk_r+0x1c>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d000      	beq.n	800cfa4 <_sbrk_r+0x1c>
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	bd70      	pop	{r4, r5, r6, pc}
 800cfa6:	46c0      	nop			; (mov r8, r8)
 800cfa8:	20001f88 	.word	0x20001f88

0800cfac <__malloc_lock>:
 800cfac:	b510      	push	{r4, lr}
 800cfae:	4802      	ldr	r0, [pc, #8]	; (800cfb8 <__malloc_lock+0xc>)
 800cfb0:	f000 f814 	bl	800cfdc <__retarget_lock_acquire_recursive>
 800cfb4:	bd10      	pop	{r4, pc}
 800cfb6:	46c0      	nop			; (mov r8, r8)
 800cfb8:	20001f90 	.word	0x20001f90

0800cfbc <__malloc_unlock>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4802      	ldr	r0, [pc, #8]	; (800cfc8 <__malloc_unlock+0xc>)
 800cfc0:	f000 f80d 	bl	800cfde <__retarget_lock_release_recursive>
 800cfc4:	bd10      	pop	{r4, pc}
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	20001f90 	.word	0x20001f90

0800cfcc <_malloc_usable_size_r>:
 800cfcc:	1f0b      	subs	r3, r1, #4
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	1f18      	subs	r0, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	da01      	bge.n	800cfda <_malloc_usable_size_r+0xe>
 800cfd6:	580b      	ldr	r3, [r1, r0]
 800cfd8:	18c0      	adds	r0, r0, r3
 800cfda:	4770      	bx	lr

0800cfdc <__retarget_lock_acquire_recursive>:
 800cfdc:	4770      	bx	lr

0800cfde <__retarget_lock_release_recursive>:
 800cfde:	4770      	bx	lr

0800cfe0 <_init>:
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe2:	46c0      	nop			; (mov r8, r8)
 800cfe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe6:	bc08      	pop	{r3}
 800cfe8:	469e      	mov	lr, r3
 800cfea:	4770      	bx	lr

0800cfec <_fini>:
 800cfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfee:	46c0      	nop			; (mov r8, r8)
 800cff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cff2:	bc08      	pop	{r3}
 800cff4:	469e      	mov	lr, r3
 800cff6:	4770      	bx	lr
