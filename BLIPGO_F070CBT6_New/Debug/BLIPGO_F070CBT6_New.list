
BLIPGO_F070CBT6_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005418  08012f48  08012f48  00022f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018360  08018360  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  08018360  08018360  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018360  08018360  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018360  08018360  00028360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018364  08018364  00028364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fd8  200001f0  08018558  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031c8  08018558  000331c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dd26  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d41  00000000  00000000  0005df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  00063c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  00065f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001970b  00000000  00000000  00067fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d1a  00000000  00000000  000816ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2bf  00000000  00000000  000a73c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00122684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086ec  00000000  00000000  001226d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08012f30 	.word	0x08012f30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	08012f30 	.word	0x08012f30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_lmul>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	0415      	lsls	r5, r2, #16
 8000430:	0c2d      	lsrs	r5, r5, #16
 8000432:	000f      	movs	r7, r1
 8000434:	0001      	movs	r1, r0
 8000436:	002e      	movs	r6, r5
 8000438:	46c6      	mov	lr, r8
 800043a:	4684      	mov	ip, r0
 800043c:	0400      	lsls	r0, r0, #16
 800043e:	0c14      	lsrs	r4, r2, #16
 8000440:	0c00      	lsrs	r0, r0, #16
 8000442:	0c09      	lsrs	r1, r1, #16
 8000444:	4346      	muls	r6, r0
 8000446:	434d      	muls	r5, r1
 8000448:	4360      	muls	r0, r4
 800044a:	4361      	muls	r1, r4
 800044c:	1940      	adds	r0, r0, r5
 800044e:	0c34      	lsrs	r4, r6, #16
 8000450:	1824      	adds	r4, r4, r0
 8000452:	b500      	push	{lr}
 8000454:	42a5      	cmp	r5, r4
 8000456:	d903      	bls.n	8000460 <__aeabi_lmul+0x34>
 8000458:	2080      	movs	r0, #128	; 0x80
 800045a:	0240      	lsls	r0, r0, #9
 800045c:	4680      	mov	r8, r0
 800045e:	4441      	add	r1, r8
 8000460:	0c25      	lsrs	r5, r4, #16
 8000462:	186d      	adds	r5, r5, r1
 8000464:	4661      	mov	r1, ip
 8000466:	4359      	muls	r1, r3
 8000468:	437a      	muls	r2, r7
 800046a:	0430      	lsls	r0, r6, #16
 800046c:	1949      	adds	r1, r1, r5
 800046e:	0424      	lsls	r4, r4, #16
 8000470:	0c00      	lsrs	r0, r0, #16
 8000472:	1820      	adds	r0, r4, r0
 8000474:	1889      	adds	r1, r1, r2
 8000476:	bc80      	pop	{r7}
 8000478:	46b8      	mov	r8, r7
 800047a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800047c <beep>:
 *
 * return - none
 */

void beep(uint32_t time)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_SET);
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <beep+0x64>)
 8000486:	2201      	movs	r2, #1
 8000488:	2120      	movs	r1, #32
 800048a:	0018      	movs	r0, r3
 800048c:	f009 fbe0 	bl	8009c50 <HAL_GPIO_WritePin>
    timer->BDTR = TIM_BDTR_MOE;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <beep+0x68>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	645a      	str	r2, [r3, #68]	; 0x44
    timer->CR1 = TIM_CR1_CEN;
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <beep+0x68>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
    timer->EGR = TIM_EGR_UG;
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <beep+0x68>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2201      	movs	r2, #1
 80004a8:	615a      	str	r2, [r3, #20]
    timer->CCR1 = 500;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <beep+0x68>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	22fa      	movs	r2, #250	; 0xfa
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(time);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0018      	movs	r0, r3
 80004b8:	f009 f912 	bl	80096e0 <HAL_Delay>
    timer->BDTR = 0;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <beep+0x68>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2200      	movs	r2, #0
 80004c2:	645a      	str	r2, [r3, #68]	; 0x44
    timer->DIER = 0;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <beep+0x68>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin(BUZZOR_GPIO_Port,BUZZOR_Pin,GPIO_PIN_RESET);
 80004cc:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <beep+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2120      	movs	r1, #32
 80004d2:	0018      	movs	r0, r3
 80004d4:	f009 fbbc 	bl	8009c50 <HAL_GPIO_WritePin>
    return;
 80004d8:	46c0      	nop			; (mov r8, r8)
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	48000400 	.word	0x48000400
 80004e4:	2000020c 	.word	0x2000020c

080004e8 <beep_init>:
 *
 * return - none
 */

void beep_init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    timer = TIM16;
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <beep_init+0xa8>)
 80004f0:	4a28      	ldr	r2, [pc, #160]	; (8000594 <beep_init+0xac>)
 80004f2:	601a      	str	r2, [r3, #0]
    __HAL_RCC_TIM16_CLK_ENABLE();
 80004f4:	4b28      	ldr	r3, [pc, #160]	; (8000598 <beep_init+0xb0>)
 80004f6:	699a      	ldr	r2, [r3, #24]
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <beep_init+0xb0>)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0289      	lsls	r1, r1, #10
 80004fe:	430a      	orrs	r2, r1
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <beep_init+0xb0>)
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	029b      	lsls	r3, r3, #10
 800050a:	4013      	ands	r3, r2
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

    initstruc.Pin = BEEPER_PIN;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	0052      	lsls	r2, r2, #1
 8000516:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2202      	movs	r2, #2
 800051c:	605a      	str	r2, [r3, #4]
//    initstruc.Mode = GPIO_MODE_OUTPUT_PP; //zzz
    initstruc.Pull = GPIO_NOPULL;
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = GPIO_AF2_TIM16;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2202      	movs	r2, #2
 800052e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BEEPER_PORT, &initstruc);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4a1a      	ldr	r2, [pc, #104]	; (800059c <beep_init+0xb4>)
 8000534:	0019      	movs	r1, r3
 8000536:	0010      	movs	r0, r2
 8000538:	f009 fa1a 	bl	8009970 <HAL_GPIO_Init>

//    HAL_GPIO_WritePin(BEEPER_PORT, BEEPER_PIN, GPIO_PIN_SET);



    timer->PSC = 47;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <beep_init+0xa8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	222f      	movs	r2, #47	; 0x2f
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
    timer->ARR = 999;
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <beep_init+0xa8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <beep_init+0xb8>)
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
    timer->CCR1 = 500;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <beep_init+0xa8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	22fa      	movs	r2, #250	; 0xfa
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
    timer->RCR = 0;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <beep_init+0xa8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2200      	movs	r2, #0
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
    timer->CCMR1 = TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <beep_init+0xa8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2268      	movs	r2, #104	; 0x68
 8000564:	619a      	str	r2, [r3, #24]
    timer->CCER = TIM_CCER_CC1E;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <beep_init+0xa8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2201      	movs	r2, #1
 800056c:	621a      	str	r2, [r3, #32]
    timer->BDTR = TIM_BDTR_MOE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <beep_init+0xa8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	0212      	lsls	r2, r2, #8
 8000576:	645a      	str	r2, [r3, #68]	; 0x44
    timer->CR1 = TIM_CR1_CEN;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <beep_init+0xa8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
    timer->EGR = TIM_EGR_UG;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <beep_init+0xa8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2201      	movs	r2, #1
 8000586:	615a      	str	r2, [r3, #20]

    return;
 8000588:	46c0      	nop			; (mov r8, r8)
}
 800058a:	46bd      	mov	sp, r7
 800058c:	b006      	add	sp, #24
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000020c 	.word	0x2000020c
 8000594:	40014400 	.word	0x40014400
 8000598:	40021000 	.word	0x40021000
 800059c:	48000400 	.word	0x48000400
 80005a0:	000003e7 	.word	0x000003e7

080005a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a8:	f3bf 8f4f 	dsb	sy
}
 80005ac:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_SystemReset+0x1c>)
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SystemReset+0x20>)
 80005b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b4:	f3bf 8f4f 	dsb	sy
}
 80005b8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	e7fd      	b.n	80005ba <__NVIC_SystemReset+0x16>
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	05fa0004 	.word	0x05fa0004

080005c8 <cmmain>:
 *
 * \return - none
 */

void cmmain(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
    uint8_t flash_data;

    __HAL_RCC_AHB_FORCE_RESET();
 80005ce:	4ba1      	ldr	r3, [pc, #644]	; (8000854 <cmmain+0x28c>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	4252      	negs	r2, r2
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b9f      	ldr	r3, [pc, #636]	; (8000854 <cmmain+0x28c>)
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	4b9e      	ldr	r3, [pc, #632]	; (8000854 <cmmain+0x28c>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	4b9c      	ldr	r3, [pc, #624]	; (8000854 <cmmain+0x28c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_AHB_RELEASE_RESET();
 80005ee:	4b99      	ldr	r3, [pc, #612]	; (8000854 <cmmain+0x28c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
    SystemClock_Config();
 80005f4:	f006 feb6 	bl	8007364 <SystemClock_Config>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b96      	ldr	r3, [pc, #600]	; (8000854 <cmmain+0x28c>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	4b95      	ldr	r3, [pc, #596]	; (8000854 <cmmain+0x28c>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0289      	lsls	r1, r1, #10
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	4b93      	ldr	r3, [pc, #588]	; (8000854 <cmmain+0x28c>)
 8000608:	695a      	ldr	r2, [r3, #20]
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	029b      	lsls	r3, r3, #10
 800060e:	4013      	ands	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b8f      	ldr	r3, [pc, #572]	; (8000854 <cmmain+0x28c>)
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	4b8e      	ldr	r3, [pc, #568]	; (8000854 <cmmain+0x28c>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	02c9      	lsls	r1, r1, #11
 800061e:	430a      	orrs	r2, r1
 8000620:	615a      	str	r2, [r3, #20]
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <cmmain+0x28c>)
 8000624:	695a      	ldr	r2, [r3, #20]
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	02db      	lsls	r3, r3, #11
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000630:	4b88      	ldr	r3, [pc, #544]	; (8000854 <cmmain+0x28c>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	4b87      	ldr	r3, [pc, #540]	; (8000854 <cmmain+0x28c>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0309      	lsls	r1, r1, #12
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	4b85      	ldr	r3, [pc, #532]	; (8000854 <cmmain+0x28c>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	031b      	lsls	r3, r3, #12
 8000646:	4013      	ands	r3, r2
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800064c:	4b81      	ldr	r3, [pc, #516]	; (8000854 <cmmain+0x28c>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	4b80      	ldr	r3, [pc, #512]	; (8000854 <cmmain+0x28c>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <cmmain+0x28c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	2201      	movs	r2, #1
 800065e:	4013      	ands	r3, r2
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
    MX_SPI1_Init();
 8000664:	f006 ff4c 	bl	8007500 <MX_SPI1_Init>
    usb_init();
 8000668:	f008 f97e 	bl	8008968 <usb_init>
    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	200b      	movs	r0, #11
 8000672:	f009 f905 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000676:	200b      	movs	r0, #11
 8000678:	f009 f917 	bl	80098aa <HAL_NVIC_EnableIRQ>



    debug_printf(DBGLVL_MAX,(uint8_t *)"\r\nBlipGo %s USA\r\n", firmware_version);
 800067c:	4a76      	ldr	r2, [pc, #472]	; (8000858 <cmmain+0x290>)
 800067e:	4b77      	ldr	r3, [pc, #476]	; (800085c <cmmain+0x294>)
 8000680:	0019      	movs	r1, r3
 8000682:	2004      	movs	r0, #4
 8000684:	f002 f866 	bl	8002754 <debug_printf>


	server_clock = 0;
 8000688:	4b75      	ldr	r3, [pc, #468]	; (8000860 <cmmain+0x298>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

    debuglevel = DBGLVL_MAX;
 800068e:	4b75      	ldr	r3, [pc, #468]	; (8000864 <cmmain+0x29c>)
 8000690:	2204      	movs	r2, #4
 8000692:	601a      	str	r2, [r3, #0]
    mem_write_address = LOGS_START_ADDRESS;
 8000694:	4b74      	ldr	r3, [pc, #464]	; (8000868 <cmmain+0x2a0>)
 8000696:	22a0      	movs	r2, #160	; 0xa0
 8000698:	01d2      	lsls	r2, r2, #7
 800069a:	601a      	str	r2, [r3, #0]
    mem_read_address = LOGS_START_ADDRESS;
 800069c:	4b73      	ldr	r3, [pc, #460]	; (800086c <cmmain+0x2a4>)
 800069e:	22a0      	movs	r2, #160	; 0xa0
 80006a0:	01d2      	lsls	r2, r2, #7
 80006a2:	601a      	str	r2, [r3, #0]
	desired_reported_cv_matched_flag = 0;
 80006a4:	4b72      	ldr	r3, [pc, #456]	; (8000870 <cmmain+0x2a8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	sending_readings = 0;
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <cmmain+0x2ac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	fetching_readings = 0;
 80006b0:	4b71      	ldr	r3, [pc, #452]	; (8000878 <cmmain+0x2b0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]


    led_init();
 80006b6:	f006 fc71 	bl	8006f9c <led_init>
    cons_init();
 80006ba:	f001 ffaf 	bl	800261c <cons_init>
    quec_init();
 80006be:	f006 ff81 	bl	80075c4 <quec_init>
    esp_init();
 80006c2:	f002 fc1d 	bl	8002f00 <esp_init>

#if OLD_BOARD != 0
    quec_3v8enbl(1);
#endif

    beep_init();
 80006c6:	f7ff ff0f 	bl	80004e8 <beep_init>
    gsm_init();
 80006ca:	f004 fc41 	bl	8004f50 <gsm_init>
    espat_init();
 80006ce:	f003 f9e7 	bl	8003aa0 <espat_init>
    master_init();
 80006d2:	f008 fd9d 	bl	8009210 <master_init>

    beep(2000);
 80006d6:	23fa      	movs	r3, #250	; 0xfa
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fece 	bl	800047c <beep>
    led_green_set(LED_MODE_ON);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f006 fcbf 	bl	8007064 <led_green_set>
    led_red_set(LED_MODE_ON);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f006 fcfa 	bl	80070e0 <led_red_set>
    led_yellow_set(LED_MODE_ON);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f006 fd35 	bl	800715c <led_yellow_set>
    HAL_Delay(2000);
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	0018      	movs	r0, r3
 80006f8:	f008 fff2 	bl	80096e0 <HAL_Delay>
    led_green_set(LED_MODE_OFF);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f006 fcb1 	bl	8007064 <led_green_set>
    led_red_set(LED_MODE_OFF);
 8000702:	2000      	movs	r0, #0
 8000704:	f006 fcec 	bl	80070e0 <led_red_set>
    led_yellow_set(LED_MODE_OFF);
 8000708:	2000      	movs	r0, #0
 800070a:	f006 fd27 	bl	800715c <led_yellow_set>

    debug_printf(DBGLVL_MAX,(uint8_t *)"\r\nESP Turning ON\r\n");
 800070e:	4b5b      	ldr	r3, [pc, #364]	; (800087c <cmmain+0x2b4>)
 8000710:	0019      	movs	r1, r3
 8000712:	2004      	movs	r0, #4
 8000714:	f002 f81e 	bl	8002754 <debug_printf>
    esp_power_on();
 8000718:	f002 fc94 	bl	8003044 <esp_power_on>

    sFLASH_Init();
 800071c:	f008 fc31 	bl	8008f82 <sFLASH_Init>
    while(1)
    {
    }
#endif

    flash_data = sFLASH_ReadByte1(0);
 8000720:	2517      	movs	r5, #23
 8000722:	197c      	adds	r4, r7, r5
 8000724:	2000      	movs	r0, #0
 8000726:	f008 fccb 	bl	80090c0 <sFLASH_ReadByte1>
 800072a:	0003      	movs	r3, r0
 800072c:	7023      	strb	r3, [r4, #0]

    if(flash_data == 0xff || flash_data == '#')
 800072e:	197b      	adds	r3, r7, r5
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2bff      	cmp	r3, #255	; 0xff
 8000734:	d003      	beq.n	800073e <cmmain+0x176>
 8000736:	197b      	adds	r3, r7, r5
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b23      	cmp	r3, #35	; 0x23
 800073c:	d105      	bne.n	800074a <cmmain+0x182>
    {
        debug_printf(DBGLVL_MAX,(uint8_t *)"\r\nMEMORY OK\r\n");
 800073e:	4b50      	ldr	r3, [pc, #320]	; (8000880 <cmmain+0x2b8>)
 8000740:	0019      	movs	r1, r3
 8000742:	2004      	movs	r0, #4
 8000744:	f002 f806 	bl	8002754 <debug_printf>
 8000748:	e004      	b.n	8000754 <cmmain+0x18c>
    }

    else
    {
        debug_printf(DBGLVL_MAX,(uint8_t *)"\r\nMEMORY ERROR\r\n");
 800074a:	4b4e      	ldr	r3, [pc, #312]	; (8000884 <cmmain+0x2bc>)
 800074c:	0019      	movs	r1, r3
 800074e:	2004      	movs	r0, #4
 8000750:	f002 f800 	bl	8002754 <debug_printf>
    }

    read_devinfo_from_flash(DEVICE_ID_ADDRESS);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fa45 	bl	8001be4 <read_devinfo_from_flash>

////////// DEVICE SETTINGS FROM FLASH

    if(!read_settings_from_flash(DEVICE_SETTINGS_ADDRESS))
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	015b      	lsls	r3, r3, #5
 800075e:	0018      	movs	r0, r3
 8000760:	f001 fbb4 	bl	8001ecc <read_settings_from_flash>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d125      	bne.n	80007b4 <cmmain+0x1ec>
    {

        if(!read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS))
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	019b      	lsls	r3, r3, #6
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fbad 	bl	8001ecc <read_settings_from_flash>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d114      	bne.n	80007a0 <cmmain+0x1d8>
        {
            store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	015b      	lsls	r3, r3, #5
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fec8 	bl	8002510 <store_settings_to_flash>
            store_settings_to_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	019b      	lsls	r3, r3, #6
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fec3 	bl	8002510 <store_settings_to_flash>
            read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	015b      	lsls	r3, r3, #5
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fb9c 	bl	8001ecc <read_settings_from_flash>
            read_settings_from_flash(DEVICE_SETTINGS_BACKUP_ADDRESS);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	019b      	lsls	r3, r3, #6
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fb97 	bl	8001ecc <read_settings_from_flash>
 800079e:	e009      	b.n	80007b4 <cmmain+0x1ec>
        }

        else
        {
            store_settings_to_flash(DEVICE_SETTINGS_ADDRESS);
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	015b      	lsls	r3, r3, #5
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 feb3 	bl	8002510 <store_settings_to_flash>
            read_settings_from_flash(DEVICE_SETTINGS_ADDRESS);
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	015b      	lsls	r3, r3, #5
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fb8c 	bl	8001ecc <read_settings_from_flash>

    }

////////// RUNTIME PARAMETERS

    if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS))
 80007b4:	23c0      	movs	r3, #192	; 0xc0
 80007b6:	019b      	lsls	r3, r3, #6
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fad3 	bl	8001d64 <read_runtime_parameters_from_flash>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d125      	bne.n	800080e <cmmain+0x246>
    {

        if(!read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS))
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	01db      	lsls	r3, r3, #7
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 facc 	bl	8001d64 <read_runtime_parameters_from_flash>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d114      	bne.n	80007fa <cmmain+0x232>
        {
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 80007d0:	23c0      	movs	r3, #192	; 0xc0
 80007d2:	019b      	lsls	r3, r3, #6
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fe3f 	bl	8002458 <store_runtime_parameters_to_flash>
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fe3a 	bl	8002458 <store_runtime_parameters_to_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 80007e4:	23c0      	movs	r3, #192	; 0xc0
 80007e6:	019b      	lsls	r3, r3, #6
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 fabb 	bl	8001d64 <read_runtime_parameters_from_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	01db      	lsls	r3, r3, #7
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fab6 	bl	8001d64 <read_runtime_parameters_from_flash>
 80007f8:	e009      	b.n	800080e <cmmain+0x246>
        }

        else
        {
            store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 80007fa:	23c0      	movs	r3, #192	; 0xc0
 80007fc:	019b      	lsls	r3, r3, #6
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 fe2a 	bl	8002458 <store_runtime_parameters_to_flash>
            read_runtime_parameters_from_flash(RUNTIME_PARAMETERS_ADDRESS);
 8000804:	23c0      	movs	r3, #192	; 0xc0
 8000806:	019b      	lsls	r3, r3, #6
 8000808:	0018      	movs	r0, r3
 800080a:	f001 faab 	bl	8001d64 <read_runtime_parameters_from_flash>
        }

    }

	sprintf((char*)ble_ssid_name, "BlipGo+%s\0", device_id);
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <cmmain+0x2c0>)
 8000810:	491e      	ldr	r1, [pc, #120]	; (800088c <cmmain+0x2c4>)
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <cmmain+0x2c8>)
 8000814:	0018      	movs	r0, r3
 8000816:	f010 ff75 	bl	8011704 <siprintf>
    led_green_set(LED_MODE_ON);
 800081a:	2001      	movs	r0, #1
 800081c:	f006 fc22 	bl	8007064 <led_green_set>
    debug_printf(DBGLVL_MAX, (uint8_t *)"INIT COMPLETE\r\n");
 8000820:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <cmmain+0x2cc>)
 8000822:	0019      	movs	r1, r3
 8000824:	2004      	movs	r0, #4
 8000826:	f001 ff95 	bl	8002754 <debug_printf>

    while (1)
    {
        cons_task();
 800082a:	f001 ff0b 	bl	8002644 <cons_task>
    	quec_task();
 800082e:	f006 ffb1 	bl	8007794 <quec_task>
    	esp_task();
 8000832:	f002 fc7b 	bl	800312c <esp_task>
    	led_task();
 8000836:	f006 fccf 	bl	80071d8 <led_task>
    	state_machine(&gsm_stmachine);
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <cmmain+0x2d0>)
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fd4d 	bl	80022dc <state_machine>
    	state_machine(&esp_stmachine);
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <cmmain+0x2d4>)
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fd49 	bl	80022dc <state_machine>
    	state_machine(&master_stmachine);
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <cmmain+0x2d8>)
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fd45 	bl	80022dc <state_machine>
        cons_task();
 8000852:	e7ea      	b.n	800082a <cmmain+0x262>
 8000854:	40021000 	.word	0x40021000
 8000858:	08013ce0 	.word	0x08013ce0
 800085c:	08012f48 	.word	0x08012f48
 8000860:	20001f94 	.word	0x20001f94
 8000864:	20001f9c 	.word	0x20001f9c
 8000868:	20000008 	.word	0x20000008
 800086c:	2000000c 	.word	0x2000000c
 8000870:	20001a32 	.word	0x20001a32
 8000874:	20001d2c 	.word	0x20001d2c
 8000878:	20001f98 	.word	0x20001f98
 800087c:	08012f5c 	.word	0x08012f5c
 8000880:	08012f70 	.word	0x08012f70
 8000884:	08012f80 	.word	0x08012f80
 8000888:	20001a34 	.word	0x20001a34
 800088c:	08012f94 	.word	0x08012f94
 8000890:	20001a00 	.word	0x20001a00
 8000894:	08012fa0 	.word	0x08012fa0
 8000898:	20001fb0 	.word	0x20001fb0
 800089c:	20001fa4 	.word	0x20001fa4
 80008a0:	20002fa8 	.word	0x20002fa8

080008a4 <compare_cvs>:
 *
 */


void compare_cvs(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
    uint16_t desired_cv;
    uint16_t reported_cv;

    desired_cv = 0;
 80008aa:	1dbb      	adds	r3, r7, #6
 80008ac:	2200      	movs	r2, #0
 80008ae:	801a      	strh	r2, [r3, #0]
    reported_cv = 0;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]

	if (json_get_value("sd", 2, 1, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <compare_cvs+0xb0>)
 80008b8:	4827      	ldr	r0, [pc, #156]	; (8000958 <compare_cvs+0xb4>)
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	9200      	str	r2, [sp, #0]
 80008be:	2201      	movs	r2, #1
 80008c0:	2102      	movs	r1, #2
 80008c2:	f000 fa05 	bl	8000cd0 <json_get_value>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d005      	beq.n	80008d6 <compare_cvs+0x32>
	{
	    debug_printf(DBGLVL_MIN, (uint8_t *)"Setup Data: &s\r\n", temp_data);
 80008ca:	4a22      	ldr	r2, [pc, #136]	; (8000954 <compare_cvs+0xb0>)
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <compare_cvs+0xb8>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	2001      	movs	r0, #1
 80008d2:	f001 ff3f 	bl	8002754 <debug_printf>
	}

	if (json_get_value("cv", 2, 1, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <compare_cvs+0xb0>)
 80008d8:	4821      	ldr	r0, [pc, #132]	; (8000960 <compare_cvs+0xbc>)
 80008da:	2264      	movs	r2, #100	; 0x64
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	f000 f9f5 	bl	8000cd0 <json_get_value>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d005      	beq.n	80008f6 <compare_cvs+0x52>
	{
	    debug_printf(DBGLVL_MIN, (uint8_t *)"Desired Configuration Version: &s\r\n", temp_data);
 80008ea:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <compare_cvs+0xb0>)
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <compare_cvs+0xc0>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	f001 ff2f 	bl	8002754 <debug_printf>
    }

	desired_cv = atol((char*)temp_data);
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <compare_cvs+0xb0>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f010 fc3d 	bl	8011178 <atol>
 80008fe:	0002      	movs	r2, r0
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	801a      	strh	r2, [r3, #0]

	if (json_get_value("cv", 2, 2, (char*)temp_data, 100))/////// GET SETUP DATA VALUE FROM JSON RESPONSE
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <compare_cvs+0xb0>)
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <compare_cvs+0xbc>)
 8000908:	2264      	movs	r2, #100	; 0x64
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	2202      	movs	r2, #2
 800090e:	2102      	movs	r1, #2
 8000910:	f000 f9de 	bl	8000cd0 <json_get_value>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d005      	beq.n	8000924 <compare_cvs+0x80>
	{
	    debug_printf(DBGLVL_MIN, (uint8_t *)"Reported Configuration Version: &s\r\n", temp_data);
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <compare_cvs+0xb0>)
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <compare_cvs+0xc4>)
 800091c:	0019      	movs	r1, r3
 800091e:	2001      	movs	r0, #1
 8000920:	f001 ff18 	bl	8002754 <debug_printf>
	}

	reported_cv = atol((char*)temp_data);
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <compare_cvs+0xb0>)
 8000926:	0018      	movs	r0, r3
 8000928:	f010 fc26 	bl	8011178 <atol>
 800092c:	0002      	movs	r2, r0
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	801a      	strh	r2, [r3, #0]

	if (desired_cv == reported_cv)
 8000932:	1dba      	adds	r2, r7, #6
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	8812      	ldrh	r2, [r2, #0]
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	d103      	bne.n	8000946 <compare_cvs+0xa2>
	{
		desired_reported_cv_matched_flag = 1;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <compare_cvs+0xc8>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
	else
	{
		desired_reported_cv_matched_flag = 0;
	}

    return;
 8000944:	e003      	b.n	800094e <compare_cvs+0xaa>
		desired_reported_cv_matched_flag = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <compare_cvs+0xc8>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
    return;
 800094c:	46c0      	nop			; (mov r8, r8)
}
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200003d8 	.word	0x200003d8
 8000958:	08012fb0 	.word	0x08012fb0
 800095c:	08012fb4 	.word	0x08012fb4
 8000960:	08012fc8 	.word	0x08012fc8
 8000964:	08012fcc 	.word	0x08012fcc
 8000968:	08012ff0 	.word	0x08012ff0
 800096c:	20001a32 	.word	0x20001a32

08000970 <configuration_service>:
 *
 * \return - none
 */

void configuration_service(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af02      	add	r7, sp, #8
    {

	}


	if (json_get_value("mqtt", 4, 1, (char*)temp_data, 100))/////// GET MQTT VERSION VALUE FROM JSON RESPONSE
 8000976:	4b35      	ldr	r3, [pc, #212]	; (8000a4c <configuration_service+0xdc>)
 8000978:	4835      	ldr	r0, [pc, #212]	; (8000a50 <configuration_service+0xe0>)
 800097a:	2264      	movs	r2, #100	; 0x64
 800097c:	9200      	str	r2, [sp, #0]
 800097e:	2201      	movs	r2, #1
 8000980:	2104      	movs	r1, #4
 8000982:	f000 f9a5 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("tls", 3, 1, (char*)temp_data, 100))/////// GET TLS VERSION VALUE FROM JSON RESPONSE
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <configuration_service+0xdc>)
 8000988:	4832      	ldr	r0, [pc, #200]	; (8000a54 <configuration_service+0xe4>)
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	9200      	str	r2, [sp, #0]
 800098e:	2201      	movs	r2, #1
 8000990:	2103      	movs	r1, #3
 8000992:	f000 f99d 	bl	8000cd0 <json_get_value>
    {

	}

	if(json_get_value("did", 3, 1, (char*)temp_data, 100))/////// GET DEVICE ID VALUE FROM JSON RESPONSE
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <configuration_service+0xdc>)
 8000998:	482f      	ldr	r0, [pc, #188]	; (8000a58 <configuration_service+0xe8>)
 800099a:	2264      	movs	r2, #100	; 0x64
 800099c:	9200      	str	r2, [sp, #0]
 800099e:	2201      	movs	r2, #1
 80009a0:	2103      	movs	r1, #3
 80009a2:	f000 f995 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("svr", 3, 1, (char*)mqtt_server, 100))/////// GET SERVER HOST NAME VALUE FROM JSON RESPONSE
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <configuration_service+0xec>)
 80009a8:	482d      	ldr	r0, [pc, #180]	; (8000a60 <configuration_service+0xf0>)
 80009aa:	2264      	movs	r2, #100	; 0x64
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	2103      	movs	r1, #3
 80009b2:	f000 f98d 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("prt", 3, 1, (char*)mqtt_port, 7))/////// GET PORT VALUE FROM JSON RESPONSE
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <configuration_service+0xf4>)
 80009b8:	482b      	ldr	r0, [pc, #172]	; (8000a68 <configuration_service+0xf8>)
 80009ba:	2207      	movs	r2, #7
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	2201      	movs	r2, #1
 80009c0:	2103      	movs	r1, #3
 80009c2:	f000 f985 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("un", 2, 1, (char*)mqtt_username, 100))/////// GET USERNAME VALUE FROM JSON RESPONSE
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <configuration_service+0xfc>)
 80009c8:	4829      	ldr	r0, [pc, #164]	; (8000a70 <configuration_service+0x100>)
 80009ca:	2264      	movs	r2, #100	; 0x64
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	2201      	movs	r2, #1
 80009d0:	2102      	movs	r1, #2
 80009d2:	f000 f97d 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("pd", 2, 1, (char*)mqtt_password, 50))/////// GET PASSWORD VALUE FROM JSON RESPONSE
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <configuration_service+0x104>)
 80009d8:	4827      	ldr	r0, [pc, #156]	; (8000a78 <configuration_service+0x108>)
 80009da:	2232      	movs	r2, #50	; 0x32
 80009dc:	9200      	str	r2, [sp, #0]
 80009de:	2201      	movs	r2, #1
 80009e0:	2102      	movs	r1, #2
 80009e2:	f000 f975 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("cid", 3, 1, (char*)mqtt_client_id, 100))/////// GET CLIENT ID VALUE FROM JSON RESPONSE
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <configuration_service+0x10c>)
 80009e8:	4825      	ldr	r0, [pc, #148]	; (8000a80 <configuration_service+0x110>)
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	9200      	str	r2, [sp, #0]
 80009ee:	2201      	movs	r2, #1
 80009f0:	2103      	movs	r1, #3
 80009f2:	f000 f96d 	bl	8000cd0 <json_get_value>
    {

	}

	if(json_get_value("qos", 3, 1, (char*)temp_data, 100))/////// GET QOS VALUE FROM JSON RESPONSE
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <configuration_service+0xdc>)
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <configuration_service+0x114>)
 80009fa:	2264      	movs	r2, #100	; 0x64
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	2201      	movs	r2, #1
 8000a00:	2103      	movs	r1, #3
 8000a02:	f000 f965 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("twin_sb", 7, 1, (char*)twin_sb, 100))/////// GET SUBSCRIBE TOPIC VALUE FROM JSON RESPONSE
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <configuration_service+0x118>)
 8000a08:	4820      	ldr	r0, [pc, #128]	; (8000a8c <configuration_service+0x11c>)
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	9200      	str	r2, [sp, #0]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2107      	movs	r1, #7
 8000a12:	f000 f95d 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("twin_pb", 7, 1, (char*)twin_pb, 100))/////// GET PUBLISH TOPIC FOR NULL DATA VALUE FROM JSON RESPONSE
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <configuration_service+0x120>)
 8000a18:	481e      	ldr	r0, [pc, #120]	; (8000a94 <configuration_service+0x124>)
 8000a1a:	2264      	movs	r2, #100	; 0x64
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2107      	movs	r1, #7
 8000a22:	f000 f955 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("twin_rp", 7, 1, (char*)twin_rp, 100))/////// GET PUBLISH TOPIC TO REPORT META DATA VALUE FROM JSON RESPONSE
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <configuration_service+0x128>)
 8000a28:	481c      	ldr	r0, [pc, #112]	; (8000a9c <configuration_service+0x12c>)
 8000a2a:	2264      	movs	r2, #100	; 0x64
 8000a2c:	9200      	str	r2, [sp, #0]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2107      	movs	r1, #7
 8000a32:	f000 f94d 	bl	8000cd0 <json_get_value>
	{

	}

	if(json_get_value("read_pb", 7, 1, (char*)read_pb, 100))/////// GET PUBLISH TOPIC FOR MEASUREMENT DATA VALUE FROM JSON RESPONSE
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <configuration_service+0x130>)
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <configuration_service+0x134>)
 8000a3a:	2264      	movs	r2, #100	; 0x64
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2107      	movs	r1, #7
 8000a42:	f000 f945 	bl	8000cd0 <json_get_value>

	}



	return;
 8000a46:	46c0      	nop			; (mov r8, r8)
}
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200003d8 	.word	0x200003d8
 8000a50:	08013018 	.word	0x08013018
 8000a54:	08013020 	.word	0x08013020
 8000a58:	08013024 	.word	0x08013024
 8000a5c:	20001f1c 	.word	0x20001f1c
 8000a60:	08013028 	.word	0x08013028
 8000a64:	20001dc0 	.word	0x20001dc0
 8000a68:	0801302c 	.word	0x0801302c
 8000a6c:	20001dc8 	.word	0x20001dc8
 8000a70:	08013030 	.word	0x08013030
 8000a74:	20001ee4 	.word	0x20001ee4
 8000a78:	08013034 	.word	0x08013034
 8000a7c:	2000199c 	.word	0x2000199c
 8000a80:	08013038 	.word	0x08013038
 8000a84:	0801303c 	.word	0x0801303c
 8000a88:	20001d30 	.word	0x20001d30
 8000a8c:	08013040 	.word	0x08013040
 8000a90:	20001a60 	.word	0x20001a60
 8000a94:	08013048 	.word	0x08013048
 8000a98:	20001e80 	.word	0x20001e80
 8000a9c:	08013050 	.word	0x08013050
 8000aa0:	20001288 	.word	0x20001288
 8000aa4:	08013058 	.word	0x08013058

08000aa8 <convert_to_epoch>:
 * \return - none
 */


uint32_t convert_to_epoch(uint8_t *ascdate, uint8_t *asctime)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b095      	sub	sp, #84	; 0x54
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	struct tm t;

	uint32_t t_of_day;

	unsigned char yr[5]={0}, mon[3]={0}, day[3]={0}, hr[3]={0}, min[3]={0}, sec[3]={0};
 8000ab2:	2020      	movs	r0, #32
 8000ab4:	183b      	adds	r3, r7, r0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	711a      	strb	r2, [r3, #4]
 8000abe:	251c      	movs	r5, #28
 8000ac0:	197b      	adds	r3, r7, r5
 8000ac2:	4a51      	ldr	r2, [pc, #324]	; (8000c08 <convert_to_epoch+0x160>)
 8000ac4:	8812      	ldrh	r2, [r2, #0]
 8000ac6:	801a      	strh	r2, [r3, #0]
 8000ac8:	2202      	movs	r2, #2
 8000aca:	2100      	movs	r1, #0
 8000acc:	5499      	strb	r1, [r3, r2]
 8000ace:	2418      	movs	r4, #24
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	4a4d      	ldr	r2, [pc, #308]	; (8000c08 <convert_to_epoch+0x160>)
 8000ad4:	8812      	ldrh	r2, [r2, #0]
 8000ad6:	801a      	strh	r2, [r3, #0]
 8000ad8:	2202      	movs	r2, #2
 8000ada:	2100      	movs	r1, #0
 8000adc:	5499      	strb	r1, [r3, r2]
 8000ade:	2314      	movs	r3, #20
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <convert_to_epoch+0x160>)
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	801a      	strh	r2, [r3, #0]
 8000ae8:	2202      	movs	r2, #2
 8000aea:	2100      	movs	r1, #0
 8000aec:	5499      	strb	r1, [r3, r2]
 8000aee:	2210      	movs	r2, #16
 8000af0:	18bb      	adds	r3, r7, r2
 8000af2:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <convert_to_epoch+0x160>)
 8000af4:	8812      	ldrh	r2, [r2, #0]
 8000af6:	801a      	strh	r2, [r3, #0]
 8000af8:	2202      	movs	r2, #2
 8000afa:	2100      	movs	r1, #0
 8000afc:	5499      	strb	r1, [r3, r2]
 8000afe:	210c      	movs	r1, #12
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	4a41      	ldr	r2, [pc, #260]	; (8000c08 <convert_to_epoch+0x160>)
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	801a      	strh	r2, [r3, #0]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	5499      	strb	r1, [r3, r2]

	 yr[0] = '2';
 8000b0e:	0001      	movs	r1, r0
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2232      	movs	r2, #50	; 0x32
 8000b14:	701a      	strb	r2, [r3, #0]
	 yr[1] = '0';
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2230      	movs	r2, #48	; 0x30
 8000b1a:	705a      	strb	r2, [r3, #1]
	 yr[2] = ascdate[2];
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	789a      	ldrb	r2, [r3, #2]
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	709a      	strb	r2, [r3, #2]
	 yr[3] = ascdate[3];
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	78da      	ldrb	r2, [r3, #3]
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	70da      	strb	r2, [r3, #3]

	 mon[0] = ascdate[5];
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	795a      	ldrb	r2, [r3, #5]
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	701a      	strb	r2, [r3, #0]
	 mon[1] = ascdate[6];
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	799a      	ldrb	r2, [r3, #6]
 8000b38:	197b      	adds	r3, r7, r5
 8000b3a:	705a      	strb	r2, [r3, #1]

	 day[0] = ascdate[8];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a1a      	ldrb	r2, [r3, #8]
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	701a      	strb	r2, [r3, #0]
	 day[1] = ascdate[9];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7a5a      	ldrb	r2, [r3, #9]
 8000b48:	0026      	movs	r6, r4
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	705a      	strb	r2, [r3, #1]

	 hr[0] = asctime[0];
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	2014      	movs	r0, #20
 8000b54:	183b      	adds	r3, r7, r0
 8000b56:	701a      	strb	r2, [r3, #0]
	 hr[1] = asctime[1];
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	785a      	ldrb	r2, [r3, #1]
 8000b5c:	183b      	adds	r3, r7, r0
 8000b5e:	705a      	strb	r2, [r3, #1]

	 min[0] = asctime[3];
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	78da      	ldrb	r2, [r3, #3]
 8000b64:	2410      	movs	r4, #16
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	701a      	strb	r2, [r3, #0]
	 min[1] = asctime[4];
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	791a      	ldrb	r2, [r3, #4]
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	705a      	strb	r2, [r3, #1]

	 sec[0] = asctime[6];
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	799a      	ldrb	r2, [r3, #6]
 8000b76:	240c      	movs	r4, #12
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	701a      	strb	r2, [r3, #0]
	 sec[1] = asctime[7];
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	79da      	ldrb	r2, [r3, #7]
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	705a      	strb	r2, [r3, #1]

	 t.tm_year = atoi((char*)yr)-1900;  // Year - 1970
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	0018      	movs	r0, r3
 8000b88:	f010 faf0 	bl	801116c <atoi>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <convert_to_epoch+0x164>)
 8000b90:	189a      	adds	r2, r3, r2
 8000b92:	2428      	movs	r4, #40	; 0x28
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	615a      	str	r2, [r3, #20]
		t.tm_mon = atoi((char*)mon)-1;           // Month, where 0 = jan
 8000b98:	197b      	adds	r3, r7, r5
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f010 fae6 	bl	801116c <atoi>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	1e5a      	subs	r2, r3, #1
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	611a      	str	r2, [r3, #16]
		t.tm_mday = atoi((char*)day);          // Day of the month
 8000ba8:	19bb      	adds	r3, r7, r6
 8000baa:	0018      	movs	r0, r3
 8000bac:	f010 fade 	bl	801116c <atoi>
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	60da      	str	r2, [r3, #12]
		t.tm_hour = atoi((char*)hr);
 8000bb6:	2014      	movs	r0, #20
 8000bb8:	183b      	adds	r3, r7, r0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f010 fad6 	bl	801116c <atoi>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	609a      	str	r2, [r3, #8]
		t.tm_min = atoi((char*)min);
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f010 face 	bl	801116c <atoi>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	605a      	str	r2, [r3, #4]
		t.tm_sec = atoi((char*)sec);
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f010 fac6 	bl	801116c <atoi>
 8000be0:	0002      	movs	r2, r0
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	601a      	str	r2, [r3, #0]
		t.tm_isdst = 0;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
		t_of_day = mktime(&t);
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f010 fbc0 	bl	8011374 <mktime>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c

		return t_of_day;
 8000bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b015      	add	sp, #84	; 0x54
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	08013060 	.word	0x08013060
 8000c0c:	fffff894 	.word	0xfffff894

08000c10 <dma_ch4_5_ih>:
 *
 * \return - none
 */

void dma_ch4_5_ih(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
    uint32_t isrflags;

    isrflags = DMA1->ISR;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <dma_ch4_5_ih+0x2c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	607b      	str	r3, [r7, #4]

    if (isrflags & DMA_ISR_TCIF4)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	4013      	ands	r3, r2
 8000c24:	d002      	beq.n	8000c2c <dma_ch4_5_ih+0x1c>
    {
        quec_dma_ih();
 8000c26:	f007 f8b5 	bl	8007d94 <quec_dma_ih>
        return;
 8000c2a:	e003      	b.n	8000c34 <dma_ch4_5_ih+0x24>
    }

    DMA1->IFCR = isrflags;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <dma_ch4_5_ih+0x2c>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	605a      	str	r2, [r3, #4]
    return;
 8000c32:	46c0      	nop			; (mov r8, r8)
}
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40020000 	.word	0x40020000

08000c40 <crash>:
 *
 * \return - none
 */

void crash(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 8000c44:	f7ff fcae 	bl	80005a4 <__NVIC_SystemReset>

08000c48 <erase_all_records>:
 *
 * \return - none
 */

void erase_all_records(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	sFLASH_EraseBulk(LOGS_START_ADDRESS);
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	0018      	movs	r0, r3
 8000c52:	f008 f9ef 	bl	8009034 <sFLASH_EraseBulk>

	mem_write_address=LOGS_START_ADDRESS;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <erase_all_records+0x38>)
 8000c58:	22a0      	movs	r2, #160	; 0xa0
 8000c5a:	01d2      	lsls	r2, r2, #7
 8000c5c:	601a      	str	r2, [r3, #0]
	mem_read_address=LOGS_START_ADDRESS;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <erase_all_records+0x3c>)
 8000c60:	22a0      	movs	r2, #160	; 0xa0
 8000c62:	01d2      	lsls	r2, r2, #7
 8000c64:	601a      	str	r2, [r3, #0]

	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8000c66:	23c0      	movs	r3, #192	; 0xc0
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fbf4 	bl	8002458 <store_runtime_parameters_to_flash>
	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	01db      	lsls	r3, r3, #7
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fbef 	bl	8002458 <store_runtime_parameters_to_flash>
	return;
 8000c7a:	46c0      	nop			; (mov r8, r8)
}
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000008 	.word	0x20000008
 8000c84:	2000000c 	.word	0x2000000c

08000c88 <flush_array>:
 *
 * \return - none
 */

void flush_array(uint8_t *str, uint16_t len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	000a      	movs	r2, r1
 8000c92:	1cbb      	adds	r3, r7, #2
 8000c94:	801a      	strh	r2, [r3, #0]

    for(uint16_t i = 0; i < len; i++)
 8000c96:	230e      	movs	r3, #14
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	e00b      	b.n	8000cb8 <flush_array+0x30>
    {
        str[i] = 0;
 8000ca0:	210e      	movs	r1, #14
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
    for(uint16_t i = 0; i < len; i++)
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	801a      	strh	r2, [r3, #0]
 8000cb8:	230e      	movs	r3, #14
 8000cba:	18fa      	adds	r2, r7, r3
 8000cbc:	1cbb      	adds	r3, r7, #2
 8000cbe:	8812      	ldrh	r2, [r2, #0]
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3ec      	bcc.n	8000ca0 <flush_array+0x18>
    }

    return;
 8000cc6:	46c0      	nop			; (mov r8, r8)
}
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <json_get_value>:
 * ///{"st":1,"ca":1260,"ck":1678,"cc":1479,"sc":398,"cv":"1","tk":"wCCgqF6gDTWC3qWg"}
 * //// occurance is added to get value in case of multiple occurance
 */

uint8_t json_get_value(uint8_t *parameter, uint8_t parameter_length, uint8_t occurance, uint8_t *variable, uint8_t variable_size)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	0008      	movs	r0, r1
 8000cda:	0011      	movs	r1, r2
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	230b      	movs	r3, #11
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	1c02      	adds	r2, r0, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	1c0a      	adds	r2, r1, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	uint8_t occurance_count;
	uint8_t bracket_flag;
	uint8_t j;
	uint16_t i;

	parameter_index=0;
 8000cee:	2317      	movs	r3, #23
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	variable_index=0;
 8000cf6:	2316      	movs	r3, #22
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
	occurance_count=0;
 8000cfe:	2315      	movs	r3, #21
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	bracket_flag=0;
 8000d06:	2314      	movs	r3, #20
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]

	for(i=0; i <= json_count; i++)
 8000d0e:	2310      	movs	r3, #16
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	2200      	movs	r2, #0
 8000d14:	801a      	strh	r2, [r3, #0]
 8000d16:	e0e5      	b.n	8000ee4 <json_get_value+0x214>
	{
		if(json_response[i] == parameter[parameter_index])
 8000d18:	2310      	movs	r3, #16
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	4a78      	ldr	r2, [pc, #480]	; (8000f00 <json_get_value+0x230>)
 8000d20:	5cd2      	ldrb	r2, [r2, r3]
 8000d22:	2017      	movs	r0, #23
 8000d24:	183b      	adds	r3, r7, r0
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	68f9      	ldr	r1, [r7, #12]
 8000d2a:	18cb      	adds	r3, r1, r3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d000      	beq.n	8000d34 <json_get_value+0x64>
 8000d32:	e0ca      	b.n	8000eca <json_get_value+0x1fa>
		{
			if(parameter_index == parameter_length-1)////// PARAMETER FOUND CONDITION
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	230b      	movs	r3, #11
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d000      	beq.n	8000d46 <json_get_value+0x76>
 8000d44:	e0ba      	b.n	8000ebc <json_get_value+0x1ec>
			{
				occurance_count++;
 8000d46:	2115      	movs	r1, #21
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	3201      	adds	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]

				if(occurance_count==occurance)
 8000d52:	187a      	adds	r2, r7, r1
 8000d54:	230a      	movs	r3, #10
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d000      	beq.n	8000d62 <json_get_value+0x92>
 8000d60:	e0b5      	b.n	8000ece <json_get_value+0x1fe>
				{
					for(j = 0; j < variable_size; j++)/////// FLUSH VARIABLE
 8000d62:	2313      	movs	r3, #19
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e00b      	b.n	8000d84 <json_get_value+0xb4>
					{
						variable[j] = 0;
 8000d6c:	2113      	movs	r1, #19
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
					for(j = 0; j < variable_size; j++)/////// FLUSH VARIABLE
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	3201      	adds	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	2313      	movs	r3, #19
 8000d86:	18fa      	adds	r2, r7, r3
 8000d88:	2320      	movs	r3, #32
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3eb      	bcc.n	8000d6c <json_get_value+0x9c>
					}

					if(json_response[i+3]==' ')//////////// CONDITION FOR space after semicolon "sd": "123123"
 8000d94:	2110      	movs	r1, #16
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	3303      	adds	r3, #3
 8000d9c:	4a58      	ldr	r2, [pc, #352]	; (8000f00 <json_get_value+0x230>)
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	d104      	bne.n	8000dae <json_get_value+0xde>
						i = i+1;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	187a      	adds	r2, r7, r1
 8000da8:	8812      	ldrh	r2, [r2, #0]
 8000daa:	3201      	adds	r2, #1
 8000dac:	801a      	strh	r2, [r3, #0]

					if(json_response[i+3]=='"')//////////// CONDITION FOR NUMERIC OR STRING VALUE
 8000dae:	2110      	movs	r1, #16
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	3303      	adds	r3, #3
 8000db6:	4a52      	ldr	r2, [pc, #328]	; (8000f00 <json_get_value+0x230>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	2b22      	cmp	r3, #34	; 0x22
 8000dbc:	d105      	bne.n	8000dca <json_get_value+0xfa>
						i = i+4;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	187a      	adds	r2, r7, r1
 8000dc2:	8812      	ldrh	r2, [r2, #0]
 8000dc4:	3204      	adds	r2, #4
 8000dc6:	801a      	strh	r2, [r3, #0]
 8000dc8:	e012      	b.n	8000df0 <json_get_value+0x120>
					else if(json_response[i+3]=='{')//////////// CONDITION FOR "desired": { }
 8000dca:	2310      	movs	r3, #16
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	3303      	adds	r3, #3
 8000dd2:	4a4b      	ldr	r2, [pc, #300]	; (8000f00 <json_get_value+0x230>)
 8000dd4:	5cd3      	ldrb	r3, [r2, r3]
 8000dd6:	2b7b      	cmp	r3, #123	; 0x7b
 8000dd8:	d104      	bne.n	8000de4 <json_get_value+0x114>
						bracket_flag = 1;
 8000dda:	2314      	movs	r3, #20
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e005      	b.n	8000df0 <json_get_value+0x120>
					else
						i = i+3;
 8000de4:	2210      	movs	r2, #16
 8000de6:	18bb      	adds	r3, r7, r2
 8000de8:	18ba      	adds	r2, r7, r2
 8000dea:	8812      	ldrh	r2, [r2, #0]
 8000dec:	3203      	adds	r2, #3
 8000dee:	801a      	strh	r2, [r3, #0]

					for(i=i; i <= json_count; i++)/////// COPY PARAMETER VALUE TO VARIABLE
 8000df0:	2210      	movs	r2, #16
 8000df2:	18bb      	adds	r3, r7, r2
 8000df4:	18ba      	adds	r2, r7, r2
 8000df6:	8812      	ldrh	r2, [r2, #0]
 8000df8:	801a      	strh	r2, [r3, #0]
 8000dfa:	e058      	b.n	8000eae <json_get_value+0x1de>
					{
						if(bracket_flag && json_response[i]=='}')////// COPY COMPLETE CONDITION IN CASE OF "desired": { }
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01d      	beq.n	8000e42 <json_get_value+0x172>
 8000e06:	2010      	movs	r0, #16
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	; (8000f00 <json_get_value+0x230>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	2b7d      	cmp	r3, #125	; 0x7d
 8000e12:	d116      	bne.n	8000e42 <json_get_value+0x172>
						{
							if(variable_index < variable_size)////////  TO AVOID BUFFER OVERFLOW
 8000e14:	2116      	movs	r1, #22
 8000e16:	187a      	adds	r2, r7, r1
 8000e18:	2320      	movs	r3, #32
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d20c      	bcs.n	8000e3e <json_get_value+0x16e>
								variable[variable_index++] = json_response[i];
 8000e24:	183b      	adds	r3, r7, r0
 8000e26:	881a      	ldrh	r2, [r3, #0]
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	1c58      	adds	r0, r3, #1
 8000e30:	7008      	strb	r0, [r1, #0]
 8000e32:	0019      	movs	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	185b      	adds	r3, r3, r1
 8000e38:	4931      	ldr	r1, [pc, #196]	; (8000f00 <json_get_value+0x230>)
 8000e3a:	5c8a      	ldrb	r2, [r1, r2]
 8000e3c:	701a      	strb	r2, [r3, #0]
							return 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e059      	b.n	8000ef6 <json_get_value+0x226>
						}
						else if(!bracket_flag && (json_response[i]=='"' || json_response[i]==',' || json_response[i]=='}'))////// COPY COMPLETE CONDITION
 8000e42:	2314      	movs	r3, #20
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d114      	bne.n	8000e76 <json_get_value+0x1a6>
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	4a2b      	ldr	r2, [pc, #172]	; (8000f00 <json_get_value+0x230>)
 8000e54:	5cd3      	ldrb	r3, [r2, r3]
 8000e56:	2b22      	cmp	r3, #34	; 0x22
 8000e58:	d00b      	beq.n	8000e72 <json_get_value+0x1a2>
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <json_get_value+0x230>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	2b2c      	cmp	r3, #44	; 0x2c
 8000e64:	d005      	beq.n	8000e72 <json_get_value+0x1a2>
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <json_get_value+0x230>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	2b7d      	cmp	r3, #125	; 0x7d
 8000e70:	d101      	bne.n	8000e76 <json_get_value+0x1a6>
						{
							return 1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e03f      	b.n	8000ef6 <json_get_value+0x226>
						}
						else
						{
							if(variable_index < variable_size)////////  TO AVOID BUFFER OVERFLOW
 8000e76:	2116      	movs	r1, #22
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	2320      	movs	r3, #32
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d20d      	bcs.n	8000ea2 <json_get_value+0x1d2>
								variable[variable_index++] = json_response[i];
 8000e86:	2310      	movs	r3, #16
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	1879      	adds	r1, r7, r1
 8000e92:	1c58      	adds	r0, r3, #1
 8000e94:	7008      	strb	r0, [r1, #0]
 8000e96:	0019      	movs	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	185b      	adds	r3, r3, r1
 8000e9c:	4918      	ldr	r1, [pc, #96]	; (8000f00 <json_get_value+0x230>)
 8000e9e:	5c8a      	ldrb	r2, [r1, r2]
 8000ea0:	701a      	strb	r2, [r3, #0]
					for(i=i; i <= json_count; i++)/////// COPY PARAMETER VALUE TO VARIABLE
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	881a      	ldrh	r2, [r3, #0]
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	3201      	adds	r2, #1
 8000eac:	801a      	strh	r2, [r3, #0]
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <json_get_value+0x234>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d99f      	bls.n	8000dfc <json_get_value+0x12c>
				{
					goto SEARCH_AGAIN;
				}
			}

			parameter_index++;
 8000ebc:	2117      	movs	r1, #23
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	3201      	adds	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e006      	b.n	8000ed8 <json_get_value+0x208>
		}
		else
		{
SEARCH_AGAIN:
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	e000      	b.n	8000ed0 <json_get_value+0x200>
					goto SEARCH_AGAIN;
 8000ece:	46c0      	nop			; (mov r8, r8)
			parameter_index = 0;
 8000ed0:	2317      	movs	r3, #23
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
	for(i=0; i <= json_count; i++)
 8000ed8:	2110      	movs	r1, #16
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	801a      	strh	r2, [r3, #0]
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <json_get_value+0x234>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	2210      	movs	r2, #16
 8000eea:	18ba      	adds	r2, r7, r2
 8000eec:	8812      	ldrh	r2, [r2, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d800      	bhi.n	8000ef4 <json_get_value+0x224>
 8000ef2:	e711      	b.n	8000d18 <json_get_value+0x48>
		}
	}

	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b006      	add	sp, #24
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	20001ad4 	.word	0x20001ad4
 8000f04:	20001f16 	.word	0x20001f16

08000f08 <ping_response>:
 *
 * \return - none
 */

uint8_t ping_response(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af02      	add	r7, sp, #8
    uint8_t retstat;
    uint32_t i;
    uint8_t tempcv[10];

    ca_certificate_flag = 0;
 8000f0e:	4b71      	ldr	r3, [pc, #452]	; (80010d4 <ping_response+0x1cc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
    client_certificate_flag = 0;
 8000f14:	4b70      	ldr	r3, [pc, #448]	; (80010d8 <ping_response+0x1d0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    client_key_flag = 0;
 8000f1a:	4b70      	ldr	r3, [pc, #448]	; (80010dc <ping_response+0x1d4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
    configuration_service_flag = 0;
 8000f20:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <ping_response+0x1d8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
    update_module_firmware_flag = 0;
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <ping_response+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
    update_device_firmware_flag = 0;
 8000f2c:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <ping_response+0x1e0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    update_device_twin_flag = 0;
 8000f32:	4b6e      	ldr	r3, [pc, #440]	; (80010ec <ping_response+0x1e4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]

	if(json_response[0] == 0)
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <ping_response+0x1e8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <ping_response+0x3e>
	{
		json_response[0] = '0';
 8000f40:	4b6b      	ldr	r3, [pc, #428]	; (80010f0 <ping_response+0x1e8>)
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	701a      	strb	r2, [r3, #0]
	}

	if(json_get_value("st", 2, 1, (char*)temp_data, 100))/////// GET STATUS VALUE FROM JSON RESPONSE
 8000f46:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <ping_response+0x1ec>)
 8000f48:	486b      	ldr	r0, [pc, #428]	; (80010f8 <ping_response+0x1f0>)
 8000f4a:	2264      	movs	r2, #100	; 0x64
 8000f4c:	9200      	str	r2, [sp, #0]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2102      	movs	r1, #2
 8000f52:	f7ff febd 	bl	8000cd0 <json_get_value>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d101      	bne.n	8000f5e <ping_response+0x56>

	}

	else
	{
		return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e0b5      	b.n	80010ca <ping_response+0x1c2>
	}

    retstat = 0;
 8000f5e:	2317      	movs	r3, #23
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]

	if(temp_data[0] == '1')////////////// IF STATUS is 1
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <ping_response+0x1ec>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b31      	cmp	r3, #49	; 0x31
 8000f6c:	d000      	beq.n	8000f70 <ping_response+0x68>
 8000f6e:	e08c      	b.n	800108a <ping_response+0x182>
	{

        if(json_get_value("cv", 2, 1, (char*)tempcv, 10))/////// GET SERVER CONFIGURATION VERSION VALUE FROM JSON RESPONSE
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4862      	ldr	r0, [pc, #392]	; (80010fc <ping_response+0x1f4>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	9200      	str	r2, [sp, #0]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	f7ff fea8 	bl	8000cd0 <json_get_value>
		{

		}

		if(configuration_version[0]!=tempcv[0] || configuration_version[1]!=tempcv[1] || configuration_version[2]!=tempcv[2])
 8000f80:	4b5f      	ldr	r3, [pc, #380]	; (8001100 <ping_response+0x1f8>)
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d10c      	bne.n	8000fa6 <ping_response+0x9e>
 8000f8c:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <ping_response+0x1f8>)
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d106      	bne.n	8000fa6 <ping_response+0x9e>
 8000f98:	4b59      	ldr	r3, [pc, #356]	; (8001100 <ping_response+0x1f8>)
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d100      	bne.n	8000fa6 <ping_response+0x9e>
 8000fa4:	e06d      	b.n	8001082 <ping_response+0x17a>
		{
			sprintf((char*)hold_cv_value, "%s", (char*)temp_data);///// HOLD CV VALUE IN TEMP VARIABLE
 8000fa6:	4a53      	ldr	r2, [pc, #332]	; (80010f4 <ping_response+0x1ec>)
 8000fa8:	4956      	ldr	r1, [pc, #344]	; (8001104 <ping_response+0x1fc>)
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <ping_response+0x200>)
 8000fac:	0018      	movs	r0, r3
 8000fae:	f010 fba9 	bl	8011704 <siprintf>

			if(json_get_value("tk", 2, 1, (char*)http_token, 17))/////// GET HTTP TOKEN VALUE FROM JSON RESPONSE
 8000fb2:	4b56      	ldr	r3, [pc, #344]	; (800110c <ping_response+0x204>)
 8000fb4:	4856      	ldr	r0, [pc, #344]	; (8001110 <ping_response+0x208>)
 8000fb6:	2211      	movs	r2, #17
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	f7ff fe87 	bl	8000cd0 <json_get_value>
			{

			}

			if(json_get_value("ca", 2, 1, (char*)temp_data, 100))/////// GET ROOT CA VALUE FROM JSON RESPONSE
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <ping_response+0x1ec>)
 8000fc4:	4853      	ldr	r0, [pc, #332]	; (8001114 <ping_response+0x20c>)
 8000fc6:	2264      	movs	r2, #100	; 0x64
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	f7ff fe7f 	bl	8000cd0 <json_get_value>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d002      	beq.n	8000fdc <ping_response+0xd4>
			{
			    ca_certificate_flag = 1;
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <ping_response+0x1cc>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
			}

			if(json_get_value("cc", 2, 1, (char*)temp_data, 100))/////// GET CLIENT CERTIFICATE VALUE FROM JSON RESPONSE
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <ping_response+0x1ec>)
 8000fde:	484e      	ldr	r0, [pc, #312]	; (8001118 <ping_response+0x210>)
 8000fe0:	2264      	movs	r2, #100	; 0x64
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	f7ff fe72 	bl	8000cd0 <json_get_value>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d002      	beq.n	8000ff6 <ping_response+0xee>
			{
                client_certificate_flag = 1;
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <ping_response+0x1d0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
			}

			if(json_get_value("ck", 2, 1, (char*)temp_data, 100))/////// GET CLIENT KEY VALUE FROM JSON RESPONSE
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <ping_response+0x1ec>)
 8000ff8:	4848      	ldr	r0, [pc, #288]	; (800111c <ping_response+0x214>)
 8000ffa:	2264      	movs	r2, #100	; 0x64
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	2102      	movs	r1, #2
 8001002:	f7ff fe65 	bl	8000cd0 <json_get_value>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d002      	beq.n	8001010 <ping_response+0x108>
			{
                client_key_flag = 1;
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <ping_response+0x1d4>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
			}

			if(json_get_value("sc", 2, 1, (char*)temp_data, 100))/////// GET SERVER CONFIGURATION VALUE FROM JSON RESPONSE
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <ping_response+0x1ec>)
 8001012:	4843      	ldr	r0, [pc, #268]	; (8001120 <ping_response+0x218>)
 8001014:	2264      	movs	r2, #100	; 0x64
 8001016:	9200      	str	r2, [sp, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	2102      	movs	r1, #2
 800101c:	f7ff fe58 	bl	8000cd0 <json_get_value>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d002      	beq.n	800102a <ping_response+0x122>
			{
				configuration_service_flag = 1;
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <ping_response+0x1d8>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
			}

			if(json_get_value("fv", 2, 1, (char*)temp_data, 100))/////// GET Firmware Version VALUE FROM JSON RESPONSE
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <ping_response+0x1ec>)
 800102c:	483d      	ldr	r0, [pc, #244]	; (8001124 <ping_response+0x21c>)
 800102e:	2264      	movs	r2, #100	; 0x64
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2201      	movs	r2, #1
 8001034:	2102      	movs	r1, #2
 8001036:	f7ff fe4b 	bl	8000cd0 <json_get_value>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d002      	beq.n	8001044 <ping_response+0x13c>
			{
				update_device_firmware_flag = 1;
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <ping_response+0x1e0>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
			}

			if(json_get_value("mv", 2, 1, (char*)temp_data, 100))/////// GET Module Version VALUE FROM JSON RESPONSE
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <ping_response+0x1ec>)
 8001046:	4838      	ldr	r0, [pc, #224]	; (8001128 <ping_response+0x220>)
 8001048:	2264      	movs	r2, #100	; 0x64
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	2102      	movs	r1, #2
 8001050:	f7ff fe3e 	bl	8000cd0 <json_get_value>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d002      	beq.n	800105e <ping_response+0x156>
			{
				update_module_firmware_flag = 1;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <ping_response+0x1dc>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
			}

            for (i = 0; i < sizeof(configuration_version); i++)
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e00b      	b.n	800107c <ping_response+0x174>
            {
                configuration_version[i] = tempcv[i];
 8001064:	1d3a      	adds	r2, r7, #4
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	4a24      	ldr	r2, [pc, #144]	; (8001100 <ping_response+0x1f8>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	18d3      	adds	r3, r2, r3
 8001072:	1c0a      	adds	r2, r1, #0
 8001074:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < sizeof(configuration_version); i++)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	3301      	adds	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b09      	cmp	r3, #9
 8001080:	d9f0      	bls.n	8001064 <ping_response+0x15c>
            }

		}

		update_device_twin_flag=1;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <ping_response+0x1e4>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e01c      	b.n	80010c4 <ping_response+0x1bc>
	}

	else if(temp_data[0] == '0')////////////// IF STATUS is 0 ///// Added 25.04.2021
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <ping_response+0x1ec>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b30      	cmp	r3, #48	; 0x30
 8001090:	d118      	bne.n	80010c4 <ping_response+0x1bc>
	{
		ca_certificate_flag = 0;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <ping_response+0x1cc>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		client_certificate_flag = 0;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <ping_response+0x1d0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		client_key_flag = 0;
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <ping_response+0x1d4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
		configuration_service_flag = 0;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <ping_response+0x1d8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
		update_device_firmware_flag = 0;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <ping_response+0x1e0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		update_module_firmware_flag = 0;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <ping_response+0x1dc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
		retstat = 1;
 80010b6:	2317      	movs	r3, #23
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]

		update_device_twin_flag=1;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <ping_response+0x1e4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
	}

	return retstat;
 80010c4:	2317      	movs	r3, #23
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20001f18 	.word	0x20001f18
 80010d8:	20001f1a 	.word	0x20001f1a
 80010dc:	20001f1b 	.word	0x20001f1b
 80010e0:	20001dbe 	.word	0x20001dbe
 80010e4:	20001dc7 	.word	0x20001dc7
 80010e8:	20001f19 	.word	0x20001f19
 80010ec:	20001a33 	.word	0x20001a33
 80010f0:	20001ad4 	.word	0x20001ad4
 80010f4:	200003d8 	.word	0x200003d8
 80010f8:	08013064 	.word	0x08013064
 80010fc:	08012fc8 	.word	0x08012fc8
 8001100:	20001a44 	.word	0x20001a44
 8001104:	08013068 	.word	0x08013068
 8001108:	200003cc 	.word	0x200003cc
 800110c:	20001f80 	.word	0x20001f80
 8001110:	0801306c 	.word	0x0801306c
 8001114:	08013070 	.word	0x08013070
 8001118:	08013074 	.word	0x08013074
 800111c:	08013078 	.word	0x08013078
 8001120:	0801307c 	.word	0x0801307c
 8001124:	08013080 	.word	0x08013080
 8001128:	08013084 	.word	0x08013084

0800112c <publish_meter_readings>:
 *
 * \return -
 */

uint16_t publish_meter_readings(uint8_t *tx_string)
{
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	4cce      	ldr	r4, [pc, #824]	; (8001468 <publish_meter_readings+0x33c>)
 8001130:	44a5      	add	sp, r4
 8001132:	af06      	add	r7, sp, #24
 8001134:	6078      	str	r0, [r7, #4]
	uint8_t data_byte;
    uint8_t zz;

	uint16_t total_length=0;
 8001136:	21b1      	movs	r1, #177	; 0xb1
 8001138:	0089      	lsls	r1, r1, #2
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]
	uint8_t bytes[4];




    total_length=0;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]

	////// BLIPGO SERIAL NUMBER
	serial_number.dataId=0x1A;
 8001146:	24a2      	movs	r4, #162	; 0xa2
 8001148:	00a4      	lsls	r4, r4, #2
 800114a:	193b      	adds	r3, r7, r4
 800114c:	221a      	movs	r2, #26
 800114e:	701a      	strb	r2, [r3, #0]
	serial_number.dataType='1';
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2231      	movs	r2, #49	; 0x31
 8001154:	705a      	strb	r2, [r3, #1]
	serial_number.decimalPlace='0';
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2235      	movs	r2, #53	; 0x35
 800115a:	2130      	movs	r1, #48	; 0x30
 800115c:	5499      	strb	r1, [r3, r2]
	sprintf((char*)serial_number.dataValue, "%s\0", device_id);
 800115e:	4ac3      	ldr	r2, [pc, #780]	; (800146c <publish_meter_readings+0x340>)
 8001160:	49c3      	ldr	r1, [pc, #780]	; (8001470 <publish_meter_readings+0x344>)
 8001162:	193b      	adds	r3, r7, r4
 8001164:	3303      	adds	r3, #3
 8001166:	0018      	movs	r0, r3
 8001168:	f010 facc 	bl	8011704 <siprintf>
	serial_number.dataLength=strlen((char*)serial_number.dataValue);
 800116c:	193b      	adds	r3, r7, r4
 800116e:	3303      	adds	r3, #3
 8001170:	0018      	movs	r0, r3
 8001172:	f7fe ffc9 	bl	8000108 <strlen>
 8001176:	0003      	movs	r3, r0
 8001178:	b2da      	uxtb	r2, r3
 800117a:	193b      	adds	r3, r7, r4
 800117c:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string2, "%02X%c%02X%s%c\0",
			serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 800117e:	0022      	movs	r2, r4
 8001180:	18bb      	adds	r3, r7, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string2, "%02X%c%02X%s%c\0",
 8001184:	001d      	movs	r5, r3
			serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 8001186:	18bb      	adds	r3, r7, r2
 8001188:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string2, "%02X%c%02X%s%c\0",
 800118a:	001e      	movs	r6, r3
			serial_number.dataId, serial_number.dataType, serial_number.dataLength, serial_number.dataValue,
 800118c:	18bb      	adds	r3, r7, r2
 800118e:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string2, "%02X%c%02X%s%c\0",
 8001190:	001c      	movs	r4, r3
			serial_number.decimalPlace);
 8001192:	18bb      	adds	r3, r7, r2
 8001194:	2235      	movs	r2, #53	; 0x35
 8001196:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string2, "%02X%c%02X%s%c\0",
 8001198:	49b6      	ldr	r1, [pc, #728]	; (8001474 <publish_meter_readings+0x348>)
 800119a:	2090      	movs	r0, #144	; 0x90
 800119c:	0040      	lsls	r0, r0, #1
 800119e:	1838      	adds	r0, r7, r0
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	22a2      	movs	r2, #162	; 0xa2
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	18bb      	adds	r3, r7, r2
 80011a8:	3303      	adds	r3, #3
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	9400      	str	r4, [sp, #0]
 80011ae:	0033      	movs	r3, r6
 80011b0:	002a      	movs	r2, r5
 80011b2:	f010 faa7 	bl	8011704 <siprintf>

	total_length=strlen((char*)string2);///// length of serial number
 80011b6:	2090      	movs	r0, #144	; 0x90
 80011b8:	0040      	lsls	r0, r0, #1
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	0018      	movs	r0, r3
 80011be:	f7fe ffa3 	bl	8000108 <strlen>
 80011c2:	0002      	movs	r2, r0
 80011c4:	21b1      	movs	r1, #177	; 0xb1
 80011c6:	0089      	lsls	r1, r1, #2
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	801a      	strh	r2, [r3, #0]

			////////////////////////// Read stored clock value record, if it is clock record
	read_clock_from_flash();
 80011cc:	f000 fc20 	bl	8001a10 <read_clock_from_flash>

	////// TIMESTAMP
	timestamp.dataId=0x1C;
 80011d0:	2494      	movs	r4, #148	; 0x94
 80011d2:	00a4      	lsls	r4, r4, #2
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	221c      	movs	r2, #28
 80011d8:	701a      	strb	r2, [r3, #0]
	timestamp.dataType='2';
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	2232      	movs	r2, #50	; 0x32
 80011de:	705a      	strb	r2, [r3, #1]
	timestamp.decimalPlace='0';
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2235      	movs	r2, #53	; 0x35
 80011e4:	2130      	movs	r1, #48	; 0x30
 80011e6:	5499      	strb	r1, [r3, r2]

	///convert timestamp to hex
	t = atol((char*)read_clock);
 80011e8:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <publish_meter_readings+0x34c>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f00f ffc4 	bl	8011178 <atol>
 80011f0:	0003      	movs	r3, r0
 80011f2:	20b0      	movs	r0, #176	; 0xb0
 80011f4:	0080      	lsls	r0, r0, #2
 80011f6:	183d      	adds	r5, r7, r0
 80011f8:	602b      	str	r3, [r5, #0]
	bytes[0] = (t >> 24) & 0xFF;
 80011fa:	183d      	adds	r5, r7, r0
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	0e1b      	lsrs	r3, r3, #24
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b9e      	ldr	r3, [pc, #632]	; (800147c <publish_meter_readings+0x350>)
 8001204:	25b2      	movs	r5, #178	; 0xb2
 8001206:	00ad      	lsls	r5, r5, #2
 8001208:	46ac      	mov	ip, r5
 800120a:	44bc      	add	ip, r7
 800120c:	4463      	add	r3, ip
 800120e:	701a      	strb	r2, [r3, #0]
	bytes[1] = (t >> 16) & 0xFF;
 8001210:	183d      	adds	r5, r7, r0
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b98      	ldr	r3, [pc, #608]	; (800147c <publish_meter_readings+0x350>)
 800121a:	25b2      	movs	r5, #178	; 0xb2
 800121c:	00ad      	lsls	r5, r5, #2
 800121e:	46ac      	mov	ip, r5
 8001220:	44bc      	add	ip, r7
 8001222:	4463      	add	r3, ip
 8001224:	705a      	strb	r2, [r3, #1]
	bytes[2] = (t >> 8) & 0xFF;
 8001226:	183d      	adds	r5, r7, r0
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b93      	ldr	r3, [pc, #588]	; (800147c <publish_meter_readings+0x350>)
 8001230:	25b2      	movs	r5, #178	; 0xb2
 8001232:	00ad      	lsls	r5, r5, #2
 8001234:	46ac      	mov	ip, r5
 8001236:	44bc      	add	ip, r7
 8001238:	4463      	add	r3, ip
 800123a:	709a      	strb	r2, [r3, #2]
	bytes[3] = t & 0xFF;
 800123c:	1838      	adds	r0, r7, r0
 800123e:	6803      	ldr	r3, [r0, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <publish_meter_readings+0x350>)
 8001244:	20b2      	movs	r0, #178	; 0xb2
 8001246:	0080      	lsls	r0, r0, #2
 8001248:	4684      	mov	ip, r0
 800124a:	44bc      	add	ip, r7
 800124c:	4463      	add	r3, ip
 800124e:	70da      	strb	r2, [r3, #3]

	sprintf((char*)timestamp.dataValue, "%02X%02X%02X%02X\0", bytes[0], bytes[1], bytes[2], bytes[3]);
 8001250:	4b8a      	ldr	r3, [pc, #552]	; (800147c <publish_meter_readings+0x350>)
 8001252:	20b2      	movs	r0, #178	; 0xb2
 8001254:	0080      	lsls	r0, r0, #2
 8001256:	4684      	mov	ip, r0
 8001258:	44bc      	add	ip, r7
 800125a:	4463      	add	r3, ip
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001d      	movs	r5, r3
 8001260:	4b86      	ldr	r3, [pc, #536]	; (800147c <publish_meter_readings+0x350>)
 8001262:	20b2      	movs	r0, #178	; 0xb2
 8001264:	0080      	lsls	r0, r0, #2
 8001266:	4684      	mov	ip, r0
 8001268:	44bc      	add	ip, r7
 800126a:	4463      	add	r3, ip
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	001e      	movs	r6, r3
 8001270:	4b82      	ldr	r3, [pc, #520]	; (800147c <publish_meter_readings+0x350>)
 8001272:	20b2      	movs	r0, #178	; 0xb2
 8001274:	0080      	lsls	r0, r0, #2
 8001276:	4684      	mov	ip, r0
 8001278:	44bc      	add	ip, r7
 800127a:	4463      	add	r3, ip
 800127c:	789b      	ldrb	r3, [r3, #2]
 800127e:	001a      	movs	r2, r3
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <publish_meter_readings+0x350>)
 8001282:	20b2      	movs	r0, #178	; 0xb2
 8001284:	0080      	lsls	r0, r0, #2
 8001286:	4684      	mov	ip, r0
 8001288:	44bc      	add	ip, r7
 800128a:	4463      	add	r3, ip
 800128c:	78db      	ldrb	r3, [r3, #3]
 800128e:	001c      	movs	r4, r3
 8001290:	497b      	ldr	r1, [pc, #492]	; (8001480 <publish_meter_readings+0x354>)
 8001292:	2394      	movs	r3, #148	; 0x94
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	1cd8      	adds	r0, r3, #3
 800129a:	9401      	str	r4, [sp, #4]
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	0033      	movs	r3, r6
 80012a0:	002a      	movs	r2, r5
 80012a2:	f010 fa2f 	bl	8011704 <siprintf>
			timestamp.dataLength=strlen((char*)timestamp.dataValue);
 80012a6:	2494      	movs	r4, #148	; 0x94
 80012a8:	00a4      	lsls	r4, r4, #2
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	3303      	adds	r3, #3
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7fe ff2a 	bl	8000108 <strlen>
 80012b4:	0003      	movs	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string3, "%02X%c%02X%s%c\0",
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 80012bc:	0022      	movs	r2, r4
 80012be:	18bb      	adds	r3, r7, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string3, "%02X%c%02X%s%c\0",
 80012c2:	001d      	movs	r5, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 80012c4:	18bb      	adds	r3, r7, r2
 80012c6:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string3, "%02X%c%02X%s%c\0",
 80012c8:	001e      	movs	r6, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 80012ca:	18bb      	adds	r3, r7, r2
 80012cc:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string3, "%02X%c%02X%s%c\0",
 80012ce:	001c      	movs	r4, r3
				timestamp.dataId, timestamp.dataType, timestamp.dataLength, timestamp.dataValue, timestamp.decimalPlace);
 80012d0:	18bb      	adds	r3, r7, r2
 80012d2:	2235      	movs	r2, #53	; 0x35
 80012d4:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string3, "%02X%c%02X%s%c\0",
 80012d6:	4967      	ldr	r1, [pc, #412]	; (8001474 <publish_meter_readings+0x348>)
 80012d8:	20f8      	movs	r0, #248	; 0xf8
 80012da:	1838      	adds	r0, r7, r0
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2294      	movs	r2, #148	; 0x94
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	18bb      	adds	r3, r7, r2
 80012e4:	3303      	adds	r3, #3
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	9400      	str	r4, [sp, #0]
 80012ea:	0033      	movs	r3, r6
 80012ec:	002a      	movs	r2, r5
 80012ee:	f010 fa09 	bl	8011704 <siprintf>

	total_length=total_length+strlen((char*)string3);///// length of timestamp
 80012f2:	20f8      	movs	r0, #248	; 0xf8
 80012f4:	183b      	adds	r3, r7, r0
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7fe ff06 	bl	8000108 <strlen>
 80012fc:	0003      	movs	r3, r0
 80012fe:	b299      	uxth	r1, r3
 8001300:	22b1      	movs	r2, #177	; 0xb1
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	18bb      	adds	r3, r7, r2
 8001306:	18ba      	adds	r2, r7, r2
 8001308:	8812      	ldrh	r2, [r2, #0]
 800130a:	188a      	adds	r2, r1, r2
 800130c:	801a      	strh	r2, [r3, #0]


	////// model_number
	model_number.dataId=0x02;
 800130e:	2486      	movs	r4, #134	; 0x86
 8001310:	00a4      	lsls	r4, r4, #2
 8001312:	193b      	adds	r3, r7, r4
 8001314:	2202      	movs	r2, #2
 8001316:	701a      	strb	r2, [r3, #0]
	model_number.dataType='2';
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	705a      	strb	r2, [r3, #1]
	model_number.decimalPlace='0';
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2235      	movs	r2, #53	; 0x35
 8001322:	2130      	movs	r1, #48	; 0x30
 8001324:	5499      	strb	r1, [r3, r2]

//	if(atol((char*)read_meter_model)==923 || atol((char*)read_meter_model)==897)//// if accu check meter
	{
		sprintf((char*)model_number.dataValue, "262\0");
 8001326:	4a57      	ldr	r2, [pc, #348]	; (8001484 <publish_meter_readings+0x358>)
 8001328:	193b      	adds	r3, r7, r4
 800132a:	3303      	adds	r3, #3
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f010 f9e8 	bl	8011704 <siprintf>
//	else
	{
//		sprintf((char*)model_number.dataValue, "%s\0", read_meter_model);/// if other meter
	}

	model_number.dataLength=strlen((char*)model_number.dataValue);
 8001334:	193b      	adds	r3, r7, r4
 8001336:	3303      	adds	r3, #3
 8001338:	0018      	movs	r0, r3
 800133a:	f7fe fee5 	bl	8000108 <strlen>
 800133e:	0003      	movs	r3, r0
 8001340:	b2da      	uxtb	r2, r3
 8001342:	193b      	adds	r3, r7, r4
 8001344:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string4, "%02X%c%02X%s%c\0",
			model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 8001346:	0022      	movs	r2, r4
 8001348:	18bb      	adds	r3, r7, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string4, "%02X%c%02X%s%c\0",
 800134c:	001d      	movs	r5, r3
			model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 800134e:	18bb      	adds	r3, r7, r2
 8001350:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8001352:	001e      	movs	r6, r3
			model_number.dataId, model_number.dataType, model_number.dataLength, model_number.dataValue,
 8001354:	18bb      	adds	r3, r7, r2
 8001356:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8001358:	001c      	movs	r4, r3
			model_number.decimalPlace);
 800135a:	18bb      	adds	r3, r7, r2
 800135c:	2235      	movs	r2, #53	; 0x35
 800135e:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string4, "%02X%c%02X%s%c\0",
 8001360:	4944      	ldr	r1, [pc, #272]	; (8001474 <publish_meter_readings+0x348>)
 8001362:	20d0      	movs	r0, #208	; 0xd0
 8001364:	1838      	adds	r0, r7, r0
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2286      	movs	r2, #134	; 0x86
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	18bb      	adds	r3, r7, r2
 800136e:	3303      	adds	r3, #3
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9400      	str	r4, [sp, #0]
 8001374:	0033      	movs	r3, r6
 8001376:	002a      	movs	r2, r5
 8001378:	f010 f9c4 	bl	8011704 <siprintf>

	total_length=total_length+strlen((char*)string4);///// length of model_number
 800137c:	20d0      	movs	r0, #208	; 0xd0
 800137e:	183b      	adds	r3, r7, r0
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe fec1 	bl	8000108 <strlen>
 8001386:	0003      	movs	r3, r0
 8001388:	b299      	uxth	r1, r3
 800138a:	22b1      	movs	r2, #177	; 0xb1
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	18bb      	adds	r3, r7, r2
 8001390:	18ba      	adds	r2, r7, r2
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	188a      	adds	r2, r1, r2
 8001396:	801a      	strh	r2, [r3, #0]


	////// meter_id or serial no
	meter_id.dataId=0x01;
 8001398:	24f0      	movs	r4, #240	; 0xf0
 800139a:	0064      	lsls	r4, r4, #1
 800139c:	193b      	adds	r3, r7, r4
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
	meter_id.dataType='1';//ascii
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2231      	movs	r2, #49	; 0x31
 80013a6:	705a      	strb	r2, [r3, #1]
	meter_id.decimalPlace='0';
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	2235      	movs	r2, #53	; 0x35
 80013ac:	2130      	movs	r1, #48	; 0x30
 80013ae:	5499      	strb	r1, [r3, r2]
	sprintf((char*)meter_id.dataValue, "%s\0", meter_serial_no);
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <publish_meter_readings+0x35c>)
 80013b2:	492f      	ldr	r1, [pc, #188]	; (8001470 <publish_meter_readings+0x344>)
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	3303      	adds	r3, #3
 80013b8:	0018      	movs	r0, r3
 80013ba:	f010 f9a3 	bl	8011704 <siprintf>
	meter_id.dataLength=strlen((char*)meter_id.dataValue);
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	3303      	adds	r3, #3
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe fea0 	bl	8000108 <strlen>
 80013c8:	0003      	movs	r3, r0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string5, "%02X%c%02X%s%c\0",
			meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 80013d0:	0022      	movs	r2, r4
 80013d2:	18bb      	adds	r3, r7, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string5, "%02X%c%02X%s%c\0",
 80013d6:	001d      	movs	r5, r3
			meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 80013d8:	18bb      	adds	r3, r7, r2
 80013da:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string5, "%02X%c%02X%s%c\0",
 80013dc:	001e      	movs	r6, r3
			meter_id.dataId, meter_id.dataType, meter_id.dataLength, meter_id.dataValue,
 80013de:	18bb      	adds	r3, r7, r2
 80013e0:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string5, "%02X%c%02X%s%c\0",
 80013e2:	001c      	movs	r4, r3
			meter_id.decimalPlace);
 80013e4:	18bb      	adds	r3, r7, r2
 80013e6:	2235      	movs	r2, #53	; 0x35
 80013e8:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string5, "%02X%c%02X%s%c\0",
 80013ea:	4922      	ldr	r1, [pc, #136]	; (8001474 <publish_meter_readings+0x348>)
 80013ec:	20a8      	movs	r0, #168	; 0xa8
 80013ee:	1838      	adds	r0, r7, r0
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	22f0      	movs	r2, #240	; 0xf0
 80013f4:	0052      	lsls	r2, r2, #1
 80013f6:	18bb      	adds	r3, r7, r2
 80013f8:	3303      	adds	r3, #3
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	9400      	str	r4, [sp, #0]
 80013fe:	0033      	movs	r3, r6
 8001400:	002a      	movs	r2, r5
 8001402:	f010 f97f 	bl	8011704 <siprintf>

	total_length=total_length+strlen((char*)string5);///// length of meter_id
 8001406:	20a8      	movs	r0, #168	; 0xa8
 8001408:	183b      	adds	r3, r7, r0
 800140a:	0018      	movs	r0, r3
 800140c:	f7fe fe7c 	bl	8000108 <strlen>
 8001410:	0003      	movs	r3, r0
 8001412:	b299      	uxth	r1, r3
 8001414:	22b1      	movs	r2, #177	; 0xb1
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	18bb      	adds	r3, r7, r2
 800141a:	18ba      	adds	r2, r7, r2
 800141c:	8812      	ldrh	r2, [r2, #0]
 800141e:	188a      	adds	r2, r1, r2
 8001420:	801a      	strh	r2, [r3, #0]


	////////////// raw_data
	raw_data.dataId=0x1B;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <publish_meter_readings+0x360>)
 8001424:	22b2      	movs	r2, #178	; 0xb2
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4694      	mov	ip, r2
 800142a:	44bc      	add	ip, r7
 800142c:	4463      	add	r3, ip
 800142e:	221b      	movs	r2, #27
 8001430:	701a      	strb	r2, [r3, #0]
	raw_data.dataType='2';///ascii hex
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <publish_meter_readings+0x360>)
 8001434:	22b2      	movs	r2, #178	; 0xb2
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	4694      	mov	ip, r2
 800143a:	44bc      	add	ip, r7
 800143c:	4463      	add	r3, ip
 800143e:	2232      	movs	r2, #50	; 0x32
 8001440:	705a      	strb	r2, [r3, #1]
	raw_data.decimalPlace='0';
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <publish_meter_readings+0x360>)
 8001444:	22b2      	movs	r2, #178	; 0xb2
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4694      	mov	ip, r2
 800144a:	44bc      	add	ip, r7
 800144c:	4463      	add	r3, ip
 800144e:	2235      	movs	r2, #53	; 0x35
 8001450:	2130      	movs	r1, #48	; 0x30
 8001452:	5499      	strb	r1, [r3, r2]

	/////////////////////////////// For sending raw data in ascii hex   length 34 bytes 0x22
	data_byte=0;
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <publish_meter_readings+0x364>)
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]

	for(zz = 0; zz < 17; zz++)
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <publish_meter_readings+0x368>)
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e03b      	b.n	80014de <publish_meter_readings+0x3b2>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	fffffd1c 	.word	0xfffffd1c
 800146c:	20001a34 	.word	0x20001a34
 8001470:	08013088 	.word	0x08013088
 8001474:	0801308c 	.word	0x0801308c
 8001478:	200004d8 	.word	0x200004d8
 800147c:	fffffd40 	.word	0xfffffd40
 8001480:	0801309c 	.word	0x0801309c
 8001484:	080130b0 	.word	0x080130b0
 8001488:	20001e68 	.word	0x20001e68
 800148c:	fffffee0 	.word	0xfffffee0
 8001490:	000002bf 	.word	0x000002bf
 8001494:	000002c7 	.word	0x000002c7
	{
		data_byte = sFLASH_ReadByte1(mem_read_address);////// read data from flash
 8001498:	4ba0      	ldr	r3, [pc, #640]	; (800171c <publish_meter_readings+0x5f0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4da0      	ldr	r5, [pc, #640]	; (8001720 <publish_meter_readings+0x5f4>)
 800149e:	197c      	adds	r4, r7, r5
 80014a0:	0018      	movs	r0, r3
 80014a2:	f007 fe0d 	bl	80090c0 <sFLASH_ReadByte1>
 80014a6:	0003      	movs	r3, r0
 80014a8:	7023      	strb	r3, [r4, #0]
		sprintf((char*)(raw_data.dataValue+zz*2), "%02X", data_byte);
 80014aa:	4c9e      	ldr	r4, [pc, #632]	; (8001724 <publish_meter_readings+0x5f8>)
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	001a      	movs	r2, r3
 80014b4:	23d4      	movs	r3, #212	; 0xd4
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	3303      	adds	r3, #3
 80014bc:	1898      	adds	r0, r3, r2
 80014be:	197b      	adds	r3, r7, r5
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b99      	ldr	r3, [pc, #612]	; (8001728 <publish_meter_readings+0x5fc>)
 80014c4:	0019      	movs	r1, r3
 80014c6:	f010 f91d 	bl	8011704 <siprintf>
        mem_read_address++;
 80014ca:	4b94      	ldr	r3, [pc, #592]	; (800171c <publish_meter_readings+0x5f0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	4b92      	ldr	r3, [pc, #584]	; (800171c <publish_meter_readings+0x5f0>)
 80014d2:	601a      	str	r2, [r3, #0]
	for(zz = 0; zz < 17; zz++)
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	193b      	adds	r3, r7, r4
 80014da:	3201      	adds	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	4b91      	ldr	r3, [pc, #580]	; (8001724 <publish_meter_readings+0x5f8>)
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d9d7      	bls.n	8001498 <publish_meter_readings+0x36c>
	}

	raw_data.dataLength=strlen((char*)raw_data.dataValue);
 80014e8:	23d4      	movs	r3, #212	; 0xd4
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	3303      	adds	r3, #3
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7fe fe09 	bl	8000108 <strlen>
 80014f6:	0003      	movs	r3, r0
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b8c      	ldr	r3, [pc, #560]	; (800172c <publish_meter_readings+0x600>)
 80014fc:	21b2      	movs	r1, #178	; 0xb2
 80014fe:	0089      	lsls	r1, r1, #2
 8001500:	468c      	mov	ip, r1
 8001502:	44bc      	add	ip, r7
 8001504:	4463      	add	r3, ip
 8001506:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string6, "%02X%c%02X%s%c\0",
			raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8001508:	4b88      	ldr	r3, [pc, #544]	; (800172c <publish_meter_readings+0x600>)
 800150a:	22b2      	movs	r2, #178	; 0xb2
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4694      	mov	ip, r2
 8001510:	44bc      	add	ip, r7
 8001512:	4463      	add	r3, ip
 8001514:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8001516:	001d      	movs	r5, r3
			raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8001518:	4b84      	ldr	r3, [pc, #528]	; (800172c <publish_meter_readings+0x600>)
 800151a:	22b2      	movs	r2, #178	; 0xb2
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4694      	mov	ip, r2
 8001520:	44bc      	add	ip, r7
 8001522:	4463      	add	r3, ip
 8001524:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8001526:	001e      	movs	r6, r3
			raw_data.dataId, raw_data.dataType, raw_data.dataLength, raw_data.dataValue,
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <publish_meter_readings+0x600>)
 800152a:	22b2      	movs	r2, #178	; 0xb2
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4694      	mov	ip, r2
 8001530:	44bc      	add	ip, r7
 8001532:	4463      	add	r3, ip
 8001534:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8001536:	001c      	movs	r4, r3
			raw_data.decimalPlace);
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <publish_meter_readings+0x600>)
 800153a:	22b2      	movs	r2, #178	; 0xb2
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4694      	mov	ip, r2
 8001540:	44bc      	add	ip, r7
 8001542:	4463      	add	r3, ip
 8001544:	2235      	movs	r2, #53	; 0x35
 8001546:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string6, "%02X%c%02X%s%c\0",
 8001548:	4979      	ldr	r1, [pc, #484]	; (8001730 <publish_meter_readings+0x604>)
 800154a:	2274      	movs	r2, #116	; 0x74
 800154c:	18b8      	adds	r0, r7, r2
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	23d4      	movs	r3, #212	; 0xd4
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	3303      	adds	r3, #3
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	9400      	str	r4, [sp, #0]
 800155c:	0033      	movs	r3, r6
 800155e:	002a      	movs	r2, r5
 8001560:	f010 f8d0 	bl	8011704 <siprintf>

	total_length=total_length+strlen((char*)string6);///// length of raw_data
 8001564:	2274      	movs	r2, #116	; 0x74
 8001566:	18bb      	adds	r3, r7, r2
 8001568:	0018      	movs	r0, r3
 800156a:	f7fe fdcd 	bl	8000108 <strlen>
 800156e:	0003      	movs	r3, r0
 8001570:	b299      	uxth	r1, r3
 8001572:	25b1      	movs	r5, #177	; 0xb1
 8001574:	00ad      	lsls	r5, r5, #2
 8001576:	197b      	adds	r3, r7, r5
 8001578:	197a      	adds	r2, r7, r5
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	188a      	adds	r2, r1, r2
 800157e:	801a      	strh	r2, [r3, #0]



	////////////////// signal strength
	signal_strength.dataId=0x15;
 8001580:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <publish_meter_readings+0x608>)
 8001582:	21b2      	movs	r1, #178	; 0xb2
 8001584:	0089      	lsls	r1, r1, #2
 8001586:	468c      	mov	ip, r1
 8001588:	44bc      	add	ip, r7
 800158a:	4463      	add	r3, ip
 800158c:	2215      	movs	r2, #21
 800158e:	701a      	strb	r2, [r3, #0]
	signal_strength.dataType='2';
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <publish_meter_readings+0x608>)
 8001592:	21b2      	movs	r1, #178	; 0xb2
 8001594:	0089      	lsls	r1, r1, #2
 8001596:	468c      	mov	ip, r1
 8001598:	44bc      	add	ip, r7
 800159a:	4463      	add	r3, ip
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	705a      	strb	r2, [r3, #1]
	signal_strength.decimalPlace='0';
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <publish_meter_readings+0x608>)
 80015a2:	21b2      	movs	r1, #178	; 0xb2
 80015a4:	0089      	lsls	r1, r1, #2
 80015a6:	468c      	mov	ip, r1
 80015a8:	44bc      	add	ip, r7
 80015aa:	4463      	add	r3, ip
 80015ac:	2235      	movs	r2, #53	; 0x35
 80015ae:	2130      	movs	r1, #48	; 0x30
 80015b0:	5499      	strb	r1, [r3, r2]

	sprintf((char*)signal_strength.dataValue, "%02X\0", gsm_signal_strength);
 80015b2:	4b61      	ldr	r3, [pc, #388]	; (8001738 <publish_meter_readings+0x60c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	001a      	movs	r2, r3
 80015b8:	4960      	ldr	r1, [pc, #384]	; (800173c <publish_meter_readings+0x610>)
 80015ba:	24b8      	movs	r4, #184	; 0xb8
 80015bc:	0064      	lsls	r4, r4, #1
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	3303      	adds	r3, #3
 80015c2:	0018      	movs	r0, r3
 80015c4:	f010 f89e 	bl	8011704 <siprintf>

	signal_strength.dataLength=strlen((char*)signal_strength.dataValue);
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	3303      	adds	r3, #3
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7fe fd9b 	bl	8000108 <strlen>
 80015d2:	0003      	movs	r3, r0
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b57      	ldr	r3, [pc, #348]	; (8001734 <publish_meter_readings+0x608>)
 80015d8:	21b2      	movs	r1, #178	; 0xb2
 80015da:	0089      	lsls	r1, r1, #2
 80015dc:	468c      	mov	ip, r1
 80015de:	44bc      	add	ip, r7
 80015e0:	4463      	add	r3, ip
 80015e2:	709a      	strb	r2, [r3, #2]

	sprintf((char*)string7, "%02X%c%02X%s%c\0",
			signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <publish_meter_readings+0x608>)
 80015e6:	21b2      	movs	r1, #178	; 0xb2
 80015e8:	0089      	lsls	r1, r1, #2
 80015ea:	468c      	mov	ip, r1
 80015ec:	44bc      	add	ip, r7
 80015ee:	4463      	add	r3, ip
 80015f0:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*)string7, "%02X%c%02X%s%c\0",
 80015f2:	001d      	movs	r5, r3
			signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 80015f4:	4b4f      	ldr	r3, [pc, #316]	; (8001734 <publish_meter_readings+0x608>)
 80015f6:	21b2      	movs	r1, #178	; 0xb2
 80015f8:	0089      	lsls	r1, r1, #2
 80015fa:	468c      	mov	ip, r1
 80015fc:	44bc      	add	ip, r7
 80015fe:	4463      	add	r3, ip
 8001600:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8001602:	001e      	movs	r6, r3
			signal_strength.dataId, signal_strength.dataType, signal_strength.dataLength, signal_strength.dataValue,
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <publish_meter_readings+0x608>)
 8001606:	21b2      	movs	r1, #178	; 0xb2
 8001608:	0089      	lsls	r1, r1, #2
 800160a:	468c      	mov	ip, r1
 800160c:	44bc      	add	ip, r7
 800160e:	4463      	add	r3, ip
 8001610:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8001612:	001c      	movs	r4, r3
			signal_strength.decimalPlace);
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <publish_meter_readings+0x608>)
 8001616:	21b2      	movs	r1, #178	; 0xb2
 8001618:	0089      	lsls	r1, r1, #2
 800161a:	468c      	mov	ip, r1
 800161c:	44bc      	add	ip, r7
 800161e:	4463      	add	r3, ip
 8001620:	2235      	movs	r2, #53	; 0x35
 8001622:	5c9b      	ldrb	r3, [r3, r2]
	sprintf((char*)string7, "%02X%c%02X%s%c\0",
 8001624:	4942      	ldr	r1, [pc, #264]	; (8001730 <publish_meter_readings+0x604>)
 8001626:	200c      	movs	r0, #12
 8001628:	1838      	adds	r0, r7, r0
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	23b8      	movs	r3, #184	; 0xb8
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	3303      	adds	r3, #3
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	9400      	str	r4, [sp, #0]
 8001638:	0033      	movs	r3, r6
 800163a:	002a      	movs	r2, r5
 800163c:	f010 f862 	bl	8011704 <siprintf>

	total_length=total_length+strlen((char*)string7);///// length of signal_strength
 8001640:	260c      	movs	r6, #12
 8001642:	19bb      	adds	r3, r7, r6
 8001644:	0018      	movs	r0, r3
 8001646:	f7fe fd5f 	bl	8000108 <strlen>
 800164a:	0003      	movs	r3, r0
 800164c:	b299      	uxth	r1, r3
 800164e:	25b1      	movs	r5, #177	; 0xb1
 8001650:	00ad      	lsls	r5, r5, #2
 8001652:	197b      	adds	r3, r7, r5
 8001654:	197a      	adds	r2, r7, r5
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	188a      	adds	r2, r1, r2
 800165a:	801a      	strh	r2, [r3, #0]


	total_length=total_length+6+1;
 800165c:	197b      	adds	r3, r7, r5
 800165e:	197a      	adds	r2, r7, r5
 8001660:	8812      	ldrh	r2, [r2, #0]
 8001662:	3207      	adds	r2, #7
 8001664:	801a      	strh	r2, [r3, #0]

	///// covert length into 16 bit hex
	packet_length[0] = total_length & 0xFF;
 8001666:	197b      	adds	r3, r7, r5
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <publish_meter_readings+0x614>)
 800166e:	21b2      	movs	r1, #178	; 0xb2
 8001670:	0089      	lsls	r1, r1, #2
 8001672:	468c      	mov	ip, r1
 8001674:	44bc      	add	ip, r7
 8001676:	4463      	add	r3, ip
 8001678:	701a      	strb	r2, [r3, #0]
	packet_length[1] = total_length >> 8;
 800167a:	197b      	adds	r3, r7, r5
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <publish_meter_readings+0x614>)
 8001686:	21b2      	movs	r1, #178	; 0xb2
 8001688:	0089      	lsls	r1, r1, #2
 800168a:	468c      	mov	ip, r1
 800168c:	44bc      	add	ip, r7
 800168e:	4463      	add	r3, ip
 8001690:	705a      	strb	r2, [r3, #1]

	//// convert length into ascii hex
	sprintf((char*)string1, "{'data':'S3%02X%02X\0", packet_length[1], packet_length[0]);////// length 6 bytes
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <publish_meter_readings+0x614>)
 8001694:	21b2      	movs	r1, #178	; 0xb2
 8001696:	0089      	lsls	r1, r1, #2
 8001698:	468c      	mov	ip, r1
 800169a:	44bc      	add	ip, r7
 800169c:	4463      	add	r3, ip
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	001a      	movs	r2, r3
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <publish_meter_readings+0x614>)
 80016a4:	21b2      	movs	r1, #178	; 0xb2
 80016a6:	0089      	lsls	r1, r1, #2
 80016a8:	468c      	mov	ip, r1
 80016aa:	44bc      	add	ip, r7
 80016ac:	4463      	add	r3, ip
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4924      	ldr	r1, [pc, #144]	; (8001744 <publish_meter_readings+0x618>)
 80016b2:	20a4      	movs	r0, #164	; 0xa4
 80016b4:	0040      	lsls	r0, r0, #1
 80016b6:	1838      	adds	r0, r7, r0
 80016b8:	f010 f824 	bl	8011704 <siprintf>

	//// send string1+string2

	total_length = sprintf((char*)tx_string, "%s%s%s%s%s%s%sZ'}\r\n%c\0", string1, string2, string3, string4, string5, string6, string7, 0x1A);
 80016bc:	2190      	movs	r1, #144	; 0x90
 80016be:	0049      	lsls	r1, r1, #1
 80016c0:	187c      	adds	r4, r7, r1
 80016c2:	20a4      	movs	r0, #164	; 0xa4
 80016c4:	0040      	lsls	r0, r0, #1
 80016c6:	183a      	adds	r2, r7, r0
 80016c8:	491f      	ldr	r1, [pc, #124]	; (8001748 <publish_meter_readings+0x61c>)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	231a      	movs	r3, #26
 80016ce:	9305      	str	r3, [sp, #20]
 80016d0:	19bb      	adds	r3, r7, r6
 80016d2:	9304      	str	r3, [sp, #16]
 80016d4:	2374      	movs	r3, #116	; 0x74
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	23a8      	movs	r3, #168	; 0xa8
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	23d0      	movs	r3, #208	; 0xd0
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	23f8      	movs	r3, #248	; 0xf8
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	0023      	movs	r3, r4
 80016ee:	f010 f809 	bl	8011704 <siprintf>
 80016f2:	0002      	movs	r2, r0
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	801a      	strh	r2, [r3, #0]


	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 80016f8:	23c0      	movs	r3, #192	; 0xc0
 80016fa:	019b      	lsls	r3, r3, #6
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 feab 	bl	8002458 <store_runtime_parameters_to_flash>
	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	01db      	lsls	r3, r3, #7
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fea6 	bl	8002458 <store_runtime_parameters_to_flash>


	return total_length;
 800170c:	197b      	adds	r3, r7, r5
 800170e:	881b      	ldrh	r3, [r3, #0]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	23b3      	movs	r3, #179	; 0xb3
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	449d      	add	sp, r3
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171c:	2000000c 	.word	0x2000000c
 8001720:	000002bf 	.word	0x000002bf
 8001724:	000002c7 	.word	0x000002c7
 8001728:	080130b8 	.word	0x080130b8
 800172c:	fffffee0 	.word	0xfffffee0
 8001730:	0801308c 	.word	0x0801308c
 8001734:	fffffea8 	.word	0xfffffea8
 8001738:	20000238 	.word	0x20000238
 800173c:	080130c0 	.word	0x080130c0
 8001740:	fffffda8 	.word	0xfffffda8
 8001744:	080130c8 	.word	0x080130c8
 8001748:	080130e0 	.word	0x080130e0

0800174c <store_devinfo_to_flash>:
 * \return -
 */


void store_devinfo_to_flash(uint32_t sect_address)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	617b      	str	r3, [r7, #20]
    uint32_t i;
    uint32_t reclen;

    flush_array(stored_parameters, 100);
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <store_devinfo_to_flash+0x74>)
 800175a:	2164      	movs	r1, #100	; 0x64
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fa93 	bl	8000c88 <flush_array>

    reclen = sprintf((char*)stored_parameters,
 8001762:	4c18      	ldr	r4, [pc, #96]	; (80017c4 <store_devinfo_to_flash+0x78>)
 8001764:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <store_devinfo_to_flash+0x7c>)
 8001766:	4919      	ldr	r1, [pc, #100]	; (80017cc <store_devinfo_to_flash+0x80>)
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <store_devinfo_to_flash+0x74>)
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <store_devinfo_to_flash+0x84>)
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	0023      	movs	r3, r4
 8001770:	f00f ffc8 	bl	8011704 <siprintf>
 8001774:	0003      	movs	r3, r0
 8001776:	60fb      	str	r3, [r7, #12]
                     ble_paired_device,
                     meter_model,
                     meter_serial_no);

    ///// ERASE SECTOR IN FLASH
    sFLASH_EraseSector(sect_address);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	0018      	movs	r0, r3
 800177c:	f007 fc36 	bl	8008fec <sFLASH_EraseSector>

    for(i = 0; i < reclen; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e00d      	b.n	80017a2 <store_devinfo_to_flash+0x56>
    {
        sFLASH_WriteByte(loc++, stored_parameters[i]);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	617a      	str	r2, [r7, #20]
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <store_devinfo_to_flash+0x74>)
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	188a      	adds	r2, r1, r2
 8001792:	7812      	ldrb	r2, [r2, #0]
 8001794:	0011      	movs	r1, r2
 8001796:	0018      	movs	r0, r3
 8001798:	f007 fc66 	bl	8009068 <sFLASH_WriteByte>
    for(i = 0; i < reclen; i++)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3301      	adds	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d3ed      	bcc.n	8001786 <store_devinfo_to_flash+0x3a>
    }

    debug_printf(DBGLVL_MAX, "WRITE DEVINFO %s\r\n", stored_parameters);
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <store_devinfo_to_flash+0x74>)
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <store_devinfo_to_flash+0x88>)
 80017ae:	0019      	movs	r1, r3
 80017b0:	2004      	movs	r0, #4
 80017b2:	f000 ffcf 	bl	8002754 <debug_printf>
    return;
 80017b6:	46c0      	nop			; (mov r8, r8)
}
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b007      	add	sp, #28
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	20000368 	.word	0x20000368
 80017c4:	2000127c 	.word	0x2000127c
 80017c8:	20001e2c 	.word	0x20001e2c
 80017cc:	080130f8 	.word	0x080130f8
 80017d0:	20001e68 	.word	0x20001e68
 80017d4:	08013108 	.word	0x08013108

080017d8 <store_records_to_flash>:
 * \return -
 */


void store_records_to_flash(uint16_t reccnt)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	0002      	movs	r2, r0
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	801a      	strh	r2, [r3, #0]
    uint16_t cc;
    uint16_t zz;

    debug_printf(DBGLVL_MAX, "NO OF RECORDS : %u\r\n", reccnt);
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <store_records_to_flash+0xdc>)
 80017ea:	0019      	movs	r1, r3
 80017ec:	2004      	movs	r0, #4
 80017ee:	f000 ffb1 	bl	8002754 <debug_printf>

    if ((mem_write_address + (reccnt * 17)) > FLASH_LAST_ADDRESS)
 80017f2:	1dbb      	adds	r3, r7, #6
 80017f4:	881a      	ldrh	r2, [r3, #0]
 80017f6:	0013      	movs	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <store_records_to_flash+0xe0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	18d3      	adds	r3, r2, r3
 8001804:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <store_records_to_flash+0xe4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <store_records_to_flash+0x36>
    {
        erase_all_records();
 800180a:	f7ff fa1d 	bl	8000c48 <erase_all_records>
    }

	store_clock_to_flash();
 800180e:	f000 fdb5 	bl	800237c <store_clock_to_flash>

    for(cc = 0; cc < reccnt; cc++)
 8001812:	230e      	movs	r3, #14
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2200      	movs	r2, #0
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	e036      	b.n	800188a <store_records_to_flash+0xb2>
	{
	    total_downloaded_records_meter++;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <store_records_to_flash+0xe8>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <store_records_to_flash+0xe8>)
 8001826:	801a      	strh	r2, [r3, #0]

		for(zz = 0; zz < 17; zz++)
 8001828:	230c      	movs	r3, #12
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	801a      	strh	r2, [r3, #0]
 8001830:	e01b      	b.n	800186a <store_records_to_flash+0x92>
		{
			sFLASH_WriteByte(mem_write_address, meter_records[cc][zz]);///////// write data to flash
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <store_records_to_flash+0xe0>)
 8001834:	681c      	ldr	r4, [r3, #0]
 8001836:	230e      	movs	r3, #14
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	250c      	movs	r5, #12
 800183e:	197b      	adds	r3, r7, r5
 8001840:	8819      	ldrh	r1, [r3, #0]
 8001842:	4820      	ldr	r0, [pc, #128]	; (80018c4 <store_records_to_flash+0xec>)
 8001844:	0013      	movs	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	189b      	adds	r3, r3, r2
 800184a:	18c3      	adds	r3, r0, r3
 800184c:	5c5b      	ldrb	r3, [r3, r1]
 800184e:	0019      	movs	r1, r3
 8001850:	0020      	movs	r0, r4
 8001852:	f007 fc09 	bl	8009068 <sFLASH_WriteByte>
			mem_write_address++;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <store_records_to_flash+0xe0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <store_records_to_flash+0xe0>)
 800185e:	601a      	str	r2, [r3, #0]
		for(zz = 0; zz < 17; zz++)
 8001860:	197b      	adds	r3, r7, r5
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	197b      	adds	r3, r7, r5
 8001866:	3201      	adds	r2, #1
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	230c      	movs	r3, #12
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d9de      	bls.n	8001832 <store_records_to_flash+0x5a>
		}

        debug_printf(DBGLVL_MAX, "RECORD: \r\n");
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <store_records_to_flash+0xf0>)
 8001876:	0019      	movs	r1, r3
 8001878:	2004      	movs	r0, #4
 800187a:	f000 ff6b 	bl	8002754 <debug_printf>
    for(cc = 0; cc < reccnt; cc++)
 800187e:	210e      	movs	r1, #14
 8001880:	187b      	adds	r3, r7, r1
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	187b      	adds	r3, r7, r1
 8001886:	3201      	adds	r2, #1
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	230e      	movs	r3, #14
 800188c:	18fa      	adds	r2, r7, r3
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	8812      	ldrh	r2, [r2, #0]
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d3c1      	bcc.n	800181c <store_records_to_flash+0x44>
	}

	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_ADDRESS);
 8001898:	23c0      	movs	r3, #192	; 0xc0
 800189a:	019b      	lsls	r3, r3, #6
 800189c:	0018      	movs	r0, r3
 800189e:	f000 fddb 	bl	8002458 <store_runtime_parameters_to_flash>
	store_runtime_parameters_to_flash(RUNTIME_PARAMETERS_BACKUP_ADDRESS);
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	01db      	lsls	r3, r3, #7
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fdd6 	bl	8002458 <store_runtime_parameters_to_flash>
    return;
 80018ac:	46c0      	nop			; (mov r8, r8)
}
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b004      	add	sp, #16
 80018b2:	bdb0      	pop	{r4, r5, r7, pc}
 80018b4:	0801311c 	.word	0x0801311c
 80018b8:	20000008 	.word	0x20000008
 80018bc:	002000bd 	.word	0x002000bd
 80018c0:	20000506 	.word	0x20000506
 80018c4:	200012f8 	.word	0x200012f8
 80018c8:	08013134 	.word	0x08013134

080018cc <explode_string>:
 * \return - none
 */


static void explode_string(unsigned char* buffer, uint16_t buffer_len, uint8_t sequence_number, uint8_t separator, uint8_t end_char_field, uint16_t field_len, uint8_t end_char_string)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	000c      	movs	r4, r1
 80018d6:	0010      	movs	r0, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	1cbb      	adds	r3, r7, #2
 80018dc:	1c22      	adds	r2, r4, #0
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	1c7b      	adds	r3, r7, #1
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	003b      	movs	r3, r7
 80018e8:	1c0a      	adds	r2, r1, #0
 80018ea:	701a      	strb	r2, [r3, #0]
    uint8_t comma_count=0;
 80018ec:	230f      	movs	r3, #15
 80018ee:	18fb      	adds	r3, r7, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
    uint16_t i=0, j=0;
 80018f4:	240c      	movs	r4, #12
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	2200      	movs	r2, #0
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	230a      	movs	r3, #10
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]

    flush_array(temp_data, 255);
 8001904:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <explode_string+0x140>)
 8001906:	21ff      	movs	r1, #255	; 0xff
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff f9bd 	bl	8000c88 <flush_array>

    for(i=0; i< buffer_len; i++)
 800190e:	193b      	adds	r3, r7, r4
 8001910:	2200      	movs	r2, #0
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	e069      	b.n	80019ea <explode_string+0x11e>
    {

        if(buffer[i]==separator)
 8001916:	230c      	movs	r3, #12
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	18d3      	adds	r3, r2, r3
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	003a      	movs	r2, r7
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d105      	bne.n	8001936 <explode_string+0x6a>
        {
            comma_count++;
 800192a:	210f      	movs	r1, #15
 800192c:	187b      	adds	r3, r7, r1
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	187b      	adds	r3, r7, r1
 8001932:	3201      	adds	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
        }

        if(buffer[i] == end_char_string)
 8001936:	230c      	movs	r3, #12
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2228      	movs	r2, #40	; 0x28
 8001944:	18ba      	adds	r2, r7, r2
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d057      	beq.n	80019fc <explode_string+0x130>
        {
            break;
        }

        if(comma_count==sequence_number)//// if sequence found. Note: sequence number of data fields starts from 0
 800194c:	230f      	movs	r3, #15
 800194e:	18fa      	adds	r2, r7, r3
 8001950:	1c7b      	adds	r3, r7, #1
 8001952:	7812      	ldrb	r2, [r2, #0]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d141      	bne.n	80019de <explode_string+0x112>
        {

            for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 800195a:	230a      	movs	r3, #10
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	e033      	b.n	80019cc <explode_string+0x100>
            {

                if(buffer[i+1+j]==end_char_field || buffer[i+1+j]==end_char_string)/// stop copy when , or * reached
 8001964:	200c      	movs	r0, #12
 8001966:	183b      	adds	r3, r7, r0
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	210a      	movs	r1, #10
 800196e:	187b      	adds	r3, r7, r1
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	18d3      	adds	r3, r2, r3
 8001974:	001a      	movs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	189b      	adds	r3, r3, r2
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	2320      	movs	r3, #32
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4293      	cmp	r3, r2
 8001984:	d03c      	beq.n	8001a00 <explode_string+0x134>
 8001986:	183b      	adds	r3, r7, r0
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	187b      	adds	r3, r7, r1
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	001a      	movs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	189b      	adds	r3, r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2228      	movs	r2, #40	; 0x28
 800199c:	18ba      	adds	r2, r7, r2
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d02d      	beq.n	8001a00 <explode_string+0x134>
                {
                    break;
                }

                temp_data[j] = buffer[i+1+j];/////i+1+j  because already , at index i
 80019a4:	183b      	adds	r3, r7, r0
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	18d3      	adds	r3, r2, r3
 80019b0:	001a      	movs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	189a      	adds	r2, r3, r2
 80019b6:	0008      	movs	r0, r1
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	7811      	ldrb	r1, [r2, #0]
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <explode_string+0x140>)
 80019c0:	54d1      	strb	r1, [r2, r3]
            for(j=0; j<field_len; j++)//// Copy data field, field_len length of field variable
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	183b      	adds	r3, r7, r0
 80019c8:	3201      	adds	r2, #1
 80019ca:	801a      	strh	r2, [r3, #0]
 80019cc:	230a      	movs	r3, #10
 80019ce:	18fa      	adds	r2, r7, r3
 80019d0:	2324      	movs	r3, #36	; 0x24
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	8812      	ldrh	r2, [r2, #0]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3c3      	bcc.n	8001964 <explode_string+0x98>
            }

            break;
 80019dc:	e010      	b.n	8001a00 <explode_string+0x134>
    for(i=0; i< buffer_len; i++)
 80019de:	210c      	movs	r1, #12
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	881a      	ldrh	r2, [r3, #0]
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	3201      	adds	r2, #1
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	230c      	movs	r3, #12
 80019ec:	18fa      	adds	r2, r7, r3
 80019ee:	1cbb      	adds	r3, r7, #2
 80019f0:	8812      	ldrh	r2, [r2, #0]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d200      	bcs.n	80019fa <explode_string+0x12e>
 80019f8:	e78d      	b.n	8001916 <explode_string+0x4a>
        }

    }

    return;
 80019fa:	e002      	b.n	8001a02 <explode_string+0x136>
            break;
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	e000      	b.n	8001a02 <explode_string+0x136>
            break;
 8001a00:	46c0      	nop			; (mov r8, r8)
    return;
 8001a02:	46c0      	nop			; (mov r8, r8)
}
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b005      	add	sp, #20
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	200003d8 	.word	0x200003d8

08001a10 <read_clock_from_flash>:
 *
 * \return - none
 */

static void read_clock_from_flash(void)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
    uint8_t i;
	uint8_t server_clock_format[18];

	server_clock_format[0] = sFLASH_ReadByte1(mem_read_address);
 8001a16:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f007 fb50 	bl	80090c0 <sFLASH_ReadByte1>
 8001a20:	0003      	movs	r3, r0
 8001a22:	001a      	movs	r2, r3
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	701a      	strb	r2, [r3, #0]

	if(server_clock_format[0]=='#')//////////////////// read clock
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b23      	cmp	r3, #35	; 0x23
 8001a2e:	d000      	beq.n	8001a32 <read_clock_from_flash+0x22>
 8001a30:	e0cc      	b.n	8001bcc <read_clock_from_flash+0x1bc>
	{
		for(i = 1; i < 17; i++)
 8001a32:	2317      	movs	r3, #23
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e013      	b.n	8001a64 <read_clock_from_flash+0x54>
		{
			server_clock_format[i] = sFLASH_ReadByte1(mem_read_address+i);
 8001a3c:	2517      	movs	r5, #23
 8001a3e:	197b      	adds	r3, r7, r5
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	18d2      	adds	r2, r2, r3
 8001a48:	197b      	adds	r3, r7, r5
 8001a4a:	781c      	ldrb	r4, [r3, #0]
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f007 fb37 	bl	80090c0 <sFLASH_ReadByte1>
 8001a52:	0003      	movs	r3, r0
 8001a54:	001a      	movs	r2, r3
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	551a      	strb	r2, [r3, r4]
		for(i = 1; i < 17; i++)
 8001a5a:	197b      	adds	r3, r7, r5
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	197b      	adds	r3, r7, r5
 8001a60:	3201      	adds	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	2417      	movs	r4, #23
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d9e6      	bls.n	8001a3c <read_clock_from_flash+0x2c>
		}

		if(server_clock_format[1]=='c' && server_clock_format[2]=='l' && server_clock_format[3]=='o' && server_clock_format[4]=='c' && server_clock_format[5]=='k' && server_clock_format[16]=='*')
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	2b63      	cmp	r3, #99	; 0x63
 8001a74:	d000      	beq.n	8001a78 <read_clock_from_flash+0x68>
 8001a76:	e0a9      	b.n	8001bcc <read_clock_from_flash+0x1bc>
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	789b      	ldrb	r3, [r3, #2]
 8001a7c:	2b6c      	cmp	r3, #108	; 0x6c
 8001a7e:	d000      	beq.n	8001a82 <read_clock_from_flash+0x72>
 8001a80:	e0a4      	b.n	8001bcc <read_clock_from_flash+0x1bc>
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	2b6f      	cmp	r3, #111	; 0x6f
 8001a88:	d000      	beq.n	8001a8c <read_clock_from_flash+0x7c>
 8001a8a:	e09f      	b.n	8001bcc <read_clock_from_flash+0x1bc>
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	2b63      	cmp	r3, #99	; 0x63
 8001a92:	d000      	beq.n	8001a96 <read_clock_from_flash+0x86>
 8001a94:	e09a      	b.n	8001bcc <read_clock_from_flash+0x1bc>
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	795b      	ldrb	r3, [r3, #5]
 8001a9a:	2b6b      	cmp	r3, #107	; 0x6b
 8001a9c:	d000      	beq.n	8001aa0 <read_clock_from_flash+0x90>
 8001a9e:	e095      	b.n	8001bcc <read_clock_from_flash+0x1bc>
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	7c1b      	ldrb	r3, [r3, #16]
 8001aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8001aa6:	d000      	beq.n	8001aaa <read_clock_from_flash+0x9a>
 8001aa8:	e090      	b.n	8001bcc <read_clock_from_flash+0x1bc>
		{
			flush_array((char*)read_clock, 11);
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <read_clock_from_flash+0x1c8>)
 8001aac:	210b      	movs	r1, #11
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff f8ea 	bl	8000c88 <flush_array>

			for(i = 0; i < 10; i++)
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e00e      	b.n	8001ada <read_clock_from_flash+0xca>
			{
				read_clock[i] = server_clock_format[i+6];
 8001abc:	2017      	movs	r0, #23
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	1d9a      	adds	r2, r3, #6
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	1d39      	adds	r1, r7, #4
 8001aca:	5c89      	ldrb	r1, [r1, r2]
 8001acc:	4a42      	ldr	r2, [pc, #264]	; (8001bd8 <read_clock_from_flash+0x1c8>)
 8001ace:	54d1      	strb	r1, [r2, r3]
			for(i = 0; i < 10; i++)
 8001ad0:	183b      	adds	r3, r7, r0
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	3201      	adds	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	2417      	movs	r4, #23
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b09      	cmp	r3, #9
 8001ae2:	d9eb      	bls.n	8001abc <read_clock_from_flash+0xac>
			}

			mem_read_address=mem_read_address+17;///// total 17 bytes stri
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3311      	adds	r3, #17
 8001aea:	001a      	movs	r2, r3
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001aee:	601a      	str	r2, [r3, #0]

			server_clock_format[0] = sFLASH_ReadByte1(mem_read_address);
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f007 fae3 	bl	80090c0 <sFLASH_ReadByte1>
 8001afa:	0003      	movs	r3, r0
 8001afc:	001a      	movs	r2, r3
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	701a      	strb	r2, [r3, #0]

			if(server_clock_format[0]=='#')////////////// read meter serial no.
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b23      	cmp	r3, #35	; 0x23
 8001b08:	d160      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
			{
				for(i = 1; i < 17; i++)
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	e013      	b.n	8001b3a <read_clock_from_flash+0x12a>
				{
					server_clock_format[i] = sFLASH_ReadByte1(mem_read_address+i);
 8001b12:	2517      	movs	r5, #23
 8001b14:	197b      	adds	r3, r7, r5
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	18d2      	adds	r2, r2, r3
 8001b1e:	197b      	adds	r3, r7, r5
 8001b20:	781c      	ldrb	r4, [r3, #0]
 8001b22:	0010      	movs	r0, r2
 8001b24:	f007 facc 	bl	80090c0 <sFLASH_ReadByte1>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	551a      	strb	r2, [r3, r4]
				for(i = 1; i < 17; i++)
 8001b30:	197b      	adds	r3, r7, r5
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	197b      	adds	r3, r7, r5
 8001b36:	3201      	adds	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	2417      	movs	r4, #23
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d9e6      	bls.n	8001b12 <read_clock_from_flash+0x102>
				}

				if(server_clock_format[1]=='m' && server_clock_format[2]=='s' && server_clock_format[3]=='r' && server_clock_format[4]=='l' && server_clock_format[16]=='*')
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	785b      	ldrb	r3, [r3, #1]
 8001b48:	2b6d      	cmp	r3, #109	; 0x6d
 8001b4a:	d13f      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	2b73      	cmp	r3, #115	; 0x73
 8001b52:	d13b      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	78db      	ldrb	r3, [r3, #3]
 8001b58:	2b72      	cmp	r3, #114	; 0x72
 8001b5a:	d137      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	2b6c      	cmp	r3, #108	; 0x6c
 8001b62:	d133      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	7c1b      	ldrb	r3, [r3, #16]
 8001b68:	2b2a      	cmp	r3, #42	; 0x2a
 8001b6a:	d12f      	bne.n	8001bcc <read_clock_from_flash+0x1bc>
				{
					flush_array((char*)read_meter_serial_no, 20);
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <read_clock_from_flash+0x1cc>)
 8001b6e:	2114      	movs	r1, #20
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff f889 	bl	8000c88 <flush_array>

					for(i = 0; i < 11; i++)
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	e00e      	b.n	8001b9c <read_clock_from_flash+0x18c>
					{
						read_meter_serial_no[i] = server_clock_format[i+5];
 8001b7e:	2017      	movs	r0, #23
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	1d5a      	adds	r2, r3, #5
 8001b86:	183b      	adds	r3, r7, r0
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	1d39      	adds	r1, r7, #4
 8001b8c:	5c89      	ldrb	r1, [r1, r2]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <read_clock_from_flash+0x1cc>)
 8001b90:	54d1      	strb	r1, [r2, r3]
					for(i = 0; i < 11; i++)
 8001b92:	183b      	adds	r3, r7, r0
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	3201      	adds	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	2317      	movs	r3, #23
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d9eb      	bls.n	8001b7e <read_clock_from_flash+0x16e>
					}

					read_meter_model[0] = read_meter_serial_no[0];
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <read_clock_from_flash+0x1cc>)
 8001ba8:	781a      	ldrb	r2, [r3, #0]
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <read_clock_from_flash+0x1d0>)
 8001bac:	701a      	strb	r2, [r3, #0]
					read_meter_model[1] = read_meter_serial_no[1];
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <read_clock_from_flash+0x1cc>)
 8001bb0:	785a      	ldrb	r2, [r3, #1]
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <read_clock_from_flash+0x1d0>)
 8001bb4:	705a      	strb	r2, [r3, #1]
					read_meter_model[2] = read_meter_serial_no[2];
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <read_clock_from_flash+0x1cc>)
 8001bb8:	789a      	ldrb	r2, [r3, #2]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <read_clock_from_flash+0x1d0>)
 8001bbc:	709a      	strb	r2, [r3, #2]

					mem_read_address=mem_read_address+17;///// total 17 bytes string
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3311      	adds	r3, #17
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <read_clock_from_flash+0x1c4>)
 8001bc8:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

    return;
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46c0      	nop			; (mov r8, r8)
}
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b006      	add	sp, #24
 8001bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	200004d8 	.word	0x200004d8
 8001bdc:	200004f0 	.word	0x200004f0
 8001be0:	200004e4 	.word	0x200004e4

08001be4 <read_devinfo_from_flash>:
 *
 * \return -
 */

static void read_devinfo_from_flash(uint32_t sect_address)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af04      	add	r7, sp, #16
 8001bea:	6078      	str	r0, [r7, #4]
    uint32_t loc;
    uint16_t i;

    loc = sect_address;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60fb      	str	r3, [r7, #12]
    flush_array(stored_parameters, 100);
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001bf2:	2164      	movs	r1, #100	; 0x64
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff f847 	bl	8000c88 <flush_array>

    for(i = 0; i < 100; i++)
 8001bfa:	230a      	movs	r3, #10
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	e01d      	b.n	8001c40 <read_devinfo_from_flash+0x5c>
    {
        stored_parameters[i] = sFLASH_ReadByte1(loc++);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60fa      	str	r2, [r7, #12]
 8001c0a:	250a      	movs	r5, #10
 8001c0c:	197a      	adds	r2, r7, r5
 8001c0e:	8814      	ldrh	r4, [r2, #0]
 8001c10:	0018      	movs	r0, r3
 8001c12:	f007 fa55 	bl	80090c0 <sFLASH_ReadByte1>
 8001c16:	0003      	movs	r3, r0
 8001c18:	001a      	movs	r2, r3
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c1c:	551a      	strb	r2, [r3, r4]

        if ((stored_parameters[i] == '*') || (stored_parameters[i] == 0xFF))
 8001c1e:	197b      	adds	r3, r7, r5
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	2b2a      	cmp	r3, #42	; 0x2a
 8001c28:	d00f      	beq.n	8001c4a <read_devinfo_from_flash+0x66>
 8001c2a:	197b      	adds	r3, r7, r5
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	4a47      	ldr	r2, [pc, #284]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d009      	beq.n	8001c4a <read_devinfo_from_flash+0x66>
    for(i = 0; i < 100; i++)
 8001c36:	197b      	adds	r3, r7, r5
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	197b      	adds	r3, r7, r5
 8001c3c:	3201      	adds	r2, #1
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	230a      	movs	r3, #10
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b63      	cmp	r3, #99	; 0x63
 8001c48:	d9dc      	bls.n	8001c04 <read_devinfo_from_flash+0x20>
            break;
        }

    }

    debug_printf(DBGLVL_MAX,"READ DEV INFO: %s\r\n", stored_parameters);
 8001c4a:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <read_devinfo_from_flash+0x16c>)
 8001c4e:	0019      	movs	r1, r3
 8001c50:	2004      	movs	r0, #4
 8001c52:	f000 fd7f 	bl	8002754 <debug_printf>



    if(stored_parameters[0]=='#' && stored_parameters[i]=='*')
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b23      	cmp	r3, #35	; 0x23
 8001c5c:	d000      	beq.n	8001c60 <read_devinfo_from_flash+0x7c>
 8001c5e:	e070      	b.n	8001d42 <read_devinfo_from_flash+0x15e>
 8001c60:	240a      	movs	r4, #10
 8001c62:	193b      	adds	r3, r7, r4
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6c:	d169      	bne.n	8001d42 <read_devinfo_from_flash+0x15e>
    {


        explode_string(stored_parameters, 100, 1, ',', ',', 18, '*');
 8001c6e:	4837      	ldr	r0, [pc, #220]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001c70:	232a      	movs	r3, #42	; 0x2a
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2312      	movs	r3, #18
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	232c      	movs	r3, #44	; 0x2c
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	232c      	movs	r3, #44	; 0x2c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2164      	movs	r1, #100	; 0x64
 8001c82:	f7ff fe23 	bl	80018cc <explode_string>

        i = 0;
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	801a      	strh	r2, [r3, #0]

        do
        {
            ble_paired_device[i] = temp_data[i];
 8001c8c:	240a      	movs	r4, #10
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	492f      	ldr	r1, [pc, #188]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001c98:	5c89      	ldrb	r1, [r1, r2]
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <read_devinfo_from_flash+0x174>)
 8001c9c:	54d1      	strb	r1, [r2, r3]
            i++;
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	801a      	strh	r2, [r3, #0]
        } while (temp_data[i] != 0x00);
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1eb      	bne.n	8001c8c <read_devinfo_from_flash+0xa8>



        explode_string(stored_parameters, 100, 2, ',', ',', METERMODEL_LEN, '*');
 8001cb4:	4825      	ldr	r0, [pc, #148]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001cb6:	232a      	movs	r3, #42	; 0x2a
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	230a      	movs	r3, #10
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	232c      	movs	r3, #44	; 0x2c
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	232c      	movs	r3, #44	; 0x2c
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	2164      	movs	r1, #100	; 0x64
 8001cc8:	f7ff fe00 	bl	80018cc <explode_string>


        i = 0;
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	801a      	strh	r2, [r3, #0]

        do
        {
            meter_model[i] = temp_data[i];
 8001cd2:	240a      	movs	r4, #10
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	491d      	ldr	r1, [pc, #116]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001cde:	5c89      	ldrb	r1, [r1, r2]
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <read_devinfo_from_flash+0x178>)
 8001ce2:	54d1      	strb	r1, [r2, r3]
            i++;
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	3201      	adds	r2, #1
 8001cec:	801a      	strh	r2, [r3, #0]
        } while (temp_data[i] != 0x00);
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1eb      	bne.n	8001cd2 <read_devinfo_from_flash+0xee>


        explode_string(stored_parameters, 100, 3, ',', ',', METERSERIAL_LEN, '*');
 8001cfa:	4814      	ldr	r0, [pc, #80]	; (8001d4c <read_devinfo_from_flash+0x168>)
 8001cfc:	232a      	movs	r3, #42	; 0x2a
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2314      	movs	r3, #20
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	232c      	movs	r3, #44	; 0x2c
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	232c      	movs	r3, #44	; 0x2c
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	2164      	movs	r1, #100	; 0x64
 8001d0e:	f7ff fddd 	bl	80018cc <explode_string>

        i = 0;
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]

        do
        {
            meter_serial_no[i] = temp_data[i];
 8001d18:	200a      	movs	r0, #10
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	881a      	ldrh	r2, [r3, #0]
 8001d1e:	183b      	adds	r3, r7, r0
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001d24:	5c89      	ldrb	r1, [r1, r2]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <read_devinfo_from_flash+0x17c>)
 8001d28:	54d1      	strb	r1, [r2, r3]
            i++;
 8001d2a:	183b      	adds	r3, r7, r0
 8001d2c:	881a      	ldrh	r2, [r3, #0]
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	3201      	adds	r2, #1
 8001d32:	801a      	strh	r2, [r3, #0]
        } while (temp_data[i] != 0x00);
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <read_devinfo_from_flash+0x170>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1eb      	bne.n	8001d18 <read_devinfo_from_flash+0x134>

    }

    return;
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46c0      	nop			; (mov r8, r8)
}
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b004      	add	sp, #16
 8001d48:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20000368 	.word	0x20000368
 8001d50:	08013140 	.word	0x08013140
 8001d54:	200003d8 	.word	0x200003d8
 8001d58:	20001e2c 	.word	0x20001e2c
 8001d5c:	2000127c 	.word	0x2000127c
 8001d60:	20001e68 	.word	0x20001e68

08001d64 <read_runtime_parameters_from_flash>:
 *
 * \return -
 */

static uint8_t read_runtime_parameters_from_flash(uint32_t sect_address)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af04      	add	r7, sp, #16
 8001d6a:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60fb      	str	r3, [r7, #12]
    uint16_t i=0;
 8001d70:	240a      	movs	r4, #10
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

    flush_array(stored_parameters, 100);
 8001d78:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001d7a:	2164      	movs	r1, #100	; 0x64
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7fe ff83 	bl	8000c88 <flush_array>

    for(i=0; i<100; i++)
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	2200      	movs	r2, #0
 8001d86:	801a      	strh	r2, [r3, #0]
 8001d88:	e01d      	b.n	8001dc6 <read_runtime_parameters_from_flash+0x62>
    {
        stored_parameters[i] = sFLASH_ReadByte1(loc++);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	250a      	movs	r5, #10
 8001d92:	197a      	adds	r2, r7, r5
 8001d94:	8814      	ldrh	r4, [r2, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f007 f992 	bl	80090c0 <sFLASH_ReadByte1>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	001a      	movs	r2, r3
 8001da0:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001da2:	551a      	strb	r2, [r3, r4]

        if(stored_parameters[i]=='*' || stored_parameters[i]==0xff)
 8001da4:	197b      	adds	r3, r7, r5
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	2b2a      	cmp	r3, #42	; 0x2a
 8001dae:	d00f      	beq.n	8001dd0 <read_runtime_parameters_from_flash+0x6c>
 8001db0:	197b      	adds	r3, r7, r5
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	d009      	beq.n	8001dd0 <read_runtime_parameters_from_flash+0x6c>
    for(i=0; i<100; i++)
 8001dbc:	197b      	adds	r3, r7, r5
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	197b      	adds	r3, r7, r5
 8001dc2:	3201      	adds	r2, #1
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2b63      	cmp	r3, #99	; 0x63
 8001dce:	d9dc      	bls.n	8001d8a <read_runtime_parameters_from_flash+0x26>
//    sprintf((char*)tx_string, "\r\n+READ: %s\r\n", stored_parameters);
//    debug_printf(DBGLVL_MAX,tx_string);



    if(stored_parameters[0]=='#' && stored_parameters[i]=='*')
 8001dd0:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b23      	cmp	r3, #35	; 0x23
 8001dd6:	d168      	bne.n	8001eaa <read_runtime_parameters_from_flash+0x146>
 8001dd8:	230a      	movs	r3, #10
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	2b2a      	cmp	r3, #42	; 0x2a
 8001de4:	d161      	bne.n	8001eaa <read_runtime_parameters_from_flash+0x146>
    {
        explode_string(stored_parameters, 100, 1, ',', ',', 5, '*'); //////  meter_sequence_number
 8001de6:	4833      	ldr	r0, [pc, #204]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001de8:	232a      	movs	r3, #42	; 0x2a
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2305      	movs	r3, #5
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	232c      	movs	r3, #44	; 0x2c
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	232c      	movs	r3, #44	; 0x2c
 8001df6:	2201      	movs	r2, #1
 8001df8:	2164      	movs	r1, #100	; 0x64
 8001dfa:	f7ff fd67 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <read_runtime_parameters_from_flash+0xb2>
        {
            meter_sequence_number = atol((char*)temp_data);
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f00f f9b5 	bl	8011178 <atol>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <read_runtime_parameters_from_flash+0x158>)
 8001e14:	801a      	strh	r2, [r3, #0]
        }


        explode_string(stored_parameters, 100, 2, ',', ',', 8, '*');//////  mem_write_address
 8001e16:	4827      	ldr	r0, [pc, #156]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001e18:	232a      	movs	r3, #42	; 0x2a
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	232c      	movs	r3, #44	; 0x2c
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	232c      	movs	r3, #44	; 0x2c
 8001e26:	2202      	movs	r2, #2
 8001e28:	2164      	movs	r1, #100	; 0x64
 8001e2a:	f7ff fd4f 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <read_runtime_parameters_from_flash+0xe2>
        {
            mem_write_address = atol((char*)temp_data);
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f00f f99d 	bl	8011178 <atol>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	001a      	movs	r2, r3
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <read_runtime_parameters_from_flash+0x15c>)
 8001e44:	601a      	str	r2, [r3, #0]
        }


        explode_string(stored_parameters, 100, 3, ',', ',', 8, '*');//////  mem_read_address
 8001e46:	481b      	ldr	r0, [pc, #108]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001e48:	232a      	movs	r3, #42	; 0x2a
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	232c      	movs	r3, #44	; 0x2c
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	232c      	movs	r3, #44	; 0x2c
 8001e56:	2203      	movs	r2, #3
 8001e58:	2164      	movs	r1, #100	; 0x64
 8001e5a:	f7ff fd37 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <read_runtime_parameters_from_flash+0x112>
        {
            mem_read_address = atol((char*)temp_data);
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f00f f985 	bl	8011178 <atol>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	001a      	movs	r2, r3
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <read_runtime_parameters_from_flash+0x160>)
 8001e74:	601a      	str	r2, [r3, #0]
        }

        explode_string(stored_parameters, 100, 4, ',', ',', 5, '*');//////  total_downloaded_records_meter
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <read_runtime_parameters_from_flash+0x150>)
 8001e78:	232a      	movs	r3, #42	; 0x2a
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	232c      	movs	r3, #44	; 0x2c
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	232c      	movs	r3, #44	; 0x2c
 8001e86:	2204      	movs	r2, #4
 8001e88:	2164      	movs	r1, #100	; 0x64
 8001e8a:	f7ff fd1f 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <read_runtime_parameters_from_flash+0x142>
        {
            total_downloaded_records_meter = atol((char*)temp_data);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <read_runtime_parameters_from_flash+0x154>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f00f f96d 	bl	8011178 <atol>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <read_runtime_parameters_from_flash+0x164>)
 8001ea4:	801a      	strh	r2, [r3, #0]
                (unsigned int)(mem_read_address-LOGS_START_ADDRESS) % 17,
                (unsigned int)total_downloaded_records_meter);

        debug_printf(DBGLVL_MAX,tx_string);
*/
        return 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <read_runtime_parameters_from_flash+0x148>
    }

    return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb4:	20000368 	.word	0x20000368
 8001eb8:	200003d8 	.word	0x200003d8
 8001ebc:	20000504 	.word	0x20000504
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	20000506 	.word	0x20000506

08001ecc <read_settings_from_flash>:
 *
 * \return -
 */

static uint8_t read_settings_from_flash(uint32_t sect_address)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af06      	add	r7, sp, #24
 8001ed2:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]
    uint16_t i=0;
 8001ed8:	240a      	movs	r4, #10
 8001eda:	193b      	adds	r3, r7, r4
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]

    flush_array(stored_settings, 300);
 8001ee0:	2396      	movs	r3, #150	; 0x96
 8001ee2:	005a      	lsls	r2, r3, #1
 8001ee4:	4be7      	ldr	r3, [pc, #924]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f7fe fecd 	bl	8000c88 <flush_array>

    for(i=0; i<300; i++)
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	e01d      	b.n	8001f32 <read_settings_from_flash+0x66>
    {
        stored_settings[i] = sFLASH_ReadByte1(loc++);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	60fa      	str	r2, [r7, #12]
 8001efc:	250a      	movs	r5, #10
 8001efe:	197a      	adds	r2, r7, r5
 8001f00:	8814      	ldrh	r4, [r2, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f007 f8dc 	bl	80090c0 <sFLASH_ReadByte1>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	4bdd      	ldr	r3, [pc, #884]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f0e:	551a      	strb	r2, [r3, r4]

        if(stored_settings[i]=='*' || stored_settings[i]==0xff)
 8001f10:	197b      	adds	r3, r7, r5
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	4adb      	ldr	r2, [pc, #876]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	2b2a      	cmp	r3, #42	; 0x2a
 8001f1a:	d011      	beq.n	8001f40 <read_settings_from_flash+0x74>
 8001f1c:	197b      	adds	r3, r7, r5
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	4ad8      	ldr	r2, [pc, #864]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	2bff      	cmp	r3, #255	; 0xff
 8001f26:	d00b      	beq.n	8001f40 <read_settings_from_flash+0x74>
    for(i=0; i<300; i++)
 8001f28:	197b      	adds	r3, r7, r5
 8001f2a:	881a      	ldrh	r2, [r3, #0]
 8001f2c:	197b      	adds	r3, r7, r5
 8001f2e:	3201      	adds	r2, #1
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	230a      	movs	r3, #10
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	2396      	movs	r3, #150	; 0x96
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d3da      	bcc.n	8001ef6 <read_settings_from_flash+0x2a>
        break;
    }

//// TTL

    debug_printf(DBGLVL_MAX, "\r\n+READ: %s\r\n", stored_settings);
 8001f40:	4ad0      	ldr	r2, [pc, #832]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f42:	4bd1      	ldr	r3, [pc, #836]	; (8002288 <read_settings_from_flash+0x3bc>)
 8001f44:	0019      	movs	r1, r3
 8001f46:	2004      	movs	r0, #4
 8001f48:	f000 fc04 	bl	8002754 <debug_printf>



    if(stored_settings[0]=='#' && stored_settings[i]=='*')
 8001f4c:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b23      	cmp	r3, #35	; 0x23
 8001f52:	d000      	beq.n	8001f56 <read_settings_from_flash+0x8a>
 8001f54:	e1bc      	b.n	80022d0 <read_settings_from_flash+0x404>
 8001f56:	230a      	movs	r3, #10
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4ac9      	ldr	r2, [pc, #804]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	2b2a      	cmp	r3, #42	; 0x2a
 8001f62:	d000      	beq.n	8001f66 <read_settings_from_flash+0x9a>
 8001f64:	e1b4      	b.n	80022d0 <read_settings_from_flash+0x404>
    {
        explode_string(stored_settings, 300, 1, ',', ',', 40, '*');//////  APN
 8001f66:	2396      	movs	r3, #150	; 0x96
 8001f68:	0059      	lsls	r1, r3, #1
 8001f6a:	48c6      	ldr	r0, [pc, #792]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001f6c:	232a      	movs	r3, #42	; 0x2a
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2328      	movs	r3, #40	; 0x28
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	232c      	movs	r3, #44	; 0x2c
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	232c      	movs	r3, #44	; 0x2c
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f7ff fca6 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001f80:	4bc2      	ldr	r3, [pc, #776]	; (800228c <read_settings_from_flash+0x3c0>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <read_settings_from_flash+0xd2>
        {
           flush_array(apn, 40);
 8001f88:	4bc1      	ldr	r3, [pc, #772]	; (8002290 <read_settings_from_flash+0x3c4>)
 8001f8a:	2128      	movs	r1, #40	; 0x28
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fe7b 	bl	8000c88 <flush_array>
           sprintf((char*)apn, "%s", temp_data);
 8001f92:	4abe      	ldr	r2, [pc, #760]	; (800228c <read_settings_from_flash+0x3c0>)
 8001f94:	49bf      	ldr	r1, [pc, #764]	; (8002294 <read_settings_from_flash+0x3c8>)
 8001f96:	4bbe      	ldr	r3, [pc, #760]	; (8002290 <read_settings_from_flash+0x3c4>)
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f00f fbb3 	bl	8011704 <siprintf>
        }


        explode_string(stored_settings, 300, 2, ',', ',', 10, '*');//////  Configuration Version
 8001f9e:	2396      	movs	r3, #150	; 0x96
 8001fa0:	0059      	lsls	r1, r3, #1
 8001fa2:	48b8      	ldr	r0, [pc, #736]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001fa4:	232a      	movs	r3, #42	; 0x2a
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	230a      	movs	r3, #10
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	232c      	movs	r3, #44	; 0x2c
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	232c      	movs	r3, #44	; 0x2c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f7ff fc8a 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001fb8:	4bb4      	ldr	r3, [pc, #720]	; (800228c <read_settings_from_flash+0x3c0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <read_settings_from_flash+0x10a>
        {
            flush_array(configuration_version, 10);
 8001fc0:	4bb5      	ldr	r3, [pc, #724]	; (8002298 <read_settings_from_flash+0x3cc>)
 8001fc2:	210a      	movs	r1, #10
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7fe fe5f 	bl	8000c88 <flush_array>
            sprintf((char*)configuration_version, "%s", temp_data);
 8001fca:	4ab0      	ldr	r2, [pc, #704]	; (800228c <read_settings_from_flash+0x3c0>)
 8001fcc:	49b1      	ldr	r1, [pc, #708]	; (8002294 <read_settings_from_flash+0x3c8>)
 8001fce:	4bb2      	ldr	r3, [pc, #712]	; (8002298 <read_settings_from_flash+0x3cc>)
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f00f fb97 	bl	8011704 <siprintf>
        }


        explode_string(stored_settings, 300, 3, ',', ',', 100, '*');//////  mqtt_server
 8001fd6:	2396      	movs	r3, #150	; 0x96
 8001fd8:	0059      	lsls	r1, r3, #1
 8001fda:	48aa      	ldr	r0, [pc, #680]	; (8002284 <read_settings_from_flash+0x3b8>)
 8001fdc:	232a      	movs	r3, #42	; 0x2a
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2364      	movs	r3, #100	; 0x64
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	232c      	movs	r3, #44	; 0x2c
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	232c      	movs	r3, #44	; 0x2c
 8001fea:	2203      	movs	r2, #3
 8001fec:	f7ff fc6e 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	; (800228c <read_settings_from_flash+0x3c0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00a      	beq.n	800200e <read_settings_from_flash+0x142>
        {
            flush_array(mqtt_server, 100);
 8001ff8:	4ba8      	ldr	r3, [pc, #672]	; (800229c <read_settings_from_flash+0x3d0>)
 8001ffa:	2164      	movs	r1, #100	; 0x64
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe fe43 	bl	8000c88 <flush_array>
            sprintf((char*)mqtt_server, "%s", temp_data);
 8002002:	4aa2      	ldr	r2, [pc, #648]	; (800228c <read_settings_from_flash+0x3c0>)
 8002004:	49a3      	ldr	r1, [pc, #652]	; (8002294 <read_settings_from_flash+0x3c8>)
 8002006:	4ba5      	ldr	r3, [pc, #660]	; (800229c <read_settings_from_flash+0x3d0>)
 8002008:	0018      	movs	r0, r3
 800200a:	f00f fb7b 	bl	8011704 <siprintf>
        }


        explode_string(stored_settings, 300, 4, ',', ',', 7, '*');//////  mqtt_port
 800200e:	2396      	movs	r3, #150	; 0x96
 8002010:	0059      	lsls	r1, r3, #1
 8002012:	489c      	ldr	r0, [pc, #624]	; (8002284 <read_settings_from_flash+0x3b8>)
 8002014:	232a      	movs	r3, #42	; 0x2a
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	2307      	movs	r3, #7
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	232c      	movs	r3, #44	; 0x2c
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	232c      	movs	r3, #44	; 0x2c
 8002022:	2204      	movs	r2, #4
 8002024:	f7ff fc52 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002028:	4b98      	ldr	r3, [pc, #608]	; (800228c <read_settings_from_flash+0x3c0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <read_settings_from_flash+0x17a>
        {
            flush_array(mqtt_port, 7);
 8002030:	4b9b      	ldr	r3, [pc, #620]	; (80022a0 <read_settings_from_flash+0x3d4>)
 8002032:	2107      	movs	r1, #7
 8002034:	0018      	movs	r0, r3
 8002036:	f7fe fe27 	bl	8000c88 <flush_array>
            sprintf((char*)mqtt_port, "%s", temp_data);
 800203a:	4a94      	ldr	r2, [pc, #592]	; (800228c <read_settings_from_flash+0x3c0>)
 800203c:	4995      	ldr	r1, [pc, #596]	; (8002294 <read_settings_from_flash+0x3c8>)
 800203e:	4b98      	ldr	r3, [pc, #608]	; (80022a0 <read_settings_from_flash+0x3d4>)
 8002040:	0018      	movs	r0, r3
 8002042:	f00f fb5f 	bl	8011704 <siprintf>
        }


        explode_string(stored_settings, 300, 5, ',', ',', 100, '*');//////  mqtt_username
 8002046:	2396      	movs	r3, #150	; 0x96
 8002048:	0059      	lsls	r1, r3, #1
 800204a:	488e      	ldr	r0, [pc, #568]	; (8002284 <read_settings_from_flash+0x3b8>)
 800204c:	232a      	movs	r3, #42	; 0x2a
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2364      	movs	r3, #100	; 0x64
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	232c      	movs	r3, #44	; 0x2c
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	232c      	movs	r3, #44	; 0x2c
 800205a:	2205      	movs	r2, #5
 800205c:	f7ff fc36 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <read_settings_from_flash+0x3c0>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <read_settings_from_flash+0x1b2>
        {
            flush_array(mqtt_username, 100);
 8002068:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <read_settings_from_flash+0x3d8>)
 800206a:	2164      	movs	r1, #100	; 0x64
 800206c:	0018      	movs	r0, r3
 800206e:	f7fe fe0b 	bl	8000c88 <flush_array>
            sprintf((char*)mqtt_username, "%s", temp_data);
 8002072:	4a86      	ldr	r2, [pc, #536]	; (800228c <read_settings_from_flash+0x3c0>)
 8002074:	4987      	ldr	r1, [pc, #540]	; (8002294 <read_settings_from_flash+0x3c8>)
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <read_settings_from_flash+0x3d8>)
 8002078:	0018      	movs	r0, r3
 800207a:	f00f fb43 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 6, ',', ',', 50, '*');//////  mqtt_password
 800207e:	2396      	movs	r3, #150	; 0x96
 8002080:	0059      	lsls	r1, r3, #1
 8002082:	4880      	ldr	r0, [pc, #512]	; (8002284 <read_settings_from_flash+0x3b8>)
 8002084:	232a      	movs	r3, #42	; 0x2a
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	2332      	movs	r3, #50	; 0x32
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	232c      	movs	r3, #44	; 0x2c
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	232c      	movs	r3, #44	; 0x2c
 8002092:	2206      	movs	r2, #6
 8002094:	f7ff fc1a 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002098:	4b7c      	ldr	r3, [pc, #496]	; (800228c <read_settings_from_flash+0x3c0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <read_settings_from_flash+0x1ea>
        {
            flush_array(mqtt_password, 50);
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <read_settings_from_flash+0x3dc>)
 80020a2:	2132      	movs	r1, #50	; 0x32
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7fe fdef 	bl	8000c88 <flush_array>
            sprintf((char*)mqtt_password, "%s", temp_data);
 80020aa:	4a78      	ldr	r2, [pc, #480]	; (800228c <read_settings_from_flash+0x3c0>)
 80020ac:	4979      	ldr	r1, [pc, #484]	; (8002294 <read_settings_from_flash+0x3c8>)
 80020ae:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <read_settings_from_flash+0x3dc>)
 80020b0:	0018      	movs	r0, r3
 80020b2:	f00f fb27 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 7, ',', ',', 100, '*');//////  mqtt_client_id
 80020b6:	2396      	movs	r3, #150	; 0x96
 80020b8:	0059      	lsls	r1, r3, #1
 80020ba:	4872      	ldr	r0, [pc, #456]	; (8002284 <read_settings_from_flash+0x3b8>)
 80020bc:	232a      	movs	r3, #42	; 0x2a
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	2364      	movs	r3, #100	; 0x64
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	232c      	movs	r3, #44	; 0x2c
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	232c      	movs	r3, #44	; 0x2c
 80020ca:	2207      	movs	r2, #7
 80020cc:	f7ff fbfe 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 80020d0:	4b6e      	ldr	r3, [pc, #440]	; (800228c <read_settings_from_flash+0x3c0>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <read_settings_from_flash+0x222>
        {
            flush_array(mqtt_client_id, 100);
 80020d8:	4b74      	ldr	r3, [pc, #464]	; (80022ac <read_settings_from_flash+0x3e0>)
 80020da:	2164      	movs	r1, #100	; 0x64
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe fdd3 	bl	8000c88 <flush_array>
            sprintf((char*)mqtt_client_id, "%s", temp_data);
 80020e2:	4a6a      	ldr	r2, [pc, #424]	; (800228c <read_settings_from_flash+0x3c0>)
 80020e4:	496b      	ldr	r1, [pc, #428]	; (8002294 <read_settings_from_flash+0x3c8>)
 80020e6:	4b71      	ldr	r3, [pc, #452]	; (80022ac <read_settings_from_flash+0x3e0>)
 80020e8:	0018      	movs	r0, r3
 80020ea:	f00f fb0b 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 8, ',', ',', 100, '*');//////  twin_sb
 80020ee:	2396      	movs	r3, #150	; 0x96
 80020f0:	0059      	lsls	r1, r3, #1
 80020f2:	4864      	ldr	r0, [pc, #400]	; (8002284 <read_settings_from_flash+0x3b8>)
 80020f4:	232a      	movs	r3, #42	; 0x2a
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	232c      	movs	r3, #44	; 0x2c
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	232c      	movs	r3, #44	; 0x2c
 8002102:	2208      	movs	r2, #8
 8002104:	f7ff fbe2 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <read_settings_from_flash+0x3c0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <read_settings_from_flash+0x25a>
        {
            flush_array(twin_sb, 100);
 8002110:	4b67      	ldr	r3, [pc, #412]	; (80022b0 <read_settings_from_flash+0x3e4>)
 8002112:	2164      	movs	r1, #100	; 0x64
 8002114:	0018      	movs	r0, r3
 8002116:	f7fe fdb7 	bl	8000c88 <flush_array>
            sprintf((char*)twin_sb, "%s", temp_data);
 800211a:	4a5c      	ldr	r2, [pc, #368]	; (800228c <read_settings_from_flash+0x3c0>)
 800211c:	495d      	ldr	r1, [pc, #372]	; (8002294 <read_settings_from_flash+0x3c8>)
 800211e:	4b64      	ldr	r3, [pc, #400]	; (80022b0 <read_settings_from_flash+0x3e4>)
 8002120:	0018      	movs	r0, r3
 8002122:	f00f faef 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 9, ',', ',', 100, '*');//////  twin_pb
 8002126:	2396      	movs	r3, #150	; 0x96
 8002128:	0059      	lsls	r1, r3, #1
 800212a:	4856      	ldr	r0, [pc, #344]	; (8002284 <read_settings_from_flash+0x3b8>)
 800212c:	232a      	movs	r3, #42	; 0x2a
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	232c      	movs	r3, #44	; 0x2c
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	232c      	movs	r3, #44	; 0x2c
 800213a:	2209      	movs	r2, #9
 800213c:	f7ff fbc6 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002140:	4b52      	ldr	r3, [pc, #328]	; (800228c <read_settings_from_flash+0x3c0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <read_settings_from_flash+0x292>
        {
            flush_array(twin_pb, 100);
 8002148:	4b5a      	ldr	r3, [pc, #360]	; (80022b4 <read_settings_from_flash+0x3e8>)
 800214a:	2164      	movs	r1, #100	; 0x64
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe fd9b 	bl	8000c88 <flush_array>
            sprintf((char*)twin_pb, "%s", temp_data);
 8002152:	4a4e      	ldr	r2, [pc, #312]	; (800228c <read_settings_from_flash+0x3c0>)
 8002154:	494f      	ldr	r1, [pc, #316]	; (8002294 <read_settings_from_flash+0x3c8>)
 8002156:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <read_settings_from_flash+0x3e8>)
 8002158:	0018      	movs	r0, r3
 800215a:	f00f fad3 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 10, ',', ',', 100, '*');//////  twin_rp
 800215e:	2396      	movs	r3, #150	; 0x96
 8002160:	0059      	lsls	r1, r3, #1
 8002162:	4848      	ldr	r0, [pc, #288]	; (8002284 <read_settings_from_flash+0x3b8>)
 8002164:	232a      	movs	r3, #42	; 0x2a
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	2364      	movs	r3, #100	; 0x64
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	232c      	movs	r3, #44	; 0x2c
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	232c      	movs	r3, #44	; 0x2c
 8002172:	220a      	movs	r2, #10
 8002174:	f7ff fbaa 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <read_settings_from_flash+0x3c0>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <read_settings_from_flash+0x2ca>
        {
            flush_array(twin_rp, 100);
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <read_settings_from_flash+0x3ec>)
 8002182:	2164      	movs	r1, #100	; 0x64
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fd7f 	bl	8000c88 <flush_array>
            sprintf((char*)twin_rp, "%s", temp_data);
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <read_settings_from_flash+0x3c0>)
 800218c:	4941      	ldr	r1, [pc, #260]	; (8002294 <read_settings_from_flash+0x3c8>)
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <read_settings_from_flash+0x3ec>)
 8002190:	0018      	movs	r0, r3
 8002192:	f00f fab7 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 11, ',', ',', 100, '*');//////  read_pb
 8002196:	2396      	movs	r3, #150	; 0x96
 8002198:	0059      	lsls	r1, r3, #1
 800219a:	483a      	ldr	r0, [pc, #232]	; (8002284 <read_settings_from_flash+0x3b8>)
 800219c:	232a      	movs	r3, #42	; 0x2a
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	2364      	movs	r3, #100	; 0x64
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	232c      	movs	r3, #44	; 0x2c
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	232c      	movs	r3, #44	; 0x2c
 80021aa:	220b      	movs	r2, #11
 80021ac:	f7ff fb8e 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <read_settings_from_flash+0x3c0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <read_settings_from_flash+0x302>
        {
            flush_array(read_pb, 100);
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <read_settings_from_flash+0x3f0>)
 80021ba:	2164      	movs	r1, #100	; 0x64
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe fd63 	bl	8000c88 <flush_array>
            sprintf((char*)read_pb, "%s", temp_data);
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <read_settings_from_flash+0x3c0>)
 80021c4:	4933      	ldr	r1, [pc, #204]	; (8002294 <read_settings_from_flash+0x3c8>)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <read_settings_from_flash+0x3f0>)
 80021c8:	0018      	movs	r0, r3
 80021ca:	f00f fa9b 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 12, ',', ',', 5, '*');//////  protocol_version
 80021ce:	2396      	movs	r3, #150	; 0x96
 80021d0:	0059      	lsls	r1, r3, #1
 80021d2:	482c      	ldr	r0, [pc, #176]	; (8002284 <read_settings_from_flash+0x3b8>)
 80021d4:	232a      	movs	r3, #42	; 0x2a
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	2305      	movs	r3, #5
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	232c      	movs	r3, #44	; 0x2c
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	232c      	movs	r3, #44	; 0x2c
 80021e2:	220c      	movs	r2, #12
 80021e4:	f7ff fb72 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <read_settings_from_flash+0x3c0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <read_settings_from_flash+0x33a>
        {
            flush_array(protocol_version, 5);
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <read_settings_from_flash+0x3f4>)
 80021f2:	2105      	movs	r1, #5
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe fd47 	bl	8000c88 <flush_array>
            sprintf((char*)protocol_version, "%s", temp_data);
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <read_settings_from_flash+0x3c0>)
 80021fc:	4925      	ldr	r1, [pc, #148]	; (8002294 <read_settings_from_flash+0x3c8>)
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <read_settings_from_flash+0x3f4>)
 8002200:	0018      	movs	r0, r3
 8002202:	f00f fa7f 	bl	8011704 <siprintf>
        }

        explode_string(stored_settings, 300, 13, ',', ',', 11, '*');//////  device_id
 8002206:	2396      	movs	r3, #150	; 0x96
 8002208:	0059      	lsls	r1, r3, #1
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <read_settings_from_flash+0x3b8>)
 800220c:	232a      	movs	r3, #42	; 0x2a
 800220e:	9302      	str	r3, [sp, #8]
 8002210:	230b      	movs	r3, #11
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	232c      	movs	r3, #44	; 0x2c
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	232c      	movs	r3, #44	; 0x2c
 800221a:	220d      	movs	r2, #13
 800221c:	f7ff fb56 	bl	80018cc <explode_string>

        if(temp_data[0]!=0)
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <read_settings_from_flash+0x3c0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <read_settings_from_flash+0x372>
        {
            flush_array(device_id, 12);
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <read_settings_from_flash+0x3f8>)
 800222a:	210c      	movs	r1, #12
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fd2b 	bl	8000c88 <flush_array>
            sprintf((char*)device_id, "%s", temp_data);
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <read_settings_from_flash+0x3c0>)
 8002234:	4917      	ldr	r1, [pc, #92]	; (8002294 <read_settings_from_flash+0x3c8>)
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <read_settings_from_flash+0x3f8>)
 8002238:	0018      	movs	r0, r3
 800223a:	f00f fa63 	bl	8011704 <siprintf>
        }

        //// TTL


        debug_printf(DBGLVL_MAX, (uint8_t *)"\r\n+PARSED: APN:%s\r\nCV:%s\r\nSERVER:%s\r\nPORT:%s\r\nUSER:%s\r\nPASWD:%s\r\n",
 800223e:	4816      	ldr	r0, [pc, #88]	; (8002298 <read_settings_from_flash+0x3cc>)
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <read_settings_from_flash+0x3c4>)
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <read_settings_from_flash+0x3fc>)
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <read_settings_from_flash+0x3dc>)
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <read_settings_from_flash+0x3d8>)
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <read_settings_from_flash+0x3d4>)
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <read_settings_from_flash+0x3d0>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0003      	movs	r3, r0
 8002256:	2004      	movs	r0, #4
 8002258:	f000 fa7c 	bl	8002754 <debug_printf>
                apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password);

        debug_printf(DBGLVL_MAX, (uint8_t *)"CLIENT:%s\r\nTWIN_SB:%s\r\nTWIN_PB:%s\r\nTWIN_RP:%s\r\nREAD_PB:%s\r\nPV:%s\r\nDEVICE_ID:%s\r\n",
 800225c:	4814      	ldr	r0, [pc, #80]	; (80022b0 <read_settings_from_flash+0x3e4>)
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <read_settings_from_flash+0x3e0>)
 8002260:	491a      	ldr	r1, [pc, #104]	; (80022cc <read_settings_from_flash+0x400>)
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <read_settings_from_flash+0x3f8>)
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <read_settings_from_flash+0x3f4>)
 8002268:	9303      	str	r3, [sp, #12]
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <read_settings_from_flash+0x3f0>)
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <read_settings_from_flash+0x3ec>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <read_settings_from_flash+0x3e8>)
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	0003      	movs	r3, r0
 8002278:	2004      	movs	r0, #4
 800227a:	f000 fa6b 	bl	8002754 <debug_printf>
                mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id);

        return 1;
 800227e:	2301      	movs	r3, #1
 8002280:	e027      	b.n	80022d2 <read_settings_from_flash+0x406>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	2000023c 	.word	0x2000023c
 8002288:	08013154 	.word	0x08013154
 800228c:	200003d8 	.word	0x200003d8
 8002290:	20000210 	.word	0x20000210
 8002294:	08013068 	.word	0x08013068
 8002298:	20001a44 	.word	0x20001a44
 800229c:	20001f1c 	.word	0x20001f1c
 80022a0:	20001dc0 	.word	0x20001dc0
 80022a4:	20001dc8 	.word	0x20001dc8
 80022a8:	20001ee4 	.word	0x20001ee4
 80022ac:	2000199c 	.word	0x2000199c
 80022b0:	20001d30 	.word	0x20001d30
 80022b4:	20001a60 	.word	0x20001a60
 80022b8:	20001e80 	.word	0x20001e80
 80022bc:	20001288 	.word	0x20001288
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20001a34 	.word	0x20001a34
 80022c8:	08013164 	.word	0x08013164
 80022cc:	080131a8 	.word	0x080131a8
    }

    return 0;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bdb0      	pop	{r4, r5, r7, pc}
 80022da:	46c0      	nop			; (mov r8, r8)

080022dc <state_machine>:
 *
 * \return - none
 */

static void state_machine(SM_STRUC *stinfo)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    void(*actsubr1)(void);
    void(*actsubr2)(void);
    uint32_t(*evsubr)(void);
    void(*dbgsubr)(uint32_t);

    statearray = stinfo->sms_stable;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61fb      	str	r3, [r7, #28]
    curstateitem = statearray[stinfo->sms_curstate];
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	18d3      	adds	r3, r2, r3
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	623b      	str	r3, [r7, #32]

    evindex = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    evresult = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]

    while (1)
    {
        evsubr = curstateitem->stbl_event;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	617b      	str	r3, [r7, #20]
        evresult = evsubr();
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4798      	blx	r3
 800230a:	0003      	movs	r3, r0
 800230c:	61bb      	str	r3, [r7, #24]

        if (evresult != 0)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d024      	beq.n	800235e <state_machine+0x82>
        {
            actsubr1 = curstateitem->stbl_act1;
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
            actsubr2 = curstateitem->stbl_act2;
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
            dbgsubr = stinfo->sms_debug;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60bb      	str	r3, [r7, #8]

            stinfo->sms_curstate = curstateitem->stbl_newstate;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	605a      	str	r2, [r3, #4]
            dbgsubr(evindex);
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	0010      	movs	r0, r2
 8002334:	4798      	blx	r3
            evindex = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
            curstateitem = statearray[stinfo->sms_curstate];
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	18d3      	adds	r3, r2, r3
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	623b      	str	r3, [r7, #32]

            if (actsubr1 == NULL)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00e      	beq.n	800236c <state_machine+0x90>
            {
                break;
            }

            actsubr1();
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4798      	blx	r3

            if (actsubr2 == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <state_machine+0x94>
            {
                break;
            }

            actsubr2();
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4798      	blx	r3
 800235c:	e7d0      	b.n	8002300 <state_machine+0x24>
        }

        else
        {
            evindex++;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3301      	adds	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
            curstateitem++;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	3310      	adds	r3, #16
 8002368:	623b      	str	r3, [r7, #32]
        evsubr = curstateitem->stbl_event;
 800236a:	e7c9      	b.n	8002300 <state_machine+0x24>
                break;
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	e000      	b.n	8002372 <state_machine+0x96>
                break;
 8002370:	46c0      	nop			; (mov r8, r8)
        }

    }

    return;
 8002372:	46c0      	nop			; (mov r8, r8)
}
 8002374:	46bd      	mov	sp, r7
 8002376:	b00a      	add	sp, #40	; 0x28
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <store_clock_to_flash>:
 *
 * \return -
 */

static void store_clock_to_flash(void)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
	unsigned char server_clock_format[18]={0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	3304      	adds	r3, #4
 800238a:	220e      	movs	r2, #14
 800238c:	2100      	movs	r1, #0
 800238e:	0018      	movs	r0, r3
 8002390:	f00e ff22 	bl	80111d8 <memset>
	uint8_t i;

	if(server_clock>1000000000)
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <store_clock_to_flash+0xc4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <store_clock_to_flash+0xc8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d94b      	bls.n	8002436 <store_clock_to_flash+0xba>
	{
		sprintf((char*)server_clock_format, "#clock%u*\0", server_clock);
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <store_clock_to_flash+0xc4>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4929      	ldr	r1, [pc, #164]	; (8002448 <store_clock_to_flash+0xcc>)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	0018      	movs	r0, r3
 80023a8:	f00f f9ac 	bl	8011704 <siprintf>
//		send_text_to_uart2(server_clock_format);// Debug TTL

		for(i = 0; i < 17; i++)
 80023ac:	2317      	movs	r3, #23
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e012      	b.n	80023dc <store_clock_to_flash+0x60>
		{
			sFLASH_WriteByte(mem_write_address++, server_clock_format[i]);
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <store_clock_to_flash+0xd0>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	1c51      	adds	r1, r2, #1
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <store_clock_to_flash+0xd0>)
 80023be:	6019      	str	r1, [r3, #0]
 80023c0:	2417      	movs	r4, #23
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	1d39      	adds	r1, r7, #4
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	0019      	movs	r1, r3
 80023cc:	0010      	movs	r0, r2
 80023ce:	f006 fe4b 	bl	8009068 <sFLASH_WriteByte>
		for(i = 0; i < 17; i++)
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	193b      	adds	r3, r7, r4
 80023d8:	3201      	adds	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	2317      	movs	r3, #23
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d9e7      	bls.n	80023b6 <store_clock_to_flash+0x3a>
		}

		flush_array((char*)server_clock_format, 18);
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2112      	movs	r1, #18
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7fe fc4c 	bl	8000c88 <flush_array>
		sprintf((char*)server_clock_format, "#msrl%s*\0", meter_serial_no);
 80023f0:	4a17      	ldr	r2, [pc, #92]	; (8002450 <store_clock_to_flash+0xd4>)
 80023f2:	4918      	ldr	r1, [pc, #96]	; (8002454 <store_clock_to_flash+0xd8>)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	0018      	movs	r0, r3
 80023f8:	f00f f984 	bl	8011704 <siprintf>
//		send_text_to_uart2(server_clock_format);// Debug TTL

		for(uint8_t i=0; i<17; i++)
 80023fc:	2316      	movs	r3, #22
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e012      	b.n	800242c <store_clock_to_flash+0xb0>
		{
			sFLASH_WriteByte(mem_write_address++, server_clock_format[i]);
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <store_clock_to_flash+0xd0>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	1c51      	adds	r1, r2, #1
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <store_clock_to_flash+0xd0>)
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	2416      	movs	r4, #22
 8002412:	193b      	adds	r3, r7, r4
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	1d39      	adds	r1, r7, #4
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f006 fe23 	bl	8009068 <sFLASH_WriteByte>
		for(uint8_t i=0; i<17; i++)
 8002422:	193b      	adds	r3, r7, r4
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	193b      	adds	r3, r7, r4
 8002428:	3201      	adds	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	2316      	movs	r3, #22
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b10      	cmp	r3, #16
 8002434:	d9e7      	bls.n	8002406 <store_clock_to_flash+0x8a>
		}

	}
}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	46bd      	mov	sp, r7
 800243a:	b007      	add	sp, #28
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20001f94 	.word	0x20001f94
 8002444:	3b9aca00 	.word	0x3b9aca00
 8002448:	080131fc 	.word	0x080131fc
 800244c:	20000008 	.word	0x20000008
 8002450:	20001e68 	.word	0x20001e68
 8002454:	08013208 	.word	0x08013208

08002458 <store_runtime_parameters_to_flash>:
 * \return -
 */


static void store_runtime_parameters_to_flash(uint32_t sect_address)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af02      	add	r7, sp, #8
 800245e:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60fb      	str	r3, [r7, #12]

    flush_array(stored_parameters, 100);
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <store_runtime_parameters_to_flash+0x9c>)
 8002466:	2164      	movs	r1, #100	; 0x64
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe fc0d 	bl	8000c88 <flush_array>

    sprintf((char*)stored_parameters,
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <store_runtime_parameters_to_flash+0xa0>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	001d      	movs	r5, r3
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <store_runtime_parameters_to_flash+0xa4>)
 8002476:	681c      	ldr	r4, [r3, #0]
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <store_runtime_parameters_to_flash+0xa8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <store_runtime_parameters_to_flash+0xac>)
 800247e:	8812      	ldrh	r2, [r2, #0]
 8002480:	4921      	ldr	r1, [pc, #132]	; (8002508 <store_runtime_parameters_to_flash+0xb0>)
 8002482:	481c      	ldr	r0, [pc, #112]	; (80024f4 <store_runtime_parameters_to_flash+0x9c>)
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	0023      	movs	r3, r4
 800248a:	002a      	movs	r2, r5
 800248c:	f00f f93a 	bl	8011704 <siprintf>
            (unsigned int)mem_write_address,
            (unsigned int)mem_read_address,
            (unsigned int)total_downloaded_records_meter);

    ///// ERASE SECTOR IN FLASH
    sFLASH_EraseSector(sect_address);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f006 fdaa 	bl	8008fec <sFLASH_EraseSector>

    for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 8002498:	230a      	movs	r3, #10
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	801a      	strh	r2, [r3, #0]
 80024a0:	e017      	b.n	80024d2 <store_runtime_parameters_to_flash+0x7a>
    {

        if(stored_settings[i] == 0)
 80024a2:	210a      	movs	r1, #10
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <store_runtime_parameters_to_flash+0xb4>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <store_runtime_parameters_to_flash+0x90>
        {
            break;
        }

        sFLASH_WriteByte(loc++, stored_parameters[i]);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	60fa      	str	r2, [r7, #12]
 80024b6:	000c      	movs	r4, r1
 80024b8:	187a      	adds	r2, r7, r1
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	490d      	ldr	r1, [pc, #52]	; (80024f4 <store_runtime_parameters_to_flash+0x9c>)
 80024be:	5c8a      	ldrb	r2, [r1, r2]
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f006 fdd0 	bl	8009068 <sFLASH_WriteByte>
    for(uint16_t i=0; i<strlen((char*)stored_parameters); i++)
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	3201      	adds	r2, #1
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	230a      	movs	r3, #10
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	881c      	ldrh	r4, [r3, #0]
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <store_runtime_parameters_to_flash+0x9c>)
 80024da:	0018      	movs	r0, r3
 80024dc:	f7fd fe14 	bl	8000108 <strlen>
 80024e0:	0003      	movs	r3, r0
 80024e2:	429c      	cmp	r4, r3
 80024e4:	d3dd      	bcc.n	80024a2 <store_runtime_parameters_to_flash+0x4a>
    }

    return;
 80024e6:	e000      	b.n	80024ea <store_runtime_parameters_to_flash+0x92>
            break;
 80024e8:	46c0      	nop			; (mov r8, r8)
    return;
 80024ea:	46c0      	nop			; (mov r8, r8)
}
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b004      	add	sp, #16
 80024f0:	bdb0      	pop	{r4, r5, r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	20000368 	.word	0x20000368
 80024f8:	20000504 	.word	0x20000504
 80024fc:	20000008 	.word	0x20000008
 8002500:	2000000c 	.word	0x2000000c
 8002504:	20000506 	.word	0x20000506
 8002508:	08013214 	.word	0x08013214
 800250c:	2000023c 	.word	0x2000023c

08002510 <store_settings_to_flash>:
 *
 * \return -
 */

static void store_settings_to_flash(uint32_t sect_address)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b091      	sub	sp, #68	; 0x44
 8002514:	af0c      	add	r7, sp, #48	; 0x30
 8002516:	6078      	str	r0, [r7, #4]
    uint32_t loc = sect_address;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60fb      	str	r3, [r7, #12]

    flush_array(stored_settings, 300);
 800251c:	2396      	movs	r3, #150	; 0x96
 800251e:	005a      	lsls	r2, r3, #1
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <store_settings_to_flash+0xc8>)
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe fbaf 	bl	8000c88 <flush_array>

    sprintf((char*)stored_settings, "#SET,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s*",
 800252a:	4c2c      	ldr	r4, [pc, #176]	; (80025dc <store_settings_to_flash+0xcc>)
 800252c:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <store_settings_to_flash+0xd0>)
 800252e:	492d      	ldr	r1, [pc, #180]	; (80025e4 <store_settings_to_flash+0xd4>)
 8002530:	4829      	ldr	r0, [pc, #164]	; (80025d8 <store_settings_to_flash+0xc8>)
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <store_settings_to_flash+0xd8>)
 8002534:	930b      	str	r3, [sp, #44]	; 0x2c
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <store_settings_to_flash+0xdc>)
 8002538:	930a      	str	r3, [sp, #40]	; 0x28
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <store_settings_to_flash+0xe0>)
 800253c:	9309      	str	r3, [sp, #36]	; 0x24
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <store_settings_to_flash+0xe4>)
 8002540:	9308      	str	r3, [sp, #32]
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <store_settings_to_flash+0xe8>)
 8002544:	9307      	str	r3, [sp, #28]
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <store_settings_to_flash+0xec>)
 8002548:	9306      	str	r3, [sp, #24]
 800254a:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <store_settings_to_flash+0xf0>)
 800254c:	9305      	str	r3, [sp, #20]
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <store_settings_to_flash+0xf4>)
 8002550:	9304      	str	r3, [sp, #16]
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <store_settings_to_flash+0xf8>)
 8002554:	9303      	str	r3, [sp, #12]
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <store_settings_to_flash+0xfc>)
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <store_settings_to_flash+0x100>)
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <store_settings_to_flash+0x104>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	0023      	movs	r3, r4
 8002564:	f00f f8ce 	bl	8011704 <siprintf>
            apn,configuration_version,mqtt_server,mqtt_port,mqtt_username,mqtt_password,
            mqtt_client_id,twin_sb,twin_pb,twin_rp,read_pb,protocol_version,device_id, ble_paired_device);

    ///// ERASE SECTOR IN FLASH
    sFLASH_EraseSector(sect_address);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f006 fd3e 	bl	8008fec <sFLASH_EraseSector>

    for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 8002570:	230a      	movs	r3, #10
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2200      	movs	r2, #0
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e017      	b.n	80025aa <store_settings_to_flash+0x9a>
    {

        if(stored_settings[i] == 0)
 800257a:	210a      	movs	r1, #10
 800257c:	187b      	adds	r3, r7, r1
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4a15      	ldr	r2, [pc, #84]	; (80025d8 <store_settings_to_flash+0xc8>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <store_settings_to_flash+0xb0>
        {
            break;
        }

        sFLASH_WriteByte(loc++, stored_settings[i]);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	60fa      	str	r2, [r7, #12]
 800258e:	000c      	movs	r4, r1
 8002590:	187a      	adds	r2, r7, r1
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	4910      	ldr	r1, [pc, #64]	; (80025d8 <store_settings_to_flash+0xc8>)
 8002596:	5c8a      	ldrb	r2, [r1, r2]
 8002598:	0011      	movs	r1, r2
 800259a:	0018      	movs	r0, r3
 800259c:	f006 fd64 	bl	8009068 <sFLASH_WriteByte>
    for(uint16_t i=0; i<strlen((char*)stored_settings); i++)
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	3201      	adds	r2, #1
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	230a      	movs	r3, #10
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	881c      	ldrh	r4, [r3, #0]
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <store_settings_to_flash+0xc8>)
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fd fda8 	bl	8000108 <strlen>
 80025b8:	0003      	movs	r3, r0
 80025ba:	429c      	cmp	r4, r3
 80025bc:	d3dd      	bcc.n	800257a <store_settings_to_flash+0x6a>
 80025be:	e000      	b.n	80025c2 <store_settings_to_flash+0xb2>
            break;
 80025c0:	46c0      	nop			; (mov r8, r8)
    }

    debug_printf(DBGLVL_MAX, "n+STORED: %s\r\n", stored_settings);
 80025c2:	4a05      	ldr	r2, [pc, #20]	; (80025d8 <store_settings_to_flash+0xc8>)
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <store_settings_to_flash+0x108>)
 80025c6:	0019      	movs	r1, r3
 80025c8:	2004      	movs	r0, #4
 80025ca:	f000 f8c3 	bl	8002754 <debug_printf>
    return;
 80025ce:	46c0      	nop			; (mov r8, r8)
}
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b005      	add	sp, #20
 80025d4:	bd90      	pop	{r4, r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	2000023c 	.word	0x2000023c
 80025dc:	20001a44 	.word	0x20001a44
 80025e0:	20000210 	.word	0x20000210
 80025e4:	08013228 	.word	0x08013228
 80025e8:	20001e2c 	.word	0x20001e2c
 80025ec:	20001a34 	.word	0x20001a34
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20001288 	.word	0x20001288
 80025f8:	20001e80 	.word	0x20001e80
 80025fc:	20001a60 	.word	0x20001a60
 8002600:	20001d30 	.word	0x20001d30
 8002604:	2000199c 	.word	0x2000199c
 8002608:	20001ee4 	.word	0x20001ee4
 800260c:	20001dc8 	.word	0x20001dc8
 8002610:	20001dc0 	.word	0x20001dc0
 8002614:	20001f1c 	.word	0x20001f1c
 8002618:	08013258 	.word	0x08013258

0800261c <cons_init>:
 * \return - none
 */


void cons_init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
    state = STATE_INIT;
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <cons_init+0x1c>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
    consbufget = 0;
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <cons_init+0x20>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    consbufput = 0;
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <cons_init+0x24>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

    return;
 8002632:	46c0      	nop			; (mov r8, r8)
}
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000514 	.word	0x20000514
 800263c:	20000508 	.word	0x20000508
 8002640:	2000050c 	.word	0x2000050c

08002644 <cons_task>:
 *
 * \return - none
 */

void cons_task(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
    uint8_t run;
    uint8_t c;

    run = 1;
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

    while (run)
 8002650:	e065      	b.n	800271e <cons_task+0xda>
    {
        run = 0;
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]

        switch (state)
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <cons_task+0xec>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d85c      	bhi.n	800271a <cons_task+0xd6>
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <cons_task+0xf0>)
 8002664:	18d3      	adds	r3, r2, r3
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	469f      	mov	pc, r3
        {

            case STATE_INIT:
            {

                if (debug_print_ready)
 800266a:	4b33      	ldr	r3, [pc, #204]	; (8002738 <cons_task+0xf4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d055      	beq.n	800271e <cons_task+0xda>
                {
                    state = STATE_IDLE;
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <cons_task+0xec>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
                }

                break;
 8002678:	e051      	b.n	800271e <cons_task+0xda>
            }

            case STATE_IDLE:
            {

                if (consbufget != consbufput)
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <cons_task+0xf8>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <cons_task+0xfc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d04b      	beq.n	800271e <cons_task+0xda>
                {
                    state = STATE_INPUT;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <cons_task+0xec>)
 8002688:	2205      	movs	r2, #5
 800268a:	701a      	strb	r2, [r3, #0]
                    run = 1;
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
                }

                break;
 8002692:	e044      	b.n	800271e <cons_task+0xda>
            }

            case STATE_PROMPT:
            {
                usb_write_fixed((uint8_t *)prompt, sizeof(prompt));
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <cons_task+0x100>)
 8002696:	2103      	movs	r1, #3
 8002698:	0018      	movs	r0, r3
 800269a:	f006 fbf5 	bl	8008e88 <usb_write_fixed>

                state = STATE_PROMPTWT;
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <cons_task+0xec>)
 80026a0:	2204      	movs	r2, #4
 80026a2:	701a      	strb	r2, [r3, #0]
                break;
 80026a4:	e03b      	b.n	800271e <cons_task+0xda>
            {
//                usbstat = usb_compl();

//                if (usbstat == 0)
                {
                    state = STATE_IDLE;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <cons_task+0xec>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
                }

                run = 0;
 80026ac:	1dfb      	adds	r3, r7, #7
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
                break;
 80026b2:	e034      	b.n	800271e <cons_task+0xda>
            }

            case STATE_INPUT:
            {
                c = consbuf[consbufget];
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <cons_task+0xf8>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	4923      	ldr	r1, [pc, #140]	; (8002748 <cons_task+0x104>)
 80026bc:	5c8a      	ldrb	r2, [r1, r2]
 80026be:	701a      	strb	r2, [r3, #0]
                consbufget++;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <cons_task+0xf8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <cons_task+0xf8>)
 80026c8:	601a      	str	r2, [r3, #0]
                consbufget &= CONSBUF_SIZE - 1;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <cons_task+0xf8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	227f      	movs	r2, #127	; 0x7f
 80026d0:	401a      	ands	r2, r3
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <cons_task+0xf8>)
 80026d4:	601a      	str	r2, [r3, #0]
                run = 1;
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]

                if (c == 0x0D)
 80026dc:	1dbb      	adds	r3, r7, #6
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b0d      	cmp	r3, #13
 80026e2:	d103      	bne.n	80026ec <cons_task+0xa8>
                {
                    state = STATE_PROMPT;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <cons_task+0xec>)
 80026e6:	2203      	movs	r2, #3
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e018      	b.n	800271e <cons_task+0xda>
                }

                else if ((c > 0x20) && (c < 0x7F))
 80026ec:	1dbb      	adds	r3, r7, #6
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d90e      	bls.n	8002712 <cons_task+0xce>
 80026f4:	1dbb      	adds	r3, r7, #6
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b7e      	cmp	r3, #126	; 0x7e
 80026fa:	d80a      	bhi.n	8002712 <cons_task+0xce>
                {
                    keybuf[0] = c;
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <cons_task+0x108>)
 80026fe:	1dba      	adds	r2, r7, #6
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
                    keybufdex = 1;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <cons_task+0x10c>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
                    state = STATE_NEXTKEY;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <cons_task+0xec>)
 800270c:	2206      	movs	r2, #6
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e002      	b.n	8002718 <cons_task+0xd4>
                }

                else
                {
                    state = STATE_IDLE;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <cons_task+0xec>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
                }

                break;
 8002718:	e001      	b.n	800271e <cons_task+0xda>
            }

            default:
            {
                crash();
 800271a:	f7fe fa91 	bl	8000c40 <crash>
    while (run)
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d195      	bne.n	8002652 <cons_task+0xe>

        }

    }

    return;
 8002726:	46c0      	nop			; (mov r8, r8)
}
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	20000514 	.word	0x20000514
 8002734:	08013cfc 	.word	0x08013cfc
 8002738:	20001fa0 	.word	0x20001fa0
 800273c:	20000508 	.word	0x20000508
 8002740:	2000050c 	.word	0x2000050c
 8002744:	08013cf8 	.word	0x08013cf8
 8002748:	20000518 	.word	0x20000518
 800274c:	20000598 	.word	0x20000598
 8002750:	20000510 	.word	0x20000510

08002754 <debug_printf>:
 *
 * \return - none
 */

void debug_printf(uint32_t level, uint8_t *fspec, ... )
{
 8002754:	b40e      	push	{r1, r2, r3}
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b08a      	sub	sp, #40	; 0x28
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
    uint32_t i;

    uint8_t *u8ptrspec;
    va_list args;

    va_start(args, fspec);
 800275e:	2338      	movs	r3, #56	; 0x38
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	60bb      	str	r3, [r7, #8]
    prbufdex = 0;
 8002764:	4bc9      	ldr	r3, [pc, #804]	; (8002a8c <debug_printf+0x338>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
    fspecdex = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
    state = PRS_INIT;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    curchar = 0xFF;
 8002772:	2327      	movs	r3, #39	; 0x27
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	22ff      	movs	r2, #255	; 0xff
 8002778:	701a      	strb	r2, [r3, #0]

    if (debuglevel & level)
 800277a:	4bc5      	ldr	r3, [pc, #788]	; (8002a90 <debug_printf+0x33c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4013      	ands	r3, r2
 8002782:	d004      	beq.n	800278e <debug_printf+0x3a>
    {
        run = 1;
 8002784:	2326      	movs	r3, #38	; 0x26
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e213      	b.n	8002bb6 <debug_printf+0x462>
    }

    else
    {
        run = 0;
 800278e:	2326      	movs	r3, #38	; 0x26
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    }

    while (run)
 8002796:	e20e      	b.n	8002bb6 <debug_printf+0x462>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b0b      	cmp	r3, #11
 800279c:	d900      	bls.n	80027a0 <debug_printf+0x4c>
 800279e:	e208      	b.n	8002bb2 <debug_printf+0x45e>
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	4bbb      	ldr	r3, [pc, #748]	; (8002a94 <debug_printf+0x340>)
 80027a6:	18d3      	adds	r3, r2, r3
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	469f      	mov	pc, r3
        switch (state)
        {

            case PRS_INIT:
            {
                curchar = fspec[fspecdex];
 80027ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	18d2      	adds	r2, r2, r3
 80027b2:	2127      	movs	r1, #39	; 0x27
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	7812      	ldrb	r2, [r2, #0]
 80027b8:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	3301      	adds	r3, #1
 80027be:	623b      	str	r3, [r7, #32]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <debug_printf+0x86>
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b7e      	cmp	r3, #126	; 0x7e
 80027ce:	d804      	bhi.n	80027da <debug_printf+0x86>
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d902      	bls.n	80027e0 <debug_printf+0x8c>
                {
                	state = PRS_DONE;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e00d      	b.n	80027fc <debug_printf+0xa8>
                }

                else if (curchar == '%')
 80027e0:	2327      	movs	r3, #39	; 0x27
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b25      	cmp	r3, #37	; 0x25
 80027e8:	d102      	bne.n	80027f0 <debug_printf+0x9c>
                {
                    state = PRS_PERCENT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	e1e2      	b.n	8002bb6 <debug_printf+0x462>
                }

                else
                {
                    store_curchar(curchar);
 80027f0:	2327      	movs	r3, #39	; 0x27
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fb5c 	bl	8002eb4 <store_curchar>
                }

                break;
 80027fc:	e1db      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_DONE:
            {

                if (prbufdex > 0)
 80027fe:	4ba3      	ldr	r3, [pc, #652]	; (8002a8c <debug_printf+0x338>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <debug_printf+0xc0>
                {
                    usb_write_fixed(prbuf, prbufdex);
 8002806:	4ba1      	ldr	r3, [pc, #644]	; (8002a8c <debug_printf+0x338>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4ba3      	ldr	r3, [pc, #652]	; (8002a98 <debug_printf+0x344>)
 800280c:	0011      	movs	r1, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f006 fb3a 	bl	8008e88 <usb_write_fixed>
                }

                run = 0;
 8002814:	2326      	movs	r3, #38	; 0x26
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
                break;
 800281c:	e1cb      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_PERCENT:
            {
                curchar = fspec[fspecdex];
 800281e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	18d2      	adds	r2, r2, r3
 8002824:	2127      	movs	r1, #39	; 0x27
 8002826:	187b      	adds	r3, r7, r1
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	3301      	adds	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
                zflag = 0x00;
 8002832:	4b9a      	ldr	r3, [pc, #616]	; (8002a9c <debug_printf+0x348>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
                width = 0;
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <debug_printf+0x34c>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
                pfield = 255;
 800283e:	4b99      	ldr	r3, [pc, #612]	; (8002aa4 <debug_printf+0x350>)
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	701a      	strb	r2, [r3, #0]
                negflag = 0;
 8002844:	4b98      	ldr	r3, [pc, #608]	; (8002aa8 <debug_printf+0x354>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 800284a:	187b      	adds	r3, r7, r1
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <debug_printf+0x110>
 8002852:	187b      	adds	r3, r7, r1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b7e      	cmp	r3, #126	; 0x7e
 8002858:	d804      	bhi.n	8002864 <debug_printf+0x110>
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	429a      	cmp	r2, r3
 8002862:	d902      	bls.n	800286a <debug_printf+0x116>
                {
                	state = PRS_DONE;
 8002864:	2301      	movs	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e043      	b.n	80028f2 <debug_printf+0x19e>
                }

                else if (curchar == '%')
 800286a:	2327      	movs	r3, #39	; 0x27
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b25      	cmp	r3, #37	; 0x25
 8002872:	d105      	bne.n	8002880 <debug_printf+0x12c>
                {
                    store_curchar('%');
 8002874:	2025      	movs	r0, #37	; 0x25
 8002876:	f000 fb1d 	bl	8002eb4 <store_curchar>
                    state = PRS_INIT;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e19a      	b.n	8002bb6 <debug_printf+0x462>
                }

                else if ((curchar == '0') || (curchar == '+') || (curchar == '-') || (curchar == 0x20) || (curchar == '#'))
 8002880:	2227      	movs	r2, #39	; 0x27
 8002882:	18bb      	adds	r3, r7, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b30      	cmp	r3, #48	; 0x30
 8002888:	d00f      	beq.n	80028aa <debug_printf+0x156>
 800288a:	18bb      	adds	r3, r7, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b2b      	cmp	r3, #43	; 0x2b
 8002890:	d00b      	beq.n	80028aa <debug_printf+0x156>
 8002892:	18bb      	adds	r3, r7, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b2d      	cmp	r3, #45	; 0x2d
 8002898:	d007      	beq.n	80028aa <debug_printf+0x156>
 800289a:	18bb      	adds	r3, r7, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d003      	beq.n	80028aa <debug_printf+0x156>
 80028a2:	18bb      	adds	r3, r7, r2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b23      	cmp	r3, #35	; 0x23
 80028a8:	d107      	bne.n	80028ba <debug_printf+0x166>
                {
                    zflag = curchar;
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <debug_printf+0x348>)
 80028ac:	2227      	movs	r2, #39	; 0x27
 80028ae:	18ba      	adds	r2, r7, r2
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
                    state = PRS_WIDTH;
 80028b4:	2304      	movs	r3, #4
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e01b      	b.n	80028f2 <debug_printf+0x19e>
                }

                else if ((curchar >= '1') && (curchar <= '9'))
 80028ba:	2227      	movs	r2, #39	; 0x27
 80028bc:	18bb      	adds	r3, r7, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b30      	cmp	r3, #48	; 0x30
 80028c2:	d90c      	bls.n	80028de <debug_printf+0x18a>
 80028c4:	18bb      	adds	r3, r7, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b39      	cmp	r3, #57	; 0x39
 80028ca:	d808      	bhi.n	80028de <debug_printf+0x18a>
                {
                    width = curchar - 0x30;
 80028cc:	18bb      	adds	r3, r7, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3b30      	subs	r3, #48	; 0x30
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <debug_printf+0x34c>)
 80028d6:	701a      	strb	r2, [r3, #0]
                    state = PRS_WIDTH;
 80028d8:	2304      	movs	r3, #4
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	e009      	b.n	80028f2 <debug_printf+0x19e>
                }

                else if (curchar == '.')
 80028de:	2327      	movs	r3, #39	; 0x27
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b2e      	cmp	r3, #46	; 0x2e
 80028e6:	d102      	bne.n	80028ee <debug_printf+0x19a>
                {
                	state = PRS_PFIELD;
 80028e8:	2305      	movs	r3, #5
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	e163      	b.n	8002bb6 <debug_printf+0x462>
                }

                else
                {
                    state = PRS_TYPE;
 80028ee:	230b      	movs	r3, #11
 80028f0:	61fb      	str	r3, [r7, #28]
                }

                break;
 80028f2:	e160      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_WIDTH:
            {
                curchar = fspec[fspecdex];
 80028f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	18d2      	adds	r2, r2, r3
 80028fa:	2127      	movs	r1, #39	; 0x27
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	3301      	adds	r3, #1
 8002906:	623b      	str	r3, [r7, #32]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002908:	187b      	adds	r3, r7, r1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <debug_printf+0x1ce>
 8002910:	187b      	adds	r3, r7, r1
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b7e      	cmp	r3, #126	; 0x7e
 8002916:	d804      	bhi.n	8002922 <debug_printf+0x1ce>
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	429a      	cmp	r2, r3
 8002920:	d902      	bls.n	8002928 <debug_printf+0x1d4>
                {
                	state = PRS_DONE;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e029      	b.n	800297c <debug_printf+0x228>
                }

  				else if ((curchar >= '0') && (curchar <= '9'))
 8002928:	2127      	movs	r1, #39	; 0x27
 800292a:	187b      	adds	r3, r7, r1
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b2f      	cmp	r3, #47	; 0x2f
 8002930:	d917      	bls.n	8002962 <debug_printf+0x20e>
 8002932:	187b      	adds	r3, r7, r1
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b39      	cmp	r3, #57	; 0x39
 8002938:	d813      	bhi.n	8002962 <debug_printf+0x20e>
  				{
  				    width *= 10;
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <debug_printf+0x34c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	1c1a      	adds	r2, r3, #0
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	18d3      	adds	r3, r2, r3
 8002944:	18db      	adds	r3, r3, r3
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <debug_printf+0x34c>)
 800294a:	701a      	strb	r2, [r3, #0]
  				    width = width + (curchar - 0x30);
 800294c:	4b54      	ldr	r3, [pc, #336]	; (8002aa0 <debug_printf+0x34c>)
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	187b      	adds	r3, r7, r1
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	3b30      	subs	r3, #48	; 0x30
 800295a:	b2da      	uxtb	r2, r3
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <debug_printf+0x34c>)
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e00c      	b.n	800297c <debug_printf+0x228>
  				}

  				else if (curchar == '.')
 8002962:	2327      	movs	r3, #39	; 0x27
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b2e      	cmp	r3, #46	; 0x2e
 800296a:	d105      	bne.n	8002978 <debug_printf+0x224>
  				{
  				    pfield = 0;
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <debug_printf+0x350>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
  				    state = PRS_PFIELD;
 8002972:	2305      	movs	r3, #5
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e11e      	b.n	8002bb6 <debug_printf+0x462>
  				}

  				else
  				{
  				    state = PRS_TYPE;
 8002978:	230b      	movs	r3, #11
 800297a:	61fb      	str	r3, [r7, #28]
  				}

  				break;
 800297c:	e11b      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_PFIELD:
            {
                curchar = fspec[fspecdex];
 800297e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	18d2      	adds	r2, r2, r3
 8002984:	2127      	movs	r1, #39	; 0x27
 8002986:	187b      	adds	r3, r7, r1
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	701a      	strb	r2, [r3, #0]
                fspecdex++;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	3301      	adds	r3, #1
 8002990:	623b      	str	r3, [r7, #32]

                if ((curchar == 0x00) || (curchar > 0x7E) || (fspecdex > MAX_FSPEC_LEN))
 8002992:	187b      	adds	r3, r7, r1
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <debug_printf+0x258>
 800299a:	187b      	adds	r3, r7, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b7e      	cmp	r3, #126	; 0x7e
 80029a0:	d804      	bhi.n	80029ac <debug_printf+0x258>
 80029a2:	6a3a      	ldr	r2, [r7, #32]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d902      	bls.n	80029b2 <debug_printf+0x25e>
                {
                	state = PRS_DONE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e02b      	b.n	8002a0a <debug_printf+0x2b6>
                }

                else if ((curchar >= '0') && (curchar <= '9'))
 80029b2:	2127      	movs	r1, #39	; 0x27
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b2f      	cmp	r3, #47	; 0x2f
 80029ba:	d91e      	bls.n	80029fa <debug_printf+0x2a6>
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b39      	cmp	r3, #57	; 0x39
 80029c2:	d81a      	bhi.n	80029fa <debug_printf+0x2a6>
                {
  				    pfield *= 10;
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <debug_printf+0x350>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	1c1a      	adds	r2, r3, #0
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	18d3      	adds	r3, r2, r3
 80029ce:	18db      	adds	r3, r3, r3
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <debug_printf+0x350>)
 80029d4:	701a      	strb	r2, [r3, #0]
  				    pfield = pfield + (curchar - 0x30);
 80029d6:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <debug_printf+0x350>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	18d3      	adds	r3, r2, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	3b30      	subs	r3, #48	; 0x30
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <debug_printf+0x350>)
 80029e8:	701a      	strb	r2, [r3, #0]
  				    pfield &= 0x7F;
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <debug_printf+0x350>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	227f      	movs	r2, #127	; 0x7f
 80029f0:	4013      	ands	r3, r2
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <debug_printf+0x350>)
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e007      	b.n	8002a0a <debug_printf+0x2b6>
                }

                else
                {
                    store_curchar(curchar);
 80029fa:	2327      	movs	r3, #39	; 0x27
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fa57 	bl	8002eb4 <store_curchar>
                    state = PRS_DONE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
                }

                break;
 8002a0a:	e0d4      	b.n	8002bb6 <debug_printf+0x462>


            case PRS_TYPE:
            {

  				if (curchar == 'c')
 8002a0c:	2327      	movs	r3, #39	; 0x27
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b63      	cmp	r3, #99	; 0x63
 8002a14:	d102      	bne.n	8002a1c <debug_printf+0x2c8>
  				{
                    state = PRS_CSPEC;
 8002a16:	2306      	movs	r3, #6
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e0cc      	b.n	8002bb6 <debug_printf+0x462>
                }

				else if (curchar == 'd')
 8002a1c:	2327      	movs	r3, #39	; 0x27
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d102      	bne.n	8002a2c <debug_printf+0x2d8>
				{
				    state = PRS_DSPEC;
 8002a26:	2307      	movs	r3, #7
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e0c4      	b.n	8002bb6 <debug_printf+0x462>
				}

				else if (curchar == 'u')
 8002a2c:	2327      	movs	r3, #39	; 0x27
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b75      	cmp	r3, #117	; 0x75
 8002a34:	d102      	bne.n	8002a3c <debug_printf+0x2e8>
				{
				    state = PRS_USPEC;
 8002a36:	2309      	movs	r3, #9
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e0bc      	b.n	8002bb6 <debug_printf+0x462>
				}

				else if (curchar == 's')
 8002a3c:	2327      	movs	r3, #39	; 0x27
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b73      	cmp	r3, #115	; 0x73
 8002a44:	d102      	bne.n	8002a4c <debug_printf+0x2f8>
				{
				    state = PRS_SSPEC;
 8002a46:	2308      	movs	r3, #8
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e0b4      	b.n	8002bb6 <debug_printf+0x462>
				}

				else if (curchar == 'X')
 8002a4c:	2327      	movs	r3, #39	; 0x27
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b58      	cmp	r3, #88	; 0x58
 8002a54:	d102      	bne.n	8002a5c <debug_printf+0x308>
				{
				    state = PRS_XSPEC;
 8002a56:	230a      	movs	r3, #10
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e0ac      	b.n	8002bb6 <debug_printf+0x462>
				}

				else
				{
				    store_curchar(curchar);
 8002a5c:	2327      	movs	r3, #39	; 0x27
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 fa26 	bl	8002eb4 <store_curchar>
				    state = PRS_INIT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
				}

				break;
 8002a6c:	e0a3      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_CSPEC:
            {
                u8spec = (uint8_t)(va_arg(args, uint32_t));
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1d1a      	adds	r2, r3, #4
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	210e      	movs	r1, #14
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	701a      	strb	r2, [r3, #0]
                store_curchar(u8spec);
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fa17 	bl	8002eb4 <store_curchar>
                state = PRS_INIT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
                break;
 8002a8a:	e094      	b.n	8002bb6 <debug_printf+0x462>
 8002a8c:	200005ec 	.word	0x200005ec
 8002a90:	20001f9c 	.word	0x20001f9c
 8002a94:	08013d28 	.word	0x08013d28
 8002a98:	200005f0 	.word	0x200005f0
 8002a9c:	200005e8 	.word	0x200005e8
 8002aa0:	200005eb 	.word	0x200005eb
 8002aa4:	200005e9 	.word	0x200005e9
 8002aa8:	200005ea 	.word	0x200005ea
            }

            case PRS_DSPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1d1a      	adds	r2, r3, #4
 8002ab0:	60ba      	str	r2, [r7, #8]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]

                if (u32spec & 0x80000000)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da05      	bge.n	8002ac8 <debug_printf+0x374>
                {
                    u32spec = -u32spec;
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	425b      	negs	r3, r3
 8002ac0:	61bb      	str	r3, [r7, #24]
                    negflag = 1;
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <debug_printf+0x47c>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
                }

                format_du(u32spec);
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f89e 	bl	8002c0c <format_du>
                state = PRS_INIT;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
                break;
 8002ad4:	e06f      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_USPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1d1a      	adds	r2, r3, #4
 8002ada:	60ba      	str	r2, [r7, #8]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
                format_du(u32spec);
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f892 	bl	8002c0c <format_du>
                state = PRS_INIT;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
                break;
 8002aec:	e063      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_SSPEC:
            {
                u8ptrspec = (uint8_t *)(va_arg(args, uint32_t));
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1d1a      	adds	r2, r3, #4
 8002af2:	60ba      	str	r2, [r7, #8]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
                i = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

                while (1)
                {

                    if ((u8ptrspec[i] == 0x00) || ((width > 0) && (i >= width)))
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	18d3      	adds	r3, r2, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d045      	beq.n	8002b94 <debug_printf+0x440>
 8002b08:	4b32      	ldr	r3, [pc, #200]	; (8002bd4 <debug_printf+0x480>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <debug_printf+0x3c8>
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <debug_printf+0x480>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d23b      	bcs.n	8002b94 <debug_printf+0x440>
                    {
                        break;
                    }

                    if ((u8ptrspec[i] >= 0x20) && (u8ptrspec[i] < 0x7F))
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b1f      	cmp	r3, #31
 8002b26:	d90d      	bls.n	8002b44 <debug_printf+0x3f0>
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	18d3      	adds	r3, r2, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b7e      	cmp	r3, #126	; 0x7e
 8002b32:	d807      	bhi.n	8002b44 <debug_printf+0x3f0>
                    {
                        store_curchar(u8ptrspec[i]);
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	18d3      	adds	r3, r2, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f9b9 	bl	8002eb4 <store_curchar>
 8002b42:	e023      	b.n	8002b8c <debug_printf+0x438>
                    }

                    else
                    {
                        store_curchar('<');
 8002b44:	203c      	movs	r0, #60	; 0x3c
 8002b46:	f000 f9b5 	bl	8002eb4 <store_curchar>
                        nibble = u8ptrspec[i] >> 4;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	18d3      	adds	r3, r2, r3
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	240f      	movs	r4, #15
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	0912      	lsrs	r2, r2, #4
 8002b58:	701a      	strb	r2, [r3, #0]
                        store_curchar(bin2hex[nibble]);
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <debug_printf+0x484>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f9a6 	bl	8002eb4 <store_curchar>
                        nibble = u8ptrspec[i] & 0x0F;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	18d3      	adds	r3, r2, r3
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	210f      	movs	r1, #15
 8002b74:	400a      	ands	r2, r1
 8002b76:	701a      	strb	r2, [r3, #0]
                        store_curchar(bin2hex[nibble]);
 8002b78:	193b      	adds	r3, r7, r4
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4a16      	ldr	r2, [pc, #88]	; (8002bd8 <debug_printf+0x484>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f997 	bl	8002eb4 <store_curchar>
                        store_curchar('>');
 8002b86:	203e      	movs	r0, #62	; 0x3e
 8002b88:	f000 f994 	bl	8002eb4 <store_curchar>
                    }

                    i++;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
                    if ((u8ptrspec[i] == 0x00) || ((width > 0) && (i >= width)))
 8002b92:	e7b3      	b.n	8002afc <debug_printf+0x3a8>
                }

                state = PRS_INIT;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
                break;
 8002b98:	e00d      	b.n	8002bb6 <debug_printf+0x462>
            }

            case PRS_XSPEC:
            {
                u32spec = va_arg(args, uint32_t);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1d1a      	adds	r2, r3, #4
 8002b9e:	60ba      	str	r2, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	61bb      	str	r3, [r7, #24]
                format_x(u32spec);
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f8e8 	bl	8002d7c <format_x>
                state = PRS_INIT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
                break;
 8002bb0:	e001      	b.n	8002bb6 <debug_printf+0x462>
            }

            default:
            {
                crash();
 8002bb2:	f7fe f845 	bl	8000c40 <crash>
    while (run)
 8002bb6:	2326      	movs	r3, #38	; 0x26
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d000      	beq.n	8002bc2 <debug_printf+0x46e>
 8002bc0:	e5ea      	b.n	8002798 <debug_printf+0x44>
        }

    }

    va_end(args);
    return;
 8002bc2:	46c0      	nop			; (mov r8, r8)
}
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b00a      	add	sp, #40	; 0x28
 8002bc8:	bc90      	pop	{r4, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	b003      	add	sp, #12
 8002bce:	4718      	bx	r3
 8002bd0:	200005ea 	.word	0x200005ea
 8002bd4:	200005eb 	.word	0x200005eb
 8002bd8:	08013d14 	.word	0x08013d14

08002bdc <debug_write_fixed>:
 *
 * \return - none
 */

void debug_write_fixed(uint32_t level, uint8_t *buf, uint32_t count)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

    if (debuglevel != 0)
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <debug_write_fixed+0x2c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <debug_write_fixed+0x22>
    {
        usb_write_fixed(buf, count);
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f006 f946 	bl	8008e88 <usb_write_fixed>
    }

    return;
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46c0      	nop			; (mov r8, r8)
}
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b004      	add	sp, #16
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	20001f9c 	.word	0x20001f9c

08002c0c <format_du>:
 * \return - none
 */


static void format_du(uint32_t binval)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    uint32_t remain;
    uint32_t outdex;
    uint32_t signcount;
    uint8_t ascdec[10];

    signcount = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    outdex = 10;
 8002c18:	230a      	movs	r3, #10
 8002c1a:	61fb      	str	r3, [r7, #28]
    remain = binval;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	623b      	str	r3, [r7, #32]

    if (remain == 0)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d121      	bne.n	8002c6a <format_du+0x5e>
    {
        numdigits = 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
        ascdec[9] = '0';
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2230      	movs	r2, #48	; 0x30
 8002c30:	725a      	strb	r2, [r3, #9]
        outdex = 9;
 8002c32:	2309      	movs	r3, #9
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e01f      	b.n	8002c78 <format_du+0x6c>
    else
    {

        while (remain != 0)
        {
            outdex--;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
            ascdec[outdex] = (remain % 10) + '0';
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	210a      	movs	r1, #10
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7fd fb02 	bl	800024c <__aeabi_uidivmod>
 8002c48:	000b      	movs	r3, r1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3330      	adds	r3, #48	; 0x30
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	230c      	movs	r3, #12
 8002c52:	18fa      	adds	r2, r7, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	18d3      	adds	r3, r2, r3
 8002c58:	1c0a      	adds	r2, r1, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
            remain = remain / 10;
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	210a      	movs	r1, #10
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fd fa6d 	bl	8000140 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	623b      	str	r3, [r7, #32]
        while (remain != 0)
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e3      	bne.n	8002c38 <format_du+0x2c>
        }

        numdigits = 10 - outdex;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	220a      	movs	r2, #10
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (negflag)
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <format_du+0x164>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d006      	beq.n	8002c8e <format_du+0x82>
    {
        signcount = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
        signchar = '-';
 8002c84:	232f      	movs	r3, #47	; 0x2f
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	222d      	movs	r2, #45	; 0x2d
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	e009      	b.n	8002ca2 <format_du+0x96>
    }

    else if (zflag == '+')
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <format_du+0x168>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b2b      	cmp	r3, #43	; 0x2b
 8002c94:	d105      	bne.n	8002ca2 <format_du+0x96>
    {
        signcount = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
        signchar = '+';
 8002c9a:	232f      	movs	r3, #47	; 0x2f
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	222b      	movs	r2, #43	; 0x2b
 8002ca0:	701a      	strb	r2, [r3, #0]
    }

    if ((zflag == '0') && (width > (numdigits + signcount)))
 8002ca2:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <format_du+0x168>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b30      	cmp	r3, #48	; 0x30
 8002ca8:	d123      	bne.n	8002cf2 <format_du+0xe6>
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <format_du+0x16c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	4299      	cmp	r1, r3
 8002cb8:	d91b      	bls.n	8002cf2 <format_du+0xe6>
    {

        if (signcount)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <format_du+0xc0>
        {
            store_curchar(signchar);
 8002cc0:	232f      	movs	r3, #47	; 0x2f
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f8f4 	bl	8002eb4 <store_curchar>
        }

        for (i = 0; i < (width - (numdigits + signcount)); i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	e005      	b.n	8002cde <format_du+0xd2>
        {
            store_curchar('0');
 8002cd2:	2030      	movs	r0, #48	; 0x30
 8002cd4:	f000 f8ee 	bl	8002eb4 <store_curchar>
        for (i = 0; i < (width - (numdigits + signcount)); i++)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <format_du+0x16c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	1acb      	subs	r3, r1, r3
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3ef      	bcc.n	8002cd2 <format_du+0xc6>
        }

    }

    if ((zflag != '0') && (width > (numdigits + signcount)))
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <format_du+0x168>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b30      	cmp	r3, #48	; 0x30
 8002cf8:	d023      	beq.n	8002d42 <format_du+0x136>
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <format_du+0x16c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	0019      	movs	r1, r3
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	4299      	cmp	r1, r3
 8002d08:	d91b      	bls.n	8002d42 <format_du+0x136>
    {

        for (i = 0; i < (width - (numdigits + signcount)); i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0e:	e005      	b.n	8002d1c <format_du+0x110>
        {
            store_curchar(' ');
 8002d10:	2020      	movs	r0, #32
 8002d12:	f000 f8cf 	bl	8002eb4 <store_curchar>
        for (i = 0; i < (width - (numdigits + signcount)); i++)
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	3301      	adds	r3, #1
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1c:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <format_du+0x16c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	0019      	movs	r1, r3
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	18d3      	adds	r3, r2, r3
 8002d28:	1acb      	subs	r3, r1, r3
 8002d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d3ef      	bcc.n	8002d10 <format_du+0x104>
        }

        if (signcount)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <format_du+0x136>
        {
            store_curchar(signchar);
 8002d36:	232f      	movs	r3, #47	; 0x2f
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f8b9 	bl	8002eb4 <store_curchar>
        }

    }

    for (i = 0; i < numdigits; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	e00b      	b.n	8002d60 <format_du+0x154>
    {
        store_curchar(ascdec[outdex + i]);
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	18d3      	adds	r3, r2, r3
 8002d4e:	220c      	movs	r2, #12
 8002d50:	18ba      	adds	r2, r7, r2
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f8ad 	bl	8002eb4 <store_curchar>
    for (i = 0; i < numdigits; i++)
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3ef      	bcc.n	8002d48 <format_du+0x13c>
    }

    return;
 8002d68:	46c0      	nop			; (mov r8, r8)
}
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b00c      	add	sp, #48	; 0x30
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200005ea 	.word	0x200005ea
 8002d74:	200005e8 	.word	0x200005e8
 8002d78:	200005eb 	.word	0x200005eb

08002d7c <format_x>:
 * \return - none
 */


static void format_x(uint32_t binval)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    uint32_t numdigits;
    uint32_t remain;
    uint32_t outdex;
    uint8_t aschex[8];

    outdex = 8;
 8002d84:	2308      	movs	r3, #8
 8002d86:	613b      	str	r3, [r7, #16]
    remain = binval;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	617b      	str	r3, [r7, #20]

    if (remain == 0)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d137      	bne.n	8002e02 <format_x+0x86>
    {
        numdigits = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61bb      	str	r3, [r7, #24]
        aschex[7] = '0';
 8002d96:	2308      	movs	r3, #8
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2230      	movs	r2, #48	; 0x30
 8002d9c:	71da      	strb	r2, [r3, #7]
        outdex = 7;
 8002d9e:	2307      	movs	r3, #7
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e035      	b.n	8002e10 <format_x+0x94>
    else
    {

        while (remain != 0)
        {
            outdex--;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
            aschex[outdex] = (remain & 0x0F);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	220f      	movs	r2, #15
 8002db0:	4013      	ands	r3, r2
 8002db2:	b2d9      	uxtb	r1, r3
 8002db4:	2008      	movs	r0, #8
 8002db6:	183a      	adds	r2, r7, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	1c0a      	adds	r2, r1, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
            remain = remain >> 4;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]

            if (aschex[outdex] < 10)
 8002dc6:	183a      	adds	r2, r7, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b09      	cmp	r3, #9
 8002dd0:	d80b      	bhi.n	8002dea <format_x+0x6e>
            {
                aschex[outdex] += '0';
 8002dd2:	183a      	adds	r2, r7, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	18d3      	adds	r3, r2, r3
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3330      	adds	r3, #48	; 0x30
 8002ddc:	b2d9      	uxtb	r1, r3
 8002dde:	183a      	adds	r2, r7, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	18d3      	adds	r3, r2, r3
 8002de4:	1c0a      	adds	r2, r1, #0
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e00b      	b.n	8002e02 <format_x+0x86>
            }
            else
            {
                aschex[outdex] += ('A' - 10);
 8002dea:	2008      	movs	r0, #8
 8002dec:	183a      	adds	r2, r7, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3337      	adds	r3, #55	; 0x37
 8002df6:	b2d9      	uxtb	r1, r3
 8002df8:	183a      	adds	r2, r7, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	1c0a      	adds	r2, r1, #0
 8002e00:	701a      	strb	r2, [r3, #0]
        while (remain != 0)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1cd      	bne.n	8002da4 <format_x+0x28>
            }

        }

        numdigits = 8 - outdex;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

    if ((zflag == '0') && (width > numdigits))
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <format_x+0x130>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d116      	bne.n	8002e46 <format_x+0xca>
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <format_x+0x134>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d210      	bcs.n	8002e46 <format_x+0xca>
    {

        for (i = 0; i < (width - numdigits); i++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	e005      	b.n	8002e36 <format_x+0xba>
        {
            store_curchar('0');
 8002e2a:	2030      	movs	r0, #48	; 0x30
 8002e2c:	f000 f842 	bl	8002eb4 <store_curchar>
        for (i = 0; i < (width - numdigits); i++)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <format_x+0x134>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d3f1      	bcc.n	8002e2a <format_x+0xae>
        }

    }

    if ((zflag != '0') && (width > numdigits))
 8002e46:	4b19      	ldr	r3, [pc, #100]	; (8002eac <format_x+0x130>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b30      	cmp	r3, #48	; 0x30
 8002e4c:	d016      	beq.n	8002e7c <format_x+0x100>
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <format_x+0x134>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	001a      	movs	r2, r3
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d210      	bcs.n	8002e7c <format_x+0x100>
    {

        for (i = 0; i < (width - numdigits); i++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e005      	b.n	8002e6c <format_x+0xf0>
        {
            store_curchar(' ');
 8002e60:	2020      	movs	r0, #32
 8002e62:	f000 f827 	bl	8002eb4 <store_curchar>
        for (i = 0; i < (width - numdigits); i++)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <format_x+0x134>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	001a      	movs	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d3f1      	bcc.n	8002e60 <format_x+0xe4>
        }

    }

    for (i = 0; i < numdigits; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	e00b      	b.n	8002e9a <format_x+0x11e>
    {
        store_curchar(aschex[outdex + i]);
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	2208      	movs	r2, #8
 8002e8a:	18ba      	adds	r2, r7, r2
 8002e8c:	5cd3      	ldrb	r3, [r2, r3]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f810 	bl	8002eb4 <store_curchar>
    for (i = 0; i < numdigits; i++)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	3301      	adds	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3ef      	bcc.n	8002e82 <format_x+0x106>
    }

    return;
 8002ea2:	46c0      	nop			; (mov r8, r8)
}
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b008      	add	sp, #32
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	200005e8 	.word	0x200005e8
 8002eb0:	200005eb 	.word	0x200005eb

08002eb4 <store_curchar>:
 *
 * \return - none
 */

static void store_curchar(uint8_t nxtchar)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0002      	movs	r2, r0
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
    prbuf[prbufdex] = nxtchar;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <store_curchar+0x44>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <store_curchar+0x48>)
 8002ec6:	1df9      	adds	r1, r7, #7
 8002ec8:	7809      	ldrb	r1, [r1, #0]
 8002eca:	54d1      	strb	r1, [r2, r3]
    prbufdex++;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <store_curchar+0x44>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <store_curchar+0x44>)
 8002ed4:	601a      	str	r2, [r3, #0]

    if (prbufdex >= USB_MAX_BUF_LEN)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <store_curchar+0x44>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b7f      	cmp	r3, #127	; 0x7f
 8002edc:	d908      	bls.n	8002ef0 <store_curchar+0x3c>
    {
        usb_write_fixed(prbuf, USB_MAX_BUF_LEN);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <store_curchar+0x48>)
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f005 ffd0 	bl	8008e88 <usb_write_fixed>
        prbufdex = 0;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <store_curchar+0x44>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    }

    return;
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46c0      	nop			; (mov r8, r8)
}
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200005ec 	.word	0x200005ec
 8002efc:	200005f0 	.word	0x200005f0

08002f00 <esp_init>:
 *
 *
 */

void esp_init(void)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b0a9      	sub	sp, #164	; 0xa4
 8002f04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;
    UART_HandleTypeDef huart;
    HAL_StatusTypeDef halstat;

    esp_ready_flag = 0;
 8002f06:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <esp_init+0x134>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
    initstruc.Pin = ESP_PWR_PIN;
 8002f0c:	2488      	movs	r4, #136	; 0x88
 8002f0e:	193b      	adds	r3, r7, r4
 8002f10:	2204      	movs	r2, #4
 8002f12:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	2201      	movs	r2, #1
 8002f18:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8002f1a:	193b      	adds	r3, r7, r4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_PWR_PORT, &initstruc);
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <esp_init+0x138>)
 8002f30:	0019      	movs	r1, r3
 8002f32:	0010      	movs	r0, r2
 8002f34:	f006 fd1c 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = ESP_ENBL_PIN;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(ESP_ENBL_PORT, &initstruc);
 8002f40:	193b      	adds	r3, r7, r4
 8002f42:	4a3d      	ldr	r2, [pc, #244]	; (8003038 <esp_init+0x138>)
 8002f44:	0019      	movs	r1, r3
 8002f46:	0010      	movs	r0, r2
 8002f48:	f006 fd12 	bl	8009970 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(ESP_ENBL_PORT, ESP_ENBL_PIN, GPIO_PIN_SET);
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	4839      	ldr	r0, [pc, #228]	; (8003038 <esp_init+0x138>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	0019      	movs	r1, r3
 8002f56:	f006 fe7b 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ESP_PWR_PORT, ESP_PWR_PIN, GPIO_PIN_SET);
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <esp_init+0x138>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2104      	movs	r1, #4
 8002f60:	0018      	movs	r0, r3
 8002f62:	f006 fe75 	bl	8009c50 <HAL_GPIO_WritePin>


    initstruc.Pin = ESP_UART_TX_PIN;
 8002f66:	193b      	adds	r3, r7, r4
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	00d2      	lsls	r2, r2, #3
 8002f6c:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	2202      	movs	r2, #2
 8002f72:	605a      	str	r2, [r3, #4]
    initstruc.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	2203      	movs	r2, #3
 8002f78:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = ESP_UART_TX_AF;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_UART_TX_PORT, &initstruc); /* comment out for Steve */
 8002f80:	193a      	adds	r2, r7, r4
 8002f82:	2390      	movs	r3, #144	; 0x90
 8002f84:	05db      	lsls	r3, r3, #23
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f006 fcf1 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = ESP_UART_RX_PIN;
 8002f8e:	0021      	movs	r1, r4
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = ESP_UART_RX_AF;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ESP_UART_RX_PORT, &initstruc);  /* comment out for Steve */
 8002fa4:	187a      	adds	r2, r7, r1
 8002fa6:	2390      	movs	r3, #144	; 0x90
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f006 fcdf 	bl	8009970 <HAL_GPIO_Init>

    __HAL_RCC_USART1_CLK_ENABLE();  /* comment out for Steve */
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <esp_init+0x13c>)
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <esp_init+0x13c>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	01c9      	lsls	r1, r1, #7
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <esp_init+0x13c>)
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	4013      	ands	r3, r2
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]

    huart.Instance = ESP_UART;
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <esp_init+0x140>)
 8002fd2:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	22e1      	movs	r2, #225	; 0xe1
 8002fd8:	0252      	lsls	r2, r2, #9
 8002fda:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2200      	movs	r2, #0
 8002fec:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	220c      	movs	r2, #12
 8002ff2:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
    huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003000:	1d3b      	adds	r3, r7, #4
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
    huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	2200      	movs	r2, #0
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
    halstat = HAL_UART_Init(&huart);  /* comment out for Steve */
 800300c:	239f      	movs	r3, #159	; 0x9f
 800300e:	18fc      	adds	r4, r7, r3
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	0018      	movs	r0, r3
 8003014:	f00a f8c2 	bl	800d19c <HAL_UART_Init>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
    {

//        crash();
    }

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);                     /* COMMENT OUT FOR STEVE */
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	201b      	movs	r0, #27
 8003022:	f006 fc2d 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003026:	201b      	movs	r0, #27
 8003028:	f006 fc3f 	bl	80098aa <HAL_NVIC_EnableIRQ>

    return;
 800302c:	46c0      	nop			; (mov r8, r8)
}
 800302e:	46bd      	mov	sp, r7
 8003030:	b029      	add	sp, #164	; 0xa4
 8003032:	bd90      	pop	{r4, r7, pc}
 8003034:	20001fa1 	.word	0x20001fa1
 8003038:	48000400 	.word	0x48000400
 800303c:	40021000 	.word	0x40021000
 8003040:	40013800 	.word	0x40013800

08003044 <esp_power_on>:
 *
 *
 */

void esp_power_on(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0

    return;
 8003048:	46c0      	nop			; (mov r8, r8)
}
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <esp_receive>:
 *
 *
 */

uint8_t esp_receive(uint8_t *ibuf, uint16_t ilen, uint32_t timeout, void(*complih)(uint8_t, uint32_t))
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	230a      	movs	r3, #10
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	1c0a      	adds	r2, r1, #0
 8003062:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;

    if (input_busy)
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <esp_receive+0x94>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <esp_receive+0x24>
    {
        retstat = QS_RXBUSY;
 800306c:	2317      	movs	r3, #23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]
    }

    if (ilen == 0)
 8003074:	230a      	movs	r3, #10
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <esp_receive+0x3e>
    {
        rxbuflen = 0;
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <esp_receive+0x98>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
        retstat = QS_OK;
 8003084:	2317      	movs	r3, #23
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e022      	b.n	80030d4 <esp_receive+0x84>
    }

    else if (ibuf == 0)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <esp_receive+0x4a>
    {
        crash();
 8003094:	f7fd fdd4 	bl	8000c40 <crash>
 8003098:	e01c      	b.n	80030d4 <esp_receive+0x84>
    }

    else
    {
        rxbufaddr = ibuf;
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <esp_receive+0x9c>)
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	601a      	str	r2, [r3, #0]
        rxbuflen = ilen;
 80030a0:	230a      	movs	r3, #10
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	881a      	ldrh	r2, [r3, #0]
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <esp_receive+0x98>)
 80030a8:	601a      	str	r2, [r3, #0]
        rxbufindex = 0;
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <esp_receive+0xa0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
        rxtimeout = timeout;
 80030b0:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <esp_receive+0xa4>)
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
        rxcomplih = complih;
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <esp_receive+0xa8>)
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	601a      	str	r2, [r3, #0]
        set_timer(rxtimeout);
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <esp_receive+0xa4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fcd1 	bl	8003a68 <set_timer>
        input_busy = 1;
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <esp_receive+0x94>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 80030cc:	2317      	movs	r3, #23
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2206      	movs	r2, #6
 80030d2:	701a      	strb	r2, [r3, #0]
    }

//    debug_printf(DBGLVL_MAX, (uint8_t *)"ESP RECEIVE: %d\r\n", retstat);
    return retstat;
 80030d4:	2317      	movs	r3, #23
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	781b      	ldrb	r3, [r3, #0]
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b006      	add	sp, #24
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000673 	.word	0x20000673
 80030e8:	20000694 	.word	0x20000694
 80030ec:	200006a0 	.word	0x200006a0
 80030f0:	20000690 	.word	0x20000690
 80030f4:	20000698 	.word	0x20000698
 80030f8:	2000069c 	.word	0x2000069c

080030fc <esp_rxflush>:
 *
 *
 */

void esp_rxflush(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
    rxget = rxput;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <esp_rxflush+0x20>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <esp_rxflush+0x24>)
 8003106:	601a      	str	r2, [r3, #0]
    input_busy = 0;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <esp_rxflush+0x28>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    rxbufindex = 0;
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <esp_rxflush+0x2c>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    return;
 8003114:	46c0      	nop			; (mov r8, r8)
}
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	2000067c 	.word	0x2000067c
 8003120:	20000678 	.word	0x20000678
 8003124:	20000673 	.word	0x20000673
 8003128:	20000690 	.word	0x20000690

0800312c <esp_task>:
 *
 *
 */

void esp_task(void)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
    if (taskstate != taskoldstate)
    {
//        debug_printf(DBGLVL_MAX, (uint8_t *)"ESP STATE: %d -> %d\r\n", taskoldstate, taskstate);
    }

    taskoldstate = taskstate;
 8003132:	4bd7      	ldr	r3, [pc, #860]	; (8003490 <esp_task+0x364>)
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4bd7      	ldr	r3, [pc, #860]	; (8003494 <esp_task+0x368>)
 8003138:	701a      	strb	r2, [r3, #0]



    switch(taskstate)
 800313a:	4bd5      	ldr	r3, [pc, #852]	; (8003490 <esp_task+0x364>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d900      	bls.n	8003144 <esp_task+0x18>
 8003142:	e342      	b.n	80037ca <esp_task+0x69e>
 8003144:	009a      	lsls	r2, r3, #2
 8003146:	4bd4      	ldr	r3, [pc, #848]	; (8003498 <esp_task+0x36c>)
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	469f      	mov	pc, r3

        case TS_INIT:
        {

// break;
            rxget = 0;
 800314e:	4bd3      	ldr	r3, [pc, #844]	; (800349c <esp_task+0x370>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
            rxput = 0;
 8003154:	4bd2      	ldr	r3, [pc, #840]	; (80034a0 <esp_task+0x374>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
            rxbufindex = 0;
 800315a:	4bd2      	ldr	r3, [pc, #840]	; (80034a4 <esp_task+0x378>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
            taskstate = TS_IDLE;
 8003160:	4bcb      	ldr	r3, [pc, #812]	; (8003490 <esp_task+0x364>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
            break;
 8003166:	e346      	b.n	80037f6 <esp_task+0x6ca>

        case TS_IDLE:
        {

//        break;                      /* UNCOMMENT OUT FOR STEVE */
            tempchar = espat_answer();
 8003168:	1dfc      	adds	r4, r7, #7
 800316a:	f000 fc8f 	bl	8003a8c <espat_answer>
 800316e:	0003      	movs	r3, r0
 8003170:	7023      	strb	r3, [r4, #0]

			if ((tempchar == CA_NONE) || (tempchar == CA_NOTPOWERED))
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <esp_task+0x56>
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d103      	bne.n	800318a <esp_task+0x5e>
			{
			    taskstate = TS_IDLE;
 8003182:	4bc3      	ldr	r3, [pc, #780]	; (8003490 <esp_task+0x364>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
			    break;
 8003188:	e335      	b.n	80037f6 <esp_task+0x6ca>
			}

            if (input_busy == 0)
 800318a:	4bc7      	ldr	r3, [pc, #796]	; (80034a8 <esp_task+0x37c>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <esp_task+0x68>
 8003192:	e31d      	b.n	80037d0 <esp_task+0x6a4>
            {
                break;
            }

            if (rxget != rxput)
 8003194:	4bc1      	ldr	r3, [pc, #772]	; (800349c <esp_task+0x370>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4bc1      	ldr	r3, [pc, #772]	; (80034a0 <esp_task+0x374>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d040      	beq.n	8003222 <esp_task+0xf6>
            {
                tempchar = rxintbuf[rxget];
 80031a0:	4bbe      	ldr	r3, [pc, #760]	; (800349c <esp_task+0x370>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	49c1      	ldr	r1, [pc, #772]	; (80034ac <esp_task+0x380>)
 80031a8:	5c8a      	ldrb	r2, [r1, r2]
 80031aa:	701a      	strb	r2, [r3, #0]
                rxget++;
 80031ac:	4bbb      	ldr	r3, [pc, #748]	; (800349c <esp_task+0x370>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	4bba      	ldr	r3, [pc, #744]	; (800349c <esp_task+0x370>)
 80031b4:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 80031b6:	4bb9      	ldr	r3, [pc, #740]	; (800349c <esp_task+0x370>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	0dda      	lsrs	r2, r3, #23
 80031be:	4bb7      	ldr	r3, [pc, #732]	; (800349c <esp_task+0x370>)
 80031c0:	601a      	str	r2, [r3, #0]

                if (tempchar < 0x21 )
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d800      	bhi.n	80031cc <esp_task+0xa0>
 80031ca:	e303      	b.n	80037d4 <esp_task+0x6a8>
                {
                    break;
                }

                set_timer(rxtimeout);
 80031cc:	4bb8      	ldr	r3, [pc, #736]	; (80034b0 <esp_task+0x384>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 fc49 	bl	8003a68 <set_timer>
                rxbufindex = 0;
 80031d6:	4bb3      	ldr	r3, [pc, #716]	; (80034a4 <esp_task+0x378>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b0d      	cmp	r3, #13
 80031e2:	d103      	bne.n	80031ec <esp_task+0xc0>
                {
                    taskstate = TS_CR1;
 80031e4:	4baa      	ldr	r3, [pc, #680]	; (8003490 <esp_task+0x364>)
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e00c      	b.n	8003206 <esp_task+0xda>
                }

                else
                {
                    rxbufaddr[rxbufindex] = tempchar;
 80031ec:	4bb1      	ldr	r3, [pc, #708]	; (80034b4 <esp_task+0x388>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4bac      	ldr	r3, [pc, #688]	; (80034a4 <esp_task+0x378>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	18d3      	adds	r3, r2, r3
 80031f6:	1dfa      	adds	r2, r7, #7
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 80031fc:	4ba9      	ldr	r3, [pc, #676]	; (80034a4 <esp_task+0x378>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	4ba8      	ldr	r3, [pc, #672]	; (80034a4 <esp_task+0x378>)
 8003204:	601a      	str	r2, [r3, #0]
                }

                if (rxbufindex == rxbuflen)
 8003206:	4ba7      	ldr	r3, [pc, #668]	; (80034a4 <esp_task+0x378>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4bab      	ldr	r3, [pc, #684]	; (80034b8 <esp_task+0x38c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d103      	bne.n	800321a <esp_task+0xee>
                {
                    taskstate = TS_RXOVFLOW;
 8003212:	4b9f      	ldr	r3, [pc, #636]	; (8003490 <esp_task+0x364>)
 8003214:	2204      	movs	r2, #4
 8003216:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 8003218:	e2de      	b.n	80037d8 <esp_task+0x6ac>
                    taskstate = TS_MESSAGE;
 800321a:	4b9d      	ldr	r3, [pc, #628]	; (8003490 <esp_task+0x364>)
 800321c:	2203      	movs	r2, #3
 800321e:	701a      	strb	r2, [r3, #0]
            break;
 8003220:	e2da      	b.n	80037d8 <esp_task+0x6ac>
                if (timer1 == 0)
 8003222:	4ba6      	ldr	r3, [pc, #664]	; (80034bc <esp_task+0x390>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d000      	beq.n	800322c <esp_task+0x100>
 800322a:	e2d5      	b.n	80037d8 <esp_task+0x6ac>
                    taskstate = TS_TIMEOUT;
 800322c:	4b98      	ldr	r3, [pc, #608]	; (8003490 <esp_task+0x364>)
 800322e:	2206      	movs	r2, #6
 8003230:	701a      	strb	r2, [r3, #0]
            break;
 8003232:	e2d1      	b.n	80037d8 <esp_task+0x6ac>
        }

        case TS_CR1:
        {

            if (rxget != rxput)
 8003234:	4b99      	ldr	r3, [pc, #612]	; (800349c <esp_task+0x370>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b99      	ldr	r3, [pc, #612]	; (80034a0 <esp_task+0x374>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d03a      	beq.n	80032b6 <esp_task+0x18a>
            {
                set_timer(rxtimeout);
 8003240:	4b9b      	ldr	r3, [pc, #620]	; (80034b0 <esp_task+0x384>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0018      	movs	r0, r3
 8003246:	f000 fc0f 	bl	8003a68 <set_timer>
                tempchar = rxintbuf[rxget];
 800324a:	4b94      	ldr	r3, [pc, #592]	; (800349c <esp_task+0x370>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	1dfb      	adds	r3, r7, #7
 8003250:	4996      	ldr	r1, [pc, #600]	; (80034ac <esp_task+0x380>)
 8003252:	5c8a      	ldrb	r2, [r1, r2]
 8003254:	701a      	strb	r2, [r3, #0]
                rxget++;
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <esp_task+0x370>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <esp_task+0x370>)
 800325e:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 8003260:	4b8e      	ldr	r3, [pc, #568]	; (800349c <esp_task+0x370>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	0dda      	lsrs	r2, r3, #23
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <esp_task+0x370>)
 800326a:	601a      	str	r2, [r3, #0]

                if ((tempchar == 0x0D) || (tempchar == 0x0A))
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b0d      	cmp	r3, #13
 8003272:	d100      	bne.n	8003276 <esp_task+0x14a>
 8003274:	e2c0      	b.n	80037f8 <esp_task+0x6cc>
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d100      	bne.n	8003280 <esp_task+0x154>
 800327e:	e2bb      	b.n	80037f8 <esp_task+0x6cc>
                {
                	break;
                }

                rxbufaddr[rxbufindex] = tempchar;
 8003280:	4b8c      	ldr	r3, [pc, #560]	; (80034b4 <esp_task+0x388>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <esp_task+0x378>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	1dfa      	adds	r2, r7, #7
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	701a      	strb	r2, [r3, #0]
                rxbufindex++;
 8003290:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <esp_task+0x378>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <esp_task+0x378>)
 8003298:	601a      	str	r2, [r3, #0]

                if (rxbufindex == rxbuflen)
 800329a:	4b82      	ldr	r3, [pc, #520]	; (80034a4 <esp_task+0x378>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b86      	ldr	r3, [pc, #536]	; (80034b8 <esp_task+0x38c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d103      	bne.n	80032ae <esp_task+0x182>
                {
                    taskstate = TS_RXOVFLOW;
 80032a6:	4b7a      	ldr	r3, [pc, #488]	; (8003490 <esp_task+0x364>)
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 80032ac:	e296      	b.n	80037dc <esp_task+0x6b0>
                    taskstate = TS_MESSAGE;
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <esp_task+0x364>)
 80032b0:	2203      	movs	r2, #3
 80032b2:	701a      	strb	r2, [r3, #0]
            break;
 80032b4:	e292      	b.n	80037dc <esp_task+0x6b0>
                if (timer1 == 0)
 80032b6:	4b81      	ldr	r3, [pc, #516]	; (80034bc <esp_task+0x390>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d000      	beq.n	80032c0 <esp_task+0x194>
 80032be:	e28d      	b.n	80037dc <esp_task+0x6b0>
                    taskstate = TS_TIMEOUT;
 80032c0:	4b73      	ldr	r3, [pc, #460]	; (8003490 <esp_task+0x364>)
 80032c2:	2206      	movs	r2, #6
 80032c4:	701a      	strb	r2, [r3, #0]
            break;
 80032c6:	e289      	b.n	80037dc <esp_task+0x6b0>
        }

        case TS_MESSAGE:
        {

            if (rxget != rxput)
 80032c8:	4b74      	ldr	r3, [pc, #464]	; (800349c <esp_task+0x370>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <esp_task+0x374>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d100      	bne.n	80032d6 <esp_task+0x1aa>
 80032d4:	e07e      	b.n	80033d4 <esp_task+0x2a8>
            {
                set_timer(rxtimeout);
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <esp_task+0x384>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 fbc4 	bl	8003a68 <set_timer>

                while (rxget != rxput)
 80032e0:	e070      	b.n	80033c4 <esp_task+0x298>
                {
                    tempchar = rxintbuf[rxget];
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <esp_task+0x370>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	4970      	ldr	r1, [pc, #448]	; (80034ac <esp_task+0x380>)
 80032ea:	5c8a      	ldrb	r2, [r1, r2]
 80032ec:	701a      	strb	r2, [r3, #0]
                    rxget++;
 80032ee:	4b6b      	ldr	r3, [pc, #428]	; (800349c <esp_task+0x370>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <esp_task+0x370>)
 80032f6:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <esp_task+0x370>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	0dda      	lsrs	r2, r3, #23
 8003300:	4b66      	ldr	r3, [pc, #408]	; (800349c <esp_task+0x370>)
 8003302:	601a      	str	r2, [r3, #0]

                    if (tempchar == 0x0A)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b0a      	cmp	r3, #10
 800330a:	d100      	bne.n	800330e <esp_task+0x1e2>
                    {
                        continue;
 800330c:	e05a      	b.n	80033c4 <esp_task+0x298>
                    }



                    rxbufaddr[rxbufindex] = tempchar;
 800330e:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <esp_task+0x388>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <esp_task+0x378>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	1dfa      	adds	r2, r7, #7
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 800331e:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <esp_task+0x378>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	4b5f      	ldr	r3, [pc, #380]	; (80034a4 <esp_task+0x378>)
 8003326:	601a      	str	r2, [r3, #0]

                    if ( rxbufaddr[0] == 'Y')
 8003328:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <esp_task+0x388>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b59      	cmp	r3, #89	; 0x59
 8003330:	d103      	bne.n	800333a <esp_task+0x20e>
                    {
                        tempchar = tempchar;
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	1dfa      	adds	r2, r7, #7
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	701a      	strb	r2, [r3, #0]
                    }

                    if (tempchar == 0x0D)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b0d      	cmp	r3, #13
 8003340:	d103      	bne.n	800334a <esp_task+0x21e>
                    {
                        taskstate = TS_COMPL;
 8003342:	4b53      	ldr	r3, [pc, #332]	; (8003490 <esp_task+0x364>)
 8003344:	2205      	movs	r2, #5
 8003346:	701a      	strb	r2, [r3, #0]
                	    break;
 8003348:	e043      	b.n	80033d2 <esp_task+0x2a6>
                    }


                    if (rxbufindex == rxbuflen)
 800334a:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <esp_task+0x378>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <esp_task+0x38c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d107      	bne.n	8003366 <esp_task+0x23a>
                    {
                        timer2 = 1000;
 8003356:	4b5a      	ldr	r3, [pc, #360]	; (80034c0 <esp_task+0x394>)
 8003358:	22fa      	movs	r2, #250	; 0xfa
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	601a      	str	r2, [r3, #0]
                        taskstate = TS_RXOVFLOW;
 800335e:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <esp_task+0x364>)
 8003360:	2204      	movs	r2, #4
 8003362:	701a      	strb	r2, [r3, #0]
                        break;
 8003364:	e035      	b.n	80033d2 <esp_task+0x2a6>
                    }

                    if ((rxbufaddr[0] == '+') && (tempchar == ':'))
 8003366:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <esp_task+0x388>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b2b      	cmp	r3, #43	; 0x2b
 800336e:	d129      	bne.n	80033c4 <esp_task+0x298>
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b3a      	cmp	r3, #58	; 0x3a
 8003376:	d125      	bne.n	80033c4 <esp_task+0x298>
                    {

                        if ((rxbufaddr[1] == 'N') && (rxbufaddr[2] == 'O'))
 8003378:	4b4e      	ldr	r3, [pc, #312]	; (80034b4 <esp_task+0x388>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b4e      	cmp	r3, #78	; 0x4e
 8003382:	d10c      	bne.n	800339e <esp_task+0x272>
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <esp_task+0x388>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3302      	adds	r3, #2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b4f      	cmp	r3, #79	; 0x4f
 800338e:	d106      	bne.n	800339e <esp_task+0x272>
                        {
                            commacount = 0;
 8003390:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <esp_task+0x398>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
                            taskstate = TS_NOTIND;
 8003396:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <esp_task+0x364>)
 8003398:	2207      	movs	r2, #7
 800339a:	701a      	strb	r2, [r3, #0]
                            break;
 800339c:	e019      	b.n	80033d2 <esp_task+0x2a6>
                        }

                        if ((rxbufaddr[1] == 'I') && (rxbufaddr[3] == 'D'))
 800339e:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <esp_task+0x388>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b49      	cmp	r3, #73	; 0x49
 80033a8:	d10c      	bne.n	80033c4 <esp_task+0x298>
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <esp_task+0x388>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3303      	adds	r3, #3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b44      	cmp	r3, #68	; 0x44
 80033b4:	d106      	bne.n	80033c4 <esp_task+0x298>
                        {
                            commacount = 0;
 80033b6:	4b43      	ldr	r3, [pc, #268]	; (80034c4 <esp_task+0x398>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
                            taskstate = TS_NOTIND;
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <esp_task+0x364>)
 80033be:	2207      	movs	r2, #7
 80033c0:	701a      	strb	r2, [r3, #0]
                            break;
 80033c2:	e006      	b.n	80033d2 <esp_task+0x2a6>
                while (rxget != rxput)
 80033c4:	4b35      	ldr	r3, [pc, #212]	; (800349c <esp_task+0x370>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b35      	ldr	r3, [pc, #212]	; (80034a0 <esp_task+0x374>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d188      	bne.n	80032e2 <esp_task+0x1b6>

                    }

                }

                break;
 80033d0:	e211      	b.n	80037f6 <esp_task+0x6ca>
 80033d2:	e210      	b.n	80037f6 <esp_task+0x6ca>
            }

            else
            {

                if (timer1 == 0)
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <esp_task+0x390>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d000      	beq.n	80033de <esp_task+0x2b2>
 80033dc:	e200      	b.n	80037e0 <esp_task+0x6b4>
                {
                    taskstate = TS_TIMEOUT;
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <esp_task+0x364>)
 80033e0:	2206      	movs	r2, #6
 80033e2:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80033e4:	e1fc      	b.n	80037e0 <esp_task+0x6b4>
        }

        case TS_NOTIND:
        {

            if (rxget != rxput)
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <esp_task+0x370>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <esp_task+0x374>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d06d      	beq.n	80034ce <esp_task+0x3a2>
            {
                set_timer(rxtimeout);
 80033f2:	4b2f      	ldr	r3, [pc, #188]	; (80034b0 <esp_task+0x384>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fb36 	bl	8003a68 <set_timer>

                while (rxget != rxput)
 80033fc:	e040      	b.n	8003480 <esp_task+0x354>
                {
                    tempchar = rxintbuf[rxget];
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <esp_task+0x370>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	4929      	ldr	r1, [pc, #164]	; (80034ac <esp_task+0x380>)
 8003406:	5c8a      	ldrb	r2, [r1, r2]
 8003408:	701a      	strb	r2, [r3, #0]
                    rxget++;
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <esp_task+0x370>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <esp_task+0x370>)
 8003412:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <esp_task+0x370>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	0dda      	lsrs	r2, r3, #23
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <esp_task+0x370>)
 800341e:	601a      	str	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = tempchar;
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <esp_task+0x388>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <esp_task+0x378>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	1dfa      	adds	r2, r7, #7
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <esp_task+0x378>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <esp_task+0x378>)
 8003438:	601a      	str	r2, [r3, #0]

                    if (rxbufindex == rxbuflen)
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <esp_task+0x378>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <esp_task+0x38c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d107      	bne.n	8003456 <esp_task+0x32a>
                    {
                        timer2 = 1000;
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <esp_task+0x394>)
 8003448:	22fa      	movs	r2, #250	; 0xfa
 800344a:	0092      	lsls	r2, r2, #2
 800344c:	601a      	str	r2, [r3, #0]
                        taskstate = TS_RXOVFLOW;
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <esp_task+0x364>)
 8003450:	2204      	movs	r2, #4
 8003452:	701a      	strb	r2, [r3, #0]
                        break;
 8003454:	e03a      	b.n	80034cc <esp_task+0x3a0>
                    }

                    if (tempchar == ',')
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b2c      	cmp	r3, #44	; 0x2c
 800345c:	d110      	bne.n	8003480 <esp_task+0x354>
                    {
                        commacount++;
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <esp_task+0x398>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <esp_task+0x398>)
 8003468:	701a      	strb	r2, [r3, #0]

                        if (commacount == 3)
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <esp_task+0x398>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b03      	cmp	r3, #3
 8003470:	d106      	bne.n	8003480 <esp_task+0x354>
                        {
                            notindcount = 0;
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <esp_task+0x39c>)
 8003474:	2200      	movs	r2, #0
 8003476:	801a      	strh	r2, [r3, #0]
                            taskstate = TS_NOTINDCOUNT;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <esp_task+0x364>)
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
                            break;
 800347e:	e025      	b.n	80034cc <esp_task+0x3a0>
                while (rxget != rxput)
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <esp_task+0x370>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <esp_task+0x374>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d1b8      	bne.n	80033fe <esp_task+0x2d2>

                    }

                }

                break;
 800348c:	e1b3      	b.n	80037f6 <esp_task+0x6ca>
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	20000671 	.word	0x20000671
 8003494:	20000672 	.word	0x20000672
 8003498:	08013d58 	.word	0x08013d58
 800349c:	20000678 	.word	0x20000678
 80034a0:	2000067c 	.word	0x2000067c
 80034a4:	20000690 	.word	0x20000690
 80034a8:	20000673 	.word	0x20000673
 80034ac:	200006a8 	.word	0x200006a8
 80034b0:	20000698 	.word	0x20000698
 80034b4:	200006a0 	.word	0x200006a0
 80034b8:	20000694 	.word	0x20000694
 80034bc:	20000680 	.word	0x20000680
 80034c0:	20000684 	.word	0x20000684
 80034c4:	20000675 	.word	0x20000675
 80034c8:	20000676 	.word	0x20000676
 80034cc:	e193      	b.n	80037f6 <esp_task+0x6ca>
            }

            else
            {

                if (timer1 == 0)
 80034ce:	4bcc      	ldr	r3, [pc, #816]	; (8003800 <esp_task+0x6d4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d000      	beq.n	80034d8 <esp_task+0x3ac>
 80034d6:	e185      	b.n	80037e4 <esp_task+0x6b8>
                {
                    taskstate = TS_TIMEOUT;
 80034d8:	4bca      	ldr	r3, [pc, #808]	; (8003804 <esp_task+0x6d8>)
 80034da:	2206      	movs	r2, #6
 80034dc:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80034de:	e181      	b.n	80037e4 <esp_task+0x6b8>


        case TS_NOTINDCOUNT:
        {

            if (rxget != rxput)
 80034e0:	4bc9      	ldr	r3, [pc, #804]	; (8003808 <esp_task+0x6dc>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4bc9      	ldr	r3, [pc, #804]	; (800380c <esp_task+0x6e0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d061      	beq.n	80035b0 <esp_task+0x484>
            {
                set_timer(rxtimeout);
 80034ec:	4bc8      	ldr	r3, [pc, #800]	; (8003810 <esp_task+0x6e4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fab9 	bl	8003a68 <set_timer>

                while (rxget != rxput)
 80034f6:	e053      	b.n	80035a0 <esp_task+0x474>
                {
                    tempchar = rxintbuf[rxget];
 80034f8:	4bc3      	ldr	r3, [pc, #780]	; (8003808 <esp_task+0x6dc>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	1dfb      	adds	r3, r7, #7
 80034fe:	49c5      	ldr	r1, [pc, #788]	; (8003814 <esp_task+0x6e8>)
 8003500:	5c8a      	ldrb	r2, [r1, r2]
 8003502:	701a      	strb	r2, [r3, #0]
                    rxget++;
 8003504:	4bc0      	ldr	r3, [pc, #768]	; (8003808 <esp_task+0x6dc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	4bbf      	ldr	r3, [pc, #764]	; (8003808 <esp_task+0x6dc>)
 800350c:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 800350e:	4bbe      	ldr	r3, [pc, #760]	; (8003808 <esp_task+0x6dc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	05db      	lsls	r3, r3, #23
 8003514:	0dda      	lsrs	r2, r3, #23
 8003516:	4bbc      	ldr	r3, [pc, #752]	; (8003808 <esp_task+0x6dc>)
 8003518:	601a      	str	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = tempchar;
 800351a:	4bbf      	ldr	r3, [pc, #764]	; (8003818 <esp_task+0x6ec>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4bbf      	ldr	r3, [pc, #764]	; (800381c <esp_task+0x6f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	18d3      	adds	r3, r2, r3
 8003524:	1dfa      	adds	r2, r7, #7
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 800352a:	4bbc      	ldr	r3, [pc, #752]	; (800381c <esp_task+0x6f0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	4bba      	ldr	r3, [pc, #744]	; (800381c <esp_task+0x6f0>)
 8003532:	601a      	str	r2, [r3, #0]

                    if (rxbufindex == rxbuflen)
 8003534:	4bb9      	ldr	r3, [pc, #740]	; (800381c <esp_task+0x6f0>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4bb9      	ldr	r3, [pc, #740]	; (8003820 <esp_task+0x6f4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <esp_task+0x424>
                    {
                        timer2 = 1000;
 8003540:	4bb8      	ldr	r3, [pc, #736]	; (8003824 <esp_task+0x6f8>)
 8003542:	22fa      	movs	r2, #250	; 0xfa
 8003544:	0092      	lsls	r2, r2, #2
 8003546:	601a      	str	r2, [r3, #0]
                        taskstate = TS_RXOVFLOW;
 8003548:	4bae      	ldr	r3, [pc, #696]	; (8003804 <esp_task+0x6d8>)
 800354a:	2204      	movs	r2, #4
 800354c:	701a      	strb	r2, [r3, #0]
                        break;
 800354e:	e02e      	b.n	80035ae <esp_task+0x482>
                    }

                    if (tempchar == ',')
 8003550:	1dfb      	adds	r3, r7, #7
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b2c      	cmp	r3, #44	; 0x2c
 8003556:	d103      	bne.n	8003560 <esp_task+0x434>
                    {
                        taskstate = TS_NOTINDDATA;
 8003558:	4baa      	ldr	r3, [pc, #680]	; (8003804 <esp_task+0x6d8>)
 800355a:	2209      	movs	r2, #9
 800355c:	701a      	strb	r2, [r3, #0]
                        break;
 800355e:	e026      	b.n	80035ae <esp_task+0x482>
                    }

                    if ((tempchar < '0') || (tempchar > '9'))
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b2f      	cmp	r3, #47	; 0x2f
 8003566:	d903      	bls.n	8003570 <esp_task+0x444>
 8003568:	1dfb      	adds	r3, r7, #7
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b39      	cmp	r3, #57	; 0x39
 800356e:	d903      	bls.n	8003578 <esp_task+0x44c>
                    {
                        taskstate = TS_MESSAGE;
 8003570:	4ba4      	ldr	r3, [pc, #656]	; (8003804 <esp_task+0x6d8>)
 8003572:	2203      	movs	r2, #3
 8003574:	701a      	strb	r2, [r3, #0]
                        break;
 8003576:	e01a      	b.n	80035ae <esp_task+0x482>
                    }

                    notindcount *= 10;
 8003578:	4bab      	ldr	r3, [pc, #684]	; (8003828 <esp_task+0x6fc>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	1c1a      	adds	r2, r3, #0
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	18d3      	adds	r3, r2, r3
 8003582:	18db      	adds	r3, r3, r3
 8003584:	b29a      	uxth	r2, r3
 8003586:	4ba8      	ldr	r3, [pc, #672]	; (8003828 <esp_task+0x6fc>)
 8003588:	801a      	strh	r2, [r3, #0]
                    notindcount += tempchar - 0x30;
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b29a      	uxth	r2, r3
 8003590:	4ba5      	ldr	r3, [pc, #660]	; (8003828 <esp_task+0x6fc>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b30      	subs	r3, #48	; 0x30
 800359a:	b29a      	uxth	r2, r3
 800359c:	4ba2      	ldr	r3, [pc, #648]	; (8003828 <esp_task+0x6fc>)
 800359e:	801a      	strh	r2, [r3, #0]
                while (rxget != rxput)
 80035a0:	4b99      	ldr	r3, [pc, #612]	; (8003808 <esp_task+0x6dc>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4b99      	ldr	r3, [pc, #612]	; (800380c <esp_task+0x6e0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1a5      	bne.n	80034f8 <esp_task+0x3cc>
                }

                break;
 80035ac:	e123      	b.n	80037f6 <esp_task+0x6ca>
 80035ae:	e122      	b.n	80037f6 <esp_task+0x6ca>
            }

            else
            {

                if (timer1 == 0)
 80035b0:	4b93      	ldr	r3, [pc, #588]	; (8003800 <esp_task+0x6d4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d000      	beq.n	80035ba <esp_task+0x48e>
 80035b8:	e116      	b.n	80037e8 <esp_task+0x6bc>
                {
                    taskstate = TS_TIMEOUT;
 80035ba:	4b92      	ldr	r3, [pc, #584]	; (8003804 <esp_task+0x6d8>)
 80035bc:	2206      	movs	r2, #6
 80035be:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80035c0:	e112      	b.n	80037e8 <esp_task+0x6bc>


        case TS_NOTINDDATA:
        {

            if (rxget != rxput)
 80035c2:	4b91      	ldr	r3, [pc, #580]	; (8003808 <esp_task+0x6dc>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b91      	ldr	r3, [pc, #580]	; (800380c <esp_task+0x6e0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d043      	beq.n	8003656 <esp_task+0x52a>
            {
                set_timer(rxtimeout);
 80035ce:	4b90      	ldr	r3, [pc, #576]	; (8003810 <esp_task+0x6e4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 fa48 	bl	8003a68 <set_timer>

                while (rxget != rxput)
 80035d8:	e035      	b.n	8003646 <esp_task+0x51a>
                {

                    if (notindcount == 0)
 80035da:	4b93      	ldr	r3, [pc, #588]	; (8003828 <esp_task+0x6fc>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <esp_task+0x4be>
                    {
                        taskstate = TS_NOTINDEND;
 80035e2:	4b88      	ldr	r3, [pc, #544]	; (8003804 <esp_task+0x6d8>)
 80035e4:	220a      	movs	r2, #10
 80035e6:	701a      	strb	r2, [r3, #0]
                        break;
 80035e8:	e034      	b.n	8003654 <esp_task+0x528>
                    }

                    tempchar = rxintbuf[rxget];
 80035ea:	4b87      	ldr	r3, [pc, #540]	; (8003808 <esp_task+0x6dc>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	1dfb      	adds	r3, r7, #7
 80035f0:	4988      	ldr	r1, [pc, #544]	; (8003814 <esp_task+0x6e8>)
 80035f2:	5c8a      	ldrb	r2, [r1, r2]
 80035f4:	701a      	strb	r2, [r3, #0]
                    rxget++;
 80035f6:	4b84      	ldr	r3, [pc, #528]	; (8003808 <esp_task+0x6dc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	4b82      	ldr	r3, [pc, #520]	; (8003808 <esp_task+0x6dc>)
 80035fe:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 8003600:	4b81      	ldr	r3, [pc, #516]	; (8003808 <esp_task+0x6dc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	0dda      	lsrs	r2, r3, #23
 8003608:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <esp_task+0x6dc>)
 800360a:	601a      	str	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = tempchar;
 800360c:	4b82      	ldr	r3, [pc, #520]	; (8003818 <esp_task+0x6ec>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b82      	ldr	r3, [pc, #520]	; (800381c <esp_task+0x6f0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	1dfa      	adds	r2, r7, #7
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 800361c:	4b7f      	ldr	r3, [pc, #508]	; (800381c <esp_task+0x6f0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	4b7e      	ldr	r3, [pc, #504]	; (800381c <esp_task+0x6f0>)
 8003624:	601a      	str	r2, [r3, #0]
                    notindcount--;
 8003626:	4b80      	ldr	r3, [pc, #512]	; (8003828 <esp_task+0x6fc>)
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <esp_task+0x6fc>)
 8003630:	801a      	strh	r2, [r3, #0]

                    if (rxbufindex == rxbuflen)
 8003632:	4b7a      	ldr	r3, [pc, #488]	; (800381c <esp_task+0x6f0>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b7a      	ldr	r3, [pc, #488]	; (8003820 <esp_task+0x6f4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d103      	bne.n	8003646 <esp_task+0x51a>
                    {
                        taskstate = TS_NOTINDEND;
 800363e:	4b71      	ldr	r3, [pc, #452]	; (8003804 <esp_task+0x6d8>)
 8003640:	220a      	movs	r2, #10
 8003642:	701a      	strb	r2, [r3, #0]
                        break;
 8003644:	e006      	b.n	8003654 <esp_task+0x528>
                while (rxget != rxput)
 8003646:	4b70      	ldr	r3, [pc, #448]	; (8003808 <esp_task+0x6dc>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b70      	ldr	r3, [pc, #448]	; (800380c <esp_task+0x6e0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d1c3      	bne.n	80035da <esp_task+0x4ae>
                    }

                }

                break;
 8003652:	e0d0      	b.n	80037f6 <esp_task+0x6ca>
 8003654:	e0cf      	b.n	80037f6 <esp_task+0x6ca>
            }

            else
            {

                if (timer1 == 0)
 8003656:	4b6a      	ldr	r3, [pc, #424]	; (8003800 <esp_task+0x6d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d000      	beq.n	8003660 <esp_task+0x534>
 800365e:	e0c5      	b.n	80037ec <esp_task+0x6c0>
                {
                    taskstate = TS_TIMEOUT;
 8003660:	4b68      	ldr	r3, [pc, #416]	; (8003804 <esp_task+0x6d8>)
 8003662:	2206      	movs	r2, #6
 8003664:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 8003666:	e0c1      	b.n	80037ec <esp_task+0x6c0>


        case TS_NOTINDEND:
        {

taskstate = TS_COMPL;
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <esp_task+0x6d8>)
 800366a:	2205      	movs	r2, #5
 800366c:	701a      	strb	r2, [r3, #0]
break;
 800366e:	e0c2      	b.n	80037f6 <esp_task+0x6ca>



        case TS_COMPL:
        {
            input_busy = 0;
 8003670:	4b6e      	ldr	r3, [pc, #440]	; (800382c <esp_task+0x700>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
            input_status = QS_OK;
 8003676:	4b6e      	ldr	r3, [pc, #440]	; (8003830 <esp_task+0x704>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
            taskstate = TS_IDLE;
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <esp_task+0x6d8>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
            rxbufaddr[rxbufindex] = 0x00;
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <esp_task+0x6ec>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <esp_task+0x6f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
//            debug_printf(DBGLVL_MAX, (uint8_t *)"ESP IN: %d, %s\r\n", rxbufindex, rxbufaddr);

            if (rxcomplih != NULL)
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <esp_task+0x708>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <esp_task+0x56e>
 8003698:	e0aa      	b.n	80037f0 <esp_task+0x6c4>
            {
                rxcomplih(input_status, rxbufindex);
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <esp_task+0x708>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b64      	ldr	r3, [pc, #400]	; (8003830 <esp_task+0x704>)
 80036a0:	7818      	ldrb	r0, [r3, #0]
 80036a2:	4b5e      	ldr	r3, [pc, #376]	; (800381c <esp_task+0x6f0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0019      	movs	r1, r3
 80036a8:	4790      	blx	r2
            }

            break;
 80036aa:	e0a1      	b.n	80037f0 <esp_task+0x6c4>
        }

        case TS_RXOVFLOW:
        {

            if (rxget != rxput)
 80036ac:	4b56      	ldr	r3, [pc, #344]	; (8003808 <esp_task+0x6dc>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b56      	ldr	r3, [pc, #344]	; (800380c <esp_task+0x6e0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d049      	beq.n	800374c <esp_task+0x620>
            {
                set_timer(rxtimeout);
 80036b8:	4b55      	ldr	r3, [pc, #340]	; (8003810 <esp_task+0x6e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f9d3 	bl	8003a68 <set_timer>
                tempchar = rxintbuf[rxget];
 80036c2:	4b51      	ldr	r3, [pc, #324]	; (8003808 <esp_task+0x6dc>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	4952      	ldr	r1, [pc, #328]	; (8003814 <esp_task+0x6e8>)
 80036ca:	5c8a      	ldrb	r2, [r1, r2]
 80036cc:	701a      	strb	r2, [r3, #0]
                rxget++;
 80036ce:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <esp_task+0x6dc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <esp_task+0x6dc>)
 80036d6:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 80036d8:	4b4b      	ldr	r3, [pc, #300]	; (8003808 <esp_task+0x6dc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	05db      	lsls	r3, r3, #23
 80036de:	0dda      	lsrs	r2, r3, #23
 80036e0:	4b49      	ldr	r3, [pc, #292]	; (8003808 <esp_task+0x6dc>)
 80036e2:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b0d      	cmp	r3, #13
 80036ea:	d115      	bne.n	8003718 <esp_task+0x5ec>
                {
                    input_status = QS_OVERFLOW;
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <esp_task+0x704>)
 80036ee:	2203      	movs	r2, #3
 80036f0:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 80036f2:	4b50      	ldr	r3, [pc, #320]	; (8003834 <esp_task+0x708>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <esp_task+0x5de>
                    {
                        rxcomplih(input_status, rxbufindex);
 80036fa:	4b4e      	ldr	r3, [pc, #312]	; (8003834 <esp_task+0x708>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <esp_task+0x704>)
 8003700:	7818      	ldrb	r0, [r3, #0]
 8003702:	4b46      	ldr	r3, [pc, #280]	; (800381c <esp_task+0x6f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	0019      	movs	r1, r3
 8003708:	4790      	blx	r2
                    }

                    input_busy = 0;
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <esp_task+0x700>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8003710:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <esp_task+0x6d8>)
 8003712:	2201      	movs	r2, #1
 8003714:	701a      	strb	r2, [r3, #0]
                    break;
 8003716:	e06e      	b.n	80037f6 <esp_task+0x6ca>
                }

                if (timer2 == 0)
 8003718:	4b42      	ldr	r3, [pc, #264]	; (8003824 <esp_task+0x6f8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d169      	bne.n	80037f4 <esp_task+0x6c8>
                {
                    input_status = QS_STREAMING;
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <esp_task+0x704>)
 8003722:	2205      	movs	r2, #5
 8003724:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 8003726:	4b43      	ldr	r3, [pc, #268]	; (8003834 <esp_task+0x708>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <esp_task+0x612>
                    {
                        rxcomplih(input_status, rxbufindex);
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <esp_task+0x708>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <esp_task+0x704>)
 8003734:	7818      	ldrb	r0, [r3, #0]
 8003736:	4b39      	ldr	r3, [pc, #228]	; (800381c <esp_task+0x6f0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	0019      	movs	r1, r3
 800373c:	4790      	blx	r2
                    }

                    input_busy = 0;
 800373e:	4b3b      	ldr	r3, [pc, #236]	; (800382c <esp_task+0x700>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <esp_task+0x6d8>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
                    break;
 800374a:	e054      	b.n	80037f6 <esp_task+0x6ca>
            }

            else
            {

            	if (timer1 == 0)
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <esp_task+0x6d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d14f      	bne.n	80037f4 <esp_task+0x6c8>
            	{
                    input_status = QS_OVERFLOW;
 8003754:	4b36      	ldr	r3, [pc, #216]	; (8003830 <esp_task+0x704>)
 8003756:	2203      	movs	r2, #3
 8003758:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <esp_task+0x708>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <esp_task+0x646>
                    {
                        rxcomplih(input_status, rxbufindex);
 8003762:	4b34      	ldr	r3, [pc, #208]	; (8003834 <esp_task+0x708>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b32      	ldr	r3, [pc, #200]	; (8003830 <esp_task+0x704>)
 8003768:	7818      	ldrb	r0, [r3, #0]
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <esp_task+0x6f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0019      	movs	r1, r3
 8003770:	4790      	blx	r2
                    }

                    input_busy = 0;
 8003772:	4b2e      	ldr	r3, [pc, #184]	; (800382c <esp_task+0x700>)
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <esp_task+0x6d8>)
 800377a:	2201      	movs	r2, #1
 800377c:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 800377e:	e039      	b.n	80037f4 <esp_task+0x6c8>
        }


        case TS_TIMEOUT:
        {
            input_busy = 0;
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <esp_task+0x700>)
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
            input_status = QS_TIMEOUT;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <esp_task+0x704>)
 8003788:	2204      	movs	r2, #4
 800378a:	701a      	strb	r2, [r3, #0]
            rxbufaddr[rxbufindex] = 0;
 800378c:	4b22      	ldr	r3, [pc, #136]	; (8003818 <esp_task+0x6ec>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <esp_task+0x6f0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
            debug_printf(DBGLVL_MAX, (uint8_t *)"ESP IN: %d, %s\r\n", rxbufindex, rxbufaddr);
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <esp_task+0x6f0>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <esp_task+0x6ec>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4925      	ldr	r1, [pc, #148]	; (8003838 <esp_task+0x70c>)
 80037a4:	2004      	movs	r0, #4
 80037a6:	f7fe ffd5 	bl	8002754 <debug_printf>

            if (rxcomplih != NULL)
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <esp_task+0x708>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <esp_task+0x696>
            {
                rxcomplih(input_status, rxbufindex);
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <esp_task+0x708>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <esp_task+0x704>)
 80037b8:	7818      	ldrb	r0, [r3, #0]
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <esp_task+0x6f0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0019      	movs	r1, r3
 80037c0:	4790      	blx	r2
            }

            taskstate = TS_IDLE;
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <esp_task+0x6d8>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
            break;
 80037c8:	e015      	b.n	80037f6 <esp_task+0x6ca>
        }

        default:
        {
            crash();
 80037ca:	f7fd fa39 	bl	8000c40 <crash>
        }

    }

    return;
 80037ce:	e012      	b.n	80037f6 <esp_task+0x6ca>
                break;
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	e010      	b.n	80037f6 <esp_task+0x6ca>
                    break;
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	e00e      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	e00c      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	e00a      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	e008      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	e006      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	e004      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	e002      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	e000      	b.n	80037f6 <esp_task+0x6ca>
            break;
 80037f4:	46c0      	nop			; (mov r8, r8)
    return;
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46c0      	nop			; (mov r8, r8)
}
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b003      	add	sp, #12
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	20000680 	.word	0x20000680
 8003804:	20000671 	.word	0x20000671
 8003808:	20000678 	.word	0x20000678
 800380c:	2000067c 	.word	0x2000067c
 8003810:	20000698 	.word	0x20000698
 8003814:	200006a8 	.word	0x200006a8
 8003818:	200006a0 	.word	0x200006a0
 800381c:	20000690 	.word	0x20000690
 8003820:	20000694 	.word	0x20000694
 8003824:	20000684 	.word	0x20000684
 8003828:	20000676 	.word	0x20000676
 800382c:	20000673 	.word	0x20000673
 8003830:	20000674 	.word	0x20000674
 8003834:	2000069c 	.word	0x2000069c
 8003838:	08013268 	.word	0x08013268

0800383c <esp_transmit>:
 *
 *
 */

uint8_t esp_transmit(uint8_t *obuf, uint16_t olen)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	000a      	movs	r2, r1
 8003846:	1cbb      	adds	r3, r7, #2
 8003848:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;
    uint32_t uartreg;

    debug_printf(DBGLVL_MAX, (uint8_t *)"ESP OUT: ");
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <esp_transmit+0xa4>)
 800384c:	0019      	movs	r1, r3
 800384e:	2004      	movs	r0, #4
 8003850:	f7fe ff80 	bl	8002754 <debug_printf>
    usb_write_fixed(obuf, olen);
 8003854:	1cbb      	adds	r3, r7, #2
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0011      	movs	r1, r2
 800385c:	0018      	movs	r0, r3
 800385e:	f005 fb13 	bl	8008e88 <usb_write_fixed>
    debug_printf(DBGLVL_MAX, (uint8_t *)"\r\n");
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <esp_transmit+0xa8>)
 8003864:	0019      	movs	r1, r3
 8003866:	2004      	movs	r0, #4
 8003868:	f7fe ff74 	bl	8002754 <debug_printf>

    if (olen == 0)
 800386c:	1cbb      	adds	r3, r7, #2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <esp_transmit+0x42>
    {
           retstat = QS_OK;
 8003874:	230f      	movs	r3, #15
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e029      	b.n	80038d2 <esp_transmit+0x96>
    }

    else if (output_busy)
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <esp_transmit+0xac>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <esp_transmit+0x54>
    {
           retstat = QS_TXBUSY;
 8003886:	230f      	movs	r3, #15
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2201      	movs	r2, #1
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e020      	b.n	80038d2 <esp_transmit+0x96>
    }

    else if (obuf == 0)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <esp_transmit+0x60>
    {
        crash();
 8003896:	f7fd f9d3 	bl	8000c40 <crash>
 800389a:	e01a      	b.n	80038d2 <esp_transmit+0x96>
    }

    else
    {
        output_busy = 1;
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <esp_transmit+0xac>)
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
        txbufaddr = obuf;
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <esp_transmit+0xb0>)
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	601a      	str	r2, [r3, #0]
        txbuflen = olen;
 80038a8:	1cbb      	adds	r3, r7, #2
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <esp_transmit+0xb4>)
 80038ae:	601a      	str	r2, [r3, #0]
        txbufdex = 0;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <esp_transmit+0xb8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
        uartreg = ESP_UART->CR1;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <esp_transmit+0xbc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60bb      	str	r3, [r7, #8]
        uartreg = uartreg | USART_CR1_TXEIE;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
        ESP_UART->CR1 = uartreg;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <esp_transmit+0xbc>)
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	601a      	str	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 80038ca:	230f      	movs	r3, #15
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2206      	movs	r2, #6
 80038d0:	701a      	strb	r2, [r3, #0]
    }

    return retstat;
 80038d2:	230f      	movs	r3, #15
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	781b      	ldrb	r3, [r3, #0]
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b004      	add	sp, #16
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	0801327c 	.word	0x0801327c
 80038e4:	08013288 	.word	0x08013288
 80038e8:	20000670 	.word	0x20000670
 80038ec:	200006a4 	.word	0x200006a4
 80038f0:	20000688 	.word	0x20000688
 80038f4:	2000068c 	.word	0x2000068c
 80038f8:	40013800 	.word	0x40013800

080038fc <esp_timer_ih>:
 *
 *
 */

void esp_timer_ih(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0

    if (timer1)
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <esp_timer_ih+0x30>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d004      	beq.n	8003912 <esp_timer_ih+0x16>
    {
        timer1--;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <esp_timer_ih+0x30>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <esp_timer_ih+0x30>)
 8003910:	601a      	str	r2, [r3, #0]
    }

    if (timer2)
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <esp_timer_ih+0x34>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <esp_timer_ih+0x2a>
    {
        timer2--;
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <esp_timer_ih+0x34>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1e5a      	subs	r2, r3, #1
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <esp_timer_ih+0x34>)
 8003922:	601a      	str	r2, [r3, #0]
    }

    return;
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46c0      	nop			; (mov r8, r8)
}
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000680 	.word	0x20000680
 8003930:	20000684 	.word	0x20000684

08003934 <esp_uart_ih>:
 *
 *
 */

void esp_uart_ih(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0

    uint16_t inchar;
    uint32_t intstat;
    uint32_t cr1reg;

    cr1reg = ESP_UART->CR1;
 800393a:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <esp_uart_ih+0x10c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
    intstat = ESP_UART->ISR;
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <esp_uart_ih+0x10c>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	60bb      	str	r3, [r7, #8]

    if (intstat & USART_ISR_RXNE)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2220      	movs	r2, #32
 800394a:	4013      	ands	r3, r2
 800394c:	d020      	beq.n	8003990 <esp_uart_ih+0x5c>
    {
        inchar = ESP_UART->RDR;
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <esp_uart_ih+0x10c>)
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003954:	801a      	strh	r2, [r3, #0]
        rxintbuf[rxput] = (uint8_t)inchar;
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <esp_uart_ih+0x110>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1dba      	adds	r2, r7, #6
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	b2d1      	uxtb	r1, r2
 8003960:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <esp_uart_ih+0x114>)
 8003962:	54d1      	strb	r1, [r2, r3]
        rxput++;
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <esp_uart_ih+0x110>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <esp_uart_ih+0x110>)
 800396c:	601a      	str	r2, [r3, #0]
        rxput &= RXINTBUFLEN - 1;
 800396e:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <esp_uart_ih+0x110>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	05db      	lsls	r3, r3, #23
 8003974:	0dda      	lsrs	r2, r3, #23
 8003976:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <esp_uart_ih+0x110>)
 8003978:	601a      	str	r2, [r3, #0]

        if (rxput == rxget)
 800397a:	4b32      	ldr	r3, [pc, #200]	; (8003a44 <esp_uart_ih+0x110>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <esp_uart_ih+0x118>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d157      	bne.n	8003a36 <esp_uart_ih+0x102>
        {
            rxput = rxget;
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <esp_uart_ih+0x118>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <esp_uart_ih+0x110>)
 800398c:	601a      	str	r2, [r3, #0]
        }

        return;
 800398e:	e052      	b.n	8003a36 <esp_uart_ih+0x102>
    }


    if ((intstat & USART_ISR_TXE) && (cr1reg & USART_CR1_TXEIE))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	4013      	ands	r3, r2
 8003996:	d027      	beq.n	80039e8 <esp_uart_ih+0xb4>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	4013      	ands	r3, r2
 800399e:	d023      	beq.n	80039e8 <esp_uart_ih+0xb4>
    {

        if (txbufdex == (txbuflen - 1))
 80039a0:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <esp_uart_ih+0x11c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <esp_uart_ih+0x120>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d10d      	bne.n	80039ca <esp_uart_ih+0x96>
        {
            cr1reg = ESP_UART->CR1;
 80039ae:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <esp_uart_ih+0x10c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]
            cr1reg &= ~USART_CR1_TXEIE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	4393      	bics	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
            cr1reg |= USART_CR1_TCIE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2240      	movs	r2, #64	; 0x40
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
            ESP_UART->CR1 = cr1reg;
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <esp_uart_ih+0x10c>)
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]
        }

        ESP_UART->TDR = txbufaddr[txbufdex];
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <esp_uart_ih+0x124>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <esp_uart_ih+0x120>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	18d3      	adds	r3, r2, r3
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <esp_uart_ih+0x10c>)
 80039d8:	b292      	uxth	r2, r2
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
        txbufdex++;
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <esp_uart_ih+0x120>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <esp_uart_ih+0x120>)
 80039e4:	601a      	str	r2, [r3, #0]



        return;
 80039e6:	e027      	b.n	8003a38 <esp_uart_ih+0x104>
    }

    if ((intstat & USART_ISR_TC) && (cr1reg & USART_CR1_TCIE))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	4013      	ands	r3, r2
 80039ee:	d014      	beq.n	8003a1a <esp_uart_ih+0xe6>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	4013      	ands	r3, r2
 80039f6:	d010      	beq.n	8003a1a <esp_uart_ih+0xe6>
    {
        output_busy = 0;
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <esp_uart_ih+0x128>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
        cr1reg = ESP_UART->CR1;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]
        cr1reg &= ~USART_CR1_TCIE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	4393      	bics	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
        ESP_UART->CR1 = cr1reg;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]
        ESP_UART->ICR = USART_ICR_TCCF;
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a14:	2240      	movs	r2, #64	; 0x40
 8003a16:	621a      	str	r2, [r3, #32]
        return;
 8003a18:	e00e      	b.n	8003a38 <esp_uart_ih+0x104>
    }

    cr1reg = ESP_UART->CR1;
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]
    cr1reg &= ~(USART_CR1_IDLEIE | USART_CR1_PEIE | USART_CR1_CMIE | USART_CR1_RTOIE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <esp_uart_ih+0x12c>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    ESP_UART->CR1 = cr1reg;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
    ESP_UART->ICR = 0x0002055F;
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <esp_uart_ih+0x10c>)
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <esp_uart_ih+0x130>)
 8003a32:	621a      	str	r2, [r3, #32]
    return;
 8003a34:	e000      	b.n	8003a38 <esp_uart_ih+0x104>
        return;
 8003a36:	46c0      	nop			; (mov r8, r8)
}
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	40013800 	.word	0x40013800
 8003a44:	2000067c 	.word	0x2000067c
 8003a48:	200006a8 	.word	0x200006a8
 8003a4c:	20000678 	.word	0x20000678
 8003a50:	20000688 	.word	0x20000688
 8003a54:	2000068c 	.word	0x2000068c
 8003a58:	200006a4 	.word	0x200006a4
 8003a5c:	20000670 	.word	0x20000670
 8003a60:	fbffbeef 	.word	0xfbffbeef
 8003a64:	0002055f 	.word	0x0002055f

08003a68 <set_timer>:
 *
 *
 */

static void set_timer(uint32_t newtime)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a70:	b672      	cpsid	i
}
 8003a72:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    timer1 = newtime;
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <set_timer+0x20>)
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7a:	b662      	cpsie	i
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
    return;
 8003a7e:	46c0      	nop			; (mov r8, r8)
}
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	20000680 	.word	0x20000680

08003a8c <espat_answer>:
 *
 * return - none
 */

uint8_t espat_answer(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
    return callanswer;
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <espat_answer+0x10>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	200008a9 	.word	0x200008a9

08003aa0 <espat_init>:
 *
 * return - none
 */

void espat_init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
    uint32_t i;

    esp_stmachine.sms_stable = (S_TABLE **)&state_table;
 8003aa6:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <espat_init+0x8c>)
 8003aa8:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <espat_init+0x90>)
 8003aaa:	601a      	str	r2, [r3, #0]
    esp_stmachine.sms_curstate = S_INIT;
 8003aac:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <espat_init+0x8c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	605a      	str	r2, [r3, #4]
    esp_stmachine.sms_debug = &state_trace;
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <espat_init+0x8c>)
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <espat_init+0x94>)
 8003ab6:	609a      	str	r2, [r3, #8]
    oldstate = S_INIT;
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <espat_init+0x98>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    callanswer = CA_NONE;
 8003abe:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <espat_init+0x9c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <espat_init+0xa0>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
    respcount = 0;
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <espat_init+0xa4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < METERMODEL_LEN; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	e007      	b.n	8003ae6 <espat_init+0x46>
    {
        meter_model[i] = 0x00;
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <espat_init+0xa8>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	18d3      	adds	r3, r2, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < METERMODEL_LEN; i++)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	d9f4      	bls.n	8003ad6 <espat_init+0x36>
    }

    for (i = 0; i < METERSERIAL_LEN; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	e007      	b.n	8003b02 <espat_init+0x62>
    {
        meter_serial_no[i] = 0x00;
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <espat_init+0xac>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	18d3      	adds	r3, r2, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < METERSERIAL_LEN; i++)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b13      	cmp	r3, #19
 8003b06:	d9f4      	bls.n	8003af2 <espat_init+0x52>
    }

    for (i = 0; i < 18; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	e007      	b.n	8003b1e <espat_init+0x7e>
    {
        ble_available_device[i] = 0x00;
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <espat_init+0xb0>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	18d3      	adds	r3, r2, r3
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 18; i++)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b11      	cmp	r3, #17
 8003b22:	d9f4      	bls.n	8003b0e <espat_init+0x6e>
    }

    return;
 8003b24:	46c0      	nop			; (mov r8, r8)
}
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20001fa4 	.word	0x20001fa4
 8003b30:	08015494 	.word	0x08015494
 8003b34:	08004f1d 	.word	0x08004f1d
 8003b38:	200008b8 	.word	0x200008b8
 8003b3c:	200008a9 	.word	0x200008a9
 8003b40:	200008aa 	.word	0x200008aa
 8003b44:	200008ab 	.word	0x200008ab
 8003b48:	2000127c 	.word	0x2000127c
 8003b4c:	20001e68 	.word	0x20001e68
 8003b50:	20001dac 	.word	0x20001dac

08003b54 <espat_request>:
 *
 * return - none
 */

void espat_request(uint8_t req)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	701a      	strb	r2, [r3, #0]
    callrequest = req;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <espat_request+0x24>)
 8003b62:	1dfa      	adds	r2, r7, #7
 8003b64:	7812      	ldrb	r2, [r2, #0]
 8003b66:	701a      	strb	r2, [r3, #0]
    callanswer = CA_INPROGRESS;
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <espat_request+0x28>)
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	701a      	strb	r2, [r3, #0]
    return;
 8003b6e:	46c0      	nop			; (mov r8, r8)
}
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b002      	add	sp, #8
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	200008aa 	.word	0x200008aa
 8003b7c:	200008a9 	.word	0x200008a9

08003b80 <espat_timer_ih>:
 *
 * return - none
 */

void espat_timer_ih()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0

    if (timer)
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <espat_timer_ih+0x20>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <espat_timer_ih+0x18>
    {
        timer--;
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <espat_timer_ih+0x20>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <espat_timer_ih+0x20>)
 8003b94:	601a      	str	r2, [r3, #0]
    }

    return;
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46c0      	nop			; (mov r8, r8)
}
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	200008b4 	.word	0x200008b4

08003ba4 <e_always>:
 *                            --------
 *
 */

static uint32_t e_always(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
    return 1;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <e_gotmeter>:
 *                            --------
 *
 */

static uint32_t e_gotmeter(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
    return ble_available_device[0] != 0x00;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <e_gotmeter+0x14>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	1e5a      	subs	r2, r3, #1
 8003bba:	4193      	sbcs	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20001dac 	.word	0x20001dac

08003bc8 <e_gotmymeter>:
 *                            --------
 *
 */

static uint32_t e_gotmymeter(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
    uint32_t i;
    uint32_t stat;

    stat = 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]

    if ((ble_paired_device[0] == 0x00) || (ble_paired_device == 0xFF))
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <e_gotmymeter+0x54>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <e_gotmymeter+0x18>
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <e_gotmymeter+0x54>)
 8003bdc:	2bff      	cmp	r3, #255	; 0xff
 8003bde:	d102      	bne.n	8003be6 <e_gotmymeter+0x1e>
    {
        stat = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	e015      	b.n	8003c12 <e_gotmymeter+0x4a>
    }

    else
    {

        for(i = 0; i < 17; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e00f      	b.n	8003c0c <e_gotmymeter+0x44>
        {

            if (ble_available_device[i] != ble_paired_device[i])
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <e_gotmymeter+0x58>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	18d3      	adds	r3, r2, r3
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4909      	ldr	r1, [pc, #36]	; (8003c1c <e_gotmymeter+0x54>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	18cb      	adds	r3, r1, r3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d002      	beq.n	8003c06 <e_gotmymeter+0x3e>
            {
                stat = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	603b      	str	r3, [r7, #0]
                break;
 8003c04:	e005      	b.n	8003c12 <e_gotmymeter+0x4a>
        for(i = 0; i < 17; i++)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d9ec      	bls.n	8003bec <e_gotmymeter+0x24>

        }

    }

    return stat;
 8003c12:	683b      	ldr	r3, [r7, #0]
}
 8003c14:	0018      	movs	r0, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b002      	add	sp, #8
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20001e2c 	.word	0x20001e2c
 8003c20:	20001dac 	.word	0x20001dac

08003c24 <e_morerecs>:
 *                            ------
 *
 */

static uint32_t e_morerecs(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (record_count > counter)
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <e_morerecs+0x28>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	001a      	movs	r2, r3
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <e_morerecs+0x2c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d902      	bls.n	8003c3e <e_morerecs+0x1a>
    {
        stat = 1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	e001      	b.n	8003c42 <e_morerecs+0x1e>
    }

    else
    {
        stat = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003c42:	687b      	ldr	r3, [r7, #4]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200008ac 	.word	0x200008ac
 8003c50:	200008bc 	.word	0x200008bc

08003c54 <e_rcvbusy>:
 *                            --------
 *
 */

static uint32_t e_rcvbusy(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0

   if (rcv_status == QS_INPROGRESS)
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <e_rcvbusy+0x18>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d101      	bne.n	8003c64 <e_rcvbusy+0x10>
   {
       return 1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <e_rcvbusy+0x12>
   }

   return 0;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200008a8 	.word	0x200008a8

08003c70 <e_rcverr>:
 *                            --------
 *
 */

static uint32_t e_rcverr(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0

   if ((rcv_status != QS_INPROGRESS) && (rcv_status != QS_OK))
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <e_rcverr+0x30>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b06      	cmp	r3, #6
 8003c7a:	d00d      	beq.n	8003c98 <e_rcverr+0x28>
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <e_rcverr+0x30>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <e_rcverr+0x28>
   {
       debug_printf(DBGLVL_MAX, (uint8_t *)"ESPAT RCV STAT: %d\r\n", rcv_status);
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <e_rcverr+0x30>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	001a      	movs	r2, r3
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <e_rcverr+0x34>)
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	2004      	movs	r0, #4
 8003c90:	f7fe fd60 	bl	8002754 <debug_printf>
       return 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <e_rcverr+0x2a>
   }

   return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200008a8 	.word	0x200008a8
 8003ca4:	0801328c 	.word	0x0801328c

08003ca8 <e_rcvok>:
 *                            -------
 *
 */

static uint32_t e_rcvok(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
   return rcv_status == QS_OK;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <e_rcvok+0x14>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	425a      	negs	r2, r3
 8003cb2:	4153      	adcs	r3, r2
 8003cb4:	b2db      	uxtb	r3, r3
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200008a8 	.word	0x200008a8

08003cc0 <e_rcvtimout>:
 *                            -----------
 *
 */

static uint32_t e_rcvtimout(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
   return rcv_status == QS_TIMEOUT;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <e_rcvtimout+0x18>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	425a      	negs	r2, r3
 8003ccc:	4153      	adcs	r3, r2
 8003cce:	b2db      	uxtb	r3, r3
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	200008a8 	.word	0x200008a8

08003cdc <e_reqapmode>:
 *                            -----------
 *
 */

static uint32_t e_reqapmode(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_APMODE)
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <e_reqapmode+0x28>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d105      	bne.n	8003cf6 <e_reqapmode+0x1a>
    {
        callrequest = CR_NONE;
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <e_reqapmode+0x28>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e001      	b.n	8003cfa <e_reqapmode+0x1e>
    }

    else
    {
        stat = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003cfa:	687b      	ldr	r3, [r7, #4]
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200008aa 	.word	0x200008aa

08003d08 <e_reqconnect>:
 *                            -----------
 *
 */

static uint32_t e_reqconnect(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_CONNECT)
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <e_reqconnect+0x28>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d105      	bne.n	8003d22 <e_reqconnect+0x1a>
    {
        callrequest = CR_NONE;
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <e_reqconnect+0x28>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	e001      	b.n	8003d26 <e_reqconnect+0x1e>
    }

    else
    {
        stat = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003d26:	687b      	ldr	r3, [r7, #4]
}
 8003d28:	0018      	movs	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	200008aa 	.word	0x200008aa

08003d34 <e_reqnone>:
 *                            -----------
 *
 */

static uint32_t e_reqnone(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
    return callrequest == CR_NONE;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <e_reqnone+0x14>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	425a      	negs	r2, r3
 8003d3e:	4153      	adcs	r3, r2
 8003d40:	b2db      	uxtb	r3, r3
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200008aa 	.word	0x200008aa

08003d4c <e_reqpower>:
 *                            -----------
 *
 */

static uint32_t e_reqpower(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_POWERUP)
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <e_reqpower+0x28>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <e_reqpower+0x1a>
    {
        callrequest = CR_NONE;
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <e_reqpower+0x28>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8003d60:	2301      	movs	r3, #1
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e001      	b.n	8003d6a <e_reqpower+0x1e>
    }

    else
    {
        stat = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003d6a:	687b      	ldr	r3, [r7, #4]
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200008aa 	.word	0x200008aa

08003d78 <e_reqpwrdown>:
 *                            -----------
 *
 */

static uint32_t e_reqpwrdown(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_POWERDOWN)
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <e_reqpwrdown+0x28>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d105      	bne.n	8003d92 <e_reqpwrdown+0x1a>
    {
        callrequest = CR_NONE;
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <e_reqpwrdown+0x28>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e001      	b.n	8003d96 <e_reqpwrdown+0x1e>
    }

    else
    {
        stat = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003d96:	687b      	ldr	r3, [r7, #4]
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200008aa 	.word	0x200008aa

08003da4 <e_reqsendrecs>:
 *                            -----------
 *
 */

static uint32_t e_reqsendrecs(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_SENDRECORDS)
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <e_reqsendrecs+0x28>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b07      	cmp	r3, #7
 8003db0:	d105      	bne.n	8003dbe <e_reqsendrecs+0x1a>
    {
        callrequest = CR_NONE;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <e_reqsendrecs+0x28>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	e001      	b.n	8003dc2 <e_reqsendrecs+0x1e>
    }

    else
    {
        stat = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003dc2:	687b      	ldr	r3, [r7, #4]
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200008aa 	.word	0x200008aa

08003dd0 <e_rxate0>:
 *
 */


static uint32_t e_rxate0(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0

    if ((rcv_count >= 4) && (rcv_buffer[0] == 'A') && (rcv_buffer[2] == 'E'))
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <e_rxate0+0x28>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d909      	bls.n	8003df0 <e_rxate0+0x20>
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <e_rxate0+0x2c>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b41      	cmp	r3, #65	; 0x41
 8003de2:	d105      	bne.n	8003df0 <e_rxate0+0x20>
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <e_rxate0+0x2c>)
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	2b45      	cmp	r3, #69	; 0x45
 8003dea:	d101      	bne.n	8003df0 <e_rxate0+0x20>
    {
        return 1;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <e_rxate0+0x22>
    }

    return 0;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200008b0 	.word	0x200008b0
 8003dfc:	200008c0 	.word	0x200008c0

08003e00 <e_rxauthcpl>:
 *                            --------
 *
 */

static uint32_t e_rxauthcpl(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]

    if ((meter_model[0] == '9') && (meter_model[1] == '2') && (meter_model[2] == '3') && (meter_model[3] == 0x00))
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <e_rxauthcpl+0x58>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b39      	cmp	r3, #57	; 0x39
 8003e10:	d114      	bne.n	8003e3c <e_rxauthcpl+0x3c>
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <e_rxauthcpl+0x58>)
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b32      	cmp	r3, #50	; 0x32
 8003e18:	d110      	bne.n	8003e3c <e_rxauthcpl+0x3c>
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <e_rxauthcpl+0x58>)
 8003e1c:	789b      	ldrb	r3, [r3, #2]
 8003e1e:	2b33      	cmp	r3, #51	; 0x33
 8003e20:	d10c      	bne.n	8003e3c <e_rxauthcpl+0x3c>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <e_rxauthcpl+0x58>)
 8003e24:	78db      	ldrb	r3, [r3, #3]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <e_rxauthcpl+0x3c>
    {
        stat = compare(1, (uint8_t *)"BLECONNPARAM:0,16", 17);
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <e_rxauthcpl+0x5c>)
 8003e2c:	2211      	movs	r2, #17
 8003e2e:	0019      	movs	r1, r3
 8003e30:	2001      	movs	r0, #1
 8003e32:	f001 f835 	bl	8004ea0 <compare>
 8003e36:	0003      	movs	r3, r0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	e007      	b.n	8003e4c <e_rxauthcpl+0x4c>
    }

    else
    {
        stat = compare(1, (uint8_t *)"BLEAUTHCMPL:0,0", 15);
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <e_rxauthcpl+0x60>)
 8003e3e:	220f      	movs	r2, #15
 8003e40:	0019      	movs	r1, r3
 8003e42:	2001      	movs	r0, #1
 8003e44:	f001 f82c 	bl	8004ea0 <compare>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	2000127c 	.word	0x2000127c
 8003e5c:	080132a4 	.word	0x080132a4
 8003e60:	080132b8 	.word	0x080132b8

08003e64 <e_rxblegetc>:
 *                            ------
 *
 */

static uint32_t e_rxblegetc(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"BLEGATTCCHAR", 12);
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <e_rxblegetc+0x20>)
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	0019      	movs	r1, r3
 8003e70:	2001      	movs	r0, #1
 8003e72:	f001 f815 	bl	8004ea0 <compare>
 8003e76:	0003      	movs	r3, r0
 8003e78:	607b      	str	r3, [r7, #4]
    return stat;
 8003e7a:	687b      	ldr	r3, [r7, #4]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	080132c8 	.word	0x080132c8

08003e88 <e_rxclose>:
 *                            ----------
 *
 */

static uint32_t e_rxclose(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)",CLOSE", 6);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <e_rxclose+0x20>)
 8003e90:	2206      	movs	r2, #6
 8003e92:	0019      	movs	r1, r3
 8003e94:	2001      	movs	r0, #1
 8003e96:	f001 f803 	bl	8004ea0 <compare>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	607b      	str	r3, [r7, #4]
    return stat;
 8003e9e:	687b      	ldr	r3, [r7, #4]
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	080132d8 	.word	0x080132d8

08003eac <e_rxconnfail>:
 *                            ----------
 *
 */

static uint32_t e_rxconnfail(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"BLECONN:0,-1", 12);
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <e_rxconnfail+0x20>)
 8003eb4:	220c      	movs	r2, #12
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f000 fff1 	bl	8004ea0 <compare>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	607b      	str	r3, [r7, #4]
    return stat;
 8003ec2:	687b      	ldr	r3, [r7, #4]
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	080132e0 	.word	0x080132e0

08003ed0 <e_rxconnect>:
 *                            ----------
 *
 */

static uint32_t e_rxconnect(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)",CONNECT", 8);
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <e_rxconnect+0x20>)
 8003ed8:	2208      	movs	r2, #8
 8003eda:	0019      	movs	r1, r3
 8003edc:	2001      	movs	r0, #1
 8003ede:	f000 ffdf 	bl	8004ea0 <compare>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	607b      	str	r3, [r7, #4]
    return stat;
 8003ee6:	687b      	ldr	r3, [r7, #4]
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	080132f0 	.word	0x080132f0

08003ef4 <e_rxconnok>:
 *                            ----------
 *
 */

static uint32_t e_rxconnok(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
    uint32_t stat;
    uint32_t i;

    stat = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]

    if (rcv_count >= 28)
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <e_rxconnok+0x60>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b1b      	cmp	r3, #27
 8003f04:	d920      	bls.n	8003f48 <e_rxconnok+0x54>
    {
        stat = compare(1, (uint8_t *)"BLECONN:0,", 9);
 8003f06:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <e_rxconnok+0x64>)
 8003f08:	2209      	movs	r2, #9
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 ffc7 	bl	8004ea0 <compare>
 8003f12:	0003      	movs	r3, r0
 8003f14:	607b      	str	r3, [r7, #4]

        if (stat != 0)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d015      	beq.n	8003f48 <e_rxconnok+0x54>
        {

            for (i = 0; i < 17; i++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	e00f      	b.n	8003f42 <e_rxconnok+0x4e>
            {

                if (rcv_buffer[i + 12] != ble_available_device[i])
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <e_rxconnok+0x68>)
 8003f28:	5cd2      	ldrb	r2, [r2, r3]
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <e_rxconnok+0x6c>)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	18cb      	adds	r3, r1, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d002      	beq.n	8003f3c <e_rxconnok+0x48>
                {
                    stat = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
                    break;
 8003f3a:	e005      	b.n	8003f48 <e_rxconnok+0x54>
            for (i = 0; i < 17; i++)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d9ec      	bls.n	8003f22 <e_rxconnok+0x2e>

        }

    }

    return stat;
 8003f48:	687b      	ldr	r3, [r7, #4]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	200008b0 	.word	0x200008b0
 8003f58:	080132fc 	.word	0x080132fc
 8003f5c:	200008c0 	.word	0x200008c0
 8003f60:	20001dac 	.word	0x20001dac

08003f64 <e_rxcr>:
 *                            ------
 *
 */

static uint32_t e_rxcr(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
    uint32_t stat;

    if ((rcv_buffer[0] == 0x0D) || (rcv_buffer[1] == 0x0D))
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <e_rxcr+0x2c>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b0d      	cmp	r3, #13
 8003f70:	d003      	beq.n	8003f7a <e_rxcr+0x16>
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <e_rxcr+0x2c>)
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	2b0d      	cmp	r3, #13
 8003f78:	d102      	bne.n	8003f80 <e_rxcr+0x1c>
    {
        stat = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	607b      	str	r3, [r7, #4]
 8003f7e:	e001      	b.n	8003f84 <e_rxcr+0x20>
    }

    else
    {
        stat = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003f84:	687b      	ldr	r3, [r7, #4]
}
 8003f86:	0018      	movs	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	200008c0 	.word	0x200008c0

08003f94 <e_rxdisconn>:
 *                            ------
 *
 */

static uint32_t e_rxdisconn(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"BLEDISCONN:0,", 12);
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <e_rxdisconn+0x20>)
 8003f9c:	220c      	movs	r2, #12
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f000 ff7d 	bl	8004ea0 <compare>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	607b      	str	r3, [r7, #4]
    return stat;
 8003faa:	687b      	ldr	r3, [r7, #4]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b002      	add	sp, #8
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08013308 	.word	0x08013308

08003fb8 <e_rxerror>:
 *                            ----------
 *
 */

static uint32_t e_rxerror(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"ERROR", 5);
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <e_rxerror+0x20>)
 8003fc0:	2205      	movs	r2, #5
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f000 ff6b 	bl	8004ea0 <compare>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	607b      	str	r3, [r7, #4]
    return stat;
 8003fce:	687b      	ldr	r3, [r7, #4]
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	08013318 	.word	0x08013318

08003fdc <e_rxgdc>:
 *                            ------
 *
 */

static uint32_t e_rxgdc(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]

    if (rcv_count > 1)
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <e_rxgdc+0x2c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d907      	bls.n	8003ffe <e_rxgdc+0x22>
    {
        stat = compare(1, (uint8_t *)"BLEGATTCCHAR:", 13);
 8003fee:	4b07      	ldr	r3, [pc, #28]	; (800400c <e_rxgdc+0x30>)
 8003ff0:	220d      	movs	r2, #13
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f000 ff53 	bl	8004ea0 <compare>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b002      	add	sp, #8
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200008b0 	.word	0x200008b0
 800400c:	08013320 	.word	0x08013320

08004010 <e_rxgt>:
 *                            -----
 *
 */

static uint32_t e_rxgt(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (rcv_buffer[0] == '>')
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <e_rxgt+0x24>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b3e      	cmp	r3, #62	; 0x3e
 800401c:	d102      	bne.n	8004024 <e_rxgt+0x14>
    {
        stat = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e001      	b.n	8004028 <e_rxgt+0x18>
    }

    else
    {
        stat = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b002      	add	sp, #8
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	200008c0 	.word	0x200008c0

08004038 <e_rxmeter>:
 *                            ------
 *
 */

static uint32_t e_rxmeter(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(49, (uint8_t *)"6d65746572", 10);
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <e_rxmeter+0x20>)
 8004040:	220a      	movs	r2, #10
 8004042:	0019      	movs	r1, r3
 8004044:	2031      	movs	r0, #49	; 0x31
 8004046:	f000 ff2b 	bl	8004ea0 <compare>
 800404a:	0003      	movs	r3, r0
 800404c:	607b      	str	r3, [r7, #4]
    return stat;
 800404e:	687b      	ldr	r3, [r7, #4]
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}
 8004058:	08013330 	.word	0x08013330

0800405c <e_rxmodel>:
 *                            ------
 *
 */

static uint32_t e_rxmodel(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]

    if (rcv_count > 1)
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <e_rxmodel+0x2c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d907      	bls.n	800407e <e_rxmodel+0x22>
    {
        stat = compare(1, (uint8_t *)"BLEGATTCRD:", 11);
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <e_rxmodel+0x30>)
 8004070:	220b      	movs	r2, #11
 8004072:	0019      	movs	r1, r3
 8004074:	2001      	movs	r0, #1
 8004076:	f000 ff13 	bl	8004ea0 <compare>
 800407a:	0003      	movs	r3, r0
 800407c:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800407e:	687b      	ldr	r3, [r7, #4]
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}
 8004088:	200008b0 	.word	0x200008b0
 800408c:	0801333c 	.word	0x0801333c

08004090 <e_rxok>:
 *                            ------
 *
 */

static uint32_t e_rxok(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0

    if ((rcv_count == 3) && (rcv_buffer[0] == 'O') && (rcv_buffer[1] == 'K'))
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <e_rxok+0x28>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d109      	bne.n	80040b0 <e_rxok+0x20>
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <e_rxok+0x2c>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b4f      	cmp	r3, #79	; 0x4f
 80040a2:	d105      	bne.n	80040b0 <e_rxok+0x20>
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <e_rxok+0x2c>)
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b4b      	cmp	r3, #75	; 0x4b
 80040aa:	d101      	bne.n	80040b0 <e_rxok+0x20>
    {
        return 1;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <e_rxok+0x22>
    }

    return 0;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	0018      	movs	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200008b0 	.word	0x200008b0
 80040bc:	200008c0 	.word	0x200008c0

080040c0 <e_rxpair>:
 *                            ------
 *
 */

static uint32_t e_rxpair(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]

    if (rcv_count >= 20)
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <e_rxpair+0x2c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b13      	cmp	r3, #19
 80040d0:	d907      	bls.n	80040e2 <e_rxpair+0x22>
    {
        stat = compare(1, (uint8_t *)"IPD,0,13:#PAIR#", 15);
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <e_rxpair+0x30>)
 80040d4:	220f      	movs	r2, #15
 80040d6:	0019      	movs	r1, r3
 80040d8:	2001      	movs	r0, #1
 80040da:	f000 fee1 	bl	8004ea0 <compare>
 80040de:	0003      	movs	r3, r0
 80040e0:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80040e2:	687b      	ldr	r3, [r7, #4]
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	200008b0 	.word	0x200008b0
 80040f0:	08013354 	.word	0x08013354

080040f4 <e_rxprimsvc>:
 *                            ------
 *
 */

static uint32_t e_rxprimsvc(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+BLEGATTCPRIMSRV:0,", 19);
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <e_rxprimsvc+0x20>)
 80040fc:	2213      	movs	r2, #19
 80040fe:	0019      	movs	r1, r3
 8004100:	2000      	movs	r0, #0
 8004102:	f000 fecd 	bl	8004ea0 <compare>
 8004106:	0003      	movs	r3, r0
 8004108:	607b      	str	r3, [r7, #4]
    return stat;
 800410a:	687b      	ldr	r3, [r7, #4]
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08013364 	.word	0x08013364

08004118 <e_rxrdy>:
 *                            -------
 *
 */

static uint32_t e_rxrdy(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0

    if ((rcv_count >= 5) && (rcv_buffer[0] == 'r') && (rcv_buffer[1] == 'e') && (rcv_buffer[2] == 'a'))
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <e_rxrdy+0x30>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d90d      	bls.n	8004140 <e_rxrdy+0x28>
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <e_rxrdy+0x34>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b72      	cmp	r3, #114	; 0x72
 800412a:	d109      	bne.n	8004140 <e_rxrdy+0x28>
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <e_rxrdy+0x34>)
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b65      	cmp	r3, #101	; 0x65
 8004132:	d105      	bne.n	8004140 <e_rxrdy+0x28>
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <e_rxrdy+0x34>)
 8004136:	789b      	ldrb	r3, [r3, #2]
 8004138:	2b61      	cmp	r3, #97	; 0x61
 800413a:	d101      	bne.n	8004140 <e_rxrdy+0x28>
    {
        return 1;
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <e_rxrdy+0x2a>
    }

    return 0;
 8004140:	2300      	movs	r3, #0
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200008b0 	.word	0x200008b0
 800414c:	200008c0 	.word	0x200008c0

08004150 <e_rxreccnt>:
 *                            ------
 *
 */

static uint32_t e_rxreccnt(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"INDICATE:0,2,3,4,", 17);
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <e_rxreccnt+0x34>)
 8004158:	2211      	movs	r2, #17
 800415a:	0019      	movs	r1, r3
 800415c:	2001      	movs	r0, #1
 800415e:	f000 fe9f 	bl	8004ea0 <compare>
 8004162:	0003      	movs	r3, r0
 8004164:	607b      	str	r3, [r7, #4]

    if (stat)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <e_rxreccnt+0x28>
    {

        if (rcv_buffer[18] != 0x05)
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <e_rxreccnt+0x38>)
 800416e:	7c9b      	ldrb	r3, [r3, #18]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d001      	beq.n	8004178 <e_rxreccnt+0x28>
        {
            stat = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	607b      	str	r3, [r7, #4]
        }

    }

    return stat;
 8004178:	687b      	ldr	r3, [r7, #4]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	08013378 	.word	0x08013378
 8004188:	200008c0 	.word	0x200008c0

0800418c <e_rxrecord>:
 *                            ------
 *
 */

static uint32_t e_rxrecord(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"NOTIFY:0,2,1,17", 15);
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <e_rxrecord+0x20>)
 8004194:	220f      	movs	r2, #15
 8004196:	0019      	movs	r1, r3
 8004198:	2001      	movs	r0, #1
 800419a:	f000 fe81 	bl	8004ea0 <compare>
 800419e:	0003      	movs	r3, r0
 80041a0:	607b      	str	r3, [r7, #4]
    return stat;
 80041a2:	687b      	ldr	r3, [r7, #4]
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	0801338c 	.word	0x0801338c

080041b0 <e_rxseckeytype>:
 *                            ------
 *
 */

static uint32_t e_rxseckeytype(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(1, (uint8_t *)"BLESECKEYTYPE", 13);
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <e_rxseckeytype+0x20>)
 80041b8:	220d      	movs	r2, #13
 80041ba:	0019      	movs	r1, r3
 80041bc:	2001      	movs	r0, #1
 80041be:	f000 fe6f 	bl	8004ea0 <compare>
 80041c2:	0003      	movs	r3, r0
 80041c4:	607b      	str	r3, [r7, #4]
    return stat;
 80041c6:	687b      	ldr	r3, [r7, #4]
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	0801339c 	.word	0x0801339c

080041d4 <e_rxscan1>:
 *                            ------
 *
 */

static uint32_t e_rxscan1(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]

    if (rcv_count > 26)
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <e_rxscan1+0x2c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b1a      	cmp	r3, #26
 80041e4:	d907      	bls.n	80041f6 <e_rxscan1+0x22>
    {
        stat = compare(1, (uint8_t *)"BLESCAN", 7);
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <e_rxscan1+0x30>)
 80041e8:	2207      	movs	r2, #7
 80041ea:	0019      	movs	r1, r3
 80041ec:	2001      	movs	r0, #1
 80041ee:	f000 fe57 	bl	8004ea0 <compare>
 80041f2:	0003      	movs	r3, r0
 80041f4:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80041f6:	687b      	ldr	r3, [r7, #4]
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200008b0 	.word	0x200008b0
 8004204:	080133ac 	.word	0x080133ac

08004208 <e_rxserial>:
 *                            ------
 *
 */

static uint32_t e_rxserial(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]

    if (rcv_count > 1)
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <e_rxserial+0x2c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d907      	bls.n	800422a <e_rxserial+0x22>
    {
        stat = compare(1, (uint8_t *)"BLEGATTCRD:", 11);
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <e_rxserial+0x30>)
 800421c:	220b      	movs	r2, #11
 800421e:	0019      	movs	r1, r3
 8004220:	2001      	movs	r0, #1
 8004222:	f000 fe3d 	bl	8004ea0 <compare>
 8004226:	0003      	movs	r3, r0
 8004228:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800422a:	687b      	ldr	r3, [r7, #4]
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200008b0 	.word	0x200008b0
 8004238:	0801333c 	.word	0x0801333c

0800423c <a_ansapmode>:
 *                               ---------
 *
 */

static void a_ansapmode(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
    callanswer = CA_APMODE;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <a_ansapmode+0x18>)
 8004242:	2205      	movs	r2, #5
 8004244:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 8004246:	4b04      	ldr	r3, [pc, #16]	; (8004258 <a_ansapmode+0x1c>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
    return;
 800424c:	46c0      	nop			; (mov r8, r8)
}
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	200008a9 	.word	0x200008a9
 8004258:	200008aa 	.word	0x200008aa

0800425c <a_ansconnected>:
 *                               ---------
 *
 */

static void a_ansconnected(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
    callanswer = CA_CONNECTED;
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <a_ansconnected+0x18>)
 8004262:	2204      	movs	r2, #4
 8004264:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 8004266:	4b04      	ldr	r3, [pc, #16]	; (8004278 <a_ansconnected+0x1c>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
    return;
 800426c:	46c0      	nop			; (mov r8, r8)
}
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	200008a9 	.word	0x200008a9
 8004278:	200008aa 	.word	0x200008aa

0800427c <a_ansnopower>:
 *                               ---------
 *
 */

static void a_ansnopower(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
    callanswer = CA_NOTPOWERED;
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <a_ansnopower+0x18>)
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <a_ansnopower+0x1c>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
    return;
 800428c:	46c0      	nop			; (mov r8, r8)
}
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	200008a9 	.word	0x200008a9
 8004298:	200008aa 	.word	0x200008aa

0800429c <a_anspaired>:
 *                               ---------
 *
 */

static void a_anspaired(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    callanswer = CA_PAIRED;
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <a_anspaired+0x10>)
 80042a2:	2206      	movs	r2, #6
 80042a4:	701a      	strb	r2, [r3, #0]
    return;
 80042a6:	46c0      	nop			; (mov r8, r8)
}
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200008a9 	.word	0x200008a9

080042b0 <a_anspowered>:
 *                               ---------
 *
 */

static void a_anspowered(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
    callanswer = CA_POWERED;
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <a_anspowered+0x18>)
 80042b6:	2203      	movs	r2, #3
 80042b8:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <a_anspowered+0x1c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]
    return;
 80042c0:	46c0      	nop			; (mov r8, r8)
}
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	200008a9 	.word	0x200008a9
 80042cc:	200008aa 	.word	0x200008aa

080042d0 <a_flushrx>:
 *                               ---------
 *
 */

static void a_flushrx(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
    esp_rxflush();
 80042d4:	f7fe ff12 	bl	80030fc <esp_rxflush>
    return;
 80042d8:	46c0      	nop			; (mov r8, r8)
}
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <a_inccount>:
 *                               ---------
 *
 */

static void a_inccount(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
    counter++;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <a_inccount+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <a_inccount+0x14>)
 80042ec:	601a      	str	r2, [r3, #0]
    return;
 80042ee:	46c0      	nop			; (mov r8, r8)
}
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200008bc 	.word	0x200008bc

080042f8 <a_initcount>:
 *                               ----------
 *
 */

static void a_initcount(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
    counter = 0;
 80042fc:	4b02      	ldr	r3, [pc, #8]	; (8004308 <a_initcount+0x10>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
    return;
 8004302:	46c0      	nop			; (mov r8, r8)
}
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200008bc 	.word	0x200008bc

0800430c <a_initvars>:
 *                               ----------
 *
 */

static void a_initvars(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0

    return;
 8004310:	46c0      	nop			; (mov r8, r8)
}
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <a_nop>:
 *                               -----
 *
 */

static void a_nop(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	af00      	add	r7, sp, #0
    return;
 800431a:	46c0      	nop			; (mov r8, r8)
}
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <a_powerdn>:
 *                               ---------
 *
 */

static void a_powerdn(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
    uint32_t uartreg;

    HAL_GPIO_WritePin(ESP_ENBL_PORT, ESP_ENBL_PIN, GPIO_PIN_SET);
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	4810      	ldr	r0, [pc, #64]	; (800436c <a_powerdn+0x4c>)
 800432c:	2201      	movs	r2, #1
 800432e:	0019      	movs	r1, r3
 8004330:	f005 fc8e 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ESP_PWR_PORT, ESP_PWR_PIN, GPIO_PIN_SET);
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <a_powerdn+0x4c>)
 8004336:	2201      	movs	r2, #1
 8004338:	2104      	movs	r1, #4
 800433a:	0018      	movs	r0, r3
 800433c:	f005 fc88 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8004340:	23fa      	movs	r3, #250	; 0xfa
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	0018      	movs	r0, r3
 8004346:	f005 f9cb 	bl	80096e0 <HAL_Delay>

    uartreg = ESP_UART->CR1;
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <a_powerdn+0x50>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]
    uartreg = uartreg & ~USART_CR1_RXNEIE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	4393      	bics	r3, r2
 8004356:	607b      	str	r3, [r7, #4]
    ESP_UART->CR1 = uartreg;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <a_powerdn+0x50>)
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]

    callanswer = CA_NOTPOWERED;
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <a_powerdn+0x54>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
    return;
 8004364:	46c0      	nop			; (mov r8, r8)
}
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}
 800436c:	48000400 	.word	0x48000400
 8004370:	40013800 	.word	0x40013800
 8004374:	200008a9 	.word	0x200008a9

08004378 <a_powerup>:
 *                               ---------
 *
 */

static void a_powerup(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
    uint32_t uartreg;

    HAL_GPIO_WritePin(ESP_PWR_PORT, ESP_PWR_PIN, GPIO_PIN_RESET);
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <a_powerup+0x5c>)
 8004380:	2200      	movs	r2, #0
 8004382:	2104      	movs	r1, #4
 8004384:	0018      	movs	r0, r3
 8004386:	f005 fc63 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800438a:	23fa      	movs	r3, #250	; 0xfa
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	0018      	movs	r0, r3
 8004390:	f005 f9a6 	bl	80096e0 <HAL_Delay>
    esp_rxflush();
 8004394:	f7fe feb2 	bl	80030fc <esp_rxflush>
    uartreg = ESP_UART->CR1;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <a_powerup+0x60>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	607b      	str	r3, [r7, #4]
    uartreg = uartreg | USART_CR1_RXNEIE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	4313      	orrs	r3, r2
 80043a4:	607b      	str	r3, [r7, #4]
    ESP_UART->CR1 = uartreg;
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <a_powerup+0x60>)
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(ESP_ENBL_PORT, ESP_ENBL_PIN, GPIO_PIN_RESET);
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <a_powerup+0x5c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	0019      	movs	r1, r3
 80043b6:	f005 fc4b 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80043ba:	23fa      	movs	r3, #250	; 0xfa
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	0018      	movs	r0, r3
 80043c0:	f005 f98e 	bl	80096e0 <HAL_Delay>
    callanswer = CA_INPROGRESS;
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <a_powerup+0x64>)
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
    return;
 80043ca:	46c0      	nop			; (mov r8, r8)
}
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	48000400 	.word	0x48000400
 80043d8:	40013800 	.word	0x40013800
 80043dc:	200008a9 	.word	0x200008a9

080043e0 <a_rcvdata>:
 *                               ---------
 *
 */

static void a_rcvdata(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
    rcv_status = esp_receive(rcv_buffer, 128, 5000, &esp_rcv_ih);
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <a_rcvdata+0x20>)
 80043e6:	4a07      	ldr	r2, [pc, #28]	; (8004404 <a_rcvdata+0x24>)
 80043e8:	4807      	ldr	r0, [pc, #28]	; (8004408 <a_rcvdata+0x28>)
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	f7fe fe30 	bl	8003050 <esp_receive>
 80043f0:	0003      	movs	r3, r0
 80043f2:	001a      	movs	r2, r3
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <a_rcvdata+0x2c>)
 80043f6:	701a      	strb	r2, [r3, #0]
    return;
 80043f8:	46c0      	nop			; (mov r8, r8)
}
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	08004ef1 	.word	0x08004ef1
 8004404:	00001388 	.word	0x00001388
 8004408:	200008c0 	.word	0x200008c0
 800440c:	200008a8 	.word	0x200008a8

08004410 <a_rcvscan>:
 *                               ---------
 *
 */

static void a_rcvscan(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
    rcv_status = esp_receive(rcv_buffer, 128, 3000, &esp_rcv_ih);
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <a_rcvscan+0x20>)
 8004416:	4a07      	ldr	r2, [pc, #28]	; (8004434 <a_rcvscan+0x24>)
 8004418:	4807      	ldr	r0, [pc, #28]	; (8004438 <a_rcvscan+0x28>)
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	f7fe fe18 	bl	8003050 <esp_receive>
 8004420:	0003      	movs	r3, r0
 8004422:	001a      	movs	r2, r3
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <a_rcvscan+0x2c>)
 8004426:	701a      	strb	r2, [r3, #0]
    return;
 8004428:	46c0      	nop			; (mov r8, r8)
}
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	08004ef1 	.word	0x08004ef1
 8004434:	00000bb8 	.word	0x00000bb8
 8004438:	200008c0 	.word	0x200008c0
 800443c:	200008a8 	.word	0x200008a8

08004440 <a_savedevinfo>:
 *                               -------
 *
 */

static void a_savedevinfo(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 17; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	e00b      	b.n	8004464 <a_savedevinfo+0x24>
    {
        ble_paired_device[i] = ble_available_device[i];
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <a_savedevinfo+0x3c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	18d3      	adds	r3, r2, r3
 8004452:	7819      	ldrb	r1, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <a_savedevinfo+0x40>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	1c0a      	adds	r2, r1, #0
 800445c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 17; i++)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3301      	adds	r3, #1
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d9f0      	bls.n	800444c <a_savedevinfo+0xc>
    }

    store_devinfo_to_flash(DEVICE_ID_ADDRESS);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fd f96e 	bl	800174c <store_devinfo_to_flash>
    erase_all_records();
 8004470:	f7fc fbea 	bl	8000c48 <erase_all_records>
    return;
 8004474:	46c0      	nop			; (mov r8, r8)
}
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20001dac 	.word	0x20001dac
 8004480:	20001e2c 	.word	0x20001e2c

08004484 <a_savegdc>:
 *                               -------
 *
 */

static void a_savegdc(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0


    return;
 8004488:	46c0      	nop			; (mov r8, r8)
}
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <a_savemeter>:
 *                               -------
 *
 */

static void a_savemeter(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 17; i++)
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	e00b      	b.n	80044b4 <a_savemeter+0x24>
    {
        ble_available_device[i] = rcv_buffer[i + 9];
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3309      	adds	r3, #9
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <a_savemeter+0x34>)
 80044a2:	5cd1      	ldrb	r1, [r2, r3]
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <a_savemeter+0x38>)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	18d3      	adds	r3, r2, r3
 80044aa:	1c0a      	adds	r2, r1, #0
 80044ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 17; i++)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3301      	adds	r3, #1
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b10      	cmp	r3, #16
 80044b8:	d9f0      	bls.n	800449c <a_savemeter+0xc>
    }

    return;
 80044ba:	46c0      	nop			; (mov r8, r8)
}
 80044bc:	46bd      	mov	sp, r7
 80044be:	b002      	add	sp, #8
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	200008c0 	.word	0x200008c0
 80044c8:	20001dac 	.word	0x20001dac

080044cc <a_savemodel>:
 *                               -------
 *
 */

static void a_savemodel(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < METERMODEL_LEN; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	e011      	b.n	80044fc <a_savemodel+0x30>
    {

        if (rcv_buffer[i + 16] == 0x0D)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3310      	adds	r3, #16
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <a_savemodel+0x44>)
 80044de:	5cd3      	ldrb	r3, [r2, r3]
 80044e0:	2b0d      	cmp	r3, #13
 80044e2:	d00f      	beq.n	8004504 <a_savemodel+0x38>
            break;
        }

        else
        {
            meter_model[i] = rcv_buffer[i + 16];
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3310      	adds	r3, #16
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <a_savemodel+0x44>)
 80044ea:	5cd1      	ldrb	r1, [r2, r3]
 80044ec:	4a09      	ldr	r2, [pc, #36]	; (8004514 <a_savemodel+0x48>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	1c0a      	adds	r2, r1, #0
 80044f4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < METERMODEL_LEN; i++)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3301      	adds	r3, #1
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b09      	cmp	r3, #9
 8004500:	d9ea      	bls.n	80044d8 <a_savemodel+0xc>
        }

    }

    return;
 8004502:	e000      	b.n	8004506 <a_savemodel+0x3a>
            break;
 8004504:	46c0      	nop			; (mov r8, r8)
    return;
 8004506:	46c0      	nop			; (mov r8, r8)
}
 8004508:	46bd      	mov	sp, r7
 800450a:	b002      	add	sp, #8
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	200008c0 	.word	0x200008c0
 8004514:	2000127c 	.word	0x2000127c

08004518 <a_savepkey>:
 *                               -------
 *
 */

static void a_savepkey(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < PAIRINGKEY_MAXLEN; i++)
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	e011      	b.n	8004548 <a_savepkey+0x30>
    {

        if (rcv_buffer[i + 16] == ';')
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3310      	adds	r3, #16
 8004528:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <a_savepkey+0x4c>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	2b3b      	cmp	r3, #59	; 0x3b
 800452e:	d00f      	beq.n	8004550 <a_savepkey+0x38>
            break;
        }

        else
        {
            ble_pairing_key[i] = rcv_buffer[i + 16];
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3310      	adds	r3, #16
 8004534:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <a_savepkey+0x4c>)
 8004536:	5cd1      	ldrb	r1, [r2, r3]
 8004538:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <a_savepkey+0x50>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	18d3      	adds	r3, r2, r3
 800453e:	1c0a      	adds	r2, r1, #0
 8004540:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < PAIRINGKEY_MAXLEN; i++)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3301      	adds	r3, #1
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d9ea      	bls.n	8004524 <a_savepkey+0xc>
 800454e:	e000      	b.n	8004552 <a_savepkey+0x3a>
            break;
 8004550:	46c0      	nop			; (mov r8, r8)
        }

    }

    ble_pairing_key[i] = 0x00;
 8004552:	4a05      	ldr	r2, [pc, #20]	; (8004568 <a_savepkey+0x50>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
    return;
 800455c:	46c0      	nop			; (mov r8, r8)
}
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}
 8004564:	200008c0 	.word	0x200008c0
 8004568:	200012ec 	.word	0x200012ec

0800456c <a_saveprimsvc>:
 *                               -------
 *
 */

static void a_saveprimsvc(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0


    return;
 8004570:	46c0      	nop			; (mov r8, r8)
}
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <a_savereccnt>:
 *                               -------
 *
 */

static void a_savereccnt(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
    uint16_t tempcnt;

    tempcnt = rcv_buffer[21];
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <a_savereccnt+0x38>)
 8004580:	7d5a      	ldrb	r2, [r3, #21]
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	801a      	strh	r2, [r3, #0]
    tempcnt = tempcnt << 8;
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	1dba      	adds	r2, r7, #6
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	0212      	lsls	r2, r2, #8
 800458e:	801a      	strh	r2, [r3, #0]
    tempcnt |= rcv_buffer[20];
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <a_savereccnt+0x38>)
 8004592:	7d1b      	ldrb	r3, [r3, #20]
 8004594:	b299      	uxth	r1, r3
 8004596:	1dbb      	adds	r3, r7, #6
 8004598:	1dba      	adds	r2, r7, #6
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	801a      	strh	r2, [r3, #0]
    record_count = tempcnt;
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <a_savereccnt+0x3c>)
 80045a2:	1dba      	adds	r2, r7, #6
 80045a4:	8812      	ldrh	r2, [r2, #0]
 80045a6:	801a      	strh	r2, [r3, #0]
    return;
 80045a8:	46c0      	nop			; (mov r8, r8)
}
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	200008c0 	.word	0x200008c0
 80045b4:	200008ac 	.word	0x200008ac

080045b8 <a_saverecord>:
 *                               -------
 *
 */

static void a_saverecord(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 17; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	e012      	b.n	80045ea <a_saverecord+0x32>
    {
        meter_records[counter][i] = rcv_buffer[i + 17];
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3311      	adds	r3, #17
 80045c8:	0019      	movs	r1, r3
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <a_saverecord+0x40>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <a_saverecord+0x44>)
 80045d0:	5c58      	ldrb	r0, [r3, r1]
 80045d2:	490b      	ldr	r1, [pc, #44]	; (8004600 <a_saverecord+0x48>)
 80045d4:	0013      	movs	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	189b      	adds	r3, r3, r2
 80045da:	18ca      	adds	r2, r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	18d3      	adds	r3, r2, r3
 80045e0:	1c02      	adds	r2, r0, #0
 80045e2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 17; i++)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3301      	adds	r3, #1
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d9e9      	bls.n	80045c4 <a_saverecord+0xc>
    }

    return;
 80045f0:	46c0      	nop			; (mov r8, r8)
}
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	200008bc 	.word	0x200008bc
 80045fc:	200008c0 	.word	0x200008c0
 8004600:	200012f8 	.word	0x200012f8

08004604 <a_saveserial>:
 *                               -------
 *
 */

static void a_saveserial(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < METERSERIAL_LEN; i++)
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e011      	b.n	8004634 <a_saveserial+0x30>
    {

        if (rcv_buffer[i + 17] == 0x0D)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3311      	adds	r3, #17
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <a_saveserial+0x44>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	2b0d      	cmp	r3, #13
 800461a:	d00f      	beq.n	800463c <a_saveserial+0x38>
            break;
        }

        else
        {
            meter_serial_no[i] = rcv_buffer[i + 17];
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3311      	adds	r3, #17
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <a_saveserial+0x44>)
 8004622:	5cd1      	ldrb	r1, [r2, r3]
 8004624:	4a09      	ldr	r2, [pc, #36]	; (800464c <a_saveserial+0x48>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	18d3      	adds	r3, r2, r3
 800462a:	1c0a      	adds	r2, r1, #0
 800462c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < METERSERIAL_LEN; i++)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3301      	adds	r3, #1
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b13      	cmp	r3, #19
 8004638:	d9ea      	bls.n	8004610 <a_saveserial+0xc>
        }

}

    return;
 800463a:	e000      	b.n	800463e <a_saveserial+0x3a>
            break;
 800463c:	46c0      	nop			; (mov r8, r8)
    return;
 800463e:	46c0      	nop			; (mov r8, r8)
}
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	200008c0 	.word	0x200008c0
 800464c:	20001e68 	.word	0x20001e68

08004650 <a_trate0>:
 *                               --------
 *
 */

static void a_trate0(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
    esp_rxflush();
 8004654:	f7fe fd52 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <a_trate0+0x8c>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 32, 5000, &esp_rcv_ih);
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <a_trate0+0x90>)
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <a_trate0+0x94>)
 8004662:	4821      	ldr	r0, [pc, #132]	; (80046e8 <a_trate0+0x98>)
 8004664:	2120      	movs	r1, #32
 8004666:	f7fe fcf3 	bl	8003050 <esp_receive>
 800466a:	0003      	movs	r3, r0
 800466c:	001a      	movs	r2, r3
 800466e:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <a_trate0+0x9c>)
 8004670:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004672:	4b1e      	ldr	r3, [pc, #120]	; (80046ec <a_trate0+0x9c>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b06      	cmp	r3, #6
 8004678:	d12d      	bne.n	80046d6 <a_trate0+0x86>
    {
//        esp_transmit((uint8_t *)"ATE0\r\n", 6);
        esp_transmit((uint8_t *)"A", 1);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <a_trate0+0xa0>)
 800467c:	2101      	movs	r1, #1
 800467e:	0018      	movs	r0, r3
 8004680:	f7ff f8dc 	bl	800383c <esp_transmit>
        HAL_Delay(5);
 8004684:	2005      	movs	r0, #5
 8004686:	f005 f82b 	bl	80096e0 <HAL_Delay>
        esp_transmit((uint8_t *)"T", 1);
 800468a:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <a_trate0+0xa4>)
 800468c:	2101      	movs	r1, #1
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff f8d4 	bl	800383c <esp_transmit>
        HAL_Delay(5);
 8004694:	2005      	movs	r0, #5
 8004696:	f005 f823 	bl	80096e0 <HAL_Delay>
        esp_transmit((uint8_t *)"E", 1);
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <a_trate0+0xa8>)
 800469c:	2101      	movs	r1, #1
 800469e:	0018      	movs	r0, r3
 80046a0:	f7ff f8cc 	bl	800383c <esp_transmit>
        HAL_Delay(5);
 80046a4:	2005      	movs	r0, #5
 80046a6:	f005 f81b 	bl	80096e0 <HAL_Delay>
        esp_transmit((uint8_t *)"0", 1);
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <a_trate0+0xac>)
 80046ac:	2101      	movs	r1, #1
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7ff f8c4 	bl	800383c <esp_transmit>
        HAL_Delay(5);
 80046b4:	2005      	movs	r0, #5
 80046b6:	f005 f813 	bl	80096e0 <HAL_Delay>
        esp_transmit((uint8_t *)"\r", 1);
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <a_trate0+0xb0>)
 80046bc:	2101      	movs	r1, #1
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff f8bc 	bl	800383c <esp_transmit>
        HAL_Delay(5);
 80046c4:	2005      	movs	r0, #5
 80046c6:	f005 f80b 	bl	80096e0 <HAL_Delay>
        esp_transmit((uint8_t *)"\n", 1);
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <a_trate0+0xb4>)
 80046cc:	2101      	movs	r1, #1
 80046ce:	0018      	movs	r0, r3
 80046d0:	f7ff f8b4 	bl	800383c <esp_transmit>
    }

    return;
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46c0      	nop			; (mov r8, r8)
}
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200008b0 	.word	0x200008b0
 80046e0:	08004ef1 	.word	0x08004ef1
 80046e4:	00001388 	.word	0x00001388
 80046e8:	200008c0 	.word	0x200008c0
 80046ec:	200008a8 	.word	0x200008a8
 80046f0:	080133b8 	.word	0x080133b8
 80046f4:	080133bc 	.word	0x080133bc
 80046f8:	080133c0 	.word	0x080133c0
 80046fc:	080133c4 	.word	0x080133c4
 8004700:	080133b4 	.word	0x080133b4
 8004704:	080133c8 	.word	0x080133c8

08004708 <a_trbleencdevq>:
 *                               --------
 *
 */

static void a_trbleencdevq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0

    return;
 800470c:	46c0      	nop			; (mov r8, r8)
}
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <a_trbleinit1>:
 *                               --------
 *
 */

static void a_trbleinit1(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
    esp_rxflush();
 8004718:	f7fe fcf0 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <a_trbleinit1+0x3c>)
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 5000, &esp_rcv_ih);
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <a_trbleinit1+0x40>)
 8004724:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <a_trbleinit1+0x44>)
 8004726:	480d      	ldr	r0, [pc, #52]	; (800475c <a_trbleinit1+0x48>)
 8004728:	2110      	movs	r1, #16
 800472a:	f7fe fc91 	bl	8003050 <esp_receive>
 800472e:	0003      	movs	r3, r0
 8004730:	001a      	movs	r2, r3
 8004732:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <a_trbleinit1+0x4c>)
 8004734:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <a_trbleinit1+0x4c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b06      	cmp	r3, #6
 800473c:	d105      	bne.n	800474a <a_trbleinit1+0x36>
    {
        esp_transmit((uint8_t *)"AT+BLEINIT=1\r\n", 14);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <a_trbleinit1+0x50>)
 8004740:	210e      	movs	r1, #14
 8004742:	0018      	movs	r0, r3
 8004744:	f7ff f87a 	bl	800383c <esp_transmit>
    }

    return;
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46c0      	nop			; (mov r8, r8)
}
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200008b0 	.word	0x200008b0
 8004754:	08004ef1 	.word	0x08004ef1
 8004758:	00001388 	.word	0x00001388
 800475c:	200008c0 	.word	0x200008c0
 8004760:	200008a8 	.word	0x200008a8
 8004764:	080133cc 	.word	0x080133cc

08004768 <a_trblename>:
 *                               --------
 *
 */

static void a_trblename(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
    esp_rxflush();
 800476c:	f7fe fcc6 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <a_trblename+0x4c>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <a_trblename+0x50>)
 8004778:	22fa      	movs	r2, #250	; 0xfa
 800477a:	00d2      	lsls	r2, r2, #3
 800477c:	480f      	ldr	r0, [pc, #60]	; (80047bc <a_trblename+0x54>)
 800477e:	2110      	movs	r1, #16
 8004780:	f7fe fc66 	bl	8003050 <esp_receive>
 8004784:	0003      	movs	r3, r0
 8004786:	001a      	movs	r2, r3
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <a_trblename+0x58>)
 800478a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <a_trblename+0x58>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b06      	cmp	r3, #6
 8004792:	d10b      	bne.n	80047ac <a_trblename+0x44>
    {
        sprintf(txbuf, (uint8_t *)"AT+BLENAME=\"%s\"\r\n", ble_ssid_name);
 8004794:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <a_trblename+0x5c>)
 8004796:	490c      	ldr	r1, [pc, #48]	; (80047c8 <a_trblename+0x60>)
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <a_trblename+0x64>)
 800479a:	0018      	movs	r0, r3
 800479c:	f00c ffb2 	bl	8011704 <siprintf>
        esp_transmit(txbuf, 33);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <a_trblename+0x64>)
 80047a2:	2121      	movs	r1, #33	; 0x21
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7ff f849 	bl	800383c <esp_transmit>
    }

    return;
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46c0      	nop			; (mov r8, r8)
}
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	200008b0 	.word	0x200008b0
 80047b8:	08004ef1 	.word	0x08004ef1
 80047bc:	200008c0 	.word	0x200008c0
 80047c0:	200008a8 	.word	0x200008a8
 80047c4:	20001a00 	.word	0x20001a00
 80047c8:	080133dc 	.word	0x080133dc
 80047cc:	200009c4 	.word	0x200009c4

080047d0 <a_trcipap>:
 *                               ---------
 *
 */

static void a_trcipap(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
    esp_rxflush();
 80047d4:	f7fe fc92 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <a_trcipap+0x3c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 32, 5000, &esp_rcv_ih);
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <a_trcipap+0x40>)
 80047e0:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <a_trcipap+0x44>)
 80047e2:	480d      	ldr	r0, [pc, #52]	; (8004818 <a_trcipap+0x48>)
 80047e4:	2120      	movs	r1, #32
 80047e6:	f7fe fc33 	bl	8003050 <esp_receive>
 80047ea:	0003      	movs	r3, r0
 80047ec:	001a      	movs	r2, r3
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <a_trcipap+0x4c>)
 80047f0:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <a_trcipap+0x4c>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d104      	bne.n	8004804 <a_trcipap+0x34>
    {
        esp_transmit((uint8_t *)"AT+CIPAP=\"192.168.50.1\",\"192.168.50.1\",\"255.255.255.0\"\r\n", 56);
 80047fa:	4b09      	ldr	r3, [pc, #36]	; (8004820 <a_trcipap+0x50>)
 80047fc:	2138      	movs	r1, #56	; 0x38
 80047fe:	0018      	movs	r0, r3
 8004800:	f7ff f81c 	bl	800383c <esp_transmit>
    }

}
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	200008b0 	.word	0x200008b0
 8004810:	08004ef1 	.word	0x08004ef1
 8004814:	00001388 	.word	0x00001388
 8004818:	200008c0 	.word	0x200008c0
 800481c:	200008a8 	.word	0x200008a8
 8004820:	080133f0 	.word	0x080133f0

08004824 <a_trcipapq>:
 *                               ---------
 *
 */

static void a_trcipapq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
    esp_rxflush();
 8004828:	f7fe fc68 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <a_trcipapq+0x3c>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 32, 5000, &esp_rcv_ih);
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <a_trcipapq+0x40>)
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <a_trcipapq+0x44>)
 8004836:	480d      	ldr	r0, [pc, #52]	; (800486c <a_trcipapq+0x48>)
 8004838:	2120      	movs	r1, #32
 800483a:	f7fe fc09 	bl	8003050 <esp_receive>
 800483e:	0003      	movs	r3, r0
 8004840:	001a      	movs	r2, r3
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <a_trcipapq+0x4c>)
 8004844:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <a_trcipapq+0x4c>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b06      	cmp	r3, #6
 800484c:	d104      	bne.n	8004858 <a_trcipapq+0x34>
    {
        esp_transmit((uint8_t *)"AT+CIPAP?\r\n", 11);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <a_trcipapq+0x50>)
 8004850:	210b      	movs	r1, #11
 8004852:	0018      	movs	r0, r3
 8004854:	f7fe fff2 	bl	800383c <esp_transmit>
    }

}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	200008b0 	.word	0x200008b0
 8004864:	08004ef1 	.word	0x08004ef1
 8004868:	00001388 	.word	0x00001388
 800486c:	200008c0 	.word	0x200008c0
 8004870:	200008a8 	.word	0x200008a8
 8004874:	0801342c 	.word	0x0801342c

08004878 <a_trcipmux>:
 *                               ---------
 *
 */

static void a_trcipmux(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
    esp_rxflush();
 800487c:	f7fe fc3e 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <a_trcipmux+0x3c>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <a_trcipmux+0x40>)
 8004888:	22fa      	movs	r2, #250	; 0xfa
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	480b      	ldr	r0, [pc, #44]	; (80048bc <a_trcipmux+0x44>)
 800488e:	2110      	movs	r1, #16
 8004890:	f7fe fbde 	bl	8003050 <esp_receive>
 8004894:	0003      	movs	r3, r0
 8004896:	001a      	movs	r2, r3
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <a_trcipmux+0x48>)
 800489a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <a_trcipmux+0x48>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d104      	bne.n	80048ae <a_trcipmux+0x36>
    {
        esp_transmit((uint8_t *)"AT+CIPMUX=1\r\n", 13);
 80048a4:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <a_trcipmux+0x4c>)
 80048a6:	210d      	movs	r1, #13
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7fe ffc7 	bl	800383c <esp_transmit>
    }

}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	200008b0 	.word	0x200008b0
 80048b8:	08004ef1 	.word	0x08004ef1
 80048bc:	200008c0 	.word	0x200008c0
 80048c0:	200008a8 	.word	0x200008a8
 80048c4:	08013438 	.word	0x08013438

080048c8 <a_trcipsvr>:
 *                               ---------
 *
 */

static void a_trcipsvr(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
    esp_rxflush();
 80048cc:	f7fe fc16 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <a_trcipsvr+0x3c>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <a_trcipsvr+0x40>)
 80048d8:	22fa      	movs	r2, #250	; 0xfa
 80048da:	00d2      	lsls	r2, r2, #3
 80048dc:	480b      	ldr	r0, [pc, #44]	; (800490c <a_trcipsvr+0x44>)
 80048de:	2110      	movs	r1, #16
 80048e0:	f7fe fbb6 	bl	8003050 <esp_receive>
 80048e4:	0003      	movs	r3, r0
 80048e6:	001a      	movs	r2, r3
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <a_trcipsvr+0x48>)
 80048ea:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <a_trcipsvr+0x48>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d104      	bne.n	80048fe <a_trcipsvr+0x36>
    {
        esp_transmit((uint8_t *)"AT+CIPSERVER=1,9001\r\n", 21);
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <a_trcipsvr+0x4c>)
 80048f6:	2115      	movs	r1, #21
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fe ff9f 	bl	800383c <esp_transmit>
    }

}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	200008b0 	.word	0x200008b0
 8004908:	08004ef1 	.word	0x08004ef1
 800490c:	200008c0 	.word	0x200008c0
 8004910:	200008a8 	.word	0x200008a8
 8004914:	08013448 	.word	0x08013448

08004918 <a_trcwmode0>:
 *                               ---------
 *
 */

static void a_trcwmode0(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
    esp_rxflush();
 800491c:	f7fe fbee 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <a_trcwmode0+0x3c>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <a_trcwmode0+0x40>)
 8004928:	22fa      	movs	r2, #250	; 0xfa
 800492a:	00d2      	lsls	r2, r2, #3
 800492c:	480b      	ldr	r0, [pc, #44]	; (800495c <a_trcwmode0+0x44>)
 800492e:	2110      	movs	r1, #16
 8004930:	f7fe fb8e 	bl	8003050 <esp_receive>
 8004934:	0003      	movs	r3, r0
 8004936:	001a      	movs	r2, r3
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <a_trcwmode0+0x48>)
 800493a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800493c:	4b08      	ldr	r3, [pc, #32]	; (8004960 <a_trcwmode0+0x48>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b06      	cmp	r3, #6
 8004942:	d104      	bne.n	800494e <a_trcwmode0+0x36>
    {
        esp_transmit((uint8_t *)"AT+CWMODE=0\r\n", 13);
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <a_trcwmode0+0x4c>)
 8004946:	210d      	movs	r1, #13
 8004948:	0018      	movs	r0, r3
 800494a:	f7fe ff77 	bl	800383c <esp_transmit>
    }

}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200008b0 	.word	0x200008b0
 8004958:	08004ef1 	.word	0x08004ef1
 800495c:	200008c0 	.word	0x200008c0
 8004960:	200008a8 	.word	0x200008a8
 8004964:	08013460 	.word	0x08013460

08004968 <a_trcwmode3>:
 *                               ---------
 *
 */

static void a_trcwmode3(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
    esp_rxflush();
 800496c:	f7fe fbc6 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <a_trcwmode3+0x3c>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <a_trcwmode3+0x40>)
 8004978:	22fa      	movs	r2, #250	; 0xfa
 800497a:	00d2      	lsls	r2, r2, #3
 800497c:	480b      	ldr	r0, [pc, #44]	; (80049ac <a_trcwmode3+0x44>)
 800497e:	2110      	movs	r1, #16
 8004980:	f7fe fb66 	bl	8003050 <esp_receive>
 8004984:	0003      	movs	r3, r0
 8004986:	001a      	movs	r2, r3
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <a_trcwmode3+0x48>)
 800498a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <a_trcwmode3+0x48>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d104      	bne.n	800499e <a_trcwmode3+0x36>
    {
        esp_transmit((uint8_t *)"AT+CWMODE=3\r\n", 13);
 8004994:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <a_trcwmode3+0x4c>)
 8004996:	210d      	movs	r1, #13
 8004998:	0018      	movs	r0, r3
 800499a:	f7fe ff4f 	bl	800383c <esp_transmit>
    }

}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200008b0 	.word	0x200008b0
 80049a8:	08004ef1 	.word	0x08004ef1
 80049ac:	200008c0 	.word	0x200008c0
 80049b0:	200008a8 	.word	0x200008a8
 80049b4:	08013480 	.word	0x08013480

080049b8 <a_trcwsap>:
 *                               ---------
 *
 */

static void a_trcwsap(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
    uint32_t txlen;

    esp_rxflush();
 80049be:	f7fe fb9d 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <a_trcwsap+0x54>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 2000, &esp_rcv_ih);
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <a_trcwsap+0x58>)
 80049ca:	22fa      	movs	r2, #250	; 0xfa
 80049cc:	00d2      	lsls	r2, r2, #3
 80049ce:	4811      	ldr	r0, [pc, #68]	; (8004a14 <a_trcwsap+0x5c>)
 80049d0:	2110      	movs	r1, #16
 80049d2:	f7fe fb3d 	bl	8003050 <esp_receive>
 80049d6:	0003      	movs	r3, r0
 80049d8:	001a      	movs	r2, r3
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <a_trcwsap+0x60>)
 80049dc:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <a_trcwsap+0x60>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d10d      	bne.n	8004a02 <a_trcwsap+0x4a>
    {
        txlen = sprintf(txbuf, "AT+CWSAP=\"%s\",\"1234567890\",5,3\r\n", ble_ssid_name);
 80049e6:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <a_trcwsap+0x64>)
 80049e8:	490d      	ldr	r1, [pc, #52]	; (8004a20 <a_trcwsap+0x68>)
 80049ea:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <a_trcwsap+0x6c>)
 80049ec:	0018      	movs	r0, r3
 80049ee:	f00c fe89 	bl	8011704 <siprintf>
 80049f2:	0003      	movs	r3, r0
 80049f4:	607b      	str	r3, [r7, #4]
        esp_transmit(txbuf, 48);
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <a_trcwsap+0x6c>)
 80049f8:	2130      	movs	r1, #48	; 0x30
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fe ff1e 	bl	800383c <esp_transmit>
    }

    return;
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46c0      	nop			; (mov r8, r8)
}
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	200008b0 	.word	0x200008b0
 8004a10:	08004ef1 	.word	0x08004ef1
 8004a14:	200008c0 	.word	0x200008c0
 8004a18:	200008a8 	.word	0x200008a8
 8004a1c:	20001a00 	.word	0x20001a00
 8004a20:	08013490 	.word	0x08013490
 8004a24:	200009c4 	.word	0x200009c4

08004a28 <a_trgattcwr1>:
 *                               --------
 *
 */

static void a_trgattcwr1(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

    esp_rxflush();
 8004a2c:	f7fe fb66 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004a30:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <a_trgattcwr1+0x40>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 7, 1000, &esp_rcv_ih);
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <a_trgattcwr1+0x44>)
 8004a38:	22fa      	movs	r2, #250	; 0xfa
 8004a3a:	0092      	lsls	r2, r2, #2
 8004a3c:	480c      	ldr	r0, [pc, #48]	; (8004a70 <a_trgattcwr1+0x48>)
 8004a3e:	2107      	movs	r1, #7
 8004a40:	f7fe fb06 	bl	8003050 <esp_receive>
 8004a44:	0003      	movs	r3, r0
 8004a46:	001a      	movs	r2, r3
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <a_trgattcwr1+0x4c>)
 8004a4a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <a_trgattcwr1+0x4c>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d105      	bne.n	8004a60 <a_trgattcwr1+0x38>
    {
        esp_transmit((uint8_t *)"AT+BLEGATTCWR=0,2,1,1,2\r\n", 25);
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <a_trgattcwr1+0x50>)
 8004a56:	2119      	movs	r1, #25
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fe feef 	bl	800383c <esp_transmit>
    }

    return;
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	46c0      	nop			; (mov r8, r8)
}
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	200008b0 	.word	0x200008b0
 8004a6c:	08004ef1 	.word	0x08004ef1
 8004a70:	200008c0 	.word	0x200008c0
 8004a74:	200008a8 	.word	0x200008a8
 8004a78:	080134b4 	.word	0x080134b4

08004a7c <a_trgattcwr2>:
 *                               --------
 *
 */

static void a_trgattcwr2(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0

    esp_rxflush();
 8004a80:	f7fe fb3c 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004a84:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <a_trgattcwr2+0x40>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 7, 1000, &esp_rcv_ih);
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <a_trgattcwr2+0x44>)
 8004a8c:	22fa      	movs	r2, #250	; 0xfa
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	480c      	ldr	r0, [pc, #48]	; (8004ac4 <a_trgattcwr2+0x48>)
 8004a92:	2107      	movs	r1, #7
 8004a94:	f7fe fadc 	bl	8003050 <esp_receive>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <a_trgattcwr2+0x4c>)
 8004a9e:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <a_trgattcwr2+0x4c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d105      	bne.n	8004ab4 <a_trgattcwr2+0x38>
    {
        esp_transmit((uint8_t *)"AT+BLEGATTCWR=0,2,3,1,2\r\n", 25);
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <a_trgattcwr2+0x50>)
 8004aaa:	2119      	movs	r1, #25
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7fe fec5 	bl	800383c <esp_transmit>
    }

    return;
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	46c0      	nop			; (mov r8, r8)
}
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	200008b0 	.word	0x200008b0
 8004ac0:	08004ef1 	.word	0x08004ef1
 8004ac4:	200008c0 	.word	0x200008c0
 8004ac8:	200008a8 	.word	0x200008a8
 8004acc:	080134d0 	.word	0x080134d0

08004ad0 <a_trgattcwr3>:
 *                               --------
 *
 */

static void a_trgattcwr3(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0

    esp_rxflush();
 8004ad4:	f7fe fb12 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <a_trgattcwr3+0x40>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 7, 1000, &esp_rcv_ih);
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <a_trgattcwr3+0x44>)
 8004ae0:	22fa      	movs	r2, #250	; 0xfa
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	480c      	ldr	r0, [pc, #48]	; (8004b18 <a_trgattcwr3+0x48>)
 8004ae6:	2107      	movs	r1, #7
 8004ae8:	f7fe fab2 	bl	8003050 <esp_receive>
 8004aec:	0003      	movs	r3, r0
 8004aee:	001a      	movs	r2, r3
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <a_trgattcwr3+0x4c>)
 8004af2:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <a_trgattcwr3+0x4c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d105      	bne.n	8004b08 <a_trgattcwr3+0x38>
    {
        esp_transmit((uint8_t *)"AT+BLEGATTCWR=0,2,3,,2\r\n", 24);
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <a_trgattcwr3+0x50>)
 8004afe:	2118      	movs	r1, #24
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7fe fe9b 	bl	800383c <esp_transmit>
    }

    return;
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46c0      	nop			; (mov r8, r8)
}
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	200008b0 	.word	0x200008b0
 8004b14:	08004ef1 	.word	0x08004ef1
 8004b18:	200008c0 	.word	0x200008c0
 8004b1c:	200008a8 	.word	0x200008a8
 8004b20:	080134ec 	.word	0x080134ec

08004b24 <a_trgattcwr4>:
 *                               --------
 *
 */

static void a_trgattcwr4(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0

    esp_rxflush();
 8004b28:	f7fe fae8 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <a_trgattcwr4+0x40>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 32, 1000, &esp_rcv_ih);
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <a_trgattcwr4+0x44>)
 8004b34:	22fa      	movs	r2, #250	; 0xfa
 8004b36:	0092      	lsls	r2, r2, #2
 8004b38:	480c      	ldr	r0, [pc, #48]	; (8004b6c <a_trgattcwr4+0x48>)
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	f7fe fa88 	bl	8003050 <esp_receive>
 8004b40:	0003      	movs	r3, r0
 8004b42:	001a      	movs	r2, r3
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <a_trgattcwr4+0x4c>)
 8004b46:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <a_trgattcwr4+0x4c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b06      	cmp	r3, #6
 8004b4e:	d105      	bne.n	8004b5c <a_trgattcwr4+0x38>
    {
        esp_transmit((uint8_t *)"AT+BLEGATTCWR=0,2,3,,7\r\n", 24);
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <a_trgattcwr4+0x50>)
 8004b52:	2118      	movs	r1, #24
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fe fe71 	bl	800383c <esp_transmit>
    }

    return;
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46c0      	nop			; (mov r8, r8)
}
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	200008b0 	.word	0x200008b0
 8004b68:	08004ef1 	.word	0x08004ef1
 8004b6c:	200008c0 	.word	0x200008c0
 8004b70:	200008a8 	.word	0x200008a8
 8004b74:	08013508 	.word	0x08013508

08004b78 <a_trgmr>:
 *                               -------
 *
 */

static void a_trgmr(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
    esp_rxflush();
 8004b7c:	f7fe fabe 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <a_trgmr+0x40>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 128, 2000, &esp_rcv_ih);
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <a_trgmr+0x44>)
 8004b88:	22fa      	movs	r2, #250	; 0xfa
 8004b8a:	00d2      	lsls	r2, r2, #3
 8004b8c:	480c      	ldr	r0, [pc, #48]	; (8004bc0 <a_trgmr+0x48>)
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	f7fe fa5e 	bl	8003050 <esp_receive>
 8004b94:	0003      	movs	r3, r0
 8004b96:	001a      	movs	r2, r3
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <a_trgmr+0x4c>)
 8004b9a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <a_trgmr+0x4c>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d105      	bne.n	8004bb0 <a_trgmr+0x38>
    {
        esp_transmit((uint8_t *)"AT+GMR\r\n", 8);
 8004ba4:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <a_trgmr+0x50>)
 8004ba6:	2108      	movs	r1, #8
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fe fe47 	bl	800383c <esp_transmit>
    }

    return;
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	46c0      	nop			; (mov r8, r8)
}
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	200008b0 	.word	0x200008b0
 8004bbc:	08004ef1 	.word	0x08004ef1
 8004bc0:	200008c0 	.word	0x200008c0
 8004bc4:	200008a8 	.word	0x200008a8
 8004bc8:	08013524 	.word	0x08013524

08004bcc <a_trmsg1>:
 *                               --------
 *
 */

static void a_trmsg1(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
    esp_rxflush();
 8004bd0:	f7fe fa94 	bl	80030fc <esp_rxflush>
    rcv_count = 0;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <a_trmsg1+0x3c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
    rcv_status = esp_receive(rcv_buffer, 16, 5000, &esp_rcv_ih);
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <a_trmsg1+0x40>)
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <a_trmsg1+0x44>)
 8004bde:	480d      	ldr	r0, [pc, #52]	; (8004c14 <a_trmsg1+0x48>)
 8004be0:	2110      	movs	r1, #16
 8004be2:	f7fe fa35 	bl	8003050 <esp_receive>
 8004be6:	0003      	movs	r3, r0
 8004be8:	001a      	movs	r2, r3
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <a_trmsg1+0x4c>)
 8004bec:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <a_trmsg1+0x4c>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b06      	cmp	r3, #6
 8004bf4:	d105      	bne.n	8004c02 <a_trmsg1+0x36>
    {
        esp_transmit((uint8_t *)"AT\r\n", 4);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <a_trmsg1+0x50>)
 8004bf8:	2104      	movs	r1, #4
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7fe fe1e 	bl	800383c <esp_transmit>
    }

    return;
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46c0      	nop			; (mov r8, r8)
}
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200008b0 	.word	0x200008b0
 8004c0c:	08004ef1 	.word	0x08004ef1
 8004c10:	00001388 	.word	0x00001388
 8004c14:	200008c0 	.word	0x200008c0
 8004c18:	200008a8 	.word	0x200008a8
 8004c1c:	08013530 	.word	0x08013530

08004c20 <a_tx0401>:
 *                               --------
 *
 */

static void a_tx0401(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
    txbuf[0] = 0x04;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <a_tx0401+0x20>)
 8004c26:	2204      	movs	r2, #4
 8004c28:	701a      	strb	r2, [r3, #0]
    txbuf[1] = 0x01;
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <a_tx0401+0x20>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	705a      	strb	r2, [r3, #1]
    esp_transmit(txbuf, 2);
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <a_tx0401+0x20>)
 8004c32:	2102      	movs	r1, #2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fe fe01 	bl	800383c <esp_transmit>
    return;
 8004c3a:	46c0      	nop			; (mov r8, r8)
}
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200009c4 	.word	0x200009c4

08004c44 <a_tx1>:
 *                               --------
 *
 */

static void a_tx1(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0

    esp_transmit((uint8_t *)"1\r\n", 2);
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <a_tx1+0x14>)
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fe fdf5 	bl	800383c <esp_transmit>
    return;
 8004c52:	46c0      	nop			; (mov r8, r8)
}
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	0801353c 	.word	0x0801353c

08004c5c <a_tx2>:
 *                               --------
 *
 */

static void a_tx2(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0

    esp_transmit((uint8_t *)"2\r\n", 2);
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <a_tx2+0x14>)
 8004c62:	2102      	movs	r1, #2
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fe fde9 	bl	800383c <esp_transmit>
    return;
 8004c6a:	46c0      	nop			; (mov r8, r8)
}
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	08013540 	.word	0x08013540

08004c74 <a_txbleconn>:
 *                               --------
 *
 */

static void a_txbleconn(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
    uint32_t txlen;

    txlen = sprintf(txbuf, "AT+BLECONN=0,\"%s\"\r\n", ble_available_device);
 8004c7a:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <a_txbleconn+0x2c>)
 8004c7c:	4909      	ldr	r1, [pc, #36]	; (8004ca4 <a_txbleconn+0x30>)
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ca8 <a_txbleconn+0x34>)
 8004c80:	0018      	movs	r0, r3
 8004c82:	f00c fd3f 	bl	8011704 <siprintf>
 8004c86:	0003      	movs	r3, r0
 8004c88:	607b      	str	r3, [r7, #4]
    esp_transmit(txbuf, txlen);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <a_txbleconn+0x34>)
 8004c90:	0011      	movs	r1, r2
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7fe fdd2 	bl	800383c <esp_transmit>
    return;
 8004c98:	46c0      	nop			; (mov r8, r8)
}
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001dac 	.word	0x20001dac
 8004ca4:	08013544 	.word	0x08013544
 8004ca8:	200009c4 	.word	0x200009c4

08004cac <a_txbledisconn>:
 *                               --------
 *
 */

static void a_txbledisconn(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEDISCONN=0\r\n", 17);
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <a_txbledisconn+0x14>)
 8004cb2:	2111      	movs	r1, #17
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fe fdc1 	bl	800383c <esp_transmit>
    return;
 8004cba:	46c0      	nop			; (mov r8, r8)
}
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08013558 	.word	0x08013558

08004cc4 <a_txbleenc3>:
 *                               --------
 *
 */

static void a_txbleenc3(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEENC=0,3\r\n", 15);
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <a_txbleenc3+0x14>)
 8004cca:	210f      	movs	r1, #15
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fe fdb5 	bl	800383c <esp_transmit>
    return;
 8004cd2:	46c0      	nop			; (mov r8, r8)
}
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	0801356c 	.word	0x0801356c

08004cdc <a_txbleencclr>:
 *                               -------------
 *
 */

static void a_txbleencclr(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEENCCLEAR\r\n", 16);
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <a_txbleencclr+0x14>)
 8004ce2:	2110      	movs	r1, #16
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fe fda9 	bl	800383c <esp_transmit>
    return;
 8004cea:	46c0      	nop			; (mov r8, r8)
}
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	0801357c 	.word	0x0801357c

08004cf4 <a_txblegdc>:
 *                               --------
 *
 */

static void a_txblegdc(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEGATTCCHAR=0,3\r\n", 21);
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <a_txblegdc+0x14>)
 8004cfa:	2115      	movs	r1, #21
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7fe fd9d 	bl	800383c <esp_transmit>
    return;
 8004d02:	46c0      	nop			; (mov r8, r8)
}
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08013590 	.word	0x08013590

08004d0c <a_txblegetc2>:
 *                               --------
 *
 */

static void a_txblegetc2(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEGATTCCHAR=0,2\r\n", 21);
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <a_txblegetc2+0x14>)
 8004d12:	2115      	movs	r1, #21
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7fe fd91 	bl	800383c <esp_transmit>
    return;
 8004d1a:	46c0      	nop			; (mov r8, r8)
}
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	080135a8 	.word	0x080135a8

08004d24 <a_txbleinit0>:
 *                               --------
 *
 */

static void a_txbleinit0(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEINIT=0\r\n", 14);
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <a_txbleinit0+0x14>)
 8004d2a:	210e      	movs	r1, #14
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fe fd85 	bl	800383c <esp_transmit>
    return;
 8004d32:	46c0      	nop			; (mov r8, r8)
}
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	080135c0 	.word	0x080135c0

08004d3c <a_txblekeyrep>:
 *                               --------
 *
 */

static void a_txblekeyrep(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
    uint32_t txlen;

    txlen = sprintf(txbuf, "AT+BLEKEYREPLY=0,%s\r\n", ble_pairing_key);
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <a_txblekeyrep+0x2c>)
 8004d44:	4909      	ldr	r1, [pc, #36]	; (8004d6c <a_txblekeyrep+0x30>)
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <a_txblekeyrep+0x34>)
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f00c fcdb 	bl	8011704 <siprintf>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	607b      	str	r3, [r7, #4]
    esp_transmit(txbuf, txlen);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <a_txblekeyrep+0x34>)
 8004d58:	0011      	movs	r1, r2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fe fd6e 	bl	800383c <esp_transmit>
    return;
 8004d60:	46c0      	nop			; (mov r8, r8)
}
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200012ec 	.word	0x200012ec
 8004d6c:	080135d0 	.word	0x080135d0
 8004d70:	200009c4 	.word	0x200009c4

08004d74 <a_txblemodel>:
 *                               --------
 *
 */

static void a_txblemodel(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEGATTCRD=0,3,2\r\n", 21);
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <a_txblemodel+0x14>)
 8004d7a:	2115      	movs	r1, #21
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7fe fd5d 	bl	800383c <esp_transmit>
    return;
 8004d82:	46c0      	nop			; (mov r8, r8)
}
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	080135e8 	.word	0x080135e8

08004d8c <a_txbleprimsvc>:
 *                               --------
 *
 */

static void a_txbleprimsvc(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLEGATTCPRIMSRV=0\r\n", 22);
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <a_txbleprimsvc+0x14>)
 8004d92:	2116      	movs	r1, #22
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fe fd51 	bl	800383c <esp_transmit>
    return;
 8004d9a:	46c0      	nop			; (mov r8, r8)
}
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	08013600 	.word	0x08013600

08004da4 <a_txblescan0>:
 *                               --------
 *
 */

static void a_txblescan0(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLESCAN=0\r\n", 14);
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <a_txblescan0+0x14>)
 8004daa:	210e      	movs	r1, #14
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fe fd45 	bl	800383c <esp_transmit>
    return;
 8004db2:	46c0      	nop			; (mov r8, r8)
}
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08013618 	.word	0x08013618

08004dbc <a_txblescan1>:
 *                               --------
 *
 */

static void a_txblescan1(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLESCAN=1,2\r\n", 16);
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <a_txblescan1+0x14>)
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fe fd39 	bl	800383c <esp_transmit>
    return;
 8004dca:	46c0      	nop			; (mov r8, r8)
}
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08013628 	.word	0x08013628

08004dd4 <a_txblescan2>:
 *                               --------
 *
 */

static void a_txblescan2(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
    uint16_t txlen;

//    txlen = sprintf(txbuf, "AT+BLESCAN=1,3,1,\"%s\"\r\n", ble_paired_device);
    txlen = sprintf(txbuf, "AT+BLESCAN=1,3\r\n");
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <a_txblescan2+0x30>)
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <a_txblescan2+0x34>)
 8004dde:	0011      	movs	r1, r2
 8004de0:	0018      	movs	r0, r3
 8004de2:	f00c fc8f 	bl	8011704 <siprintf>
 8004de6:	0002      	movs	r2, r0
 8004de8:	1dbb      	adds	r3, r7, #6
 8004dea:	801a      	strh	r2, [r3, #0]
    esp_transmit(txbuf, txlen);
 8004dec:	1dbb      	adds	r3, r7, #6
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <a_txblescan2+0x34>)
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fe fd21 	bl	800383c <esp_transmit>
    return;
 8004dfa:	46c0      	nop			; (mov r8, r8)
}
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	0801363c 	.word	0x0801363c
 8004e08:	200009c4 	.word	0x200009c4

08004e0c <a_txblescanp>:
 *                               --------
 *
 */

static void a_txblescanp(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLESCANPARAM=0,0,0,100,50\r\n", 30);
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <a_txblescanp+0x14>)
 8004e12:	211e      	movs	r1, #30
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fe fd11 	bl	800383c <esp_transmit>
    return;
 8004e1a:	46c0      	nop			; (mov r8, r8)
}
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	08013650 	.word	0x08013650

08004e24 <a_txblesecp>:
 *                               --------
 *
 */

static void a_txblesecp(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLESECPARAM=1,4,16,3,3\r\n", 27);
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <a_txblesecp+0x14>)
 8004e2a:	211b      	movs	r1, #27
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f7fe fd05 	bl	800383c <esp_transmit>
    return;
 8004e32:	46c0      	nop			; (mov r8, r8)
}
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	08013670 	.word	0x08013670

08004e3c <a_txblesecp2>:
 *                               --------
 *
 */

static void a_txblesecp2(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)"AT+BLESECPARAM=13,4,16,3,3\r\n", 28);
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <a_txblesecp2+0x14>)
 8004e42:	211c      	movs	r1, #28
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fe fcf9 	bl	800383c <esp_transmit>
    return;
 8004e4a:	46c0      	nop			; (mov r8, r8)
}
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	0801368c 	.word	0x0801368c

08004e54 <a_txbleserial>:
 *                               --------
 *
 */

static void a_txbleserial(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0

    esp_transmit((uint8_t *)"AT+BLEGATTCRD=0,3,3\r\n", 21);
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <a_txbleserial+0x14>)
 8004e5a:	2115      	movs	r1, #21
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fe fced 	bl	800383c <esp_transmit>
    return;
 8004e62:	46c0      	nop			; (mov r8, r8)
}
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	080136ac 	.word	0x080136ac

08004e6c <a_txstartrecs>:
 *                               --------
 *
 */

static void a_txstartrecs(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
    esp_transmit((uint8_t *)msgstrecs, sizeof(msgstrecs));
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <a_txstartrecs+0x14>)
 8004e72:	2107      	movs	r1, #7
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7fe fce1 	bl	800383c <esp_transmit>
    return;
 8004e7a:	46c0      	nop			; (mov r8, r8)
}
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	08015694 	.word	0x08015694

08004e84 <a_writerecs>:
 *                               --------
 *
 */

static void a_writerecs(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
    store_records_to_flash(counter);
 8004e88:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <a_writerecs+0x18>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7fc fca2 	bl	80017d8 <store_records_to_flash>
    return;
 8004e94:	46c0      	nop			; (mov r8, r8)
}
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	200008bc 	.word	0x200008bc

08004ea0 <compare>:
 *
 * return - none
 */

static uint32_t compare(uint32_t index, uint8_t *response, uint32_t count)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t stat;

    stat = 1;
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e010      	b.n	8004ed8 <compare+0x38>
    {

        if (response[i] != rcv_buffer[i + index])
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	18d3      	adds	r3, r2, r3
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	6979      	ldr	r1, [r7, #20]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	18cb      	adds	r3, r1, r3
 8004ec4:	4909      	ldr	r1, [pc, #36]	; (8004eec <compare+0x4c>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d002      	beq.n	8004ed2 <compare+0x32>
        {
            stat = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
            break;
 8004ed0:	e006      	b.n	8004ee0 <compare+0x40>
    for (i = 0; i < count; i++)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3ea      	bcc.n	8004eb6 <compare+0x16>
        }

    }

    return stat;
 8004ee0:	693b      	ldr	r3, [r7, #16]
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	b006      	add	sp, #24
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	200008c0 	.word	0x200008c0

08004ef0 <esp_rcv_ih>:
 *
 * return - none
 */

static void esp_rcv_ih(uint8_t stat, uint32_t count)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	0002      	movs	r2, r0
 8004ef8:	6039      	str	r1, [r7, #0]
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	701a      	strb	r2, [r3, #0]
    rcv_status = stat;
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <esp_rcv_ih+0x24>)
 8004f00:	1dfa      	adds	r2, r7, #7
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	701a      	strb	r2, [r3, #0]
    rcv_count = count;
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <esp_rcv_ih+0x28>)
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	601a      	str	r2, [r3, #0]
    return;
 8004f0c:	46c0      	nop			; (mov r8, r8)
}
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b002      	add	sp, #8
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200008a8 	.word	0x200008a8
 8004f18:	200008b0 	.word	0x200008b0

08004f1c <state_trace>:
 *
 * return - none
 */

static void state_trace(uint32_t evnum)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
    if (esp_stmachine.sms_curstate != oldstate)
    {
//        debug_printf(DBGLVL_MAX, (uint8_t *)"ESPAT STATE: %u -> %u, EVENT %u\r\n", oldstate, esp_stmachine.sms_curstate, evnum);
    }

    oldstate = esp_stmachine.sms_curstate;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <state_trace+0x18>)
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <state_trace+0x1c>)
 8004f2a:	601a      	str	r2, [r3, #0]
    return;
 8004f2c:	46c0      	nop			; (mov r8, r8)
}
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	20001fa4 	.word	0x20001fa4
 8004f38:	200008b8 	.word	0x200008b8

08004f3c <gsm_answer>:
 *
 * return - none
 */

uint8_t gsm_answer(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
    return callanswer;
 8004f40:	4b02      	ldr	r3, [pc, #8]	; (8004f4c <gsm_answer+0x10>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
}
 8004f44:	0018      	movs	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20000a45 	.word	0x20000a45

08004f50 <gsm_init>:
 *
 * return - none
 */

void gsm_init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
    gsm_stmachine.sms_stable = (S_TABLE **)&state_table;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <gsm_init+0x30>)
 8004f56:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <gsm_init+0x34>)
 8004f58:	601a      	str	r2, [r3, #0]
    gsm_stmachine.sms_curstate = S_INIT;
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <gsm_init+0x30>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
    gsm_stmachine.sms_debug = &state_trace;
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <gsm_init+0x30>)
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <gsm_init+0x38>)
 8004f64:	609a      	str	r2, [r3, #8]
    oldstate = S_INIT;
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <gsm_init+0x3c>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
    callanswer = CA_NONE;
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <gsm_init+0x40>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
    callrequest = CR_NONE;
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <gsm_init+0x44>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
    return;
 8004f78:	46c0      	nop			; (mov r8, r8)
}
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20001fb0 	.word	0x20001fb0
 8004f84:	0801749c 	.word	0x0801749c
 8004f88:	08006f55 	.word	0x08006f55
 8004f8c:	20000a5c 	.word	0x20000a5c
 8004f90:	20000a45 	.word	0x20000a45
 8004f94:	20000a46 	.word	0x20000a46

08004f98 <gsm_request>:
 *
 * return - none
 */

void gsm_request(uint8_t req)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	0002      	movs	r2, r0
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	701a      	strb	r2, [r3, #0]
    callrequest = req;
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <gsm_request+0x24>)
 8004fa6:	1dfa      	adds	r2, r7, #7
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	701a      	strb	r2, [r3, #0]
    callanswer = CA_INPROGRESS;
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <gsm_request+0x28>)
 8004fae:	2202      	movs	r2, #2
 8004fb0:	701a      	strb	r2, [r3, #0]
    return;
 8004fb2:	46c0      	nop			; (mov r8, r8)
}
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20000a46 	.word	0x20000a46
 8004fc0:	20000a45 	.word	0x20000a45

08004fc4 <gsm_timer_ih>:
 *
 * return - none
 */

void gsm_timer_ih()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0

    if (timer)
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <gsm_timer_ih+0x20>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <gsm_timer_ih+0x18>
    {
        timer--;
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <gsm_timer_ih+0x20>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <gsm_timer_ih+0x20>)
 8004fd8:	601a      	str	r2, [r3, #0]
    }

    return;
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	46c0      	nop			; (mov r8, r8)
}
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	20000a58 	.word	0x20000a58

08004fe8 <e_always>:
 *                            --------
 *
 */

static uint32_t e_always(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
    return 1;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <e_eof>:
 *                            --------
 *
 */

static uint32_t e_eof(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (mem_read_address >= mem_write_address)
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <e_eof+0x28>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <e_eof+0x2c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d302      	bcc.n	800500c <e_eof+0x18>
    {
        stat = 1;
 8005006:	2301      	movs	r3, #1
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	e001      	b.n	8005010 <e_eof+0x1c>
    }

    else
    {
        stat = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8005010:	687b      	ldr	r3, [r7, #4]
}
 8005012:	0018      	movs	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	b002      	add	sp, #8
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	2000000c 	.word	0x2000000c
 8005020:	20000008 	.word	0x20000008

08005024 <e_equalcvs>:
 *                            --------
 *
 */

static uint32_t e_equalcvs(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
    return desired_reported_cv_matched_flag != 0;
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <e_equalcvs+0x14>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	1e5a      	subs	r2, r3, #1
 800502e:	4193      	sbcs	r3, r2
 8005030:	b2db      	uxtb	r3, r3
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20001a32 	.word	0x20001a32

0800503c <e_outidle>:
 *                            --------
 *
 */

static uint32_t e_outidle(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = quec_outcompl();
 8005042:	f002 fdc1 	bl	8007bc8 <quec_outcompl>
 8005046:	0003      	movs	r3, r0
 8005048:	607b      	str	r3, [r7, #4]
    return stat;
 800504a:	687b      	ldr	r3, [r7, #4]
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <e_pingok>:
 *                            --------
 *
 */

static uint32_t e_pingok(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0

    stat = ca_certificate_flag |
           client_certificate_flag |
           client_key_flag |
           configuration_service_flag |
           update_module_firmware_flag |
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <e_pingok+0x44>)
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <e_pingok+0x48>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	b2da      	uxtb	r2, r3
 8005066:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <e_pingok+0x4c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <e_pingok+0x50>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	4313      	orrs	r3, r2
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <e_pingok+0x54>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <e_pingok+0x58>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	4313      	orrs	r3, r2
 8005084:	b2db      	uxtb	r3, r3
    stat = ca_certificate_flag |
 8005086:	607b      	str	r3, [r7, #4]
           update_device_firmware_flag;

    return stat == 0;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	425a      	negs	r2, r3
 800508c:	4153      	adcs	r3, r2
 800508e:	b2db      	uxtb	r3, r3
}
 8005090:	0018      	movs	r0, r3
 8005092:	46bd      	mov	sp, r7
 8005094:	b002      	add	sp, #8
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20001f18 	.word	0x20001f18
 800509c:	20001f1a 	.word	0x20001f1a
 80050a0:	20001f1b 	.word	0x20001f1b
 80050a4:	20001dbe 	.word	0x20001dbe
 80050a8:	20001dc7 	.word	0x20001dc7
 80050ac:	20001f19 	.word	0x20001f19

080050b0 <e_rcverr>:
 *                            --------
 *
 */

static uint32_t e_rcverr(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0

   if ((rcv_status != QS_INPROGRESS) && (rcv_status != QS_OK))
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <e_rcverr+0x30>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d00d      	beq.n	80050d8 <e_rcverr+0x28>
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <e_rcverr+0x30>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <e_rcverr+0x28>
   {
       debug_printf(DBGLVL_MAX, (uint8_t *)"GSM RCV STAT: %d\r\n", rcv_status);
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <e_rcverr+0x30>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	001a      	movs	r2, r3
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <e_rcverr+0x34>)
 80050cc:	0019      	movs	r1, r3
 80050ce:	2004      	movs	r0, #4
 80050d0:	f7fd fb40 	bl	8002754 <debug_printf>
       return 1;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <e_rcverr+0x2a>
   }

   return 0;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	0018      	movs	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000a44 	.word	0x20000a44
 80050e4:	080136c4 	.word	0x080136c4

080050e8 <e_rcvovflow>:
 *                            -----------
 *
 */

static uint32_t e_rcvovflow(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
   return rcv_status == QS_OVERFLOW;
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <e_rcvovflow+0x18>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	3b03      	subs	r3, #3
 80050f2:	425a      	negs	r2, r3
 80050f4:	4153      	adcs	r3, r2
 80050f6:	b2db      	uxtb	r3, r3
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	20000a44 	.word	0x20000a44

08005104 <e_rcvok>:
 *                            -------
 *
 */

static uint32_t e_rcvok(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
   return rcv_status == QS_OK;
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <e_rcvok+0x14>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	425a      	negs	r2, r3
 800510e:	4153      	adcs	r3, r2
 8005110:	b2db      	uxtb	r3, r3
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000a44 	.word	0x20000a44

0800511c <e_rcvtimout>:
 *                            -----------
 *
 */

static uint32_t e_rcvtimout(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
   return rcv_status == QS_TIMEOUT;
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <e_rcvtimout+0x18>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	3b04      	subs	r3, #4
 8005126:	425a      	negs	r2, r3
 8005128:	4153      	adcs	r3, r2
 800512a:	b2db      	uxtb	r3, r3
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	20000a44 	.word	0x20000a44

08005138 <e_reqclock>:
 *                            -----------
 *
 */

static uint32_t e_reqclock(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_CLOCK)
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <e_reqclock+0x28>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b06      	cmp	r3, #6
 8005144:	d105      	bne.n	8005152 <e_reqclock+0x1a>
    {
        callrequest = CR_NONE;
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <e_reqclock+0x28>)
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
        stat = 1;
 800514c:	2301      	movs	r3, #1
 800514e:	607b      	str	r3, [r7, #4]
 8005150:	e001      	b.n	8005156 <e_reqclock+0x1e>
    }

    else
    {
        stat = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8005156:	687b      	ldr	r3, [r7, #4]
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000a46 	.word	0x20000a46

08005164 <e_reqconnect>:
 *                            -----------
 *
 */

static uint32_t e_reqconnect(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0

    uint32_t stat;

    if (callrequest == CR_CONNECT)
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <e_reqconnect+0x28>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d105      	bne.n	800517e <e_reqconnect+0x1a>
    {
        callrequest = CR_NONE;
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <e_reqconnect+0x28>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8005178:	2301      	movs	r3, #1
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e001      	b.n	8005182 <e_reqconnect+0x1e>
    }

    else
    {
        stat = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8005182:	687b      	ldr	r3, [r7, #4]
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000a46 	.word	0x20000a46

08005190 <e_reqdisconn>:
 *                            -----------
 *
 */

static uint32_t e_reqdisconn(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0

    uint32_t stat;

    if (callrequest == CR_DISCONNECT)
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <e_reqdisconn+0x28>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b0b      	cmp	r3, #11
 800519c:	d105      	bne.n	80051aa <e_reqdisconn+0x1a>
    {
        callrequest = CR_NONE;
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <e_reqdisconn+0x28>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
        stat = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	e001      	b.n	80051ae <e_reqdisconn+0x1e>
    }

    else
    {
        stat = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80051ae:	687b      	ldr	r3, [r7, #4]
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000a46 	.word	0x20000a46

080051bc <e_reqnone>:
 *                            -----------
 *
 */

static uint32_t e_reqnone(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
    return callrequest == CR_NONE;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <e_reqnone+0x14>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	425a      	negs	r2, r3
 80051c6:	4153      	adcs	r3, r2
 80051c8:	b2db      	uxtb	r3, r3
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000a46 	.word	0x20000a46

080051d4 <e_reqping>:
 *                            -----------
 *
 */

static uint32_t e_reqping(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_PING)
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <e_reqping+0x28>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d105      	bne.n	80051ee <e_reqping+0x1a>
    {
        callrequest = CR_NONE;
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <e_reqping+0x28>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
        stat = 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	e001      	b.n	80051f2 <e_reqping+0x1e>
    }

    else
    {
        stat = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80051f2:	687b      	ldr	r3, [r7, #4]
}
 80051f4:	0018      	movs	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000a46 	.word	0x20000a46

08005200 <e_reqpower>:
 *                            -----------
 *
 */

static uint32_t e_reqpower(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_POWERUP)
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <e_reqpower+0x28>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <e_reqpower+0x1a>
    {
        callrequest = CR_NONE;
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <e_reqpower+0x28>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	e001      	b.n	800521e <e_reqpower+0x1e>
    }

    else
    {
        stat = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800521e:	687b      	ldr	r3, [r7, #4]
}
 8005220:	0018      	movs	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	b002      	add	sp, #8
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000a46 	.word	0x20000a46

0800522c <e_reqpwrdown>:
 *                            -----------
 *
 */

static uint32_t e_reqpwrdown(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_POWERDOWN)
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <e_reqpwrdown+0x28>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d105      	bne.n	8005246 <e_reqpwrdown+0x1a>
    {
        callrequest = CR_NONE;
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <e_reqpwrdown+0x28>)
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8005240:	2301      	movs	r3, #1
 8005242:	607b      	str	r3, [r7, #4]
 8005244:	e001      	b.n	800524a <e_reqpwrdown+0x1e>
    }

    else
    {
        stat = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800524a:	687b      	ldr	r3, [r7, #4]
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b002      	add	sp, #8
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000a46 	.word	0x20000a46

08005258 <e_reqrdtwin>:
 *                            -----------
 *
 */

static uint32_t e_reqrdtwin(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_RDTWIN)
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <e_reqrdtwin+0x28>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d105      	bne.n	8005272 <e_reqrdtwin+0x1a>
    {
        callrequest = CR_NONE;
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <e_reqrdtwin+0x28>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
        stat = 1;
 800526c:	2301      	movs	r3, #1
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	e001      	b.n	8005276 <e_reqrdtwin+0x1e>
    }

    else
    {
        stat = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8005276:	687b      	ldr	r3, [r7, #4]
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000a46 	.word	0x20000a46

08005284 <e_reqrecords>:
 *                            -----------
 *
 */

static uint32_t e_reqrecords(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_SENDRECORDS)
 800528a:	4b08      	ldr	r3, [pc, #32]	; (80052ac <e_reqrecords+0x28>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b07      	cmp	r3, #7
 8005290:	d105      	bne.n	800529e <e_reqrecords+0x1a>
    {
        callrequest = CR_NONE;
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <e_reqrecords+0x28>)
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
        stat = 1;
 8005298:	2301      	movs	r3, #1
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	e001      	b.n	80052a2 <e_reqrecords+0x1e>
    }

    else
    {
        stat = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80052a2:	687b      	ldr	r3, [r7, #4]
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000a46 	.word	0x20000a46

080052b0 <e_requpdcfg>:
 *                            -----------
 *
 */

static uint32_t e_requpdcfg(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_UPDCONFIG)
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <e_requpdcfg+0x28>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	d105      	bne.n	80052ca <e_requpdcfg+0x1a>
    {
        callrequest = CR_NONE;
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <e_requpdcfg+0x28>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
        stat = 1;
 80052c4:	2301      	movs	r3, #1
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e001      	b.n	80052ce <e_requpdcfg+0x1e>
    }

    else
    {
        stat = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80052ce:	687b      	ldr	r3, [r7, #4]
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000a46 	.word	0x20000a46

080052dc <e_requpdtwin>:
 *                            -----------
 *
 */

static uint32_t e_requpdtwin(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (callrequest == CR_UPDTWIN)
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <e_requpdtwin+0x28>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b0a      	cmp	r3, #10
 80052e8:	d105      	bne.n	80052f6 <e_requpdtwin+0x1a>
    {
        callrequest = CR_NONE;
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <e_requpdtwin+0x28>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
        stat = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e001      	b.n	80052fa <e_requpdtwin+0x1e>
    }

    else
    {
        stat = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80052fa:	687b      	ldr	r3, [r7, #4]
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000a46 	.word	0x20000a46

08005308 <e_rxccid>:
 *                            --------
 *
 */

static uint32_t e_rxccid(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QCCID:", 7);
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <e_rxccid+0x20>)
 8005310:	2207      	movs	r2, #7
 8005312:	0019      	movs	r1, r3
 8005314:	2000      	movs	r0, #0
 8005316:	f001 fddf 	bl	8006ed8 <compare>
 800531a:	0003      	movs	r3, r0
 800531c:	607b      	str	r3, [r7, #4]
    return stat;
 800531e:	687b      	ldr	r3, [r7, #4]
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}
 8005328:	080136d8 	.word	0x080136d8

0800532c <e_rxconnect>:
 *                            --------
 *
 */

static uint32_t e_rxconnect(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"CONNECT", 7);
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <e_rxconnect+0x20>)
 8005334:	2207      	movs	r2, #7
 8005336:	0019      	movs	r1, r3
 8005338:	2000      	movs	r0, #0
 800533a:	f001 fdcd 	bl	8006ed8 <compare>
 800533e:	0003      	movs	r3, r0
 8005340:	607b      	str	r3, [r7, #4]
    return stat;
 8005342:	687b      	ldr	r3, [r7, #4]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}
 800534c:	080136e0 	.word	0x080136e0

08005350 <e_rxconnok>:
 *                            ---------
 *
 */

static uint32_t e_rxconnok(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTCONN: 0,0,0", 15);
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <e_rxconnok+0x20>)
 8005358:	220f      	movs	r2, #15
 800535a:	0019      	movs	r1, r3
 800535c:	2000      	movs	r0, #0
 800535e:	f001 fdbb 	bl	8006ed8 <compare>
 8005362:	0003      	movs	r3, r0
 8005364:	607b      	str	r3, [r7, #4]
    return stat;
 8005366:	687b      	ldr	r3, [r7, #4]
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b002      	add	sp, #8
 800536e:	bd80      	pop	{r7, pc}
 8005370:	080136e8 	.word	0x080136e8

08005374 <e_rxcr>:
 *                            ------
 *
 */

static uint32_t e_rxcr(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
    return rcv_buffer[0] == 0x0D;
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <e_rxcr+0x18>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	3b0d      	subs	r3, #13
 800537e:	425a      	negs	r2, r3
 8005380:	4153      	adcs	r3, r2
 8005382:	b2db      	uxtb	r3, r3
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000a68 	.word	0x20000a68

08005390 <e_rxcsq>:
 *                            ------
 *
 */

static uint32_t e_rxcsq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+CSQ:", 5);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <e_rxcsq+0x20>)
 8005398:	2205      	movs	r2, #5
 800539a:	0019      	movs	r1, r3
 800539c:	2000      	movs	r0, #0
 800539e:	f001 fd9b 	bl	8006ed8 <compare>
 80053a2:	0003      	movs	r3, r0
 80053a4:	607b      	str	r3, [r7, #4]
    return stat;
 80053a6:	687b      	ldr	r3, [r7, #4]
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b002      	add	sp, #8
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	08013708 	.word	0x08013708

080053b4 <e_rxgt>:
 *                            ------
 *
 */

static uint32_t e_rxgt(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0

    if ((rcv_count > 0) && (rcv_buffer[0] == '>'))
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <e_rxgt+0x20>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <e_rxgt+0x18>
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <e_rxgt+0x24>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b3e      	cmp	r3, #62	; 0x3e
 80053c6:	d101      	bne.n	80053cc <e_rxgt+0x18>
    {
        return 1;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <e_rxgt+0x1a>
    }

    return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000a50 	.word	0x20000a50
 80053d8:	20000a68 	.word	0x20000a68

080053dc <e_rximei>:
 *                            ---------
 *
 */

static uint32_t e_rximei(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (rcv_count >= 16)
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <e_rximei+0x24>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b0f      	cmp	r3, #15
 80053e8:	d902      	bls.n	80053f0 <e_rximei+0x14>
    {
        stat = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	e001      	b.n	80053f4 <e_rximei+0x18>
    }

    else
    {
        stat = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	607b      	str	r3, [r7, #4]
    }

    return stat;
 80053f4:	687b      	ldr	r3, [r7, #4]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b002      	add	sp, #8
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	20000a50 	.word	0x20000a50

08005404 <e_rximsi>:
 *                            ---------
 *
 */

static uint32_t e_rximsi(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (rcv_count >= 16)
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <e_rximsi+0x24>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d902      	bls.n	8005418 <e_rximsi+0x14>
    {
        stat = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	e001      	b.n	800541c <e_rximsi+0x18>
    }

    else
    {
        stat = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800541c:	687b      	ldr	r3, [r7, #4]
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000a50 	.word	0x20000a50

0800542c <e_rxjsonend>:
 *                            --------
 *
 */

static uint32_t e_rxjsonend(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
    uint32_t stat;
    uint32_t i;

    stat = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	607b      	str	r3, [r7, #4]

    for (i = 0; i < (rcv_count - 1); i++)
 8005436:	2300      	movs	r3, #0
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	e011      	b.n	8005460 <e_rxjsonend+0x34>
    {

       if ((rcv_buffer[i] == '}') && (rcv_buffer[i + 1] == '\"'))
 800543c:	4a0e      	ldr	r2, [pc, #56]	; (8005478 <e_rxjsonend+0x4c>)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	18d3      	adds	r3, r2, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b7d      	cmp	r3, #125	; 0x7d
 8005446:	d108      	bne.n	800545a <e_rxjsonend+0x2e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	3301      	adds	r3, #1
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <e_rxjsonend+0x4c>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	2b22      	cmp	r3, #34	; 0x22
 8005452:	d102      	bne.n	800545a <e_rxjsonend+0x2e>
       {
           stat = 1;
 8005454:	2301      	movs	r3, #1
 8005456:	607b      	str	r3, [r7, #4]
           break;
 8005458:	e008      	b.n	800546c <e_rxjsonend+0x40>
    for (i = 0; i < (rcv_count - 1); i++)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	3301      	adds	r3, #1
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <e_rxjsonend+0x50>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d3e7      	bcc.n	800543c <e_rxjsonend+0x10>
       }

    }

    return stat;
 800546c:	687b      	ldr	r3, [r7, #4]
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b002      	add	sp, #8
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	20000a68 	.word	0x20000a68
 800547c:	20000a50 	.word	0x20000a50

08005480 <e_rxok>:
 *                            ------
 *
 */

static uint32_t e_rxok(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0

    if ((rcv_count == 3) && (rcv_buffer[0] == 'O') && (rcv_buffer[1] == 'K'))
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <e_rxok+0x28>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d109      	bne.n	80054a0 <e_rxok+0x20>
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <e_rxok+0x2c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b4f      	cmp	r3, #79	; 0x4f
 8005492:	d105      	bne.n	80054a0 <e_rxok+0x20>
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <e_rxok+0x2c>)
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b4b      	cmp	r3, #75	; 0x4b
 800549a:	d101      	bne.n	80054a0 <e_rxok+0x20>
    {
        return 1;
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <e_rxok+0x22>
    }

    return 0;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000a50 	.word	0x20000a50
 80054ac:	20000a68 	.word	0x20000a68

080054b0 <e_rxopenok>:
 *                            ---------
 *
 */

static uint32_t e_rxopenok(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTOPEN: 0,0", 12);
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <e_rxopenok+0x20>)
 80054b8:	220c      	movs	r2, #12
 80054ba:	0019      	movs	r1, r3
 80054bc:	2000      	movs	r0, #0
 80054be:	f001 fd0b 	bl	8006ed8 <compare>
 80054c2:	0003      	movs	r3, r0
 80054c4:	607b      	str	r3, [r7, #4]
    return stat;
 80054c6:	687b      	ldr	r3, [r7, #4]
}
 80054c8:	0018      	movs	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08013710 	.word	0x08013710

080054d4 <e_rxqcfg>:
 *                            ------
 *
 */

static uint32_t e_rxqcfg(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QCFG:", 6);
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <e_rxqcfg+0x20>)
 80054dc:	2206      	movs	r2, #6
 80054de:	0019      	movs	r1, r3
 80054e0:	2000      	movs	r0, #0
 80054e2:	f001 fcf9 	bl	8006ed8 <compare>
 80054e6:	0003      	movs	r3, r0
 80054e8:	607b      	str	r3, [r7, #4]
    return stat;
 80054ea:	687b      	ldr	r3, [r7, #4]
}
 80054ec:	0018      	movs	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b002      	add	sp, #8
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	08013720 	.word	0x08013720

080054f8 <e_rxqhtget>:
 *                            ------
 *
 */

static uint32_t e_rxqhtget(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QHTTPGET: 0,", 13);
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <e_rxqhtget+0x20>)
 8005500:	220d      	movs	r2, #13
 8005502:	0019      	movs	r1, r3
 8005504:	2000      	movs	r0, #0
 8005506:	f001 fce7 	bl	8006ed8 <compare>
 800550a:	0003      	movs	r3, r0
 800550c:	607b      	str	r3, [r7, #4]
    return stat;
 800550e:	687b      	ldr	r3, [r7, #4]
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08013728 	.word	0x08013728

0800551c <e_rxqhtpost>:
 *                            ------
 *
 */

static uint32_t e_rxqhtpost(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QHTTPPOST: 0,", 14);
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <e_rxqhtpost+0x20>)
 8005524:	220e      	movs	r2, #14
 8005526:	0019      	movs	r1, r3
 8005528:	2000      	movs	r0, #0
 800552a:	f001 fcd5 	bl	8006ed8 <compare>
 800552e:	0003      	movs	r3, r0
 8005530:	607b      	str	r3, [r7, #4]
    return stat;
 8005532:	687b      	ldr	r3, [r7, #4]
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}
 800553c:	08013738 	.word	0x08013738

08005540 <e_rxqhtrdfile>:
 *                            ------
 *
 */

static uint32_t e_rxqhtrdfile(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QHTTPREADFILE: 0", 17);
 8005546:	4b06      	ldr	r3, [pc, #24]	; (8005560 <e_rxqhtrdfile+0x20>)
 8005548:	2211      	movs	r2, #17
 800554a:	0019      	movs	r1, r3
 800554c:	2000      	movs	r0, #0
 800554e:	f001 fcc3 	bl	8006ed8 <compare>
 8005552:	0003      	movs	r3, r0
 8005554:	607b      	str	r3, [r7, #4]
    return stat;
 8005556:	687b      	ldr	r3, [r7, #4]
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}
 8005560:	08013748 	.word	0x08013748

08005564 <e_rxqmtclose>:
 *                            ------
 *
 */

static uint32_t e_rxqmtclose(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTCLOSE:", 10);
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <e_rxqmtclose+0x20>)
 800556c:	220a      	movs	r2, #10
 800556e:	0019      	movs	r1, r3
 8005570:	2000      	movs	r0, #0
 8005572:	f001 fcb1 	bl	8006ed8 <compare>
 8005576:	0003      	movs	r3, r0
 8005578:	607b      	str	r3, [r7, #4]
    return stat;
 800557a:	687b      	ldr	r3, [r7, #4]
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0801376c 	.word	0x0801376c

08005588 <e_rxqmtdisc>:
 *                            ------
 *
 */

static uint32_t e_rxqmtdisc(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTDISC:", 9);
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <e_rxqmtdisc+0x20>)
 8005590:	2209      	movs	r2, #9
 8005592:	0019      	movs	r1, r3
 8005594:	2000      	movs	r0, #0
 8005596:	f001 fc9f 	bl	8006ed8 <compare>
 800559a:	0003      	movs	r3, r0
 800559c:	607b      	str	r3, [r7, #4]
    return stat;
 800559e:	687b      	ldr	r3, [r7, #4]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	08013778 	.word	0x08013778

080055ac <e_rxqmtpub>:
 *                            ------
 *
 */

static uint32_t e_rxqmtpub(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTPUB:", 8);
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <e_rxqmtpub+0x20>)
 80055b4:	2208      	movs	r2, #8
 80055b6:	0019      	movs	r1, r3
 80055b8:	2000      	movs	r0, #0
 80055ba:	f001 fc8d 	bl	8006ed8 <compare>
 80055be:	0003      	movs	r3, r0
 80055c0:	607b      	str	r3, [r7, #4]
    return stat;
 80055c2:	687b      	ldr	r3, [r7, #4]
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	08013784 	.word	0x08013784

080055d0 <e_rxqmtrecv>:
 *                            ------
 *
 */

static uint32_t e_rxqmtrecv(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTRECV: ", 10);
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <e_rxqmtrecv+0x20>)
 80055d8:	220a      	movs	r2, #10
 80055da:	0019      	movs	r1, r3
 80055dc:	2000      	movs	r0, #0
 80055de:	f001 fc7b 	bl	8006ed8 <compare>
 80055e2:	0003      	movs	r3, r0
 80055e4:	607b      	str	r3, [r7, #4]
    return stat;
 80055e6:	687b      	ldr	r3, [r7, #4]
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b002      	add	sp, #8
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08013790 	.word	0x08013790

080055f4 <e_rxqmtsub>:
 *                            ------
 *
 */

static uint32_t e_rxqmtsub(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = compare(0, (uint8_t *)"+QMTSUB:", 8);
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <e_rxqmtsub+0x20>)
 80055fc:	2208      	movs	r2, #8
 80055fe:	0019      	movs	r1, r3
 8005600:	2000      	movs	r0, #0
 8005602:	f001 fc69 	bl	8006ed8 <compare>
 8005606:	0003      	movs	r3, r0
 8005608:	607b      	str	r3, [r7, #4]
    return stat;
 800560a:	687b      	ldr	r3, [r7, #4]
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b002      	add	sp, #8
 8005612:	bd80      	pop	{r7, pc}
 8005614:	080137a8 	.word	0x080137a8

08005618 <e_rxtime>:
 *                            -------
 *
 */

static uint32_t e_rxtime(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
    uint32_t stat;

    stat = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]

    if (rcv_count >= 29)
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <e_rxtime+0x2c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b1c      	cmp	r3, #28
 8005628:	d907      	bls.n	800563a <e_rxtime+0x22>
    {
        stat = compare(0, (uint8_t *)"+QNTP: 0,", 9);
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <e_rxtime+0x30>)
 800562c:	2209      	movs	r2, #9
 800562e:	0019      	movs	r1, r3
 8005630:	2000      	movs	r0, #0
 8005632:	f001 fc51 	bl	8006ed8 <compare>
 8005636:	0003      	movs	r3, r0
 8005638:	607b      	str	r3, [r7, #4]
    }

    return stat;
 800563a:	687b      	ldr	r3, [r7, #4]
}
 800563c:	0018      	movs	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	b002      	add	sp, #8
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000a50 	.word	0x20000a50
 8005648:	080137b4 	.word	0x080137b4

0800564c <e_timeout>:
 *                            ---------
 *
 */

static uint32_t e_timeout(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0

    if (timer == 0)
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <e_timeout+0x18>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <e_timeout+0x10>
    {
        return 1;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <e_timeout+0x12>
    }

    return 0;
 800565c:	2300      	movs	r3, #0
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	20000a58 	.word	0x20000a58

08005668 <e_updcacert>:
 *                            ---------
 *
 */

static uint32_t e_updcacert(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
    return ca_certificate_flag != 0;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <e_updcacert+0x14>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	1e5a      	subs	r2, r3, #1
 8005672:	4193      	sbcs	r3, r2
 8005674:	b2db      	uxtb	r3, r3
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20001f18 	.word	0x20001f18

08005680 <e_updclcert>:
 *                            ---------
 *
 */

static uint32_t e_updclcert(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
    return client_certificate_flag != 0;
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <e_updclcert+0x14>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	1e5a      	subs	r2, r3, #1
 800568a:	4193      	sbcs	r3, r2
 800568c:	b2db      	uxtb	r3, r3
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20001f1a 	.word	0x20001f1a

08005698 <e_updclkey>:
 *                            ---------
 *
 */

static uint32_t e_updclkey(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
    return client_key_flag != 0;
 800569c:	4b03      	ldr	r3, [pc, #12]	; (80056ac <e_updclkey+0x14>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	1e5a      	subs	r2, r3, #1
 80056a2:	4193      	sbcs	r3, r2
 80056a4:	b2db      	uxtb	r3, r3
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20001f1b 	.word	0x20001f1b

080056b0 <e_updfver>:
 *                            ---------
 *
 */

static uint32_t e_updfver(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
    return update_device_firmware_flag != 0;
 80056b4:	4b03      	ldr	r3, [pc, #12]	; (80056c4 <e_updfver+0x14>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	1e5a      	subs	r2, r3, #1
 80056ba:	4193      	sbcs	r3, r2
 80056bc:	b2db      	uxtb	r3, r3
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	20001f19 	.word	0x20001f19

080056c8 <e_updmver>:
 *                            ---------
 *
 */

static uint32_t e_updmver(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
    return update_module_firmware_flag != 0;
 80056cc:	4b03      	ldr	r3, [pc, #12]	; (80056dc <e_updmver+0x14>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	4193      	sbcs	r3, r2
 80056d4:	b2db      	uxtb	r3, r3
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20001dc7 	.word	0x20001dc7

080056e0 <e_updsconfig>:
 *                            ---------
 *
 */

static uint32_t e_updsconfig(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
    return configuration_service_flag != 0;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <e_updsconfig+0x14>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	1e5a      	subs	r2, r3, #1
 80056ea:	4193      	sbcs	r3, r2
 80056ec:	b2db      	uxtb	r3, r3
}
 80056ee:	0018      	movs	r0, r3
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20001dbe 	.word	0x20001dbe

080056f8 <a_accumjson>:
 *                               ---------
 *
 */

static void a_accumjson(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
    uint32_t i;

    i = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]

    if (json_count == 0)
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <a_accumjson+0x7c>)
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d12a      	bne.n	8005760 <a_accumjson+0x68>
    {

        for (i = 0; i < (rcv_count - 1); i++)
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	e00e      	b.n	800572e <a_accumjson+0x36>
        {

            if ((rcv_buffer[i] == '{') || (rcv_buffer[i] == 0x0D))
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <a_accumjson+0x80>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b7b      	cmp	r3, #123	; 0x7b
 800571a:	d021      	beq.n	8005760 <a_accumjson+0x68>
 800571c:	4a16      	ldr	r2, [pc, #88]	; (8005778 <a_accumjson+0x80>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	18d3      	adds	r3, r2, r3
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b0d      	cmp	r3, #13
 8005726:	d01b      	beq.n	8005760 <a_accumjson+0x68>
        for (i = 0; i < (rcv_count - 1); i++)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3301      	adds	r3, #1
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <a_accumjson+0x84>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3b01      	subs	r3, #1
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d3ea      	bcc.n	8005710 <a_accumjson+0x18>

        }

    }

    for (; i < (rcv_count - 1); i++)
 800573a:	e011      	b.n	8005760 <a_accumjson+0x68>
    {
        json_response[json_count] = rcv_buffer[i];
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <a_accumjson+0x7c>)
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	0019      	movs	r1, r3
 8005742:	4a0d      	ldr	r2, [pc, #52]	; (8005778 <a_accumjson+0x80>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	18d3      	adds	r3, r2, r3
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <a_accumjson+0x88>)
 800574c:	545a      	strb	r2, [r3, r1]
        json_count++;
 800574e:	4b09      	ldr	r3, [pc, #36]	; (8005774 <a_accumjson+0x7c>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <a_accumjson+0x7c>)
 8005758:	801a      	strh	r2, [r3, #0]
    for (; i < (rcv_count - 1); i++)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3301      	adds	r3, #1
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <a_accumjson+0x84>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d3e7      	bcc.n	800573c <a_accumjson+0x44>
    }

    return;
 800576c:	46c0      	nop			; (mov r8, r8)
}
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20001f16 	.word	0x20001f16
 8005778:	20000a68 	.word	0x20000a68
 800577c:	20000a50 	.word	0x20000a50
 8005780:	20001ad4 	.word	0x20001ad4

08005784 <a_ansbadcfg>:
 *                               ---------
 *
 */

static void a_ansbadcfg(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
    callanswer = CA_BADCONFIG;
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <a_ansbadcfg+0x10>)
 800578a:	2209      	movs	r2, #9
 800578c:	701a      	strb	r2, [r3, #0]
    return;
 800578e:	46c0      	nop			; (mov r8, r8)
}
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000a45 	.word	0x20000a45

08005798 <a_ansconnected>:
 *                               ---------
 *
 */

static void a_ansconnected(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
    callanswer = CA_CONNECTED;
 800579c:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <a_ansconnected+0x10>)
 800579e:	2204      	movs	r2, #4
 80057a0:	701a      	strb	r2, [r3, #0]
    return;
 80057a2:	46c0      	nop			; (mov r8, r8)
}
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000a45 	.word	0x20000a45

080057ac <a_ansinprogress>:
 *                               ---------
 *
 */

static void a_ansinprogress(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
    callanswer = CA_INPROGRESS;
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <a_ansinprogress+0x10>)
 80057b2:	2202      	movs	r2, #2
 80057b4:	701a      	strb	r2, [r3, #0]
    return;
 80057b6:	46c0      	nop			; (mov r8, r8)
}
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000a45 	.word	0x20000a45

080057c0 <a_ansnopower>:
 *                               ---------
 *
 */

static void a_ansnopower(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
    callanswer = CA_NOTPOWERED;
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <a_ansnopower+0x10>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
    return;
 80057ca:	46c0      	nop			; (mov r8, r8)
}
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000a45 	.word	0x20000a45

080057d4 <a_anspowered>:
 *                               ---------
 *
 */

static void a_anspowered(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
    callanswer = CA_POWERED;
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <a_anspowered+0x10>)
 80057da:	2203      	movs	r2, #3
 80057dc:	701a      	strb	r2, [r3, #0]
    return;
 80057de:	46c0      	nop			; (mov r8, r8)
}
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000a45 	.word	0x20000a45

080057e8 <a_buildpost>:
 *                               ---------
 *
 */

static void a_buildpost(void)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af04      	add	r7, sp, #16
    int32_t txbuflen;

    txbuflen = sprintf(post_buffer, "POST /cs/%s HTTP/1.1\r\n", device_id);
 80057ee:	4a22      	ldr	r2, [pc, #136]	; (8005878 <a_buildpost+0x90>)
 80057f0:	4922      	ldr	r1, [pc, #136]	; (800587c <a_buildpost+0x94>)
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <a_buildpost+0x98>)
 80057f4:	0018      	movs	r0, r3
 80057f6:	f00b ff85 	bl	8011704 <siprintf>
 80057fa:	0003      	movs	r3, r0
 80057fc:	607b      	str	r3, [r7, #4]
    sprintf(&post_buffer[txbuflen], "%s", postmsg);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <a_buildpost+0x98>)
 8005802:	18d3      	adds	r3, r2, r3
 8005804:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <a_buildpost+0x9c>)
 8005806:	4920      	ldr	r1, [pc, #128]	; (8005888 <a_buildpost+0xa0>)
 8005808:	0018      	movs	r0, r3
 800580a:	f00b ff7b 	bl	8011704 <siprintf>
    postbuffer_count = txbuflen + (sizeof(postmsg) - 1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3381      	adds	r3, #129	; 0x81
 8005812:	001a      	movs	r2, r3
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <a_buildpost+0xa4>)
 8005816:	601a      	str	r2, [r3, #0]

	txbuflen = sprintf(&post_buffer[postbuffer_count],
 8005818:	4b1c      	ldr	r3, [pc, #112]	; (800588c <a_buildpost+0xa4>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <a_buildpost+0x98>)
 800581e:	18d0      	adds	r0, r2, r3
 8005820:	4c1b      	ldr	r4, [pc, #108]	; (8005890 <a_buildpost+0xa8>)
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <a_buildpost+0xac>)
 8005824:	491c      	ldr	r1, [pc, #112]	; (8005898 <a_buildpost+0xb0>)
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <a_buildpost+0xb4>)
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	0023      	movs	r3, r4
 800582c:	f00b ff6a 	bl	8011704 <siprintf>
 8005830:	0003      	movs	r3, r0
 8005832:	607b      	str	r3, [r7, #4]
	                   "{\"model\":\"%s\",\"sim\":\"%s\",\"imei\":\"%s\"",
					   blipgo_model,
					   ccid,
					   imei);
    postbuffer_count += txbuflen;
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <a_buildpost+0xa4>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	18d2      	adds	r2, r2, r3
 800583c:	4b13      	ldr	r3, [pc, #76]	; (800588c <a_buildpost+0xa4>)
 800583e:	601a      	str	r2, [r3, #0]

	txbuflen = sprintf(&post_buffer[postbuffer_count],
 8005840:	4b12      	ldr	r3, [pc, #72]	; (800588c <a_buildpost+0xa4>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b0e      	ldr	r3, [pc, #56]	; (8005880 <a_buildpost+0x98>)
 8005846:	18d0      	adds	r0, r2, r3
 8005848:	4c15      	ldr	r4, [pc, #84]	; (80058a0 <a_buildpost+0xb8>)
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <a_buildpost+0xbc>)
 800584c:	4916      	ldr	r1, [pc, #88]	; (80058a8 <a_buildpost+0xc0>)
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <a_buildpost+0xc4>)
 8005850:	9302      	str	r3, [sp, #8]
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <a_buildpost+0xc8>)
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <a_buildpost+0xcc>)
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	0023      	movs	r3, r4
 800585c:	f00b ff52 	bl	8011704 <siprintf>
 8005860:	0003      	movs	r3, r0
 8005862:	607b      	str	r3, [r7, #4]
					   imsi,
					   configuration_version,
					   firmware_version,
					   protocol_version,
					   module_firmware_version);
    postbuffer_count += txbuflen;
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <a_buildpost+0xa4>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	18d2      	adds	r2, r2, r3
 800586c:	4b07      	ldr	r3, [pc, #28]	; (800588c <a_buildpost+0xa4>)
 800586e:	601a      	str	r2, [r3, #0]

    return;
 8005870:	46c0      	nop			; (mov r8, r8)
}
 8005872:	46bd      	mov	sp, r7
 8005874:	b003      	add	sp, #12
 8005876:	bd90      	pop	{r4, r7, pc}
 8005878:	20001a34 	.word	0x20001a34
 800587c:	080137c0 	.word	0x080137c0
 8005880:	20000c3c 	.word	0x20000c3c
 8005884:	080178f4 	.word	0x080178f4
 8005888:	080137d8 	.word	0x080137d8
 800588c:	20000a54 	.word	0x20000a54
 8005890:	20001d94 	.word	0x20001d94
 8005894:	08013cec 	.word	0x08013cec
 8005898:	080137dc 	.word	0x080137dc
 800589c:	20001ac4 	.word	0x20001ac4
 80058a0:	20001a44 	.word	0x20001a44
 80058a4:	20001a50 	.word	0x20001a50
 80058a8:	08013804 	.word	0x08013804
 80058ac:	20001e40 	.word	0x20001e40
 80058b0:	20000000 	.word	0x20000000
 80058b4:	08013ce0 	.word	0x08013ce0

080058b8 <a_clrupdca>:
 *                               ---------
 *
 */

static void a_clrupdca(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
    ca_certificate_flag = 0;
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <a_clrupdca+0x10>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
    return;
 80058c2:	46c0      	nop			; (mov r8, r8)
}
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	20001f18 	.word	0x20001f18

080058cc <a_clrupdcc>:
 *                               ---------
 *
 */

static void a_clrupdcc(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
    client_certificate_flag = 0;
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <a_clrupdcc+0x10>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
    return;
 80058d6:	46c0      	nop			; (mov r8, r8)
}
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20001f1a 	.word	0x20001f1a

080058e0 <a_clrupdck>:
 *                               ---------
 *
 */

static void a_clrupdck(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
    client_key_flag = 0;
 80058e4:	4b02      	ldr	r3, [pc, #8]	; (80058f0 <a_clrupdck+0x10>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
    return;
 80058ea:	46c0      	nop			; (mov r8, r8)
}
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20001f1b 	.word	0x20001f1b

080058f4 <a_clrupdfv>:
 *                               ---------
 *
 */

static void a_clrupdfv(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
    update_device_firmware_flag = 0;
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <a_clrupdfv+0x10>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
    return;
 80058fe:	46c0      	nop			; (mov r8, r8)
}
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20001f19 	.word	0x20001f19

08005908 <a_clrupdmv>:
 *                               ---------
 *
 */

static void a_clrupdmv(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
    update_module_firmware_flag = 0;
 800590c:	4b02      	ldr	r3, [pc, #8]	; (8005918 <a_clrupdmv+0x10>)
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
    return;
 8005912:	46c0      	nop			; (mov r8, r8)
}
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20001dc7 	.word	0x20001dc7

0800591c <a_clrupdsc>:
 *                               ---------
 *
 */

static void a_clrupdsc(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
    configuration_service_flag = 0;
 8005920:	4b02      	ldr	r3, [pc, #8]	; (800592c <a_clrupdsc+0x10>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
    return;
 8005926:	46c0      	nop			; (mov r8, r8)
}
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20001dbe 	.word	0x20001dbe

08005930 <a_flushrx>:
 *                               ---------
 *
 */

static void a_flushrx(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005934:	f002 f9b6 	bl	8007ca4 <quec_rxflush>
    return;
 8005938:	46c0      	nop			; (mov r8, r8)
}
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <a_increcnum>:
 *                               ----------
 *
 */

static void a_increcnum(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
//    mem_read_address += 17;
    recnum++;
 8005944:	4b03      	ldr	r3, [pc, #12]	; (8005954 <a_increcnum+0x14>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	4b02      	ldr	r3, [pc, #8]	; (8005954 <a_increcnum+0x14>)
 800594c:	601a      	str	r2, [r3, #0]
    return;
 800594e:	46c0      	nop			; (mov r8, r8)
}
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000a60 	.word	0x20000a60

08005958 <a_initjson>:
 *                               ---------
 *
 */

static void a_initjson(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0

    for (json_count = 0; json_count < JRBUF_LEN; json_count++)
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <a_initjson+0x3c>)
 800595e:	2200      	movs	r2, #0
 8005960:	801a      	strh	r2, [r3, #0]
 8005962:	e00b      	b.n	800597c <a_initjson+0x24>
    {
        json_response[json_count] = 0x00;
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <a_initjson+0x3c>)
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	001a      	movs	r2, r3
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <a_initjson+0x40>)
 800596c:	2100      	movs	r1, #0
 800596e:	5499      	strb	r1, [r3, r2]
    for (json_count = 0; json_count < JRBUF_LEN; json_count++)
 8005970:	4b08      	ldr	r3, [pc, #32]	; (8005994 <a_initjson+0x3c>)
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	3301      	adds	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <a_initjson+0x3c>)
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <a_initjson+0x3c>)
 800597e:	881a      	ldrh	r2, [r3, #0]
 8005980:	2396      	movs	r3, #150	; 0x96
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	429a      	cmp	r2, r3
 8005986:	d3ed      	bcc.n	8005964 <a_initjson+0xc>
    }

    json_count = 0;
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <a_initjson+0x3c>)
 800598a:	2200      	movs	r2, #0
 800598c:	801a      	strh	r2, [r3, #0]
    return;
 800598e:	46c0      	nop			; (mov r8, r8)
}
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20001f16 	.word	0x20001f16
 8005998:	20001ad4 	.word	0x20001ad4

0800599c <a_initrecnum>:
 *                               ----------
 *
 */

static void a_initrecnum(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
//    mem_read_address += 17;
    recnum = 0;
 80059a0:	4b02      	ldr	r3, [pc, #8]	; (80059ac <a_initrecnum+0x10>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    return;
 80059a6:	46c0      	nop			; (mov r8, r8)
}
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000a60 	.word	0x20000a60

080059b0 <a_initvars>:
 *                               ----------
 *
 */

static void a_initvars(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
    gotcpinrflag = 0;
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <a_initvars+0x18>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
    gotrdyflag = 0;
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <a_initvars+0x1c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
    return;
 80059c0:	46c0      	nop			; (mov r8, r8)
}
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	20000a49 	.word	0x20000a49
 80059cc:	20000a48 	.word	0x20000a48

080059d0 <a_nop>:
 *                               -----
 *
 */

static void a_nop(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
    return;
 80059d4:	46c0      	nop			; (mov r8, r8)
}
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <a_powerdn>:
 *                               -----
 *
 */

static void a_powerdn(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_SET);
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <a_powerdn+0x24>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	0018      	movs	r0, r3
 80059e8:	f004 f932 	bl	8009c50 <HAL_GPIO_WritePin>

#if OLD_BOARD == 0
    quec_3v8enbl(0);
 80059ec:	2000      	movs	r0, #0
 80059ee:	f001 fdca 	bl	8007586 <quec_3v8enbl>
#endif

    callanswer = CA_NOTPOWERED;
 80059f2:	4b04      	ldr	r3, [pc, #16]	; (8005a04 <a_powerdn+0x28>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
    return;
 80059f8:	46c0      	nop			; (mov r8, r8)
}
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	48000400 	.word	0x48000400
 8005a04:	20000a45 	.word	0x20000a45

08005a08 <a_powerup>:
 *                               -----
 *
 */

static void a_powerup(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0

#if OLD_BOARD == 0
    quec_3v8enbl(1);
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	f001 fdba 	bl	8007586 <quec_3v8enbl>
#endif

    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_SET);
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <a_powerup+0x38>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f004 f919 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_Delay(2500);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <a_powerup+0x3c>)
 8005a20:	0018      	movs	r0, r3
 8005a22:	f003 fe5d 	bl	80096e0 <HAL_Delay>
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_RESET);
 8005a26:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <a_powerup+0x38>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2180      	movs	r1, #128	; 0x80
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f004 f90f 	bl	8009c50 <HAL_GPIO_WritePin>
    callanswer = CA_INPROGRESS;
 8005a32:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <a_powerup+0x40>)
 8005a34:	2202      	movs	r2, #2
 8005a36:	701a      	strb	r2, [r3, #0]
    return;
 8005a38:	46c0      	nop			; (mov r8, r8)
}
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	48000400 	.word	0x48000400
 8005a44:	000009c4 	.word	0x000009c4
 8005a48:	20000a45 	.word	0x20000a45

08005a4c <a_processjson>:
 *                               ---------
 *
 */

static void a_processjson(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
    compare_cvs();
 8005a50:	f7fa ff28 	bl	80008a4 <compare_cvs>
    return;
 8005a54:	46c0      	nop			; (mov r8, r8)
}
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <a_processping>:
 *                               ---------
 *
 */

static void a_processping(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
    pingstat = ping_response();
 8005a60:	f7fb fa52 	bl	8000f08 <ping_response>
 8005a64:	0003      	movs	r3, r0
 8005a66:	001a      	movs	r2, r3
 8005a68:	4b02      	ldr	r3, [pc, #8]	; (8005a74 <a_processping+0x18>)
 8005a6a:	701a      	strb	r2, [r3, #0]
    return;
 8005a6c:	46c0      	nop			; (mov r8, r8)
}
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	20000a47 	.word	0x20000a47

08005a78 <a_processsc>:
 *                               ---------
 *
 */

static void a_processsc(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
    configuration_service();
 8005a7c:	f7fa ff78 	bl	8000970 <configuration_service>
    return;
 8005a80:	46c0      	nop			; (mov r8, r8)
}
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <a_rcvdata>:
 *                               ---------
 *
 */

static void a_rcvdata(void)
{
 8005a88:	b5b0      	push	{r4, r5, r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
    rcv_status = quec_receive(rcv_buffer, MAX_RECEIVE_LEN, 5000, &gsm_rcv_ih);
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <a_rcvdata+0x24>)
 8005a8e:	4c08      	ldr	r4, [pc, #32]	; (8005ab0 <a_rcvdata+0x28>)
 8005a90:	22c8      	movs	r2, #200	; 0xc8
 8005a92:	0051      	lsls	r1, r2, #1
 8005a94:	4807      	ldr	r0, [pc, #28]	; (8005ab4 <a_rcvdata+0x2c>)
 8005a96:	0022      	movs	r2, r4
 8005a98:	f002 f8aa 	bl	8007bf0 <quec_receive>
 8005a9c:	0003      	movs	r3, r0
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <a_rcvdata+0x30>)
 8005aa2:	701a      	strb	r2, [r3, #0]
    return;
 8005aa4:	46c0      	nop			; (mov r8, r8)
}
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	08006f29 	.word	0x08006f29
 8005ab0:	00001388 	.word	0x00001388
 8005ab4:	20000a68 	.word	0x20000a68
 8005ab8:	20000a44 	.word	0x20000a44

08005abc <a_rcvqmt>:
 *                               ---------
 *
 */

static void a_rcvqmt(void)
{
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	af00      	add	r7, sp, #0
    rcv_status = quec_receive(rcv_buffer, MAX_RECEIVE_LEN, 30000, &gsm_rcv_ih);
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <a_rcvqmt+0x24>)
 8005ac2:	4c08      	ldr	r4, [pc, #32]	; (8005ae4 <a_rcvqmt+0x28>)
 8005ac4:	22c8      	movs	r2, #200	; 0xc8
 8005ac6:	0051      	lsls	r1, r2, #1
 8005ac8:	4807      	ldr	r0, [pc, #28]	; (8005ae8 <a_rcvqmt+0x2c>)
 8005aca:	0022      	movs	r2, r4
 8005acc:	f002 f890 	bl	8007bf0 <quec_receive>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	001a      	movs	r2, r3
 8005ad4:	4b05      	ldr	r3, [pc, #20]	; (8005aec <a_rcvqmt+0x30>)
 8005ad6:	701a      	strb	r2, [r3, #0]
    return;
 8005ad8:	46c0      	nop			; (mov r8, r8)
}
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	08006f29 	.word	0x08006f29
 8005ae4:	00007530 	.word	0x00007530
 8005ae8:	20000a68 	.word	0x20000a68
 8005aec:	20000a44 	.word	0x20000a44

08005af0 <a_reset>:
 *                               -------
 *
 */

static void a_reset(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_SET);
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <a_reset+0x30>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	0018      	movs	r0, r3
 8005afc:	f004 f8a8 	bl	8009c50 <HAL_GPIO_WritePin>
    quec_rxflush();
 8005b00:	f002 f8d0 	bl	8007ca4 <quec_rxflush>
    HAL_Delay(500);
 8005b04:	23fa      	movs	r3, #250	; 0xfa
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f003 fde9 	bl	80096e0 <HAL_Delay>
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_RESET);
 8005b0e:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <a_reset+0x30>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0018      	movs	r0, r3
 8005b16:	f004 f89b 	bl	8009c50 <HAL_GPIO_WritePin>
    return;
 8005b1a:	46c0      	nop			; (mov r8, r8)
}
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	48000400 	.word	0x48000400

08005b24 <a_saveccid>:
 *                               ----------
 *
 */

static void a_saveccid(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 22; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	e011      	b.n	8005b54 <a_saveccid+0x30>
    {

        if (rcv_buffer[i + 8] == 0x0D)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3308      	adds	r3, #8
 8005b34:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <a_saveccid+0x48>)
 8005b36:	5cd3      	ldrb	r3, [r2, r3]
 8005b38:	2b0d      	cmp	r3, #13
 8005b3a:	d00f      	beq.n	8005b5c <a_saveccid+0x38>
        {
            break;
        }

        ccid[i] = rcv_buffer[i + 8];
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <a_saveccid+0x48>)
 8005b42:	5cd1      	ldrb	r1, [r2, r3]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <a_saveccid+0x4c>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	18d3      	adds	r3, r2, r3
 8005b4a:	1c0a      	adds	r2, r1, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 22; i++)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3301      	adds	r3, #1
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b15      	cmp	r3, #21
 8005b58:	d9ea      	bls.n	8005b30 <a_saveccid+0xc>
 8005b5a:	e000      	b.n	8005b5e <a_saveccid+0x3a>
            break;
 8005b5c:	46c0      	nop			; (mov r8, r8)
    }

    myiccidlen = i;
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <a_saveccid+0x50>)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]
    return;
 8005b64:	46c0      	nop			; (mov r8, r8)
}
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000a68 	.word	0x20000a68
 8005b70:	20001d94 	.word	0x20001d94
 8005b74:	20000a4c 	.word	0x20000a4c

08005b78 <a_savegmr>:
 *                               ----------
 *
 */

static void a_savegmr(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < MFVLEN; i++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
 8005b82:	e007      	b.n	8005b94 <a_savegmr+0x1c>
    {
        module_firmware_version[i] = 0;
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <a_savegmr+0x60>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MFVLEN; i++)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3301      	adds	r3, #1
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b27      	cmp	r3, #39	; 0x27
 8005b98:	d9f4      	bls.n	8005b84 <a_savegmr+0xc>
    }

    for (i = 0; i < MFVLEN; i++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	e011      	b.n	8005bc4 <a_savegmr+0x4c>
    {


        if (rcv_buffer[i] == 0x0D)
 8005ba0:	4a0e      	ldr	r2, [pc, #56]	; (8005bdc <a_savegmr+0x64>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	18d3      	adds	r3, r2, r3
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b0d      	cmp	r3, #13
 8005baa:	d00f      	beq.n	8005bcc <a_savegmr+0x54>
        {
            break;
        }

        module_firmware_version[i] = rcv_buffer[i];
 8005bac:	4a0b      	ldr	r2, [pc, #44]	; (8005bdc <a_savegmr+0x64>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	18d3      	adds	r3, r2, r3
 8005bb2:	7819      	ldrb	r1, [r3, #0]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <a_savegmr+0x60>)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	18d3      	adds	r3, r2, r3
 8005bba:	1c0a      	adds	r2, r1, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MFVLEN; i++)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b27      	cmp	r3, #39	; 0x27
 8005bc8:	d9ea      	bls.n	8005ba0 <a_savegmr+0x28>
    }

    return;
 8005bca:	e000      	b.n	8005bce <a_savegmr+0x56>
            break;
 8005bcc:	46c0      	nop			; (mov r8, r8)
    return;
 8005bce:	46c0      	nop			; (mov r8, r8)
}
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b002      	add	sp, #8
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	20001e40 	.word	0x20001e40
 8005bdc:	20000a68 	.word	0x20000a68

08005be0 <a_saveimei>:
 *                               ----------
 *
 */

static void a_saveimei(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 15; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	e00b      	b.n	8005c04 <a_saveimei+0x24>
    {
        imei[i] = rcv_buffer[i];
 8005bec:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <a_saveimei+0x34>)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	18d3      	adds	r3, r2, r3
 8005bf2:	7819      	ldrb	r1, [r3, #0]
 8005bf4:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <a_saveimei+0x38>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	18d3      	adds	r3, r2, r3
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 15; i++)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3301      	adds	r3, #1
 8005c02:	607b      	str	r3, [r7, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b0e      	cmp	r3, #14
 8005c08:	d9f0      	bls.n	8005bec <a_saveimei+0xc>
    }

    return;
 8005c0a:	46c0      	nop			; (mov r8, r8)
}
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b002      	add	sp, #8
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	20000a68 	.word	0x20000a68
 8005c18:	20001ac4 	.word	0x20001ac4

08005c1c <a_saveimsi>:
 *                               ----------
 *
 */

static void a_saveimsi(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
    uint32_t i;

    for (i = 0; i < 15; i++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	e00b      	b.n	8005c40 <a_saveimsi+0x24>
    {
        imsi[i] = rcv_buffer[i];
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <a_saveimsi+0x34>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	18d3      	adds	r3, r2, r3
 8005c2e:	7819      	ldrb	r1, [r3, #0]
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <a_saveimsi+0x38>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	18d3      	adds	r3, r2, r3
 8005c36:	1c0a      	adds	r2, r1, #0
 8005c38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 15; i++)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b0e      	cmp	r3, #14
 8005c44:	d9f0      	bls.n	8005c28 <a_saveimsi+0xc>
    }

    return;
 8005c46:	46c0      	nop			; (mov r8, r8)
}
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b002      	add	sp, #8
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	20000a68 	.word	0x20000a68
 8005c54:	20001a50 	.word	0x20001a50

08005c58 <a_savetime>:
 *                               ----------
 *
 */

static void a_savetime(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
    server_clock = convert_to_epoch(&rcv_buffer[8], &rcv_buffer[19]);
 8005c5c:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <a_savetime+0x1c>)
 8005c5e:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <a_savetime+0x20>)
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7fa ff20 	bl	8000aa8 <convert_to_epoch>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <a_savetime+0x24>)
 8005c6c:	601a      	str	r2, [r3, #0]
    return;
 8005c6e:	46c0      	nop			; (mov r8, r8)
}
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20000a7b 	.word	0x20000a7b
 8005c78:	20000a70 	.word	0x20000a70
 8005c7c:	20001f94 	.word	0x20001f94

08005c80 <a_tmr10>:
 *                               ---------
 *
 */

static void a_tmr10(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005c84:	b672      	cpsid	i
}
 8005c86:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    timer = 10000;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <a_tmr10+0x18>)
 8005c8a:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <a_tmr10+0x1c>)
 8005c8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c8e:	b662      	cpsie	i
}
 8005c90:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
    return;
 8005c92:	46c0      	nop			; (mov r8, r8)
}
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000a58 	.word	0x20000a58
 8005c9c:	00002710 	.word	0x00002710

08005ca0 <a_trapn>:
 *                               -------
 *
 */

static void a_trapn(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005ca4:	f001 fffe 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <a_trapn+0x3c>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 30000, &gsm_rcv_ih);
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <a_trapn+0x40>)
 8005cb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <a_trapn+0x44>)
 8005cb2:	480d      	ldr	r0, [pc, #52]	; (8005ce8 <a_trapn+0x48>)
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	f001 ff9b 	bl	8007bf0 <quec_receive>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <a_trapn+0x4c>)
 8005cc0:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <a_trapn+0x4c>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b06      	cmp	r3, #6
 8005cc8:	d105      	bne.n	8005cd6 <a_trapn+0x36>
    {
        quec_transmit((uint8_t *)apnmsg, sizeof(apnmsg) - 1);
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <a_trapn+0x50>)
 8005ccc:	2124      	movs	r1, #36	; 0x24
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f001 fffa 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46c0      	nop			; (mov r8, r8)
}
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000a50 	.word	0x20000a50
 8005ce0:	08006f29 	.word	0x08006f29
 8005ce4:	00007530 	.word	0x00007530
 8005ce8:	20000a68 	.word	0x20000a68
 8005cec:	20000a44 	.word	0x20000a44
 8005cf0:	0801776c 	.word	0x0801776c

08005cf4 <a_trate0>:
 *                               --------
 *
 */

static void a_trate0(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005cf8:	f001 ffd4 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <a_trate0+0x3c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <a_trate0+0x40>)
 8005d04:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <a_trate0+0x44>)
 8005d06:	480d      	ldr	r0, [pc, #52]	; (8005d3c <a_trate0+0x48>)
 8005d08:	2110      	movs	r1, #16
 8005d0a:	f001 ff71 	bl	8007bf0 <quec_receive>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	001a      	movs	r2, r3
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <a_trate0+0x4c>)
 8005d14:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <a_trate0+0x4c>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b06      	cmp	r3, #6
 8005d1c:	d105      	bne.n	8005d2a <a_trate0+0x36>
    {
        quec_transmit((uint8_t *)"ATE0\r\n", 6);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <a_trate0+0x50>)
 8005d20:	2106      	movs	r1, #6
 8005d22:	0018      	movs	r0, r3
 8005d24:	f001 ffd0 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005d28:	46c0      	nop			; (mov r8, r8)
 8005d2a:	46c0      	nop			; (mov r8, r8)
}
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000a50 	.word	0x20000a50
 8005d34:	08006f29 	.word	0x08006f29
 8005d38:	00001388 	.word	0x00001388
 8005d3c:	20000a68 	.word	0x20000a68
 8005d40:	20000a44 	.word	0x20000a44
 8005d44:	0801383c 	.word	0x0801383c

08005d48 <a_trcgreg>:
 *                               --------
 *
 */

static void a_trcgreg(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005d4c:	f001 ffaa 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005d50:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <a_trcgreg+0x40>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <a_trcgreg+0x44>)
 8005d58:	22fa      	movs	r2, #250	; 0xfa
 8005d5a:	00d2      	lsls	r2, r2, #3
 8005d5c:	480c      	ldr	r0, [pc, #48]	; (8005d90 <a_trcgreg+0x48>)
 8005d5e:	2110      	movs	r1, #16
 8005d60:	f001 ff46 	bl	8007bf0 <quec_receive>
 8005d64:	0003      	movs	r3, r0
 8005d66:	001a      	movs	r2, r3
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <a_trcgreg+0x4c>)
 8005d6a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <a_trcgreg+0x4c>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d105      	bne.n	8005d80 <a_trcgreg+0x38>
    {
        quec_transmit((uint8_t *)"AT+CGREG=0\r\n", 12);
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <a_trcgreg+0x50>)
 8005d76:	210c      	movs	r1, #12
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f001 ffa5 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46c0      	nop			; (mov r8, r8)
}
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	20000a50 	.word	0x20000a50
 8005d8c:	08006f29 	.word	0x08006f29
 8005d90:	20000a68 	.word	0x20000a68
 8005d94:	20000a44 	.word	0x20000a44
 8005d98:	08013844 	.word	0x08013844

08005d9c <a_trcimi>:
 *                               --------
 *
 */

static void a_trcimi(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005da0:	f001 ff80 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005da4:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <a_trcimi+0x40>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <a_trcimi+0x44>)
 8005dac:	22fa      	movs	r2, #250	; 0xfa
 8005dae:	00d2      	lsls	r2, r2, #3
 8005db0:	480c      	ldr	r0, [pc, #48]	; (8005de4 <a_trcimi+0x48>)
 8005db2:	2110      	movs	r1, #16
 8005db4:	f001 ff1c 	bl	8007bf0 <quec_receive>
 8005db8:	0003      	movs	r3, r0
 8005dba:	001a      	movs	r2, r3
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <a_trcimi+0x4c>)
 8005dbe:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <a_trcimi+0x4c>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d105      	bne.n	8005dd4 <a_trcimi+0x38>
    {
        quec_transmit((uint8_t *)"AT+CIMI\r\n", 9);
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <a_trcimi+0x50>)
 8005dca:	2109      	movs	r1, #9
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f001 ff7b 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46c0      	nop			; (mov r8, r8)
}
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20000a50 	.word	0x20000a50
 8005de0:	08006f29 	.word	0x08006f29
 8005de4:	20000a68 	.word	0x20000a68
 8005de8:	20000a44 	.word	0x20000a44
 8005dec:	08013854 	.word	0x08013854

08005df0 <a_trcreg>:
 *                               --------
 *
 */

static void a_trcreg(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005df4:	f001 ff56 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <a_trcreg+0x40>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <a_trcreg+0x44>)
 8005e00:	22fa      	movs	r2, #250	; 0xfa
 8005e02:	00d2      	lsls	r2, r2, #3
 8005e04:	480c      	ldr	r0, [pc, #48]	; (8005e38 <a_trcreg+0x48>)
 8005e06:	2110      	movs	r1, #16
 8005e08:	f001 fef2 	bl	8007bf0 <quec_receive>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	001a      	movs	r2, r3
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <a_trcreg+0x4c>)
 8005e12:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005e14:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <a_trcreg+0x4c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d105      	bne.n	8005e28 <a_trcreg+0x38>
    {
        quec_transmit((uint8_t *)"AT+CREG=0\r\n", 11);
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <a_trcreg+0x50>)
 8005e1e:	210b      	movs	r1, #11
 8005e20:	0018      	movs	r0, r3
 8005e22:	f001 ff51 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46c0      	nop			; (mov r8, r8)
}
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	20000a50 	.word	0x20000a50
 8005e34:	08006f29 	.word	0x08006f29
 8005e38:	20000a68 	.word	0x20000a68
 8005e3c:	20000a44 	.word	0x20000a44
 8005e40:	08013860 	.word	0x08013860

08005e44 <a_trcsq>:
 *                               --------
 *
 */

static void a_trcsq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005e48:	f001 ff2c 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <a_trcsq+0x3c>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 8005e52:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <a_trcsq+0x40>)
 8005e54:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <a_trcsq+0x44>)
 8005e56:	480d      	ldr	r0, [pc, #52]	; (8005e8c <a_trcsq+0x48>)
 8005e58:	2110      	movs	r1, #16
 8005e5a:	f001 fec9 	bl	8007bf0 <quec_receive>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	001a      	movs	r2, r3
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <a_trcsq+0x4c>)
 8005e64:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005e66:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <a_trcsq+0x4c>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d105      	bne.n	8005e7a <a_trcsq+0x36>
    {
        quec_transmit((uint8_t *)"AT+CSQ\r\n", 8);
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <a_trcsq+0x50>)
 8005e70:	2108      	movs	r1, #8
 8005e72:	0018      	movs	r0, r3
 8005e74:	f001 ff28 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46c0      	nop			; (mov r8, r8)
}
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000a50 	.word	0x20000a50
 8005e84:	08006f29 	.word	0x08006f29
 8005e88:	00001388 	.word	0x00001388
 8005e8c:	20000a68 	.word	0x20000a68
 8005e90:	20000a44 	.word	0x20000a44
 8005e94:	0801386c 	.word	0x0801386c

08005e98 <a_trgmr>:
 *                               -------
 *
 */

static void a_trgmr(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005e9c:	f001 ff02 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005ea0:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <a_trgmr+0x40>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <a_trgmr+0x44>)
 8005ea8:	22fa      	movs	r2, #250	; 0xfa
 8005eaa:	00d2      	lsls	r2, r2, #3
 8005eac:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <a_trgmr+0x48>)
 8005eae:	2120      	movs	r1, #32
 8005eb0:	f001 fe9e 	bl	8007bf0 <quec_receive>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <a_trgmr+0x4c>)
 8005eba:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <a_trgmr+0x4c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d105      	bne.n	8005ed0 <a_trgmr+0x38>
    {
        quec_transmit((uint8_t *)"AT+QGMR\r\n", 9);
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <a_trgmr+0x50>)
 8005ec6:	2109      	movs	r1, #9
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f001 fefd 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	46c0      	nop			; (mov r8, r8)
}
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	20000a50 	.word	0x20000a50
 8005edc:	08006f29 	.word	0x08006f29
 8005ee0:	20000a68 	.word	0x20000a68
 8005ee4:	20000a44 	.word	0x20000a44
 8005ee8:	08013878 	.word	0x08013878

08005eec <a_trgsn>:
 *                               -------
 *
 */

static void a_trgsn(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005ef0:	f001 fed8 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <a_trgsn+0x40>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <a_trgsn+0x44>)
 8005efc:	22fa      	movs	r2, #250	; 0xfa
 8005efe:	00d2      	lsls	r2, r2, #3
 8005f00:	480c      	ldr	r0, [pc, #48]	; (8005f34 <a_trgsn+0x48>)
 8005f02:	2120      	movs	r1, #32
 8005f04:	f001 fe74 	bl	8007bf0 <quec_receive>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <a_trgsn+0x4c>)
 8005f0e:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <a_trgsn+0x4c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d105      	bne.n	8005f24 <a_trgsn+0x38>
    {
        quec_transmit((uint8_t *)"AT+GSN\r\n", 8);
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <a_trgsn+0x50>)
 8005f1a:	2108      	movs	r1, #8
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f001 fed3 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	46c0      	nop			; (mov r8, r8)
}
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	20000a50 	.word	0x20000a50
 8005f30:	08006f29 	.word	0x08006f29
 8005f34:	20000a68 	.word	0x20000a68
 8005f38:	20000a44 	.word	0x20000a44
 8005f3c:	08013884 	.word	0x08013884

08005f40 <a_trhtcfgc>:
 *                               -------
 *
 */

static void a_trhtcfgc(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005f44:	f001 feae 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <a_trhtcfgc+0x40>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <a_trhtcfgc+0x44>)
 8005f50:	22fa      	movs	r2, #250	; 0xfa
 8005f52:	00d2      	lsls	r2, r2, #3
 8005f54:	480c      	ldr	r0, [pc, #48]	; (8005f88 <a_trhtcfgc+0x48>)
 8005f56:	210a      	movs	r1, #10
 8005f58:	f001 fe4a 	bl	8007bf0 <quec_receive>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	001a      	movs	r2, r3
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <a_trhtcfgc+0x4c>)
 8005f62:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <a_trhtcfgc+0x4c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b06      	cmp	r3, #6
 8005f6a:	d105      	bne.n	8005f78 <a_trhtcfgc+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPCFG=\"contextid\",1\r\n", 26);
 8005f6c:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <a_trhtcfgc+0x50>)
 8005f6e:	211a      	movs	r1, #26
 8005f70:	0018      	movs	r0, r3
 8005f72:	f001 fea9 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	46c0      	nop			; (mov r8, r8)
}
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	20000a50 	.word	0x20000a50
 8005f84:	08006f29 	.word	0x08006f29
 8005f88:	20000a68 	.word	0x20000a68
 8005f8c:	20000a44 	.word	0x20000a44
 8005f90:	08013890 	.word	0x08013890

08005f94 <a_trhtcfgrqh>:
 *                               -------
 *
 */

static void a_trhtcfgrqh(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005f98:	f001 fe84 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005f9c:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <a_trhtcfgrqh+0x40>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <a_trhtcfgrqh+0x44>)
 8005fa4:	22fa      	movs	r2, #250	; 0xfa
 8005fa6:	00d2      	lsls	r2, r2, #3
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <a_trhtcfgrqh+0x48>)
 8005faa:	210a      	movs	r1, #10
 8005fac:	f001 fe20 	bl	8007bf0 <quec_receive>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <a_trhtcfgrqh+0x4c>)
 8005fb6:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <a_trhtcfgrqh+0x4c>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b06      	cmp	r3, #6
 8005fbe:	d105      	bne.n	8005fcc <a_trhtcfgrqh+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPCFG=\"requestheader\",1\r\n", 31);
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <a_trhtcfgrqh+0x50>)
 8005fc2:	211f      	movs	r1, #31
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f001 fe7f 	bl	8007cc8 <quec_transmit>
    }

    return;
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46c0      	nop			; (mov r8, r8)
}
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	20000a50 	.word	0x20000a50
 8005fd8:	08006f29 	.word	0x08006f29
 8005fdc:	20000a68 	.word	0x20000a68
 8005fe0:	20000a44 	.word	0x20000a44
 8005fe4:	080138ac 	.word	0x080138ac

08005fe8 <a_trhtcfgrqh2>:
 *                               -------
 *
 */

static void a_trhtcfgrqh2(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
    quec_rxflush();
 8005fec:	f001 fe5a 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <a_trhtcfgrqh2+0x40>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <a_trhtcfgrqh2+0x44>)
 8005ff8:	22fa      	movs	r2, #250	; 0xfa
 8005ffa:	00d2      	lsls	r2, r2, #3
 8005ffc:	480c      	ldr	r0, [pc, #48]	; (8006030 <a_trhtcfgrqh2+0x48>)
 8005ffe:	210a      	movs	r1, #10
 8006000:	f001 fdf6 	bl	8007bf0 <quec_receive>
 8006004:	0003      	movs	r3, r0
 8006006:	001a      	movs	r2, r3
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <a_trhtcfgrqh2+0x4c>)
 800600a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <a_trhtcfgrqh2+0x4c>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b06      	cmp	r3, #6
 8006012:	d105      	bne.n	8006020 <a_trhtcfgrqh2+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPCFG=\"requestheader\",0\r\n", 31);
 8006014:	4b08      	ldr	r3, [pc, #32]	; (8006038 <a_trhtcfgrqh2+0x50>)
 8006016:	211f      	movs	r1, #31
 8006018:	0018      	movs	r0, r3
 800601a:	f001 fe55 	bl	8007cc8 <quec_transmit>
    }

    return;
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	46c0      	nop			; (mov r8, r8)
}
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	20000a50 	.word	0x20000a50
 800602c:	08006f29 	.word	0x08006f29
 8006030:	20000a68 	.word	0x20000a68
 8006034:	20000a44 	.word	0x20000a44
 8006038:	080138cc 	.word	0x080138cc

0800603c <a_trhtget>:
 *                               -------
 *
 */

static void a_trhtget(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006040:	f001 fe30 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006044:	4b0d      	ldr	r3, [pc, #52]	; (800607c <a_trhtget+0x40>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <a_trhtget+0x44>)
 800604c:	22fa      	movs	r2, #250	; 0xfa
 800604e:	00d2      	lsls	r2, r2, #3
 8006050:	480c      	ldr	r0, [pc, #48]	; (8006084 <a_trhtget+0x48>)
 8006052:	2110      	movs	r1, #16
 8006054:	f001 fdcc 	bl	8007bf0 <quec_receive>
 8006058:	0003      	movs	r3, r0
 800605a:	001a      	movs	r2, r3
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <a_trhtget+0x4c>)
 800605e:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <a_trhtget+0x4c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d105      	bne.n	8006074 <a_trhtget+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPGET=80\r\n", 16);
 8006068:	4b08      	ldr	r3, [pc, #32]	; (800608c <a_trhtget+0x50>)
 800606a:	2110      	movs	r1, #16
 800606c:	0018      	movs	r0, r3
 800606e:	f001 fe2b 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	46c0      	nop			; (mov r8, r8)
}
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	20000a50 	.word	0x20000a50
 8006080:	08006f29 	.word	0x08006f29
 8006084:	20000a68 	.word	0x20000a68
 8006088:	20000a44 	.word	0x20000a44
 800608c:	080138ec 	.word	0x080138ec

08006090 <a_trhtpost1>:
 *                               -------
 *
 */

static void a_trhtpost1(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
    uint32_t txbuflen;

    quec_rxflush();
 8006096:	f001 fe05 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <a_trhtpost1+0x58>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 125000, &gsm_rcv_ih);
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <a_trhtpost1+0x5c>)
 80060a2:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <a_trhtpost1+0x60>)
 80060a4:	4813      	ldr	r0, [pc, #76]	; (80060f4 <a_trhtpost1+0x64>)
 80060a6:	2110      	movs	r1, #16
 80060a8:	f001 fda2 	bl	8007bf0 <quec_receive>
 80060ac:	0003      	movs	r3, r0
 80060ae:	001a      	movs	r2, r3
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <a_trhtpost1+0x68>)
 80060b2:	701a      	strb	r2, [r3, #0]
    txbuflen = sprintf(tx_buffer, "AT+QHTTPPOST=%u,80,80\r\n", postbuffer_count);
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <a_trhtpost1+0x6c>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4911      	ldr	r1, [pc, #68]	; (8006100 <a_trhtpost1+0x70>)
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <a_trhtpost1+0x74>)
 80060bc:	0018      	movs	r0, r3
 80060be:	f00b fb21 	bl	8011704 <siprintf>
 80060c2:	0003      	movs	r3, r0
 80060c4:	607b      	str	r3, [r7, #4]

    if (rcv_status == QS_INPROGRESS)
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <a_trhtpost1+0x68>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b06      	cmp	r3, #6
 80060cc:	d107      	bne.n	80060de <a_trhtpost1+0x4e>
    {
        quec_transmit(tx_buffer, txbuflen);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <a_trhtpost1+0x74>)
 80060d4:	0011      	movs	r1, r2
 80060d6:	0018      	movs	r0, r3
 80060d8:	f001 fdf6 	bl	8007cc8 <quec_transmit>
    }

    return;
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46c0      	nop			; (mov r8, r8)
}
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b002      	add	sp, #8
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	20000a50 	.word	0x20000a50
 80060ec:	08006f29 	.word	0x08006f29
 80060f0:	0001e848 	.word	0x0001e848
 80060f4:	20000a68 	.word	0x20000a68
 80060f8:	20000a44 	.word	0x20000a44
 80060fc:	20000a54 	.word	0x20000a54
 8006100:	08013900 	.word	0x08013900
 8006104:	20000bfc 	.word	0x20000bfc

08006108 <a_trhtpost2>:
 *                               -------
 *
 */

static void a_trhtpost2(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
    quec_rxflush();
 800610c:	f001 fdca 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006110:	4b0e      	ldr	r3, [pc, #56]	; (800614c <a_trhtpost2+0x44>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006116:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <a_trhtpost2+0x48>)
 8006118:	22fa      	movs	r2, #250	; 0xfa
 800611a:	00d2      	lsls	r2, r2, #3
 800611c:	480d      	ldr	r0, [pc, #52]	; (8006154 <a_trhtpost2+0x4c>)
 800611e:	2110      	movs	r1, #16
 8006120:	f001 fd66 	bl	8007bf0 <quec_receive>
 8006124:	0003      	movs	r3, r0
 8006126:	001a      	movs	r2, r3
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <a_trhtpost2+0x50>)
 800612a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <a_trhtpost2+0x50>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d108      	bne.n	8006146 <a_trhtpost2+0x3e>
    {
        quec_transmit(post_buffer, postbuffer_count);
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <a_trhtpost2+0x54>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	b29a      	uxth	r2, r3
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <a_trhtpost2+0x58>)
 800613c:	0011      	movs	r1, r2
 800613e:	0018      	movs	r0, r3
 8006140:	f001 fdc2 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46c0      	nop			; (mov r8, r8)
}
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000a50 	.word	0x20000a50
 8006150:	08006f29 	.word	0x08006f29
 8006154:	20000a68 	.word	0x20000a68
 8006158:	20000a44 	.word	0x20000a44
 800615c:	20000a54 	.word	0x20000a54
 8006160:	20000c3c 	.word	0x20000c3c

08006164 <a_trhtrdfile>:
 *                               -------
 *
 */

static void a_trhtrdfile(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006168:	f001 fd9c 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <a_trhtrdfile+0x40>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <a_trhtrdfile+0x44>)
 8006174:	22fa      	movs	r2, #250	; 0xfa
 8006176:	00d2      	lsls	r2, r2, #3
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <a_trhtrdfile+0x48>)
 800617a:	2110      	movs	r1, #16
 800617c:	f001 fd38 	bl	8007bf0 <quec_receive>
 8006180:	0003      	movs	r3, r0
 8006182:	001a      	movs	r2, r3
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <a_trhtrdfile+0x4c>)
 8006186:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006188:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <a_trhtrdfile+0x4c>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b06      	cmp	r3, #6
 800618e:	d105      	bne.n	800619c <a_trhtrdfile+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPREADFILE=\"UFS:security/CaCert1.crt\",80\r\n", 48);
 8006190:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <a_trhtrdfile+0x50>)
 8006192:	2130      	movs	r1, #48	; 0x30
 8006194:	0018      	movs	r0, r3
 8006196:	f001 fd97 	bl	8007cc8 <quec_transmit>
    }

    return;
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	46c0      	nop			; (mov r8, r8)
}
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	20000a50 	.word	0x20000a50
 80061a8:	08006f29 	.word	0x08006f29
 80061ac:	20000a68 	.word	0x20000a68
 80061b0:	20000a44 	.word	0x20000a44
 80061b4:	08013918 	.word	0x08013918

080061b8 <a_trhtrdfile2>:
 *                               -------
 *
 */

static void a_trhtrdfile2(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
    quec_rxflush();
 80061bc:	f001 fd72 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <a_trhtrdfile2+0x40>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <a_trhtrdfile2+0x44>)
 80061c8:	22fa      	movs	r2, #250	; 0xfa
 80061ca:	00d2      	lsls	r2, r2, #3
 80061cc:	480c      	ldr	r0, [pc, #48]	; (8006200 <a_trhtrdfile2+0x48>)
 80061ce:	2110      	movs	r1, #16
 80061d0:	f001 fd0e 	bl	8007bf0 <quec_receive>
 80061d4:	0003      	movs	r3, r0
 80061d6:	001a      	movs	r2, r3
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <a_trhtrdfile2+0x4c>)
 80061da:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <a_trhtrdfile2+0x4c>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d105      	bne.n	80061f0 <a_trhtrdfile2+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPREADFILE=\"UFS:security/Client.crt\",80\r\n", 47);
 80061e4:	4b08      	ldr	r3, [pc, #32]	; (8006208 <a_trhtrdfile2+0x50>)
 80061e6:	212f      	movs	r1, #47	; 0x2f
 80061e8:	0018      	movs	r0, r3
 80061ea:	f001 fd6d 	bl	8007cc8 <quec_transmit>
    }

    return;
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46c0      	nop			; (mov r8, r8)
}
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	20000a50 	.word	0x20000a50
 80061fc:	08006f29 	.word	0x08006f29
 8006200:	20000a68 	.word	0x20000a68
 8006204:	20000a44 	.word	0x20000a44
 8006208:	0801394c 	.word	0x0801394c

0800620c <a_trhtrdfile3>:
 *                               -------
 *
 */

static void a_trhtrdfile3(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006210:	f001 fd48 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006214:	4b0d      	ldr	r3, [pc, #52]	; (800624c <a_trhtrdfile3+0x40>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <a_trhtrdfile3+0x44>)
 800621c:	22fa      	movs	r2, #250	; 0xfa
 800621e:	00d2      	lsls	r2, r2, #3
 8006220:	480c      	ldr	r0, [pc, #48]	; (8006254 <a_trhtrdfile3+0x48>)
 8006222:	2110      	movs	r1, #16
 8006224:	f001 fce4 	bl	8007bf0 <quec_receive>
 8006228:	0003      	movs	r3, r0
 800622a:	001a      	movs	r2, r3
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <a_trhtrdfile3+0x4c>)
 800622e:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <a_trhtrdfile3+0x4c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b06      	cmp	r3, #6
 8006236:	d105      	bne.n	8006244 <a_trhtrdfile3+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPREADFILE=\"UFS:security/key.pem\",80\r\n", 44);
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <a_trhtrdfile3+0x50>)
 800623a:	212c      	movs	r1, #44	; 0x2c
 800623c:	0018      	movs	r0, r3
 800623e:	f001 fd43 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46c0      	nop			; (mov r8, r8)
}
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	20000a50 	.word	0x20000a50
 8006250:	08006f29 	.word	0x08006f29
 8006254:	20000a68 	.word	0x20000a68
 8006258:	20000a44 	.word	0x20000a44
 800625c:	0801397c 	.word	0x0801397c

08006260 <a_trhtread>:
 *                               -------
 *
 */

static void a_trhtread(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006264:	f001 fd1e 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006268:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <a_trhtread+0x40>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <a_trhtread+0x44>)
 8006270:	22fa      	movs	r2, #250	; 0xfa
 8006272:	00d2      	lsls	r2, r2, #3
 8006274:	480c      	ldr	r0, [pc, #48]	; (80062a8 <a_trhtread+0x48>)
 8006276:	2110      	movs	r1, #16
 8006278:	f001 fcba 	bl	8007bf0 <quec_receive>
 800627c:	0003      	movs	r3, r0
 800627e:	001a      	movs	r2, r3
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <a_trhtread+0x4c>)
 8006282:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <a_trhtread+0x4c>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b06      	cmp	r3, #6
 800628a:	d105      	bne.n	8006298 <a_trhtread+0x38>
    {
        quec_transmit((uint8_t *)"AT+QHTTPREAD=80\r\n", 17);
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <a_trhtread+0x50>)
 800628e:	2111      	movs	r1, #17
 8006290:	0018      	movs	r0, r3
 8006292:	f001 fd19 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	46c0      	nop			; (mov r8, r8)
}
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	20000a50 	.word	0x20000a50
 80062a4:	08006f29 	.word	0x08006f29
 80062a8:	20000a68 	.word	0x20000a68
 80062ac:	20000a44 	.word	0x20000a44
 80062b0:	080139ac 	.word	0x080139ac

080062b4 <a_trhturl2>:
 *                               -------
 *
 */

static void a_trhturl2(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
    quec_rxflush();
 80062b8:	f001 fcf4 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80062bc:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <a_trhturl2+0x44>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 80062c2:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <a_trhturl2+0x48>)
 80062c4:	22fa      	movs	r2, #250	; 0xfa
 80062c6:	00d2      	lsls	r2, r2, #3
 80062c8:	480d      	ldr	r0, [pc, #52]	; (8006300 <a_trhturl2+0x4c>)
 80062ca:	210a      	movs	r1, #10
 80062cc:	f001 fc90 	bl	8007bf0 <quec_receive>
 80062d0:	0003      	movs	r3, r0
 80062d2:	001a      	movs	r2, r3
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <a_trhturl2+0x50>)
 80062d6:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <a_trhturl2+0x50>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d108      	bne.n	80062f2 <a_trhturl2+0x3e>
    {
        quec_transmit(post_buffer, urlplen);
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <a_trhturl2+0x54>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <a_trhturl2+0x58>)
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f001 fcec 	bl	8007cc8 <quec_transmit>
    }

    return;
 80062f0:	46c0      	nop			; (mov r8, r8)
 80062f2:	46c0      	nop			; (mov r8, r8)
}
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000a50 	.word	0x20000a50
 80062fc:	08006f29 	.word	0x08006f29
 8006300:	20000a68 	.word	0x20000a68
 8006304:	20000a44 	.word	0x20000a44
 8006308:	20000a64 	.word	0x20000a64
 800630c:	20000c3c 	.word	0x20000c3c

08006310 <a_trhturlca>:
 *                               -------
 *
 */

static void a_trhturlca(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
    uint32_t txlen;

    urlplen = sprintf(post_buffer, "https://shark.carematix.com/cs/%s/ca?token=%s", device_id, http_token);
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <a_trhturlca+0x6c>)
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <a_trhturlca+0x70>)
 800631a:	491a      	ldr	r1, [pc, #104]	; (8006384 <a_trhturlca+0x74>)
 800631c:	481a      	ldr	r0, [pc, #104]	; (8006388 <a_trhturlca+0x78>)
 800631e:	f00b f9f1 	bl	8011704 <siprintf>
 8006322:	0003      	movs	r3, r0
 8006324:	001a      	movs	r2, r3
 8006326:	4b19      	ldr	r3, [pc, #100]	; (800638c <a_trhturlca+0x7c>)
 8006328:	601a      	str	r2, [r3, #0]
    txlen = sprintf(tx_buffer, "AT+QHTTPURL=%u,80\r\n", urlplen);
 800632a:	4b18      	ldr	r3, [pc, #96]	; (800638c <a_trhturlca+0x7c>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4918      	ldr	r1, [pc, #96]	; (8006390 <a_trhturlca+0x80>)
 8006330:	4b18      	ldr	r3, [pc, #96]	; (8006394 <a_trhturlca+0x84>)
 8006332:	0018      	movs	r0, r3
 8006334:	f00b f9e6 	bl	8011704 <siprintf>
 8006338:	0003      	movs	r3, r0
 800633a:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 800633c:	f001 fcb2 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006340:	4b15      	ldr	r3, [pc, #84]	; (8006398 <a_trhturlca+0x88>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <a_trhturlca+0x8c>)
 8006348:	22fa      	movs	r2, #250	; 0xfa
 800634a:	00d2      	lsls	r2, r2, #3
 800634c:	4814      	ldr	r0, [pc, #80]	; (80063a0 <a_trhturlca+0x90>)
 800634e:	210a      	movs	r1, #10
 8006350:	f001 fc4e 	bl	8007bf0 <quec_receive>
 8006354:	0003      	movs	r3, r0
 8006356:	001a      	movs	r2, r3
 8006358:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <a_trhturlca+0x94>)
 800635a:	701a      	strb	r2, [r3, #0]


    if (rcv_status == QS_INPROGRESS)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <a_trhturlca+0x94>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b06      	cmp	r3, #6
 8006362:	d107      	bne.n	8006374 <a_trhturlca+0x64>
    {
        quec_transmit(tx_buffer, txlen);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	b29a      	uxth	r2, r3
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <a_trhturlca+0x84>)
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f001 fcab 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	46c0      	nop			; (mov r8, r8)
}
 8006376:	46bd      	mov	sp, r7
 8006378:	b002      	add	sp, #8
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20001f80 	.word	0x20001f80
 8006380:	20001a34 	.word	0x20001a34
 8006384:	080139c0 	.word	0x080139c0
 8006388:	20000c3c 	.word	0x20000c3c
 800638c:	20000a64 	.word	0x20000a64
 8006390:	080139f0 	.word	0x080139f0
 8006394:	20000bfc 	.word	0x20000bfc
 8006398:	20000a50 	.word	0x20000a50
 800639c:	08006f29 	.word	0x08006f29
 80063a0:	20000a68 	.word	0x20000a68
 80063a4:	20000a44 	.word	0x20000a44

080063a8 <a_trhturlcc>:
 *                               -------
 *
 */

static void a_trhturlcc(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
    uint32_t txlen;

    urlplen = sprintf(post_buffer, "https://shark.carematix.com/cs/%s/cc?token=%s", device_id, http_token);
 80063ae:	4b19      	ldr	r3, [pc, #100]	; (8006414 <a_trhturlcc+0x6c>)
 80063b0:	4a19      	ldr	r2, [pc, #100]	; (8006418 <a_trhturlcc+0x70>)
 80063b2:	491a      	ldr	r1, [pc, #104]	; (800641c <a_trhturlcc+0x74>)
 80063b4:	481a      	ldr	r0, [pc, #104]	; (8006420 <a_trhturlcc+0x78>)
 80063b6:	f00b f9a5 	bl	8011704 <siprintf>
 80063ba:	0003      	movs	r3, r0
 80063bc:	001a      	movs	r2, r3
 80063be:	4b19      	ldr	r3, [pc, #100]	; (8006424 <a_trhturlcc+0x7c>)
 80063c0:	601a      	str	r2, [r3, #0]
    txlen = sprintf(tx_buffer, "AT+QHTTPURL=%u,80\r\n", urlplen);
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <a_trhturlcc+0x7c>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4918      	ldr	r1, [pc, #96]	; (8006428 <a_trhturlcc+0x80>)
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <a_trhturlcc+0x84>)
 80063ca:	0018      	movs	r0, r3
 80063cc:	f00b f99a 	bl	8011704 <siprintf>
 80063d0:	0003      	movs	r3, r0
 80063d2:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 80063d4:	f001 fc66 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80063d8:	4b15      	ldr	r3, [pc, #84]	; (8006430 <a_trhturlcc+0x88>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 80063de:	4b15      	ldr	r3, [pc, #84]	; (8006434 <a_trhturlcc+0x8c>)
 80063e0:	22fa      	movs	r2, #250	; 0xfa
 80063e2:	00d2      	lsls	r2, r2, #3
 80063e4:	4814      	ldr	r0, [pc, #80]	; (8006438 <a_trhturlcc+0x90>)
 80063e6:	210a      	movs	r1, #10
 80063e8:	f001 fc02 	bl	8007bf0 <quec_receive>
 80063ec:	0003      	movs	r3, r0
 80063ee:	001a      	movs	r2, r3
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <a_trhturlcc+0x94>)
 80063f2:	701a      	strb	r2, [r3, #0]


    if (rcv_status == QS_INPROGRESS)
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <a_trhturlcc+0x94>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b06      	cmp	r3, #6
 80063fa:	d107      	bne.n	800640c <a_trhturlcc+0x64>
    {
        quec_transmit(tx_buffer, txlen);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <a_trhturlcc+0x84>)
 8006402:	0011      	movs	r1, r2
 8006404:	0018      	movs	r0, r3
 8006406:	f001 fc5f 	bl	8007cc8 <quec_transmit>
    }

    return;
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46c0      	nop			; (mov r8, r8)
}
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20001f80 	.word	0x20001f80
 8006418:	20001a34 	.word	0x20001a34
 800641c:	08013a04 	.word	0x08013a04
 8006420:	20000c3c 	.word	0x20000c3c
 8006424:	20000a64 	.word	0x20000a64
 8006428:	080139f0 	.word	0x080139f0
 800642c:	20000bfc 	.word	0x20000bfc
 8006430:	20000a50 	.word	0x20000a50
 8006434:	08006f29 	.word	0x08006f29
 8006438:	20000a68 	.word	0x20000a68
 800643c:	20000a44 	.word	0x20000a44

08006440 <a_trhturlck>:
 *                               -------
 *
 */

static void a_trhturlck(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
    uint32_t txlen;

    urlplen = sprintf(post_buffer, "https://shark.carematix.com/cs/%s/ck?token=%s", device_id, http_token);
 8006446:	4b19      	ldr	r3, [pc, #100]	; (80064ac <a_trhturlck+0x6c>)
 8006448:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <a_trhturlck+0x70>)
 800644a:	491a      	ldr	r1, [pc, #104]	; (80064b4 <a_trhturlck+0x74>)
 800644c:	481a      	ldr	r0, [pc, #104]	; (80064b8 <a_trhturlck+0x78>)
 800644e:	f00b f959 	bl	8011704 <siprintf>
 8006452:	0003      	movs	r3, r0
 8006454:	001a      	movs	r2, r3
 8006456:	4b19      	ldr	r3, [pc, #100]	; (80064bc <a_trhturlck+0x7c>)
 8006458:	601a      	str	r2, [r3, #0]
    txlen = sprintf(tx_buffer, "AT+QHTTPURL=%u,80\r\n", urlplen);
 800645a:	4b18      	ldr	r3, [pc, #96]	; (80064bc <a_trhturlck+0x7c>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4918      	ldr	r1, [pc, #96]	; (80064c0 <a_trhturlck+0x80>)
 8006460:	4b18      	ldr	r3, [pc, #96]	; (80064c4 <a_trhturlck+0x84>)
 8006462:	0018      	movs	r0, r3
 8006464:	f00b f94e 	bl	8011704 <siprintf>
 8006468:	0003      	movs	r3, r0
 800646a:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 800646c:	f001 fc1a 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006470:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <a_trhturlck+0x88>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <a_trhturlck+0x8c>)
 8006478:	22fa      	movs	r2, #250	; 0xfa
 800647a:	00d2      	lsls	r2, r2, #3
 800647c:	4814      	ldr	r0, [pc, #80]	; (80064d0 <a_trhturlck+0x90>)
 800647e:	210a      	movs	r1, #10
 8006480:	f001 fbb6 	bl	8007bf0 <quec_receive>
 8006484:	0003      	movs	r3, r0
 8006486:	001a      	movs	r2, r3
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <a_trhturlck+0x94>)
 800648a:	701a      	strb	r2, [r3, #0]


    if (rcv_status == QS_INPROGRESS)
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <a_trhturlck+0x94>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b06      	cmp	r3, #6
 8006492:	d107      	bne.n	80064a4 <a_trhturlck+0x64>
    {
        quec_transmit(tx_buffer, txlen);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	b29a      	uxth	r2, r3
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <a_trhturlck+0x84>)
 800649a:	0011      	movs	r1, r2
 800649c:	0018      	movs	r0, r3
 800649e:	f001 fc13 	bl	8007cc8 <quec_transmit>
    }

    return;
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46c0      	nop			; (mov r8, r8)
}
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b002      	add	sp, #8
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20001f80 	.word	0x20001f80
 80064b0:	20001a34 	.word	0x20001a34
 80064b4:	08013a34 	.word	0x08013a34
 80064b8:	20000c3c 	.word	0x20000c3c
 80064bc:	20000a64 	.word	0x20000a64
 80064c0:	080139f0 	.word	0x080139f0
 80064c4:	20000bfc 	.word	0x20000bfc
 80064c8:	20000a50 	.word	0x20000a50
 80064cc:	08006f29 	.word	0x08006f29
 80064d0:	20000a68 	.word	0x20000a68
 80064d4:	20000a44 	.word	0x20000a44

080064d8 <a_trhturlp>:
 *                               -------
 *
 */

static void a_trhturlp(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
    uint32_t txlen;

    urlplen = sprintf(post_buffer, "https://shark.carematix.com");
 80064de:	4a19      	ldr	r2, [pc, #100]	; (8006544 <a_trhturlp+0x6c>)
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <a_trhturlp+0x70>)
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f00b f90d 	bl	8011704 <siprintf>
 80064ea:	0003      	movs	r3, r0
 80064ec:	001a      	movs	r2, r3
 80064ee:	4b17      	ldr	r3, [pc, #92]	; (800654c <a_trhturlp+0x74>)
 80064f0:	601a      	str	r2, [r3, #0]
    txlen = sprintf(tx_buffer, "AT+QHTTPURL=%u,80\r\n", urlplen);
 80064f2:	4b16      	ldr	r3, [pc, #88]	; (800654c <a_trhturlp+0x74>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4916      	ldr	r1, [pc, #88]	; (8006550 <a_trhturlp+0x78>)
 80064f8:	4b16      	ldr	r3, [pc, #88]	; (8006554 <a_trhturlp+0x7c>)
 80064fa:	0018      	movs	r0, r3
 80064fc:	f00b f902 	bl	8011704 <siprintf>
 8006500:	0003      	movs	r3, r0
 8006502:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006504:	f001 fbce 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006508:	4b13      	ldr	r3, [pc, #76]	; (8006558 <a_trhturlp+0x80>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <a_trhturlp+0x84>)
 8006510:	22fa      	movs	r2, #250	; 0xfa
 8006512:	00d2      	lsls	r2, r2, #3
 8006514:	4812      	ldr	r0, [pc, #72]	; (8006560 <a_trhturlp+0x88>)
 8006516:	210a      	movs	r1, #10
 8006518:	f001 fb6a 	bl	8007bf0 <quec_receive>
 800651c:	0003      	movs	r3, r0
 800651e:	001a      	movs	r2, r3
 8006520:	4b10      	ldr	r3, [pc, #64]	; (8006564 <a_trhturlp+0x8c>)
 8006522:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <a_trhturlp+0x8c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d107      	bne.n	800653c <a_trhturlp+0x64>
    {
        quec_transmit(tx_buffer, txlen);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	b29a      	uxth	r2, r3
 8006530:	4b08      	ldr	r3, [pc, #32]	; (8006554 <a_trhturlp+0x7c>)
 8006532:	0011      	movs	r1, r2
 8006534:	0018      	movs	r0, r3
 8006536:	f001 fbc7 	bl	8007cc8 <quec_transmit>
    }

    return;
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	46c0      	nop			; (mov r8, r8)
}
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}
 8006544:	08013a64 	.word	0x08013a64
 8006548:	20000c3c 	.word	0x20000c3c
 800654c:	20000a64 	.word	0x20000a64
 8006550:	080139f0 	.word	0x080139f0
 8006554:	20000bfc 	.word	0x20000bfc
 8006558:	20000a50 	.word	0x20000a50
 800655c:	08006f29 	.word	0x08006f29
 8006560:	20000a68 	.word	0x20000a68
 8006564:	20000a44 	.word	0x20000a44

08006568 <a_trhturlsc>:
 *                               -------
 *
 */

static void a_trhturlsc(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
    uint32_t txlen;

    urlplen = sprintf(post_buffer, "https://shark.carematix.com/cs/%s/sc?token=%s", device_id, http_token);
 800656e:	4b19      	ldr	r3, [pc, #100]	; (80065d4 <a_trhturlsc+0x6c>)
 8006570:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <a_trhturlsc+0x70>)
 8006572:	491a      	ldr	r1, [pc, #104]	; (80065dc <a_trhturlsc+0x74>)
 8006574:	481a      	ldr	r0, [pc, #104]	; (80065e0 <a_trhturlsc+0x78>)
 8006576:	f00b f8c5 	bl	8011704 <siprintf>
 800657a:	0003      	movs	r3, r0
 800657c:	001a      	movs	r2, r3
 800657e:	4b19      	ldr	r3, [pc, #100]	; (80065e4 <a_trhturlsc+0x7c>)
 8006580:	601a      	str	r2, [r3, #0]
    txlen = sprintf(tx_buffer, "AT+QHTTPURL=%u,80\r\n", urlplen);
 8006582:	4b18      	ldr	r3, [pc, #96]	; (80065e4 <a_trhturlsc+0x7c>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4918      	ldr	r1, [pc, #96]	; (80065e8 <a_trhturlsc+0x80>)
 8006588:	4b18      	ldr	r3, [pc, #96]	; (80065ec <a_trhturlsc+0x84>)
 800658a:	0018      	movs	r0, r3
 800658c:	f00b f8ba 	bl	8011704 <siprintf>
 8006590:	0003      	movs	r3, r0
 8006592:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006594:	f001 fb86 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <a_trhturlsc+0x88>)
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 10, 2000, &gsm_rcv_ih);
 800659e:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <a_trhturlsc+0x8c>)
 80065a0:	22fa      	movs	r2, #250	; 0xfa
 80065a2:	00d2      	lsls	r2, r2, #3
 80065a4:	4814      	ldr	r0, [pc, #80]	; (80065f8 <a_trhturlsc+0x90>)
 80065a6:	210a      	movs	r1, #10
 80065a8:	f001 fb22 	bl	8007bf0 <quec_receive>
 80065ac:	0003      	movs	r3, r0
 80065ae:	001a      	movs	r2, r3
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <a_trhturlsc+0x94>)
 80065b2:	701a      	strb	r2, [r3, #0]


    if (rcv_status == QS_INPROGRESS)
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <a_trhturlsc+0x94>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	d107      	bne.n	80065cc <a_trhturlsc+0x64>
    {
        quec_transmit(tx_buffer, txlen);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <a_trhturlsc+0x84>)
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f001 fb7f 	bl	8007cc8 <quec_transmit>
    }

    return;
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	46c0      	nop			; (mov r8, r8)
}
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b002      	add	sp, #8
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20001f80 	.word	0x20001f80
 80065d8:	20001a34 	.word	0x20001a34
 80065dc:	08013a80 	.word	0x08013a80
 80065e0:	20000c3c 	.word	0x20000c3c
 80065e4:	20000a64 	.word	0x20000a64
 80065e8:	080139f0 	.word	0x080139f0
 80065ec:	20000bfc 	.word	0x20000bfc
 80065f0:	20000a50 	.word	0x20000a50
 80065f4:	08006f29 	.word	0x08006f29
 80065f8:	20000a68 	.word	0x20000a68
 80065fc:	20000a44 	.word	0x20000a44

08006600 <a_trmsg1>:
 *                               --------
 *
 */

static void a_trmsg1(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006604:	f001 fb4e 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <a_trmsg1+0x3c>)
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 800660e:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <a_trmsg1+0x40>)
 8006610:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <a_trmsg1+0x44>)
 8006612:	480d      	ldr	r0, [pc, #52]	; (8006648 <a_trmsg1+0x48>)
 8006614:	2110      	movs	r1, #16
 8006616:	f001 faeb 	bl	8007bf0 <quec_receive>
 800661a:	0003      	movs	r3, r0
 800661c:	001a      	movs	r2, r3
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <a_trmsg1+0x4c>)
 8006620:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <a_trmsg1+0x4c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b06      	cmp	r3, #6
 8006628:	d105      	bne.n	8006636 <a_trmsg1+0x36>
    {
        quec_transmit((uint8_t *)"AT\r\n", 4);
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <a_trmsg1+0x50>)
 800662c:	2104      	movs	r1, #4
 800662e:	0018      	movs	r0, r3
 8006630:	f001 fb4a 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	46c0      	nop			; (mov r8, r8)
}
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000a50 	.word	0x20000a50
 8006640:	08006f29 	.word	0x08006f29
 8006644:	00001388 	.word	0x00001388
 8006648:	20000a68 	.word	0x20000a68
 800664c:	20000a44 	.word	0x20000a44
 8006650:	08013ab0 	.word	0x08013ab0

08006654 <a_trqccid>:
 *                               ---------
 *
 */

static void a_trqccid(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006658:	f001 fb24 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <a_trqccid+0x40>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 8006662:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <a_trqccid+0x44>)
 8006664:	22fa      	movs	r2, #250	; 0xfa
 8006666:	00d2      	lsls	r2, r2, #3
 8006668:	480c      	ldr	r0, [pc, #48]	; (800669c <a_trqccid+0x48>)
 800666a:	2120      	movs	r1, #32
 800666c:	f001 fac0 	bl	8007bf0 <quec_receive>
 8006670:	0003      	movs	r3, r0
 8006672:	001a      	movs	r2, r3
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <a_trqccid+0x4c>)
 8006676:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <a_trqccid+0x4c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b06      	cmp	r3, #6
 800667e:	d105      	bne.n	800668c <a_trqccid+0x38>
    {
        quec_transmit((uint8_t *)"AT+QCCID\r\n", 10);
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <a_trqccid+0x50>)
 8006682:	210a      	movs	r1, #10
 8006684:	0018      	movs	r0, r3
 8006686:	f001 fb1f 	bl	8007cc8 <quec_transmit>
    }

    return;
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	46c0      	nop			; (mov r8, r8)
}
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	20000a50 	.word	0x20000a50
 8006698:	08006f29 	.word	0x08006f29
 800669c:	20000a68 	.word	0x20000a68
 80066a0:	20000a44 	.word	0x20000a44
 80066a4:	08013ab8 	.word	0x08013ab8

080066a8 <a_trqcfg>:
 *                               --------
 *
 */

static void a_trqcfg(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
    quec_rxflush();
 80066ac:	f001 fafa 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80066b0:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <a_trqcfg+0x40>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 32, 2000, &gsm_rcv_ih);
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <a_trqcfg+0x44>)
 80066b8:	22fa      	movs	r2, #250	; 0xfa
 80066ba:	00d2      	lsls	r2, r2, #3
 80066bc:	480c      	ldr	r0, [pc, #48]	; (80066f0 <a_trqcfg+0x48>)
 80066be:	2120      	movs	r1, #32
 80066c0:	f001 fa96 	bl	8007bf0 <quec_receive>
 80066c4:	0003      	movs	r3, r0
 80066c6:	001a      	movs	r2, r3
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <a_trqcfg+0x4c>)
 80066ca:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <a_trqcfg+0x4c>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b06      	cmp	r3, #6
 80066d2:	d105      	bne.n	80066e0 <a_trqcfg+0x38>
    {
        quec_transmit((uint8_t *)qcfg1msg, sizeof(qcfg1msg) - 1);
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <a_trqcfg+0x50>)
 80066d6:	2115      	movs	r1, #21
 80066d8:	0018      	movs	r0, r3
 80066da:	f001 faf5 	bl	8007cc8 <quec_transmit>
    }

    return;
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46c0      	nop			; (mov r8, r8)
}
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	20000a50 	.word	0x20000a50
 80066ec:	08006f29 	.word	0x08006f29
 80066f0:	20000a68 	.word	0x20000a68
 80066f4:	20000a44 	.word	0x20000a44
 80066f8:	08017794 	.word	0x08017794

080066fc <a_trqiact>:
 *                               ---------
 *
 */

static void a_trqiact(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006700:	f001 fad0 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <a_trqiact+0x3c>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 160000, &gsm_rcv_ih);
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <a_trqiact+0x40>)
 800670c:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <a_trqiact+0x44>)
 800670e:	480d      	ldr	r0, [pc, #52]	; (8006744 <a_trqiact+0x48>)
 8006710:	2110      	movs	r1, #16
 8006712:	f001 fa6d 	bl	8007bf0 <quec_receive>
 8006716:	0003      	movs	r3, r0
 8006718:	001a      	movs	r2, r3
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <a_trqiact+0x4c>)
 800671c:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800671e:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <a_trqiact+0x4c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b06      	cmp	r3, #6
 8006724:	d105      	bne.n	8006732 <a_trqiact+0x36>
    {
        quec_transmit((uint8_t *)"AT+QIACT=1\r\n", 12);
 8006726:	4b09      	ldr	r3, [pc, #36]	; (800674c <a_trqiact+0x50>)
 8006728:	210c      	movs	r1, #12
 800672a:	0018      	movs	r0, r3
 800672c:	f001 facc 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	46c0      	nop			; (mov r8, r8)
}
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000a50 	.word	0x20000a50
 800673c:	08006f29 	.word	0x08006f29
 8006740:	00027100 	.word	0x00027100
 8006744:	20000a68 	.word	0x20000a68
 8006748:	20000a44 	.word	0x20000a44
 800674c:	08013ac4 	.word	0x08013ac4

08006750 <a_trqmtcfg1>:
 *                               -----------
 *
 */

static void a_trqmtcfg1(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006754:	f001 faa6 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <a_trqmtcfg1+0x3c>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 5000, &gsm_rcv_ih);
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <a_trqmtcfg1+0x40>)
 8006760:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <a_trqmtcfg1+0x44>)
 8006762:	480d      	ldr	r0, [pc, #52]	; (8006798 <a_trqmtcfg1+0x48>)
 8006764:	2110      	movs	r1, #16
 8006766:	f001 fa43 	bl	8007bf0 <quec_receive>
 800676a:	0003      	movs	r3, r0
 800676c:	001a      	movs	r2, r3
 800676e:	4b0b      	ldr	r3, [pc, #44]	; (800679c <a_trqmtcfg1+0x4c>)
 8006770:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <a_trqmtcfg1+0x4c>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d105      	bne.n	8006786 <a_trqmtcfg1+0x36>
    {

        quec_transmit((uint8_t *)qmtcfg1msg, sizeof(qmtcfg1msg) - 1);
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <a_trqmtcfg1+0x50>)
 800677c:	2117      	movs	r1, #23
 800677e:	0018      	movs	r0, r3
 8006780:	f001 faa2 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46c0      	nop			; (mov r8, r8)
}
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000a50 	.word	0x20000a50
 8006790:	08006f29 	.word	0x08006f29
 8006794:	00001388 	.word	0x00001388
 8006798:	20000a68 	.word	0x20000a68
 800679c:	20000a44 	.word	0x20000a44
 80067a0:	080177cc 	.word	0x080177cc

080067a4 <a_trqmtcfg2>:
 *                               -----------
 *
 */

static void a_trqmtcfg2(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
    quec_rxflush();
 80067a8:	f001 fa7c 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <a_trqmtcfg2+0x40>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <a_trqmtcfg2+0x44>)
 80067b4:	22fa      	movs	r2, #250	; 0xfa
 80067b6:	00d2      	lsls	r2, r2, #3
 80067b8:	480c      	ldr	r0, [pc, #48]	; (80067ec <a_trqmtcfg2+0x48>)
 80067ba:	2110      	movs	r1, #16
 80067bc:	f001 fa18 	bl	8007bf0 <quec_receive>
 80067c0:	0003      	movs	r3, r0
 80067c2:	001a      	movs	r2, r3
 80067c4:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <a_trqmtcfg2+0x4c>)
 80067c6:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <a_trqmtcfg2+0x4c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b06      	cmp	r3, #6
 80067ce:	d105      	bne.n	80067dc <a_trqmtcfg2+0x38>
    {

        quec_transmit((uint8_t *)qmtcfg2msg, sizeof(qmtcfg2msg) - 1);
 80067d0:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <a_trqmtcfg2+0x50>)
 80067d2:	2119      	movs	r1, #25
 80067d4:	0018      	movs	r0, r3
 80067d6:	f001 fa77 	bl	8007cc8 <quec_transmit>
    }

    return;
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	46c0      	nop			; (mov r8, r8)
}
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20000a50 	.word	0x20000a50
 80067e8:	08006f29 	.word	0x08006f29
 80067ec:	20000a68 	.word	0x20000a68
 80067f0:	20000a44 	.word	0x20000a44
 80067f4:	080177e4 	.word	0x080177e4

080067f8 <a_trqmtclose>:
 *                               ---------
 *
 */

static void a_trqmtclose(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
    quec_rxflush();
 80067fc:	f001 fa52 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <a_trqmtclose+0x40>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <a_trqmtclose+0x44>)
 8006808:	22fa      	movs	r2, #250	; 0xfa
 800680a:	00d2      	lsls	r2, r2, #3
 800680c:	480c      	ldr	r0, [pc, #48]	; (8006840 <a_trqmtclose+0x48>)
 800680e:	2110      	movs	r1, #16
 8006810:	f001 f9ee 	bl	8007bf0 <quec_receive>
 8006814:	0003      	movs	r3, r0
 8006816:	001a      	movs	r2, r3
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <a_trqmtclose+0x4c>)
 800681a:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <a_trqmtclose+0x4c>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d105      	bne.n	8006830 <a_trqmtclose+0x38>
    {

        quec_transmit((uint8_t *)"AT+QMTCLOSE=0\r\n", 15);
 8006824:	4b08      	ldr	r3, [pc, #32]	; (8006848 <a_trqmtclose+0x50>)
 8006826:	210f      	movs	r1, #15
 8006828:	0018      	movs	r0, r3
 800682a:	f001 fa4d 	bl	8007cc8 <quec_transmit>
    }

    return;
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46c0      	nop			; (mov r8, r8)
}
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	46c0      	nop			; (mov r8, r8)
 8006838:	20000a50 	.word	0x20000a50
 800683c:	08006f29 	.word	0x08006f29
 8006840:	20000a68 	.word	0x20000a68
 8006844:	20000a44 	.word	0x20000a44
 8006848:	08013ad4 	.word	0x08013ad4

0800684c <a_trqmtconn>:
 *                               -----------
 *
 */

static void a_trqmtconn(void)
{
 800684c:	b590      	push	{r4, r7, lr}
 800684e:	b085      	sub	sp, #20
 8006850:	af02      	add	r7, sp, #8

    int32_t txlen;

	txlen = sprintf(tx_buffer, "AT+QMTCONN=0,\"%s\",\"%s\",\"%s\"\r\n", mqtt_client_id, mqtt_username, mqtt_password);
 8006852:	4c15      	ldr	r4, [pc, #84]	; (80068a8 <a_trqmtconn+0x5c>)
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <a_trqmtconn+0x60>)
 8006856:	4916      	ldr	r1, [pc, #88]	; (80068b0 <a_trqmtconn+0x64>)
 8006858:	4816      	ldr	r0, [pc, #88]	; (80068b4 <a_trqmtconn+0x68>)
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <a_trqmtconn+0x6c>)
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	0023      	movs	r3, r4
 8006860:	f00a ff50 	bl	8011704 <siprintf>
 8006864:	0003      	movs	r3, r0
 8006866:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006868:	f001 fa1c 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <a_trqmtconn+0x70>)
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <a_trqmtconn+0x74>)
 8006874:	22fa      	movs	r2, #250	; 0xfa
 8006876:	00d2      	lsls	r2, r2, #3
 8006878:	4812      	ldr	r0, [pc, #72]	; (80068c4 <a_trqmtconn+0x78>)
 800687a:	2110      	movs	r1, #16
 800687c:	f001 f9b8 	bl	8007bf0 <quec_receive>
 8006880:	0003      	movs	r3, r0
 8006882:	001a      	movs	r2, r3
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <a_trqmtconn+0x7c>)
 8006886:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <a_trqmtconn+0x7c>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b06      	cmp	r3, #6
 800688e:	d107      	bne.n	80068a0 <a_trqmtconn+0x54>
    {

        quec_transmit(tx_buffer, txlen);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	b29a      	uxth	r2, r3
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <a_trqmtconn+0x68>)
 8006896:	0011      	movs	r1, r2
 8006898:	0018      	movs	r0, r3
 800689a:	f001 fa15 	bl	8007cc8 <quec_transmit>
    }

    return;
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	46c0      	nop			; (mov r8, r8)
}
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b003      	add	sp, #12
 80068a6:	bd90      	pop	{r4, r7, pc}
 80068a8:	20001dc8 	.word	0x20001dc8
 80068ac:	2000199c 	.word	0x2000199c
 80068b0:	08013ae4 	.word	0x08013ae4
 80068b4:	20000bfc 	.word	0x20000bfc
 80068b8:	20001ee4 	.word	0x20001ee4
 80068bc:	20000a50 	.word	0x20000a50
 80068c0:	08006f29 	.word	0x08006f29
 80068c4:	20000a68 	.word	0x20000a68
 80068c8:	20000a44 	.word	0x20000a44

080068cc <a_trqmtdisc>:
 *                               ---------
 *
 */

static void a_trqmtdisc(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
    quec_rxflush();
 80068d0:	f001 f9e8 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80068d4:	4b0d      	ldr	r3, [pc, #52]	; (800690c <a_trqmtdisc+0x40>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <a_trqmtdisc+0x44>)
 80068dc:	22fa      	movs	r2, #250	; 0xfa
 80068de:	00d2      	lsls	r2, r2, #3
 80068e0:	480c      	ldr	r0, [pc, #48]	; (8006914 <a_trqmtdisc+0x48>)
 80068e2:	2110      	movs	r1, #16
 80068e4:	f001 f984 	bl	8007bf0 <quec_receive>
 80068e8:	0003      	movs	r3, r0
 80068ea:	001a      	movs	r2, r3
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <a_trqmtdisc+0x4c>)
 80068ee:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <a_trqmtdisc+0x4c>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d105      	bne.n	8006904 <a_trqmtdisc+0x38>
    {

        quec_transmit((uint8_t *)"AT+QMTDISC=0\r\n", 14);
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <a_trqmtdisc+0x50>)
 80068fa:	210e      	movs	r1, #14
 80068fc:	0018      	movs	r0, r3
 80068fe:	f001 f9e3 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	46c0      	nop			; (mov r8, r8)
}
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	20000a50 	.word	0x20000a50
 8006910:	08006f29 	.word	0x08006f29
 8006914:	20000a68 	.word	0x20000a68
 8006918:	20000a44 	.word	0x20000a44
 800691c:	08013b04 	.word	0x08013b04

08006920 <a_trqmtopen>:
 *                               -----------
 *
 */

static void a_trqmtopen(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
    int32_t txlen;

    txlen = sprintf(tx_buffer, "AT+QMTOPEN=0,\"%s\",%s\r\n\0", mqtt_server, mqtt_port);
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <a_trqmtopen+0x58>)
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <a_trqmtopen+0x5c>)
 800692a:	4915      	ldr	r1, [pc, #84]	; (8006980 <a_trqmtopen+0x60>)
 800692c:	4815      	ldr	r0, [pc, #84]	; (8006984 <a_trqmtopen+0x64>)
 800692e:	f00a fee9 	bl	8011704 <siprintf>
 8006932:	0003      	movs	r3, r0
 8006934:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006936:	f001 f9b5 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <a_trqmtopen+0x68>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006940:	4b12      	ldr	r3, [pc, #72]	; (800698c <a_trqmtopen+0x6c>)
 8006942:	22fa      	movs	r2, #250	; 0xfa
 8006944:	00d2      	lsls	r2, r2, #3
 8006946:	4812      	ldr	r0, [pc, #72]	; (8006990 <a_trqmtopen+0x70>)
 8006948:	2110      	movs	r1, #16
 800694a:	f001 f951 	bl	8007bf0 <quec_receive>
 800694e:	0003      	movs	r3, r0
 8006950:	001a      	movs	r2, r3
 8006952:	4b10      	ldr	r3, [pc, #64]	; (8006994 <a_trqmtopen+0x74>)
 8006954:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006956:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <a_trqmtopen+0x74>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b06      	cmp	r3, #6
 800695c:	d107      	bne.n	800696e <a_trqmtopen+0x4e>
    {

        quec_transmit(tx_buffer, txlen);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b29a      	uxth	r2, r3
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <a_trqmtopen+0x64>)
 8006964:	0011      	movs	r1, r2
 8006966:	0018      	movs	r0, r3
 8006968:	f001 f9ae 	bl	8007cc8 <quec_transmit>
    }

    return;
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46c0      	nop			; (mov r8, r8)
}
 8006970:	46bd      	mov	sp, r7
 8006972:	b002      	add	sp, #8
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	20001dc0 	.word	0x20001dc0
 800697c:	20001f1c 	.word	0x20001f1c
 8006980:	08013b14 	.word	0x08013b14
 8006984:	20000bfc 	.word	0x20000bfc
 8006988:	20000a50 	.word	0x20000a50
 800698c:	08006f29 	.word	0x08006f29
 8006990:	20000a68 	.word	0x20000a68
 8006994:	20000a44 	.word	0x20000a44

08006998 <a_trqmtpub>:
 *                               -----------
 *
 */

static void a_trqmtpub(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
    int32_t txlen;

    txlen = sprintf(tx_buffer, "AT+QMTPUB=0,1,1,0,\"%s\"\r\n", twin_pb);
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <a_trqmtpub+0x58>)
 80069a0:	4914      	ldr	r1, [pc, #80]	; (80069f4 <a_trqmtpub+0x5c>)
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <a_trqmtpub+0x60>)
 80069a4:	0018      	movs	r0, r3
 80069a6:	f00a fead 	bl	8011704 <siprintf>
 80069aa:	0003      	movs	r3, r0
 80069ac:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 80069ae:	f001 f979 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <a_trqmtpub+0x64>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 20, 2000, &gsm_rcv_ih);
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <a_trqmtpub+0x68>)
 80069ba:	22fa      	movs	r2, #250	; 0xfa
 80069bc:	00d2      	lsls	r2, r2, #3
 80069be:	4811      	ldr	r0, [pc, #68]	; (8006a04 <a_trqmtpub+0x6c>)
 80069c0:	2114      	movs	r1, #20
 80069c2:	f001 f915 	bl	8007bf0 <quec_receive>
 80069c6:	0003      	movs	r3, r0
 80069c8:	001a      	movs	r2, r3
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <a_trqmtpub+0x70>)
 80069cc:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 80069ce:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <a_trqmtpub+0x70>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d107      	bne.n	80069e6 <a_trqmtpub+0x4e>
    {

        quec_transmit(tx_buffer, txlen);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <a_trqmtpub+0x60>)
 80069dc:	0011      	movs	r1, r2
 80069de:	0018      	movs	r0, r3
 80069e0:	f001 f972 	bl	8007cc8 <quec_transmit>
    }

    return;
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46c0      	nop			; (mov r8, r8)
}
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b002      	add	sp, #8
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	20001a60 	.word	0x20001a60
 80069f4:	08013b2c 	.word	0x08013b2c
 80069f8:	20000bfc 	.word	0x20000bfc
 80069fc:	20000a50 	.word	0x20000a50
 8006a00:	08006f29 	.word	0x08006f29
 8006a04:	20000a68 	.word	0x20000a68
 8006a08:	20000a44 	.word	0x20000a44

08006a0c <a_trqmtpub2>:
 *                               -----------
 *
 */

static void a_trqmtpub2(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
    int32_t txlen;

    txlen = sprintf(tx_buffer, "AT+QMTPUB=0,1,1,0,\"devices/%s/messages/events/\"\r\n", device_id);
 8006a12:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <a_trqmtpub2+0x58>)
 8006a14:	4914      	ldr	r1, [pc, #80]	; (8006a68 <a_trqmtpub2+0x5c>)
 8006a16:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <a_trqmtpub2+0x60>)
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f00a fe73 	bl	8011704 <siprintf>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006a22:	f001 f93f 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <a_trqmtpub2+0x64>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 20, 2000, &gsm_rcv_ih);
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <a_trqmtpub2+0x68>)
 8006a2e:	22fa      	movs	r2, #250	; 0xfa
 8006a30:	00d2      	lsls	r2, r2, #3
 8006a32:	4811      	ldr	r0, [pc, #68]	; (8006a78 <a_trqmtpub2+0x6c>)
 8006a34:	2114      	movs	r1, #20
 8006a36:	f001 f8db 	bl	8007bf0 <quec_receive>
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <a_trqmtpub2+0x70>)
 8006a40:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <a_trqmtpub2+0x70>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b06      	cmp	r3, #6
 8006a48:	d107      	bne.n	8006a5a <a_trqmtpub2+0x4e>
    {

        quec_transmit(tx_buffer, txlen);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <a_trqmtpub2+0x60>)
 8006a50:	0011      	movs	r1, r2
 8006a52:	0018      	movs	r0, r3
 8006a54:	f001 f938 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006a58:	46c0      	nop			; (mov r8, r8)
 8006a5a:	46c0      	nop			; (mov r8, r8)
}
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b002      	add	sp, #8
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	20001a34 	.word	0x20001a34
 8006a68:	08013b48 	.word	0x08013b48
 8006a6c:	20000bfc 	.word	0x20000bfc
 8006a70:	20000a50 	.word	0x20000a50
 8006a74:	08006f29 	.word	0x08006f29
 8006a78:	20000a68 	.word	0x20000a68
 8006a7c:	20000a44 	.word	0x20000a44

08006a80 <a_trqmtpub3>:
 *                               -----------
 *
 */

static void a_trqmtpub3(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
    int32_t txlen;

    txlen = sprintf(tx_buffer, "AT+QMTPUB=0,1,1,0,\"%s\"\r\n", twin_rp);
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <a_trqmtpub3+0x58>)
 8006a88:	4914      	ldr	r1, [pc, #80]	; (8006adc <a_trqmtpub3+0x5c>)
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <a_trqmtpub3+0x60>)
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f00a fe39 	bl	8011704 <siprintf>
 8006a92:	0003      	movs	r3, r0
 8006a94:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006a96:	f001 f905 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <a_trqmtpub3+0x64>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 20, 2000, &gsm_rcv_ih);
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <a_trqmtpub3+0x68>)
 8006aa2:	22fa      	movs	r2, #250	; 0xfa
 8006aa4:	00d2      	lsls	r2, r2, #3
 8006aa6:	4811      	ldr	r0, [pc, #68]	; (8006aec <a_trqmtpub3+0x6c>)
 8006aa8:	2114      	movs	r1, #20
 8006aaa:	f001 f8a1 	bl	8007bf0 <quec_receive>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	001a      	movs	r2, r3
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <a_trqmtpub3+0x70>)
 8006ab4:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <a_trqmtpub3+0x70>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b06      	cmp	r3, #6
 8006abc:	d107      	bne.n	8006ace <a_trqmtpub3+0x4e>
    {

        quec_transmit(tx_buffer, txlen);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <a_trqmtpub3+0x60>)
 8006ac4:	0011      	movs	r1, r2
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f001 f8fe 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006acc:	46c0      	nop			; (mov r8, r8)
 8006ace:	46c0      	nop			; (mov r8, r8)
}
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	20001e80 	.word	0x20001e80
 8006adc:	08013b2c 	.word	0x08013b2c
 8006ae0:	20000bfc 	.word	0x20000bfc
 8006ae4:	20000a50 	.word	0x20000a50
 8006ae8:	08006f29 	.word	0x08006f29
 8006aec:	20000a68 	.word	0x20000a68
 8006af0:	20000a44 	.word	0x20000a44

08006af4 <a_trqmtsub>:
 *                               -----------
 *
 */

static void a_trqmtsub(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
    int32_t txlen;

    txlen = sprintf(tx_buffer, "AT+QMTSUB=0,1,\"%s\",0\r\n", twin_sb);
 8006afa:	4a14      	ldr	r2, [pc, #80]	; (8006b4c <a_trqmtsub+0x58>)
 8006afc:	4914      	ldr	r1, [pc, #80]	; (8006b50 <a_trqmtsub+0x5c>)
 8006afe:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <a_trqmtsub+0x60>)
 8006b00:	0018      	movs	r0, r3
 8006b02:	f00a fdff 	bl	8011704 <siprintf>
 8006b06:	0003      	movs	r3, r0
 8006b08:	607b      	str	r3, [r7, #4]

    quec_rxflush();
 8006b0a:	f001 f8cb 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006b0e:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <a_trqmtsub+0x64>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 20, 2000, &gsm_rcv_ih);
 8006b14:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <a_trqmtsub+0x68>)
 8006b16:	22fa      	movs	r2, #250	; 0xfa
 8006b18:	00d2      	lsls	r2, r2, #3
 8006b1a:	4811      	ldr	r0, [pc, #68]	; (8006b60 <a_trqmtsub+0x6c>)
 8006b1c:	2114      	movs	r1, #20
 8006b1e:	f001 f867 	bl	8007bf0 <quec_receive>
 8006b22:	0003      	movs	r3, r0
 8006b24:	001a      	movs	r2, r3
 8006b26:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <a_trqmtsub+0x70>)
 8006b28:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <a_trqmtsub+0x70>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d107      	bne.n	8006b42 <a_trqmtsub+0x4e>
    {

        quec_transmit(tx_buffer, txlen);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <a_trqmtsub+0x60>)
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f001 f8c4 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	46c0      	nop			; (mov r8, r8)
}
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b002      	add	sp, #8
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	20001d30 	.word	0x20001d30
 8006b50:	08013b7c 	.word	0x08013b7c
 8006b54:	20000bfc 	.word	0x20000bfc
 8006b58:	20000a50 	.word	0x20000a50
 8006b5c:	08006f29 	.word	0x08006f29
 8006b60:	20000a68 	.word	0x20000a68
 8006b64:	20000a44 	.word	0x20000a44

08006b68 <a_trqntp>:
 *                               -----------
 *
 */

static void a_trqntp(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006b6c:	f001 f89a 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <a_trqntp+0x3c>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 64, 5000, &gsm_rcv_ih);
 8006b76:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <a_trqntp+0x40>)
 8006b78:	4a0c      	ldr	r2, [pc, #48]	; (8006bac <a_trqntp+0x44>)
 8006b7a:	480d      	ldr	r0, [pc, #52]	; (8006bb0 <a_trqntp+0x48>)
 8006b7c:	2140      	movs	r1, #64	; 0x40
 8006b7e:	f001 f837 	bl	8007bf0 <quec_receive>
 8006b82:	0003      	movs	r3, r0
 8006b84:	001a      	movs	r2, r3
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <a_trqntp+0x4c>)
 8006b88:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <a_trqntp+0x4c>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d105      	bne.n	8006b9e <a_trqntp+0x36>
    {

        quec_transmit((uint8_t *)"AT+QNTP=1,\"0.us.pool.ntp.org\"\r\n", 31);
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <a_trqntp+0x50>)
 8006b94:	211f      	movs	r1, #31
 8006b96:	0018      	movs	r0, r3
 8006b98:	f001 f896 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006b9c:	46c0      	nop			; (mov r8, r8)
 8006b9e:	46c0      	nop			; (mov r8, r8)
}
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000a50 	.word	0x20000a50
 8006ba8:	08006f29 	.word	0x08006f29
 8006bac:	00001388 	.word	0x00001388
 8006bb0:	20000a68 	.word	0x20000a68
 8006bb4:	20000a44 	.word	0x20000a44
 8006bb8:	08013b94 	.word	0x08013b94

08006bbc <a_trqssl1>:
 *                               ---------
 *
 */

static void a_trqssl1(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006bc0:	f001 f870 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <a_trqssl1+0x40>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <a_trqssl1+0x44>)
 8006bcc:	22fa      	movs	r2, #250	; 0xfa
 8006bce:	00d2      	lsls	r2, r2, #3
 8006bd0:	480c      	ldr	r0, [pc, #48]	; (8006c04 <a_trqssl1+0x48>)
 8006bd2:	2110      	movs	r1, #16
 8006bd4:	f001 f80c 	bl	8007bf0 <quec_receive>
 8006bd8:	0003      	movs	r3, r0
 8006bda:	001a      	movs	r2, r3
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <a_trqssl1+0x4c>)
 8006bde:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <a_trqssl1+0x4c>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b06      	cmp	r3, #6
 8006be6:	d105      	bne.n	8006bf4 <a_trqssl1+0x38>
    {

        quec_transmit((uint8_t *)qssl1msg, sizeof(qssl1msg) - 1);
 8006be8:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <a_trqssl1+0x50>)
 8006bea:	211b      	movs	r1, #27
 8006bec:	0018      	movs	r0, r3
 8006bee:	f001 f86b 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	46c0      	nop			; (mov r8, r8)
}
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	20000a50 	.word	0x20000a50
 8006c00:	08006f29 	.word	0x08006f29
 8006c04:	20000a68 	.word	0x20000a68
 8006c08:	20000a44 	.word	0x20000a44
 8006c0c:	08017800 	.word	0x08017800

08006c10 <a_trqssl2>:
 *                               ---------
 *
 */

static void a_trqssl2(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006c14:	f001 f846 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <a_trqssl2+0x40>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <a_trqssl2+0x44>)
 8006c20:	22fa      	movs	r2, #250	; 0xfa
 8006c22:	00d2      	lsls	r2, r2, #3
 8006c24:	480c      	ldr	r0, [pc, #48]	; (8006c58 <a_trqssl2+0x48>)
 8006c26:	2110      	movs	r1, #16
 8006c28:	f000 ffe2 	bl	8007bf0 <quec_receive>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	001a      	movs	r2, r3
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <a_trqssl2+0x4c>)
 8006c32:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006c34:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <a_trqssl2+0x4c>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d105      	bne.n	8006c48 <a_trqssl2+0x38>
    {

        quec_transmit((uint8_t *)qssl2msg, sizeof(qssl2msg) - 1);
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <a_trqssl2+0x50>)
 8006c3e:	211d      	movs	r1, #29
 8006c40:	0018      	movs	r0, r3
 8006c42:	f001 f841 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46c0      	nop			; (mov r8, r8)
}
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	20000a50 	.word	0x20000a50
 8006c54:	08006f29 	.word	0x08006f29
 8006c58:	20000a68 	.word	0x20000a68
 8006c5c:	20000a44 	.word	0x20000a44
 8006c60:	0801781c 	.word	0x0801781c

08006c64 <a_trqssl3>:
 *                               ---------
 *
 */

static void a_trqssl3(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006c68:	f001 f81c 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <a_trqssl3+0x40>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <a_trqssl3+0x44>)
 8006c74:	22fa      	movs	r2, #250	; 0xfa
 8006c76:	00d2      	lsls	r2, r2, #3
 8006c78:	480c      	ldr	r0, [pc, #48]	; (8006cac <a_trqssl3+0x48>)
 8006c7a:	2110      	movs	r1, #16
 8006c7c:	f000 ffb8 	bl	8007bf0 <quec_receive>
 8006c80:	0003      	movs	r3, r0
 8006c82:	001a      	movs	r2, r3
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <a_trqssl3+0x4c>)
 8006c86:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <a_trqssl3+0x4c>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b06      	cmp	r3, #6
 8006c8e:	d105      	bne.n	8006c9c <a_trqssl3+0x38>
    {

        quec_transmit((uint8_t *)qssl3msg, sizeof(qssl3msg) - 1);
 8006c90:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <a_trqssl3+0x50>)
 8006c92:	2123      	movs	r1, #35	; 0x23
 8006c94:	0018      	movs	r0, r3
 8006c96:	f001 f817 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46c0      	nop			; (mov r8, r8)
}
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	20000a50 	.word	0x20000a50
 8006ca8:	08006f29 	.word	0x08006f29
 8006cac:	20000a68 	.word	0x20000a68
 8006cb0:	20000a44 	.word	0x20000a44
 8006cb4:	0801783c 	.word	0x0801783c

08006cb8 <a_trqssl4>:
 *                               ---------
 *
 */

static void a_trqssl4(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006cbc:	f000 fff2 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006cc0:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <a_trqssl4+0x40>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <a_trqssl4+0x44>)
 8006cc8:	22fa      	movs	r2, #250	; 0xfa
 8006cca:	00d2      	lsls	r2, r2, #3
 8006ccc:	480c      	ldr	r0, [pc, #48]	; (8006d00 <a_trqssl4+0x48>)
 8006cce:	2110      	movs	r1, #16
 8006cd0:	f000 ff8e 	bl	8007bf0 <quec_receive>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	; (8006d04 <a_trqssl4+0x4c>)
 8006cda:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <a_trqssl4+0x4c>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b06      	cmp	r3, #6
 8006ce2:	d105      	bne.n	8006cf0 <a_trqssl4+0x38>
    {

        quec_transmit((uint8_t *)qssl4msg, sizeof(qssl4msg) - 1);
 8006ce4:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <a_trqssl4+0x50>)
 8006ce6:	212d      	movs	r1, #45	; 0x2d
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 ffed 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	46c0      	nop			; (mov r8, r8)
}
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	20000a50 	.word	0x20000a50
 8006cfc:	08006f29 	.word	0x08006f29
 8006d00:	20000a68 	.word	0x20000a68
 8006d04:	20000a44 	.word	0x20000a44
 8006d08:	08017860 	.word	0x08017860

08006d0c <a_trqssl5>:
 *                               ---------
 *
 */

static void a_trqssl5(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006d10:	f000 ffc8 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006d14:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <a_trqssl5+0x40>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <a_trqssl5+0x44>)
 8006d1c:	22fa      	movs	r2, #250	; 0xfa
 8006d1e:	00d2      	lsls	r2, r2, #3
 8006d20:	480c      	ldr	r0, [pc, #48]	; (8006d54 <a_trqssl5+0x48>)
 8006d22:	2110      	movs	r1, #16
 8006d24:	f000 ff64 	bl	8007bf0 <quec_receive>
 8006d28:	0003      	movs	r3, r0
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <a_trqssl5+0x4c>)
 8006d2e:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <a_trqssl5+0x4c>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d105      	bne.n	8006d44 <a_trqssl5+0x38>
    {

        quec_transmit((uint8_t *)qssl5msg, sizeof(qssl5msg) - 1);
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <a_trqssl5+0x50>)
 8006d3a:	2131      	movs	r1, #49	; 0x31
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f000 ffc3 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	46c0      	nop			; (mov r8, r8)
}
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	20000a50 	.word	0x20000a50
 8006d50:	08006f29 	.word	0x08006f29
 8006d54:	20000a68 	.word	0x20000a68
 8006d58:	20000a44 	.word	0x20000a44
 8006d5c:	08017890 	.word	0x08017890

08006d60 <a_trqssl6>:
 *                               ---------
 *
 */

static void a_trqssl6(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006d64:	f000 ff9e 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <a_trqssl6+0x40>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <a_trqssl6+0x44>)
 8006d70:	22fa      	movs	r2, #250	; 0xfa
 8006d72:	00d2      	lsls	r2, r2, #3
 8006d74:	480c      	ldr	r0, [pc, #48]	; (8006da8 <a_trqssl6+0x48>)
 8006d76:	2110      	movs	r1, #16
 8006d78:	f000 ff3a 	bl	8007bf0 <quec_receive>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	001a      	movs	r2, r3
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <a_trqssl6+0x4c>)
 8006d82:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006d84:	4b09      	ldr	r3, [pc, #36]	; (8006dac <a_trqssl6+0x4c>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b06      	cmp	r3, #6
 8006d8a:	d105      	bne.n	8006d98 <a_trqssl6+0x38>
    {

        quec_transmit((uint8_t *)qssl6msg, sizeof(qssl6msg) - 1);
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <a_trqssl6+0x50>)
 8006d8e:	212d      	movs	r1, #45	; 0x2d
 8006d90:	0018      	movs	r0, r3
 8006d92:	f000 ff99 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	46c0      	nop			; (mov r8, r8)
}
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	20000a50 	.word	0x20000a50
 8006da4:	08006f29 	.word	0x08006f29
 8006da8:	20000a68 	.word	0x20000a68
 8006dac:	20000a44 	.word	0x20000a44
 8006db0:	080178c4 	.word	0x080178c4

08006db4 <a_trqurccfg>:
 *                               -----------
 *
 */

static void a_trqurccfg(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
    quec_rxflush();
 8006db8:	f000 ff74 	bl	8007ca4 <quec_rxflush>
    rcv_count = 0;
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <a_trqurccfg+0x40>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
    rcv_status = quec_receive(rcv_buffer, 16, 2000, &gsm_rcv_ih);
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <a_trqurccfg+0x44>)
 8006dc4:	22fa      	movs	r2, #250	; 0xfa
 8006dc6:	00d2      	lsls	r2, r2, #3
 8006dc8:	480c      	ldr	r0, [pc, #48]	; (8006dfc <a_trqurccfg+0x48>)
 8006dca:	2110      	movs	r1, #16
 8006dcc:	f000 ff10 	bl	8007bf0 <quec_receive>
 8006dd0:	0003      	movs	r3, r0
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <a_trqurccfg+0x4c>)
 8006dd6:	701a      	strb	r2, [r3, #0]

    if (rcv_status == QS_INPROGRESS)
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <a_trqurccfg+0x4c>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	d105      	bne.n	8006dec <a_trqurccfg+0x38>
    {

        quec_transmit((uint8_t *)qurccfgmsg, sizeof(qurccfgmsg) - 1);
 8006de0:	4b08      	ldr	r3, [pc, #32]	; (8006e04 <a_trqurccfg+0x50>)
 8006de2:	211e      	movs	r1, #30
 8006de4:	0018      	movs	r0, r3
 8006de6:	f000 ff6f 	bl	8007cc8 <quec_transmit>
    }

    return;
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	46c0      	nop			; (mov r8, r8)
}
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	20000a50 	.word	0x20000a50
 8006df8:	08006f29 	.word	0x08006f29
 8006dfc:	20000a68 	.word	0x20000a68
 8006e00:	20000a44 	.word	0x20000a44
 8006e04:	080177ac 	.word	0x080177ac

08006e08 <a_txnul>:
 *                               -------
 *
 */

static void a_txnul(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
    quec_transmit((uint8_t *)&nullmsg, 1);
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <a_txnul+0x14>)
 8006e0e:	2101      	movs	r1, #1
 8006e10:	0018      	movs	r0, r3
 8006e12:	f000 ff59 	bl	8007cc8 <quec_transmit>
    return;
 8006e16:	46c0      	nop			; (mov r8, r8)
}
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	080178f2 	.word	0x080178f2

08006e20 <a_txrecord>:
 *                               -----------
 *
 */

static void a_txrecord(void)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
    uint16_t txlen;

    txlen = publish_meter_readings(post_buffer);
 8006e26:	1dbc      	adds	r4, r7, #6
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <a_txrecord+0x2c>)
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f7fa f97e 	bl	800112c <publish_meter_readings>
 8006e30:	0003      	movs	r3, r0
 8006e32:	8023      	strh	r3, [r4, #0]
    quec_transmit(post_buffer, txlen);
 8006e34:	1dbb      	adds	r3, r7, #6
 8006e36:	881a      	ldrh	r2, [r3, #0]
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <a_txrecord+0x2c>)
 8006e3a:	0011      	movs	r1, r2
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 ff43 	bl	8007cc8 <quec_transmit>
    return;
 8006e42:	46c0      	nop			; (mov r8, r8)
}
 8006e44:	46bd      	mov	sp, r7
 8006e46:	b003      	add	sp, #12
 8006e48:	bd90      	pop	{r4, r7, pc}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	20000c3c 	.word	0x20000c3c

08006e50 <a_txsub>:
 *                               -------
 *
 */

static void a_txsub(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
    HAL_Delay(2);
 8006e54:	2002      	movs	r0, #2
 8006e56:	f002 fc43 	bl	80096e0 <HAL_Delay>
    quec_transmit((uint8_t *)&submsg, 1);
 8006e5a:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <a_txsub+0x1c>)
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f000 ff32 	bl	8007cc8 <quec_transmit>

    return;
 8006e64:	46c0      	nop			; (mov r8, r8)
}
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			; (mov r8, r8)
 8006e6c:	080178f3 	.word	0x080178f3

08006e70 <a_txtwin>:
 *                               -------
 *
 */

static void a_txtwin(void)
{
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b089      	sub	sp, #36	; 0x24
 8006e74:	af06      	add	r7, sp, #24
    uint16_t txlen;

    txlen = sprintf((char*)post_buffer, "{\"fv\":\"%s\",\"pv\":\"%s\",\"cv\":\"%s\",\"mv\":\"%s\",\"sim\":\"%s\",\"imei\":\"%s\",\"imsi\":\"%s\"}\r\n",
 8006e76:	4c0f      	ldr	r4, [pc, #60]	; (8006eb4 <a_txtwin+0x44>)
 8006e78:	4a0f      	ldr	r2, [pc, #60]	; (8006eb8 <a_txtwin+0x48>)
 8006e7a:	4910      	ldr	r1, [pc, #64]	; (8006ebc <a_txtwin+0x4c>)
 8006e7c:	4810      	ldr	r0, [pc, #64]	; (8006ec0 <a_txtwin+0x50>)
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <a_txtwin+0x54>)
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <a_txtwin+0x58>)
 8006e84:	9303      	str	r3, [sp, #12]
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <a_txtwin+0x5c>)
 8006e88:	9302      	str	r3, [sp, #8]
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <a_txtwin+0x60>)
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <a_txtwin+0x64>)
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	0023      	movs	r3, r4
 8006e94:	f00a fc36 	bl	8011704 <siprintf>
 8006e98:	0002      	movs	r2, r0
 8006e9a:	1dbb      	adds	r3, r7, #6
 8006e9c:	801a      	strh	r2, [r3, #0]
                       configuration_version,
                       module_firmware_version,
                       ccid,
                       imei,
                       imsi);
    quec_transmit(post_buffer, txlen);
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <a_txtwin+0x50>)
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f000 ff0e 	bl	8007cc8 <quec_transmit>
    return;
 8006eac:	46c0      	nop			; (mov r8, r8)
}
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b003      	add	sp, #12
 8006eb2:	bd90      	pop	{r4, r7, pc}
 8006eb4:	20000000 	.word	0x20000000
 8006eb8:	08013ce0 	.word	0x08013ce0
 8006ebc:	08013bb4 	.word	0x08013bb4
 8006ec0:	20000c3c 	.word	0x20000c3c
 8006ec4:	20001a50 	.word	0x20001a50
 8006ec8:	20001ac4 	.word	0x20001ac4
 8006ecc:	20001d94 	.word	0x20001d94
 8006ed0:	20001e40 	.word	0x20001e40
 8006ed4:	20001a44 	.word	0x20001a44

08006ed8 <compare>:
 *
 * return - none
 */

static uint32_t compare(uint32_t index, uint8_t *response, uint32_t count)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t stat;

    stat = 1;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]

    for (i = 0; i < count; i++)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e010      	b.n	8006f10 <compare+0x38>
    {

        if (response[i] != rcv_buffer[i + index])
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	781a      	ldrb	r2, [r3, #0]
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	18cb      	adds	r3, r1, r3
 8006efc:	4909      	ldr	r1, [pc, #36]	; (8006f24 <compare+0x4c>)
 8006efe:	5ccb      	ldrb	r3, [r1, r3]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d002      	beq.n	8006f0a <compare+0x32>
        {
            stat = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
            break;
 8006f08:	e006      	b.n	8006f18 <compare+0x40>
    for (i = 0; i < count; i++)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3ea      	bcc.n	8006eee <compare+0x16>
        }

    }

    return stat;
 8006f18:	693b      	ldr	r3, [r7, #16]
}
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b006      	add	sp, #24
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	20000a68 	.word	0x20000a68

08006f28 <gsm_rcv_ih>:
 *
 * return - none
 */

static void gsm_rcv_ih(uint8_t stat, uint32_t count)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	0002      	movs	r2, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	1dfb      	adds	r3, r7, #7
 8006f34:	701a      	strb	r2, [r3, #0]
    rcv_status = stat;
 8006f36:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <gsm_rcv_ih+0x24>)
 8006f38:	1dfa      	adds	r2, r7, #7
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	701a      	strb	r2, [r3, #0]
    rcv_count = count;
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <gsm_rcv_ih+0x28>)
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	601a      	str	r2, [r3, #0]
    return;
 8006f44:	46c0      	nop			; (mov r8, r8)
}
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000a44 	.word	0x20000a44
 8006f50:	20000a50 	.word	0x20000a50

08006f54 <state_trace>:
 *
 * return - none
 */

static void state_trace(uint32_t evnum)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af02      	add	r7, sp, #8
 8006f5a:	6078      	str	r0, [r7, #4]

    if (gsm_stmachine.sms_curstate != oldstate)
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <state_trace+0x3c>)
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <state_trace+0x40>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d00a      	beq.n	8006f7e <state_trace+0x2a>
    {
        debug_printf(DBGLVL_MAX, (uint8_t *)"GSM STATE: %u -> %u, EVENT %u\r\n", oldstate, gsm_stmachine.sms_curstate, evnum);
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <state_trace+0x40>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <state_trace+0x3c>)
 8006f6e:	6858      	ldr	r0, [r3, #4]
 8006f70:	4909      	ldr	r1, [pc, #36]	; (8006f98 <state_trace+0x44>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	0003      	movs	r3, r0
 8006f78:	2004      	movs	r0, #4
 8006f7a:	f7fb fbeb 	bl	8002754 <debug_printf>
    }

    oldstate = gsm_stmachine.sms_curstate;
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <state_trace+0x3c>)
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <state_trace+0x40>)
 8006f84:	601a      	str	r2, [r3, #0]
    return;
 8006f86:	46c0      	nop			; (mov r8, r8)
}
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b002      	add	sp, #8
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	20001fb0 	.word	0x20001fb0
 8006f94:	20000a5c 	.word	0x20000a5c
 8006f98:	08013c08 	.word	0x08013c08

08006f9c <led_init>:
 *
 * return - none
 */

void led_init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    led_timer = 0xFFFFFFFF;
 8006fa2:	4b2b      	ldr	r3, [pc, #172]	; (8007050 <led_init+0xb4>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	4252      	negs	r2, r2
 8006fa8:	601a      	str	r2, [r3, #0]
    green_led.lhs_mode = LED_MODE_OFF;
 8006faa:	4b2a      	ldr	r3, [pc, #168]	; (8007054 <led_init+0xb8>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
    green_led.lhs_state = 0;
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <led_init+0xb8>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	705a      	strb	r2, [r3, #1]
    red_led.lhs_mode = LED_MODE_OFF;
 8006fb6:	4b28      	ldr	r3, [pc, #160]	; (8007058 <led_init+0xbc>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
    red_led.lhs_state = 0;
 8006fbc:	4b26      	ldr	r3, [pc, #152]	; (8007058 <led_init+0xbc>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	705a      	strb	r2, [r3, #1]
    yellow_led.lhs_mode = LED_MODE_OFF;
 8006fc2:	4b26      	ldr	r3, [pc, #152]	; (800705c <led_init+0xc0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
    yellow_led.lhs_state = 0;
 8006fc8:	4b24      	ldr	r3, [pc, #144]	; (800705c <led_init+0xc0>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	705a      	strb	r2, [r3, #1]

    initstruc.Pin = GREEN_LED_PIN;
 8006fce:	1d3b      	adds	r3, r7, #4
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8006fd4:	1d3b      	adds	r3, r7, #4
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	2200      	movs	r2, #0
 8006fde:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe0:	1d3b      	adds	r3, r7, #4
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	2200      	movs	r2, #0
 8006fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GREEN_LED_PORT, &initstruc);
 8006fec:	1d3b      	adds	r3, r7, #4
 8006fee:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <led_init+0xc4>)
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	0010      	movs	r0, r2
 8006ff4:	f002 fcbc 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = RED_LED_PIN;
 8006ff8:	1d3b      	adds	r3, r7, #4
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RED_LED_PORT, &initstruc);
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	4a17      	ldr	r2, [pc, #92]	; (8007060 <led_init+0xc4>)
 8007002:	0019      	movs	r1, r3
 8007004:	0010      	movs	r0, r2
 8007006:	f002 fcb3 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = YELLOW_LED_PIN;
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	2240      	movs	r2, #64	; 0x40
 800700e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(YELLOW_LED_PORT, &initstruc);
 8007010:	1d3b      	adds	r3, r7, #4
 8007012:	4a13      	ldr	r2, [pc, #76]	; (8007060 <led_init+0xc4>)
 8007014:	0019      	movs	r1, r3
 8007016:	0010      	movs	r0, r2
 8007018:	f002 fcaa 	bl	8009970 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 800701c:	4b10      	ldr	r3, [pc, #64]	; (8007060 <led_init+0xc4>)
 800701e:	2200      	movs	r2, #0
 8007020:	2108      	movs	r1, #8
 8007022:	0018      	movs	r0, r3
 8007024:	f002 fe14 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8007028:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <led_init+0xc4>)
 800702a:	2200      	movs	r2, #0
 800702c:	2110      	movs	r1, #16
 800702e:	0018      	movs	r0, r3
 8007030:	f002 fe0e 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <led_init+0xc4>)
 8007036:	2200      	movs	r2, #0
 8007038:	2140      	movs	r1, #64	; 0x40
 800703a:	0018      	movs	r0, r3
 800703c:	f002 fe08 	bl	8009c50 <HAL_GPIO_WritePin>

    led_timer = BLINK_PERIOD_MS / 2;
 8007040:	4b03      	ldr	r3, [pc, #12]	; (8007050 <led_init+0xb4>)
 8007042:	22fa      	movs	r2, #250	; 0xfa
 8007044:	0052      	lsls	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

    return;
 8007048:	46c0      	nop			; (mov r8, r8)
}
 800704a:	46bd      	mov	sp, r7
 800704c:	b006      	add	sp, #24
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000dcc 	.word	0x20000dcc
 8007054:	20000dd0 	.word	0x20000dd0
 8007058:	20000dd4 	.word	0x20000dd4
 800705c:	20000dd8 	.word	0x20000dd8
 8007060:	48000400 	.word	0x48000400

08007064 <led_green_set>:
 *
 * return - none
 */

void led_green_set(uint8_t mode)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	0002      	movs	r2, r0
 800706c:	1dfb      	adds	r3, r7, #7
 800706e:	701a      	strb	r2, [r3, #0]

    if (green_led.lhs_mode != mode)
 8007070:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <led_green_set+0x70>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	1dfa      	adds	r2, r7, #7
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d027      	beq.n	80070cc <led_green_set+0x68>
    {
        led_timer = 0xFFFFFFFF;
 800707c:	4b16      	ldr	r3, [pc, #88]	; (80070d8 <led_green_set+0x74>)
 800707e:	2201      	movs	r2, #1
 8007080:	4252      	negs	r2, r2
 8007082:	601a      	str	r2, [r3, #0]
        green_led.lhs_mode = mode;
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <led_green_set+0x70>)
 8007086:	1dfa      	adds	r2, r7, #7
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	701a      	strb	r2, [r3, #0]

        if (green_led.lhs_mode == LED_MODE_ON)
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <led_green_set+0x70>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d109      	bne.n	80070a8 <led_green_set+0x44>
        {
            HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <led_green_set+0x78>)
 8007096:	2201      	movs	r2, #1
 8007098:	2108      	movs	r1, #8
 800709a:	0018      	movs	r0, r3
 800709c:	f002 fdd8 	bl	8009c50 <HAL_GPIO_WritePin>
            green_led.lhs_state = 1;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <led_green_set+0x70>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	705a      	strb	r2, [r3, #1]
 80070a6:	e00c      	b.n	80070c2 <led_green_set+0x5e>
        }

        else if (green_led.lhs_mode == LED_MODE_OFF)
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <led_green_set+0x70>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d108      	bne.n	80070c2 <led_green_set+0x5e>
        {
            HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80070b0:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <led_green_set+0x78>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	2108      	movs	r1, #8
 80070b6:	0018      	movs	r0, r3
 80070b8:	f002 fdca 	bl	8009c50 <HAL_GPIO_WritePin>
            green_led.lhs_state = 0;
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <led_green_set+0x70>)
 80070be:	2200      	movs	r2, #0
 80070c0:	705a      	strb	r2, [r3, #1]
        }

        led_timer = BLINK_PERIOD_MS / 2;
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <led_green_set+0x74>)
 80070c4:	22fa      	movs	r2, #250	; 0xfa
 80070c6:	0052      	lsls	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
    }

    return;
 80070ca:	46c0      	nop			; (mov r8, r8)
 80070cc:	46c0      	nop			; (mov r8, r8)
}
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	20000dd0 	.word	0x20000dd0
 80070d8:	20000dcc 	.word	0x20000dcc
 80070dc:	48000400 	.word	0x48000400

080070e0 <led_red_set>:
 *
 * return - none
 */

void led_red_set(uint8_t mode)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	0002      	movs	r2, r0
 80070e8:	1dfb      	adds	r3, r7, #7
 80070ea:	701a      	strb	r2, [r3, #0]

    if (red_led.lhs_mode != mode)
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <led_red_set+0x70>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	1dfa      	adds	r2, r7, #7
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d027      	beq.n	8007148 <led_red_set+0x68>
    {
        led_timer = 0xFFFFFFFF;
 80070f8:	4b16      	ldr	r3, [pc, #88]	; (8007154 <led_red_set+0x74>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	4252      	negs	r2, r2
 80070fe:	601a      	str	r2, [r3, #0]
    	red_led.lhs_mode = mode;
 8007100:	4b13      	ldr	r3, [pc, #76]	; (8007150 <led_red_set+0x70>)
 8007102:	1dfa      	adds	r2, r7, #7
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	701a      	strb	r2, [r3, #0]

        if (red_led.lhs_mode == LED_MODE_ON)
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <led_red_set+0x70>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d109      	bne.n	8007124 <led_red_set+0x44>
        {
            HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <led_red_set+0x78>)
 8007112:	2201      	movs	r2, #1
 8007114:	2110      	movs	r1, #16
 8007116:	0018      	movs	r0, r3
 8007118:	f002 fd9a 	bl	8009c50 <HAL_GPIO_WritePin>
            red_led.lhs_state = 1;
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <led_red_set+0x70>)
 800711e:	2201      	movs	r2, #1
 8007120:	705a      	strb	r2, [r3, #1]
 8007122:	e00c      	b.n	800713e <led_red_set+0x5e>
        }

        else if (red_led.lhs_mode == LED_MODE_OFF)
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <led_red_set+0x70>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <led_red_set+0x5e>
        {
            HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <led_red_set+0x78>)
 800712e:	2200      	movs	r2, #0
 8007130:	2110      	movs	r1, #16
 8007132:	0018      	movs	r0, r3
 8007134:	f002 fd8c 	bl	8009c50 <HAL_GPIO_WritePin>
            red_led.lhs_state = 0;
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <led_red_set+0x70>)
 800713a:	2200      	movs	r2, #0
 800713c:	705a      	strb	r2, [r3, #1]
        }

        led_timer = BLINK_PERIOD_MS;
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <led_red_set+0x74>)
 8007140:	22fa      	movs	r2, #250	; 0xfa
 8007142:	0092      	lsls	r2, r2, #2
 8007144:	601a      	str	r2, [r3, #0]

    }

    return;
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46c0      	nop			; (mov r8, r8)
}
 800714a:	46bd      	mov	sp, r7
 800714c:	b002      	add	sp, #8
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000dd4 	.word	0x20000dd4
 8007154:	20000dcc 	.word	0x20000dcc
 8007158:	48000400 	.word	0x48000400

0800715c <led_yellow_set>:
 *
 * return - none
 */

void led_yellow_set(uint8_t mode)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	0002      	movs	r2, r0
 8007164:	1dfb      	adds	r3, r7, #7
 8007166:	701a      	strb	r2, [r3, #0]

    if (yellow_led.lhs_mode != mode)
 8007168:	4b18      	ldr	r3, [pc, #96]	; (80071cc <led_yellow_set+0x70>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	1dfa      	adds	r2, r7, #7
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d027      	beq.n	80071c4 <led_yellow_set+0x68>
    {
        led_timer = 0xFFFFFFFF;
 8007174:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <led_yellow_set+0x74>)
 8007176:	2201      	movs	r2, #1
 8007178:	4252      	negs	r2, r2
 800717a:	601a      	str	r2, [r3, #0]
        yellow_led.lhs_mode = mode;
 800717c:	4b13      	ldr	r3, [pc, #76]	; (80071cc <led_yellow_set+0x70>)
 800717e:	1dfa      	adds	r2, r7, #7
 8007180:	7812      	ldrb	r2, [r2, #0]
 8007182:	701a      	strb	r2, [r3, #0]

        if (yellow_led.lhs_mode == LED_MODE_ON)
 8007184:	4b11      	ldr	r3, [pc, #68]	; (80071cc <led_yellow_set+0x70>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d109      	bne.n	80071a0 <led_yellow_set+0x44>
        {
            HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_SET);
 800718c:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <led_yellow_set+0x78>)
 800718e:	2201      	movs	r2, #1
 8007190:	2140      	movs	r1, #64	; 0x40
 8007192:	0018      	movs	r0, r3
 8007194:	f002 fd5c 	bl	8009c50 <HAL_GPIO_WritePin>
            yellow_led.lhs_state = 1;
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <led_yellow_set+0x70>)
 800719a:	2201      	movs	r2, #1
 800719c:	705a      	strb	r2, [r3, #1]
 800719e:	e00c      	b.n	80071ba <led_yellow_set+0x5e>
        }

        else if (yellow_led.lhs_mode == LED_MODE_OFF)
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <led_yellow_set+0x70>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <led_yellow_set+0x5e>
        {
            HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <led_yellow_set+0x78>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	2140      	movs	r1, #64	; 0x40
 80071ae:	0018      	movs	r0, r3
 80071b0:	f002 fd4e 	bl	8009c50 <HAL_GPIO_WritePin>
            yellow_led.lhs_state = 0;
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <led_yellow_set+0x70>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	705a      	strb	r2, [r3, #1]
        }

        led_timer = BLINK_PERIOD_MS;
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <led_yellow_set+0x74>)
 80071bc:	22fa      	movs	r2, #250	; 0xfa
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	601a      	str	r2, [r3, #0]
    }

    return;
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	46c0      	nop			; (mov r8, r8)
}
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000dd8 	.word	0x20000dd8
 80071d0:	20000dcc 	.word	0x20000dcc
 80071d4:	48000400 	.word	0x48000400

080071d8 <led_task>:
 *
 * return - none
 */

void led_task()
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0

    if ((sending_readings == 0) && (fetching_readings == 0))
 80071dc:	4b17      	ldr	r3, [pc, #92]	; (800723c <led_task+0x64>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d117      	bne.n	8007214 <led_task+0x3c>
 80071e4:	4b16      	ldr	r3, [pc, #88]	; (8007240 <led_task+0x68>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d113      	bne.n	8007214 <led_task+0x3c>
    {

        if (mem_read_address == mem_write_address)
 80071ec:	4b15      	ldr	r3, [pc, #84]	; (8007244 <led_task+0x6c>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4b15      	ldr	r3, [pc, #84]	; (8007248 <led_task+0x70>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d106      	bne.n	8007206 <led_task+0x2e>
        {
            led_yellow_set(LED_MODE_OFF);
 80071f8:	2000      	movs	r0, #0
 80071fa:	f7ff ffaf 	bl	800715c <led_yellow_set>
            led_green_set(LED_MODE_ON);
 80071fe:	2001      	movs	r0, #1
 8007200:	f7ff ff30 	bl	8007064 <led_green_set>
        if (mem_read_address == mem_write_address)
 8007204:	e017      	b.n	8007236 <led_task+0x5e>
        }

        else
        {
            led_yellow_set(LED_MODE_ON);
 8007206:	2001      	movs	r0, #1
 8007208:	f7ff ffa8 	bl	800715c <led_yellow_set>
            led_green_set(LED_MODE_OFF);
 800720c:	2000      	movs	r0, #0
 800720e:	f7ff ff29 	bl	8007064 <led_green_set>
        if (mem_read_address == mem_write_address)
 8007212:	e010      	b.n	8007236 <led_task+0x5e>
        }

    }

    else if (sending_readings)
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <led_task+0x64>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <led_task+0x52>
    {
        led_yellow_set(LED_MODE_BLINK);
 800721c:	2002      	movs	r0, #2
 800721e:	f7ff ff9d 	bl	800715c <led_yellow_set>
        led_green_set(LED_MODE_OFF);
 8007222:	2000      	movs	r0, #0
 8007224:	f7ff ff1e 	bl	8007064 <led_green_set>
        led_yellow_set(LED_MODE_OFF);
        led_green_set(LED_MODE_BLINK);
    }


    return;
 8007228:	e006      	b.n	8007238 <led_task+0x60>
        led_yellow_set(LED_MODE_OFF);
 800722a:	2000      	movs	r0, #0
 800722c:	f7ff ff96 	bl	800715c <led_yellow_set>
        led_green_set(LED_MODE_BLINK);
 8007230:	2002      	movs	r0, #2
 8007232:	f7ff ff17 	bl	8007064 <led_green_set>
    return;
 8007236:	46c0      	nop			; (mov r8, r8)
}
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20001d2c 	.word	0x20001d2c
 8007240:	20001f98 	.word	0x20001f98
 8007244:	2000000c 	.word	0x2000000c
 8007248:	20000008 	.word	0x20000008

0800724c <led_timer_ih>:
 *
 * return - none
 */

void led_timer_ih()
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0

    if (led_timer & 0x80000000)
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <led_timer_ih+0xdc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	db61      	blt.n	800731c <led_timer_ih+0xd0>
    {
    	return;
    }

    led_timer--;
 8007258:	4b33      	ldr	r3, [pc, #204]	; (8007328 <led_timer_ih+0xdc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	4b32      	ldr	r3, [pc, #200]	; (8007328 <led_timer_ih+0xdc>)
 8007260:	601a      	str	r2, [r3, #0]

    if (led_timer == 0)
 8007262:	4b31      	ldr	r3, [pc, #196]	; (8007328 <led_timer_ih+0xdc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d15a      	bne.n	8007320 <led_timer_ih+0xd4>
    {
    	led_timer = BLINK_PERIOD_MS;
 800726a:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <led_timer_ih+0xdc>)
 800726c:	22fa      	movs	r2, #250	; 0xfa
 800726e:	0092      	lsls	r2, r2, #2
 8007270:	601a      	str	r2, [r3, #0]

        if (green_led.lhs_mode == LED_MODE_BLINK)
 8007272:	4b2e      	ldr	r3, [pc, #184]	; (800732c <led_timer_ih+0xe0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d117      	bne.n	80072aa <led_timer_ih+0x5e>
        {
    	    green_led.lhs_state ^= 0x01;
 800727a:	4b2c      	ldr	r3, [pc, #176]	; (800732c <led_timer_ih+0xe0>)
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	2201      	movs	r2, #1
 8007280:	4053      	eors	r3, r2
 8007282:	b2da      	uxtb	r2, r3
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <led_timer_ih+0xe0>)
 8007286:	705a      	strb	r2, [r3, #1]

            if (green_led.lhs_state)
 8007288:	4b28      	ldr	r3, [pc, #160]	; (800732c <led_timer_ih+0xe0>)
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <led_timer_ih+0x52>
            {
                HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <led_timer_ih+0xe4>)
 8007292:	2201      	movs	r2, #1
 8007294:	2108      	movs	r1, #8
 8007296:	0018      	movs	r0, r3
 8007298:	f002 fcda 	bl	8009c50 <HAL_GPIO_WritePin>
 800729c:	e005      	b.n	80072aa <led_timer_ih+0x5e>
            }

            else
            {
                HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 800729e:	4b24      	ldr	r3, [pc, #144]	; (8007330 <led_timer_ih+0xe4>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	2108      	movs	r1, #8
 80072a4:	0018      	movs	r0, r3
 80072a6:	f002 fcd3 	bl	8009c50 <HAL_GPIO_WritePin>
            }

        }

        if (red_led.lhs_mode == LED_MODE_BLINK)
 80072aa:	4b22      	ldr	r3, [pc, #136]	; (8007334 <led_timer_ih+0xe8>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d117      	bne.n	80072e2 <led_timer_ih+0x96>
        {
    	    red_led.lhs_state ^= 0x01;
 80072b2:	4b20      	ldr	r3, [pc, #128]	; (8007334 <led_timer_ih+0xe8>)
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2201      	movs	r2, #1
 80072b8:	4053      	eors	r3, r2
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <led_timer_ih+0xe8>)
 80072be:	705a      	strb	r2, [r3, #1]

            if (red_led.lhs_state)
 80072c0:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <led_timer_ih+0xe8>)
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d006      	beq.n	80072d6 <led_timer_ih+0x8a>
            {
                HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80072c8:	4b19      	ldr	r3, [pc, #100]	; (8007330 <led_timer_ih+0xe4>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	2110      	movs	r1, #16
 80072ce:	0018      	movs	r0, r3
 80072d0:	f002 fcbe 	bl	8009c50 <HAL_GPIO_WritePin>
 80072d4:	e005      	b.n	80072e2 <led_timer_ih+0x96>
            }

            else
            {
                HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 80072d6:	4b16      	ldr	r3, [pc, #88]	; (8007330 <led_timer_ih+0xe4>)
 80072d8:	2200      	movs	r2, #0
 80072da:	2110      	movs	r1, #16
 80072dc:	0018      	movs	r0, r3
 80072de:	f002 fcb7 	bl	8009c50 <HAL_GPIO_WritePin>
            }

        }

        if (yellow_led.lhs_mode == LED_MODE_BLINK)
 80072e2:	4b15      	ldr	r3, [pc, #84]	; (8007338 <led_timer_ih+0xec>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d11a      	bne.n	8007320 <led_timer_ih+0xd4>
        {
    	    yellow_led.lhs_state ^= 0x01;
 80072ea:	4b13      	ldr	r3, [pc, #76]	; (8007338 <led_timer_ih+0xec>)
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2201      	movs	r2, #1
 80072f0:	4053      	eors	r3, r2
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	4b10      	ldr	r3, [pc, #64]	; (8007338 <led_timer_ih+0xec>)
 80072f6:	705a      	strb	r2, [r3, #1]

            if (yellow_led.lhs_state)
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <led_timer_ih+0xec>)
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <led_timer_ih+0xc2>
            {
                HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_SET);
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <led_timer_ih+0xe4>)
 8007302:	2201      	movs	r2, #1
 8007304:	2140      	movs	r1, #64	; 0x40
 8007306:	0018      	movs	r0, r3
 8007308:	f002 fca2 	bl	8009c50 <HAL_GPIO_WritePin>

        }

    }

    return;
 800730c:	e008      	b.n	8007320 <led_timer_ih+0xd4>
                HAL_GPIO_WritePin(YELLOW_LED_PORT, YELLOW_LED_PIN, GPIO_PIN_RESET);
 800730e:	4b08      	ldr	r3, [pc, #32]	; (8007330 <led_timer_ih+0xe4>)
 8007310:	2200      	movs	r2, #0
 8007312:	2140      	movs	r1, #64	; 0x40
 8007314:	0018      	movs	r0, r3
 8007316:	f002 fc9b 	bl	8009c50 <HAL_GPIO_WritePin>
    return;
 800731a:	e001      	b.n	8007320 <led_timer_ih+0xd4>
    	return;
 800731c:	46c0      	nop			; (mov r8, r8)
 800731e:	e000      	b.n	8007322 <led_timer_ih+0xd6>
    return;
 8007320:	46c0      	nop			; (mov r8, r8)
}
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	20000dcc 	.word	0x20000dcc
 800732c:	20000dd0 	.word	0x20000dd0
 8007330:	48000400 	.word	0x48000400
 8007334:	20000dd4 	.word	0x20000dd4
 8007338:	20000dd8 	.word	0x20000dd8

0800733c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 8007340:	f002 f96a 	bl	8009618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007344:	f000 f80e 	bl	8007364 <SystemClock_Config>

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
 // MX_USART1_UART_Init();
 // MX_USART2_UART_Init();
  MX_RTC_Init();
 8007348:	f000 f878 	bl	800743c <MX_RTC_Init>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  HAL_Delay(5000);
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <main+0x24>)
 800734e:	0018      	movs	r0, r3
 8007350:	f002 f9c6 	bl	80096e0 <HAL_Delay>

  /*
   * This should never return.
   */

  cmmain();
 8007354:	f7f9 f938 	bl	80005c8 <cmmain>
 8007358:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	00001388 	.word	0x00001388

08007364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b097      	sub	sp, #92	; 0x5c
 8007368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800736a:	2428      	movs	r4, #40	; 0x28
 800736c:	193b      	adds	r3, r7, r4
 800736e:	0018      	movs	r0, r3
 8007370:	2330      	movs	r3, #48	; 0x30
 8007372:	001a      	movs	r2, r3
 8007374:	2100      	movs	r1, #0
 8007376:	f009 ff2f 	bl	80111d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800737a:	2318      	movs	r3, #24
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	0018      	movs	r0, r3
 8007380:	2310      	movs	r3, #16
 8007382:	001a      	movs	r2, r3
 8007384:	2100      	movs	r1, #0
 8007386:	f009 ff27 	bl	80111d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	0018      	movs	r0, r3
 800738e:	2314      	movs	r3, #20
 8007390:	001a      	movs	r2, r3
 8007392:	2100      	movs	r1, #0
 8007394:	f009 ff20 	bl	80111d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007398:	0021      	movs	r1, r4
 800739a:	187b      	adds	r3, r7, r1
 800739c:	2209      	movs	r2, #9
 800739e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073a0:	187b      	adds	r3, r7, r1
 80073a2:	2201      	movs	r2, #1
 80073a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80073a6:	187b      	adds	r3, r7, r1
 80073a8:	2201      	movs	r2, #1
 80073aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073ac:	187b      	adds	r3, r7, r1
 80073ae:	2202      	movs	r2, #2
 80073b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073b2:	187b      	adds	r3, r7, r1
 80073b4:	2280      	movs	r2, #128	; 0x80
 80073b6:	0252      	lsls	r2, r2, #9
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80073ba:	187b      	adds	r3, r7, r1
 80073bc:	2280      	movs	r2, #128	; 0x80
 80073be:	02d2      	lsls	r2, r2, #11
 80073c0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	2200      	movs	r2, #0
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	0018      	movs	r0, r3
 80073cc:	f003 fdc8 	bl	800af60 <HAL_RCC_OscConfig>
 80073d0:	1e03      	subs	r3, r0, #0
 80073d2:	d001      	beq.n	80073d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80073d4:	f000 f8d2 	bl	800757c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073d8:	2118      	movs	r1, #24
 80073da:	187b      	adds	r3, r7, r1
 80073dc:	2207      	movs	r2, #7
 80073de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073e0:	187b      	adds	r3, r7, r1
 80073e2:	2202      	movs	r2, #2
 80073e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073e6:	187b      	adds	r3, r7, r1
 80073e8:	2200      	movs	r2, #0
 80073ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80073ec:	187b      	adds	r3, r7, r1
 80073ee:	2200      	movs	r2, #0
 80073f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80073f2:	187b      	adds	r3, r7, r1
 80073f4:	2101      	movs	r1, #1
 80073f6:	0018      	movs	r0, r3
 80073f8:	f004 f8d0 	bl	800b59c <HAL_RCC_ClockConfig>
 80073fc:	1e03      	subs	r3, r0, #0
 80073fe:	d001      	beq.n	8007404 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8007400:	f000 f8bc 	bl	800757c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	4a0c      	ldr	r2, [pc, #48]	; (8007438 <SystemClock_Config+0xd4>)
 8007408:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	2200      	movs	r2, #0
 800740e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	0092      	lsls	r2, r2, #2
 8007416:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	2280      	movs	r2, #128	; 0x80
 800741c:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800741e:	1d3b      	adds	r3, r7, #4
 8007420:	0018      	movs	r0, r3
 8007422:	f004 fa11 	bl	800b848 <HAL_RCCEx_PeriphCLKConfig>
 8007426:	1e03      	subs	r3, r0, #0
 8007428:	d001      	beq.n	800742e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800742a:	f000 f8a7 	bl	800757c <Error_Handler>
  }
}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b017      	add	sp, #92	; 0x5c
 8007434:	bd90      	pop	{r4, r7, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	00030001 	.word	0x00030001

0800743c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007442:	1d3b      	adds	r3, r7, #4
 8007444:	0018      	movs	r0, r3
 8007446:	2314      	movs	r3, #20
 8007448:	001a      	movs	r2, r3
 800744a:	2100      	movs	r1, #0
 800744c:	f009 fec4 	bl	80111d8 <memset>
  RTC_DateTypeDef sDate = {0};
 8007450:	003b      	movs	r3, r7
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007456:	4b28      	ldr	r3, [pc, #160]	; (80074f8 <MX_RTC_Init+0xbc>)
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <MX_RTC_Init+0xc0>)
 800745a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800745c:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <MX_RTC_Init+0xbc>)
 800745e:	2200      	movs	r2, #0
 8007460:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007462:	4b25      	ldr	r3, [pc, #148]	; (80074f8 <MX_RTC_Init+0xbc>)
 8007464:	227f      	movs	r2, #127	; 0x7f
 8007466:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007468:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <MX_RTC_Init+0xbc>)
 800746a:	22ff      	movs	r2, #255	; 0xff
 800746c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800746e:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <MX_RTC_Init+0xbc>)
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007474:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <MX_RTC_Init+0xbc>)
 8007476:	2200      	movs	r2, #0
 8007478:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800747a:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <MX_RTC_Init+0xbc>)
 800747c:	2200      	movs	r2, #0
 800747e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007480:	4b1d      	ldr	r3, [pc, #116]	; (80074f8 <MX_RTC_Init+0xbc>)
 8007482:	0018      	movs	r0, r3
 8007484:	f004 fabe 	bl	800ba04 <HAL_RTC_Init>
 8007488:	1e03      	subs	r3, r0, #0
 800748a:	d001      	beq.n	8007490 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800748c:	f000 f876 	bl	800757c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	2200      	movs	r2, #0
 800749a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	2200      	movs	r2, #0
 80074a0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	2200      	movs	r2, #0
 80074a6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80074a8:	1d3b      	adds	r3, r7, #4
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80074ae:	1d39      	adds	r1, r7, #4
 80074b0:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <MX_RTC_Init+0xbc>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	0018      	movs	r0, r3
 80074b6:	f004 fb39 	bl	800bb2c <HAL_RTC_SetTime>
 80074ba:	1e03      	subs	r3, r0, #0
 80074bc:	d001      	beq.n	80074c2 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80074be:	f000 f85d 	bl	800757c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80074c2:	003b      	movs	r3, r7
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80074c8:	003b      	movs	r3, r7
 80074ca:	2201      	movs	r2, #1
 80074cc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80074ce:	003b      	movs	r3, r7
 80074d0:	2201      	movs	r2, #1
 80074d2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80074d4:	003b      	movs	r3, r7
 80074d6:	2200      	movs	r2, #0
 80074d8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80074da:	0039      	movs	r1, r7
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <MX_RTC_Init+0xbc>)
 80074de:	2201      	movs	r2, #1
 80074e0:	0018      	movs	r0, r3
 80074e2:	f004 fbdf 	bl	800bca4 <HAL_RTC_SetDate>
 80074e6:	1e03      	subs	r3, r0, #0
 80074e8:	d001      	beq.n	80074ee <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80074ea:	f000 f847 	bl	800757c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b006      	add	sp, #24
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20002040 	.word	0x20002040
 80074fc:	40002800 	.word	0x40002800

08007500 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007504:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <MX_SPI1_Init+0x74>)
 8007506:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <MX_SPI1_Init+0x78>)
 8007508:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800750a:	4b1a      	ldr	r3, [pc, #104]	; (8007574 <MX_SPI1_Init+0x74>)
 800750c:	2282      	movs	r2, #130	; 0x82
 800750e:	0052      	lsls	r2, r2, #1
 8007510:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007512:	4b18      	ldr	r3, [pc, #96]	; (8007574 <MX_SPI1_Init+0x74>)
 8007514:	2200      	movs	r2, #0
 8007516:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007518:	4b16      	ldr	r3, [pc, #88]	; (8007574 <MX_SPI1_Init+0x74>)
 800751a:	22e0      	movs	r2, #224	; 0xe0
 800751c:	00d2      	lsls	r2, r2, #3
 800751e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <MX_SPI1_Init+0x74>)
 8007522:	2200      	movs	r2, #0
 8007524:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <MX_SPI1_Init+0x74>)
 8007528:	2200      	movs	r2, #0
 800752a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <MX_SPI1_Init+0x74>)
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	0092      	lsls	r2, r2, #2
 8007532:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007534:	4b0f      	ldr	r3, [pc, #60]	; (8007574 <MX_SPI1_Init+0x74>)
 8007536:	2208      	movs	r2, #8
 8007538:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800753a:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <MX_SPI1_Init+0x74>)
 800753c:	2200      	movs	r2, #0
 800753e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007540:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <MX_SPI1_Init+0x74>)
 8007542:	2200      	movs	r2, #0
 8007544:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007546:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <MX_SPI1_Init+0x74>)
 8007548:	2200      	movs	r2, #0
 800754a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800754c:	4b09      	ldr	r3, [pc, #36]	; (8007574 <MX_SPI1_Init+0x74>)
 800754e:	2207      	movs	r2, #7
 8007550:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <MX_SPI1_Init+0x74>)
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007558:	4b06      	ldr	r3, [pc, #24]	; (8007574 <MX_SPI1_Init+0x74>)
 800755a:	2208      	movs	r2, #8
 800755c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <MX_SPI1_Init+0x74>)
 8007560:	0018      	movs	r0, r3
 8007562:	f004 fcbb 	bl	800bedc <HAL_SPI_Init>
 8007566:	1e03      	subs	r3, r0, #0
 8007568:	d001      	beq.n	800756e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800756a:	f000 f807 	bl	800757c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800756e:	46c0      	nop			; (mov r8, r8)
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	200020a8 	.word	0x200020a8
 8007578:	40013000 	.word	0x40013000

0800757c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <quec_3v8enbl>:
 *
 *
 */

void quec_3v8enbl(uint8_t onoff)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	0002      	movs	r2, r0
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	701a      	strb	r2, [r3, #0]

    if (onoff)
 8007592:	1dfb      	adds	r3, r7, #7
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <quec_3v8enbl+0x26>
    {
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_SET);
 800759a:	2380      	movs	r3, #128	; 0x80
 800759c:	0219      	lsls	r1, r3, #8
 800759e:	2390      	movs	r3, #144	; 0x90
 80075a0:	05db      	lsls	r3, r3, #23
 80075a2:	2201      	movs	r2, #1
 80075a4:	0018      	movs	r0, r3
 80075a6:	f002 fb53 	bl	8009c50 <HAL_GPIO_WritePin>
    else
    {
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
    }

    return;
 80075aa:	e008      	b.n	80075be <quec_3v8enbl+0x38>
        HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
 80075ac:	2380      	movs	r3, #128	; 0x80
 80075ae:	0219      	lsls	r1, r3, #8
 80075b0:	2390      	movs	r3, #144	; 0x90
 80075b2:	05db      	lsls	r3, r3, #23
 80075b4:	2200      	movs	r2, #0
 80075b6:	0018      	movs	r0, r3
 80075b8:	f002 fb4a 	bl	8009c50 <HAL_GPIO_WritePin>
    return;
 80075bc:	46c0      	nop			; (mov r8, r8)
}
 80075be:	46bd      	mov	sp, r7
 80075c0:	b002      	add	sp, #8
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <quec_init>:
 *
 *
 */

void quec_init(void)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b0a9      	sub	sp, #164	; 0xa4
 80075c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;
    UART_HandleTypeDef huart;
    HAL_StatusTypeDef halstat;

    initstruc.Pin = GSM_PWR_PIN;
 80075ca:	2488      	movs	r4, #136	; 0x88
 80075cc:	193b      	adds	r3, r7, r4
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	2201      	movs	r2, #1
 80075d6:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 80075d8:	193b      	adds	r3, r7, r4
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	2200      	movs	r2, #0
 80075e2:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_PWR_PORT, &initstruc);
 80075ea:	193b      	adds	r3, r7, r4
 80075ec:	4a5f      	ldr	r2, [pc, #380]	; (800776c <quec_init+0x1a8>)
 80075ee:	0019      	movs	r1, r3
 80075f0:	0010      	movs	r0, r2
 80075f2:	f002 f9bd 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = GSM_RESET_PIN;
 80075f6:	193b      	adds	r3, r7, r4
 80075f8:	2280      	movs	r2, #128	; 0x80
 80075fa:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GSM_RESET_PORT, &initstruc);
 80075fc:	193b      	adds	r3, r7, r4
 80075fe:	4a5b      	ldr	r2, [pc, #364]	; (800776c <quec_init+0x1a8>)
 8007600:	0019      	movs	r1, r3
 8007602:	0010      	movs	r0, r2
 8007604:	f002 f9b4 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = GSM_ENBL_PIN;
 8007608:	193b      	adds	r3, r7, r4
 800760a:	2280      	movs	r2, #128	; 0x80
 800760c:	0212      	lsls	r2, r2, #8
 800760e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GSM_ENBL_PORT, &initstruc);
 8007610:	193a      	adds	r2, r7, r4
 8007612:	2390      	movs	r3, #144	; 0x90
 8007614:	05db      	lsls	r3, r3, #23
 8007616:	0011      	movs	r1, r2
 8007618:	0018      	movs	r0, r3
 800761a:	f002 f9a9 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = GSM_DTR_PIN;
 800761e:	193b      	adds	r3, r7, r4
 8007620:	2280      	movs	r2, #128	; 0x80
 8007622:	00d2      	lsls	r2, r2, #3
 8007624:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8007626:	193b      	adds	r3, r7, r4
 8007628:	2201      	movs	r2, #1
 800762a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(GSM_DTR_PORT, &initstruc);
 800762c:	193b      	adds	r3, r7, r4
 800762e:	4a4f      	ldr	r2, [pc, #316]	; (800776c <quec_init+0x1a8>)
 8007630:	0019      	movs	r1, r3
 8007632:	0010      	movs	r0, r2
 8007634:	f002 f99c 	bl	8009970 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_RESET);
 8007638:	4b4c      	ldr	r3, [pc, #304]	; (800776c <quec_init+0x1a8>)
 800763a:	2200      	movs	r2, #0
 800763c:	2101      	movs	r1, #1
 800763e:	0018      	movs	r0, r3
 8007640:	f002 fb06 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_ENBL_PORT, GSM_ENBL_PIN, GPIO_PIN_RESET);
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	0219      	lsls	r1, r3, #8
 8007648:	2390      	movs	r3, #144	; 0x90
 800764a:	05db      	lsls	r3, r3, #23
 800764c:	2200      	movs	r2, #0
 800764e:	0018      	movs	r0, r3
 8007650:	f002 fafe 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_RESET_PORT, GSM_RESET_PIN, GPIO_PIN_SET);
 8007654:	4b45      	ldr	r3, [pc, #276]	; (800776c <quec_init+0x1a8>)
 8007656:	2201      	movs	r2, #1
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	0018      	movs	r0, r3
 800765c:	f002 faf8 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GSM_DTR_PORT, GSM_DTR_PIN, GPIO_PIN_RESET);
 8007660:	2380      	movs	r3, #128	; 0x80
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	4841      	ldr	r0, [pc, #260]	; (800776c <quec_init+0x1a8>)
 8007666:	2200      	movs	r2, #0
 8007668:	0019      	movs	r1, r3
 800766a:	f002 faf1 	bl	8009c50 <HAL_GPIO_WritePin>

    initstruc.Pin = GSM_UART_TX_PIN;
 800766e:	193b      	adds	r3, r7, r4
 8007670:	2208      	movs	r2, #8
 8007672:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 8007674:	193b      	adds	r3, r7, r4
 8007676:	2202      	movs	r2, #2
 8007678:	605a      	str	r2, [r3, #4]
    initstruc.Speed = GPIO_SPEED_FREQ_HIGH;
 800767a:	193b      	adds	r3, r7, r4
 800767c:	2203      	movs	r2, #3
 800767e:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = GSM_UART_TX_AF;
 8007680:	193b      	adds	r3, r7, r4
 8007682:	2201      	movs	r2, #1
 8007684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_UART_TX_PORT, &initstruc);           /* COMMENT OUT FOR STEVE */
 8007686:	193a      	adds	r2, r7, r4
 8007688:	2390      	movs	r3, #144	; 0x90
 800768a:	05db      	lsls	r3, r3, #23
 800768c:	0011      	movs	r1, r2
 800768e:	0018      	movs	r0, r3
 8007690:	f002 f96e 	bl	8009970 <HAL_GPIO_Init>

    initstruc.Pin = GSM_UART_RX_PIN;
 8007694:	193b      	adds	r3, r7, r4
 8007696:	2204      	movs	r2, #4
 8007698:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_AF_PP;
 800769a:	193b      	adds	r3, r7, r4
 800769c:	2202      	movs	r2, #2
 800769e:	605a      	str	r2, [r3, #4]
    initstruc.Alternate = GSM_UART_RX_AF;
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	2201      	movs	r2, #1
 80076a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_UART_RX_PORT, &initstruc);           /* COMMENT OUT FOR STEVE */
 80076a6:	193a      	adds	r2, r7, r4
 80076a8:	2390      	movs	r3, #144	; 0x90
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	0011      	movs	r1, r2
 80076ae:	0018      	movs	r0, r3
 80076b0:	f002 f95e 	bl	8009970 <HAL_GPIO_Init>

    __HAL_RCC_USART2_CLK_ENABLE();                         /* COMMENT OUT FOR STEVE */
 80076b4:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <quec_init+0x1ac>)
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <quec_init+0x1ac>)
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	0289      	lsls	r1, r1, #10
 80076be:	430a      	orrs	r2, r1
 80076c0:	61da      	str	r2, [r3, #28]
 80076c2:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <quec_init+0x1ac>)
 80076c4:	69da      	ldr	r2, [r3, #28]
 80076c6:	2380      	movs	r3, #128	; 0x80
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	4013      	ands	r3, r2
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]

    huart.Instance = GSM_UART;
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	4a28      	ldr	r2, [pc, #160]	; (8007774 <quec_init+0x1b0>)
 80076d4:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 80076d6:	1d3b      	adds	r3, r7, #4
 80076d8:	22e1      	movs	r2, #225	; 0xe1
 80076da:	0252      	lsls	r2, r2, #9
 80076dc:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 80076de:	1d3b      	adds	r3, r7, #4
 80076e0:	2200      	movs	r2, #0
 80076e2:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80076e4:	1d3b      	adds	r3, r7, #4
 80076e6:	2200      	movs	r2, #0
 80076e8:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80076ea:	1d3b      	adds	r3, r7, #4
 80076ec:	2200      	movs	r2, #0
 80076ee:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	220c      	movs	r2, #12
 80076f4:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076f6:	1d3b      	adds	r3, r7, #4
 80076f8:	2200      	movs	r2, #0
 80076fa:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	2200      	movs	r2, #0
 8007700:	61da      	str	r2, [r3, #28]
    huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007702:	1d3b      	adds	r3, r7, #4
 8007704:	2200      	movs	r2, #0
 8007706:	621a      	str	r2, [r3, #32]
    huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	2200      	movs	r2, #0
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
    halstat = HAL_UART_Init(&huart);                       /* COMMENT OUT FOR STEVE */
 800770e:	239f      	movs	r3, #159	; 0x9f
 8007710:	18fc      	adds	r4, r7, r3
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	0018      	movs	r0, r3
 8007716:	f005 fd41 	bl	800d19c <HAL_UART_Init>
 800771a:	0003      	movs	r3, r0
 800771c:	7023      	strb	r3, [r4, #0]
    if (halstat != HAL_OK)
    {
//        crash();
    }

    GSM_DMA_CHAN->CPAR = (uint32_t)&GSM_UART->TDR;             /* COMMENT OUT FOR STEVE */
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <quec_init+0x1b4>)
 8007720:	4a16      	ldr	r2, [pc, #88]	; (800777c <quec_init+0x1b8>)
 8007722:	609a      	str	r2, [r3, #8]

    taskstate = TS_INIT;
 8007724:	4b16      	ldr	r3, [pc, #88]	; (8007780 <quec_init+0x1bc>)
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
    taskoldstate = 255;
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <quec_init+0x1c0>)
 800772c:	22ff      	movs	r2, #255	; 0xff
 800772e:	701a      	strb	r2, [r3, #0]
    output_busy = 0;
 8007730:	4b15      	ldr	r3, [pc, #84]	; (8007788 <quec_init+0x1c4>)
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
    set_timer(0);
 8007736:	2000      	movs	r0, #0
 8007738:	f000 fba4 	bl	8007e84 <set_timer>
    rxget = 0;
 800773c:	4b13      	ldr	r3, [pc, #76]	; (800778c <quec_init+0x1c8>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
    rxput = 0;
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <quec_init+0x1cc>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);                     /* COMMENT OUT FOR STEVE */
 8007748:	2200      	movs	r2, #0
 800774a:	2100      	movs	r1, #0
 800774c:	201c      	movs	r0, #28
 800774e:	f002 f897 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);                            /* COMMENT OUT FOR STEVE */
 8007752:	201c      	movs	r0, #28
 8007754:	f002 f8a9 	bl	80098aa <HAL_NVIC_EnableIRQ>
    GSM_UART->CR1 |= USART_CR1_RXNEIE;                          /* COMMENT OUT FOR STEVE */
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <quec_init+0x1b0>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <quec_init+0x1b0>)
 800775e:	2120      	movs	r1, #32
 8007760:	430a      	orrs	r2, r1
 8007762:	601a      	str	r2, [r3, #0]
    return;
 8007764:	46c0      	nop			; (mov r8, r8)
}
 8007766:	46bd      	mov	sp, r7
 8007768:	b029      	add	sp, #164	; 0xa4
 800776a:	bd90      	pop	{r4, r7, pc}
 800776c:	48000400 	.word	0x48000400
 8007770:	40021000 	.word	0x40021000
 8007774:	40004400 	.word	0x40004400
 8007778:	40020044 	.word	0x40020044
 800777c:	40004428 	.word	0x40004428
 8007780:	20000ddb 	.word	0x20000ddb
 8007784:	20000ddc 	.word	0x20000ddc
 8007788:	20000dda 	.word	0x20000dda
 800778c:	20000de0 	.word	0x20000de0
 8007790:	20000de4 	.word	0x20000de4

08007794 <quec_task>:
 *
 *
 */

void quec_task(void)
{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
    if (taskstate != taskoldstate)
    {
//        debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC STATE: %d -> %d\r\n", taskoldstate, taskstate);
    }

    taskoldstate = taskstate;
 800779a:	4bd7      	ldr	r3, [pc, #860]	; (8007af8 <quec_task+0x364>)
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	4bd7      	ldr	r3, [pc, #860]	; (8007afc <quec_task+0x368>)
 80077a0:	701a      	strb	r2, [r3, #0]

//            HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_SET);
//            HAL_Delay(1500);
//            HAL_GPIO_WritePin(GSM_PWR_PORT, GSM_PWR_PIN, GPIO_PIN_RESET);

    switch(taskstate)
 80077a2:	4bd5      	ldr	r3, [pc, #852]	; (8007af8 <quec_task+0x364>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d900      	bls.n	80077ac <quec_task+0x18>
 80077aa:	e1e9      	b.n	8007b80 <quec_task+0x3ec>
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	4bd4      	ldr	r3, [pc, #848]	; (8007b00 <quec_task+0x36c>)
 80077b0:	18d3      	adds	r3, r2, r3
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	469f      	mov	pc, r3
    {

        case TS_INIT:
        {

            rxget = 0;
 80077b6:	4bd3      	ldr	r3, [pc, #844]	; (8007b04 <quec_task+0x370>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
            rxput = 0;
 80077bc:	4bd2      	ldr	r3, [pc, #840]	; (8007b08 <quec_task+0x374>)
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
            rxbufindex = 0;
 80077c2:	4bd2      	ldr	r3, [pc, #840]	; (8007b0c <quec_task+0x378>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]
            taskstate = TS_IDLE;
 80077c8:	4bcb      	ldr	r3, [pc, #812]	; (8007af8 <quec_task+0x364>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
            break;
 80077ce:	e1e7      	b.n	8007ba0 <quec_task+0x40c>

        case TS_IDLE:
        {

//        break;                      /* UNCOMMENT OUT FOR STEVE */
            tempchar = gsm_answer();
 80077d0:	1dfc      	adds	r4, r7, #7
 80077d2:	f7fd fbb3 	bl	8004f3c <gsm_answer>
 80077d6:	0003      	movs	r3, r0
 80077d8:	7023      	strb	r3, [r4, #0]

			if ((tempchar == CA_NONE) || (tempchar == CA_NOTPOWERED))
 80077da:	1dfb      	adds	r3, r7, #7
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d100      	bne.n	80077e4 <quec_task+0x50>
 80077e2:	e1de      	b.n	8007ba2 <quec_task+0x40e>
 80077e4:	1dfb      	adds	r3, r7, #7
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d100      	bne.n	80077ee <quec_task+0x5a>
 80077ec:	e1d9      	b.n	8007ba2 <quec_task+0x40e>
		    {
			    break;
			}

            if (input_busy == 0)
 80077ee:	4bc8      	ldr	r3, [pc, #800]	; (8007b10 <quec_task+0x37c>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d100      	bne.n	80077f8 <quec_task+0x64>
 80077f6:	e1c6      	b.n	8007b86 <quec_task+0x3f2>
            {
                break;
            }

            if (rxget != rxput)
 80077f8:	4bc2      	ldr	r3, [pc, #776]	; (8007b04 <quec_task+0x370>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	4bc2      	ldr	r3, [pc, #776]	; (8007b08 <quec_task+0x374>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d03b      	beq.n	800787c <quec_task+0xe8>
            {

                set_timer(rxtimeout);
 8007804:	4bc3      	ldr	r3, [pc, #780]	; (8007b14 <quec_task+0x380>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	0018      	movs	r0, r3
 800780a:	f000 fb3b 	bl	8007e84 <set_timer>
                tempchar = rxintbuf[rxget];
 800780e:	4bbd      	ldr	r3, [pc, #756]	; (8007b04 <quec_task+0x370>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	49c0      	ldr	r1, [pc, #768]	; (8007b18 <quec_task+0x384>)
 8007816:	5c8a      	ldrb	r2, [r1, r2]
 8007818:	701a      	strb	r2, [r3, #0]
                rxget++;
 800781a:	4bba      	ldr	r3, [pc, #744]	; (8007b04 <quec_task+0x370>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	4bb8      	ldr	r3, [pc, #736]	; (8007b04 <quec_task+0x370>)
 8007822:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 8007824:	4bb7      	ldr	r3, [pc, #732]	; (8007b04 <quec_task+0x370>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	05db      	lsls	r3, r3, #23
 800782a:	0dda      	lsrs	r2, r3, #23
 800782c:	4bb5      	ldr	r3, [pc, #724]	; (8007b04 <quec_task+0x370>)
 800782e:	601a      	str	r2, [r3, #0]
                rxbufindex = 0;
 8007830:	4bb6      	ldr	r3, [pc, #728]	; (8007b0c <quec_task+0x378>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 8007836:	1dfb      	adds	r3, r7, #7
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b0d      	cmp	r3, #13
 800783c:	d103      	bne.n	8007846 <quec_task+0xb2>
                {
                    taskstate = TS_CR1;
 800783e:	4bae      	ldr	r3, [pc, #696]	; (8007af8 <quec_task+0x364>)
 8007840:	2202      	movs	r2, #2
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e00c      	b.n	8007860 <quec_task+0xcc>
                }

                else
                {
                    rxbufaddr[rxbufindex] = tempchar;
 8007846:	4bb5      	ldr	r3, [pc, #724]	; (8007b1c <quec_task+0x388>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4bb0      	ldr	r3, [pc, #704]	; (8007b0c <quec_task+0x378>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	1dfa      	adds	r2, r7, #7
 8007852:	7812      	ldrb	r2, [r2, #0]
 8007854:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 8007856:	4bad      	ldr	r3, [pc, #692]	; (8007b0c <quec_task+0x378>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	4bab      	ldr	r3, [pc, #684]	; (8007b0c <quec_task+0x378>)
 800785e:	601a      	str	r2, [r3, #0]
                }

                if (rxbufindex == rxbuflen)
 8007860:	4baa      	ldr	r3, [pc, #680]	; (8007b0c <quec_task+0x378>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4bae      	ldr	r3, [pc, #696]	; (8007b20 <quec_task+0x38c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d103      	bne.n	8007874 <quec_task+0xe0>
                {
                    taskstate = TS_RXOVFLOW;
 800786c:	4ba2      	ldr	r3, [pc, #648]	; (8007af8 <quec_task+0x364>)
 800786e:	2204      	movs	r2, #4
 8007870:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 8007872:	e18a      	b.n	8007b8a <quec_task+0x3f6>
                    taskstate = TS_MESSAGE;
 8007874:	4ba0      	ldr	r3, [pc, #640]	; (8007af8 <quec_task+0x364>)
 8007876:	2203      	movs	r2, #3
 8007878:	701a      	strb	r2, [r3, #0]
            break;
 800787a:	e186      	b.n	8007b8a <quec_task+0x3f6>
                if (timer1 == 0)
 800787c:	4ba9      	ldr	r3, [pc, #676]	; (8007b24 <quec_task+0x390>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d000      	beq.n	8007886 <quec_task+0xf2>
 8007884:	e181      	b.n	8007b8a <quec_task+0x3f6>
                    taskstate = TS_TIMEOUT;
 8007886:	4b9c      	ldr	r3, [pc, #624]	; (8007af8 <quec_task+0x364>)
 8007888:	2206      	movs	r2, #6
 800788a:	701a      	strb	r2, [r3, #0]
            break;
 800788c:	e17d      	b.n	8007b8a <quec_task+0x3f6>
        }

        case TS_CR1:
        {

            if (rxget != rxput)
 800788e:	4b9d      	ldr	r3, [pc, #628]	; (8007b04 <quec_task+0x370>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b9d      	ldr	r3, [pc, #628]	; (8007b08 <quec_task+0x374>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d035      	beq.n	8007906 <quec_task+0x172>
            {
                set_timer(rxtimeout);
 800789a:	4b9e      	ldr	r3, [pc, #632]	; (8007b14 <quec_task+0x380>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	0018      	movs	r0, r3
 80078a0:	f000 faf0 	bl	8007e84 <set_timer>
                tempchar = rxintbuf[rxget];
 80078a4:	4b97      	ldr	r3, [pc, #604]	; (8007b04 <quec_task+0x370>)
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	1dfb      	adds	r3, r7, #7
 80078aa:	499b      	ldr	r1, [pc, #620]	; (8007b18 <quec_task+0x384>)
 80078ac:	5c8a      	ldrb	r2, [r1, r2]
 80078ae:	701a      	strb	r2, [r3, #0]
                rxget++;
 80078b0:	4b94      	ldr	r3, [pc, #592]	; (8007b04 <quec_task+0x370>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	4b93      	ldr	r3, [pc, #588]	; (8007b04 <quec_task+0x370>)
 80078b8:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 80078ba:	4b92      	ldr	r3, [pc, #584]	; (8007b04 <quec_task+0x370>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	05db      	lsls	r3, r3, #23
 80078c0:	0dda      	lsrs	r2, r3, #23
 80078c2:	4b90      	ldr	r3, [pc, #576]	; (8007b04 <quec_task+0x370>)
 80078c4:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 80078c6:	1dfb      	adds	r3, r7, #7
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b0d      	cmp	r3, #13
 80078cc:	d100      	bne.n	80078d0 <quec_task+0x13c>
 80078ce:	e15e      	b.n	8007b8e <quec_task+0x3fa>
                {
                	break;
                }

                rxbufaddr[rxbufindex] = tempchar;
 80078d0:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <quec_task+0x388>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4b8d      	ldr	r3, [pc, #564]	; (8007b0c <quec_task+0x378>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	18d3      	adds	r3, r2, r3
 80078da:	1dfa      	adds	r2, r7, #7
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	701a      	strb	r2, [r3, #0]
                rxbufindex++;
 80078e0:	4b8a      	ldr	r3, [pc, #552]	; (8007b0c <quec_task+0x378>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	4b89      	ldr	r3, [pc, #548]	; (8007b0c <quec_task+0x378>)
 80078e8:	601a      	str	r2, [r3, #0]

                if (rxbufindex == rxbuflen)
 80078ea:	4b88      	ldr	r3, [pc, #544]	; (8007b0c <quec_task+0x378>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b8c      	ldr	r3, [pc, #560]	; (8007b20 <quec_task+0x38c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d103      	bne.n	80078fe <quec_task+0x16a>
                {
                    taskstate = TS_RXOVFLOW;
 80078f6:	4b80      	ldr	r3, [pc, #512]	; (8007af8 <quec_task+0x364>)
 80078f8:	2204      	movs	r2, #4
 80078fa:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_TIMEOUT;
                }

            }

            break;
 80078fc:	e149      	b.n	8007b92 <quec_task+0x3fe>
                    taskstate = TS_MESSAGE;
 80078fe:	4b7e      	ldr	r3, [pc, #504]	; (8007af8 <quec_task+0x364>)
 8007900:	2203      	movs	r2, #3
 8007902:	701a      	strb	r2, [r3, #0]
            break;
 8007904:	e145      	b.n	8007b92 <quec_task+0x3fe>
                if (timer1 == 0)
 8007906:	4b87      	ldr	r3, [pc, #540]	; (8007b24 <quec_task+0x390>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d000      	beq.n	8007910 <quec_task+0x17c>
 800790e:	e140      	b.n	8007b92 <quec_task+0x3fe>
                    taskstate = TS_TIMEOUT;
 8007910:	4b79      	ldr	r3, [pc, #484]	; (8007af8 <quec_task+0x364>)
 8007912:	2206      	movs	r2, #6
 8007914:	701a      	strb	r2, [r3, #0]
            break;
 8007916:	e13c      	b.n	8007b92 <quec_task+0x3fe>
        }

        case TS_MESSAGE:
        {

            if (rxget != rxput)
 8007918:	4b7a      	ldr	r3, [pc, #488]	; (8007b04 <quec_task+0x370>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	4b7a      	ldr	r3, [pc, #488]	; (8007b08 <quec_task+0x374>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d041      	beq.n	80079a8 <quec_task+0x214>
            {
                set_timer(rxtimeout);
 8007924:	4b7b      	ldr	r3, [pc, #492]	; (8007b14 <quec_task+0x380>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	0018      	movs	r0, r3
 800792a:	f000 faab 	bl	8007e84 <set_timer>

                while (rxget != rxput)
 800792e:	e033      	b.n	8007998 <quec_task+0x204>
                {
                    tempchar = rxintbuf[rxget];
 8007930:	4b74      	ldr	r3, [pc, #464]	; (8007b04 <quec_task+0x370>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	1dfb      	adds	r3, r7, #7
 8007936:	4978      	ldr	r1, [pc, #480]	; (8007b18 <quec_task+0x384>)
 8007938:	5c8a      	ldrb	r2, [r1, r2]
 800793a:	701a      	strb	r2, [r3, #0]
                    rxget++;
 800793c:	4b71      	ldr	r3, [pc, #452]	; (8007b04 <quec_task+0x370>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	4b70      	ldr	r3, [pc, #448]	; (8007b04 <quec_task+0x370>)
 8007944:	601a      	str	r2, [r3, #0]
                    rxget &= RXINTBUFLEN - 1;
 8007946:	4b6f      	ldr	r3, [pc, #444]	; (8007b04 <quec_task+0x370>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	05db      	lsls	r3, r3, #23
 800794c:	0dda      	lsrs	r2, r3, #23
 800794e:	4b6d      	ldr	r3, [pc, #436]	; (8007b04 <quec_task+0x370>)
 8007950:	601a      	str	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = tempchar;
 8007952:	4b72      	ldr	r3, [pc, #456]	; (8007b1c <quec_task+0x388>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b6d      	ldr	r3, [pc, #436]	; (8007b0c <quec_task+0x378>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	18d3      	adds	r3, r2, r3
 800795c:	1dfa      	adds	r2, r7, #7
 800795e:	7812      	ldrb	r2, [r2, #0]
 8007960:	701a      	strb	r2, [r3, #0]
                    rxbufindex++;
 8007962:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <quec_task+0x378>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	4b68      	ldr	r3, [pc, #416]	; (8007b0c <quec_task+0x378>)
 800796a:	601a      	str	r2, [r3, #0]

                    if (tempchar == 0x0D)
 800796c:	1dfb      	adds	r3, r7, #7
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b0d      	cmp	r3, #13
 8007972:	d103      	bne.n	800797c <quec_task+0x1e8>
                    {
                        taskstate = TS_COMPL;
 8007974:	4b60      	ldr	r3, [pc, #384]	; (8007af8 <quec_task+0x364>)
 8007976:	2205      	movs	r2, #5
 8007978:	701a      	strb	r2, [r3, #0]
                	    break;
 800797a:	e014      	b.n	80079a6 <quec_task+0x212>
                    }


                    if (rxbufindex == rxbuflen)
 800797c:	4b63      	ldr	r3, [pc, #396]	; (8007b0c <quec_task+0x378>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	4b67      	ldr	r3, [pc, #412]	; (8007b20 <quec_task+0x38c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d107      	bne.n	8007998 <quec_task+0x204>
                    {
                        timer2 = 1000;
 8007988:	4b67      	ldr	r3, [pc, #412]	; (8007b28 <quec_task+0x394>)
 800798a:	22fa      	movs	r2, #250	; 0xfa
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	601a      	str	r2, [r3, #0]
                        taskstate = TS_RXOVFLOW;
 8007990:	4b59      	ldr	r3, [pc, #356]	; (8007af8 <quec_task+0x364>)
 8007992:	2204      	movs	r2, #4
 8007994:	701a      	strb	r2, [r3, #0]
                        break;
 8007996:	e006      	b.n	80079a6 <quec_task+0x212>
                while (rxget != rxput)
 8007998:	4b5a      	ldr	r3, [pc, #360]	; (8007b04 <quec_task+0x370>)
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b5a      	ldr	r3, [pc, #360]	; (8007b08 <quec_task+0x374>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d1c5      	bne.n	8007930 <quec_task+0x19c>
                    }

                }

                break;
 80079a4:	e0fc      	b.n	8007ba0 <quec_task+0x40c>
 80079a6:	e0fb      	b.n	8007ba0 <quec_task+0x40c>
            }

            else
            {

                if (timer1 == 0)
 80079a8:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <quec_task+0x390>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d000      	beq.n	80079b2 <quec_task+0x21e>
 80079b0:	e0f1      	b.n	8007b96 <quec_task+0x402>
                {
                    taskstate = TS_TIMEOUT;
 80079b2:	4b51      	ldr	r3, [pc, #324]	; (8007af8 <quec_task+0x364>)
 80079b4:	2206      	movs	r2, #6
 80079b6:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 80079b8:	e0ed      	b.n	8007b96 <quec_task+0x402>
        }

        case TS_COMPL:
        {
            input_busy = 0;
 80079ba:	4b55      	ldr	r3, [pc, #340]	; (8007b10 <quec_task+0x37c>)
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
            input_status = QS_OK;
 80079c0:	4b5a      	ldr	r3, [pc, #360]	; (8007b2c <quec_task+0x398>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
            taskstate = TS_IDLE;
 80079c6:	4b4c      	ldr	r3, [pc, #304]	; (8007af8 <quec_task+0x364>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	701a      	strb	r2, [r3, #0]
            rxbufaddr[rxbufindex] = 0x00;
 80079cc:	4b53      	ldr	r3, [pc, #332]	; (8007b1c <quec_task+0x388>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	4b4e      	ldr	r3, [pc, #312]	; (8007b0c <quec_task+0x378>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	18d3      	adds	r3, r2, r3
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
            debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC IN: %s\r\n", rxbufaddr);
 80079da:	4b50      	ldr	r3, [pc, #320]	; (8007b1c <quec_task+0x388>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b54      	ldr	r3, [pc, #336]	; (8007b30 <quec_task+0x39c>)
 80079e0:	0019      	movs	r1, r3
 80079e2:	2004      	movs	r0, #4
 80079e4:	f7fa feb6 	bl	8002754 <debug_printf>

            if (rxcomplih != NULL)
 80079e8:	4b52      	ldr	r3, [pc, #328]	; (8007b34 <quec_task+0x3a0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d100      	bne.n	80079f2 <quec_task+0x25e>
 80079f0:	e0d3      	b.n	8007b9a <quec_task+0x406>
            {
                rxcomplih(input_status, rxbufindex);
 80079f2:	4b50      	ldr	r3, [pc, #320]	; (8007b34 <quec_task+0x3a0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b4d      	ldr	r3, [pc, #308]	; (8007b2c <quec_task+0x398>)
 80079f8:	7818      	ldrb	r0, [r3, #0]
 80079fa:	4b44      	ldr	r3, [pc, #272]	; (8007b0c <quec_task+0x378>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	0019      	movs	r1, r3
 8007a00:	4790      	blx	r2
            }

            break;
 8007a02:	e0ca      	b.n	8007b9a <quec_task+0x406>
        }

        case TS_RXOVFLOW:
        {

            if (rxget != rxput)
 8007a04:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <quec_task+0x370>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b3f      	ldr	r3, [pc, #252]	; (8007b08 <quec_task+0x374>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d058      	beq.n	8007ac2 <quec_task+0x32e>
            {
                set_timer(rxtimeout);
 8007a10:	4b40      	ldr	r3, [pc, #256]	; (8007b14 <quec_task+0x380>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	0018      	movs	r0, r3
 8007a16:	f000 fa35 	bl	8007e84 <set_timer>
                tempchar = rxintbuf[rxget];
 8007a1a:	4b3a      	ldr	r3, [pc, #232]	; (8007b04 <quec_task+0x370>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	1dfb      	adds	r3, r7, #7
 8007a20:	493d      	ldr	r1, [pc, #244]	; (8007b18 <quec_task+0x384>)
 8007a22:	5c8a      	ldrb	r2, [r1, r2]
 8007a24:	701a      	strb	r2, [r3, #0]
                rxget++;
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <quec_task+0x370>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	4b35      	ldr	r3, [pc, #212]	; (8007b04 <quec_task+0x370>)
 8007a2e:	601a      	str	r2, [r3, #0]
                rxget &= RXINTBUFLEN - 1;
 8007a30:	4b34      	ldr	r3, [pc, #208]	; (8007b04 <quec_task+0x370>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	05db      	lsls	r3, r3, #23
 8007a36:	0dda      	lsrs	r2, r3, #23
 8007a38:	4b32      	ldr	r3, [pc, #200]	; (8007b04 <quec_task+0x370>)
 8007a3a:	601a      	str	r2, [r3, #0]

                if (tempchar == 0x0D)
 8007a3c:	1dfb      	adds	r3, r7, #7
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b0d      	cmp	r3, #13
 8007a42:	d123      	bne.n	8007a8c <quec_task+0x2f8>
                {
                    input_status = QS_OVERFLOW;
 8007a44:	4b39      	ldr	r3, [pc, #228]	; (8007b2c <quec_task+0x398>)
 8007a46:	2203      	movs	r2, #3
 8007a48:	701a      	strb	r2, [r3, #0]
                    rxbufaddr[rxbufindex] = 0x00;
 8007a4a:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <quec_task+0x388>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <quec_task+0x378>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
                    debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC IN: %s\r\n", rxbufaddr);
 8007a58:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <quec_task+0x388>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b34      	ldr	r3, [pc, #208]	; (8007b30 <quec_task+0x39c>)
 8007a5e:	0019      	movs	r1, r3
 8007a60:	2004      	movs	r0, #4
 8007a62:	f7fa fe77 	bl	8002754 <debug_printf>

                    if (rxcomplih != NULL)
 8007a66:	4b33      	ldr	r3, [pc, #204]	; (8007b34 <quec_task+0x3a0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <quec_task+0x2ea>
                    {
                        rxcomplih(input_status, rxbufindex);
 8007a6e:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <quec_task+0x3a0>)
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b2e      	ldr	r3, [pc, #184]	; (8007b2c <quec_task+0x398>)
 8007a74:	7818      	ldrb	r0, [r3, #0]
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <quec_task+0x378>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	0019      	movs	r1, r3
 8007a7c:	4790      	blx	r2
                    }

                    input_busy = 0;
 8007a7e:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <quec_task+0x37c>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8007a84:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <quec_task+0x364>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	701a      	strb	r2, [r3, #0]
                    break;
 8007a8a:	e089      	b.n	8007ba0 <quec_task+0x40c>
                }

                if (timer2 == 0)
 8007a8c:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <quec_task+0x394>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d000      	beq.n	8007a96 <quec_task+0x302>
 8007a94:	e083      	b.n	8007b9e <quec_task+0x40a>
                {
                    input_status = QS_STREAMING;
 8007a96:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <quec_task+0x398>)
 8007a98:	2205      	movs	r2, #5
 8007a9a:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 8007a9c:	4b25      	ldr	r3, [pc, #148]	; (8007b34 <quec_task+0x3a0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <quec_task+0x320>
                    {
                        rxcomplih(input_status, rxbufindex);
 8007aa4:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <quec_task+0x3a0>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b20      	ldr	r3, [pc, #128]	; (8007b2c <quec_task+0x398>)
 8007aaa:	7818      	ldrb	r0, [r3, #0]
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <quec_task+0x378>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	0019      	movs	r1, r3
 8007ab2:	4790      	blx	r2
                    }

                    input_busy = 0;
 8007ab4:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <quec_task+0x37c>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <quec_task+0x364>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
                    break;
 8007ac0:	e06e      	b.n	8007ba0 <quec_task+0x40c>
            }

            else
            {

            	if (timer1 == 0)
 8007ac2:	4b18      	ldr	r3, [pc, #96]	; (8007b24 <quec_task+0x390>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d169      	bne.n	8007b9e <quec_task+0x40a>
            	{
                    input_status = QS_OVERFLOW;
 8007aca:	4b18      	ldr	r3, [pc, #96]	; (8007b2c <quec_task+0x398>)
 8007acc:	2203      	movs	r2, #3
 8007ace:	701a      	strb	r2, [r3, #0]

                    if (rxcomplih != NULL)
 8007ad0:	4b18      	ldr	r3, [pc, #96]	; (8007b34 <quec_task+0x3a0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <quec_task+0x354>
                    {
                        rxcomplih(input_status, rxbufindex);
 8007ad8:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <quec_task+0x3a0>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <quec_task+0x398>)
 8007ade:	7818      	ldrb	r0, [r3, #0]
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	; (8007b0c <quec_task+0x378>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	0019      	movs	r1, r3
 8007ae6:	4790      	blx	r2
                    }

                    input_busy = 0;
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <quec_task+0x37c>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]
                    taskstate = TS_IDLE;
 8007aee:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <quec_task+0x364>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
                }

            }

            break;
 8007af4:	e053      	b.n	8007b9e <quec_task+0x40a>
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	20000ddb 	.word	0x20000ddb
 8007afc:	20000ddc 	.word	0x20000ddc
 8007b00:	08017978 	.word	0x08017978
 8007b04:	20000de0 	.word	0x20000de0
 8007b08:	20000de4 	.word	0x20000de4
 8007b0c:	20000df4 	.word	0x20000df4
 8007b10:	20000ddd 	.word	0x20000ddd
 8007b14:	20000dfc 	.word	0x20000dfc
 8007b18:	20000e0c 	.word	0x20000e0c
 8007b1c:	20000e04 	.word	0x20000e04
 8007b20:	20000df8 	.word	0x20000df8
 8007b24:	20000de8 	.word	0x20000de8
 8007b28:	20000dec 	.word	0x20000dec
 8007b2c:	20000dde 	.word	0x20000dde
 8007b30:	08013c28 	.word	0x08013c28
 8007b34:	20000e00 	.word	0x20000e00
        }


        case TS_TIMEOUT:
        {
            input_busy = 0;
 8007b38:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <quec_task+0x418>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	701a      	strb	r2, [r3, #0]
            input_status = QS_TIMEOUT;
 8007b3e:	4b1c      	ldr	r3, [pc, #112]	; (8007bb0 <quec_task+0x41c>)
 8007b40:	2204      	movs	r2, #4
 8007b42:	701a      	strb	r2, [r3, #0]
            rxbufaddr[rxbufindex] = 0x00;
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <quec_task+0x420>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <quec_task+0x424>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	18d3      	adds	r3, r2, r3
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
            debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC IN: %s\r\n", rxbufaddr);
 8007b52:	4b18      	ldr	r3, [pc, #96]	; (8007bb4 <quec_task+0x420>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <quec_task+0x428>)
 8007b58:	0019      	movs	r1, r3
 8007b5a:	2004      	movs	r0, #4
 8007b5c:	f7fa fdfa 	bl	8002754 <debug_printf>

            if (rxcomplih != NULL)
 8007b60:	4b17      	ldr	r3, [pc, #92]	; (8007bc0 <quec_task+0x42c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <quec_task+0x3e4>
            {
                rxcomplih(input_status, rxbufindex);
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <quec_task+0x42c>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <quec_task+0x41c>)
 8007b6e:	7818      	ldrb	r0, [r3, #0]
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <quec_task+0x424>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	0019      	movs	r1, r3
 8007b76:	4790      	blx	r2
            }

            taskstate = TS_IDLE;
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <quec_task+0x430>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	701a      	strb	r2, [r3, #0]
            break;
 8007b7e:	e00f      	b.n	8007ba0 <quec_task+0x40c>
        }

        default:
        {
            crash();
 8007b80:	f7f9 f85e 	bl	8000c40 <crash>
        }

    }

    return;
 8007b84:	e00c      	b.n	8007ba0 <quec_task+0x40c>
                break;
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	e00a      	b.n	8007ba0 <quec_task+0x40c>
            break;
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	e008      	b.n	8007ba0 <quec_task+0x40c>
                	break;
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	e006      	b.n	8007ba0 <quec_task+0x40c>
            break;
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	e004      	b.n	8007ba0 <quec_task+0x40c>
            break;
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	e002      	b.n	8007ba0 <quec_task+0x40c>
            break;
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	e000      	b.n	8007ba0 <quec_task+0x40c>
            break;
 8007b9e:	46c0      	nop			; (mov r8, r8)
    return;
 8007ba0:	46c0      	nop			; (mov r8, r8)
 8007ba2:	46c0      	nop			; (mov r8, r8)
}
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b003      	add	sp, #12
 8007ba8:	bd90      	pop	{r4, r7, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	20000ddd 	.word	0x20000ddd
 8007bb0:	20000dde 	.word	0x20000dde
 8007bb4:	20000e04 	.word	0x20000e04
 8007bb8:	20000df4 	.word	0x20000df4
 8007bbc:	08013c28 	.word	0x08013c28
 8007bc0:	20000e00 	.word	0x20000e00
 8007bc4:	20000ddb 	.word	0x20000ddb

08007bc8 <quec_outcompl>:
 *
 *
 */

uint32_t quec_outcompl(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
    uint32_t stat;

    if (output_busy)
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <quec_outcompl+0x24>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <quec_outcompl+0x14>
    {
        stat = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
 8007bda:	e001      	b.n	8007be0 <quec_outcompl+0x18>
    }

    else
    {
        stat = 1;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	607b      	str	r3, [r7, #4]
    }

    return stat;
 8007be0:	687b      	ldr	r3, [r7, #4]
}
 8007be2:	0018      	movs	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b002      	add	sp, #8
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	20000dda 	.word	0x20000dda

08007bf0 <quec_receive>:
 *
 *
 */

uint8_t quec_receive(uint8_t *ibuf, uint16_t ilen, uint32_t timeout, void(*complih)(uint8_t, uint32_t))
{
 8007bf0:	b590      	push	{r4, r7, lr}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	230a      	movs	r3, #10
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	1c0a      	adds	r2, r1, #0
 8007c02:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;

    if (input_busy)
 8007c04:	4b21      	ldr	r3, [pc, #132]	; (8007c8c <quec_receive+0x9c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <quec_receive+0x24>
    {
        retstat = QS_RXBUSY;
 8007c0c:	2317      	movs	r3, #23
 8007c0e:	18fb      	adds	r3, r7, r3
 8007c10:	2202      	movs	r2, #2
 8007c12:	701a      	strb	r2, [r3, #0]
    }

    if (ilen == 0)
 8007c14:	230a      	movs	r3, #10
 8007c16:	18fb      	adds	r3, r7, r3
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d107      	bne.n	8007c2e <quec_receive+0x3e>
    {
        rxbuflen = 0;
 8007c1e:	4b1c      	ldr	r3, [pc, #112]	; (8007c90 <quec_receive+0xa0>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
        retstat = QS_OK;
 8007c24:	2317      	movs	r3, #23
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	2200      	movs	r2, #0
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	e01f      	b.n	8007c6e <quec_receive+0x7e>
    }

    else if (ibuf == 0)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <quec_receive+0x4a>
    {
        crash();
 8007c34:	f7f9 f804 	bl	8000c40 <crash>
 8007c38:	e019      	b.n	8007c6e <quec_receive+0x7e>
    }

    else
    {
        rxbufaddr = ibuf;
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <quec_receive+0xa4>)
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	601a      	str	r2, [r3, #0]
        rxbuflen = ilen;
 8007c40:	230a      	movs	r3, #10
 8007c42:	18fb      	adds	r3, r7, r3
 8007c44:	881a      	ldrh	r2, [r3, #0]
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <quec_receive+0xa0>)
 8007c48:	601a      	str	r2, [r3, #0]
        rxtimeout = timeout;
 8007c4a:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <quec_receive+0xa8>)
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
        rxcomplih = complih;
 8007c50:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <quec_receive+0xac>)
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	601a      	str	r2, [r3, #0]
        set_timer(rxtimeout);
 8007c56:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <quec_receive+0xa8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f000 f912 	bl	8007e84 <set_timer>
        input_busy = 1;
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <quec_receive+0x9c>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 8007c66:	2317      	movs	r3, #23
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	701a      	strb	r2, [r3, #0]
    }

    debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC RECEIVE: %d\r\n", retstat);
 8007c6e:	2417      	movs	r4, #23
 8007c70:	193b      	adds	r3, r7, r4
 8007c72:	781a      	ldrb	r2, [r3, #0]
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <quec_receive+0xb0>)
 8007c76:	0019      	movs	r1, r3
 8007c78:	2004      	movs	r0, #4
 8007c7a:	f7fa fd6b 	bl	8002754 <debug_printf>
    return retstat;
 8007c7e:	193b      	adds	r3, r7, r4
 8007c80:	781b      	ldrb	r3, [r3, #0]
}
 8007c82:	0018      	movs	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b007      	add	sp, #28
 8007c88:	bd90      	pop	{r4, r7, pc}
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	20000ddd 	.word	0x20000ddd
 8007c90:	20000df8 	.word	0x20000df8
 8007c94:	20000e04 	.word	0x20000e04
 8007c98:	20000dfc 	.word	0x20000dfc
 8007c9c:	20000e00 	.word	0x20000e00
 8007ca0:	08013c38 	.word	0x08013c38

08007ca4 <quec_rxflush>:
 *
 *
 */

void quec_rxflush(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
    rxget = rxput;
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <quec_rxflush+0x18>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <quec_rxflush+0x1c>)
 8007cae:	601a      	str	r2, [r3, #0]
    input_busy = 0;
 8007cb0:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <quec_rxflush+0x20>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
    return;
 8007cb6:	46c0      	nop			; (mov r8, r8)
}
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000de4 	.word	0x20000de4
 8007cc0:	20000de0 	.word	0x20000de0
 8007cc4:	20000ddd 	.word	0x20000ddd

08007cc8 <quec_transmit>:
 *
 *
 */

uint8_t quec_transmit(uint8_t *obuf, uint16_t olen)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	000a      	movs	r2, r1
 8007cd2:	1cbb      	adds	r3, r7, #2
 8007cd4:	801a      	strh	r2, [r3, #0]
    uint8_t retstat;

    debug_printf(DBGLVL_MAX, (uint8_t *)"QUEC OUT(%d): ", olen);
 8007cd6:	1cbb      	adds	r3, r7, #2
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	4b27      	ldr	r3, [pc, #156]	; (8007d78 <quec_transmit+0xb0>)
 8007cdc:	0019      	movs	r1, r3
 8007cde:	2004      	movs	r0, #4
 8007ce0:	f7fa fd38 	bl	8002754 <debug_printf>
    debug_write_fixed(DBGLVL_MAX, obuf, olen);
 8007ce4:	1cbb      	adds	r3, r7, #2
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	0019      	movs	r1, r3
 8007cec:	2004      	movs	r0, #4
 8007cee:	f7fa ff75 	bl	8002bdc <debug_write_fixed>
    debug_printf(DBGLVL_MAX, (uint8_t *)"\r\n");
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <quec_transmit+0xb4>)
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	2004      	movs	r0, #4
 8007cf8:	f7fa fd2c 	bl	8002754 <debug_printf>

    if (olen == 0)
 8007cfc:	1cbb      	adds	r3, r7, #2
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <quec_transmit+0x46>
    {
           retstat = QS_OK;
 8007d04:	230f      	movs	r3, #15
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
 8007d0c:	e02d      	b.n	8007d6a <quec_transmit+0xa2>
    }

    else if (output_busy)
 8007d0e:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <quec_transmit+0xb8>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <quec_transmit+0x58>
    {
           retstat = QS_TXBUSY;
 8007d16:	230f      	movs	r3, #15
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e024      	b.n	8007d6a <quec_transmit+0xa2>
    }

    else if (obuf == 0)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d102      	bne.n	8007d2c <quec_transmit+0x64>
    {
        crash();
 8007d26:	f7f8 ff8b 	bl	8000c40 <crash>
 8007d2a:	e01e      	b.n	8007d6a <quec_transmit+0xa2>
    }

    else
    {
        output_busy = 1;
 8007d2c:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <quec_transmit+0xb8>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	701a      	strb	r2, [r3, #0]
        txbufaddr = obuf;
 8007d32:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <quec_transmit+0xbc>)
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]
        txbuflen = olen;
 8007d38:	1cbb      	adds	r3, r7, #2
 8007d3a:	881a      	ldrh	r2, [r3, #0]
 8007d3c:	4b12      	ldr	r3, [pc, #72]	; (8007d88 <quec_transmit+0xc0>)
 8007d3e:	601a      	str	r2, [r3, #0]
        GSM_DMA_CHAN->CMAR = (uint32_t)obuf;
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <quec_transmit+0xc4>)
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	60da      	str	r2, [r3, #12]
        GSM_DMA_CHAN->CNDTR = olen;
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <quec_transmit+0xc4>)
 8007d48:	1cba      	adds	r2, r7, #2
 8007d4a:	8812      	ldrh	r2, [r2, #0]
 8007d4c:	605a      	str	r2, [r3, #4]
        GSM_UART->CR3 |= USART_CR3_DMAT;
 8007d4e:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <quec_transmit+0xc8>)
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <quec_transmit+0xc8>)
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
        GSM_DMA_CHAN->CCR =  DMA_CCR_EN | DMA_CCR_TCIE | DMA_CCR_DIR | DMA_CCR_MINC | DMA_CCR_PSIZE_0;
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <quec_transmit+0xc4>)
 8007d5c:	2294      	movs	r2, #148	; 0x94
 8007d5e:	32ff      	adds	r2, #255	; 0xff
 8007d60:	601a      	str	r2, [r3, #0]
        retstat = QS_INPROGRESS;
 8007d62:	230f      	movs	r3, #15
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	2206      	movs	r2, #6
 8007d68:	701a      	strb	r2, [r3, #0]
    }

    return retstat;
 8007d6a:	230f      	movs	r3, #15
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	781b      	ldrb	r3, [r3, #0]
}
 8007d70:	0018      	movs	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b004      	add	sp, #16
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08013c4c 	.word	0x08013c4c
 8007d7c:	08013c5c 	.word	0x08013c5c
 8007d80:	20000dda 	.word	0x20000dda
 8007d84:	20000e08 	.word	0x20000e08
 8007d88:	20000df0 	.word	0x20000df0
 8007d8c:	40020044 	.word	0x40020044
 8007d90:	40004400 	.word	0x40004400

08007d94 <quec_dma_ih>:
 *
 *
 */

void quec_dma_ih(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
    GSM_UART->CR3 &= ~USART_CR3_DMAT;
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <quec_dma_ih+0x2c>)
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <quec_dma_ih+0x2c>)
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	438a      	bics	r2, r1
 8007da2:	609a      	str	r2, [r3, #8]
    GSM_DMA_CHAN->CCR = 0;
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <quec_dma_ih+0x30>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    GSM_DMA->IFCR = DMA_IFCR_CTCIF4;
 8007daa:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <quec_dma_ih+0x34>)
 8007dac:	2280      	movs	r2, #128	; 0x80
 8007dae:	0192      	lsls	r2, r2, #6
 8007db0:	605a      	str	r2, [r3, #4]
    output_busy = 0;
 8007db2:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <quec_dma_ih+0x38>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	701a      	strb	r2, [r3, #0]
    return;
 8007db8:	46c0      	nop			; (mov r8, r8)
}
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	40004400 	.word	0x40004400
 8007dc4:	40020044 	.word	0x40020044
 8007dc8:	40020000 	.word	0x40020000
 8007dcc:	20000dda 	.word	0x20000dda

08007dd0 <quec_timer_ih>:
 *
 *
 */

void quec_timer_ih(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0

    if (timer1)
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <quec_timer_ih+0x30>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <quec_timer_ih+0x16>
    {
        timer1--;
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <quec_timer_ih+0x30>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	1e5a      	subs	r2, r3, #1
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <quec_timer_ih+0x30>)
 8007de4:	601a      	str	r2, [r3, #0]
    }

    if (timer2)
 8007de6:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <quec_timer_ih+0x34>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <quec_timer_ih+0x2a>
    {
        timer2--;
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <quec_timer_ih+0x34>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <quec_timer_ih+0x34>)
 8007df6:	601a      	str	r2, [r3, #0]
    }

    return;
 8007df8:	46c0      	nop			; (mov r8, r8)
 8007dfa:	46c0      	nop			; (mov r8, r8)
}
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000de8 	.word	0x20000de8
 8007e04:	20000dec 	.word	0x20000dec

08007e08 <quec_uart_ih>:
 *
 *
 */

void quec_uart_ih(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
    uint16_t inchar;
    uint32_t intstat;

    intstat = GSM_UART->ISR;
 8007e0e:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <quec_uart_ih+0x68>)
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	607b      	str	r3, [r7, #4]

    if (intstat & USART_ISR_RXNE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d01a      	beq.n	8007e52 <quec_uart_ih+0x4a>
    {
        inchar = GSM_UART->RDR;
 8007e1c:	4a14      	ldr	r2, [pc, #80]	; (8007e70 <quec_uart_ih+0x68>)
 8007e1e:	1cbb      	adds	r3, r7, #2
 8007e20:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007e22:	801a      	strh	r2, [r3, #0]

        if (inchar != 0x000A)
 8007e24:	1cbb      	adds	r3, r7, #2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	2b0a      	cmp	r3, #10
 8007e2a:	d01c      	beq.n	8007e66 <quec_uart_ih+0x5e>
        {
            rxintbuf[rxput] = (uint8_t)inchar;
 8007e2c:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <quec_uart_ih+0x6c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	1cba      	adds	r2, r7, #2
 8007e32:	8812      	ldrh	r2, [r2, #0]
 8007e34:	b2d1      	uxtb	r1, r2
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <quec_uart_ih+0x70>)
 8007e38:	54d1      	strb	r1, [r2, r3]
            rxput++;
 8007e3a:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <quec_uart_ih+0x6c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <quec_uart_ih+0x6c>)
 8007e42:	601a      	str	r2, [r3, #0]
            rxput &= RXINTBUFLEN - 1;
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <quec_uart_ih+0x6c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	05db      	lsls	r3, r3, #23
 8007e4a:	0dda      	lsrs	r2, r3, #23
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <quec_uart_ih+0x6c>)
 8007e4e:	601a      	str	r2, [r3, #0]
        }

        return;
 8007e50:	e009      	b.n	8007e66 <quec_uart_ih+0x5e>
    }

    GSM_UART->ICR = 0x0002055F;
 8007e52:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <quec_uart_ih+0x68>)
 8007e54:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <quec_uart_ih+0x74>)
 8007e56:	621a      	str	r2, [r3, #32]
    GSM_UART->CR1 &= ~(USART_CR1_IDLEIE | USART_CR1_TCIE | USART_CR1_PEIE | USART_CR1_CMIE | USART_CR1_RTOIE);
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <quec_uart_ih+0x68>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <quec_uart_ih+0x68>)
 8007e5e:	4908      	ldr	r1, [pc, #32]	; (8007e80 <quec_uart_ih+0x78>)
 8007e60:	400a      	ands	r2, r1
 8007e62:	601a      	str	r2, [r3, #0]
    return;
 8007e64:	e000      	b.n	8007e68 <quec_uart_ih+0x60>
        return;
 8007e66:	46c0      	nop			; (mov r8, r8)
}
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b002      	add	sp, #8
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	40004400 	.word	0x40004400
 8007e74:	20000de4 	.word	0x20000de4
 8007e78:	20000e0c 	.word	0x20000e0c
 8007e7c:	0002055f 	.word	0x0002055f
 8007e80:	fbffbeaf 	.word	0xfbffbeaf

08007e84 <set_timer>:
 *
 *
 */

static void set_timer(uint32_t newtime)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e8c:	b672      	cpsid	i
}
 8007e8e:	46c0      	nop			; (mov r8, r8)
    __disable_irq();
    timer1 = newtime;
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <set_timer+0x20>)
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e96:	b662      	cpsie	i
}
 8007e98:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
    return;
 8007e9a:	46c0      	nop			; (mov r8, r8)
}
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b002      	add	sp, #8
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	20000de8 	.word	0x20000de8

08007ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <HAL_MspInit+0x54>)
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <HAL_MspInit+0x54>)
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	619a      	str	r2, [r3, #24]
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_MspInit+0x54>)
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	607b      	str	r3, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_MspInit+0x54>)
 8007ec8:	69da      	ldr	r2, [r3, #28]
 8007eca:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <HAL_MspInit+0x54>)
 8007ecc:	2180      	movs	r1, #128	; 0x80
 8007ece:	0549      	lsls	r1, r1, #21
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <HAL_MspInit+0x54>)
 8007ed6:	69da      	ldr	r2, [r3, #28]
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	055b      	lsls	r3, r3, #21
 8007edc:	4013      	ands	r3, r2
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	2004      	movs	r0, #4
 8007ee8:	f001 fcca 	bl	8009880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007eec:	2004      	movs	r0, #4
 8007eee:	f001 fcdc 	bl	80098aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	b002      	add	sp, #8
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	40021000 	.word	0x40021000

08007f00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <HAL_RTC_MspInit+0x28>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d106      	bne.n	8007f20 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <HAL_RTC_MspInit+0x2c>)
 8007f14:	6a1a      	ldr	r2, [r3, #32]
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <HAL_RTC_MspInit+0x2c>)
 8007f18:	2180      	movs	r1, #128	; 0x80
 8007f1a:	0209      	lsls	r1, r1, #8
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007f20:	46c0      	nop			; (mov r8, r8)
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b002      	add	sp, #8
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40002800 	.word	0x40002800
 8007f2c:	40021000 	.word	0x40021000

08007f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b08b      	sub	sp, #44	; 0x2c
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f38:	2414      	movs	r4, #20
 8007f3a:	193b      	adds	r3, r7, r4
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	2314      	movs	r3, #20
 8007f40:	001a      	movs	r2, r3
 8007f42:	2100      	movs	r1, #0
 8007f44:	f009 f948 	bl	80111d8 <memset>
  if(hspi->Instance==SPI1)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	; (8007fd0 <HAL_SPI_MspInit+0xa0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d13a      	bne.n	8007fc8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f52:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f54:	699a      	ldr	r2, [r3, #24]
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f58:	2180      	movs	r1, #128	; 0x80
 8007f5a:	0149      	lsls	r1, r1, #5
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	619a      	str	r2, [r3, #24]
 8007f60:	4b1c      	ldr	r3, [pc, #112]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	015b      	lsls	r3, r3, #5
 8007f68:	4013      	ands	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f74:	2180      	movs	r1, #128	; 0x80
 8007f76:	0289      	lsls	r1, r1, #10
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	615a      	str	r2, [r3, #20]
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <HAL_SPI_MspInit+0xa4>)
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	2380      	movs	r3, #128	; 0x80
 8007f82:	029b      	lsls	r3, r3, #10
 8007f84:	4013      	ands	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007f8a:	0021      	movs	r1, r4
 8007f8c:	187b      	adds	r3, r7, r1
 8007f8e:	22e0      	movs	r2, #224	; 0xe0
 8007f90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f92:	187b      	adds	r3, r7, r1
 8007f94:	2202      	movs	r2, #2
 8007f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f98:	187b      	adds	r3, r7, r1
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f9e:	187b      	adds	r3, r7, r1
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007fa4:	187b      	adds	r3, r7, r1
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007faa:	187a      	adds	r2, r7, r1
 8007fac:	2390      	movs	r3, #144	; 0x90
 8007fae:	05db      	lsls	r3, r3, #23
 8007fb0:	0011      	movs	r1, r2
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f001 fcdc 	bl	8009970 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2019      	movs	r0, #25
 8007fbe:	f001 fc5f 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007fc2:	2019      	movs	r0, #25
 8007fc4:	f001 fc71 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007fc8:	46c0      	nop			; (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b00b      	add	sp, #44	; 0x2c
 8007fce:	bd90      	pop	{r4, r7, pc}
 8007fd0:	40013000 	.word	0x40013000
 8007fd4:	40021000 	.word	0x40021000

08007fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fd8:	b590      	push	{r4, r7, lr}
 8007fda:	b08d      	sub	sp, #52	; 0x34
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe0:	241c      	movs	r4, #28
 8007fe2:	193b      	adds	r3, r7, r4
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	2314      	movs	r3, #20
 8007fe8:	001a      	movs	r2, r3
 8007fea:	2100      	movs	r1, #0
 8007fec:	f009 f8f4 	bl	80111d8 <memset>
  if(huart->Instance==USART1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a41      	ldr	r2, [pc, #260]	; (80080fc <HAL_UART_MspInit+0x124>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d13c      	bne.n	8008074 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ffa:	4b41      	ldr	r3, [pc, #260]	; (8008100 <HAL_UART_MspInit+0x128>)
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	4b40      	ldr	r3, [pc, #256]	; (8008100 <HAL_UART_MspInit+0x128>)
 8008000:	2180      	movs	r1, #128	; 0x80
 8008002:	01c9      	lsls	r1, r1, #7
 8008004:	430a      	orrs	r2, r1
 8008006:	619a      	str	r2, [r3, #24]
 8008008:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <HAL_UART_MspInit+0x128>)
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	01db      	lsls	r3, r3, #7
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008016:	4b3a      	ldr	r3, [pc, #232]	; (8008100 <HAL_UART_MspInit+0x128>)
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	4b39      	ldr	r3, [pc, #228]	; (8008100 <HAL_UART_MspInit+0x128>)
 800801c:	2180      	movs	r1, #128	; 0x80
 800801e:	0289      	lsls	r1, r1, #10
 8008020:	430a      	orrs	r2, r1
 8008022:	615a      	str	r2, [r3, #20]
 8008024:	4b36      	ldr	r3, [pc, #216]	; (8008100 <HAL_UART_MspInit+0x128>)
 8008026:	695a      	ldr	r2, [r3, #20]
 8008028:	2380      	movs	r3, #128	; 0x80
 800802a:	029b      	lsls	r3, r3, #10
 800802c:	4013      	ands	r3, r2
 800802e:	617b      	str	r3, [r7, #20]
 8008030:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008032:	193b      	adds	r3, r7, r4
 8008034:	22c0      	movs	r2, #192	; 0xc0
 8008036:	00d2      	lsls	r2, r2, #3
 8008038:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800803a:	0021      	movs	r1, r4
 800803c:	187b      	adds	r3, r7, r1
 800803e:	2202      	movs	r2, #2
 8008040:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008042:	187b      	adds	r3, r7, r1
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008048:	187b      	adds	r3, r7, r1
 800804a:	2203      	movs	r2, #3
 800804c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800804e:	187b      	adds	r3, r7, r1
 8008050:	2201      	movs	r2, #1
 8008052:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008054:	187a      	adds	r2, r7, r1
 8008056:	2390      	movs	r3, #144	; 0x90
 8008058:	05db      	lsls	r3, r3, #23
 800805a:	0011      	movs	r1, r2
 800805c:	0018      	movs	r0, r3
 800805e:	f001 fc87 	bl	8009970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008062:	2200      	movs	r2, #0
 8008064:	2100      	movs	r1, #0
 8008066:	201b      	movs	r0, #27
 8008068:	f001 fc0a 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800806c:	201b      	movs	r0, #27
 800806e:	f001 fc1c 	bl	80098aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008072:	e03f      	b.n	80080f4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a22      	ldr	r2, [pc, #136]	; (8008104 <HAL_UART_MspInit+0x12c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d13a      	bne.n	80080f4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800807e:	4b20      	ldr	r3, [pc, #128]	; (8008100 <HAL_UART_MspInit+0x128>)
 8008080:	69da      	ldr	r2, [r3, #28]
 8008082:	4b1f      	ldr	r3, [pc, #124]	; (8008100 <HAL_UART_MspInit+0x128>)
 8008084:	2180      	movs	r1, #128	; 0x80
 8008086:	0289      	lsls	r1, r1, #10
 8008088:	430a      	orrs	r2, r1
 800808a:	61da      	str	r2, [r3, #28]
 800808c:	4b1c      	ldr	r3, [pc, #112]	; (8008100 <HAL_UART_MspInit+0x128>)
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	2380      	movs	r3, #128	; 0x80
 8008092:	029b      	lsls	r3, r3, #10
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800809a:	4b19      	ldr	r3, [pc, #100]	; (8008100 <HAL_UART_MspInit+0x128>)
 800809c:	695a      	ldr	r2, [r3, #20]
 800809e:	4b18      	ldr	r3, [pc, #96]	; (8008100 <HAL_UART_MspInit+0x128>)
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	0289      	lsls	r1, r1, #10
 80080a4:	430a      	orrs	r2, r1
 80080a6:	615a      	str	r2, [r3, #20]
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_UART_MspInit+0x128>)
 80080aa:	695a      	ldr	r2, [r3, #20]
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	029b      	lsls	r3, r3, #10
 80080b0:	4013      	ands	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80080b6:	211c      	movs	r1, #28
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	220c      	movs	r2, #12
 80080bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	2202      	movs	r2, #2
 80080c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	2200      	movs	r2, #0
 80080c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080ca:	187b      	adds	r3, r7, r1
 80080cc:	2203      	movs	r2, #3
 80080ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	2201      	movs	r2, #1
 80080d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d6:	187a      	adds	r2, r7, r1
 80080d8:	2390      	movs	r3, #144	; 0x90
 80080da:	05db      	lsls	r3, r3, #23
 80080dc:	0011      	movs	r1, r2
 80080de:	0018      	movs	r0, r3
 80080e0:	f001 fc46 	bl	8009970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	201c      	movs	r0, #28
 80080ea:	f001 fbc9 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80080ee:	201c      	movs	r0, #28
 80080f0:	f001 fbdb 	bl	80098aa <HAL_NVIC_EnableIRQ>
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b00d      	add	sp, #52	; 0x34
 80080fa:	bd90      	pop	{r4, r7, pc}
 80080fc:	40013800 	.word	0x40013800
 8008100:	40021000 	.word	0x40021000
 8008104:	40004400 	.word	0x40004400

08008108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800810c:	46c0      	nop			; (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008116:	e7fe      	b.n	8008116 <HardFault_Handler+0x4>

08008118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800811c:	46c0      	nop			; (mov r8, r8)
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008130:	f001 faba 	bl	80096a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  led_timer_ih();
 8008134:	f7ff f88a 	bl	800724c <led_timer_ih>
  quec_timer_ih();
 8008138:	f7ff fe4a 	bl	8007dd0 <quec_timer_ih>
  gsm_timer_ih();
 800813c:	f7fc ff42 	bl	8004fc4 <gsm_timer_ih>
  espat_timer_ih();
 8008140:	f7fb fd1e 	bl	8003b80 <espat_timer_ih>
  master_timer_ih();
 8008144:	f001 f882 	bl	800924c <master_timer_ih>
  esp_timer_ih();
 8008148:	f7fb fbd8 	bl	80038fc <esp_timer_ih>

  /* USER CODE END SysTick_IRQn 1 */
}
 800814c:	46c0      	nop			; (mov r8, r8)
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008160:	4b03      	ldr	r3, [pc, #12]	; (8008170 <TIM6_IRQHandler+0x14>)
 8008162:	0018      	movs	r0, r3
 8008164:	f004 fecc 	bl	800cf00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	20002060 	.word	0x20002060

08008174 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008178:	4b03      	ldr	r3, [pc, #12]	; (8008188 <TIM7_IRQHandler+0x14>)
 800817a:	0018      	movs	r0, r3
 800817c:	f004 fec0 	bl	800cf00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008180:	46c0      	nop			; (mov r8, r8)
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	200021d8 	.word	0x200021d8

0800818c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008190:	4b03      	ldr	r3, [pc, #12]	; (80081a0 <SPI1_IRQHandler+0x14>)
 8008192:	0018      	movs	r0, r3
 8008194:	f004 fbd0 	bl	800c938 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	200020a8 	.word	0x200020a8

080081a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081ac:	4a14      	ldr	r2, [pc, #80]	; (8008200 <_sbrk+0x5c>)
 80081ae:	4b15      	ldr	r3, [pc, #84]	; (8008204 <_sbrk+0x60>)
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081b8:	4b13      	ldr	r3, [pc, #76]	; (8008208 <_sbrk+0x64>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <_sbrk+0x64>)
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <_sbrk+0x68>)
 80081c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081c6:	4b10      	ldr	r3, [pc, #64]	; (8008208 <_sbrk+0x64>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	18d3      	adds	r3, r2, r3
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d207      	bcs.n	80081e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081d4:	f008 ffd6 	bl	8011184 <__errno>
 80081d8:	0003      	movs	r3, r0
 80081da:	220c      	movs	r2, #12
 80081dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80081de:	2301      	movs	r3, #1
 80081e0:	425b      	negs	r3, r3
 80081e2:	e009      	b.n	80081f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80081e4:	4b08      	ldr	r3, [pc, #32]	; (8008208 <_sbrk+0x64>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <_sbrk+0x64>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	18d2      	adds	r2, r2, r3
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <_sbrk+0x64>)
 80081f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	0018      	movs	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b006      	add	sp, #24
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20004000 	.word	0x20004000
 8008204:	00000400 	.word	0x00000400
 8008208:	20001010 	.word	0x20001010
 800820c:	200031c8 	.word	0x200031c8

08008210 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8008214:	46c0      	nop			; (mov r8, r8)
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Init_FS(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&usbdevhandle, UserTxBufferFS, 0);
 8008220:	4907      	ldr	r1, [pc, #28]	; (8008240 <CDC_Init_FS+0x24>)
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <CDC_Init_FS+0x28>)
 8008224:	2200      	movs	r2, #0
 8008226:	0018      	movs	r0, r3
 8008228:	f000 fb08 	bl	800883c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&usbdevhandle, UserRxBufferFS);
 800822c:	4a06      	ldr	r2, [pc, #24]	; (8008248 <CDC_Init_FS+0x2c>)
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <CDC_Init_FS+0x28>)
 8008230:	0011      	movs	r1, r2
 8008232:	0018      	movs	r0, r3
 8008234:	f000 fb1e 	bl	8008874 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008238:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800823a:	0018      	movs	r0, r3
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20002608 	.word	0x20002608
 8008244:	20002ce4 	.word	0x20002ce4
 8008248:	20002220 	.word	0x20002220

0800824c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_DeInit_FS(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008250:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008252:	0018      	movs	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6039      	str	r1, [r7, #0]
 8008260:	0011      	movs	r1, r2
 8008262:	1dfb      	adds	r3, r7, #7
 8008264:	1c02      	adds	r2, r0, #0
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	1c0a      	adds	r2, r1, #0
 800826c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b23      	cmp	r3, #35	; 0x23
 8008274:	d804      	bhi.n	8008280 <CDC_Control_FS+0x28>
 8008276:	009a      	lsls	r2, r3, #2
 8008278:	4b04      	ldr	r3, [pc, #16]	; (800828c <CDC_Control_FS+0x34>)
 800827a:	18d3      	adds	r3, r2, r3
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008280:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8008282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008284:	0018      	movs	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	b002      	add	sp, #8
 800828a:	bd80      	pop	{r7, pc}
 800828c:	080179ac 	.word	0x080179ac

08008290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&usbdevhandle, &Buf[0]);
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <CDC_Receive_FS+0x28>)
 800829e:	0011      	movs	r1, r2
 80082a0:	0018      	movs	r0, r3
 80082a2:	f000 fae7 	bl	8008874 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&usbdevhandle);
 80082a6:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <CDC_Receive_FS+0x28>)
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 fb2e 	bl	800890a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082b0:	0018      	movs	r0, r3
 80082b2:	46bd      	mov	sp, r7
 80082b4:	b002      	add	sp, #8
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20002ce4 	.word	0x20002ce4

080082bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082bc:	b5b0      	push	{r4, r5, r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	000a      	movs	r2, r1
 80082c6:	1cbb      	adds	r3, r7, #2
 80082c8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80082ca:	230f      	movs	r3, #15
 80082cc:	18fb      	adds	r3, r7, r3
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)usbdevhandle.pClassData;
 80082d2:	4a11      	ldr	r2, [pc, #68]	; (8008318 <CDC_Transmit_FS+0x5c>)
 80082d4:	23ae      	movs	r3, #174	; 0xae
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	58d3      	ldr	r3, [r2, r3]
 80082da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	2385      	movs	r3, #133	; 0x85
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	58d3      	ldr	r3, [r2, r3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e010      	b.n	800830e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&usbdevhandle, Buf, Len);
 80082ec:	1cbb      	adds	r3, r7, #2
 80082ee:	881a      	ldrh	r2, [r3, #0]
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <CDC_Transmit_FS+0x5c>)
 80082f4:	0018      	movs	r0, r3
 80082f6:	f000 faa1 	bl	800883c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&usbdevhandle);
 80082fa:	250f      	movs	r5, #15
 80082fc:	197c      	adds	r4, r7, r5
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <CDC_Transmit_FS+0x5c>)
 8008300:	0018      	movs	r0, r3
 8008302:	f000 facb 	bl	800889c <USBD_CDC_TransmitPacket>
 8008306:	0003      	movs	r3, r0
 8008308:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800830a:	197b      	adds	r3, r7, r5
 800830c:	781b      	ldrb	r3, [r3, #0]
}
 800830e:	0018      	movs	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	b004      	add	sp, #16
 8008314:	bdb0      	pop	{r4, r5, r7, pc}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	20002ce4 	.word	0x20002ce4

0800831c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	000a      	movs	r2, r1
 8008326:	1cfb      	adds	r3, r7, #3
 8008328:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800832a:	230f      	movs	r3, #15
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7c1b      	ldrb	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d116      	bne.n	8008368 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	2181      	movs	r1, #129	; 0x81
 8008344:	f008 fd28 	bl	8010d98 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800834e:	2380      	movs	r3, #128	; 0x80
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	2101      	movs	r1, #1
 8008358:	f008 fd1e 	bl	8010d98 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	23b6      	movs	r3, #182	; 0xb6
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	2101      	movs	r1, #1
 8008364:	50d1      	str	r1, [r2, r3]
 8008366:	e013      	b.n	8008390 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	2202      	movs	r2, #2
 800836e:	2181      	movs	r1, #129	; 0x81
 8008370:	f008 fd12 	bl	8010d98 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	2340      	movs	r3, #64	; 0x40
 800837e:	2202      	movs	r2, #2
 8008380:	2101      	movs	r1, #1
 8008382:	f008 fd09 	bl	8010d98 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	23b6      	movs	r3, #182	; 0xb6
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	2101      	movs	r1, #1
 800838e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	2308      	movs	r3, #8
 8008394:	2203      	movs	r2, #3
 8008396:	2182      	movs	r1, #130	; 0x82
 8008398:	f008 fcfe 	bl	8010d98 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083a2:	2387      	movs	r3, #135	; 0x87
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	0018      	movs	r0, r3
 80083a8:	f008 fe8e 	bl	80110c8 <USBD_static_malloc>
 80083ac:	0001      	movs	r1, r0
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	23ae      	movs	r3, #174	; 0xae
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	23ae      	movs	r3, #174	; 0xae
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	58d3      	ldr	r3, [r2, r3]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80083c2:	230f      	movs	r3, #15
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2201      	movs	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e02c      	b.n	8008426 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	23ae      	movs	r3, #174	; 0xae
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	58d3      	ldr	r3, [r2, r3]
 80083d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	23af      	movs	r3, #175	; 0xaf
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	58d3      	ldr	r3, [r2, r3]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	2385      	movs	r3, #133	; 0x85
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	2100      	movs	r1, #0
 80083ea:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	2386      	movs	r3, #134	; 0x86
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	2100      	movs	r1, #0
 80083f4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	7c1b      	ldrb	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10a      	bne.n	8008414 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	2381      	movs	r3, #129	; 0x81
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	58d2      	ldr	r2, [r2, r3]
 8008406:	2380      	movs	r3, #128	; 0x80
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	2101      	movs	r1, #1
 800840e:	f008 fe0e 	bl	801102e <USBD_LL_PrepareReceive>
 8008412:	e008      	b.n	8008426 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	2381      	movs	r3, #129	; 0x81
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	58d2      	ldr	r2, [r2, r3]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	2101      	movs	r1, #1
 8008422:	f008 fe04 	bl	801102e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008426:	230f      	movs	r3, #15
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	781b      	ldrb	r3, [r3, #0]
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	b004      	add	sp, #16
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	000a      	movs	r2, r1
 800843e:	1cfb      	adds	r3, r7, #3
 8008440:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8008442:	230f      	movs	r3, #15
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	2200      	movs	r2, #0
 8008448:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2181      	movs	r1, #129	; 0x81
 800844e:	0018      	movs	r0, r3
 8008450:	f008 fcd9 	bl	8010e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2101      	movs	r1, #1
 800845e:	0018      	movs	r0, r3
 8008460:	f008 fcd1 	bl	8010e06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	23b6      	movs	r3, #182	; 0xb6
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	2100      	movs	r1, #0
 800846c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2182      	movs	r1, #130	; 0x82
 8008472:	0018      	movs	r0, r3
 8008474:	f008 fcc7 	bl	8010e06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	23ae      	movs	r3, #174	; 0xae
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	58d3      	ldr	r3, [r2, r3]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d011      	beq.n	80084ae <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	23af      	movs	r3, #175	; 0xaf
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	58d3      	ldr	r3, [r2, r3]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	23ae      	movs	r3, #174	; 0xae
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	58d3      	ldr	r3, [r2, r3]
 800849e:	0018      	movs	r0, r3
 80084a0:	f008 fe1e 	bl	80110e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	23ae      	movs	r3, #174	; 0xae
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	2100      	movs	r1, #0
 80084ac:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80084ae:	230f      	movs	r3, #15
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	781b      	ldrb	r3, [r3, #0]
}
 80084b4:	0018      	movs	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b004      	add	sp, #16
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	23ae      	movs	r3, #174	; 0xae
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	58d3      	ldr	r3, [r2, r3]
 80084ce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80084d0:	230f      	movs	r3, #15
 80084d2:	18fb      	adds	r3, r7, r3
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80084d8:	230c      	movs	r3, #12
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	2200      	movs	r2, #0
 80084de:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80084e0:	2317      	movs	r3, #23
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	001a      	movs	r2, r3
 80084ee:	2360      	movs	r3, #96	; 0x60
 80084f0:	4013      	ands	r3, r2
 80084f2:	d03d      	beq.n	8008570 <USBD_CDC_Setup+0xb4>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d000      	beq.n	80084fa <USBD_CDC_Setup+0x3e>
 80084f8:	e094      	b.n	8008624 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02b      	beq.n	800855a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b25b      	sxtb	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	da12      	bge.n	8008532 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	23af      	movs	r3, #175	; 0xaf
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	58d3      	ldr	r3, [r2, r3]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800851a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	88d2      	ldrh	r2, [r2, #6]
 8008520:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008522:	6939      	ldr	r1, [r7, #16]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	88da      	ldrh	r2, [r3, #6]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	0018      	movs	r0, r3
 800852c:	f008 f9e6 	bl	80108fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008530:	e083      	b.n	800863a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	7859      	ldrb	r1, [r3, #1]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	b2d9      	uxtb	r1, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4a40      	ldr	r2, [pc, #256]	; (8008648 <USBD_CDC_Setup+0x18c>)
 8008548:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800854a:	6939      	ldr	r1, [r7, #16]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	88da      	ldrh	r2, [r3, #6]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	0018      	movs	r0, r3
 8008554:	f008 fa05 	bl	8010962 <USBD_CtlPrepareRx>
      break;
 8008558:	e06f      	b.n	800863a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	23af      	movs	r3, #175	; 0xaf
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	58d3      	ldr	r3, [r2, r3]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	7850      	ldrb	r0, [r2, #1]
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	4798      	blx	r3
      break;
 800856e:	e064      	b.n	800863a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	785b      	ldrb	r3, [r3, #1]
 8008574:	2b0b      	cmp	r3, #11
 8008576:	d037      	beq.n	80085e8 <USBD_CDC_Setup+0x12c>
 8008578:	dc47      	bgt.n	800860a <USBD_CDC_Setup+0x14e>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <USBD_CDC_Setup+0xc8>
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d019      	beq.n	80085b6 <USBD_CDC_Setup+0xfa>
 8008582:	e042      	b.n	800860a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	23a7      	movs	r3, #167	; 0xa7
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	5cd3      	ldrb	r3, [r2, r3]
 800858c:	2b03      	cmp	r3, #3
 800858e:	d107      	bne.n	80085a0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008590:	230c      	movs	r3, #12
 8008592:	18f9      	adds	r1, r7, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	0018      	movs	r0, r3
 800859a:	f008 f9af 	bl	80108fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800859e:	e040      	b.n	8008622 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	0011      	movs	r1, r2
 80085a6:	0018      	movs	r0, r3
 80085a8:	f008 f92a 	bl	8010800 <USBD_CtlError>
            ret = USBD_FAIL;
 80085ac:	2317      	movs	r3, #23
 80085ae:	18fb      	adds	r3, r7, r3
 80085b0:	2202      	movs	r2, #2
 80085b2:	701a      	strb	r2, [r3, #0]
          break;
 80085b4:	e035      	b.n	8008622 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	23a7      	movs	r3, #167	; 0xa7
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	5cd3      	ldrb	r3, [r2, r3]
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d107      	bne.n	80085d2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80085c2:	230f      	movs	r3, #15
 80085c4:	18f9      	adds	r1, r7, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	0018      	movs	r0, r3
 80085cc:	f008 f996 	bl	80108fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085d0:	e027      	b.n	8008622 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	0011      	movs	r1, r2
 80085d8:	0018      	movs	r0, r3
 80085da:	f008 f911 	bl	8010800 <USBD_CtlError>
            ret = USBD_FAIL;
 80085de:	2317      	movs	r3, #23
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	2202      	movs	r2, #2
 80085e4:	701a      	strb	r2, [r3, #0]
          break;
 80085e6:	e01c      	b.n	8008622 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	23a7      	movs	r3, #167	; 0xa7
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	5cd3      	ldrb	r3, [r2, r3]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d015      	beq.n	8008620 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	0011      	movs	r1, r2
 80085fa:	0018      	movs	r0, r3
 80085fc:	f008 f900 	bl	8010800 <USBD_CtlError>
            ret = USBD_FAIL;
 8008600:	2317      	movs	r3, #23
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	2202      	movs	r2, #2
 8008606:	701a      	strb	r2, [r3, #0]
          }
          break;
 8008608:	e00a      	b.n	8008620 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	0011      	movs	r1, r2
 8008610:	0018      	movs	r0, r3
 8008612:	f008 f8f5 	bl	8010800 <USBD_CtlError>
          ret = USBD_FAIL;
 8008616:	2317      	movs	r3, #23
 8008618:	18fb      	adds	r3, r7, r3
 800861a:	2202      	movs	r2, #2
 800861c:	701a      	strb	r2, [r3, #0]
          break;
 800861e:	e000      	b.n	8008622 <USBD_CDC_Setup+0x166>
          break;
 8008620:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008622:	e00a      	b.n	800863a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	0011      	movs	r1, r2
 800862a:	0018      	movs	r0, r3
 800862c:	f008 f8e8 	bl	8010800 <USBD_CtlError>
      ret = USBD_FAIL;
 8008630:	2317      	movs	r3, #23
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	2202      	movs	r2, #2
 8008636:	701a      	strb	r2, [r3, #0]
      break;
 8008638:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800863a:	2317      	movs	r3, #23
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	781b      	ldrb	r3, [r3, #0]
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b006      	add	sp, #24
 8008646:	bd80      	pop	{r7, pc}
 8008648:	00000201 	.word	0x00000201

0800864c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	000a      	movs	r2, r1
 8008656:	1cfb      	adds	r3, r7, #3
 8008658:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	23ae      	movs	r3, #174	; 0xae
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	58d3      	ldr	r3, [r2, r3]
 8008662:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	23b0      	movs	r3, #176	; 0xb0
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	58d3      	ldr	r3, [r2, r3]
 800866c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	23ae      	movs	r3, #174	; 0xae
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	58d3      	ldr	r3, [r2, r3]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d03e      	beq.n	80086f8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800867a:	1cfb      	adds	r3, r7, #3
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	0013      	movs	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	189b      	adds	r3, r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	18cb      	adds	r3, r1, r3
 800868a:	331c      	adds	r3, #28
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02b      	beq.n	80086ea <USBD_CDC_DataIn+0x9e>
 8008692:	1cfb      	adds	r3, r7, #3
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	0013      	movs	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	189b      	adds	r3, r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	18cb      	adds	r3, r1, r3
 80086a2:	331c      	adds	r3, #28
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	1cfb      	adds	r3, r7, #3
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	0013      	movs	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	189b      	adds	r3, r3, r2
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	18cb      	adds	r3, r1, r3
 80086b6:	3338      	adds	r3, #56	; 0x38
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	0019      	movs	r1, r3
 80086bc:	f7f7 fdc6 	bl	800024c <__aeabi_uidivmod>
 80086c0:	1e0b      	subs	r3, r1, #0
 80086c2:	d112      	bne.n	80086ea <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80086c4:	1cfb      	adds	r3, r7, #3
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	0013      	movs	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	18cb      	adds	r3, r1, r3
 80086d4:	331c      	adds	r3, #28
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086da:	1cfb      	adds	r3, r7, #3
 80086dc:	7819      	ldrb	r1, [r3, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	f008 fc6c 	bl	8010fc0 <USBD_LL_Transmit>
 80086e8:	e004      	b.n	80086f4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	2385      	movs	r3, #133	; 0x85
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	2100      	movs	r1, #0
 80086f2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	e000      	b.n	80086fa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80086f8:	2302      	movs	r3, #2
  }
}
 80086fa:	0018      	movs	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b004      	add	sp, #16
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	000a      	movs	r2, r1
 800870c:	1cfb      	adds	r3, r7, #3
 800870e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	23ae      	movs	r3, #174	; 0xae
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	58d3      	ldr	r3, [r2, r3]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800871a:	1cfb      	adds	r3, r7, #3
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	0011      	movs	r1, r2
 8008722:	0018      	movs	r0, r3
 8008724:	f008 fcba 	bl	801109c <USBD_LL_GetRxDataSize>
 8008728:	0001      	movs	r1, r0
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	2383      	movs	r3, #131	; 0x83
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	23ae      	movs	r3, #174	; 0xae
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	58d3      	ldr	r3, [r2, r3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d011      	beq.n	8008762 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	23af      	movs	r3, #175	; 0xaf
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	58d3      	ldr	r3, [r2, r3]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	68f9      	ldr	r1, [r7, #12]
 800874a:	2381      	movs	r3, #129	; 0x81
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	58c8      	ldr	r0, [r1, r3]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2183      	movs	r1, #131	; 0x83
 8008754:	0089      	lsls	r1, r1, #2
 8008756:	468c      	mov	ip, r1
 8008758:	4463      	add	r3, ip
 800875a:	0019      	movs	r1, r3
 800875c:	4790      	blx	r2

    return USBD_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	b004      	add	sp, #16
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800876c:	b590      	push	{r4, r7, lr}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	23ae      	movs	r3, #174	; 0xae
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	58d3      	ldr	r3, [r2, r3]
 800877c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	23af      	movs	r3, #175	; 0xaf
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	58d3      	ldr	r3, [r2, r3]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d019      	beq.n	80087be <USBD_CDC_EP0_RxReady+0x52>
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	2380      	movs	r3, #128	; 0x80
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	5cd3      	ldrb	r3, [r2, r3]
 8008792:	2bff      	cmp	r3, #255	; 0xff
 8008794:	d013      	beq.n	80087be <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	23af      	movs	r3, #175	; 0xaf
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	58d3      	ldr	r3, [r2, r3]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	2280      	movs	r2, #128	; 0x80
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80087a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4c06      	ldr	r4, [pc, #24]	; (80087c8 <USBD_CDC_EP0_RxReady+0x5c>)
 80087ae:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087b0:	b292      	uxth	r2, r2
 80087b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	2380      	movs	r3, #128	; 0x80
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	21ff      	movs	r1, #255	; 0xff
 80087bc:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b005      	add	sp, #20
 80087c6:	bd90      	pop	{r4, r7, pc}
 80087c8:	00000201 	.word	0x00000201

080087cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2243      	movs	r2, #67	; 0x43
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80087da:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80087dc:	0018      	movs	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	b002      	add	sp, #8
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000068 	.word	0x20000068

080087e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2243      	movs	r2, #67	; 0x43
 80087f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80087f6:	4b02      	ldr	r3, [pc, #8]	; (8008800 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80087f8:	0018      	movs	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b002      	add	sp, #8
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000024 	.word	0x20000024

08008804 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2243      	movs	r2, #67	; 0x43
 8008810:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008812:	4b02      	ldr	r3, [pc, #8]	; (800881c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b002      	add	sp, #8
 800881a:	bd80      	pop	{r7, pc}
 800881c:	200000ac 	.word	0x200000ac

08008820 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	220a      	movs	r2, #10
 800882c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800882e:	4b02      	ldr	r3, [pc, #8]	; (8008838 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b002      	add	sp, #8
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20000018 	.word	0x20000018

0800883c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	1dbb      	adds	r3, r7, #6
 8008848:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	23ae      	movs	r3, #174	; 0xae
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	58d3      	ldr	r3, [r2, r3]
 8008852:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	2382      	movs	r3, #130	; 0x82
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800885e:	1dbb      	adds	r3, r7, #6
 8008860:	8819      	ldrh	r1, [r3, #0]
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	2384      	movs	r3, #132	; 0x84
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b006      	add	sp, #24
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	23ae      	movs	r3, #174	; 0xae
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	58d3      	ldr	r3, [r2, r3]
 8008886:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	2381      	movs	r3, #129	; 0x81
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	0018      	movs	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	b004      	add	sp, #16
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	23ae      	movs	r3, #174	; 0xae
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	58d3      	ldr	r3, [r2, r3]
 80088ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	23ae      	movs	r3, #174	; 0xae
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	58d3      	ldr	r3, [r2, r3]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d022      	beq.n	8008900 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	2385      	movs	r3, #133	; 0x85
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	58d3      	ldr	r3, [r2, r3]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d11a      	bne.n	80088fc <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	2385      	movs	r3, #133	; 0x85
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	2101      	movs	r1, #1
 80088ce:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	2384      	movs	r3, #132	; 0x84
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	58d2      	ldr	r2, [r2, r3]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	2382      	movs	r3, #130	; 0x82
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	2384      	movs	r3, #132	; 0x84
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	000a      	movs	r2, r1
 80088f2:	2181      	movs	r1, #129	; 0x81
 80088f4:	f008 fb64 	bl	8010fc0 <USBD_LL_Transmit>

      return USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	e002      	b.n	8008902 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	0018      	movs	r0, r3
 8008904:	46bd      	mov	sp, r7
 8008906:	b004      	add	sp, #16
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	23ae      	movs	r3, #174	; 0xae
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	58d3      	ldr	r3, [r2, r3]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	23ae      	movs	r3, #174	; 0xae
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	58d3      	ldr	r3, [r2, r3]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d019      	beq.n	800895c <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7c1b      	ldrb	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	2381      	movs	r3, #129	; 0x81
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	58d2      	ldr	r2, [r2, r3]
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	2101      	movs	r1, #1
 8008940:	f008 fb75 	bl	801102e <USBD_LL_PrepareReceive>
 8008944:	e008      	b.n	8008958 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	2381      	movs	r3, #129	; 0x81
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	58d2      	ldr	r2, [r2, r3]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	2101      	movs	r1, #1
 8008954:	f008 fb6b 	bl	801102e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	e000      	b.n	800895e <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800895c:	2302      	movs	r3, #2
  }
}
 800895e:	0018      	movs	r0, r3
 8008960:	46bd      	mov	sp, r7
 8008962:	b004      	add	sp, #16
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <usb_init>:
 *
 * Stolen from usb_device.c MX_USB_DEVICE_Init
 */

void usb_init(void)
{
 8008968:	b590      	push	{r4, r7, lr}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
    /*
     * Assume initialization will succeed and set ready flag now.  If
     * there is a failure it will get cleared at that point.
     */

    debug_print_ready = 1;
 800896e:	4bc5      	ldr	r3, [pc, #788]	; (8008c84 <usb_init+0x31c>)
 8008970:	2201      	movs	r2, #1
 8008972:	701a      	strb	r2, [r3, #0]

    pdev = &usbdevhandle;
 8008974:	4bc4      	ldr	r3, [pc, #784]	; (8008c88 <usb_init+0x320>)
 8008976:	4ac5      	ldr	r2, [pc, #788]	; (8008c8c <usb_init+0x324>)
 8008978:	601a      	str	r2, [r3, #0]
    hpcd = &usbpcdhandle;
 800897a:	4bc5      	ldr	r3, [pc, #788]	; (8008c90 <usb_init+0x328>)
 800897c:	4ac5      	ldr	r2, [pc, #788]	; (8008c94 <usb_init+0x32c>)
 800897e:	601a      	str	r2, [r3, #0]
    pdesc = &usb_desc_list;
 8008980:	4bc5      	ldr	r3, [pc, #788]	; (8008c98 <usb_init+0x330>)
 8008982:	4ac6      	ldr	r2, [pc, #792]	; (8008c9c <usb_init+0x334>)
 8008984:	601a      	str	r2, [r3, #0]

/*
 * stolen from USBD_Init in usbd_core.c
 */

    pdev->pClass = NULL;
 8008986:	4bc0      	ldr	r3, [pc, #768]	; (8008c88 <usb_init+0x320>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	23ad      	movs	r3, #173	; 0xad
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	2100      	movs	r1, #0
 8008990:	50d1      	str	r1, [r2, r3]

    pdev->pDesc = (DESCRIPTOR_CALLBACK_STRUC *)&usb_desc_list;
 8008992:	4bbd      	ldr	r3, [pc, #756]	; (8008c88 <usb_init+0x320>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	23ac      	movs	r3, #172	; 0xac
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	49c0      	ldr	r1, [pc, #768]	; (8008c9c <usb_init+0x334>)
 800899c:	50d1      	str	r1, [r2, r3]

    pdev->dev_state = USBD_STATE_DEFAULT;
 800899e:	4bba      	ldr	r3, [pc, #744]	; (8008c88 <usb_init+0x320>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	23a7      	movs	r3, #167	; 0xa7
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	2101      	movs	r1, #1
 80089a8:	54d1      	strb	r1, [r2, r3]
    pdev->id = 0;
 80089aa:	4bb7      	ldr	r3, [pc, #732]	; (8008c88 <usb_init+0x320>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
/*
 * stolen from USBD_LL_Init in usbd_core.c
 */


    usbpcdhandle.pData = pdev;
 80089b2:	4bb5      	ldr	r3, [pc, #724]	; (8008c88 <usb_init+0x320>)
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	4ab7      	ldr	r2, [pc, #732]	; (8008c94 <usb_init+0x32c>)
 80089b8:	23bc      	movs	r3, #188	; 0xbc
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	50d1      	str	r1, [r2, r3]
    pdev->pData = &usbpcdhandle;
 80089be:	4bb2      	ldr	r3, [pc, #712]	; (8008c88 <usb_init+0x320>)
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	23b0      	movs	r3, #176	; 0xb0
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	49b3      	ldr	r1, [pc, #716]	; (8008c94 <usb_init+0x32c>)
 80089c8:	50d1      	str	r1, [r2, r3]

    usbpcdhandle.Instance = USB;
 80089ca:	4bb2      	ldr	r3, [pc, #712]	; (8008c94 <usb_init+0x32c>)
 80089cc:	4ab4      	ldr	r2, [pc, #720]	; (8008ca0 <usb_init+0x338>)
 80089ce:	601a      	str	r2, [r3, #0]
    usbpcdhandle.Init.dev_endpoints = 8;
 80089d0:	4bb0      	ldr	r3, [pc, #704]	; (8008c94 <usb_init+0x32c>)
 80089d2:	2208      	movs	r2, #8
 80089d4:	605a      	str	r2, [r3, #4]
    usbpcdhandle.Init.speed = PCD_SPEED_FULL;
 80089d6:	4baf      	ldr	r3, [pc, #700]	; (8008c94 <usb_init+0x32c>)
 80089d8:	2202      	movs	r2, #2
 80089da:	609a      	str	r2, [r3, #8]
    usbpcdhandle.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089dc:	4bad      	ldr	r3, [pc, #692]	; (8008c94 <usb_init+0x32c>)
 80089de:	2202      	movs	r2, #2
 80089e0:	611a      	str	r2, [r3, #16]
    usbpcdhandle.Init.low_power_enable = DISABLE;
 80089e2:	4bac      	ldr	r3, [pc, #688]	; (8008c94 <usb_init+0x32c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	619a      	str	r2, [r3, #24]
    usbpcdhandle.Init.lpm_enable = DISABLE;
 80089e8:	4baa      	ldr	r3, [pc, #680]	; (8008c94 <usb_init+0x32c>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	61da      	str	r2, [r3, #28]
    usbpcdhandle.Init.battery_charging_enable = DISABLE;
 80089ee:	4ba9      	ldr	r3, [pc, #676]	; (8008c94 <usb_init+0x32c>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	621a      	str	r2, [r3, #32]

/*
 * stolen from HAL_PCD_Init  in stm32f0xx_hal_pcd.c
 */

    __HAL_RCC_USB_CLK_ENABLE();
 80089f4:	4bab      	ldr	r3, [pc, #684]	; (8008ca4 <usb_init+0x33c>)
 80089f6:	69da      	ldr	r2, [r3, #28]
 80089f8:	4baa      	ldr	r3, [pc, #680]	; (8008ca4 <usb_init+0x33c>)
 80089fa:	2180      	movs	r1, #128	; 0x80
 80089fc:	0409      	lsls	r1, r1, #16
 80089fe:	430a      	orrs	r2, r1
 8008a00:	61da      	str	r2, [r3, #28]
 8008a02:	4ba8      	ldr	r3, [pc, #672]	; (8008ca4 <usb_init+0x33c>)
 8008a04:	69da      	ldr	r2, [r3, #28]
 8008a06:	2380      	movs	r3, #128	; 0x80
 8008a08:	041b      	lsls	r3, r3, #16
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008a10:	2200      	movs	r2, #0
 8008a12:	2100      	movs	r1, #0
 8008a14:	201f      	movs	r0, #31
 8008a16:	f000 ff33 	bl	8009880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008a1a:	201f      	movs	r0, #31
 8008a1c:	f000 ff45 	bl	80098aa <HAL_NVIC_EnableIRQ>

    hpcd->State = HAL_PCD_STATE_BUSY;
 8008a20:	4b9b      	ldr	r3, [pc, #620]	; (8008c90 <usb_init+0x328>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4aa0      	ldr	r2, [pc, #640]	; (8008ca8 <usb_init+0x340>)
 8008a26:	2103      	movs	r1, #3
 8008a28:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */

    mask = USB->CNTR;
 8008a2a:	499d      	ldr	r1, [pc, #628]	; (8008ca0 <usb_init+0x338>)
 8008a2c:	200a      	movs	r0, #10
 8008a2e:	183b      	adds	r3, r7, r0
 8008a30:	2240      	movs	r2, #64	; 0x40
 8008a32:	5a8a      	ldrh	r2, [r1, r2]
 8008a34:	801a      	strh	r2, [r3, #0]
    mask &= 0x003F;
 8008a36:	183b      	adds	r3, r7, r0
 8008a38:	183a      	adds	r2, r7, r0
 8008a3a:	8812      	ldrh	r2, [r2, #0]
 8008a3c:	213f      	movs	r1, #63	; 0x3f
 8008a3e:	400a      	ands	r2, r1
 8008a40:	801a      	strh	r2, [r3, #0]
    USB->CNTR = mask;
 8008a42:	4997      	ldr	r1, [pc, #604]	; (8008ca0 <usb_init+0x338>)
 8008a44:	183b      	adds	r3, r7, r0
 8008a46:	2240      	movs	r2, #64	; 0x40
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	528b      	strh	r3, [r1, r2]

    /* Init endpoints structures */
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e054      	b.n	8008afc <usb_init+0x194>
    {
        /* Init ep structure */
        hpcd->IN_ep[i].is_in = 1U;
 8008a52:	4b8f      	ldr	r3, [pc, #572]	; (8008c90 <usb_init+0x328>)
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	0013      	movs	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	189b      	adds	r3, r3, r2
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	18cb      	adds	r3, r1, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	2201      	movs	r2, #1
 8008a68:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].num = i;
 8008a6a:	4b89      	ldr	r3, [pc, #548]	; (8008c90 <usb_init+0x328>)
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	b2d8      	uxtb	r0, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	0013      	movs	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	1c02      	adds	r2, r0, #0
 8008a80:	545a      	strb	r2, [r3, r1]
        hpcd->IN_ep[i].tx_fifo_num = i;
 8008a82:	4b83      	ldr	r3, [pc, #524]	; (8008c90 <usb_init+0x328>)
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	b298      	uxth	r0, r3
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	0013      	movs	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	189b      	adds	r3, r3, r2
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	18cb      	adds	r3, r1, r3
 8008a96:	3336      	adds	r3, #54	; 0x36
 8008a98:	1c02      	adds	r2, r0, #0
 8008a9a:	801a      	strh	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a9c:	4b7c      	ldr	r3, [pc, #496]	; (8008c90 <usb_init+0x328>)
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	0013      	movs	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	189b      	adds	r3, r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	18cb      	adds	r3, r1, r3
 8008aae:	3303      	adds	r3, #3
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
        hpcd->IN_ep[i].maxpacket = 0U;
 8008ab4:	4b76      	ldr	r3, [pc, #472]	; (8008c90 <usb_init+0x328>)
 8008ab6:	6819      	ldr	r1, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	0013      	movs	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	189b      	adds	r3, r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	18cb      	adds	r3, r1, r3
 8008ac4:	3338      	adds	r3, #56	; 0x38
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_buff = 0U;
 8008aca:	4b71      	ldr	r3, [pc, #452]	; (8008c90 <usb_init+0x328>)
 8008acc:	6819      	ldr	r1, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	0013      	movs	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	189b      	adds	r3, r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	18cb      	adds	r3, r1, r3
 8008ada:	333c      	adds	r3, #60	; 0x3c
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
        hpcd->IN_ep[i].xfer_len = 0U;
 8008ae0:	4b6b      	ldr	r3, [pc, #428]	; (8008c90 <usb_init+0x328>)
 8008ae2:	6819      	ldr	r1, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	0013      	movs	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	18cb      	adds	r3, r1, r3
 8008af0:	3340      	adds	r3, #64	; 0x40
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	4b64      	ldr	r3, [pc, #400]	; (8008c90 <usb_init+0x328>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d3a4      	bcc.n	8008a52 <usb_init+0xea>
    }

    for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]
 8008b0c:	e054      	b.n	8008bb8 <usb_init+0x250>
    {
        hpcd->OUT_ep[i].is_in = 0U;
 8008b0e:	4b60      	ldr	r3, [pc, #384]	; (8008c90 <usb_init+0x328>)
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	236a      	movs	r3, #106	; 0x6a
 8008b16:	33ff      	adds	r3, #255	; 0xff
 8008b18:	0019      	movs	r1, r3
 8008b1a:	0013      	movs	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	18c3      	adds	r3, r0, r3
 8008b24:	185b      	adds	r3, r3, r1
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].num = i;
 8008b2a:	4b59      	ldr	r3, [pc, #356]	; (8008c90 <usb_init+0x328>)
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	b2dc      	uxtb	r4, r3
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	23b4      	movs	r3, #180	; 0xb4
 8008b36:	0059      	lsls	r1, r3, #1
 8008b38:	0013      	movs	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	189b      	adds	r3, r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	18c3      	adds	r3, r0, r3
 8008b42:	185b      	adds	r3, r3, r1
 8008b44:	1c22      	adds	r2, r4, #0
 8008b46:	701a      	strb	r2, [r3, #0]
        /* Control until ep is activated */
        hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b48:	4b51      	ldr	r3, [pc, #324]	; (8008c90 <usb_init+0x328>)
 8008b4a:	6818      	ldr	r0, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	236c      	movs	r3, #108	; 0x6c
 8008b50:	33ff      	adds	r3, #255	; 0xff
 8008b52:	0019      	movs	r1, r3
 8008b54:	0013      	movs	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	189b      	adds	r3, r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	18c3      	adds	r3, r0, r3
 8008b5e:	185b      	adds	r3, r3, r1
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
        hpcd->OUT_ep[i].maxpacket = 0U;
 8008b64:	4b4a      	ldr	r3, [pc, #296]	; (8008c90 <usb_init+0x328>)
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	23bc      	movs	r3, #188	; 0xbc
 8008b6c:	0059      	lsls	r1, r3, #1
 8008b6e:	0013      	movs	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	189b      	adds	r3, r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	18c3      	adds	r3, r0, r3
 8008b78:	185b      	adds	r3, r3, r1
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b7e:	4b44      	ldr	r3, [pc, #272]	; (8008c90 <usb_init+0x328>)
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	23be      	movs	r3, #190	; 0xbe
 8008b86:	0059      	lsls	r1, r3, #1
 8008b88:	0013      	movs	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	189b      	adds	r3, r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	18c3      	adds	r3, r0, r3
 8008b92:	185b      	adds	r3, r3, r1
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
        hpcd->OUT_ep[i].xfer_len = 0U;
 8008b98:	4b3d      	ldr	r3, [pc, #244]	; (8008c90 <usb_init+0x328>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	23c0      	movs	r3, #192	; 0xc0
 8008ba0:	0059      	lsls	r1, r3, #1
 8008ba2:	0013      	movs	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	18c3      	adds	r3, r0, r3
 8008bac:	185b      	adds	r3, r3, r1
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	4b35      	ldr	r3, [pc, #212]	; (8008c90 <usb_init+0x328>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d3a4      	bcc.n	8008b0e <usb_init+0x1a6>
    }


    /* CNTR_FRES = 1 */
    USB->CNTR = (uint16_t)USB_CNTR_FRES;
 8008bc4:	4a36      	ldr	r2, [pc, #216]	; (8008ca0 <usb_init+0x338>)
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	2101      	movs	r1, #1
 8008bca:	52d1      	strh	r1, [r2, r3]
    USB->CNTR = 0U;
 8008bcc:	4a34      	ldr	r2, [pc, #208]	; (8008ca0 <usb_init+0x338>)
 8008bce:	2340      	movs	r3, #64	; 0x40
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	52d1      	strh	r1, [r2, r3]
    USB->ISTR = 0U;
 8008bd4:	4a32      	ldr	r2, [pc, #200]	; (8008ca0 <usb_init+0x338>)
 8008bd6:	2344      	movs	r3, #68	; 0x44
 8008bd8:	2100      	movs	r1, #0
 8008bda:	52d1      	strh	r1, [r2, r3]
    USB->BTABLE = BTABLE_ADDRESS;
 8008bdc:	4a30      	ldr	r2, [pc, #192]	; (8008ca0 <usb_init+0x338>)
 8008bde:	2350      	movs	r3, #80	; 0x50
 8008be0:	2100      	movs	r1, #0
 8008be2:	52d1      	strh	r1, [r2, r3]

    hpcd->USB_Address = 0U;
 8008be4:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <usb_init+0x328>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2224      	movs	r2, #36	; 0x24
 8008bea:	2100      	movs	r1, #0
 8008bec:	5499      	strb	r1, [r3, r2]
    hpcd->State = HAL_PCD_STATE_READY;
 8008bee:	4b28      	ldr	r3, [pc, #160]	; (8008c90 <usb_init+0x328>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a2d      	ldr	r2, [pc, #180]	; (8008ca8 <usb_init+0x340>)
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]


    /* USER CODE BEGIN EndPoint_Configuration */
    pma_config(hpcd, 0x00 , 0x18);
 8008bf8:	4b25      	ldr	r3, [pc, #148]	; (8008c90 <usb_init+0x328>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2218      	movs	r2, #24
 8008bfe:	2100      	movs	r1, #0
 8008c00:	0018      	movs	r0, r3
 8008c02:	f000 f971 	bl	8008ee8 <pma_config>
    pma_config(hpcd, 0x80 , 0x58);
 8008c06:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <usb_init+0x328>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2258      	movs	r2, #88	; 0x58
 8008c0c:	2180      	movs	r1, #128	; 0x80
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 f96a 	bl	8008ee8 <pma_config>

    pma_config(hpcd, 0x81 , 0xC0);
 8008c14:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <usb_init+0x328>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	22c0      	movs	r2, #192	; 0xc0
 8008c1a:	2181      	movs	r1, #129	; 0x81
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 f963 	bl	8008ee8 <pma_config>
    pma_config(hpcd, 0x01 , 0x110);
 8008c22:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <usb_init+0x328>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2288      	movs	r2, #136	; 0x88
 8008c28:	0052      	lsls	r2, r2, #1
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 f95b 	bl	8008ee8 <pma_config>
    pma_config(hpcd, 0x82 , 0x100);
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <usb_init+0x328>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2280      	movs	r2, #128	; 0x80
 8008c38:	0052      	lsls	r2, r2, #1
 8008c3a:	2182      	movs	r1, #130	; 0x82
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f000 f953 	bl	8008ee8 <pma_config>


    pdev->pClass = (CLASS_CALLBACK_STRUC *)&usb_cdc_callbacks;
 8008c42:	4b11      	ldr	r3, [pc, #68]	; (8008c88 <usb_init+0x320>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	23ad      	movs	r3, #173	; 0xad
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4918      	ldr	r1, [pc, #96]	; (8008cac <usb_init+0x344>)
 8008c4c:	50d1      	str	r1, [r2, r3]
    pdev->pUserData = (CDCIFACE_CALLBACK_STRUC *)&usb_cdc_ifaces;
 8008c4e:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <usb_init+0x320>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	23af      	movs	r3, #175	; 0xaf
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4916      	ldr	r1, [pc, #88]	; (8008cb0 <usb_init+0x348>)
 8008c58:	50d1      	str	r1, [r2, r3]

/**
 * @brief  stolen from USBD_Start in usb_core.c
  */

    USB->ISTR = 0U;
 8008c5a:	4a11      	ldr	r2, [pc, #68]	; (8008ca0 <usb_init+0x338>)
 8008c5c:	2344      	movs	r3, #68	; 0x44
 8008c5e:	2100      	movs	r1, #0
 8008c60:	52d1      	strh	r1, [r2, r3]

    mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM |
 8008c62:	200a      	movs	r0, #10
 8008c64:	183b      	adds	r3, r7, r0
 8008c66:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <usb_init+0x34c>)
 8008c68:	801a      	strh	r2, [r3, #0]
           USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM | USB_CNTR_L1REQM;
    USB->CNTR = mask;
 8008c6a:	490d      	ldr	r1, [pc, #52]	; (8008ca0 <usb_init+0x338>)
 8008c6c:	183b      	adds	r3, r7, r0
 8008c6e:	2240      	movs	r2, #64	; 0x40
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	528b      	strh	r3, [r1, r2]
    USB->BCDR = USB_BCDR_DPPU;
 8008c74:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <usb_init+0x338>)
 8008c76:	2358      	movs	r3, #88	; 0x58
 8008c78:	490f      	ldr	r1, [pc, #60]	; (8008cb8 <usb_init+0x350>)
 8008c7a:	52d1      	strh	r1, [r2, r3]
    return;
 8008c7c:	46c0      	nop			; (mov r8, r8)
}
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b005      	add	sp, #20
 8008c82:	bd90      	pop	{r4, r7, pc}
 8008c84:	20001fa0 	.word	0x20001fa0
 8008c88:	20001014 	.word	0x20001014
 8008c8c:	20002ce4 	.word	0x20002ce4
 8008c90:	20001018 	.word	0x20001018
 8008c94:	200029f0 	.word	0x200029f0
 8008c98:	2000101c 	.word	0x2000101c
 8008c9c:	08017a3c 	.word	0x08017a3c
 8008ca0:	40005c00 	.word	0x40005c00
 8008ca4:	40021000 	.word	0x40021000
 8008ca8:	000002a9 	.word	0x000002a9
 8008cac:	08017a58 	.word	0x08017a58
 8008cb0:	08017a90 	.word	0x08017a90
 8008cb4:	ffffbf80 	.word	0xffffbf80
 8008cb8:	ffff8000 	.word	0xffff8000

08008cbc <usb_print_ih>:
 *
 * \return - none
 */

void usb_print_ih(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
    uint16_t intstat;

    intstat = USB->ISTR;
 8008cc2:	496a      	ldr	r1, [pc, #424]	; (8008e6c <usb_print_ih+0x1b0>)
 8008cc4:	1dbb      	adds	r3, r7, #6
 8008cc6:	2244      	movs	r2, #68	; 0x44
 8008cc8:	5a8a      	ldrh	r2, [r1, r2]
 8008cca:	801a      	strh	r2, [r3, #0]

    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */

    if (intstat & USB_ISTR_CTR)
 8008ccc:	1dbb      	adds	r3, r7, #6
 8008cce:	2200      	movs	r2, #0
 8008cd0:	5e9b      	ldrsh	r3, [r3, r2]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da03      	bge.n	8008cde <usb_print_ih+0x22>
    {
        PCD_EP_ISR_Handler(&usbpcdhandle);
 8008cd6:	4b66      	ldr	r3, [pc, #408]	; (8008e70 <usb_print_ih+0x1b4>)
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f001 fa2b 	bl	800a134 <PCD_EP_ISR_Handler>
    }

    if (intstat & USB_ISTR_RESET)
 8008cde:	1dbb      	adds	r3, r7, #6
 8008ce0:	881a      	ldrh	r2, [r3, #0]
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d050      	beq.n	8008d8c <usb_print_ih+0xd0>
    {
        intstat &= ~USB_ISTR_RESET;
 8008cea:	1dbb      	adds	r3, r7, #6
 8008cec:	1dba      	adds	r2, r7, #6
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	4960      	ldr	r1, [pc, #384]	; (8008e74 <usb_print_ih+0x1b8>)
 8008cf2:	400a      	ands	r2, r1
 8008cf4:	801a      	strh	r2, [r3, #0]
        USB->ISTR = intstat;
 8008cf6:	495d      	ldr	r1, [pc, #372]	; (8008e6c <usb_print_ih+0x1b0>)
 8008cf8:	1dbb      	adds	r3, r7, #6
 8008cfa:	2244      	movs	r2, #68	; 0x44
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	528b      	strh	r3, [r1, r2]
        pdev->dev_speed = PCD_SPEED_FULL;
 8008d00:	4b5d      	ldr	r3, [pc, #372]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2202      	movs	r2, #2
 8008d06:	741a      	strb	r2, [r3, #16]
        HAL_PCD_EP_Open(hpcd, 0x00, USB_MAX_EP0_SIZE, USBD_EP_TYPE_CTRL);
 8008d08:	4b5c      	ldr	r3, [pc, #368]	; (8008e7c <usb_print_ih+0x1c0>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2240      	movs	r2, #64	; 0x40
 8008d10:	2100      	movs	r1, #0
 8008d12:	f000 ffe5 	bl	8009ce0 <HAL_PCD_EP_Open>
        pdev->ep_out[0].is_used = 1U;
 8008d16:	4b58      	ldr	r3, [pc, #352]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	23ac      	movs	r3, #172	; 0xac
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	2101      	movs	r1, #1
 8008d20:	50d1      	str	r1, [r2, r3]
        pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d22:	4b55      	ldr	r3, [pc, #340]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	23b2      	movs	r3, #178	; 0xb2
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	2140      	movs	r1, #64	; 0x40
 8008d2c:	50d1      	str	r1, [r2, r3]

        HAL_PCD_EP_Open(hpcd, 0x80, USB_MAX_EP0_SIZE, USBD_EP_TYPE_CTRL);
 8008d2e:	4b53      	ldr	r3, [pc, #332]	; (8008e7c <usb_print_ih+0x1c0>)
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	2240      	movs	r2, #64	; 0x40
 8008d36:	2180      	movs	r1, #128	; 0x80
 8008d38:	f000 ffd2 	bl	8009ce0 <HAL_PCD_EP_Open>
        pdev->ep_in[0].is_used = 1U;
 8008d3c:	4b4e      	ldr	r3, [pc, #312]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2201      	movs	r2, #1
 8008d42:	619a      	str	r2, [r3, #24]
        pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d44:	4b4c      	ldr	r3, [pc, #304]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2240      	movs	r2, #64	; 0x40
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Upon Reset call user call back */
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4c:	4b4a      	ldr	r3, [pc, #296]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	23a7      	movs	r3, #167	; 0xa7
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	2101      	movs	r1, #1
 8008d56:	54d1      	strb	r1, [r2, r3]
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d58:	4b47      	ldr	r3, [pc, #284]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	23a5      	movs	r3, #165	; 0xa5
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	2100      	movs	r1, #0
 8008d62:	50d1      	str	r1, [r2, r3]
        pdev->dev_config = 0U;
 8008d64:	4b44      	ldr	r3, [pc, #272]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]
        pdev->dev_remote_wakeup = 0U;
 8008d6c:	4b42      	ldr	r3, [pc, #264]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	23a9      	movs	r3, #169	; 0xa9
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	2100      	movs	r1, #0
 8008d76:	50d1      	str	r1, [r2, r3]

        USBD_CDC_DeInit(pdev, 0);
 8008d78:	4b3f      	ldr	r3, [pc, #252]	; (8008e78 <usb_print_ih+0x1bc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f7ff fb58 	bl	8008434 <USBD_CDC_DeInit>
        USB->DADDR = USB_DADDR_EF;
 8008d84:	4a39      	ldr	r2, [pc, #228]	; (8008e6c <usb_print_ih+0x1b0>)
 8008d86:	234c      	movs	r3, #76	; 0x4c
 8008d88:	2180      	movs	r1, #128	; 0x80
 8008d8a:	52d1      	strh	r1, [r2, r3]
    }

    if (intstat & USB_ISTR_ERR)
 8008d8c:	1dbb      	adds	r3, r7, #6
 8008d8e:	881a      	ldrh	r2, [r3, #0]
 8008d90:	2380      	movs	r3, #128	; 0x80
 8008d92:	019b      	lsls	r3, r3, #6
 8008d94:	4013      	ands	r3, r2
 8008d96:	d00c      	beq.n	8008db2 <usb_print_ih+0xf6>
    {
        debug_print_ready = 0;
 8008d98:	4b39      	ldr	r3, [pc, #228]	; (8008e80 <usb_print_ih+0x1c4>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
        USB->CNTR &= 0x007F;
 8008d9e:	4a33      	ldr	r2, [pc, #204]	; (8008e6c <usb_print_ih+0x1b0>)
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	5ad3      	ldrh	r3, [r2, r3]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	4a31      	ldr	r2, [pc, #196]	; (8008e6c <usb_print_ih+0x1b0>)
 8008da8:	217f      	movs	r1, #127	; 0x7f
 8008daa:	400b      	ands	r3, r1
 8008dac:	b299      	uxth	r1, r3
 8008dae:	2340      	movs	r3, #64	; 0x40
 8008db0:	52d1      	strh	r1, [r2, r3]
    }

    if (intstat & USB_ISTR_WKUP)
 8008db2:	1dbb      	adds	r3, r7, #6
 8008db4:	881a      	ldrh	r2, [r3, #0]
 8008db6:	2380      	movs	r3, #128	; 0x80
 8008db8:	015b      	lsls	r3, r3, #5
 8008dba:	4013      	ands	r3, r2
 8008dbc:	d027      	beq.n	8008e0e <usb_print_ih+0x152>
    {
        USB->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008dbe:	4a2b      	ldr	r2, [pc, #172]	; (8008e6c <usb_print_ih+0x1b0>)
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	5ad3      	ldrh	r3, [r2, r3]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	4a29      	ldr	r2, [pc, #164]	; (8008e6c <usb_print_ih+0x1b0>)
 8008dc8:	2104      	movs	r1, #4
 8008dca:	438b      	bics	r3, r1
 8008dcc:	b299      	uxth	r1, r3
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	52d1      	strh	r1, [r2, r3]
        USB->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008dd2:	4a26      	ldr	r2, [pc, #152]	; (8008e6c <usb_print_ih+0x1b0>)
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	5ad3      	ldrh	r3, [r2, r3]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4a24      	ldr	r2, [pc, #144]	; (8008e6c <usb_print_ih+0x1b0>)
 8008ddc:	2108      	movs	r1, #8
 8008dde:	438b      	bics	r3, r1
 8008de0:	b299      	uxth	r1, r3
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	52d1      	strh	r1, [r2, r3]

        if (usbpcdhandle.LPM_State == LPM_L1)
 8008de6:	4a22      	ldr	r2, [pc, #136]	; (8008e70 <usb_print_ih+0x1b4>)
 8008de8:	23b8      	movs	r3, #184	; 0xb8
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	5cd3      	ldrb	r3, [r2, r3]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d10d      	bne.n	8008e0e <usb_print_ih+0x152>
        {
            usbpcdhandle.LPM_State = LPM_L0;
 8008df2:	4a1f      	ldr	r2, [pc, #124]	; (8008e70 <usb_print_ih+0x1b4>)
 8008df4:	23b8      	movs	r3, #184	; 0xb8
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	2100      	movs	r1, #0
 8008dfa:	54d1      	strb	r1, [r2, r3]

            HAL_PCDEx_LPM_Callback(&usbpcdhandle, PCD_LPM_L0_ACTIVE);
 8008dfc:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <usb_print_ih+0x1b4>)
 8008dfe:	2100      	movs	r1, #0
 8008e00:	0018      	movs	r0, r3
 8008e02:	f002 f8a1 	bl	800af48 <HAL_PCDEx_LPM_Callback>
            HAL_PCD_ResumeCallback(&usbpcdhandle);
 8008e06:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <usb_print_ih+0x1b4>)
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f007 ffa7 	bl	8010d5c <HAL_PCD_ResumeCallback>
        }

    }

    if (intstat & USB_ISTR_SUSP)
 8008e0e:	1dbb      	adds	r3, r7, #6
 8008e10:	881a      	ldrh	r2, [r3, #0]
 8008e12:	2380      	movs	r3, #128	; 0x80
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	4013      	ands	r3, r2
 8008e18:	d017      	beq.n	8008e4a <usb_print_ih+0x18e>
    {
        USB->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008e1a:	4a14      	ldr	r2, [pc, #80]	; (8008e6c <usb_print_ih+0x1b0>)
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	5ad3      	ldrh	r3, [r2, r3]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <usb_print_ih+0x1b0>)
 8008e24:	2108      	movs	r1, #8
 8008e26:	430b      	orrs	r3, r1
 8008e28:	b299      	uxth	r1, r3
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	52d1      	strh	r1, [r2, r3]
        USB->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008e2e:	4a0f      	ldr	r2, [pc, #60]	; (8008e6c <usb_print_ih+0x1b0>)
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	5ad3      	ldrh	r3, [r2, r3]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4a0d      	ldr	r2, [pc, #52]	; (8008e6c <usb_print_ih+0x1b0>)
 8008e38:	2104      	movs	r1, #4
 8008e3a:	430b      	orrs	r3, r1
 8008e3c:	b299      	uxth	r1, r3
 8008e3e:	2340      	movs	r3, #64	; 0x40
 8008e40:	52d1      	strh	r1, [r2, r3]
        HAL_PCD_SuspendCallback(&usbpcdhandle);
 8008e42:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <usb_print_ih+0x1b4>)
 8008e44:	0018      	movs	r0, r3
 8008e46:	f007 ff6d 	bl	8010d24 <HAL_PCD_SuspendCallback>
    }

  /* Handle LPM Interrupt */
    if (intstat & USB_ISTR_L1REQ)
 8008e4a:	1dbb      	adds	r3, r7, #6
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	2280      	movs	r2, #128	; 0x80
 8008e50:	4013      	ands	r3, r2
 8008e52:	d003      	beq.n	8008e5c <usb_print_ih+0x1a0>
            HAL_PCDEx_LPM_Callback(&usbpcdhandle, PCD_LPM_L1_ACTIVE);
        }

        else
        {
            HAL_PCD_SuspendCallback(&usbpcdhandle);
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <usb_print_ih+0x1b4>)
 8008e56:	0018      	movs	r0, r3
 8008e58:	f007 ff64 	bl	8010d24 <HAL_PCD_SuspendCallback>
    {
    }



    USB->ISTR = ~0x7F80;
 8008e5c:	4a03      	ldr	r2, [pc, #12]	; (8008e6c <usb_print_ih+0x1b0>)
 8008e5e:	2344      	movs	r3, #68	; 0x44
 8008e60:	4908      	ldr	r1, [pc, #32]	; (8008e84 <usb_print_ih+0x1c8>)
 8008e62:	52d1      	strh	r1, [r2, r3]
    return;
 8008e64:	46c0      	nop			; (mov r8, r8)
}
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	40005c00 	.word	0x40005c00
 8008e70:	200029f0 	.word	0x200029f0
 8008e74:	fffffbff 	.word	0xfffffbff
 8008e78:	20001014 	.word	0x20001014
 8008e7c:	20001018 	.word	0x20001018
 8008e80:	20001fa0 	.word	0x20001fa0
 8008e84:	ffff807f 	.word	0xffff807f

08008e88 <usb_write_fixed>:
 *
 * \return - none
 */

void usb_write_fixed(uint8_t *obuf, uint32_t len)
{
 8008e88:	b5b0      	push	{r4, r5, r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
    uint8_t stat;
    uint32_t wrtlen;
    uint32_t i;

    wrtlen = len;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	617b      	str	r3, [r7, #20]

    if (wrtlen > USB_MAX_BUF_LEN)
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	23af      	movs	r3, #175	; 0xaf
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d902      	bls.n	8008ea6 <usb_write_fixed+0x1e>
    {
        wrtlen = USB_MAX_BUF_LEN;
 8008ea0:	23af      	movs	r3, #175	; 0xaf
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
    }

    for (i = 0; i < 10; i++)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	e014      	b.n	8008ed6 <usb_write_fixed+0x4e>
    {
        stat = CDC_Transmit_FS(obuf, wrtlen);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	250f      	movs	r5, #15
 8008eb2:	197c      	adds	r4, r7, r5
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	0011      	movs	r1, r2
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7ff f9ff 	bl	80082bc <CDC_Transmit_FS>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	7023      	strb	r3, [r4, #0]

        if (stat != USBD_BUSY)
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d109      	bne.n	8008ede <usb_write_fixed+0x56>
        {
        	break;
        }

        HAL_Delay(20);
 8008eca:	2014      	movs	r0, #20
 8008ecc:	f000 fc08 	bl	80096e0 <HAL_Delay>
    for (i = 0; i < 10; i++)
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d9e7      	bls.n	8008eac <usb_write_fixed+0x24>
    }

    return;
 8008edc:	e000      	b.n	8008ee0 <usb_write_fixed+0x58>
        	break;
 8008ede:	46c0      	nop			; (mov r8, r8)
    return;
 8008ee0:	46c0      	nop			; (mov r8, r8)
}
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b006      	add	sp, #24
 8008ee6:	bdb0      	pop	{r4, r5, r7, pc}

08008ee8 <pma_config>:
 * Stolen from HAL_PCDEx_PMAConfig stm32f0xx_pcd_ex.c
 */

static void pma_config (PCD_HANDLE_STRUC *hpcd, uint16_t ep_addr, uint32_t pmaadress)

{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	200a      	movs	r0, #10
 8008ef4:	183b      	adds	r3, r7, r0
 8008ef6:	1c0a      	adds	r2, r1, #0
 8008ef8:	801a      	strh	r2, [r3, #0]
    ENDPOINT_STRUC *ep;

    /* initialize ep structure*/

    if ((0x80U & ep_addr) == 0x80U)
 8008efa:	0001      	movs	r1, r0
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	2280      	movs	r2, #128	; 0x80
 8008f02:	4013      	ands	r3, r2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00c      	beq.n	8008f24 <pma_config+0x3c>
    {
        ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	227f      	movs	r2, #127	; 0x7f
 8008f10:	4013      	ands	r3, r2
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	0013      	movs	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	189b      	adds	r3, r3, r2
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	18d3      	adds	r3, r2, r3
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	e00b      	b.n	8008f3c <pma_config+0x54>
    }

    else
    {
        ep = &hpcd->OUT_ep[ep_addr];
 8008f24:	230a      	movs	r3, #10
 8008f26:	18fb      	adds	r3, r7, r3
 8008f28:	881a      	ldrh	r2, [r3, #0]
 8008f2a:	0013      	movs	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	189b      	adds	r3, r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	3369      	adds	r3, #105	; 0x69
 8008f34:	33ff      	adds	r3, #255	; 0xff
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	18d3      	adds	r3, r2, r3
 8008f3a:	617b      	str	r3, [r7, #20]
    }

    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	80da      	strh	r2, [r3, #6]

  return;
 8008f4a:	46c0      	nop			; (mov r8, r8)
}
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b006      	add	sp, #24
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <sFLASH_CS_LOW>:
// write 1 - 256 bytes in a page
//pages can be erased in a group of 16 (1 sector, 4KB) , 0 - 15
//total 4096 sectors

void sFLASH_CS_LOW(void)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8008f56:	2390      	movs	r3, #144	; 0x90
 8008f58:	05db      	lsls	r3, r3, #23
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2110      	movs	r1, #16
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f000 fe76 	bl	8009c50 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
}
 8008f64:	46c0      	nop			; (mov r8, r8)
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8008f6e:	2390      	movs	r3, #144	; 0x90
 8008f70:	05db      	lsls	r3, r3, #23
 8008f72:	2201      	movs	r2, #1
 8008f74:	2110      	movs	r1, #16
 8008f76:	0018      	movs	r0, r3
 8008f78:	f000 fe6a 	bl	8009c50 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
}
 8008f7c:	46c0      	nop			; (mov r8, r8)
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <sFLASH_Init>:
 * return - none
 */


void sFLASH_Init(void)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initstruc;

    initstruc.Pin = FLASH_CS_Pin;
 8008f88:	1d3b      	adds	r3, r7, #4
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	601a      	str	r2, [r3, #0]
    initstruc.Mode = GPIO_MODE_OUTPUT_PP;
 8008f8e:	1d3b      	adds	r3, r7, #4
 8008f90:	2201      	movs	r2, #1
 8008f92:	605a      	str	r2, [r3, #4]
    initstruc.Pull = GPIO_NOPULL;
 8008f94:	1d3b      	adds	r3, r7, #4
 8008f96:	2200      	movs	r2, #0
 8008f98:	609a      	str	r2, [r3, #8]
    initstruc.Speed = GPIO_SPEED_FREQ_LOW;
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	60da      	str	r2, [r3, #12]
    initstruc.Alternate = 0;
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FLASH_CS_GPIO_Port, &initstruc);
 8008fa6:	1d3a      	adds	r2, r7, #4
 8008fa8:	2390      	movs	r3, #144	; 0x90
 8008faa:	05db      	lsls	r3, r3, #23
 8008fac:	0011      	movs	r1, r2
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f000 fcde 	bl	8009970 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8008fb4:	2390      	movs	r3, #144	; 0x90
 8008fb6:	05db      	lsls	r3, r3, #23
 8008fb8:	2201      	movs	r2, #1
 8008fba:	2110      	movs	r1, #16
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 fe47 	bl	8009c50 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8008fc2:	2002      	movs	r0, #2
 8008fc4:	f000 fb8c 	bl	80096e0 <HAL_Delay>

  sFLASH_CS_LOW();
 8008fc8:	f7ff ffc3 	bl	8008f52 <sFLASH_CS_LOW>
    sFLASH_SendByte(0x06);
 8008fcc:	2006      	movs	r0, #6
 8008fce:	f000 f8a3 	bl	8009118 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8008fd2:	f7ff ffca 	bl	8008f6a <sFLASH_CS_HIGH>

    sFLASH_CS_LOW();
 8008fd6:	f7ff ffbc 	bl	8008f52 <sFLASH_CS_LOW>
    sFLASH_SendByte(0x98);
 8008fda:	2098      	movs	r0, #152	; 0x98
 8008fdc:	f000 f89c 	bl	8009118 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8008fe0:	f7ff ffc3 	bl	8008f6a <sFLASH_CS_HIGH>
}
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b006      	add	sp, #24
 8008fea:	bd80      	pop	{r7, pc}

08008fec <sFLASH_EraseSector>:

//void sFLASH_EraseSector(uint32_t SectorAddr, _Bool page_erase)
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8008ff4:	f000 f8b6 	bl	8009164 <sFLASH_WriteEnable>

  /* Sector Erase */
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8008ff8:	f7ff ffab 	bl	8008f52 <sFLASH_CS_LOW>
  /* Send Sector Erase instruction */
//    if(page_erase)
        sFLASH_SendByte(sFLASH_CMD_SE); //4KB sector erase
 8008ffc:	2020      	movs	r0, #32
 8008ffe:	f000 f88b 	bl	8009118 <sFLASH_SendByte>
//    else
//        sFLASH_SendByte(sFLASH_CMD_QE);
  /* Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	0c1b      	lsrs	r3, r3, #16
 8009006:	b2db      	uxtb	r3, r3
 8009008:	0018      	movs	r0, r3
 800900a:	f000 f885 	bl	8009118 <sFLASH_SendByte>
  /* Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	0a1b      	lsrs	r3, r3, #8
 8009012:	b2db      	uxtb	r3, r3
 8009014:	0018      	movs	r0, r3
 8009016:	f000 f87f 	bl	8009118 <sFLASH_SendByte>
  /* Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	0018      	movs	r0, r3
 8009020:	f000 f87a 	bl	8009118 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8009024:	f7ff ffa1 	bl	8008f6a <sFLASH_CS_HIGH>

  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8009028:	f000 f8a8 	bl	800917c <sFLASH_WaitForWriteEnd>
}
 800902c:	46c0      	nop			; (mov r8, r8)
 800902e:	46bd      	mov	sp, r7
 8009030:	b002      	add	sp, #8
 8009032:	bd80      	pop	{r7, pc}

08009034 <sFLASH_EraseBulk>:

void sFLASH_EraseBulk(uint32_t addrs)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
    //total 512 erasable sectors, 512*4096 = 2097152 = last sector address
    for(addrs = addrs; addrs < 2097341; addrs+=4096)// addrs < LAST_FLASH_ADDR  copy value as per flash size , start from logs_start_address
 800903c:	e009      	b.n	8009052 <sFLASH_EraseBulk+0x1e>
    sFLASH_EraseSector(addrs);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	0018      	movs	r0, r3
 8009042:	f7ff ffd3 	bl	8008fec <sFLASH_EraseSector>
    for(addrs = addrs; addrs < 2097341; addrs+=4096)// addrs < LAST_FLASH_ADDR  copy value as per flash size , start from logs_start_address
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2280      	movs	r2, #128	; 0x80
 800904a:	0152      	lsls	r2, r2, #5
 800904c:	4694      	mov	ip, r2
 800904e:	4463      	add	r3, ip
 8009050:	607b      	str	r3, [r7, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a03      	ldr	r2, [pc, #12]	; (8009064 <sFLASH_EraseBulk+0x30>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d9f1      	bls.n	800903e <sFLASH_EraseBulk+0xa>
//  /* Deselect the FLASH: Chip Select high */
//  sFLASH_CS_HIGH();

//  /* Wait till the end of Flash writing */
//  sFLASH_WaitForWriteEnd();
}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	46c0      	nop			; (mov r8, r8)
 800905e:	46bd      	mov	sp, r7
 8009060:	b002      	add	sp, #8
 8009062:	bd80      	pop	{r7, pc}
 8009064:	002000bc 	.word	0x002000bc

08009068 <sFLASH_WriteByte>:
//{
//    sFLASH_WriteByte(WriteAddr, byte);
//}

void sFLASH_WriteByte(uint32_t WriteAddr, uint8_t data_byte)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	000a      	movs	r2, r1
 8009072:	1cfb      	adds	r3, r7, #3
 8009074:	701a      	strb	r2, [r3, #0]
  /* Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8009076:	f000 f875 	bl	8009164 <sFLASH_WriteEnable>
  /* Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800907a:	f7ff ff6a 	bl	8008f52 <sFLASH_CS_LOW>
  /* Send "Byte Program" instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800907e:	2002      	movs	r0, #2
 8009080:	f000 f84a 	bl	8009118 <sFLASH_SendByte>
  /* Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	b2db      	uxtb	r3, r3
 800908a:	0018      	movs	r0, r3
 800908c:	f000 f844 	bl	8009118 <sFLASH_SendByte>
  /* Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b2db      	uxtb	r3, r3
 8009096:	0018      	movs	r0, r3
 8009098:	f000 f83e 	bl	8009118 <sFLASH_SendByte>
  /* Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	0018      	movs	r0, r3
 80090a2:	f000 f839 	bl	8009118 <sFLASH_SendByte>
  /* Send the byte */
  sFLASH_SendByte(data_byte);
 80090a6:	1cfb      	adds	r3, r7, #3
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	0018      	movs	r0, r3
 80090ac:	f000 f834 	bl	8009118 <sFLASH_SendByte>
  /* Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80090b0:	f7ff ff5b 	bl	8008f6a <sFLASH_CS_HIGH>
  /* Wait till the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80090b4:	f000 f862 	bl	800917c <sFLASH_WaitForWriteEnd>
}
 80090b8:	46c0      	nop			; (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b002      	add	sp, #8
 80090be:	bd80      	pop	{r7, pc}

080090c0 <sFLASH_ReadByte1>:

//  sFLASH_CS_HIGH();
//}

uint8_t sFLASH_ReadByte1(uint32_t ReadAddr)
{
 80090c0:	b5b0      	push	{r4, r5, r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint8_t aaa=0;
 80090c8:	240f      	movs	r4, #15
 80090ca:	193b      	adds	r3, r7, r4
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
    sFLASH_CS_LOW();
 80090d0:	f7ff ff3f 	bl	8008f52 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_READ);
 80090d4:	2003      	movs	r0, #3
 80090d6:	f000 f81f 	bl	8009118 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	0018      	movs	r0, r3
 80090e2:	f000 f819 	bl	8009118 <sFLASH_SendByte>

  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	0a1b      	lsrs	r3, r3, #8
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	0018      	movs	r0, r3
 80090ee:	f000 f813 	bl	8009118 <sFLASH_SendByte>

  sFLASH_SendByte(ReadAddr & 0xFF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	0018      	movs	r0, r3
 80090f8:	f000 f80e 	bl	8009118 <sFLASH_SendByte>


    aaa = sFLASH_ReadByte();
 80090fc:	0025      	movs	r5, r4
 80090fe:	193c      	adds	r4, r7, r4
 8009100:	f000 f81c 	bl	800913c <sFLASH_ReadByte>
 8009104:	0003      	movs	r3, r0
 8009106:	7023      	strb	r3, [r4, #0]

  sFLASH_CS_HIGH();
 8009108:	f7ff ff2f 	bl	8008f6a <sFLASH_CS_HIGH>

    return aaa;
 800910c:	197b      	adds	r3, r7, r5
 800910e:	781b      	ldrb	r3, [r3, #0]

}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b004      	add	sp, #16
 8009116:	bdb0      	pop	{r4, r5, r7, pc}

08009118 <sFLASH_SendByte>:

  return (byte[0] << 16) | (byte[1] << 8) | byte[2];
}*/

void sFLASH_SendByte(uint8_t data_byte)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	0002      	movs	r2, r0
 8009120:	1dfb      	adds	r3, r7, #7
 8009122:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &data_byte, 1, 10);
 8009124:	1df9      	adds	r1, r7, #7
 8009126:	4804      	ldr	r0, [pc, #16]	; (8009138 <sFLASH_SendByte+0x20>)
 8009128:	230a      	movs	r3, #10
 800912a:	2201      	movs	r2, #1
 800912c:	f002 ff8e 	bl	800c04c <HAL_SPI_Transmit>
}
 8009130:	46c0      	nop			; (mov r8, r8)
 8009132:	46bd      	mov	sp, r7
 8009134:	b002      	add	sp, #8
 8009136:	bd80      	pop	{r7, pc}
 8009138:	200020a8 	.word	0x200020a8

0800913c <sFLASH_ReadByte>:

uint8_t sFLASH_ReadByte(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
  uint8_t mem_var=0;
 8009142:	1dfb      	adds	r3, r7, #7
 8009144:	2200      	movs	r2, #0
 8009146:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, &mem_var, 1, 10);
 8009148:	1df9      	adds	r1, r7, #7
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <sFLASH_ReadByte+0x24>)
 800914c:	230a      	movs	r3, #10
 800914e:	2201      	movs	r2, #1
 8009150:	f003 f8d4 	bl	800c2fc <HAL_SPI_Receive>
    return mem_var;
 8009154:	1dfb      	adds	r3, r7, #7
 8009156:	781b      	ldrb	r3, [r3, #0]
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b002      	add	sp, #8
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200020a8 	.word	0x200020a8

08009164 <sFLASH_WriteEnable>:

void sFLASH_WriteEnable(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	af00      	add	r7, sp, #0
  sFLASH_CS_LOW();
 8009168:	f7ff fef3 	bl	8008f52 <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WREN);
 800916c:	2006      	movs	r0, #6
 800916e:	f7ff ffd3 	bl	8009118 <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 8009172:	f7ff fefa 	bl	8008f6a <sFLASH_CS_HIGH>
}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <sFLASH_WaitForWriteEnd>:
  sFLASH_CS_HIGH();
}*/


void sFLASH_WaitForWriteEnd(void)
{
 800917c:	b590      	push	{r4, r7, lr}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]

    sFLASH_CS_LOW();
 8009188:	f7ff fee3 	bl	8008f52 <sFLASH_CS_LOW>

  sFLASH_SendByte(sFLASH_CMD_RDSR1);
 800918c:	2005      	movs	r0, #5
 800918e:	f7ff ffc3 	bl	8009118 <sFLASH_SendByte>

    flashstatus = sFLASH_ReadByte();
 8009192:	1dfc      	adds	r4, r7, #7
 8009194:	f7ff ffd2 	bl	800913c <sFLASH_ReadByte>
 8009198:	0003      	movs	r3, r0
 800919a:	7023      	strb	r3, [r4, #0]

  do
  {
    flashstatus = sFLASH_ReadByte();
 800919c:	1dfc      	adds	r4, r7, #7
 800919e:	f7ff ffcd 	bl	800913c <sFLASH_ReadByte>
 80091a2:	0003      	movs	r3, r0
 80091a4:	7023      	strb	r3, [r4, #0]
  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80091a6:	1dfb      	adds	r3, r7, #7
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2201      	movs	r2, #1
 80091ac:	4013      	ands	r3, r2
 80091ae:	d1f5      	bne.n	800919c <sFLASH_WaitForWriteEnd+0x20>

    sFLASH_CS_HIGH();
 80091b0:	f7ff fedb 	bl	8008f6a <sFLASH_CS_HIGH>
}
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b003      	add	sp, #12
 80091ba:	bd90      	pop	{r4, r7, pc}

080091bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091bc:	480d      	ldr	r0, [pc, #52]	; (80091f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c0:	480d      	ldr	r0, [pc, #52]	; (80091f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80091c2:	490e      	ldr	r1, [pc, #56]	; (80091fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80091c4:	4a0e      	ldr	r2, [pc, #56]	; (8009200 <LoopForever+0xe>)
  movs r3, #0
 80091c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091c8:	e002      	b.n	80091d0 <LoopCopyDataInit>

080091ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091ce:	3304      	adds	r3, #4

080091d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d4:	d3f9      	bcc.n	80091ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091d6:	4a0b      	ldr	r2, [pc, #44]	; (8009204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091d8:	4c0b      	ldr	r4, [pc, #44]	; (8009208 <LoopForever+0x16>)
  movs r3, #0
 80091da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091dc:	e001      	b.n	80091e2 <LoopFillZerobss>

080091de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e0:	3204      	adds	r2, #4

080091e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e4:	d3fb      	bcc.n	80091de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80091e6:	f7ff f813 	bl	8008210 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80091ea:	f007 ffd1 	bl	8011190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091ee:	f7fe f8a5 	bl	800733c <main>

080091f2 <LoopForever>:

LoopForever:
    b LoopForever
 80091f2:	e7fe      	b.n	80091f2 <LoopForever>
  ldr   r0, =_estack
 80091f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80091f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091fc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8009200:	08018368 	.word	0x08018368
  ldr r2, =_sbss
 8009204:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8009208:	200031c8 	.word	0x200031c8

0800920c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800920c:	e7fe      	b.n	800920c <ADC1_IRQHandler>
	...

08009210 <master_init>:
 *
 * return - none
 */

void master_init(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
    master_stmachine.sms_stable = (S_TABLE **)&state_table;
 8009214:	4b08      	ldr	r3, [pc, #32]	; (8009238 <master_init+0x28>)
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <master_init+0x2c>)
 8009218:	601a      	str	r2, [r3, #0]
    master_stmachine.sms_curstate = S_INIT;
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <master_init+0x28>)
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
    master_stmachine.sms_debug = &state_trace;
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <master_init+0x28>)
 8009222:	4a07      	ldr	r2, [pc, #28]	; (8009240 <master_init+0x30>)
 8009224:	609a      	str	r2, [r3, #8]
    oldstate = S_INIT;
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <master_init+0x34>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
    clockflag = 1;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <master_init+0x38>)
 800922e:	2201      	movs	r2, #1
 8009230:	701a      	strb	r2, [r3, #0]
    return;
 8009232:	46c0      	nop			; (mov r8, r8)
}
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20002fa8 	.word	0x20002fa8
 800923c:	08017fb0 	.word	0x08017fb0
 8009240:	080095d1 	.word	0x080095d1
 8009244:	20001028 	.word	0x20001028
 8009248:	20001020 	.word	0x20001020

0800924c <master_timer_ih>:
 *
 * return - none
 */

void master_timer_ih(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0

    if (timer)
 8009250:	4b06      	ldr	r3, [pc, #24]	; (800926c <master_timer_ih+0x20>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <master_timer_ih+0x18>
    {
        timer--;
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <master_timer_ih+0x20>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	1e5a      	subs	r2, r3, #1
 800925e:	4b03      	ldr	r3, [pc, #12]	; (800926c <master_timer_ih+0x20>)
 8009260:	601a      	str	r2, [r3, #0]
    }

    return;
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	46c0      	nop			; (mov r8, r8)
}
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	20001024 	.word	0x20001024

08009270 <e_always>:
 *                            --------
 *
 */

static uint32_t e_always(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
    return 1;
 8009274:	2301      	movs	r3, #1
}
 8009276:	0018      	movs	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <e_espapmode>:
 *                            ------------
 *
 */

static uint32_t e_espapmode(void)
{
 800927c:	b590      	push	{r4, r7, lr}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 8009282:	1dfc      	adds	r4, r7, #7
 8009284:	f7fa fc02 	bl	8003a8c <espat_answer>
 8009288:	0003      	movs	r3, r0
 800928a:	7023      	strb	r3, [r4, #0]
    return answer == CA_APMODE;
 800928c:	1dfb      	adds	r3, r7, #7
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	3b05      	subs	r3, #5
 8009292:	425a      	negs	r2, r3
 8009294:	4153      	adcs	r3, r2
 8009296:	b2db      	uxtb	r3, r3
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b003      	add	sp, #12
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <e_espconnected>:
 *                            ------------
 *
 */

static uint32_t e_espconnected(void)
{
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 80092a6:	1dfc      	adds	r4, r7, #7
 80092a8:	f7fa fbf0 	bl	8003a8c <espat_answer>
 80092ac:	0003      	movs	r3, r0
 80092ae:	7023      	strb	r3, [r4, #0]
    return answer == CA_CONNECTED;
 80092b0:	1dfb      	adds	r3, r7, #7
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	425a      	negs	r2, r3
 80092b8:	4153      	adcs	r3, r2
 80092ba:	b2db      	uxtb	r3, r3
}
 80092bc:	0018      	movs	r0, r3
 80092be:	46bd      	mov	sp, r7
 80092c0:	b003      	add	sp, #12
 80092c2:	bd90      	pop	{r4, r7, pc}

080092c4 <e_espnone>:
 *                            ------------
 *
 */

static uint32_t e_espnone(void)
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 80092ca:	1dfc      	adds	r4, r7, #7
 80092cc:	f7fa fbde 	bl	8003a8c <espat_answer>
 80092d0:	0003      	movs	r3, r0
 80092d2:	7023      	strb	r3, [r4, #0]
    return answer == CA_NONE;
 80092d4:	1dfb      	adds	r3, r7, #7
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	425a      	negs	r2, r3
 80092da:	4153      	adcs	r3, r2
 80092dc:	b2db      	uxtb	r3, r3
}
 80092de:	0018      	movs	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	b003      	add	sp, #12
 80092e4:	bd90      	pop	{r4, r7, pc}

080092e6 <e_espnotpowered>:
 *                            ------------
 *
 */

static uint32_t e_espnotpowered(void)
{
 80092e6:	b590      	push	{r4, r7, lr}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 80092ec:	1dfc      	adds	r4, r7, #7
 80092ee:	f7fa fbcd 	bl	8003a8c <espat_answer>
 80092f2:	0003      	movs	r3, r0
 80092f4:	7023      	strb	r3, [r4, #0]
    return answer == CA_NOTPOWERED;
 80092f6:	1dfb      	adds	r3, r7, #7
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	425a      	negs	r2, r3
 80092fe:	4153      	adcs	r3, r2
 8009300:	b2db      	uxtb	r3, r3
}
 8009302:	0018      	movs	r0, r3
 8009304:	46bd      	mov	sp, r7
 8009306:	b003      	add	sp, #12
 8009308:	bd90      	pop	{r4, r7, pc}

0800930a <e_esppaired>:
 *                            ------------
 *
 */

static uint32_t e_esppaired(void)
{
 800930a:	b590      	push	{r4, r7, lr}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 8009310:	1dfc      	adds	r4, r7, #7
 8009312:	f7fa fbbb 	bl	8003a8c <espat_answer>
 8009316:	0003      	movs	r3, r0
 8009318:	7023      	strb	r3, [r4, #0]
    return answer == CA_PAIRED;
 800931a:	1dfb      	adds	r3, r7, #7
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	3b06      	subs	r3, #6
 8009320:	425a      	negs	r2, r3
 8009322:	4153      	adcs	r3, r2
 8009324:	b2db      	uxtb	r3, r3
}
 8009326:	0018      	movs	r0, r3
 8009328:	46bd      	mov	sp, r7
 800932a:	b003      	add	sp, #12
 800932c:	bd90      	pop	{r4, r7, pc}

0800932e <e_esppowered>:
 *                            ------------
 *
 */

static uint32_t e_esppowered(void)
{
 800932e:	b590      	push	{r4, r7, lr}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = espat_answer();
 8009334:	1dfc      	adds	r4, r7, #7
 8009336:	f7fa fba9 	bl	8003a8c <espat_answer>
 800933a:	0003      	movs	r3, r0
 800933c:	7023      	strb	r3, [r4, #0]
    return answer == CA_POWERED;
 800933e:	1dfb      	adds	r3, r7, #7
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	3b03      	subs	r3, #3
 8009344:	425a      	negs	r2, r3
 8009346:	4153      	adcs	r3, r2
 8009348:	b2db      	uxtb	r3, r3
}
 800934a:	0018      	movs	r0, r3
 800934c:	46bd      	mov	sp, r7
 800934e:	b003      	add	sp, #12
 8009350:	bd90      	pop	{r4, r7, pc}
	...

08009354 <e_gotrecs>:
 *                            ------------
 *
 */

static uint32_t e_gotrecs(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
    return mem_read_address != mem_write_address;
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <e_gotrecs+0x1c>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <e_gotrecs+0x20>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	4193      	sbcs	r3, r2
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	2000000c 	.word	0x2000000c
 8009374:	20000008 	.word	0x20000008

08009378 <e_qbadcfg>:
 *                            ------------
 *
 */

static uint32_t e_qbadcfg(void)
{
 8009378:	b590      	push	{r4, r7, lr}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = gsm_answer();
 800937e:	1dfc      	adds	r4, r7, #7
 8009380:	f7fb fddc 	bl	8004f3c <gsm_answer>
 8009384:	0003      	movs	r3, r0
 8009386:	7023      	strb	r3, [r4, #0]
    return answer == CA_BADCONFIG;
 8009388:	1dfb      	adds	r3, r7, #7
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	3b09      	subs	r3, #9
 800938e:	425a      	negs	r2, r3
 8009390:	4153      	adcs	r3, r2
 8009392:	b2db      	uxtb	r3, r3
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b003      	add	sp, #12
 800939a:	bd90      	pop	{r4, r7, pc}

0800939c <e_qconnected>:
 *                            ------------
 *
 */

static uint32_t e_qconnected(void)
{
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = gsm_answer();
 80093a2:	1dfc      	adds	r4, r7, #7
 80093a4:	f7fb fdca 	bl	8004f3c <gsm_answer>
 80093a8:	0003      	movs	r3, r0
 80093aa:	7023      	strb	r3, [r4, #0]
    return answer == CA_CONNECTED;
 80093ac:	1dfb      	adds	r3, r7, #7
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	3b04      	subs	r3, #4
 80093b2:	425a      	negs	r2, r3
 80093b4:	4153      	adcs	r3, r2
 80093b6:	b2db      	uxtb	r3, r3
}
 80093b8:	0018      	movs	r0, r3
 80093ba:	46bd      	mov	sp, r7
 80093bc:	b003      	add	sp, #12
 80093be:	bd90      	pop	{r4, r7, pc}

080093c0 <e_qinprogress>:
 *                            ------------
 *
 */

static uint32_t e_qinprogress(void)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = gsm_answer();
 80093c6:	1dfc      	adds	r4, r7, #7
 80093c8:	f7fb fdb8 	bl	8004f3c <gsm_answer>
 80093cc:	0003      	movs	r3, r0
 80093ce:	7023      	strb	r3, [r4, #0]
    return answer == CA_INPROGRESS;
 80093d0:	1dfb      	adds	r3, r7, #7
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	3b02      	subs	r3, #2
 80093d6:	425a      	negs	r2, r3
 80093d8:	4153      	adcs	r3, r2
 80093da:	b2db      	uxtb	r3, r3
}
 80093dc:	0018      	movs	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	b003      	add	sp, #12
 80093e2:	bd90      	pop	{r4, r7, pc}

080093e4 <e_qnopower>:
 *                            ------------
 *
 */

static uint32_t e_qnopower(void)
{
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = gsm_answer();
 80093ea:	1dfc      	adds	r4, r7, #7
 80093ec:	f7fb fda6 	bl	8004f3c <gsm_answer>
 80093f0:	0003      	movs	r3, r0
 80093f2:	7023      	strb	r3, [r4, #0]
    return answer == CA_NOTPOWERED;
 80093f4:	1dfb      	adds	r3, r7, #7
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	425a      	negs	r2, r3
 80093fc:	4153      	adcs	r3, r2
 80093fe:	b2db      	uxtb	r3, r3
}
 8009400:	0018      	movs	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	b003      	add	sp, #12
 8009406:	bd90      	pop	{r4, r7, pc}

08009408 <e_qpowered>:
 *                            ------------
 *
 */

static uint32_t e_qpowered(void)
{
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
    uint8_t answer;

    answer = gsm_answer();
 800940e:	1dfc      	adds	r4, r7, #7
 8009410:	f7fb fd94 	bl	8004f3c <gsm_answer>
 8009414:	0003      	movs	r3, r0
 8009416:	7023      	strb	r3, [r4, #0]
    return answer == CA_POWERED;
 8009418:	1dfb      	adds	r3, r7, #7
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	3b03      	subs	r3, #3
 800941e:	425a      	negs	r2, r3
 8009420:	4153      	adcs	r3, r2
 8009422:	b2db      	uxtb	r3, r3
}
 8009424:	0018      	movs	r0, r3
 8009426:	46bd      	mov	sp, r7
 8009428:	b003      	add	sp, #12
 800942a:	bd90      	pop	{r4, r7, pc}

0800942c <e_timeout>:
 *                            ---------
 *
 */

static uint32_t e_timeout(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0

    if (timer == 0)
 8009430:	4b04      	ldr	r3, [pc, #16]	; (8009444 <e_timeout+0x18>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <e_timeout+0x10>
    {
        return 1;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <e_timeout+0x12>
    }

    return 0;
 800943c:	2300      	movs	r3, #0
}
 800943e:	0018      	movs	r0, r3
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	20001024 	.word	0x20001024

08009448 <a_clrfetchf>:
 *                               ---------
 *
 */

static void a_clrfetchf(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
    fetching_readings = 0;
 800944c:	4b02      	ldr	r3, [pc, #8]	; (8009458 <a_clrfetchf+0x10>)
 800944e:	2200      	movs	r2, #0
 8009450:	701a      	strb	r2, [r3, #0]
    return;
 8009452:	46c0      	nop			; (mov r8, r8)
}
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20001f98 	.word	0x20001f98

0800945c <a_clrsendf>:
 *                               ---------
 *
 */

static void a_clrsendf(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
    sending_readings = 0;
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <a_clrsendf+0x10>)
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
    return;
 8009466:	46c0      	nop			; (mov r8, r8)
}
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20001d2c 	.word	0x20001d2c

08009470 <a_espapmode>:
 *                               ---------
 *
 */

static void a_espapmode(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
    espat_request(CR_APMODE);
 8009474:	2004      	movs	r0, #4
 8009476:	f7fa fb6d 	bl	8003b54 <espat_request>
    return;
 800947a:	46c0      	nop			; (mov r8, r8)
}
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <a_espconnect>:
 *                               ---------
 *
 */

static void a_espconnect(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
    espat_request(CR_CONNECT);
 8009484:	2003      	movs	r0, #3
 8009486:	f7fa fb65 	bl	8003b54 <espat_request>
    return;
 800948a:	46c0      	nop			; (mov r8, r8)
}
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <a_espgetrdgs>:
 *                               ---------
 *
 */

static void a_espgetrdgs(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
    espat_request(CR_SENDRECORDS);
 8009494:	2007      	movs	r0, #7
 8009496:	f7fa fb5d 	bl	8003b54 <espat_request>
    return;
 800949a:	46c0      	nop			; (mov r8, r8)
}
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <a_esppdown>:
 *                               ---------
 *
 */

static void a_esppdown(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
    espat_request(CR_POWERDOWN);
 80094a4:	2002      	movs	r0, #2
 80094a6:	f7fa fb55 	bl	8003b54 <espat_request>
    return;
 80094aa:	46c0      	nop			; (mov r8, r8)
}
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <a_esppup>:
 *                               ---------
 *
 */

static void a_esppup(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
    espat_request(CR_POWERUP);
 80094b4:	2001      	movs	r0, #1
 80094b6:	f7fa fb4d 	bl	8003b54 <espat_request>
    return;
 80094ba:	46c0      	nop			; (mov r8, r8)
}
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <a_nop>:
 *                               -----
 *
 */

static void a_nop(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	af00      	add	r7, sp, #0
    return;
 80094c4:	46c0      	nop			; (mov r8, r8)
}
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <a_qclock>:
 *                               ---------
 *
 */

static void a_qclock(void)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	af00      	add	r7, sp, #0
    gsm_request(CR_CLOCK);
 80094ce:	2006      	movs	r0, #6
 80094d0:	f7fb fd62 	bl	8004f98 <gsm_request>
    return;
 80094d4:	46c0      	nop			; (mov r8, r8)
}
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <a_qconnect>:
 *                               ---------
 *
 */

static void a_qconnect(void)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	af00      	add	r7, sp, #0
    gsm_request(CR_CONNECT);
 80094de:	2003      	movs	r0, #3
 80094e0:	f7fb fd5a 	bl	8004f98 <gsm_request>
    return;
 80094e4:	46c0      	nop			; (mov r8, r8)
}
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <a_qdisconn>:
 *                               ---------
 *
 */

static void a_qdisconn(void)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	af00      	add	r7, sp, #0
    gsm_request(CR_DISCONNECT);
 80094ee:	200b      	movs	r0, #11
 80094f0:	f7fb fd52 	bl	8004f98 <gsm_request>
    return;
 80094f4:	46c0      	nop			; (mov r8, r8)
}
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <a_qpdn>:
 *                               ---------
 *
 */

static void a_qpdn(void)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	af00      	add	r7, sp, #0
    gsm_request(CR_POWERDOWN);
 80094fe:	2002      	movs	r0, #2
 8009500:	f7fb fd4a 	bl	8004f98 <gsm_request>
    return;
 8009504:	46c0      	nop			; (mov r8, r8)
}
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <a_qping>:
 *                               ---------
 *
 */

static void a_qping(void)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	af00      	add	r7, sp, #0
    gsm_request(CR_PING);
 800950e:	2005      	movs	r0, #5
 8009510:	f7fb fd42 	bl	8004f98 <gsm_request>
    return;
 8009514:	46c0      	nop			; (mov r8, r8)
}
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <a_qpup>:
 *                               ---------
 *
 */

static void a_qpup(void)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	af00      	add	r7, sp, #0
    gsm_request(CR_POWERUP);
 800951e:	2001      	movs	r0, #1
 8009520:	f7fb fd3a 	bl	8004f98 <gsm_request>
    return;
 8009524:	46c0      	nop			; (mov r8, r8)
}
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <a_qrdtwin>:
 *                               ---------
 *
 */

static void a_qrdtwin(void)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	af00      	add	r7, sp, #0
    gsm_request(CR_RDTWIN);
 800952e:	2008      	movs	r0, #8
 8009530:	f7fb fd32 	bl	8004f98 <gsm_request>
    return;
 8009534:	46c0      	nop			; (mov r8, r8)
}
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <a_qsendrecs>:
 *                               ---------
 *
 */

static void a_qsendrecs(void)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	af00      	add	r7, sp, #0
    gsm_request(CR_SENDRECORDS);
 800953e:	2007      	movs	r0, #7
 8009540:	f7fb fd2a 	bl	8004f98 <gsm_request>
    return;
 8009544:	46c0      	nop			; (mov r8, r8)
}
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <a_qupdcfg>:
 *                               ---------
 *
 */

static void a_qupdcfg(void)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	af00      	add	r7, sp, #0
    gsm_request(CR_UPDCONFIG);
 800954e:	2009      	movs	r0, #9
 8009550:	f7fb fd22 	bl	8004f98 <gsm_request>
    return;
 8009554:	46c0      	nop			; (mov r8, r8)
}
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <a_qupdtwin>:
 *                               ---------
 *
 */

static void a_qupdtwin(void)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	af00      	add	r7, sp, #0
    gsm_request(CR_UPDTWIN);
 800955e:	200a      	movs	r0, #10
 8009560:	f7fb fd1a 	bl	8004f98 <gsm_request>
    return;
 8009564:	46c0      	nop			; (mov r8, r8)
}
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <a_setfetchf>:
 *                               ---------
 *
 */

static void a_setfetchf(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
    fetching_readings = 1;
 8009570:	4b02      	ldr	r3, [pc, #8]	; (800957c <a_setfetchf+0x10>)
 8009572:	2201      	movs	r2, #1
 8009574:	701a      	strb	r2, [r3, #0]
    return;
 8009576:	46c0      	nop			; (mov r8, r8)
}
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20001f98 	.word	0x20001f98

08009580 <a_setsendf>:
 *                               ---------
 *
 */

static void a_setsendf(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
    sending_readings = 1;
 8009584:	4b02      	ldr	r3, [pc, #8]	; (8009590 <a_setsendf+0x10>)
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
    return;
 800958a:	46c0      	nop			; (mov r8, r8)
}
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20001d2c 	.word	0x20001d2c

08009594 <a_tmr120>:
 *                               -----
 *
 */

static void a_tmr120(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
    timer = 120000;
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <a_tmr120+0x10>)
 800959a:	4a03      	ldr	r2, [pc, #12]	; (80095a8 <a_tmr120+0x14>)
 800959c:	601a      	str	r2, [r3, #0]
    return;
 800959e:	46c0      	nop			; (mov r8, r8)
}
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	20001024 	.word	0x20001024
 80095a8:	0001d4c0 	.word	0x0001d4c0

080095ac <a_tmr5min>:
 *                               -----
 *
 */

static void a_tmr5min(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
    timer = 1000*60*5;
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <a_tmr5min+0x18>)
 80095b2:	4a05      	ldr	r2, [pc, #20]	; (80095c8 <a_tmr5min+0x1c>)
 80095b4:	601a      	str	r2, [r3, #0]
    timer = 1000*60*3;
 80095b6:	4b03      	ldr	r3, [pc, #12]	; (80095c4 <a_tmr5min+0x18>)
 80095b8:	4a04      	ldr	r2, [pc, #16]	; (80095cc <a_tmr5min+0x20>)
 80095ba:	601a      	str	r2, [r3, #0]
    return;
 80095bc:	46c0      	nop			; (mov r8, r8)
}
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	46c0      	nop			; (mov r8, r8)
 80095c4:	20001024 	.word	0x20001024
 80095c8:	000493e0 	.word	0x000493e0
 80095cc:	0002bf20 	.word	0x0002bf20

080095d0 <state_trace>:
 *
 * return - none
 */

static void state_trace(uint32_t evnum)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	6078      	str	r0, [r7, #4]

    if (master_stmachine.sms_curstate != oldstate)
 80095d8:	4b0c      	ldr	r3, [pc, #48]	; (800960c <state_trace+0x3c>)
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <state_trace+0x40>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d00a      	beq.n	80095fa <state_trace+0x2a>
    {
        debug_printf(DBGLVL_MAX, (uint8_t *)"MASTER STATE: %u -> %u, EVENT %u\r\n", oldstate, master_stmachine.sms_curstate, evnum);
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <state_trace+0x40>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	4b08      	ldr	r3, [pc, #32]	; (800960c <state_trace+0x3c>)
 80095ea:	6858      	ldr	r0, [r3, #4]
 80095ec:	4909      	ldr	r1, [pc, #36]	; (8009614 <state_trace+0x44>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	0003      	movs	r3, r0
 80095f4:	2004      	movs	r0, #4
 80095f6:	f7f9 f8ad 	bl	8002754 <debug_printf>
    }

    oldstate = master_stmachine.sms_curstate;
 80095fa:	4b04      	ldr	r3, [pc, #16]	; (800960c <state_trace+0x3c>)
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	4b04      	ldr	r3, [pc, #16]	; (8009610 <state_trace+0x40>)
 8009600:	601a      	str	r2, [r3, #0]
    return;
 8009602:	46c0      	nop			; (mov r8, r8)
}
 8009604:	46bd      	mov	sp, r7
 8009606:	b002      	add	sp, #8
 8009608:	bd80      	pop	{r7, pc}
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	20002fa8 	.word	0x20002fa8
 8009610:	20001028 	.word	0x20001028
 8009614:	08013c60 	.word	0x08013c60

08009618 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800961c:	4b07      	ldr	r3, [pc, #28]	; (800963c <HAL_Init+0x24>)
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <HAL_Init+0x24>)
 8009622:	2110      	movs	r1, #16
 8009624:	430a      	orrs	r2, r1
 8009626:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8009628:	2000      	movs	r0, #0
 800962a:	f000 f809 	bl	8009640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800962e:	f7fe fc3b 	bl	8007ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	0018      	movs	r0, r3
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	40022000 	.word	0x40022000

08009640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009648:	4b14      	ldr	r3, [pc, #80]	; (800969c <HAL_InitTick+0x5c>)
 800964a:	681c      	ldr	r4, [r3, #0]
 800964c:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <HAL_InitTick+0x60>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	0019      	movs	r1, r3
 8009652:	23fa      	movs	r3, #250	; 0xfa
 8009654:	0098      	lsls	r0, r3, #2
 8009656:	f7f6 fd73 	bl	8000140 <__udivsi3>
 800965a:	0003      	movs	r3, r0
 800965c:	0019      	movs	r1, r3
 800965e:	0020      	movs	r0, r4
 8009660:	f7f6 fd6e 	bl	8000140 <__udivsi3>
 8009664:	0003      	movs	r3, r0
 8009666:	0018      	movs	r0, r3
 8009668:	f000 f92f 	bl	80098ca <HAL_SYSTICK_Config>
 800966c:	1e03      	subs	r3, r0, #0
 800966e:	d001      	beq.n	8009674 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e00f      	b.n	8009694 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b03      	cmp	r3, #3
 8009678:	d80b      	bhi.n	8009692 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	2301      	movs	r3, #1
 800967e:	425b      	negs	r3, r3
 8009680:	2200      	movs	r2, #0
 8009682:	0018      	movs	r0, r3
 8009684:	f000 f8fc 	bl	8009880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009688:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <HAL_InitTick+0x64>)
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e000      	b.n	8009694 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
}
 8009694:	0018      	movs	r0, r3
 8009696:	46bd      	mov	sp, r7
 8009698:	b003      	add	sp, #12
 800969a:	bd90      	pop	{r4, r7, pc}
 800969c:	20000014 	.word	0x20000014
 80096a0:	200000f4 	.word	0x200000f4
 80096a4:	200000f0 	.word	0x200000f0

080096a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <HAL_IncTick+0x1c>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	001a      	movs	r2, r3
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <HAL_IncTick+0x20>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	18d2      	adds	r2, r2, r3
 80096b8:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <HAL_IncTick+0x20>)
 80096ba:	601a      	str	r2, [r3, #0]
}
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	200000f4 	.word	0x200000f4
 80096c8:	20002fb4 	.word	0x20002fb4

080096cc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  return uwTick;
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <HAL_GetTick+0x10>)
 80096d2:	681b      	ldr	r3, [r3, #0]
}
 80096d4:	0018      	movs	r0, r3
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	20002fb4 	.word	0x20002fb4

080096e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80096e8:	f7ff fff0 	bl	80096cc <HAL_GetTick>
 80096ec:	0003      	movs	r3, r0
 80096ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3301      	adds	r3, #1
 80096f8:	d005      	beq.n	8009706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80096fa:	4b0a      	ldr	r3, [pc, #40]	; (8009724 <HAL_Delay+0x44>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	001a      	movs	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	189b      	adds	r3, r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	f7ff ffe0 	bl	80096cc <HAL_GetTick>
 800970c:	0002      	movs	r2, r0
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	429a      	cmp	r2, r3
 8009716:	d8f7      	bhi.n	8009708 <HAL_Delay+0x28>
  {
  }
}
 8009718:	46c0      	nop			; (mov r8, r8)
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	46bd      	mov	sp, r7
 800971e:	b004      	add	sp, #16
 8009720:	bd80      	pop	{r7, pc}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	200000f4 	.word	0x200000f4

08009728 <__NVIC_EnableIRQ>:
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	0002      	movs	r2, r0
 8009730:	1dfb      	adds	r3, r7, #7
 8009732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009734:	1dfb      	adds	r3, r7, #7
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b7f      	cmp	r3, #127	; 0x7f
 800973a:	d809      	bhi.n	8009750 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800973c:	1dfb      	adds	r3, r7, #7
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	001a      	movs	r2, r3
 8009742:	231f      	movs	r3, #31
 8009744:	401a      	ands	r2, r3
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <__NVIC_EnableIRQ+0x30>)
 8009748:	2101      	movs	r1, #1
 800974a:	4091      	lsls	r1, r2
 800974c:	000a      	movs	r2, r1
 800974e:	601a      	str	r2, [r3, #0]
}
 8009750:	46c0      	nop			; (mov r8, r8)
 8009752:	46bd      	mov	sp, r7
 8009754:	b002      	add	sp, #8
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000e100 	.word	0xe000e100

0800975c <__NVIC_SetPriority>:
{
 800975c:	b590      	push	{r4, r7, lr}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	0002      	movs	r2, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	1dfb      	adds	r3, r7, #7
 8009768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800976a:	1dfb      	adds	r3, r7, #7
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b7f      	cmp	r3, #127	; 0x7f
 8009770:	d828      	bhi.n	80097c4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009772:	4a2f      	ldr	r2, [pc, #188]	; (8009830 <__NVIC_SetPriority+0xd4>)
 8009774:	1dfb      	adds	r3, r7, #7
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	b25b      	sxtb	r3, r3
 800977a:	089b      	lsrs	r3, r3, #2
 800977c:	33c0      	adds	r3, #192	; 0xc0
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	589b      	ldr	r3, [r3, r2]
 8009782:	1dfa      	adds	r2, r7, #7
 8009784:	7812      	ldrb	r2, [r2, #0]
 8009786:	0011      	movs	r1, r2
 8009788:	2203      	movs	r2, #3
 800978a:	400a      	ands	r2, r1
 800978c:	00d2      	lsls	r2, r2, #3
 800978e:	21ff      	movs	r1, #255	; 0xff
 8009790:	4091      	lsls	r1, r2
 8009792:	000a      	movs	r2, r1
 8009794:	43d2      	mvns	r2, r2
 8009796:	401a      	ands	r2, r3
 8009798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	019b      	lsls	r3, r3, #6
 800979e:	22ff      	movs	r2, #255	; 0xff
 80097a0:	401a      	ands	r2, r3
 80097a2:	1dfb      	adds	r3, r7, #7
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	0018      	movs	r0, r3
 80097a8:	2303      	movs	r3, #3
 80097aa:	4003      	ands	r3, r0
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097b0:	481f      	ldr	r0, [pc, #124]	; (8009830 <__NVIC_SetPriority+0xd4>)
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	b25b      	sxtb	r3, r3
 80097b8:	089b      	lsrs	r3, r3, #2
 80097ba:	430a      	orrs	r2, r1
 80097bc:	33c0      	adds	r3, #192	; 0xc0
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	501a      	str	r2, [r3, r0]
}
 80097c2:	e031      	b.n	8009828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097c4:	4a1b      	ldr	r2, [pc, #108]	; (8009834 <__NVIC_SetPriority+0xd8>)
 80097c6:	1dfb      	adds	r3, r7, #7
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	0019      	movs	r1, r3
 80097cc:	230f      	movs	r3, #15
 80097ce:	400b      	ands	r3, r1
 80097d0:	3b08      	subs	r3, #8
 80097d2:	089b      	lsrs	r3, r3, #2
 80097d4:	3306      	adds	r3, #6
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	18d3      	adds	r3, r2, r3
 80097da:	3304      	adds	r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	1dfa      	adds	r2, r7, #7
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	0011      	movs	r1, r2
 80097e4:	2203      	movs	r2, #3
 80097e6:	400a      	ands	r2, r1
 80097e8:	00d2      	lsls	r2, r2, #3
 80097ea:	21ff      	movs	r1, #255	; 0xff
 80097ec:	4091      	lsls	r1, r2
 80097ee:	000a      	movs	r2, r1
 80097f0:	43d2      	mvns	r2, r2
 80097f2:	401a      	ands	r2, r3
 80097f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	019b      	lsls	r3, r3, #6
 80097fa:	22ff      	movs	r2, #255	; 0xff
 80097fc:	401a      	ands	r2, r3
 80097fe:	1dfb      	adds	r3, r7, #7
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	0018      	movs	r0, r3
 8009804:	2303      	movs	r3, #3
 8009806:	4003      	ands	r3, r0
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800980c:	4809      	ldr	r0, [pc, #36]	; (8009834 <__NVIC_SetPriority+0xd8>)
 800980e:	1dfb      	adds	r3, r7, #7
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	001c      	movs	r4, r3
 8009814:	230f      	movs	r3, #15
 8009816:	4023      	ands	r3, r4
 8009818:	3b08      	subs	r3, #8
 800981a:	089b      	lsrs	r3, r3, #2
 800981c:	430a      	orrs	r2, r1
 800981e:	3306      	adds	r3, #6
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	18c3      	adds	r3, r0, r3
 8009824:	3304      	adds	r3, #4
 8009826:	601a      	str	r2, [r3, #0]
}
 8009828:	46c0      	nop			; (mov r8, r8)
 800982a:	46bd      	mov	sp, r7
 800982c:	b003      	add	sp, #12
 800982e:	bd90      	pop	{r4, r7, pc}
 8009830:	e000e100 	.word	0xe000e100
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	1e5a      	subs	r2, r3, #1
 8009844:	2380      	movs	r3, #128	; 0x80
 8009846:	045b      	lsls	r3, r3, #17
 8009848:	429a      	cmp	r2, r3
 800984a:	d301      	bcc.n	8009850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800984c:	2301      	movs	r3, #1
 800984e:	e010      	b.n	8009872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009850:	4b0a      	ldr	r3, [pc, #40]	; (800987c <SysTick_Config+0x44>)
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	3a01      	subs	r2, #1
 8009856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009858:	2301      	movs	r3, #1
 800985a:	425b      	negs	r3, r3
 800985c:	2103      	movs	r1, #3
 800985e:	0018      	movs	r0, r3
 8009860:	f7ff ff7c 	bl	800975c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <SysTick_Config+0x44>)
 8009866:	2200      	movs	r2, #0
 8009868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800986a:	4b04      	ldr	r3, [pc, #16]	; (800987c <SysTick_Config+0x44>)
 800986c:	2207      	movs	r2, #7
 800986e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009870:	2300      	movs	r3, #0
}
 8009872:	0018      	movs	r0, r3
 8009874:	46bd      	mov	sp, r7
 8009876:	b002      	add	sp, #8
 8009878:	bd80      	pop	{r7, pc}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	e000e010 	.word	0xe000e010

08009880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	607a      	str	r2, [r7, #4]
 800988a:	210f      	movs	r1, #15
 800988c:	187b      	adds	r3, r7, r1
 800988e:	1c02      	adds	r2, r0, #0
 8009890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	187b      	adds	r3, r7, r1
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	b25b      	sxtb	r3, r3
 800989a:	0011      	movs	r1, r2
 800989c:	0018      	movs	r0, r3
 800989e:	f7ff ff5d 	bl	800975c <__NVIC_SetPriority>
}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b004      	add	sp, #16
 80098a8:	bd80      	pop	{r7, pc}

080098aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	0002      	movs	r2, r0
 80098b2:	1dfb      	adds	r3, r7, #7
 80098b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b6:	1dfb      	adds	r3, r7, #7
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b25b      	sxtb	r3, r3
 80098bc:	0018      	movs	r0, r3
 80098be:	f7ff ff33 	bl	8009728 <__NVIC_EnableIRQ>
}
 80098c2:	46c0      	nop			; (mov r8, r8)
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b002      	add	sp, #8
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f7ff ffaf 	bl	8009838 <SysTick_Config>
 80098da:	0003      	movs	r3, r0
}
 80098dc:	0018      	movs	r0, r3
 80098de:	46bd      	mov	sp, r7
 80098e0:	b002      	add	sp, #8
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098ec:	210f      	movs	r1, #15
 80098ee:	187b      	adds	r3, r7, r1
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2221      	movs	r2, #33	; 0x21
 80098f8:	5c9b      	ldrb	r3, [r3, r2]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d006      	beq.n	800990e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2204      	movs	r2, #4
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009906:	187b      	adds	r3, r7, r1
 8009908:	2201      	movs	r2, #1
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e028      	b.n	8009960 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	210e      	movs	r1, #14
 800991a:	438a      	bics	r2, r1
 800991c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2101      	movs	r1, #1
 800992a:	438a      	bics	r2, r1
 800992c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009936:	2101      	movs	r1, #1
 8009938:	4091      	lsls	r1, r2
 800993a:	000a      	movs	r2, r1
 800993c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2221      	movs	r2, #33	; 0x21
 8009942:	2101      	movs	r1, #1
 8009944:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	2100      	movs	r1, #0
 800994c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	0010      	movs	r0, r2
 800995e:	4798      	blx	r3
    } 
  }
  return status;
 8009960:	230f      	movs	r3, #15
 8009962:	18fb      	adds	r3, r7, r3
 8009964:	781b      	ldrb	r3, [r3, #0]
}
 8009966:	0018      	movs	r0, r3
 8009968:	46bd      	mov	sp, r7
 800996a:	b004      	add	sp, #16
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8009970:	b580      	push	{r7, lr}
 8009972:	b086      	sub	sp, #24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800997e:	e14f      	b.n	8009c20 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2101      	movs	r1, #1
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	4091      	lsls	r1, r2
 800998a:	000a      	movs	r2, r1
 800998c:	4013      	ands	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d100      	bne.n	8009998 <HAL_GPIO_Init+0x28>
 8009996:	e140      	b.n	8009c1a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d00b      	beq.n	80099b8 <HAL_GPIO_Init+0x48>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d007      	beq.n	80099b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80099ac:	2b11      	cmp	r3, #17
 80099ae:	d003      	beq.n	80099b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b12      	cmp	r3, #18
 80099b6:	d130      	bne.n	8009a1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	2203      	movs	r2, #3
 80099c4:	409a      	lsls	r2, r3
 80099c6:	0013      	movs	r3, r2
 80099c8:	43da      	mvns	r2, r3
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	4013      	ands	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	409a      	lsls	r2, r3
 80099da:	0013      	movs	r3, r2
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099ee:	2201      	movs	r2, #1
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	409a      	lsls	r2, r3
 80099f4:	0013      	movs	r3, r2
 80099f6:	43da      	mvns	r2, r3
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4013      	ands	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	091b      	lsrs	r3, r3, #4
 8009a04:	2201      	movs	r2, #1
 8009a06:	401a      	ands	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	409a      	lsls	r2, r3
 8009a0c:	0013      	movs	r3, r2
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	2203      	movs	r2, #3
 8009a26:	409a      	lsls	r2, r3
 8009a28:	0013      	movs	r3, r2
 8009a2a:	43da      	mvns	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	409a      	lsls	r2, r3
 8009a3c:	0013      	movs	r3, r2
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d003      	beq.n	8009a5a <HAL_GPIO_Init+0xea>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b12      	cmp	r3, #18
 8009a58:	d123      	bne.n	8009aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	08da      	lsrs	r2, r3, #3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3208      	adds	r2, #8
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	58d3      	ldr	r3, [r2, r3]
 8009a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2207      	movs	r2, #7
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	220f      	movs	r2, #15
 8009a72:	409a      	lsls	r2, r3
 8009a74:	0013      	movs	r3, r2
 8009a76:	43da      	mvns	r2, r3
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2107      	movs	r1, #7
 8009a86:	400b      	ands	r3, r1
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	409a      	lsls	r2, r3
 8009a8c:	0013      	movs	r3, r2
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	08da      	lsrs	r2, r3, #3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3208      	adds	r2, #8
 8009a9c:	0092      	lsls	r2, r2, #2
 8009a9e:	6939      	ldr	r1, [r7, #16]
 8009aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	2203      	movs	r2, #3
 8009aae:	409a      	lsls	r2, r3
 8009ab0:	0013      	movs	r3, r2
 8009ab2:	43da      	mvns	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2203      	movs	r2, #3
 8009ac0:	401a      	ands	r2, r3
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	409a      	lsls	r2, r3
 8009ac8:	0013      	movs	r3, r2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	693a      	ldr	r2, [r7, #16]
 8009ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	2380      	movs	r3, #128	; 0x80
 8009adc:	055b      	lsls	r3, r3, #21
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d100      	bne.n	8009ae4 <HAL_GPIO_Init+0x174>
 8009ae2:	e09a      	b.n	8009c1a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ae4:	4b54      	ldr	r3, [pc, #336]	; (8009c38 <HAL_GPIO_Init+0x2c8>)
 8009ae6:	699a      	ldr	r2, [r3, #24]
 8009ae8:	4b53      	ldr	r3, [pc, #332]	; (8009c38 <HAL_GPIO_Init+0x2c8>)
 8009aea:	2101      	movs	r1, #1
 8009aec:	430a      	orrs	r2, r1
 8009aee:	619a      	str	r2, [r3, #24]
 8009af0:	4b51      	ldr	r3, [pc, #324]	; (8009c38 <HAL_GPIO_Init+0x2c8>)
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	2201      	movs	r2, #1
 8009af6:	4013      	ands	r3, r2
 8009af8:	60bb      	str	r3, [r7, #8]
 8009afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009afc:	4a4f      	ldr	r2, [pc, #316]	; (8009c3c <HAL_GPIO_Init+0x2cc>)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	089b      	lsrs	r3, r3, #2
 8009b02:	3302      	adds	r3, #2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	589b      	ldr	r3, [r3, r2]
 8009b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	4013      	ands	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	220f      	movs	r2, #15
 8009b14:	409a      	lsls	r2, r3
 8009b16:	0013      	movs	r3, r2
 8009b18:	43da      	mvns	r2, r3
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	2390      	movs	r3, #144	; 0x90
 8009b24:	05db      	lsls	r3, r3, #23
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d013      	beq.n	8009b52 <HAL_GPIO_Init+0x1e2>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a44      	ldr	r2, [pc, #272]	; (8009c40 <HAL_GPIO_Init+0x2d0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d00d      	beq.n	8009b4e <HAL_GPIO_Init+0x1de>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a43      	ldr	r2, [pc, #268]	; (8009c44 <HAL_GPIO_Init+0x2d4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d007      	beq.n	8009b4a <HAL_GPIO_Init+0x1da>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a42      	ldr	r2, [pc, #264]	; (8009c48 <HAL_GPIO_Init+0x2d8>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d101      	bne.n	8009b46 <HAL_GPIO_Init+0x1d6>
 8009b42:	2303      	movs	r3, #3
 8009b44:	e006      	b.n	8009b54 <HAL_GPIO_Init+0x1e4>
 8009b46:	2305      	movs	r3, #5
 8009b48:	e004      	b.n	8009b54 <HAL_GPIO_Init+0x1e4>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e002      	b.n	8009b54 <HAL_GPIO_Init+0x1e4>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <HAL_GPIO_Init+0x1e4>
 8009b52:	2300      	movs	r3, #0
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	2103      	movs	r1, #3
 8009b58:	400a      	ands	r2, r1
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	4093      	lsls	r3, r2
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009b64:	4935      	ldr	r1, [pc, #212]	; (8009c3c <HAL_GPIO_Init+0x2cc>)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	089b      	lsrs	r3, r3, #2
 8009b6a:	3302      	adds	r3, #2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009b72:	4b36      	ldr	r3, [pc, #216]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	43da      	mvns	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	025b      	lsls	r3, r3, #9
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009b96:	4b2d      	ldr	r3, [pc, #180]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009b9c:	4b2b      	ldr	r3, [pc, #172]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	43da      	mvns	r2, r3
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	2380      	movs	r3, #128	; 0x80
 8009bb2:	029b      	lsls	r3, r3, #10
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009bc0:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bc6:	4b21      	ldr	r3, [pc, #132]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	43da      	mvns	r2, r3
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	2380      	movs	r3, #128	; 0x80
 8009bdc:	035b      	lsls	r3, r3, #13
 8009bde:	4013      	ands	r3, r2
 8009be0:	d003      	beq.n	8009bea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009bf0:	4b16      	ldr	r3, [pc, #88]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	43da      	mvns	r2, r3
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	2380      	movs	r3, #128	; 0x80
 8009c06:	039b      	lsls	r3, r3, #14
 8009c08:	4013      	ands	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009c14:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <HAL_GPIO_Init+0x2dc>)
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	40da      	lsrs	r2, r3
 8009c28:	1e13      	subs	r3, r2, #0
 8009c2a:	d000      	beq.n	8009c2e <HAL_GPIO_Init+0x2be>
 8009c2c:	e6a8      	b.n	8009980 <HAL_GPIO_Init+0x10>
  } 
}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	46c0      	nop			; (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b006      	add	sp, #24
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40021000 	.word	0x40021000
 8009c3c:	40010000 	.word	0x40010000
 8009c40:	48000400 	.word	0x48000400
 8009c44:	48000800 	.word	0x48000800
 8009c48:	48000c00 	.word	0x48000c00
 8009c4c:	40010400 	.word	0x40010400

08009c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	0008      	movs	r0, r1
 8009c5a:	0011      	movs	r1, r2
 8009c5c:	1cbb      	adds	r3, r7, #2
 8009c5e:	1c02      	adds	r2, r0, #0
 8009c60:	801a      	strh	r2, [r3, #0]
 8009c62:	1c7b      	adds	r3, r7, #1
 8009c64:	1c0a      	adds	r2, r1, #0
 8009c66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c68:	1c7b      	adds	r3, r7, #1
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d004      	beq.n	8009c7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c70:	1cbb      	adds	r3, r7, #2
 8009c72:	881a      	ldrh	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c78:	e003      	b.n	8009c82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c7a:	1cbb      	adds	r3, r7, #2
 8009c7c:	881a      	ldrh	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009c82:	46c0      	nop			; (mov r8, r8)
 8009c84:	46bd      	mov	sp, r7
 8009c86:	b002      	add	sp, #8
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	000a      	movs	r2, r1
 8009c94:	1cfb      	adds	r3, r7, #3
 8009c96:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	23aa      	movs	r3, #170	; 0xaa
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	5cd3      	ldrb	r3, [r2, r3]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_PCD_SetAddress+0x1e>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e017      	b.n	8009cd8 <HAL_PCD_SetAddress+0x4e>
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	23aa      	movs	r3, #170	; 0xaa
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	2101      	movs	r1, #1
 8009cb0:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	1cfa      	adds	r2, r7, #3
 8009cb6:	2124      	movs	r1, #36	; 0x24
 8009cb8:	7812      	ldrb	r2, [r2, #0]
 8009cba:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	1cfb      	adds	r3, r7, #3
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	0019      	movs	r1, r3
 8009cc6:	0010      	movs	r0, r2
 8009cc8:	f005 fcc8 	bl	800f65c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	23aa      	movs	r3, #170	; 0xaa
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	0018      	movs	r0, r3
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	b002      	add	sp, #8
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009ce0:	b590      	push	{r4, r7, lr}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	000c      	movs	r4, r1
 8009cea:	0010      	movs	r0, r2
 8009cec:	0019      	movs	r1, r3
 8009cee:	1cfb      	adds	r3, r7, #3
 8009cf0:	1c22      	adds	r2, r4, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	003b      	movs	r3, r7
 8009cf6:	1c02      	adds	r2, r0, #0
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	1cbb      	adds	r3, r7, #2
 8009cfc:	1c0a      	adds	r2, r1, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d00:	230b      	movs	r3, #11
 8009d02:	18fb      	adds	r3, r7, r3
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d08:	1cfb      	adds	r3, r7, #3
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b25b      	sxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da0f      	bge.n	8009d32 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d12:	1cfb      	adds	r3, r7, #3
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2207      	movs	r2, #7
 8009d18:	4013      	ands	r3, r2
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	0013      	movs	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	189b      	adds	r3, r3, r2
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	18d3      	adds	r3, r2, r3
 8009d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	705a      	strb	r2, [r3, #1]
 8009d30:	e00f      	b.n	8009d52 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d32:	1cfb      	adds	r3, r7, #3
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2207      	movs	r2, #7
 8009d38:	401a      	ands	r2, r3
 8009d3a:	0013      	movs	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	189b      	adds	r3, r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	3369      	adds	r3, #105	; 0x69
 8009d44:	33ff      	adds	r3, #255	; 0xff
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	18d3      	adds	r3, r2, r3
 8009d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009d52:	1cfb      	adds	r3, r7, #3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2207      	movs	r2, #7
 8009d58:	4013      	ands	r3, r2
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009d60:	003b      	movs	r3, r7
 8009d62:	881a      	ldrh	r2, [r3, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	1cba      	adds	r2, r7, #2
 8009d6c:	7812      	ldrb	r2, [r2, #0]
 8009d6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	785b      	ldrb	r3, [r3, #1]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009d82:	1cbb      	adds	r3, r7, #2
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d102      	bne.n	8009d90 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	23aa      	movs	r3, #170	; 0xaa
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	5cd3      	ldrb	r3, [r2, r3]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d101      	bne.n	8009da0 <HAL_PCD_EP_Open+0xc0>
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	e013      	b.n	8009dc8 <HAL_PCD_EP_Open+0xe8>
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	23aa      	movs	r3, #170	; 0xaa
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	2101      	movs	r1, #1
 8009da8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	0011      	movs	r1, r2
 8009db2:	0018      	movs	r0, r3
 8009db4:	f003 fd18 	bl	800d7e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	23aa      	movs	r3, #170	; 0xaa
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	54d1      	strb	r1, [r2, r3]

  return ret;
 8009dc2:	230b      	movs	r3, #11
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	781b      	ldrb	r3, [r3, #0]
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b005      	add	sp, #20
 8009dce:	bd90      	pop	{r4, r7, pc}

08009dd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	000a      	movs	r2, r1
 8009dda:	1cfb      	adds	r3, r7, #3
 8009ddc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009dde:	1cfb      	adds	r3, r7, #3
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	b25b      	sxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da0f      	bge.n	8009e08 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009de8:	1cfb      	adds	r3, r7, #3
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2207      	movs	r2, #7
 8009dee:	4013      	ands	r3, r2
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	0013      	movs	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	189b      	adds	r3, r3, r2
 8009df8:	00db      	lsls	r3, r3, #3
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	18d3      	adds	r3, r2, r3
 8009dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2201      	movs	r2, #1
 8009e04:	705a      	strb	r2, [r3, #1]
 8009e06:	e00f      	b.n	8009e28 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e08:	1cfb      	adds	r3, r7, #3
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	401a      	ands	r2, r3
 8009e10:	0013      	movs	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	189b      	adds	r3, r3, r2
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	3369      	adds	r3, #105	; 0x69
 8009e1a:	33ff      	adds	r3, #255	; 0xff
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	18d3      	adds	r3, r2, r3
 8009e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009e28:	1cfb      	adds	r3, r7, #3
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2207      	movs	r2, #7
 8009e2e:	4013      	ands	r3, r2
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	23aa      	movs	r3, #170	; 0xaa
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	5cd3      	ldrb	r3, [r2, r3]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_PCD_EP_Close+0x76>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e011      	b.n	8009e6a <HAL_PCD_EP_Close+0x9a>
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	23aa      	movs	r3, #170	; 0xaa
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	0011      	movs	r1, r2
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f004 f81b 	bl	800de94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	23aa      	movs	r3, #170	; 0xaa
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	2100      	movs	r1, #0
 8009e66:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	b004      	add	sp, #16
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
 8009e7e:	200b      	movs	r0, #11
 8009e80:	183b      	adds	r3, r7, r0
 8009e82:	1c0a      	adds	r2, r1, #0
 8009e84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e86:	0001      	movs	r1, r0
 8009e88:	187b      	adds	r3, r7, r1
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2207      	movs	r2, #7
 8009e8e:	401a      	ands	r2, r3
 8009e90:	0013      	movs	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	189b      	adds	r3, r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	3369      	adds	r3, #105	; 0x69
 8009e9a:	33ff      	adds	r3, #255	; 0xff
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	18d3      	adds	r3, r2, r3
 8009ea0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009eba:	187b      	adds	r3, r7, r1
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2207      	movs	r2, #7
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ec8:	187b      	adds	r3, r7, r1
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	2207      	movs	r2, #7
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d107      	bne.n	8009ee2 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	0011      	movs	r1, r2
 8009eda:	0018      	movs	r0, r3
 8009edc:	f004 f99a 	bl	800e214 <USB_EPStartXfer>
 8009ee0:	e006      	b.n	8009ef0 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	0011      	movs	r1, r2
 8009eea:	0018      	movs	r0, r3
 8009eec:	f004 f992 	bl	800e214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b006      	add	sp, #24
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	000a      	movs	r2, r1
 8009f04:	1cfb      	adds	r3, r7, #3
 8009f06:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f08:	1cfb      	adds	r3, r7, #3
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2207      	movs	r2, #7
 8009f0e:	401a      	ands	r2, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	23c2      	movs	r3, #194	; 0xc2
 8009f14:	0059      	lsls	r1, r3, #1
 8009f16:	0013      	movs	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	00db      	lsls	r3, r3, #3
 8009f1e:	18c3      	adds	r3, r0, r3
 8009f20:	185b      	adds	r3, r3, r1
 8009f22:	681b      	ldr	r3, [r3, #0]
}
 8009f24:	0018      	movs	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	603b      	str	r3, [r7, #0]
 8009f38:	200b      	movs	r0, #11
 8009f3a:	183b      	adds	r3, r7, r0
 8009f3c:	1c0a      	adds	r2, r1, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f40:	183b      	adds	r3, r7, r0
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2207      	movs	r2, #7
 8009f46:	4013      	ands	r3, r2
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	0013      	movs	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	189b      	adds	r3, r3, r2
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	18d3      	adds	r3, r2, r3
 8009f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2224      	movs	r2, #36	; 0x24
 8009f68:	2101      	movs	r1, #1
 8009f6a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2200      	movs	r2, #0
 8009f76:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f7e:	183b      	adds	r3, r7, r0
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2207      	movs	r2, #7
 8009f84:	4013      	ands	r3, r2
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009f8c:	183b      	adds	r3, r7, r0
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	2207      	movs	r2, #7
 8009f92:	4013      	ands	r3, r2
 8009f94:	d107      	bne.n	8009fa6 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	0011      	movs	r1, r2
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	f004 f938 	bl	800e214 <USB_EPStartXfer>
 8009fa4:	e006      	b.n	8009fb4 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	0011      	movs	r1, r2
 8009fae:	0018      	movs	r0, r3
 8009fb0:	f004 f930 	bl	800e214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	b006      	add	sp, #24
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	000a      	movs	r2, r1
 8009fc8:	1cfb      	adds	r3, r7, #3
 8009fca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fcc:	1cfb      	adds	r3, r7, #3
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	401a      	ands	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d901      	bls.n	8009fe0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e046      	b.n	800a06e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fe0:	1cfb      	adds	r3, r7, #3
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	b25b      	sxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da0f      	bge.n	800a00a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fea:	1cfb      	adds	r3, r7, #3
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2207      	movs	r2, #7
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	0013      	movs	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	189b      	adds	r3, r3, r2
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	18d3      	adds	r3, r2, r3
 800a000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	705a      	strb	r2, [r3, #1]
 800a008:	e00d      	b.n	800a026 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a00a:	1cfb      	adds	r3, r7, #3
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	0013      	movs	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	189b      	adds	r3, r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	3369      	adds	r3, #105	; 0x69
 800a018:	33ff      	adds	r3, #255	; 0xff
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	18d3      	adds	r3, r2, r3
 800a01e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2201      	movs	r2, #1
 800a02a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a02c:	1cfb      	adds	r3, r7, #3
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2207      	movs	r2, #7
 800a032:	4013      	ands	r3, r2
 800a034:	b2da      	uxtb	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	23aa      	movs	r3, #170	; 0xaa
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	5cd3      	ldrb	r3, [r2, r3]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_PCD_EP_SetStall+0x8c>
 800a046:	2302      	movs	r3, #2
 800a048:	e011      	b.n	800a06e <HAL_PCD_EP_SetStall+0xb0>
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	23aa      	movs	r3, #170	; 0xaa
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	2101      	movs	r1, #1
 800a052:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	0011      	movs	r1, r2
 800a05c:	0018      	movs	r0, r3
 800a05e:	f005 f9fb 	bl	800f458 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	23aa      	movs	r3, #170	; 0xaa
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	2100      	movs	r1, #0
 800a06a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	0018      	movs	r0, r3
 800a070:	46bd      	mov	sp, r7
 800a072:	b004      	add	sp, #16
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	000a      	movs	r2, r1
 800a080:	1cfb      	adds	r3, r7, #3
 800a082:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a084:	1cfb      	adds	r3, r7, #3
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	220f      	movs	r2, #15
 800a08a:	401a      	ands	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d901      	bls.n	800a098 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e048      	b.n	800a12a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a098:	1cfb      	adds	r3, r7, #3
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	b25b      	sxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	da0f      	bge.n	800a0c2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0a2:	1cfb      	adds	r3, r7, #3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2207      	movs	r2, #7
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	0013      	movs	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	189b      	adds	r3, r3, r2
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	18d3      	adds	r3, r2, r3
 800a0b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	705a      	strb	r2, [r3, #1]
 800a0c0:	e00f      	b.n	800a0e2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0c2:	1cfb      	adds	r3, r7, #3
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2207      	movs	r2, #7
 800a0c8:	401a      	ands	r2, r3
 800a0ca:	0013      	movs	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	3369      	adds	r3, #105	; 0x69
 800a0d4:	33ff      	adds	r3, #255	; 0xff
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	18d3      	adds	r3, r2, r3
 800a0da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0e8:	1cfb      	adds	r3, r7, #3
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	23aa      	movs	r3, #170	; 0xaa
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	5cd3      	ldrb	r3, [r2, r3]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d101      	bne.n	800a106 <HAL_PCD_EP_ClrStall+0x90>
 800a102:	2302      	movs	r3, #2
 800a104:	e011      	b.n	800a12a <HAL_PCD_EP_ClrStall+0xb4>
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	23aa      	movs	r3, #170	; 0xaa
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	2101      	movs	r1, #1
 800a10e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	0011      	movs	r1, r2
 800a118:	0018      	movs	r0, r3
 800a11a:	f005 f9ed 	bl	800f4f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	23aa      	movs	r3, #170	; 0xaa
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	2100      	movs	r1, #0
 800a126:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	0018      	movs	r0, r3
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b004      	add	sp, #16
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a134:	b5b0      	push	{r4, r5, r7, lr}
 800a136:	b08e      	sub	sp, #56	; 0x38
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a13c:	e31c      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
  {
    wIstr = hpcd->Instance->ISTR;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	202e      	movs	r0, #46	; 0x2e
 800a144:	183b      	adds	r3, r7, r0
 800a146:	2144      	movs	r1, #68	; 0x44
 800a148:	5a52      	ldrh	r2, [r2, r1]
 800a14a:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b2da      	uxtb	r2, r3
 800a152:	242d      	movs	r4, #45	; 0x2d
 800a154:	193b      	adds	r3, r7, r4
 800a156:	210f      	movs	r1, #15
 800a158:	400a      	ands	r2, r1
 800a15a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800a15c:	193b      	adds	r3, r7, r4
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d000      	beq.n	800a166 <PCD_EP_ISR_Handler+0x32>
 800a164:	e15d      	b.n	800a422 <PCD_EP_ISR_Handler+0x2ee>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a166:	183b      	adds	r3, r7, r0
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	2210      	movs	r2, #16
 800a16c:	4013      	ands	r3, r2
 800a16e:	d152      	bne.n	800a216 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	b29a      	uxth	r2, r3
 800a178:	200e      	movs	r0, #14
 800a17a:	183b      	adds	r3, r7, r0
 800a17c:	49da      	ldr	r1, [pc, #872]	; (800a4e8 <PCD_EP_ISR_Handler+0x3b4>)
 800a17e:	400a      	ands	r2, r1
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	183a      	adds	r2, r7, r0
 800a188:	8812      	ldrh	r2, [r2, #0]
 800a18a:	49d8      	ldr	r1, [pc, #864]	; (800a4ec <PCD_EP_ISR_Handler+0x3b8>)
 800a18c:	430a      	orrs	r2, r1
 800a18e:	b292      	uxth	r2, r2
 800a190:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3328      	adds	r3, #40	; 0x28
 800a196:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2250      	movs	r2, #80	; 0x50
 800a19e:	5a9b      	ldrh	r3, [r3, r2]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	001a      	movs	r2, r3
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	18d2      	adds	r2, r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	18d3      	adds	r3, r2, r3
 800a1b2:	4acf      	ldr	r2, [pc, #828]	; (800a4f0 <PCD_EP_ISR_Handler+0x3bc>)
 800a1b4:	4694      	mov	ip, r2
 800a1b6:	4463      	add	r3, ip
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	059b      	lsls	r3, r3, #22
 800a1bc:	0d9a      	lsrs	r2, r3, #22
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	695a      	ldr	r2, [r3, #20]
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	18d2      	adds	r2, r2, r3
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f006 fd86 	bl	8010ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2224      	movs	r2, #36	; 0x24
 800a1de:	5c9b      	ldrb	r3, [r3, r2]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d100      	bne.n	800a1e8 <PCD_EP_ISR_Handler+0xb4>
 800a1e6:	e2c7      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d000      	beq.n	800a1f2 <PCD_EP_ISR_Handler+0xbe>
 800a1f0:	e2c2      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2224      	movs	r2, #36	; 0x24
 800a1f6:	5c9b      	ldrb	r3, [r3, r2]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2280      	movs	r2, #128	; 0x80
 800a1fc:	4252      	negs	r2, r2
 800a1fe:	4313      	orrs	r3, r2
 800a200:	b2da      	uxtb	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	b291      	uxth	r1, r2
 800a208:	224c      	movs	r2, #76	; 0x4c
 800a20a:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2224      	movs	r2, #36	; 0x24
 800a210:	2100      	movs	r1, #0
 800a212:	5499      	strb	r1, [r3, r2]
 800a214:	e2b0      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3369      	adds	r3, #105	; 0x69
 800a21a:	33ff      	adds	r3, #255	; 0xff
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	212a      	movs	r1, #42	; 0x2a
 800a224:	187b      	adds	r3, r7, r1
 800a226:	8812      	ldrh	r2, [r2, #0]
 800a228:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a22a:	187b      	adds	r3, r7, r1
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	2380      	movs	r3, #128	; 0x80
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	4013      	ands	r3, r2
 800a234:	d037      	beq.n	800a2a6 <PCD_EP_ISR_Handler+0x172>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2250      	movs	r2, #80	; 0x50
 800a23c:	5a9b      	ldrh	r3, [r3, r2]
 800a23e:	b29b      	uxth	r3, r3
 800a240:	001a      	movs	r2, r3
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	18d2      	adds	r2, r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	18d3      	adds	r3, r2, r3
 800a250:	4aa8      	ldr	r2, [pc, #672]	; (800a4f4 <PCD_EP_ISR_Handler+0x3c0>)
 800a252:	4694      	mov	ip, r2
 800a254:	4463      	add	r3, ip
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	059b      	lsls	r3, r3, #22
 800a25a:	0d9a      	lsrs	r2, r3, #22
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	22ac      	movs	r2, #172	; 0xac
 800a268:	0092      	lsls	r2, r2, #2
 800a26a:	1899      	adds	r1, r3, r2
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a274:	b29b      	uxth	r3, r3
 800a276:	f005 fa49 	bl	800f70c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29a      	uxth	r2, r3
 800a282:	2010      	movs	r0, #16
 800a284:	183b      	adds	r3, r7, r0
 800a286:	499c      	ldr	r1, [pc, #624]	; (800a4f8 <PCD_EP_ISR_Handler+0x3c4>)
 800a288:	400a      	ands	r2, r1
 800a28a:	801a      	strh	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	183a      	adds	r2, r7, r0
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	2180      	movs	r1, #128	; 0x80
 800a296:	430a      	orrs	r2, r1
 800a298:	b292      	uxth	r2, r2
 800a29a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f006 fceb 	bl	8010c7a <HAL_PCD_SetupStageCallback>
 800a2a4:	e268      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a2a6:	232a      	movs	r3, #42	; 0x2a
 800a2a8:	18fb      	adds	r3, r7, r3
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	db00      	blt.n	800a2b4 <PCD_EP_ISR_Handler+0x180>
 800a2b2:	e261      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	201c      	movs	r0, #28
 800a2be:	183b      	adds	r3, r7, r0
 800a2c0:	498d      	ldr	r1, [pc, #564]	; (800a4f8 <PCD_EP_ISR_Handler+0x3c4>)
 800a2c2:	400a      	ands	r2, r1
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	183a      	adds	r2, r7, r0
 800a2cc:	8812      	ldrh	r2, [r2, #0]
 800a2ce:	2180      	movs	r1, #128	; 0x80
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	b292      	uxth	r2, r2
 800a2d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2250      	movs	r2, #80	; 0x50
 800a2dc:	5a9b      	ldrh	r3, [r3, r2]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	001a      	movs	r2, r3
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	18d2      	adds	r2, r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	18d3      	adds	r3, r2, r3
 800a2f0:	4a80      	ldr	r2, [pc, #512]	; (800a4f4 <PCD_EP_ISR_Handler+0x3c0>)
 800a2f2:	4694      	mov	ip, r2
 800a2f4:	4463      	add	r3, ip
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	059b      	lsls	r3, r3, #22
 800a2fa:	0d9a      	lsrs	r2, r3, #22
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01a      	beq.n	800a33e <PCD_EP_ISR_Handler+0x20a>
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d016      	beq.n	800a33e <PCD_EP_ISR_Handler+0x20a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6818      	ldr	r0, [r3, #0]
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	6959      	ldr	r1, [r3, #20]
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a320:	b29b      	uxth	r3, r3
 800a322:	f005 f9f3 	bl	800f70c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	695a      	ldr	r2, [r3, #20]
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	18d2      	adds	r2, r2, r3
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2100      	movs	r1, #0
 800a338:	0018      	movs	r0, r3
 800a33a:	f006 fcb3 	bl	8010ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	61bb      	str	r3, [r7, #24]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2250      	movs	r2, #80	; 0x50
 800a34a:	5a9b      	ldrh	r3, [r3, r2]
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	001a      	movs	r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	189b      	adds	r3, r3, r2
 800a354:	61bb      	str	r3, [r7, #24]
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	4a66      	ldr	r2, [pc, #408]	; (800a4f4 <PCD_EP_ISR_Handler+0x3c0>)
 800a35a:	4694      	mov	ip, r2
 800a35c:	4463      	add	r3, ip
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d110      	bne.n	800a38a <PCD_EP_ISR_Handler+0x256>
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	4a63      	ldr	r2, [pc, #396]	; (800a4fc <PCD_EP_ISR_Handler+0x3c8>)
 800a370:	4013      	ands	r3, r2
 800a372:	b29a      	uxth	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4a5b      	ldr	r2, [pc, #364]	; (800a4ec <PCD_EP_ISR_Handler+0x3b8>)
 800a380:	4313      	orrs	r3, r2
 800a382:	b29a      	uxth	r2, r3
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e02b      	b.n	800a3e2 <PCD_EP_ISR_Handler+0x2ae>
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b3e      	cmp	r3, #62	; 0x3e
 800a390:	d812      	bhi.n	800a3b8 <PCD_EP_ISR_Handler+0x284>
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	085b      	lsrs	r3, r3, #1
 800a398:	633b      	str	r3, [r7, #48]	; 0x30
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	d002      	beq.n	800a3aa <PCD_EP_ISR_Handler+0x276>
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	029b      	lsls	r3, r3, #10
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e014      	b.n	800a3e2 <PCD_EP_ISR_Handler+0x2ae>
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	633b      	str	r3, [r7, #48]	; 0x30
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	221f      	movs	r2, #31
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	d102      	bne.n	800a3d0 <PCD_EP_ISR_Handler+0x29c>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	029b      	lsls	r3, r3, #10
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4a44      	ldr	r2, [pc, #272]	; (800a4ec <PCD_EP_ISR_Handler+0x3b8>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	2012      	movs	r0, #18
 800a3ec:	183b      	adds	r3, r7, r0
 800a3ee:	4944      	ldr	r1, [pc, #272]	; (800a500 <PCD_EP_ISR_Handler+0x3cc>)
 800a3f0:	400a      	ands	r2, r1
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	183b      	adds	r3, r7, r0
 800a3f6:	183a      	adds	r2, r7, r0
 800a3f8:	8812      	ldrh	r2, [r2, #0]
 800a3fa:	2180      	movs	r1, #128	; 0x80
 800a3fc:	0149      	lsls	r1, r1, #5
 800a3fe:	404a      	eors	r2, r1
 800a400:	801a      	strh	r2, [r3, #0]
 800a402:	183b      	adds	r3, r7, r0
 800a404:	183a      	adds	r2, r7, r0
 800a406:	8812      	ldrh	r2, [r2, #0]
 800a408:	2180      	movs	r1, #128	; 0x80
 800a40a:	0189      	lsls	r1, r1, #6
 800a40c:	404a      	eors	r2, r1
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	183a      	adds	r2, r7, r0
 800a416:	8812      	ldrh	r2, [r2, #0]
 800a418:	493a      	ldr	r1, [pc, #232]	; (800a504 <PCD_EP_ISR_Handler+0x3d0>)
 800a41a:	430a      	orrs	r2, r1
 800a41c:	b292      	uxth	r2, r2
 800a41e:	801a      	strh	r2, [r3, #0]
 800a420:	e1aa      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	001a      	movs	r2, r3
 800a428:	202d      	movs	r0, #45	; 0x2d
 800a42a:	183b      	adds	r3, r7, r0
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	18d2      	adds	r2, r2, r3
 800a432:	212a      	movs	r1, #42	; 0x2a
 800a434:	187b      	adds	r3, r7, r1
 800a436:	8812      	ldrh	r2, [r2, #0]
 800a438:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a43a:	187b      	adds	r3, r7, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	5e9b      	ldrsh	r3, [r3, r2]
 800a440:	2b00      	cmp	r3, #0
 800a442:	db00      	blt.n	800a446 <PCD_EP_ISR_Handler+0x312>
 800a444:	e10b      	b.n	800a65e <PCD_EP_ISR_Handler+0x52a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	001a      	movs	r2, r3
 800a44c:	183b      	adds	r3, r7, r0
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	18d3      	adds	r3, r2, r3
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	2428      	movs	r4, #40	; 0x28
 800a45a:	193b      	adds	r3, r7, r4
 800a45c:	4926      	ldr	r1, [pc, #152]	; (800a4f8 <PCD_EP_ISR_Handler+0x3c4>)
 800a45e:	400a      	ands	r2, r1
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	001a      	movs	r2, r3
 800a468:	183b      	adds	r3, r7, r0
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	18d3      	adds	r3, r2, r3
 800a470:	193a      	adds	r2, r7, r4
 800a472:	8812      	ldrh	r2, [r2, #0]
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	430a      	orrs	r2, r1
 800a478:	b292      	uxth	r2, r2
 800a47a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a47c:	183b      	adds	r3, r7, r0
 800a47e:	781a      	ldrb	r2, [r3, #0]
 800a480:	0013      	movs	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	189b      	adds	r3, r3, r2
 800a486:	00db      	lsls	r3, r3, #3
 800a488:	3369      	adds	r3, #105	; 0x69
 800a48a:	33ff      	adds	r3, #255	; 0xff
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	18d3      	adds	r3, r2, r3
 800a490:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	7b1b      	ldrb	r3, [r3, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d136      	bne.n	800a508 <PCD_EP_ISR_Handler+0x3d4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2250      	movs	r2, #80	; 0x50
 800a4a0:	5a9b      	ldrh	r3, [r3, r2]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	001a      	movs	r2, r3
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	18d2      	adds	r2, r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	18d3      	adds	r3, r2, r3
 800a4b4:	4a0f      	ldr	r2, [pc, #60]	; (800a4f4 <PCD_EP_ISR_Handler+0x3c0>)
 800a4b6:	4694      	mov	ip, r2
 800a4b8:	4463      	add	r3, ip
 800a4ba:	881a      	ldrh	r2, [r3, #0]
 800a4bc:	2436      	movs	r4, #54	; 0x36
 800a4be:	193b      	adds	r3, r7, r4
 800a4c0:	0592      	lsls	r2, r2, #22
 800a4c2:	0d92      	lsrs	r2, r2, #22
 800a4c4:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800a4c6:	193b      	adds	r3, r7, r4
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d100      	bne.n	800a4d0 <PCD_EP_ISR_Handler+0x39c>
 800a4ce:	e09e      	b.n	800a60e <PCD_EP_ISR_Handler+0x4da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	6959      	ldr	r1, [r3, #20]
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	88da      	ldrh	r2, [r3, #6]
 800a4dc:	193b      	adds	r3, r7, r4
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	f005 f914 	bl	800f70c <USB_ReadPMA>
 800a4e4:	e093      	b.n	800a60e <PCD_EP_ISR_Handler+0x4da>
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	ffff8f0f 	.word	0xffff8f0f
 800a4ec:	ffff8000 	.word	0xffff8000
 800a4f0:	00000402 	.word	0x00000402
 800a4f4:	00000406 	.word	0x00000406
 800a4f8:	00000f8f 	.word	0x00000f8f
 800a4fc:	ffff83ff 	.word	0xffff83ff
 800a500:	ffffbf8f 	.word	0xffffbf8f
 800a504:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	78db      	ldrb	r3, [r3, #3]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d10c      	bne.n	800a52a <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a510:	2336      	movs	r3, #54	; 0x36
 800a512:	18fc      	adds	r4, r7, r3
 800a514:	232a      	movs	r3, #42	; 0x2a
 800a516:	18fb      	adds	r3, r7, r3
 800a518:	881a      	ldrh	r2, [r3, #0]
 800a51a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	0018      	movs	r0, r3
 800a520:	f000 f944 	bl	800a7ac <HAL_PCD_EP_DB_Receive>
 800a524:	0003      	movs	r3, r0
 800a526:	8023      	strh	r3, [r4, #0]
 800a528:	e071      	b.n	800a60e <PCD_EP_ISR_Handler+0x4da>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	001a      	movs	r2, r3
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	18d3      	adds	r3, r2, r3
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	2022      	movs	r0, #34	; 0x22
 800a53e:	183b      	adds	r3, r7, r0
 800a540:	4994      	ldr	r1, [pc, #592]	; (800a794 <PCD_EP_ISR_Handler+0x660>)
 800a542:	400a      	ands	r2, r1
 800a544:	801a      	strh	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	001a      	movs	r2, r3
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	18d3      	adds	r3, r2, r3
 800a554:	183a      	adds	r2, r7, r0
 800a556:	8812      	ldrh	r2, [r2, #0]
 800a558:	498f      	ldr	r1, [pc, #572]	; (800a798 <PCD_EP_ISR_Handler+0x664>)
 800a55a:	430a      	orrs	r2, r1
 800a55c:	b292      	uxth	r2, r2
 800a55e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	001a      	movs	r2, r3
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	18d3      	adds	r3, r2, r3
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	b29b      	uxth	r3, r3
 800a572:	001a      	movs	r2, r3
 800a574:	2380      	movs	r3, #128	; 0x80
 800a576:	01db      	lsls	r3, r3, #7
 800a578:	4013      	ands	r3, r2
 800a57a:	d024      	beq.n	800a5c6 <PCD_EP_ISR_Handler+0x492>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2250      	movs	r2, #80	; 0x50
 800a582:	5a9b      	ldrh	r3, [r3, r2]
 800a584:	b29b      	uxth	r3, r3
 800a586:	001a      	movs	r2, r3
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	18d2      	adds	r2, r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	18d3      	adds	r3, r2, r3
 800a596:	4a81      	ldr	r2, [pc, #516]	; (800a79c <PCD_EP_ISR_Handler+0x668>)
 800a598:	4694      	mov	ip, r2
 800a59a:	4463      	add	r3, ip
 800a59c:	881a      	ldrh	r2, [r3, #0]
 800a59e:	2436      	movs	r4, #54	; 0x36
 800a5a0:	193b      	adds	r3, r7, r4
 800a5a2:	0592      	lsls	r2, r2, #22
 800a5a4:	0d92      	lsrs	r2, r2, #22
 800a5a6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800a5a8:	193b      	adds	r3, r7, r4
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d02e      	beq.n	800a60e <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	6959      	ldr	r1, [r3, #20]
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	891a      	ldrh	r2, [r3, #8]
 800a5bc:	193b      	adds	r3, r7, r4
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	f005 f8a4 	bl	800f70c <USB_ReadPMA>
 800a5c4:	e023      	b.n	800a60e <PCD_EP_ISR_Handler+0x4da>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2250      	movs	r2, #80	; 0x50
 800a5cc:	5a9b      	ldrh	r3, [r3, r2]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	001a      	movs	r2, r3
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	18d2      	adds	r2, r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	18d3      	adds	r3, r2, r3
 800a5e0:	4a6f      	ldr	r2, [pc, #444]	; (800a7a0 <PCD_EP_ISR_Handler+0x66c>)
 800a5e2:	4694      	mov	ip, r2
 800a5e4:	4463      	add	r3, ip
 800a5e6:	881a      	ldrh	r2, [r3, #0]
 800a5e8:	2436      	movs	r4, #54	; 0x36
 800a5ea:	193b      	adds	r3, r7, r4
 800a5ec:	0592      	lsls	r2, r2, #22
 800a5ee:	0d92      	lsrs	r2, r2, #22
 800a5f0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800a5f2:	193b      	adds	r3, r7, r4
 800a5f4:	881b      	ldrh	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <PCD_EP_ISR_Handler+0x4da>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6818      	ldr	r0, [r3, #0]
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	6959      	ldr	r1, [r3, #20]
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	895a      	ldrh	r2, [r3, #10]
 800a606:	193b      	adds	r3, r7, r4
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	f005 f87f 	bl	800f70c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	69da      	ldr	r2, [r3, #28]
 800a612:	2136      	movs	r1, #54	; 0x36
 800a614:	187b      	adds	r3, r7, r1
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	18d2      	adds	r2, r2, r3
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	695a      	ldr	r2, [r3, #20]
 800a622:	187b      	adds	r3, r7, r1
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	18d2      	adds	r2, r2, r3
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <PCD_EP_ISR_Handler+0x50c>
 800a634:	187b      	adds	r3, r7, r1
 800a636:	881a      	ldrh	r2, [r3, #0]
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d207      	bcs.n	800a650 <PCD_EP_ISR_Handler+0x51c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	781a      	ldrb	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	0011      	movs	r1, r2
 800a648:	0018      	movs	r0, r3
 800a64a:	f006 fb2b 	bl	8010ca4 <HAL_PCD_DataOutStageCallback>
 800a64e:	e006      	b.n	800a65e <PCD_EP_ISR_Handler+0x52a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a656:	0011      	movs	r1, r2
 800a658:	0018      	movs	r0, r3
 800a65a:	f003 fddb 	bl	800e214 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a65e:	242a      	movs	r4, #42	; 0x2a
 800a660:	193b      	adds	r3, r7, r4
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	2280      	movs	r2, #128	; 0x80
 800a666:	4013      	ands	r3, r2
 800a668:	d100      	bne.n	800a66c <PCD_EP_ISR_Handler+0x538>
 800a66a:	e085      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[epindex];
 800a66c:	202d      	movs	r0, #45	; 0x2d
 800a66e:	183b      	adds	r3, r7, r0
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	0013      	movs	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	189b      	adds	r3, r3, r2
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	001a      	movs	r2, r3
 800a688:	183b      	adds	r3, r7, r0
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	18d3      	adds	r3, r2, r3
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29a      	uxth	r2, r3
 800a694:	2520      	movs	r5, #32
 800a696:	197b      	adds	r3, r7, r5
 800a698:	4942      	ldr	r1, [pc, #264]	; (800a7a4 <PCD_EP_ISR_Handler+0x670>)
 800a69a:	400a      	ands	r2, r1
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	001a      	movs	r2, r3
 800a6a4:	183b      	adds	r3, r7, r0
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	18d3      	adds	r3, r2, r3
 800a6ac:	197a      	adds	r2, r7, r5
 800a6ae:	8812      	ldrh	r2, [r2, #0]
 800a6b0:	493d      	ldr	r1, [pc, #244]	; (800a7a8 <PCD_EP_ISR_Handler+0x674>)
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	b292      	uxth	r2, r2
 800a6b6:	801a      	strh	r2, [r3, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	78db      	ldrb	r3, [r3, #3]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d109      	bne.n	800a6d4 <PCD_EP_ISR_Handler+0x5a0>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d14f      	bne.n	800a768 <PCD_EP_ISR_Handler+0x634>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800a6c8:	193b      	adds	r3, r7, r4
 800a6ca:	881a      	ldrh	r2, [r3, #0]
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	005b      	lsls	r3, r3, #1
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d149      	bne.n	800a768 <PCD_EP_ISR_Handler+0x634>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2250      	movs	r2, #80	; 0x50
 800a6da:	5a9b      	ldrh	r3, [r3, r2]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	001a      	movs	r2, r3
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	18d2      	adds	r2, r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	18d3      	adds	r3, r2, r3
 800a6ee:	4a2b      	ldr	r2, [pc, #172]	; (800a79c <PCD_EP_ISR_Handler+0x668>)
 800a6f0:	4694      	mov	ip, r2
 800a6f2:	4463      	add	r3, ip
 800a6f4:	881a      	ldrh	r2, [r3, #0]
 800a6f6:	211e      	movs	r1, #30
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	0592      	lsls	r2, r2, #22
 800a6fc:	0d92      	lsrs	r2, r2, #22
 800a6fe:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	187b      	adds	r3, r7, r1
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d907      	bls.n	800a71c <PCD_EP_ISR_Handler+0x5e8>
          {
            ep->xfer_len -= TxByteNbre;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	699a      	ldr	r2, [r3, #24]
 800a710:	187b      	adds	r3, r7, r1
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	1ad2      	subs	r2, r2, r3
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	619a      	str	r2, [r3, #24]
 800a71a:	e002      	b.n	800a722 <PCD_EP_ISR_Handler+0x5ee>
          }
          else
          {
            ep->xfer_len = 0U;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	2200      	movs	r2, #0
 800a720:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d107      	bne.n	800a73a <PCD_EP_ISR_Handler+0x606>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0011      	movs	r1, r2
 800a732:	0018      	movs	r0, r3
 800a734:	f006 fad7 	bl	8010ce6 <HAL_PCD_DataInStageCallback>
 800a738:	e01e      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	695a      	ldr	r2, [r3, #20]
 800a73e:	211e      	movs	r1, #30
 800a740:	187b      	adds	r3, r7, r1
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	18d2      	adds	r2, r2, r3
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	69da      	ldr	r2, [r3, #28]
 800a74e:	187b      	adds	r3, r7, r1
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	18d2      	adds	r2, r2, r3
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a75e:	0011      	movs	r1, r2
 800a760:	0018      	movs	r0, r3
 800a762:	f003 fd57 	bl	800e214 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800a766:	e007      	b.n	800a778 <PCD_EP_ISR_Handler+0x644>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a768:	232a      	movs	r3, #42	; 0x2a
 800a76a:	18fb      	adds	r3, r7, r3
 800a76c:	881a      	ldrh	r2, [r3, #0]
 800a76e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	0018      	movs	r0, r3
 800a774:	f000 f936 	bl	800a9e4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2244      	movs	r2, #68	; 0x44
 800a77e:	5a9b      	ldrh	r3, [r3, r2]
 800a780:	b29b      	uxth	r3, r3
 800a782:	b21b      	sxth	r3, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	da00      	bge.n	800a78a <PCD_EP_ISR_Handler+0x656>
 800a788:	e4d9      	b.n	800a13e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b00e      	add	sp, #56	; 0x38
 800a792:	bdb0      	pop	{r4, r5, r7, pc}
 800a794:	ffff8f8f 	.word	0xffff8f8f
 800a798:	ffff80c0 	.word	0xffff80c0
 800a79c:	00000402 	.word	0x00000402
 800a7a0:	00000406 	.word	0x00000406
 800a7a4:	ffff8f0f 	.word	0xffff8f0f
 800a7a8:	ffff8000 	.word	0xffff8000

0800a7ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a7ac:	b590      	push	{r4, r7, lr}
 800a7ae:	b089      	sub	sp, #36	; 0x24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	1dbb      	adds	r3, r7, #6
 800a7b8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7ba:	1dbb      	adds	r3, r7, #6
 800a7bc:	881a      	ldrh	r2, [r3, #0]
 800a7be:	2380      	movs	r3, #128	; 0x80
 800a7c0:	01db      	lsls	r3, r3, #7
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	d100      	bne.n	800a7c8 <HAL_PCD_EP_DB_Receive+0x1c>
 800a7c6:	e07d      	b.n	800a8c4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2250      	movs	r2, #80	; 0x50
 800a7ce:	5a9b      	ldrh	r3, [r3, r2]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	18d2      	adds	r2, r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	18d3      	adds	r3, r2, r3
 800a7e2:	4a7a      	ldr	r2, [pc, #488]	; (800a9cc <HAL_PCD_EP_DB_Receive+0x220>)
 800a7e4:	4694      	mov	ip, r2
 800a7e6:	4463      	add	r3, ip
 800a7e8:	881a      	ldrh	r2, [r3, #0]
 800a7ea:	211a      	movs	r1, #26
 800a7ec:	187b      	adds	r3, r7, r1
 800a7ee:	0592      	lsls	r2, r2, #22
 800a7f0:	0d92      	lsrs	r2, r2, #22
 800a7f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	699a      	ldr	r2, [r3, #24]
 800a7f8:	187b      	adds	r3, r7, r1
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d307      	bcc.n	800a810 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	699a      	ldr	r2, [r3, #24]
 800a804:	187b      	adds	r3, r7, r1
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	1ad2      	subs	r2, r2, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	619a      	str	r2, [r3, #24]
 800a80e:	e002      	b.n	800a816 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d121      	bne.n	800a862 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	001a      	movs	r2, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	18d3      	adds	r3, r2, r3
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	2018      	movs	r0, #24
 800a832:	183b      	adds	r3, r7, r0
 800a834:	4966      	ldr	r1, [pc, #408]	; (800a9d0 <HAL_PCD_EP_DB_Receive+0x224>)
 800a836:	400a      	ands	r2, r1
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	183b      	adds	r3, r7, r0
 800a83c:	183a      	adds	r2, r7, r0
 800a83e:	8812      	ldrh	r2, [r2, #0]
 800a840:	2180      	movs	r1, #128	; 0x80
 800a842:	0189      	lsls	r1, r1, #6
 800a844:	404a      	eors	r2, r1
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	001a      	movs	r2, r3
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	18d3      	adds	r3, r2, r3
 800a856:	183a      	adds	r2, r7, r0
 800a858:	8812      	ldrh	r2, [r2, #0]
 800a85a:	495e      	ldr	r1, [pc, #376]	; (800a9d4 <HAL_PCD_EP_DB_Receive+0x228>)
 800a85c:	430a      	orrs	r2, r1
 800a85e:	b292      	uxth	r2, r2
 800a860:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a862:	1dbb      	adds	r3, r7, #6
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	2240      	movs	r2, #64	; 0x40
 800a868:	4013      	ands	r3, r2
 800a86a:	d01a      	beq.n	800a8a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	001a      	movs	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	18d3      	adds	r3, r2, r3
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	2016      	movs	r0, #22
 800a880:	183b      	adds	r3, r7, r0
 800a882:	4955      	ldr	r1, [pc, #340]	; (800a9d8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800a884:	400a      	ands	r2, r1
 800a886:	801a      	strh	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	001a      	movs	r2, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	18d3      	adds	r3, r2, r3
 800a896:	183a      	adds	r2, r7, r0
 800a898:	8812      	ldrh	r2, [r2, #0]
 800a89a:	4950      	ldr	r1, [pc, #320]	; (800a9dc <HAL_PCD_EP_DB_Receive+0x230>)
 800a89c:	430a      	orrs	r2, r1
 800a89e:	b292      	uxth	r2, r2
 800a8a0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800a8a2:	241a      	movs	r4, #26
 800a8a4:	193b      	adds	r3, r7, r4
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d100      	bne.n	800a8ae <HAL_PCD_EP_DB_Receive+0x102>
 800a8ac:	e086      	b.n	800a9bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	6959      	ldr	r1, [r3, #20]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	891a      	ldrh	r2, [r3, #8]
 800a8ba:	193b      	adds	r3, r7, r4
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	f004 ff25 	bl	800f70c <USB_ReadPMA>
 800a8c2:	e07b      	b.n	800a9bc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2250      	movs	r2, #80	; 0x50
 800a8ca:	5a9b      	ldrh	r3, [r3, r2]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	001a      	movs	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	18d2      	adds	r2, r2, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	18d3      	adds	r3, r2, r3
 800a8de:	4a40      	ldr	r2, [pc, #256]	; (800a9e0 <HAL_PCD_EP_DB_Receive+0x234>)
 800a8e0:	4694      	mov	ip, r2
 800a8e2:	4463      	add	r3, ip
 800a8e4:	881a      	ldrh	r2, [r3, #0]
 800a8e6:	211a      	movs	r1, #26
 800a8e8:	187b      	adds	r3, r7, r1
 800a8ea:	0592      	lsls	r2, r2, #22
 800a8ec:	0d92      	lsrs	r2, r2, #22
 800a8ee:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	187b      	adds	r3, r7, r1
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d307      	bcc.n	800a90c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	699a      	ldr	r2, [r3, #24]
 800a900:	187b      	adds	r3, r7, r1
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	1ad2      	subs	r2, r2, r3
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	619a      	str	r2, [r3, #24]
 800a90a:	e002      	b.n	800a912 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d121      	bne.n	800a95e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	001a      	movs	r2, r3
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	18d3      	adds	r3, r2, r3
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	201e      	movs	r0, #30
 800a92e:	183b      	adds	r3, r7, r0
 800a930:	4927      	ldr	r1, [pc, #156]	; (800a9d0 <HAL_PCD_EP_DB_Receive+0x224>)
 800a932:	400a      	ands	r2, r1
 800a934:	801a      	strh	r2, [r3, #0]
 800a936:	183b      	adds	r3, r7, r0
 800a938:	183a      	adds	r2, r7, r0
 800a93a:	8812      	ldrh	r2, [r2, #0]
 800a93c:	2180      	movs	r1, #128	; 0x80
 800a93e:	0189      	lsls	r1, r1, #6
 800a940:	404a      	eors	r2, r1
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	001a      	movs	r2, r3
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	18d3      	adds	r3, r2, r3
 800a952:	183a      	adds	r2, r7, r0
 800a954:	8812      	ldrh	r2, [r2, #0]
 800a956:	491f      	ldr	r1, [pc, #124]	; (800a9d4 <HAL_PCD_EP_DB_Receive+0x228>)
 800a958:	430a      	orrs	r2, r1
 800a95a:	b292      	uxth	r2, r2
 800a95c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a95e:	1dbb      	adds	r3, r7, #6
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	2240      	movs	r2, #64	; 0x40
 800a964:	4013      	ands	r3, r2
 800a966:	d11a      	bne.n	800a99e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	001a      	movs	r2, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b29a      	uxth	r2, r3
 800a97a:	201c      	movs	r0, #28
 800a97c:	183b      	adds	r3, r7, r0
 800a97e:	4916      	ldr	r1, [pc, #88]	; (800a9d8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800a980:	400a      	ands	r2, r1
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	001a      	movs	r2, r3
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	18d3      	adds	r3, r2, r3
 800a992:	183a      	adds	r2, r7, r0
 800a994:	8812      	ldrh	r2, [r2, #0]
 800a996:	4911      	ldr	r1, [pc, #68]	; (800a9dc <HAL_PCD_EP_DB_Receive+0x230>)
 800a998:	430a      	orrs	r2, r1
 800a99a:	b292      	uxth	r2, r2
 800a99c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800a99e:	241a      	movs	r4, #26
 800a9a0:	193b      	adds	r3, r7, r4
 800a9a2:	881b      	ldrh	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6959      	ldr	r1, [r3, #20]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	895a      	ldrh	r2, [r3, #10]
 800a9b4:	193b      	adds	r3, r7, r4
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	f004 fea8 	bl	800f70c <USB_ReadPMA>
    }
  }

  return count;
 800a9bc:	231a      	movs	r3, #26
 800a9be:	18fb      	adds	r3, r7, r3
 800a9c0:	881b      	ldrh	r3, [r3, #0]
}
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b009      	add	sp, #36	; 0x24
 800a9c8:	bd90      	pop	{r4, r7, pc}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	00000402 	.word	0x00000402
 800a9d0:	ffffbf8f 	.word	0xffffbf8f
 800a9d4:	ffff8080 	.word	0xffff8080
 800a9d8:	ffff8f8f 	.word	0xffff8f8f
 800a9dc:	ffff80c0 	.word	0xffff80c0
 800a9e0:	00000406 	.word	0x00000406

0800a9e4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b094      	sub	sp, #80	; 0x50
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	1dbb      	adds	r3, r7, #6
 800a9f0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9f2:	1dbb      	adds	r3, r7, #6
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	2240      	movs	r2, #64	; 0x40
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	d100      	bne.n	800a9fe <HAL_PCD_EP_DB_Transmit+0x1a>
 800a9fc:	e12e      	b.n	800ac5c <HAL_PCD_EP_DB_Transmit+0x278>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2250      	movs	r2, #80	; 0x50
 800aa04:	5a9b      	ldrh	r3, [r3, r2]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	001a      	movs	r2, r3
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	18d2      	adds	r2, r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	18d3      	adds	r3, r2, r3
 800aa18:	4abb      	ldr	r2, [pc, #748]	; (800ad08 <HAL_PCD_EP_DB_Transmit+0x324>)
 800aa1a:	4694      	mov	ip, r2
 800aa1c:	4463      	add	r3, ip
 800aa1e:	881a      	ldrh	r2, [r3, #0]
 800aa20:	2148      	movs	r1, #72	; 0x48
 800aa22:	187b      	adds	r3, r7, r1
 800aa24:	0592      	lsls	r2, r2, #22
 800aa26:	0d92      	lsrs	r2, r2, #22
 800aa28:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d907      	bls.n	800aa46 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	187b      	adds	r3, r7, r1
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	619a      	str	r2, [r3, #24]
 800aa44:	e002      	b.n	800aa4c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d129      	bne.n	800aaa8 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	0011      	movs	r1, r2
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f006 f942 	bl	8010ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aa62:	1dbb      	adds	r3, r7, #6
 800aa64:	881a      	ldrh	r2, [r3, #0]
 800aa66:	2380      	movs	r3, #128	; 0x80
 800aa68:	01db      	lsls	r3, r3, #7
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	d100      	bne.n	800aa70 <HAL_PCD_EP_DB_Transmit+0x8c>
 800aa6e:	e230      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	001a      	movs	r2, r3
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	18d3      	adds	r3, r2, r3
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	2016      	movs	r0, #22
 800aa84:	183b      	adds	r3, r7, r0
 800aa86:	49a1      	ldr	r1, [pc, #644]	; (800ad0c <HAL_PCD_EP_DB_Transmit+0x328>)
 800aa88:	400a      	ands	r2, r1
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	001a      	movs	r2, r3
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	18d3      	adds	r3, r2, r3
 800aa9a:	183a      	adds	r2, r7, r0
 800aa9c:	8812      	ldrh	r2, [r2, #0]
 800aa9e:	499c      	ldr	r1, [pc, #624]	; (800ad10 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	b292      	uxth	r2, r2
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	e214      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800aaa8:	1dbb      	adds	r3, r7, #6
 800aaaa:	881a      	ldrh	r2, [r3, #0]
 800aaac:	2380      	movs	r3, #128	; 0x80
 800aaae:	01db      	lsls	r3, r3, #7
 800aab0:	4013      	ands	r3, r2
 800aab2:	d01a      	beq.n	800aaea <HAL_PCD_EP_DB_Transmit+0x106>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	001a      	movs	r2, r3
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	18d3      	adds	r3, r2, r3
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	202a      	movs	r0, #42	; 0x2a
 800aac8:	183b      	adds	r3, r7, r0
 800aaca:	4990      	ldr	r1, [pc, #576]	; (800ad0c <HAL_PCD_EP_DB_Transmit+0x328>)
 800aacc:	400a      	ands	r2, r1
 800aace:	801a      	strh	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	001a      	movs	r2, r3
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	18d3      	adds	r3, r2, r3
 800aade:	183a      	adds	r2, r7, r0
 800aae0:	8812      	ldrh	r2, [r2, #0]
 800aae2:	498b      	ldr	r1, [pc, #556]	; (800ad10 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800aae4:	430a      	orrs	r2, r1
 800aae6:	b292      	uxth	r2, r2
 800aae8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2224      	movs	r2, #36	; 0x24
 800aaee:	5c9b      	ldrb	r3, [r3, r2]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d000      	beq.n	800aaf6 <HAL_PCD_EP_DB_Transmit+0x112>
 800aaf4:	e1ed      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	695a      	ldr	r2, [r3, #20]
 800aafa:	2148      	movs	r1, #72	; 0x48
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	18d2      	adds	r2, r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	69da      	ldr	r2, [r3, #28]
 800ab0a:	187b      	adds	r3, r7, r1
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	18d2      	adds	r2, r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6a1a      	ldr	r2, [r3, #32]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d309      	bcc.n	800ab34 <HAL_PCD_EP_DB_Transmit+0x150>
        {
          len = ep->maxpacket;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab2c:	1ad2      	subs	r2, r2, r3
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	621a      	str	r2, [r3, #32]
 800ab32:	e016      	b.n	800ab62 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else if (ep->xfer_len_db == 0U)
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d108      	bne.n	800ab4e <HAL_PCD_EP_DB_Transmit+0x16a>
        {
          len = TxByteNbre;
 800ab3c:	2348      	movs	r3, #72	; 0x48
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2224      	movs	r2, #36	; 0x24
 800ab48:	2100      	movs	r1, #0
 800ab4a:	5499      	strb	r1, [r3, r2]
 800ab4c:	e009      	b.n	800ab62 <HAL_PCD_EP_DB_Transmit+0x17e>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2224      	movs	r2, #36	; 0x24
 800ab52:	2100      	movs	r1, #0
 800ab54:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d150      	bne.n	800ac0c <HAL_PCD_EP_DB_Transmit+0x228>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	61fb      	str	r3, [r7, #28]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2250      	movs	r2, #80	; 0x50
 800ab76:	5a9b      	ldrh	r3, [r3, r2]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	001a      	movs	r2, r3
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	189b      	adds	r3, r3, r2
 800ab80:	61fb      	str	r3, [r7, #28]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00da      	lsls	r2, r3, #3
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	18d3      	adds	r3, r2, r3
 800ab8c:	4a5e      	ldr	r2, [pc, #376]	; (800ad08 <HAL_PCD_EP_DB_Transmit+0x324>)
 800ab8e:	4694      	mov	ip, r2
 800ab90:	4463      	add	r3, ip
 800ab92:	61bb      	str	r3, [r7, #24]
 800ab94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d110      	bne.n	800abbc <HAL_PCD_EP_DB_Transmit+0x1d8>
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	4a5c      	ldr	r2, [pc, #368]	; (800ad14 <HAL_PCD_EP_DB_Transmit+0x330>)
 800aba2:	4013      	ands	r3, r2
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4a59      	ldr	r2, [pc, #356]	; (800ad18 <HAL_PCD_EP_DB_Transmit+0x334>)
 800abb2:	4313      	orrs	r3, r2
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	801a      	strh	r2, [r3, #0]
 800abba:	e044      	b.n	800ac46 <HAL_PCD_EP_DB_Transmit+0x262>
 800abbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abbe:	2b3e      	cmp	r3, #62	; 0x3e
 800abc0:	d810      	bhi.n	800abe4 <HAL_PCD_EP_DB_Transmit+0x200>
 800abc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abca:	2201      	movs	r2, #1
 800abcc:	4013      	ands	r3, r2
 800abce:	d002      	beq.n	800abd6 <HAL_PCD_EP_DB_Transmit+0x1f2>
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	3301      	adds	r3, #1
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	b29b      	uxth	r3, r3
 800abda:	029b      	lsls	r3, r3, #10
 800abdc:	b29a      	uxth	r2, r3
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e030      	b.n	800ac46 <HAL_PCD_EP_DB_Transmit+0x262>
 800abe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abec:	221f      	movs	r2, #31
 800abee:	4013      	ands	r3, r2
 800abf0:	d102      	bne.n	800abf8 <HAL_PCD_EP_DB_Transmit+0x214>
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	3b01      	subs	r3, #1
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	029b      	lsls	r3, r3, #10
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	4a45      	ldr	r2, [pc, #276]	; (800ad18 <HAL_PCD_EP_DB_Transmit+0x334>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	e01c      	b.n	800ac46 <HAL_PCD_EP_DB_Transmit+0x262>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	785b      	ldrb	r3, [r3, #1]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d118      	bne.n	800ac46 <HAL_PCD_EP_DB_Transmit+0x262>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2250      	movs	r2, #80	; 0x50
 800ac20:	5a9b      	ldrh	r3, [r3, r2]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	001a      	movs	r2, r3
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	189b      	adds	r3, r3, r2
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	00da      	lsls	r2, r3, #3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	18d3      	adds	r3, r2, r3
 800ac36:	4a34      	ldr	r2, [pc, #208]	; (800ad08 <HAL_PCD_EP_DB_Transmit+0x324>)
 800ac38:	4694      	mov	ip, r2
 800ac3a:	4463      	add	r3, ip
 800ac3c:	623b      	str	r3, [r7, #32]
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	6959      	ldr	r1, [r3, #20]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	891a      	ldrh	r2, [r3, #8]
 800ac52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f004 fd15 	bl	800f684 <USB_WritePMA>
 800ac5a:	e13a      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2250      	movs	r2, #80	; 0x50
 800ac62:	5a9b      	ldrh	r3, [r3, r2]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	001a      	movs	r2, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	18d2      	adds	r2, r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	18d3      	adds	r3, r2, r3
 800ac76:	4a29      	ldr	r2, [pc, #164]	; (800ad1c <HAL_PCD_EP_DB_Transmit+0x338>)
 800ac78:	4694      	mov	ip, r2
 800ac7a:	4463      	add	r3, ip
 800ac7c:	881a      	ldrh	r2, [r3, #0]
 800ac7e:	2148      	movs	r1, #72	; 0x48
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	0592      	lsls	r2, r2, #22
 800ac84:	0d92      	lsrs	r2, r2, #22
 800ac86:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	699a      	ldr	r2, [r3, #24]
 800ac8c:	187b      	adds	r3, r7, r1
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d307      	bcc.n	800aca4 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	187b      	adds	r3, r7, r1
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	1ad2      	subs	r2, r2, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	619a      	str	r2, [r3, #24]
 800aca2:	e002      	b.n	800acaa <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2200      	movs	r2, #0
 800aca8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	699b      	ldr	r3, [r3, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d136      	bne.n	800ad20 <HAL_PCD_EP_DB_Transmit+0x33c>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	0011      	movs	r1, r2
 800acba:	0018      	movs	r0, r3
 800acbc:	f006 f813 	bl	8010ce6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800acc0:	1dbb      	adds	r3, r7, #6
 800acc2:	881a      	ldrh	r2, [r3, #0]
 800acc4:	2380      	movs	r3, #128	; 0x80
 800acc6:	01db      	lsls	r3, r3, #7
 800acc8:	4013      	ands	r3, r2
 800acca:	d000      	beq.n	800acce <HAL_PCD_EP_DB_Transmit+0x2ea>
 800accc:	e101      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	001a      	movs	r2, r3
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	18d3      	adds	r3, r2, r3
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	b29a      	uxth	r2, r3
 800ace0:	204a      	movs	r0, #74	; 0x4a
 800ace2:	183b      	adds	r3, r7, r0
 800ace4:	4909      	ldr	r1, [pc, #36]	; (800ad0c <HAL_PCD_EP_DB_Transmit+0x328>)
 800ace6:	400a      	ands	r2, r1
 800ace8:	801a      	strh	r2, [r3, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	001a      	movs	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	18d3      	adds	r3, r2, r3
 800acf8:	183a      	adds	r2, r7, r0
 800acfa:	8812      	ldrh	r2, [r2, #0]
 800acfc:	4904      	ldr	r1, [pc, #16]	; (800ad10 <HAL_PCD_EP_DB_Transmit+0x32c>)
 800acfe:	430a      	orrs	r2, r1
 800ad00:	b292      	uxth	r2, r2
 800ad02:	801a      	strh	r2, [r3, #0]
 800ad04:	e0e5      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	00000402 	.word	0x00000402
 800ad0c:	ffff8f8f 	.word	0xffff8f8f
 800ad10:	ffffc080 	.word	0xffffc080
 800ad14:	ffff83ff 	.word	0xffff83ff
 800ad18:	ffff8000 	.word	0xffff8000
 800ad1c:	00000406 	.word	0x00000406
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ad20:	1dbb      	adds	r3, r7, #6
 800ad22:	881a      	ldrh	r2, [r3, #0]
 800ad24:	2380      	movs	r3, #128	; 0x80
 800ad26:	01db      	lsls	r3, r3, #7
 800ad28:	4013      	ands	r3, r2
 800ad2a:	d11a      	bne.n	800ad62 <HAL_PCD_EP_DB_Transmit+0x37e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	001a      	movs	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	18d3      	adds	r3, r2, r3
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	2032      	movs	r0, #50	; 0x32
 800ad40:	183b      	adds	r3, r7, r0
 800ad42:	497a      	ldr	r1, [pc, #488]	; (800af2c <HAL_PCD_EP_DB_Transmit+0x548>)
 800ad44:	400a      	ands	r2, r1
 800ad46:	801a      	strh	r2, [r3, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	001a      	movs	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	18d3      	adds	r3, r2, r3
 800ad56:	183a      	adds	r2, r7, r0
 800ad58:	8812      	ldrh	r2, [r2, #0]
 800ad5a:	4975      	ldr	r1, [pc, #468]	; (800af30 <HAL_PCD_EP_DB_Transmit+0x54c>)
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2224      	movs	r2, #36	; 0x24
 800ad66:	5c9b      	ldrb	r3, [r3, r2]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d000      	beq.n	800ad6e <HAL_PCD_EP_DB_Transmit+0x38a>
 800ad6c:	e0b1      	b.n	800aed2 <HAL_PCD_EP_DB_Transmit+0x4ee>
      {
        ep->xfer_buff += TxByteNbre;
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	695a      	ldr	r2, [r3, #20]
 800ad72:	2148      	movs	r1, #72	; 0x48
 800ad74:	187b      	adds	r3, r7, r1
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	18d2      	adds	r2, r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	69da      	ldr	r2, [r3, #28]
 800ad82:	187b      	adds	r3, r7, r1
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	18d2      	adds	r2, r2, r3
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	6a1a      	ldr	r2, [r3, #32]
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d309      	bcc.n	800adac <HAL_PCD_EP_DB_Transmit+0x3c8>
        {
          len = ep->maxpacket;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	6a1a      	ldr	r2, [r3, #32]
 800ada2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada4:	1ad2      	subs	r2, r2, r3
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	621a      	str	r2, [r3, #32]
 800adaa:	e016      	b.n	800adda <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else if (ep->xfer_len_db == 0U)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d108      	bne.n	800adc6 <HAL_PCD_EP_DB_Transmit+0x3e2>
        {
          len = TxByteNbre;
 800adb4:	2348      	movs	r3, #72	; 0x48
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2224      	movs	r2, #36	; 0x24
 800adc0:	2100      	movs	r1, #0
 800adc2:	5499      	strb	r1, [r3, r2]
 800adc4:	e009      	b.n	800adda <HAL_PCD_EP_DB_Transmit+0x3f6>
        }
        else
        {
          len = ep->xfer_len_db;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2200      	movs	r2, #0
 800add0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2224      	movs	r2, #36	; 0x24
 800add6:	2100      	movs	r1, #0
 800add8:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	643b      	str	r3, [r7, #64]	; 0x40
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	785b      	ldrb	r3, [r3, #1]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d150      	bne.n	800ae8a <HAL_PCD_EP_DB_Transmit+0x4a6>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	63bb      	str	r3, [r7, #56]	; 0x38
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2250      	movs	r2, #80	; 0x50
 800adf4:	5a9b      	ldrh	r3, [r3, r2]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	001a      	movs	r2, r3
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	189b      	adds	r3, r3, r2
 800adfe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	00da      	lsls	r2, r3, #3
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	18d3      	adds	r3, r2, r3
 800ae0a:	4a4a      	ldr	r2, [pc, #296]	; (800af34 <HAL_PCD_EP_DB_Transmit+0x550>)
 800ae0c:	4694      	mov	ip, r2
 800ae0e:	4463      	add	r3, ip
 800ae10:	637b      	str	r3, [r7, #52]	; 0x34
 800ae12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d110      	bne.n	800ae3a <HAL_PCD_EP_DB_Transmit+0x456>
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	4a46      	ldr	r2, [pc, #280]	; (800af38 <HAL_PCD_EP_DB_Transmit+0x554>)
 800ae20:	4013      	ands	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2a:	881b      	ldrh	r3, [r3, #0]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	4a43      	ldr	r2, [pc, #268]	; (800af3c <HAL_PCD_EP_DB_Transmit+0x558>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e041      	b.n	800aebe <HAL_PCD_EP_DB_Transmit+0x4da>
 800ae3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae3c:	2b3e      	cmp	r3, #62	; 0x3e
 800ae3e:	d810      	bhi.n	800ae62 <HAL_PCD_EP_DB_Transmit+0x47e>
 800ae40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae42:	085b      	lsrs	r3, r3, #1
 800ae44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae48:	2201      	movs	r2, #1
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d002      	beq.n	800ae54 <HAL_PCD_EP_DB_Transmit+0x470>
 800ae4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae50:	3301      	adds	r3, #1
 800ae52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	029b      	lsls	r3, r3, #10
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	801a      	strh	r2, [r3, #0]
 800ae60:	e02d      	b.n	800aebe <HAL_PCD_EP_DB_Transmit+0x4da>
 800ae62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae64:	095b      	lsrs	r3, r3, #5
 800ae66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae6a:	221f      	movs	r2, #31
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	d102      	bne.n	800ae76 <HAL_PCD_EP_DB_Transmit+0x492>
 800ae70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae72:	3b01      	subs	r3, #1
 800ae74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	029b      	lsls	r3, r3, #10
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4a2f      	ldr	r2, [pc, #188]	; (800af3c <HAL_PCD_EP_DB_Transmit+0x558>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	801a      	strh	r2, [r3, #0]
 800ae88:	e019      	b.n	800aebe <HAL_PCD_EP_DB_Transmit+0x4da>
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	785b      	ldrb	r3, [r3, #1]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d115      	bne.n	800aebe <HAL_PCD_EP_DB_Transmit+0x4da>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2250      	movs	r2, #80	; 0x50
 800ae98:	5a9b      	ldrh	r3, [r3, r2]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	001a      	movs	r2, r3
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea0:	189b      	adds	r3, r3, r2
 800aea2:	643b      	str	r3, [r7, #64]	; 0x40
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	00da      	lsls	r2, r3, #3
 800aeaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	4a21      	ldr	r2, [pc, #132]	; (800af34 <HAL_PCD_EP_DB_Transmit+0x550>)
 800aeb0:	4694      	mov	ip, r2
 800aeb2:	4463      	add	r3, ip
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aebc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	6959      	ldr	r1, [r3, #20]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	895a      	ldrh	r2, [r3, #10]
 800aeca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f004 fbd9 	bl	800f684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	001a      	movs	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	18d3      	adds	r3, r2, r3
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	2014      	movs	r0, #20
 800aee6:	183b      	adds	r3, r7, r0
 800aee8:	4915      	ldr	r1, [pc, #84]	; (800af40 <HAL_PCD_EP_DB_Transmit+0x55c>)
 800aeea:	400a      	ands	r2, r1
 800aeec:	801a      	strh	r2, [r3, #0]
 800aeee:	183b      	adds	r3, r7, r0
 800aef0:	183a      	adds	r2, r7, r0
 800aef2:	8812      	ldrh	r2, [r2, #0]
 800aef4:	2110      	movs	r1, #16
 800aef6:	404a      	eors	r2, r1
 800aef8:	801a      	strh	r2, [r3, #0]
 800aefa:	183b      	adds	r3, r7, r0
 800aefc:	183a      	adds	r2, r7, r0
 800aefe:	8812      	ldrh	r2, [r2, #0]
 800af00:	2120      	movs	r1, #32
 800af02:	404a      	eors	r2, r1
 800af04:	801a      	strh	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	001a      	movs	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	18d3      	adds	r3, r2, r3
 800af14:	183a      	adds	r2, r7, r0
 800af16:	8812      	ldrh	r2, [r2, #0]
 800af18:	490a      	ldr	r1, [pc, #40]	; (800af44 <HAL_PCD_EP_DB_Transmit+0x560>)
 800af1a:	430a      	orrs	r2, r1
 800af1c:	b292      	uxth	r2, r2
 800af1e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	0018      	movs	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	b014      	add	sp, #80	; 0x50
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	46c0      	nop			; (mov r8, r8)
 800af2c:	ffff8f8f 	.word	0xffff8f8f
 800af30:	ffffc080 	.word	0xffffc080
 800af34:	00000406 	.word	0x00000406
 800af38:	ffff83ff 	.word	0xffff83ff
 800af3c:	ffff8000 	.word	0xffff8000
 800af40:	ffff8fbf 	.word	0xffff8fbf
 800af44:	ffff8080 	.word	0xffff8080

0800af48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	000a      	movs	r2, r1
 800af52:	1cfb      	adds	r3, r7, #3
 800af54:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	46bd      	mov	sp, r7
 800af5a:	b002      	add	sp, #8
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b088      	sub	sp, #32
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e305      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2201      	movs	r2, #1
 800af78:	4013      	ands	r3, r2
 800af7a:	d100      	bne.n	800af7e <HAL_RCC_OscConfig+0x1e>
 800af7c:	e08d      	b.n	800b09a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800af7e:	4bc5      	ldr	r3, [pc, #788]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	220c      	movs	r2, #12
 800af84:	4013      	ands	r3, r2
 800af86:	2b04      	cmp	r3, #4
 800af88:	d00e      	beq.n	800afa8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800af8a:	4bc2      	ldr	r3, [pc, #776]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	220c      	movs	r2, #12
 800af90:	4013      	ands	r3, r2
 800af92:	2b08      	cmp	r3, #8
 800af94:	d116      	bne.n	800afc4 <HAL_RCC_OscConfig+0x64>
 800af96:	4bbf      	ldr	r3, [pc, #764]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	23c0      	movs	r3, #192	; 0xc0
 800af9c:	025b      	lsls	r3, r3, #9
 800af9e:	401a      	ands	r2, r3
 800afa0:	2380      	movs	r3, #128	; 0x80
 800afa2:	025b      	lsls	r3, r3, #9
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d10d      	bne.n	800afc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afa8:	4bba      	ldr	r3, [pc, #744]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	2380      	movs	r3, #128	; 0x80
 800afae:	029b      	lsls	r3, r3, #10
 800afb0:	4013      	ands	r3, r2
 800afb2:	d100      	bne.n	800afb6 <HAL_RCC_OscConfig+0x56>
 800afb4:	e070      	b.n	800b098 <HAL_RCC_OscConfig+0x138>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d000      	beq.n	800afc0 <HAL_RCC_OscConfig+0x60>
 800afbe:	e06b      	b.n	800b098 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e2dc      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d107      	bne.n	800afdc <HAL_RCC_OscConfig+0x7c>
 800afcc:	4bb1      	ldr	r3, [pc, #708]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	4bb0      	ldr	r3, [pc, #704]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800afd2:	2180      	movs	r1, #128	; 0x80
 800afd4:	0249      	lsls	r1, r1, #9
 800afd6:	430a      	orrs	r2, r1
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e02f      	b.n	800b03c <HAL_RCC_OscConfig+0xdc>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10c      	bne.n	800affe <HAL_RCC_OscConfig+0x9e>
 800afe4:	4bab      	ldr	r3, [pc, #684]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	4baa      	ldr	r3, [pc, #680]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800afea:	49ab      	ldr	r1, [pc, #684]	; (800b298 <HAL_RCC_OscConfig+0x338>)
 800afec:	400a      	ands	r2, r1
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	4ba8      	ldr	r3, [pc, #672]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	4ba7      	ldr	r3, [pc, #668]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800aff6:	49a9      	ldr	r1, [pc, #676]	; (800b29c <HAL_RCC_OscConfig+0x33c>)
 800aff8:	400a      	ands	r2, r1
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	e01e      	b.n	800b03c <HAL_RCC_OscConfig+0xdc>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b05      	cmp	r3, #5
 800b004:	d10e      	bne.n	800b024 <HAL_RCC_OscConfig+0xc4>
 800b006:	4ba3      	ldr	r3, [pc, #652]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	4ba2      	ldr	r3, [pc, #648]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b00c:	2180      	movs	r1, #128	; 0x80
 800b00e:	02c9      	lsls	r1, r1, #11
 800b010:	430a      	orrs	r2, r1
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	4b9f      	ldr	r3, [pc, #636]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	4b9e      	ldr	r3, [pc, #632]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	0249      	lsls	r1, r1, #9
 800b01e:	430a      	orrs	r2, r1
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e00b      	b.n	800b03c <HAL_RCC_OscConfig+0xdc>
 800b024:	4b9b      	ldr	r3, [pc, #620]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	4b9a      	ldr	r3, [pc, #616]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b02a:	499b      	ldr	r1, [pc, #620]	; (800b298 <HAL_RCC_OscConfig+0x338>)
 800b02c:	400a      	ands	r2, r1
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	4b98      	ldr	r3, [pc, #608]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b97      	ldr	r3, [pc, #604]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b036:	4999      	ldr	r1, [pc, #612]	; (800b29c <HAL_RCC_OscConfig+0x33c>)
 800b038:	400a      	ands	r2, r1
 800b03a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d014      	beq.n	800b06e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b044:	f7fe fb42 	bl	80096cc <HAL_GetTick>
 800b048:	0003      	movs	r3, r0
 800b04a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b04c:	e008      	b.n	800b060 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b04e:	f7fe fb3d 	bl	80096cc <HAL_GetTick>
 800b052:	0002      	movs	r2, r0
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	1ad3      	subs	r3, r2, r3
 800b058:	2b64      	cmp	r3, #100	; 0x64
 800b05a:	d901      	bls.n	800b060 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e28e      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b060:	4b8c      	ldr	r3, [pc, #560]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	2380      	movs	r3, #128	; 0x80
 800b066:	029b      	lsls	r3, r3, #10
 800b068:	4013      	ands	r3, r2
 800b06a:	d0f0      	beq.n	800b04e <HAL_RCC_OscConfig+0xee>
 800b06c:	e015      	b.n	800b09a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b06e:	f7fe fb2d 	bl	80096cc <HAL_GetTick>
 800b072:	0003      	movs	r3, r0
 800b074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b076:	e008      	b.n	800b08a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b078:	f7fe fb28 	bl	80096cc <HAL_GetTick>
 800b07c:	0002      	movs	r2, r0
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	2b64      	cmp	r3, #100	; 0x64
 800b084:	d901      	bls.n	800b08a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e279      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b08a:	4b82      	ldr	r3, [pc, #520]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	2380      	movs	r3, #128	; 0x80
 800b090:	029b      	lsls	r3, r3, #10
 800b092:	4013      	ands	r3, r2
 800b094:	d1f0      	bne.n	800b078 <HAL_RCC_OscConfig+0x118>
 800b096:	e000      	b.n	800b09a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b098:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	d100      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x146>
 800b0a4:	e06c      	b.n	800b180 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800b0a6:	4b7b      	ldr	r3, [pc, #492]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	220c      	movs	r2, #12
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	d00e      	beq.n	800b0ce <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800b0b0:	4b78      	ldr	r3, [pc, #480]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	220c      	movs	r2, #12
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	2b08      	cmp	r3, #8
 800b0ba:	d11f      	bne.n	800b0fc <HAL_RCC_OscConfig+0x19c>
 800b0bc:	4b75      	ldr	r3, [pc, #468]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	23c0      	movs	r3, #192	; 0xc0
 800b0c2:	025b      	lsls	r3, r3, #9
 800b0c4:	401a      	ands	r2, r3
 800b0c6:	2380      	movs	r3, #128	; 0x80
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d116      	bne.n	800b0fc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0ce:	4b71      	ldr	r3, [pc, #452]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x184>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d001      	beq.n	800b0e4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e24c      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0e4:	4b6b      	ldr	r3, [pc, #428]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	22f8      	movs	r2, #248	; 0xf8
 800b0ea:	4393      	bics	r3, r2
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	00da      	lsls	r2, r3, #3
 800b0f4:	4b67      	ldr	r3, [pc, #412]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0fa:	e041      	b.n	800b180 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d024      	beq.n	800b14e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b104:	4b63      	ldr	r3, [pc, #396]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	4b62      	ldr	r3, [pc, #392]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b10a:	2101      	movs	r1, #1
 800b10c:	430a      	orrs	r2, r1
 800b10e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b110:	f7fe fadc 	bl	80096cc <HAL_GetTick>
 800b114:	0003      	movs	r3, r0
 800b116:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b118:	e008      	b.n	800b12c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b11a:	f7fe fad7 	bl	80096cc <HAL_GetTick>
 800b11e:	0002      	movs	r2, r0
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	d901      	bls.n	800b12c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e228      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b12c:	4b59      	ldr	r3, [pc, #356]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2202      	movs	r2, #2
 800b132:	4013      	ands	r3, r2
 800b134:	d0f1      	beq.n	800b11a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b136:	4b57      	ldr	r3, [pc, #348]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	22f8      	movs	r2, #248	; 0xf8
 800b13c:	4393      	bics	r3, r2
 800b13e:	0019      	movs	r1, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	00da      	lsls	r2, r3, #3
 800b146:	4b53      	ldr	r3, [pc, #332]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b148:	430a      	orrs	r2, r1
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	e018      	b.n	800b180 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b14e:	4b51      	ldr	r3, [pc, #324]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b50      	ldr	r3, [pc, #320]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b154:	2101      	movs	r1, #1
 800b156:	438a      	bics	r2, r1
 800b158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b15a:	f7fe fab7 	bl	80096cc <HAL_GetTick>
 800b15e:	0003      	movs	r3, r0
 800b160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b162:	e008      	b.n	800b176 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b164:	f7fe fab2 	bl	80096cc <HAL_GetTick>
 800b168:	0002      	movs	r2, r0
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d901      	bls.n	800b176 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e203      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b176:	4b47      	ldr	r3, [pc, #284]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2202      	movs	r2, #2
 800b17c:	4013      	ands	r3, r2
 800b17e:	d1f1      	bne.n	800b164 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2208      	movs	r2, #8
 800b186:	4013      	ands	r3, r2
 800b188:	d036      	beq.n	800b1f8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d019      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b192:	4b40      	ldr	r3, [pc, #256]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b196:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b198:	2101      	movs	r1, #1
 800b19a:	430a      	orrs	r2, r1
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b19e:	f7fe fa95 	bl	80096cc <HAL_GetTick>
 800b1a2:	0003      	movs	r3, r0
 800b1a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1a8:	f7fe fa90 	bl	80096cc <HAL_GetTick>
 800b1ac:	0002      	movs	r2, r0
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e1e1      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1ba:	4b36      	ldr	r3, [pc, #216]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	2202      	movs	r2, #2
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d0f1      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x248>
 800b1c4:	e018      	b.n	800b1f8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1c6:	4b33      	ldr	r3, [pc, #204]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b1c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1ca:	4b32      	ldr	r3, [pc, #200]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	438a      	bics	r2, r1
 800b1d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1d2:	f7fe fa7b 	bl	80096cc <HAL_GetTick>
 800b1d6:	0003      	movs	r3, r0
 800b1d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1da:	e008      	b.n	800b1ee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1dc:	f7fe fa76 	bl	80096cc <HAL_GetTick>
 800b1e0:	0002      	movs	r2, r0
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d901      	bls.n	800b1ee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e1c7      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1ee:	4b29      	ldr	r3, [pc, #164]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	d1f1      	bne.n	800b1dc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2204      	movs	r2, #4
 800b1fe:	4013      	ands	r3, r2
 800b200:	d100      	bne.n	800b204 <HAL_RCC_OscConfig+0x2a4>
 800b202:	e0b5      	b.n	800b370 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b204:	201f      	movs	r0, #31
 800b206:	183b      	adds	r3, r7, r0
 800b208:	2200      	movs	r2, #0
 800b20a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b20c:	4b21      	ldr	r3, [pc, #132]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	2380      	movs	r3, #128	; 0x80
 800b212:	055b      	lsls	r3, r3, #21
 800b214:	4013      	ands	r3, r2
 800b216:	d110      	bne.n	800b23a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b218:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b21a:	69da      	ldr	r2, [r3, #28]
 800b21c:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b21e:	2180      	movs	r1, #128	; 0x80
 800b220:	0549      	lsls	r1, r1, #21
 800b222:	430a      	orrs	r2, r1
 800b224:	61da      	str	r2, [r3, #28]
 800b226:	4b1b      	ldr	r3, [pc, #108]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b228:	69da      	ldr	r2, [r3, #28]
 800b22a:	2380      	movs	r3, #128	; 0x80
 800b22c:	055b      	lsls	r3, r3, #21
 800b22e:	4013      	ands	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
 800b232:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b234:	183b      	adds	r3, r7, r0
 800b236:	2201      	movs	r2, #1
 800b238:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b23a:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <HAL_RCC_OscConfig+0x340>)
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	2380      	movs	r3, #128	; 0x80
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4013      	ands	r3, r2
 800b244:	d11a      	bne.n	800b27c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b246:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <HAL_RCC_OscConfig+0x340>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <HAL_RCC_OscConfig+0x340>)
 800b24c:	2180      	movs	r1, #128	; 0x80
 800b24e:	0049      	lsls	r1, r1, #1
 800b250:	430a      	orrs	r2, r1
 800b252:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b254:	f7fe fa3a 	bl	80096cc <HAL_GetTick>
 800b258:	0003      	movs	r3, r0
 800b25a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b25c:	e008      	b.n	800b270 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b25e:	f7fe fa35 	bl	80096cc <HAL_GetTick>
 800b262:	0002      	movs	r2, r0
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b64      	cmp	r3, #100	; 0x64
 800b26a:	d901      	bls.n	800b270 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e186      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b270:	4b0b      	ldr	r3, [pc, #44]	; (800b2a0 <HAL_RCC_OscConfig+0x340>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	2380      	movs	r3, #128	; 0x80
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	4013      	ands	r3, r2
 800b27a:	d0f0      	beq.n	800b25e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d10f      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x344>
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b286:	6a1a      	ldr	r2, [r3, #32]
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <HAL_RCC_OscConfig+0x334>)
 800b28a:	2101      	movs	r1, #1
 800b28c:	430a      	orrs	r2, r1
 800b28e:	621a      	str	r2, [r3, #32]
 800b290:	e036      	b.n	800b300 <HAL_RCC_OscConfig+0x3a0>
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	40021000 	.word	0x40021000
 800b298:	fffeffff 	.word	0xfffeffff
 800b29c:	fffbffff 	.word	0xfffbffff
 800b2a0:	40007000 	.word	0x40007000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <HAL_RCC_OscConfig+0x366>
 800b2ac:	4bb6      	ldr	r3, [pc, #728]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2ae:	6a1a      	ldr	r2, [r3, #32]
 800b2b0:	4bb5      	ldr	r3, [pc, #724]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	438a      	bics	r2, r1
 800b2b6:	621a      	str	r2, [r3, #32]
 800b2b8:	4bb3      	ldr	r3, [pc, #716]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2ba:	6a1a      	ldr	r2, [r3, #32]
 800b2bc:	4bb2      	ldr	r3, [pc, #712]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2be:	2104      	movs	r1, #4
 800b2c0:	438a      	bics	r2, r1
 800b2c2:	621a      	str	r2, [r3, #32]
 800b2c4:	e01c      	b.n	800b300 <HAL_RCC_OscConfig+0x3a0>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	2b05      	cmp	r3, #5
 800b2cc:	d10c      	bne.n	800b2e8 <HAL_RCC_OscConfig+0x388>
 800b2ce:	4bae      	ldr	r3, [pc, #696]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2d0:	6a1a      	ldr	r2, [r3, #32]
 800b2d2:	4bad      	ldr	r3, [pc, #692]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	621a      	str	r2, [r3, #32]
 800b2da:	4bab      	ldr	r3, [pc, #684]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2dc:	6a1a      	ldr	r2, [r3, #32]
 800b2de:	4baa      	ldr	r3, [pc, #680]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	621a      	str	r2, [r3, #32]
 800b2e6:	e00b      	b.n	800b300 <HAL_RCC_OscConfig+0x3a0>
 800b2e8:	4ba7      	ldr	r3, [pc, #668]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2ea:	6a1a      	ldr	r2, [r3, #32]
 800b2ec:	4ba6      	ldr	r3, [pc, #664]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	438a      	bics	r2, r1
 800b2f2:	621a      	str	r2, [r3, #32]
 800b2f4:	4ba4      	ldr	r3, [pc, #656]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2f6:	6a1a      	ldr	r2, [r3, #32]
 800b2f8:	4ba3      	ldr	r3, [pc, #652]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b2fa:	2104      	movs	r1, #4
 800b2fc:	438a      	bics	r2, r1
 800b2fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d014      	beq.n	800b332 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b308:	f7fe f9e0 	bl	80096cc <HAL_GetTick>
 800b30c:	0003      	movs	r3, r0
 800b30e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b310:	e009      	b.n	800b326 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b312:	f7fe f9db 	bl	80096cc <HAL_GetTick>
 800b316:	0002      	movs	r2, r0
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	4a9b      	ldr	r2, [pc, #620]	; (800b58c <HAL_RCC_OscConfig+0x62c>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d901      	bls.n	800b326 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e12b      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b326:	4b98      	ldr	r3, [pc, #608]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	2202      	movs	r2, #2
 800b32c:	4013      	ands	r3, r2
 800b32e:	d0f0      	beq.n	800b312 <HAL_RCC_OscConfig+0x3b2>
 800b330:	e013      	b.n	800b35a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b332:	f7fe f9cb 	bl	80096cc <HAL_GetTick>
 800b336:	0003      	movs	r3, r0
 800b338:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b33a:	e009      	b.n	800b350 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b33c:	f7fe f9c6 	bl	80096cc <HAL_GetTick>
 800b340:	0002      	movs	r2, r0
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	4a91      	ldr	r2, [pc, #580]	; (800b58c <HAL_RCC_OscConfig+0x62c>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d901      	bls.n	800b350 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e116      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b350:	4b8d      	ldr	r3, [pc, #564]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	2202      	movs	r2, #2
 800b356:	4013      	ands	r3, r2
 800b358:	d1f0      	bne.n	800b33c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b35a:	231f      	movs	r3, #31
 800b35c:	18fb      	adds	r3, r7, r3
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d105      	bne.n	800b370 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b364:	4b88      	ldr	r3, [pc, #544]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b366:	69da      	ldr	r2, [r3, #28]
 800b368:	4b87      	ldr	r3, [pc, #540]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b36a:	4989      	ldr	r1, [pc, #548]	; (800b590 <HAL_RCC_OscConfig+0x630>)
 800b36c:	400a      	ands	r2, r1
 800b36e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2210      	movs	r2, #16
 800b376:	4013      	ands	r3, r2
 800b378:	d063      	beq.n	800b442 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d12a      	bne.n	800b3d8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b382:	4b81      	ldr	r3, [pc, #516]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b386:	4b80      	ldr	r3, [pc, #512]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b388:	2104      	movs	r1, #4
 800b38a:	430a      	orrs	r2, r1
 800b38c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800b38e:	4b7e      	ldr	r3, [pc, #504]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b392:	4b7d      	ldr	r3, [pc, #500]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b394:	2101      	movs	r1, #1
 800b396:	430a      	orrs	r2, r1
 800b398:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b39a:	f7fe f997 	bl	80096cc <HAL_GetTick>
 800b39e:	0003      	movs	r3, r0
 800b3a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b3a2:	e008      	b.n	800b3b6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b3a4:	f7fe f992 	bl	80096cc <HAL_GetTick>
 800b3a8:	0002      	movs	r2, r0
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	d901      	bls.n	800b3b6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e0e3      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800b3b6:	4b74      	ldr	r3, [pc, #464]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	4013      	ands	r3, r2
 800b3be:	d0f1      	beq.n	800b3a4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b3c0:	4b71      	ldr	r3, [pc, #452]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c4:	22f8      	movs	r2, #248	; 0xf8
 800b3c6:	4393      	bics	r3, r2
 800b3c8:	0019      	movs	r1, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	00da      	lsls	r2, r3, #3
 800b3d0:	4b6d      	ldr	r3, [pc, #436]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	635a      	str	r2, [r3, #52]	; 0x34
 800b3d6:	e034      	b.n	800b442 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	3305      	adds	r3, #5
 800b3de:	d111      	bne.n	800b404 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800b3e0:	4b69      	ldr	r3, [pc, #420]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3e4:	4b68      	ldr	r3, [pc, #416]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3e6:	2104      	movs	r1, #4
 800b3e8:	438a      	bics	r2, r1
 800b3ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800b3ec:	4b66      	ldr	r3, [pc, #408]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f0:	22f8      	movs	r2, #248	; 0xf8
 800b3f2:	4393      	bics	r3, r2
 800b3f4:	0019      	movs	r1, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	00da      	lsls	r2, r3, #3
 800b3fc:	4b62      	ldr	r3, [pc, #392]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b3fe:	430a      	orrs	r2, r1
 800b400:	635a      	str	r2, [r3, #52]	; 0x34
 800b402:	e01e      	b.n	800b442 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800b404:	4b60      	ldr	r3, [pc, #384]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b408:	4b5f      	ldr	r3, [pc, #380]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b40a:	2104      	movs	r1, #4
 800b40c:	430a      	orrs	r2, r1
 800b40e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800b410:	4b5d      	ldr	r3, [pc, #372]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b414:	4b5c      	ldr	r3, [pc, #368]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b416:	2101      	movs	r1, #1
 800b418:	438a      	bics	r2, r1
 800b41a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b41c:	f7fe f956 	bl	80096cc <HAL_GetTick>
 800b420:	0003      	movs	r3, r0
 800b422:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b424:	e008      	b.n	800b438 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800b426:	f7fe f951 	bl	80096cc <HAL_GetTick>
 800b42a:	0002      	movs	r2, r0
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d901      	bls.n	800b438 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e0a2      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800b438:	4b53      	ldr	r3, [pc, #332]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43c:	2202      	movs	r2, #2
 800b43e:	4013      	ands	r3, r2
 800b440:	d1f1      	bne.n	800b426 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d100      	bne.n	800b44c <HAL_RCC_OscConfig+0x4ec>
 800b44a:	e097      	b.n	800b57c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b44c:	4b4e      	ldr	r3, [pc, #312]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	220c      	movs	r2, #12
 800b452:	4013      	ands	r3, r2
 800b454:	2b08      	cmp	r3, #8
 800b456:	d100      	bne.n	800b45a <HAL_RCC_OscConfig+0x4fa>
 800b458:	e06b      	b.n	800b532 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d14c      	bne.n	800b4fc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b462:	4b49      	ldr	r3, [pc, #292]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b48      	ldr	r3, [pc, #288]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b468:	494a      	ldr	r1, [pc, #296]	; (800b594 <HAL_RCC_OscConfig+0x634>)
 800b46a:	400a      	ands	r2, r1
 800b46c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b46e:	f7fe f92d 	bl	80096cc <HAL_GetTick>
 800b472:	0003      	movs	r3, r0
 800b474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b478:	f7fe f928 	bl	80096cc <HAL_GetTick>
 800b47c:	0002      	movs	r2, r0
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b02      	cmp	r3, #2
 800b484:	d901      	bls.n	800b48a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e079      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b48a:	4b3f      	ldr	r3, [pc, #252]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	2380      	movs	r3, #128	; 0x80
 800b490:	049b      	lsls	r3, r3, #18
 800b492:	4013      	ands	r3, r2
 800b494:	d1f0      	bne.n	800b478 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b496:	4b3c      	ldr	r3, [pc, #240]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	220f      	movs	r2, #15
 800b49c:	4393      	bics	r3, r2
 800b49e:	0019      	movs	r1, r3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	4b38      	ldr	r3, [pc, #224]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4aa:	4b37      	ldr	r3, [pc, #220]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a3a      	ldr	r2, [pc, #232]	; (800b598 <HAL_RCC_OscConfig+0x638>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	0019      	movs	r1, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4bc:	431a      	orrs	r2, r3
 800b4be:	4b32      	ldr	r3, [pc, #200]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4c4:	4b30      	ldr	r3, [pc, #192]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	4b2f      	ldr	r3, [pc, #188]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4ca:	2180      	movs	r1, #128	; 0x80
 800b4cc:	0449      	lsls	r1, r1, #17
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4d2:	f7fe f8fb 	bl	80096cc <HAL_GetTick>
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b4da:	e008      	b.n	800b4ee <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4dc:	f7fe f8f6 	bl	80096cc <HAL_GetTick>
 800b4e0:	0002      	movs	r2, r0
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d901      	bls.n	800b4ee <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e047      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b4ee:	4b26      	ldr	r3, [pc, #152]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	2380      	movs	r3, #128	; 0x80
 800b4f4:	049b      	lsls	r3, r3, #18
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	d0f0      	beq.n	800b4dc <HAL_RCC_OscConfig+0x57c>
 800b4fa:	e03f      	b.n	800b57c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4fc:	4b22      	ldr	r3, [pc, #136]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	4b21      	ldr	r3, [pc, #132]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b502:	4924      	ldr	r1, [pc, #144]	; (800b594 <HAL_RCC_OscConfig+0x634>)
 800b504:	400a      	ands	r2, r1
 800b506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b508:	f7fe f8e0 	bl	80096cc <HAL_GetTick>
 800b50c:	0003      	movs	r3, r0
 800b50e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b510:	e008      	b.n	800b524 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b512:	f7fe f8db 	bl	80096cc <HAL_GetTick>
 800b516:	0002      	movs	r2, r0
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d901      	bls.n	800b524 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e02c      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b524:	4b18      	ldr	r3, [pc, #96]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	2380      	movs	r3, #128	; 0x80
 800b52a:	049b      	lsls	r3, r3, #18
 800b52c:	4013      	ands	r3, r2
 800b52e:	d1f0      	bne.n	800b512 <HAL_RCC_OscConfig+0x5b2>
 800b530:	e024      	b.n	800b57c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d101      	bne.n	800b53e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e01f      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <HAL_RCC_OscConfig+0x628>)
 800b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b548:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	23c0      	movs	r3, #192	; 0xc0
 800b54e:	025b      	lsls	r3, r3, #9
 800b550:	401a      	ands	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	429a      	cmp	r2, r3
 800b558:	d10e      	bne.n	800b578 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	220f      	movs	r2, #15
 800b55e:	401a      	ands	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b564:	429a      	cmp	r2, r3
 800b566:	d107      	bne.n	800b578 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	23f0      	movs	r3, #240	; 0xf0
 800b56c:	039b      	lsls	r3, r3, #14
 800b56e:	401a      	ands	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800b574:	429a      	cmp	r2, r3
 800b576:	d001      	beq.n	800b57c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e000      	b.n	800b57e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	0018      	movs	r0, r3
 800b580:	46bd      	mov	sp, r7
 800b582:	b008      	add	sp, #32
 800b584:	bd80      	pop	{r7, pc}
 800b586:	46c0      	nop			; (mov r8, r8)
 800b588:	40021000 	.word	0x40021000
 800b58c:	00001388 	.word	0x00001388
 800b590:	efffffff 	.word	0xefffffff
 800b594:	feffffff 	.word	0xfeffffff
 800b598:	ffc27fff 	.word	0xffc27fff

0800b59c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e0b3      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b5b0:	4b5b      	ldr	r3, [pc, #364]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d911      	bls.n	800b5e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5be:	4b58      	ldr	r3, [pc, #352]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	4393      	bics	r3, r2
 800b5c6:	0019      	movs	r1, r3
 800b5c8:	4b55      	ldr	r3, [pc, #340]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5d0:	4b53      	ldr	r3, [pc, #332]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d001      	beq.n	800b5e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e09a      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	d015      	beq.n	800b618 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	d006      	beq.n	800b604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b5f6:	4b4b      	ldr	r3, [pc, #300]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	4b4a      	ldr	r3, [pc, #296]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b5fc:	21e0      	movs	r1, #224	; 0xe0
 800b5fe:	00c9      	lsls	r1, r1, #3
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b604:	4b47      	ldr	r3, [pc, #284]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	22f0      	movs	r2, #240	; 0xf0
 800b60a:	4393      	bics	r3, r2
 800b60c:	0019      	movs	r1, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	4b44      	ldr	r3, [pc, #272]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b614:	430a      	orrs	r2, r1
 800b616:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2201      	movs	r2, #1
 800b61e:	4013      	ands	r3, r2
 800b620:	d040      	beq.n	800b6a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d107      	bne.n	800b63a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b62a:	4b3e      	ldr	r3, [pc, #248]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	2380      	movs	r3, #128	; 0x80
 800b630:	029b      	lsls	r3, r3, #10
 800b632:	4013      	ands	r3, r2
 800b634:	d114      	bne.n	800b660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e06e      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	d107      	bne.n	800b652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b642:	4b38      	ldr	r3, [pc, #224]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	2380      	movs	r3, #128	; 0x80
 800b648:	049b      	lsls	r3, r3, #18
 800b64a:	4013      	ands	r3, r2
 800b64c:	d108      	bne.n	800b660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e062      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b652:	4b34      	ldr	r3, [pc, #208]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2202      	movs	r2, #2
 800b658:	4013      	ands	r3, r2
 800b65a:	d101      	bne.n	800b660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e05b      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b660:	4b30      	ldr	r3, [pc, #192]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2203      	movs	r2, #3
 800b666:	4393      	bics	r3, r2
 800b668:	0019      	movs	r1, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	4b2d      	ldr	r3, [pc, #180]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b670:	430a      	orrs	r2, r1
 800b672:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b674:	f7fe f82a 	bl	80096cc <HAL_GetTick>
 800b678:	0003      	movs	r3, r0
 800b67a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b67c:	e009      	b.n	800b692 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b67e:	f7fe f825 	bl	80096cc <HAL_GetTick>
 800b682:	0002      	movs	r2, r0
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	4a27      	ldr	r2, [pc, #156]	; (800b728 <HAL_RCC_ClockConfig+0x18c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d901      	bls.n	800b692 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800b68e:	2303      	movs	r3, #3
 800b690:	e042      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b692:	4b24      	ldr	r3, [pc, #144]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	220c      	movs	r2, #12
 800b698:	401a      	ands	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d1ec      	bne.n	800b67e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b6a4:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d211      	bcs.n	800b6d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6b2:	4b1b      	ldr	r3, [pc, #108]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	4393      	bics	r3, r2
 800b6ba:	0019      	movs	r1, r3
 800b6bc:	4b18      	ldr	r3, [pc, #96]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6c4:	4b16      	ldr	r3, [pc, #88]	; (800b720 <HAL_RCC_ClockConfig+0x184>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d001      	beq.n	800b6d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e020      	b.n	800b718 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	4013      	ands	r3, r2
 800b6de:	d009      	beq.n	800b6f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b6e0:	4b10      	ldr	r3, [pc, #64]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	4a11      	ldr	r2, [pc, #68]	; (800b72c <HAL_RCC_ClockConfig+0x190>)
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	0019      	movs	r1, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800b6f4:	f000 f820 	bl	800b738 <HAL_RCC_GetSysClockFreq>
 800b6f8:	0001      	movs	r1, r0
 800b6fa:	4b0a      	ldr	r3, [pc, #40]	; (800b724 <HAL_RCC_ClockConfig+0x188>)
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	091b      	lsrs	r3, r3, #4
 800b700:	220f      	movs	r2, #15
 800b702:	4013      	ands	r3, r2
 800b704:	4a0a      	ldr	r2, [pc, #40]	; (800b730 <HAL_RCC_ClockConfig+0x194>)
 800b706:	5cd3      	ldrb	r3, [r2, r3]
 800b708:	000a      	movs	r2, r1
 800b70a:	40da      	lsrs	r2, r3
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <HAL_RCC_ClockConfig+0x198>)
 800b70e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800b710:	2000      	movs	r0, #0
 800b712:	f7fd ff95 	bl	8009640 <HAL_InitTick>
  
  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	0018      	movs	r0, r3
 800b71a:	46bd      	mov	sp, r7
 800b71c:	b004      	add	sp, #16
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	40022000 	.word	0x40022000
 800b724:	40021000 	.word	0x40021000
 800b728:	00001388 	.word	0x00001388
 800b72c:	fffff8ff 	.word	0xfffff8ff
 800b730:	08017994 	.word	0x08017994
 800b734:	20000014 	.word	0x20000014

0800b738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b738:	b590      	push	{r4, r7, lr}
 800b73a:	b08f      	sub	sp, #60	; 0x3c
 800b73c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800b73e:	2314      	movs	r3, #20
 800b740:	18fb      	adds	r3, r7, r3
 800b742:	4a2c      	ldr	r2, [pc, #176]	; (800b7f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b744:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b746:	c313      	stmia	r3!, {r0, r1, r4}
 800b748:	6812      	ldr	r2, [r2, #0]
 800b74a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800b74c:	1d3b      	adds	r3, r7, #4
 800b74e:	4a2a      	ldr	r2, [pc, #168]	; (800b7f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b750:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b752:	c313      	stmia	r3!, {r0, r1, r4}
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b758:	2300      	movs	r3, #0
 800b75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b75c:	2300      	movs	r3, #0
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b760:	2300      	movs	r3, #0
 800b762:	637b      	str	r3, [r7, #52]	; 0x34
 800b764:	2300      	movs	r3, #0
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800b768:	2300      	movs	r3, #0
 800b76a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800b76c:	4b23      	ldr	r3, [pc, #140]	; (800b7fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b774:	220c      	movs	r2, #12
 800b776:	4013      	ands	r3, r2
 800b778:	2b04      	cmp	r3, #4
 800b77a:	d002      	beq.n	800b782 <HAL_RCC_GetSysClockFreq+0x4a>
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d003      	beq.n	800b788 <HAL_RCC_GetSysClockFreq+0x50>
 800b780:	e02f      	b.n	800b7e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b782:	4b1f      	ldr	r3, [pc, #124]	; (800b800 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b784:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b786:	e02f      	b.n	800b7e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	0c9b      	lsrs	r3, r3, #18
 800b78c:	220f      	movs	r2, #15
 800b78e:	4013      	ands	r3, r2
 800b790:	2214      	movs	r2, #20
 800b792:	18ba      	adds	r2, r7, r2
 800b794:	5cd3      	ldrb	r3, [r2, r3]
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800b798:	4b18      	ldr	r3, [pc, #96]	; (800b7fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	220f      	movs	r2, #15
 800b79e:	4013      	ands	r3, r2
 800b7a0:	1d3a      	adds	r2, r7, #4
 800b7a2:	5cd3      	ldrb	r3, [r2, r3]
 800b7a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a8:	23c0      	movs	r3, #192	; 0xc0
 800b7aa:	025b      	lsls	r3, r3, #9
 800b7ac:	401a      	ands	r2, r3
 800b7ae:	2380      	movs	r3, #128	; 0x80
 800b7b0:	025b      	lsls	r3, r3, #9
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d109      	bne.n	800b7ca <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7b8:	4811      	ldr	r0, [pc, #68]	; (800b800 <HAL_RCC_GetSysClockFreq+0xc8>)
 800b7ba:	f7f4 fcc1 	bl	8000140 <__udivsi3>
 800b7be:	0003      	movs	r3, r0
 800b7c0:	001a      	movs	r2, r3
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	4353      	muls	r3, r2
 800b7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7c8:	e008      	b.n	800b7dc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800b7ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7cc:	480d      	ldr	r0, [pc, #52]	; (800b804 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b7ce:	f7f4 fcb7 	bl	8000140 <__udivsi3>
 800b7d2:	0003      	movs	r3, r0
 800b7d4:	001a      	movs	r2, r3
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	4353      	muls	r3, r2
 800b7da:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b7e0:	e002      	b.n	800b7e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b7e2:	4b08      	ldr	r3, [pc, #32]	; (800b804 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b7e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800b7e6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b00f      	add	sp, #60	; 0x3c
 800b7f0:	bd90      	pop	{r4, r7, pc}
 800b7f2:	46c0      	nop			; (mov r8, r8)
 800b7f4:	08013c84 	.word	0x08013c84
 800b7f8:	08013c94 	.word	0x08013c94
 800b7fc:	40021000 	.word	0x40021000
 800b800:	00f42400 	.word	0x00f42400
 800b804:	007a1200 	.word	0x007a1200

0800b808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <HAL_RCC_GetHCLKFreq+0x10>)
 800b80e:	681b      	ldr	r3, [r3, #0]
}
 800b810:	0018      	movs	r0, r3
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	46c0      	nop			; (mov r8, r8)
 800b818:	20000014 	.word	0x20000014

0800b81c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800b820:	f7ff fff2 	bl	800b808 <HAL_RCC_GetHCLKFreq>
 800b824:	0001      	movs	r1, r0
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	2207      	movs	r2, #7
 800b82e:	4013      	ands	r3, r2
 800b830:	4a04      	ldr	r2, [pc, #16]	; (800b844 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b832:	5cd3      	ldrb	r3, [r2, r3]
 800b834:	40d9      	lsrs	r1, r3
 800b836:	000b      	movs	r3, r1
}    
 800b838:	0018      	movs	r0, r3
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	46c0      	nop			; (mov r8, r8)
 800b840:	40021000 	.word	0x40021000
 800b844:	080179a4 	.word	0x080179a4

0800b848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800b854:	2300      	movs	r3, #0
 800b856:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	025b      	lsls	r3, r3, #9
 800b860:	4013      	ands	r3, r2
 800b862:	d100      	bne.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800b864:	e08e      	b.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800b866:	2017      	movs	r0, #23
 800b868:	183b      	adds	r3, r7, r0
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b86e:	4b5f      	ldr	r3, [pc, #380]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b870:	69da      	ldr	r2, [r3, #28]
 800b872:	2380      	movs	r3, #128	; 0x80
 800b874:	055b      	lsls	r3, r3, #21
 800b876:	4013      	ands	r3, r2
 800b878:	d110      	bne.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b87a:	4b5c      	ldr	r3, [pc, #368]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b87c:	69da      	ldr	r2, [r3, #28]
 800b87e:	4b5b      	ldr	r3, [pc, #364]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b880:	2180      	movs	r1, #128	; 0x80
 800b882:	0549      	lsls	r1, r1, #21
 800b884:	430a      	orrs	r2, r1
 800b886:	61da      	str	r2, [r3, #28]
 800b888:	4b58      	ldr	r3, [pc, #352]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b88a:	69da      	ldr	r2, [r3, #28]
 800b88c:	2380      	movs	r3, #128	; 0x80
 800b88e:	055b      	lsls	r3, r3, #21
 800b890:	4013      	ands	r3, r2
 800b892:	60bb      	str	r3, [r7, #8]
 800b894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b896:	183b      	adds	r3, r7, r0
 800b898:	2201      	movs	r2, #1
 800b89a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b89c:	4b54      	ldr	r3, [pc, #336]	; (800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	2380      	movs	r3, #128	; 0x80
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	d11a      	bne.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b8a8:	4b51      	ldr	r3, [pc, #324]	; (800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	4b50      	ldr	r3, [pc, #320]	; (800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b8ae:	2180      	movs	r1, #128	; 0x80
 800b8b0:	0049      	lsls	r1, r1, #1
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8b6:	f7fd ff09 	bl	80096cc <HAL_GetTick>
 800b8ba:	0003      	movs	r3, r0
 800b8bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8be:	e008      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8c0:	f7fd ff04 	bl	80096cc <HAL_GetTick>
 800b8c4:	0002      	movs	r2, r0
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	2b64      	cmp	r3, #100	; 0x64
 800b8cc:	d901      	bls.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	e087      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8d2:	4b47      	ldr	r3, [pc, #284]	; (800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	4013      	ands	r3, r2
 800b8dc:	d0f0      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b8de:	4b43      	ldr	r3, [pc, #268]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b8e0:	6a1a      	ldr	r2, [r3, #32]
 800b8e2:	23c0      	movs	r3, #192	; 0xc0
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d034      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x112>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	23c0      	movs	r3, #192	; 0xc0
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d02c      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b900:	4b3a      	ldr	r3, [pc, #232]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	4a3b      	ldr	r2, [pc, #236]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b906:	4013      	ands	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b90a:	4b38      	ldr	r3, [pc, #224]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b90c:	6a1a      	ldr	r2, [r3, #32]
 800b90e:	4b37      	ldr	r3, [pc, #220]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b910:	2180      	movs	r1, #128	; 0x80
 800b912:	0249      	lsls	r1, r1, #9
 800b914:	430a      	orrs	r2, r1
 800b916:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b918:	4b34      	ldr	r3, [pc, #208]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b91a:	6a1a      	ldr	r2, [r3, #32]
 800b91c:	4b33      	ldr	r3, [pc, #204]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b91e:	4936      	ldr	r1, [pc, #216]	; (800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b920:	400a      	ands	r2, r1
 800b922:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b924:	4b31      	ldr	r3, [pc, #196]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	4013      	ands	r3, r2
 800b930:	d013      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b932:	f7fd fecb 	bl	80096cc <HAL_GetTick>
 800b936:	0003      	movs	r3, r0
 800b938:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b93a:	e009      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b93c:	f7fd fec6 	bl	80096cc <HAL_GetTick>
 800b940:	0002      	movs	r2, r0
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	4a2d      	ldr	r2, [pc, #180]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d901      	bls.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e048      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b950:	4b26      	ldr	r3, [pc, #152]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	2202      	movs	r2, #2
 800b956:	4013      	ands	r3, r2
 800b958:	d0f0      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b95a:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	4a25      	ldr	r2, [pc, #148]	; (800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b960:	4013      	ands	r3, r2
 800b962:	0019      	movs	r1, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b96a:	430a      	orrs	r2, r1
 800b96c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b96e:	2317      	movs	r3, #23
 800b970:	18fb      	adds	r3, r7, r3
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d105      	bne.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b978:	4b1c      	ldr	r3, [pc, #112]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b97a:	69da      	ldr	r2, [r3, #28]
 800b97c:	4b1b      	ldr	r3, [pc, #108]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b97e:	4920      	ldr	r1, [pc, #128]	; (800ba00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b980:	400a      	ands	r2, r1
 800b982:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2201      	movs	r2, #1
 800b98a:	4013      	ands	r3, r2
 800b98c:	d009      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b98e:	4b17      	ldr	r3, [pc, #92]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b992:	2203      	movs	r2, #3
 800b994:	4393      	bics	r3, r2
 800b996:	0019      	movs	r1, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	689a      	ldr	r2, [r3, #8]
 800b99c:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	d009      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b0:	2210      	movs	r2, #16
 800b9b2:	4393      	bics	r3, r2
 800b9b4:	0019      	movs	r1, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	68da      	ldr	r2, [r3, #12]
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b9bc:	430a      	orrs	r2, r1
 800b9be:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	2380      	movs	r3, #128	; 0x80
 800b9c6:	029b      	lsls	r3, r3, #10
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	d009      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d0:	2280      	movs	r2, #128	; 0x80
 800b9d2:	4393      	bics	r3, r2
 800b9d4:	0019      	movs	r1, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691a      	ldr	r2, [r3, #16]
 800b9da:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	0018      	movs	r0, r3
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	b006      	add	sp, #24
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	46c0      	nop			; (mov r8, r8)
 800b9ec:	40021000 	.word	0x40021000
 800b9f0:	40007000 	.word	0x40007000
 800b9f4:	fffffcff 	.word	0xfffffcff
 800b9f8:	fffeffff 	.word	0xfffeffff
 800b9fc:	00001388 	.word	0x00001388
 800ba00:	efffffff 	.word	0xefffffff

0800ba04 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e081      	b.n	800bb1a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	7f5b      	ldrb	r3, [r3, #29]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d106      	bne.n	800ba2e <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	0018      	movs	r0, r3
 800ba2a:	f7fc fa69 	bl	8007f00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2202      	movs	r2, #2
 800ba32:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	22ca      	movs	r2, #202	; 0xca
 800ba3a:	625a      	str	r2, [r3, #36]	; 0x24
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2253      	movs	r2, #83	; 0x53
 800ba42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	0018      	movs	r0, r3
 800ba48:	f000 f9fb 	bl	800be42 <RTC_EnterInitMode>
 800ba4c:	1e03      	subs	r3, r0, #0
 800ba4e:	d008      	beq.n	800ba62 <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	22ff      	movs	r2, #255	; 0xff
 800ba56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e05b      	b.n	800bb1a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	492d      	ldr	r1, [pc, #180]	; (800bb24 <HAL_RTC_Init+0x120>)
 800ba6e:	400a      	ands	r2, r1
 800ba70:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6899      	ldr	r1, [r3, #8]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	431a      	orrs	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	431a      	orrs	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	68d2      	ldr	r2, [r2, #12]
 800ba98:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6919      	ldr	r1, [r3, #16]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	041a      	lsls	r2, r3, #16
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68da      	ldr	r2, [r3, #12]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2180      	movs	r1, #128	; 0x80
 800baba:	438a      	bics	r2, r1
 800babc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	2220      	movs	r2, #32
 800bac6:	4013      	ands	r3, r2
 800bac8:	d10e      	bne.n	800bae8 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	0018      	movs	r0, r3
 800bace:	f000 f98f 	bl	800bdf0 <HAL_RTC_WaitForSynchro>
 800bad2:	1e03      	subs	r3, r0, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	22ff      	movs	r2, #255	; 0xff
 800badc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2204      	movs	r2, #4
 800bae2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e018      	b.n	800bb1a <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	490d      	ldr	r1, [pc, #52]	; (800bb28 <HAL_RTC_Init+0x124>)
 800baf4:	400a      	ands	r2, r1
 800baf6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	22ff      	movs	r2, #255	; 0xff
 800bb10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bb18:	2300      	movs	r3, #0
  }
}
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	b002      	add	sp, #8
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	46c0      	nop			; (mov r8, r8)
 800bb24:	ff8fffbf 	.word	0xff8fffbf
 800bb28:	fffbffff 	.word	0xfffbffff

0800bb2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	7f1b      	ldrb	r3, [r3, #28]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d101      	bne.n	800bb48 <HAL_RTC_SetTime+0x1c>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e0a5      	b.n	800bc94 <HAL_RTC_SetTime+0x168>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2202      	movs	r2, #2
 800bb52:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d125      	bne.n	800bba6 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	2240      	movs	r2, #64	; 0x40
 800bb62:	4013      	ands	r3, r2
 800bb64:	d102      	bne.n	800bb6c <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	0018      	movs	r0, r3
 800bb72:	f000 f992 	bl	800be9a <RTC_ByteToBcd2>
 800bb76:	0003      	movs	r3, r0
 800bb78:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f000 f98b 	bl	800be9a <RTC_ByteToBcd2>
 800bb84:	0003      	movs	r3, r0
 800bb86:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bb88:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	789b      	ldrb	r3, [r3, #2]
 800bb8e:	0018      	movs	r0, r3
 800bb90:	f000 f983 	bl	800be9a <RTC_ByteToBcd2>
 800bb94:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bb96:	0022      	movs	r2, r4
 800bb98:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	78db      	ldrb	r3, [r3, #3]
 800bb9e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e017      	b.n	800bbd6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	2240      	movs	r2, #64	; 0x40
 800bbae:	4013      	ands	r3, r2
 800bbb0:	d102      	bne.n	800bbb8 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	785b      	ldrb	r3, [r3, #1]
 800bbc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bbc4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bbca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	78db      	ldrb	r3, [r3, #3]
 800bbd0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	22ca      	movs	r2, #202	; 0xca
 800bbdc:	625a      	str	r2, [r3, #36]	; 0x24
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2253      	movs	r2, #83	; 0x53
 800bbe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f000 f92a 	bl	800be42 <RTC_EnterInitMode>
 800bbee:	1e03      	subs	r3, r0, #0
 800bbf0:	d00b      	beq.n	800bc0a <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	22ff      	movs	r2, #255	; 0xff
 800bbf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2204      	movs	r2, #4
 800bbfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e044      	b.n	800bc94 <HAL_RTC_SetTime+0x168>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4922      	ldr	r1, [pc, #136]	; (800bc9c <HAL_RTC_SetTime+0x170>)
 800bc12:	400a      	ands	r2, r1
 800bc14:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	491f      	ldr	r1, [pc, #124]	; (800bca0 <HAL_RTC_SetTime+0x174>)
 800bc22:	400a      	ands	r2, r1
 800bc24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6899      	ldr	r1, [r3, #8]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	431a      	orrs	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2180      	movs	r1, #128	; 0x80
 800bc4a:	438a      	bics	r2, r1
 800bc4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	2220      	movs	r2, #32
 800bc56:	4013      	ands	r3, r2
 800bc58:	d111      	bne.n	800bc7e <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f000 f8c7 	bl	800bdf0 <HAL_RTC_WaitForSynchro>
 800bc62:	1e03      	subs	r3, r0, #0
 800bc64:	d00b      	beq.n	800bc7e <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	22ff      	movs	r2, #255	; 0xff
 800bc6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2204      	movs	r2, #4
 800bc72:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e00a      	b.n	800bc94 <HAL_RTC_SetTime+0x168>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	22ff      	movs	r2, #255	; 0xff
 800bc84:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800bc92:	2300      	movs	r3, #0
  }
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b007      	add	sp, #28
 800bc9a:	bd90      	pop	{r4, r7, pc}
 800bc9c:	007f7f7f 	.word	0x007f7f7f
 800bca0:	fffbffff 	.word	0xfffbffff

0800bca4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bca4:	b590      	push	{r4, r7, lr}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	7f1b      	ldrb	r3, [r3, #28]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <HAL_RTC_SetDate+0x1c>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e091      	b.n	800bde4 <HAL_RTC_SetDate+0x140>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10e      	bne.n	800bcf0 <HAL_RTC_SetDate+0x4c>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	785b      	ldrb	r3, [r3, #1]
 800bcd6:	001a      	movs	r2, r3
 800bcd8:	2310      	movs	r3, #16
 800bcda:	4013      	ands	r3, r2
 800bcdc:	d008      	beq.n	800bcf0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	2210      	movs	r2, #16
 800bce4:	4393      	bics	r3, r2
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	330a      	adds	r3, #10
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d11c      	bne.n	800bd30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	78db      	ldrb	r3, [r3, #3]
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f000 f8cd 	bl	800be9a <RTC_ByteToBcd2>
 800bd00:	0003      	movs	r3, r0
 800bd02:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	785b      	ldrb	r3, [r3, #1]
 800bd08:	0018      	movs	r0, r3
 800bd0a:	f000 f8c6 	bl	800be9a <RTC_ByteToBcd2>
 800bd0e:	0003      	movs	r3, r0
 800bd10:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bd12:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	789b      	ldrb	r3, [r3, #2]
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f000 f8be 	bl	800be9a <RTC_ByteToBcd2>
 800bd1e:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bd20:	0022      	movs	r2, r4
 800bd22:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	e00e      	b.n	800bd4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	78db      	ldrb	r3, [r3, #3]
 800bd34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	785b      	ldrb	r3, [r3, #1]
 800bd3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bd3c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bd42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	22ca      	movs	r2, #202	; 0xca
 800bd54:	625a      	str	r2, [r3, #36]	; 0x24
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2253      	movs	r2, #83	; 0x53
 800bd5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	0018      	movs	r0, r3
 800bd62:	f000 f86e 	bl	800be42 <RTC_EnterInitMode>
 800bd66:	1e03      	subs	r3, r0, #0
 800bd68:	d00b      	beq.n	800bd82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	22ff      	movs	r2, #255	; 0xff
 800bd70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2204      	movs	r2, #4
 800bd76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e030      	b.n	800bde4 <HAL_RTC_SetDate+0x140>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	697a      	ldr	r2, [r7, #20]
 800bd88:	4918      	ldr	r1, [pc, #96]	; (800bdec <HAL_RTC_SetDate+0x148>)
 800bd8a:	400a      	ands	r2, r1
 800bd8c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68da      	ldr	r2, [r3, #12]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2180      	movs	r1, #128	; 0x80
 800bd9a:	438a      	bics	r2, r1
 800bd9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	2220      	movs	r2, #32
 800bda6:	4013      	ands	r3, r2
 800bda8:	d111      	bne.n	800bdce <HAL_RTC_SetDate+0x12a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	0018      	movs	r0, r3
 800bdae:	f000 f81f 	bl	800bdf0 <HAL_RTC_WaitForSynchro>
 800bdb2:	1e03      	subs	r3, r0, #0
 800bdb4:	d00b      	beq.n	800bdce <HAL_RTC_SetDate+0x12a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	22ff      	movs	r2, #255	; 0xff
 800bdbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e00a      	b.n	800bde4 <HAL_RTC_SetDate+0x140>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	22ff      	movs	r2, #255	; 0xff
 800bdd4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800bde2:	2300      	movs	r3, #0
  }
}
 800bde4:	0018      	movs	r0, r3
 800bde6:	46bd      	mov	sp, r7
 800bde8:	b007      	add	sp, #28
 800bdea:	bd90      	pop	{r4, r7, pc}
 800bdec:	00ffff3f 	.word	0x00ffff3f

0800bdf0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	21a0      	movs	r1, #160	; 0xa0
 800be08:	438a      	bics	r2, r1
 800be0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800be0c:	f7fd fc5e 	bl	80096cc <HAL_GetTick>
 800be10:	0003      	movs	r3, r0
 800be12:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800be14:	e00a      	b.n	800be2c <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be16:	f7fd fc59 	bl	80096cc <HAL_GetTick>
 800be1a:	0002      	movs	r2, r0
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	23fa      	movs	r3, #250	; 0xfa
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	429a      	cmp	r2, r3
 800be26:	d901      	bls.n	800be2c <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 800be28:	2303      	movs	r3, #3
 800be2a:	e006      	b.n	800be3a <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2220      	movs	r2, #32
 800be34:	4013      	ands	r3, r2
 800be36:	d0ee      	beq.n	800be16 <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	0018      	movs	r0, r3
 800be3c:	46bd      	mov	sp, r7
 800be3e:	b004      	add	sp, #16
 800be40:	bd80      	pop	{r7, pc}

0800be42 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b084      	sub	sp, #16
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	2240      	movs	r2, #64	; 0x40
 800be56:	4013      	ands	r3, r2
 800be58:	d11a      	bne.n	800be90 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2201      	movs	r2, #1
 800be60:	4252      	negs	r2, r2
 800be62:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800be64:	f7fd fc32 	bl	80096cc <HAL_GetTick>
 800be68:	0003      	movs	r3, r0
 800be6a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be6c:	e00a      	b.n	800be84 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be6e:	f7fd fc2d 	bl	80096cc <HAL_GetTick>
 800be72:	0002      	movs	r2, r0
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	1ad2      	subs	r2, r2, r3
 800be78:	23fa      	movs	r3, #250	; 0xfa
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d901      	bls.n	800be84 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e006      	b.n	800be92 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	2240      	movs	r2, #64	; 0x40
 800be8c:	4013      	ands	r3, r2
 800be8e:	d0ee      	beq.n	800be6e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	0018      	movs	r0, r3
 800be94:	46bd      	mov	sp, r7
 800be96:	b004      	add	sp, #16
 800be98:	bd80      	pop	{r7, pc}

0800be9a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	0002      	movs	r2, r0
 800bea2:	1dfb      	adds	r3, r7, #7
 800bea4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800beaa:	e007      	b.n	800bebc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800beb2:	1dfb      	adds	r3, r7, #7
 800beb4:	1dfa      	adds	r2, r7, #7
 800beb6:	7812      	ldrb	r2, [r2, #0]
 800beb8:	3a0a      	subs	r2, #10
 800beba:	701a      	strb	r2, [r3, #0]
  while (Value >= 10U)
 800bebc:	1dfb      	adds	r3, r7, #7
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	2b09      	cmp	r3, #9
 800bec2:	d8f3      	bhi.n	800beac <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	b2da      	uxtb	r2, r3
 800becc:	1dfb      	adds	r3, r7, #7
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	b2db      	uxtb	r3, r3
}
 800bed4:	0018      	movs	r0, r3
 800bed6:	46bd      	mov	sp, r7
 800bed8:	b004      	add	sp, #16
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e0a8      	b.n	800c040 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d109      	bne.n	800bf0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	2382      	movs	r3, #130	; 0x82
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	429a      	cmp	r2, r3
 800bf00:	d009      	beq.n	800bf16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	61da      	str	r2, [r3, #28]
 800bf08:	e005      	b.n	800bf16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	225d      	movs	r2, #93	; 0x5d
 800bf20:	5c9b      	ldrb	r3, [r3, r2]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d107      	bne.n	800bf38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	225c      	movs	r2, #92	; 0x5c
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	0018      	movs	r0, r3
 800bf34:	f7fb fffc 	bl	8007f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	225d      	movs	r2, #93	; 0x5d
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2140      	movs	r1, #64	; 0x40
 800bf4c:	438a      	bics	r2, r1
 800bf4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	23e0      	movs	r3, #224	; 0xe0
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d902      	bls.n	800bf62 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e002      	b.n	800bf68 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bf62:	2380      	movs	r3, #128	; 0x80
 800bf64:	015b      	lsls	r3, r3, #5
 800bf66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	23f0      	movs	r3, #240	; 0xf0
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d008      	beq.n	800bf86 <HAL_SPI_Init+0xaa>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	23e0      	movs	r3, #224	; 0xe0
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d002      	beq.n	800bf86 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	2382      	movs	r3, #130	; 0x82
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	401a      	ands	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6899      	ldr	r1, [r3, #8]
 800bf94:	2384      	movs	r3, #132	; 0x84
 800bf96:	021b      	lsls	r3, r3, #8
 800bf98:	400b      	ands	r3, r1
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	2102      	movs	r1, #2
 800bfa2:	400b      	ands	r3, r1
 800bfa4:	431a      	orrs	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	2101      	movs	r1, #1
 800bfac:	400b      	ands	r3, r1
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6999      	ldr	r1, [r3, #24]
 800bfb4:	2380      	movs	r3, #128	; 0x80
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	400b      	ands	r3, r1
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	2138      	movs	r1, #56	; 0x38
 800bfc2:	400b      	ands	r3, r1
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	2180      	movs	r1, #128	; 0x80
 800bfcc:	400b      	ands	r3, r1
 800bfce:	431a      	orrs	r2, r3
 800bfd0:	0011      	movs	r1, r2
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	019b      	lsls	r3, r3, #6
 800bfda:	401a      	ands	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	0c1b      	lsrs	r3, r3, #16
 800bfea:	2204      	movs	r2, #4
 800bfec:	401a      	ands	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	2110      	movs	r1, #16
 800bff4:	400b      	ands	r3, r1
 800bff6:	431a      	orrs	r2, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffc:	2108      	movs	r1, #8
 800bffe:	400b      	ands	r3, r1
 800c000:	431a      	orrs	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68d9      	ldr	r1, [r3, #12]
 800c006:	23f0      	movs	r3, #240	; 0xf0
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	400b      	ands	r3, r1
 800c00c:	431a      	orrs	r2, r3
 800c00e:	0011      	movs	r1, r2
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	2380      	movs	r3, #128	; 0x80
 800c014:	015b      	lsls	r3, r3, #5
 800c016:	401a      	ands	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	69da      	ldr	r2, [r3, #28]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4907      	ldr	r1, [pc, #28]	; (800c048 <HAL_SPI_Init+0x16c>)
 800c02c:	400a      	ands	r2, r1
 800c02e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	225d      	movs	r2, #93	; 0x5d
 800c03a:	2101      	movs	r1, #1
 800c03c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	0018      	movs	r0, r3
 800c042:	46bd      	mov	sp, r7
 800c044:	b004      	add	sp, #16
 800c046:	bd80      	pop	{r7, pc}
 800c048:	fffff7ff 	.word	0xfffff7ff

0800c04c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	1dbb      	adds	r3, r7, #6
 800c05a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c05c:	231f      	movs	r3, #31
 800c05e:	18fb      	adds	r3, r7, r3
 800c060:	2200      	movs	r2, #0
 800c062:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	225c      	movs	r2, #92	; 0x5c
 800c068:	5c9b      	ldrb	r3, [r3, r2]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d101      	bne.n	800c072 <HAL_SPI_Transmit+0x26>
 800c06e:	2302      	movs	r3, #2
 800c070:	e140      	b.n	800c2f4 <HAL_SPI_Transmit+0x2a8>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	225c      	movs	r2, #92	; 0x5c
 800c076:	2101      	movs	r1, #1
 800c078:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c07a:	f7fd fb27 	bl	80096cc <HAL_GetTick>
 800c07e:	0003      	movs	r3, r0
 800c080:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800c082:	2316      	movs	r3, #22
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	1dba      	adds	r2, r7, #6
 800c088:	8812      	ldrh	r2, [r2, #0]
 800c08a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	225d      	movs	r2, #93	; 0x5d
 800c090:	5c9b      	ldrb	r3, [r3, r2]
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b01      	cmp	r3, #1
 800c096:	d004      	beq.n	800c0a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800c098:	231f      	movs	r3, #31
 800c09a:	18fb      	adds	r3, r7, r3
 800c09c:	2202      	movs	r2, #2
 800c09e:	701a      	strb	r2, [r3, #0]
    goto error;
 800c0a0:	e11d      	b.n	800c2de <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_SPI_Transmit+0x64>
 800c0a8:	1dbb      	adds	r3, r7, #6
 800c0aa:	881b      	ldrh	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800c0b0:	231f      	movs	r3, #31
 800c0b2:	18fb      	adds	r3, r7, r3
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
    goto error;
 800c0b8:	e111      	b.n	800c2de <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	225d      	movs	r2, #93	; 0x5d
 800c0be:	2103      	movs	r1, #3
 800c0c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	1dba      	adds	r2, r7, #6
 800c0d2:	8812      	ldrh	r2, [r2, #0]
 800c0d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	1dba      	adds	r2, r7, #6
 800c0da:	8812      	ldrh	r2, [r2, #0]
 800c0dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2244      	movs	r2, #68	; 0x44
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2246      	movs	r2, #70	; 0x46
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	2380      	movs	r3, #128	; 0x80
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	429a      	cmp	r2, r3
 800c10a:	d110      	bne.n	800c12e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2140      	movs	r1, #64	; 0x40
 800c118:	438a      	bics	r2, r1
 800c11a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2180      	movs	r1, #128	; 0x80
 800c128:	01c9      	lsls	r1, r1, #7
 800c12a:	430a      	orrs	r2, r1
 800c12c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2240      	movs	r2, #64	; 0x40
 800c136:	4013      	ands	r3, r2
 800c138:	2b40      	cmp	r3, #64	; 0x40
 800c13a:	d007      	beq.n	800c14c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2140      	movs	r1, #64	; 0x40
 800c148:	430a      	orrs	r2, r1
 800c14a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	68da      	ldr	r2, [r3, #12]
 800c150:	23e0      	movs	r3, #224	; 0xe0
 800c152:	00db      	lsls	r3, r3, #3
 800c154:	429a      	cmp	r2, r3
 800c156:	d94e      	bls.n	800c1f6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d004      	beq.n	800c16a <HAL_SPI_Transmit+0x11e>
 800c160:	2316      	movs	r3, #22
 800c162:	18fb      	adds	r3, r7, r3
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d13f      	bne.n	800c1ea <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c16e:	881a      	ldrh	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17a:	1c9a      	adds	r2, r3, #2
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c184:	b29b      	uxth	r3, r3
 800c186:	3b01      	subs	r3, #1
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c18e:	e02c      	b.n	800c1ea <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2202      	movs	r2, #2
 800c198:	4013      	ands	r3, r2
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d112      	bne.n	800c1c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	881a      	ldrh	r2, [r3, #0]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	1c9a      	adds	r2, r3, #2
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1c2:	e012      	b.n	800c1ea <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1c4:	f7fd fa82 	bl	80096cc <HAL_GetTick>
 800c1c8:	0002      	movs	r2, r0
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d802      	bhi.n	800c1da <HAL_SPI_Transmit+0x18e>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	d102      	bne.n	800c1e0 <HAL_SPI_Transmit+0x194>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800c1e0:	231f      	movs	r3, #31
 800c1e2:	18fb      	adds	r3, r7, r3
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	701a      	strb	r2, [r3, #0]
          goto error;
 800c1e8:	e079      	b.n	800c2de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1cd      	bne.n	800c190 <HAL_SPI_Transmit+0x144>
 800c1f4:	e04f      	b.n	800c296 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d004      	beq.n	800c208 <HAL_SPI_Transmit+0x1bc>
 800c1fe:	2316      	movs	r3, #22
 800c200:	18fb      	adds	r3, r7, r3
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d141      	bne.n	800c28c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	330c      	adds	r3, #12
 800c212:	7812      	ldrb	r2, [r2, #0]
 800c214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800c22e:	e02d      	b.n	800c28c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	2202      	movs	r2, #2
 800c238:	4013      	ands	r3, r2
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d113      	bne.n	800c266 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	330c      	adds	r3, #12
 800c248:	7812      	ldrb	r2, [r2, #0]
 800c24a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	3b01      	subs	r3, #1
 800c25e:	b29a      	uxth	r2, r3
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c264:	e012      	b.n	800c28c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c266:	f7fd fa31 	bl	80096cc <HAL_GetTick>
 800c26a:	0002      	movs	r2, r0
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	429a      	cmp	r2, r3
 800c274:	d802      	bhi.n	800c27c <HAL_SPI_Transmit+0x230>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	d102      	bne.n	800c282 <HAL_SPI_Transmit+0x236>
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d104      	bne.n	800c28c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800c282:	231f      	movs	r3, #31
 800c284:	18fb      	adds	r3, r7, r3
 800c286:	2203      	movs	r2, #3
 800c288:	701a      	strb	r2, [r3, #0]
          goto error;
 800c28a:	e028      	b.n	800c2de <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c290:	b29b      	uxth	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1cc      	bne.n	800c230 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	0018      	movs	r0, r3
 800c29e:	f000 fde9 	bl	800ce74 <SPI_EndRxTxTransaction>
 800c2a2:	1e03      	subs	r3, r0, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	613b      	str	r3, [r7, #16]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d004      	beq.n	800c2dc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800c2d2:	231f      	movs	r3, #31
 800c2d4:	18fb      	adds	r3, r7, r3
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	701a      	strb	r2, [r3, #0]
 800c2da:	e000      	b.n	800c2de <HAL_SPI_Transmit+0x292>
  }

error:
 800c2dc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	225d      	movs	r2, #93	; 0x5d
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	225c      	movs	r2, #92	; 0x5c
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c2ee:	231f      	movs	r3, #31
 800c2f0:	18fb      	adds	r3, r7, r3
 800c2f2:	781b      	ldrb	r3, [r3, #0]
}
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	b008      	add	sp, #32
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2fc:	b590      	push	{r4, r7, lr}
 800c2fe:	b089      	sub	sp, #36	; 0x24
 800c300:	af02      	add	r7, sp, #8
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	1dbb      	adds	r3, r7, #6
 800c30a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c30c:	2317      	movs	r3, #23
 800c30e:	18fb      	adds	r3, r7, r3
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	2382      	movs	r3, #130	; 0x82
 800c31a:	005b      	lsls	r3, r3, #1
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d113      	bne.n	800c348 <HAL_SPI_Receive+0x4c>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10f      	bne.n	800c348 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	225d      	movs	r2, #93	; 0x5d
 800c32c:	2104      	movs	r1, #4
 800c32e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c330:	1dbb      	adds	r3, r7, #6
 800c332:	881c      	ldrh	r4, [r3, #0]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	68b9      	ldr	r1, [r7, #8]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	0023      	movs	r3, r4
 800c340:	f000 f928 	bl	800c594 <HAL_SPI_TransmitReceive>
 800c344:	0003      	movs	r3, r0
 800c346:	e11c      	b.n	800c582 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	225c      	movs	r2, #92	; 0x5c
 800c34c:	5c9b      	ldrb	r3, [r3, r2]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d101      	bne.n	800c356 <HAL_SPI_Receive+0x5a>
 800c352:	2302      	movs	r3, #2
 800c354:	e115      	b.n	800c582 <HAL_SPI_Receive+0x286>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	225c      	movs	r2, #92	; 0x5c
 800c35a:	2101      	movs	r1, #1
 800c35c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c35e:	f7fd f9b5 	bl	80096cc <HAL_GetTick>
 800c362:	0003      	movs	r3, r0
 800c364:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	225d      	movs	r2, #93	; 0x5d
 800c36a:	5c9b      	ldrb	r3, [r3, r2]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d004      	beq.n	800c37c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800c372:	2317      	movs	r3, #23
 800c374:	18fb      	adds	r3, r7, r3
 800c376:	2202      	movs	r2, #2
 800c378:	701a      	strb	r2, [r3, #0]
    goto error;
 800c37a:	e0f7      	b.n	800c56c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <HAL_SPI_Receive+0x8e>
 800c382:	1dbb      	adds	r3, r7, #6
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d104      	bne.n	800c394 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800c38a:	2317      	movs	r3, #23
 800c38c:	18fb      	adds	r3, r7, r3
 800c38e:	2201      	movs	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
    goto error;
 800c392:	e0eb      	b.n	800c56c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	225d      	movs	r2, #93	; 0x5d
 800c398:	2104      	movs	r1, #4
 800c39a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	1dba      	adds	r2, r7, #6
 800c3ac:	2144      	movs	r1, #68	; 0x44
 800c3ae:	8812      	ldrh	r2, [r2, #0]
 800c3b0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1dba      	adds	r2, r7, #6
 800c3b6:	2146      	movs	r1, #70	; 0x46
 800c3b8:	8812      	ldrh	r2, [r2, #0]
 800c3ba:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	23e0      	movs	r3, #224	; 0xe0
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d908      	bls.n	800c3f8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4966      	ldr	r1, [pc, #408]	; (800c58c <HAL_SPI_Receive+0x290>)
 800c3f2:	400a      	ands	r2, r1
 800c3f4:	605a      	str	r2, [r3, #4]
 800c3f6:	e008      	b.n	800c40a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2180      	movs	r1, #128	; 0x80
 800c404:	0149      	lsls	r1, r1, #5
 800c406:	430a      	orrs	r2, r1
 800c408:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	689a      	ldr	r2, [r3, #8]
 800c40e:	2380      	movs	r3, #128	; 0x80
 800c410:	021b      	lsls	r3, r3, #8
 800c412:	429a      	cmp	r2, r3
 800c414:	d10f      	bne.n	800c436 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2140      	movs	r1, #64	; 0x40
 800c422:	438a      	bics	r2, r1
 800c424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4957      	ldr	r1, [pc, #348]	; (800c590 <HAL_SPI_Receive+0x294>)
 800c432:	400a      	ands	r2, r1
 800c434:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2240      	movs	r2, #64	; 0x40
 800c43e:	4013      	ands	r3, r2
 800c440:	2b40      	cmp	r3, #64	; 0x40
 800c442:	d007      	beq.n	800c454 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2140      	movs	r1, #64	; 0x40
 800c450:	430a      	orrs	r2, r1
 800c452:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	68da      	ldr	r2, [r3, #12]
 800c458:	23e0      	movs	r3, #224	; 0xe0
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d900      	bls.n	800c462 <HAL_SPI_Receive+0x166>
 800c460:	e069      	b.n	800c536 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c462:	e031      	b.n	800c4c8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	2201      	movs	r2, #1
 800c46c:	4013      	ands	r3, r2
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d117      	bne.n	800c4a2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	330c      	adds	r3, #12
 800c478:	001a      	movs	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47e:	7812      	ldrb	r2, [r2, #0]
 800c480:	b2d2      	uxtb	r2, r2
 800c482:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2246      	movs	r2, #70	; 0x46
 800c492:	5a9b      	ldrh	r3, [r3, r2]
 800c494:	b29b      	uxth	r3, r3
 800c496:	3b01      	subs	r3, #1
 800c498:	b299      	uxth	r1, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2246      	movs	r2, #70	; 0x46
 800c49e:	5299      	strh	r1, [r3, r2]
 800c4a0:	e012      	b.n	800c4c8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4a2:	f7fd f913 	bl	80096cc <HAL_GetTick>
 800c4a6:	0002      	movs	r2, r0
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d802      	bhi.n	800c4b8 <HAL_SPI_Receive+0x1bc>
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	d102      	bne.n	800c4be <HAL_SPI_Receive+0x1c2>
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d104      	bne.n	800c4c8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800c4be:	2317      	movs	r3, #23
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	701a      	strb	r2, [r3, #0]
          goto error;
 800c4c6:	e051      	b.n	800c56c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2246      	movs	r2, #70	; 0x46
 800c4cc:	5a9b      	ldrh	r3, [r3, r2]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d1c7      	bne.n	800c464 <HAL_SPI_Receive+0x168>
 800c4d4:	e035      	b.n	800c542 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	4013      	ands	r3, r2
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d115      	bne.n	800c510 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68da      	ldr	r2, [r3, #12]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ee:	b292      	uxth	r2, r2
 800c4f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	1c9a      	adds	r2, r3, #2
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2246      	movs	r2, #70	; 0x46
 800c500:	5a9b      	ldrh	r3, [r3, r2]
 800c502:	b29b      	uxth	r3, r3
 800c504:	3b01      	subs	r3, #1
 800c506:	b299      	uxth	r1, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2246      	movs	r2, #70	; 0x46
 800c50c:	5299      	strh	r1, [r3, r2]
 800c50e:	e012      	b.n	800c536 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c510:	f7fd f8dc 	bl	80096cc <HAL_GetTick>
 800c514:	0002      	movs	r2, r0
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d802      	bhi.n	800c526 <HAL_SPI_Receive+0x22a>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	d102      	bne.n	800c52c <HAL_SPI_Receive+0x230>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800c52c:	2317      	movs	r3, #23
 800c52e:	18fb      	adds	r3, r7, r3
 800c530:	2203      	movs	r2, #3
 800c532:	701a      	strb	r2, [r3, #0]
          goto error;
 800c534:	e01a      	b.n	800c56c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2246      	movs	r2, #70	; 0x46
 800c53a:	5a9b      	ldrh	r3, [r3, r2]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1c9      	bne.n	800c4d6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c542:	693a      	ldr	r2, [r7, #16]
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	0018      	movs	r0, r3
 800c54a:	f000 fc35 	bl	800cdb8 <SPI_EndRxTransaction>
 800c54e:	1e03      	subs	r3, r0, #0
 800c550:	d002      	beq.n	800c558 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2220      	movs	r2, #32
 800c556:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800c560:	2317      	movs	r3, #23
 800c562:	18fb      	adds	r3, r7, r3
 800c564:	2201      	movs	r2, #1
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	e000      	b.n	800c56c <HAL_SPI_Receive+0x270>
  }

error :
 800c56a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	225d      	movs	r2, #93	; 0x5d
 800c570:	2101      	movs	r1, #1
 800c572:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	225c      	movs	r2, #92	; 0x5c
 800c578:	2100      	movs	r1, #0
 800c57a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c57c:	2317      	movs	r3, #23
 800c57e:	18fb      	adds	r3, r7, r3
 800c580:	781b      	ldrb	r3, [r3, #0]
}
 800c582:	0018      	movs	r0, r3
 800c584:	46bd      	mov	sp, r7
 800c586:	b007      	add	sp, #28
 800c588:	bd90      	pop	{r4, r7, pc}
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	ffffefff 	.word	0xffffefff
 800c590:	ffffbfff 	.word	0xffffbfff

0800c594 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08a      	sub	sp, #40	; 0x28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	001a      	movs	r2, r3
 800c5a2:	1cbb      	adds	r3, r7, #2
 800c5a4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c5aa:	2323      	movs	r3, #35	; 0x23
 800c5ac:	18fb      	adds	r3, r7, r3
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	225c      	movs	r2, #92	; 0x5c
 800c5b6:	5c9b      	ldrb	r3, [r3, r2]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d101      	bne.n	800c5c0 <HAL_SPI_TransmitReceive+0x2c>
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e1b5      	b.n	800c92c <HAL_SPI_TransmitReceive+0x398>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	225c      	movs	r2, #92	; 0x5c
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5c8:	f7fd f880 	bl	80096cc <HAL_GetTick>
 800c5cc:	0003      	movs	r3, r0
 800c5ce:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c5d0:	201b      	movs	r0, #27
 800c5d2:	183b      	adds	r3, r7, r0
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	215d      	movs	r1, #93	; 0x5d
 800c5d8:	5c52      	ldrb	r2, [r2, r1]
 800c5da:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c5e2:	2312      	movs	r3, #18
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	1cba      	adds	r2, r7, #2
 800c5e8:	8812      	ldrh	r2, [r2, #0]
 800c5ea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c5ec:	183b      	adds	r3, r7, r0
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d011      	beq.n	800c618 <HAL_SPI_TransmitReceive+0x84>
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	2382      	movs	r3, #130	; 0x82
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d107      	bne.n	800c60e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d103      	bne.n	800c60e <HAL_SPI_TransmitReceive+0x7a>
 800c606:	183b      	adds	r3, r7, r0
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d004      	beq.n	800c618 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800c60e:	2323      	movs	r3, #35	; 0x23
 800c610:	18fb      	adds	r3, r7, r3
 800c612:	2202      	movs	r2, #2
 800c614:	701a      	strb	r2, [r3, #0]
    goto error;
 800c616:	e17e      	b.n	800c916 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d006      	beq.n	800c62c <HAL_SPI_TransmitReceive+0x98>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d003      	beq.n	800c62c <HAL_SPI_TransmitReceive+0x98>
 800c624:	1cbb      	adds	r3, r7, #2
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800c62c:	2323      	movs	r3, #35	; 0x23
 800c62e:	18fb      	adds	r3, r7, r3
 800c630:	2201      	movs	r2, #1
 800c632:	701a      	strb	r2, [r3, #0]
    goto error;
 800c634:	e16f      	b.n	800c916 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	225d      	movs	r2, #93	; 0x5d
 800c63a:	5c9b      	ldrb	r3, [r3, r2]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b04      	cmp	r3, #4
 800c640:	d003      	beq.n	800c64a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	225d      	movs	r2, #93	; 0x5d
 800c646:	2105      	movs	r1, #5
 800c648:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	1cba      	adds	r2, r7, #2
 800c65a:	2146      	movs	r1, #70	; 0x46
 800c65c:	8812      	ldrh	r2, [r2, #0]
 800c65e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	1cba      	adds	r2, r7, #2
 800c664:	2144      	movs	r1, #68	; 0x44
 800c666:	8812      	ldrh	r2, [r2, #0]
 800c668:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	1cba      	adds	r2, r7, #2
 800c674:	8812      	ldrh	r2, [r2, #0]
 800c676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	1cba      	adds	r2, r7, #2
 800c67c:	8812      	ldrh	r2, [r2, #0]
 800c67e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	23e0      	movs	r3, #224	; 0xe0
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	429a      	cmp	r2, r3
 800c696:	d908      	bls.n	800c6aa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	49a4      	ldr	r1, [pc, #656]	; (800c934 <HAL_SPI_TransmitReceive+0x3a0>)
 800c6a4:	400a      	ands	r2, r1
 800c6a6:	605a      	str	r2, [r3, #4]
 800c6a8:	e008      	b.n	800c6bc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2180      	movs	r1, #128	; 0x80
 800c6b6:	0149      	lsls	r1, r1, #5
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2240      	movs	r2, #64	; 0x40
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	2b40      	cmp	r3, #64	; 0x40
 800c6c8:	d007      	beq.n	800c6da <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2140      	movs	r1, #64	; 0x40
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	23e0      	movs	r3, #224	; 0xe0
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d800      	bhi.n	800c6e8 <HAL_SPI_TransmitReceive+0x154>
 800c6e6:	e07f      	b.n	800c7e8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d005      	beq.n	800c6fc <HAL_SPI_TransmitReceive+0x168>
 800c6f0:	2312      	movs	r3, #18
 800c6f2:	18fb      	adds	r3, r7, r3
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d000      	beq.n	800c6fc <HAL_SPI_TransmitReceive+0x168>
 800c6fa:	e069      	b.n	800c7d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c700:	881a      	ldrh	r2, [r3, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70c:	1c9a      	adds	r2, r3, #2
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c720:	e056      	b.n	800c7d0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	2202      	movs	r2, #2
 800c72a:	4013      	ands	r3, r2
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d11b      	bne.n	800c768 <HAL_SPI_TransmitReceive+0x1d4>
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c734:	b29b      	uxth	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d016      	beq.n	800c768 <HAL_SPI_TransmitReceive+0x1d4>
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d113      	bne.n	800c768 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c744:	881a      	ldrh	r2, [r3, #0]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c750:	1c9a      	adds	r2, r3, #2
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	3b01      	subs	r3, #1
 800c75e:	b29a      	uxth	r2, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	2201      	movs	r2, #1
 800c770:	4013      	ands	r3, r2
 800c772:	2b01      	cmp	r3, #1
 800c774:	d11c      	bne.n	800c7b0 <HAL_SPI_TransmitReceive+0x21c>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2246      	movs	r2, #70	; 0x46
 800c77a:	5a9b      	ldrh	r3, [r3, r2]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d016      	beq.n	800c7b0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68da      	ldr	r2, [r3, #12]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78c:	b292      	uxth	r2, r2
 800c78e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c794:	1c9a      	adds	r2, r3, #2
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2246      	movs	r2, #70	; 0x46
 800c79e:	5a9b      	ldrh	r3, [r3, r2]
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	b299      	uxth	r1, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2246      	movs	r2, #70	; 0x46
 800c7aa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c7b0:	f7fc ff8c 	bl	80096cc <HAL_GetTick>
 800c7b4:	0002      	movs	r2, r0
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d807      	bhi.n	800c7d0 <HAL_SPI_TransmitReceive+0x23c>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	d004      	beq.n	800c7d0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800c7c6:	2323      	movs	r3, #35	; 0x23
 800c7c8:	18fb      	adds	r3, r7, r3
 800c7ca:	2203      	movs	r2, #3
 800c7cc:	701a      	strb	r2, [r3, #0]
        goto error;
 800c7ce:	e0a2      	b.n	800c916 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1a3      	bne.n	800c722 <HAL_SPI_TransmitReceive+0x18e>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2246      	movs	r2, #70	; 0x46
 800c7de:	5a9b      	ldrh	r3, [r3, r2]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d19d      	bne.n	800c722 <HAL_SPI_TransmitReceive+0x18e>
 800c7e6:	e085      	b.n	800c8f4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d005      	beq.n	800c7fc <HAL_SPI_TransmitReceive+0x268>
 800c7f0:	2312      	movs	r3, #18
 800c7f2:	18fb      	adds	r3, r7, r3
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d000      	beq.n	800c7fc <HAL_SPI_TransmitReceive+0x268>
 800c7fa:	e070      	b.n	800c8de <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	330c      	adds	r3, #12
 800c806:	7812      	ldrb	r2, [r2, #0]
 800c808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c818:	b29b      	uxth	r3, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c822:	e05c      	b.n	800c8de <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	2202      	movs	r2, #2
 800c82c:	4013      	ands	r3, r2
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d11c      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x2d8>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c836:	b29b      	uxth	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d017      	beq.n	800c86c <HAL_SPI_TransmitReceive+0x2d8>
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d114      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	330c      	adds	r3, #12
 800c84c:	7812      	ldrb	r2, [r2, #0]
 800c84e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b01      	subs	r3, #1
 800c862:	b29a      	uxth	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c868:	2300      	movs	r3, #0
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	2201      	movs	r2, #1
 800c874:	4013      	ands	r3, r2
 800c876:	2b01      	cmp	r3, #1
 800c878:	d11e      	bne.n	800c8b8 <HAL_SPI_TransmitReceive+0x324>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2246      	movs	r2, #70	; 0x46
 800c87e:	5a9b      	ldrh	r3, [r3, r2]
 800c880:	b29b      	uxth	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d018      	beq.n	800c8b8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	330c      	adds	r3, #12
 800c88c:	001a      	movs	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c892:	7812      	ldrb	r2, [r2, #0]
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2246      	movs	r2, #70	; 0x46
 800c8a6:	5a9b      	ldrh	r3, [r3, r2]
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	b299      	uxth	r1, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2246      	movs	r2, #70	; 0x46
 800c8b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c8b8:	f7fc ff08 	bl	80096cc <HAL_GetTick>
 800c8bc:	0002      	movs	r2, r0
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d802      	bhi.n	800c8ce <HAL_SPI_TransmitReceive+0x33a>
 800c8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	d102      	bne.n	800c8d4 <HAL_SPI_TransmitReceive+0x340>
 800c8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d104      	bne.n	800c8de <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800c8d4:	2323      	movs	r3, #35	; 0x23
 800c8d6:	18fb      	adds	r3, r7, r3
 800c8d8:	2203      	movs	r2, #3
 800c8da:	701a      	strb	r2, [r3, #0]
        goto error;
 800c8dc:	e01b      	b.n	800c916 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d19d      	bne.n	800c824 <HAL_SPI_TransmitReceive+0x290>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2246      	movs	r2, #70	; 0x46
 800c8ec:	5a9b      	ldrh	r3, [r3, r2]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d197      	bne.n	800c824 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c8f4:	69fa      	ldr	r2, [r7, #28]
 800c8f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	f000 faba 	bl	800ce74 <SPI_EndRxTxTransaction>
 800c900:	1e03      	subs	r3, r0, #0
 800c902:	d007      	beq.n	800c914 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800c904:	2323      	movs	r3, #35	; 0x23
 800c906:	18fb      	adds	r3, r7, r3
 800c908:	2201      	movs	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2220      	movs	r2, #32
 800c910:	661a      	str	r2, [r3, #96]	; 0x60
 800c912:	e000      	b.n	800c916 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800c914:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	225d      	movs	r2, #93	; 0x5d
 800c91a:	2101      	movs	r1, #1
 800c91c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	225c      	movs	r2, #92	; 0x5c
 800c922:	2100      	movs	r1, #0
 800c924:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800c926:	2323      	movs	r3, #35	; 0x23
 800c928:	18fb      	adds	r3, r7, r3
 800c92a:	781b      	ldrb	r3, [r3, #0]
}
 800c92c:	0018      	movs	r0, r3
 800c92e:	46bd      	mov	sp, r7
 800c930:	b00a      	add	sp, #40	; 0x28
 800c932:	bd80      	pop	{r7, pc}
 800c934:	ffffefff 	.word	0xffffefff

0800c938 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b088      	sub	sp, #32
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	099b      	lsrs	r3, r3, #6
 800c954:	001a      	movs	r2, r3
 800c956:	2301      	movs	r3, #1
 800c958:	4013      	ands	r3, r2
 800c95a:	d10f      	bne.n	800c97c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	2201      	movs	r2, #1
 800c960:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c962:	d00b      	beq.n	800c97c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	099b      	lsrs	r3, r3, #6
 800c968:	001a      	movs	r2, r3
 800c96a:	2301      	movs	r3, #1
 800c96c:	4013      	ands	r3, r2
 800c96e:	d005      	beq.n	800c97c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	0010      	movs	r0, r2
 800c978:	4798      	blx	r3
    return;
 800c97a:	e0d5      	b.n	800cb28 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	085b      	lsrs	r3, r3, #1
 800c980:	001a      	movs	r2, r3
 800c982:	2301      	movs	r3, #1
 800c984:	4013      	ands	r3, r2
 800c986:	d00b      	beq.n	800c9a0 <HAL_SPI_IRQHandler+0x68>
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	09db      	lsrs	r3, r3, #7
 800c98c:	001a      	movs	r2, r3
 800c98e:	2301      	movs	r3, #1
 800c990:	4013      	ands	r3, r2
 800c992:	d005      	beq.n	800c9a0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	0010      	movs	r0, r2
 800c99c:	4798      	blx	r3
    return;
 800c99e:	e0c3      	b.n	800cb28 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	095b      	lsrs	r3, r3, #5
 800c9a4:	001a      	movs	r2, r3
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	d10c      	bne.n	800c9c6 <HAL_SPI_IRQHandler+0x8e>
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	099b      	lsrs	r3, r3, #6
 800c9b0:	001a      	movs	r2, r3
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4013      	ands	r3, r2
 800c9b6:	d106      	bne.n	800c9c6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	0a1b      	lsrs	r3, r3, #8
 800c9bc:	001a      	movs	r2, r3
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	d100      	bne.n	800c9c6 <HAL_SPI_IRQHandler+0x8e>
 800c9c4:	e0b0      	b.n	800cb28 <HAL_SPI_IRQHandler+0x1f0>
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	095b      	lsrs	r3, r3, #5
 800c9ca:	001a      	movs	r2, r3
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	d100      	bne.n	800c9d4 <HAL_SPI_IRQHandler+0x9c>
 800c9d2:	e0a9      	b.n	800cb28 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	099b      	lsrs	r3, r3, #6
 800c9d8:	001a      	movs	r2, r3
 800c9da:	2301      	movs	r3, #1
 800c9dc:	4013      	ands	r3, r2
 800c9de:	d023      	beq.n	800ca28 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	225d      	movs	r2, #93	; 0x5d
 800c9e4:	5c9b      	ldrb	r3, [r3, r2]
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d011      	beq.n	800ca10 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	e00b      	b.n	800ca28 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca10:	2300      	movs	r3, #0
 800ca12:	613b      	str	r3, [r7, #16]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	613b      	str	r3, [r7, #16]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	613b      	str	r3, [r7, #16]
 800ca24:	693b      	ldr	r3, [r7, #16]
        return;
 800ca26:	e07f      	b.n	800cb28 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	095b      	lsrs	r3, r3, #5
 800ca2c:	001a      	movs	r2, r3
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4013      	ands	r3, r2
 800ca32:	d014      	beq.n	800ca5e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca38:	2201      	movs	r2, #1
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ca40:	2300      	movs	r3, #0
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2140      	movs	r1, #64	; 0x40
 800ca58:	438a      	bics	r2, r1
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	0a1b      	lsrs	r3, r3, #8
 800ca62:	001a      	movs	r2, r3
 800ca64:	2301      	movs	r3, #1
 800ca66:	4013      	ands	r3, r2
 800ca68:	d00c      	beq.n	800ca84 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca6e:	2208      	movs	r2, #8
 800ca70:	431a      	orrs	r2, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ca76:	2300      	movs	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	60bb      	str	r3, [r7, #8]
 800ca82:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d04c      	beq.n	800cb26 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	21e0      	movs	r1, #224	; 0xe0
 800ca98:	438a      	bics	r2, r1
 800ca9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	225d      	movs	r2, #93	; 0x5d
 800caa0:	2101      	movs	r1, #1
 800caa2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	2202      	movs	r2, #2
 800caa8:	4013      	ands	r3, r2
 800caaa:	d103      	bne.n	800cab4 <HAL_SPI_IRQHandler+0x17c>
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	2201      	movs	r2, #1
 800cab0:	4013      	ands	r3, r2
 800cab2:	d032      	beq.n	800cb1a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2103      	movs	r1, #3
 800cac0:	438a      	bics	r2, r1
 800cac2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d010      	beq.n	800caee <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad0:	4a17      	ldr	r2, [pc, #92]	; (800cb30 <HAL_SPI_IRQHandler+0x1f8>)
 800cad2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cad8:	0018      	movs	r0, r3
 800cada:	f7fc ff03 	bl	80098e4 <HAL_DMA_Abort_IT>
 800cade:	1e03      	subs	r3, r0, #0
 800cae0:	d005      	beq.n	800caee <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cae6:	2240      	movs	r2, #64	; 0x40
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d016      	beq.n	800cb24 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafa:	4a0d      	ldr	r2, [pc, #52]	; (800cb30 <HAL_SPI_IRQHandler+0x1f8>)
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb02:	0018      	movs	r0, r3
 800cb04:	f7fc feee 	bl	80098e4 <HAL_DMA_Abort_IT>
 800cb08:	1e03      	subs	r3, r0, #0
 800cb0a:	d00b      	beq.n	800cb24 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb10:	2240      	movs	r2, #64	; 0x40
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800cb18:	e004      	b.n	800cb24 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	0018      	movs	r0, r3
 800cb1e:	f000 f809 	bl	800cb34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cb22:	e000      	b.n	800cb26 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800cb24:	46c0      	nop			; (mov r8, r8)
    return;
 800cb26:	46c0      	nop			; (mov r8, r8)
  }
}
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	b008      	add	sp, #32
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	0800cb45 	.word	0x0800cb45

0800cb34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cb3c:	46c0      	nop			; (mov r8, r8)
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b002      	add	sp, #8
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2246      	movs	r2, #70	; 0x46
 800cb56:	2100      	movs	r1, #0
 800cb58:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	0018      	movs	r0, r3
 800cb64:	f7ff ffe6 	bl	800cb34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb68:	46c0      	nop			; (mov r8, r8)
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	b004      	add	sp, #16
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	1dfb      	adds	r3, r7, #7
 800cb7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cb80:	f7fc fda4 	bl	80096cc <HAL_GetTick>
 800cb84:	0002      	movs	r2, r0
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	1a9b      	subs	r3, r3, r2
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	18d3      	adds	r3, r2, r3
 800cb8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cb90:	f7fc fd9c 	bl	80096cc <HAL_GetTick>
 800cb94:	0003      	movs	r3, r0
 800cb96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cb98:	4b3a      	ldr	r3, [pc, #232]	; (800cc84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	015b      	lsls	r3, r3, #5
 800cb9e:	0d1b      	lsrs	r3, r3, #20
 800cba0:	69fa      	ldr	r2, [r7, #28]
 800cba2:	4353      	muls	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cba6:	e058      	b.n	800cc5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	d055      	beq.n	800cc5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cbae:	f7fc fd8d 	bl	80096cc <HAL_GetTick>
 800cbb2:	0002      	movs	r2, r0
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	69fa      	ldr	r2, [r7, #28]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d902      	bls.n	800cbc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d142      	bne.n	800cc4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	21e0      	movs	r1, #224	; 0xe0
 800cbd0:	438a      	bics	r2, r1
 800cbd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	2382      	movs	r3, #130	; 0x82
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d113      	bne.n	800cc08 <SPI_WaitFlagStateUntilTimeout+0x98>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	689a      	ldr	r2, [r3, #8]
 800cbe4:	2380      	movs	r3, #128	; 0x80
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d005      	beq.n	800cbf8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	2380      	movs	r3, #128	; 0x80
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d107      	bne.n	800cc08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2140      	movs	r1, #64	; 0x40
 800cc04:	438a      	bics	r2, r1
 800cc06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc0c:	2380      	movs	r3, #128	; 0x80
 800cc0e:	019b      	lsls	r3, r3, #6
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d110      	bne.n	800cc36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	491a      	ldr	r1, [pc, #104]	; (800cc88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800cc20:	400a      	ands	r2, r1
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2180      	movs	r1, #128	; 0x80
 800cc30:	0189      	lsls	r1, r1, #6
 800cc32:	430a      	orrs	r2, r1
 800cc34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	225d      	movs	r2, #93	; 0x5d
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	225c      	movs	r2, #92	; 0x5c
 800cc42:	2100      	movs	r1, #0
 800cc44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e017      	b.n	800cc7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d101      	bne.n	800cc54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800cc50:	2300      	movs	r3, #0
 800cc52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4013      	ands	r3, r2
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	425a      	negs	r2, r3
 800cc6a:	4153      	adcs	r3, r2
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	001a      	movs	r2, r3
 800cc70:	1dfb      	adds	r3, r7, #7
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d197      	bne.n	800cba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	b008      	add	sp, #32
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	20000014 	.word	0x20000014
 800cc88:	ffffdfff 	.word	0xffffdfff

0800cc8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cc9a:	f7fc fd17 	bl	80096cc <HAL_GetTick>
 800cc9e:	0002      	movs	r2, r0
 800cca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	18d3      	adds	r3, r2, r3
 800cca8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ccaa:	f7fc fd0f 	bl	80096cc <HAL_GetTick>
 800ccae:	0003      	movs	r3, r0
 800ccb0:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ccb2:	4b3f      	ldr	r3, [pc, #252]	; (800cdb0 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	0013      	movs	r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	189b      	adds	r3, r3, r2
 800ccbc:	00da      	lsls	r2, r3, #3
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	0d1b      	lsrs	r3, r3, #20
 800ccc2:	69fa      	ldr	r2, [r7, #28]
 800ccc4:	4353      	muls	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800ccc8:	e064      	b.n	800cd94 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	23c0      	movs	r3, #192	; 0xc0
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d106      	bne.n	800cce2 <SPI_WaitFifoStateUntilTimeout+0x56>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d103      	bne.n	800cce2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	330c      	adds	r3, #12
 800cce0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	d055      	beq.n	800cd94 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cce8:	f7fc fcf0 	bl	80096cc <HAL_GetTick>
 800ccec:	0002      	movs	r2, r0
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	69fa      	ldr	r2, [r7, #28]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d902      	bls.n	800ccfe <SPI_WaitFifoStateUntilTimeout+0x72>
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d142      	bne.n	800cd84 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	21e0      	movs	r1, #224	; 0xe0
 800cd0a:	438a      	bics	r2, r1
 800cd0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	2382      	movs	r3, #130	; 0x82
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d113      	bne.n	800cd42 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	2380      	movs	r3, #128	; 0x80
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d005      	beq.n	800cd32 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	689a      	ldr	r2, [r3, #8]
 800cd2a:	2380      	movs	r3, #128	; 0x80
 800cd2c:	00db      	lsls	r3, r3, #3
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d107      	bne.n	800cd42 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2140      	movs	r1, #64	; 0x40
 800cd3e:	438a      	bics	r2, r1
 800cd40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd46:	2380      	movs	r3, #128	; 0x80
 800cd48:	019b      	lsls	r3, r3, #6
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d110      	bne.n	800cd70 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4916      	ldr	r1, [pc, #88]	; (800cdb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cd5a:	400a      	ands	r2, r1
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2180      	movs	r1, #128	; 0x80
 800cd6a:	0189      	lsls	r1, r1, #6
 800cd6c:	430a      	orrs	r2, r1
 800cd6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	225d      	movs	r2, #93	; 0x5d
 800cd74:	2101      	movs	r1, #1
 800cd76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	225c      	movs	r2, #92	; 0x5c
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e010      	b.n	800cda6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	68ba      	ldr	r2, [r7, #8]
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d192      	bne.n	800ccca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	0018      	movs	r0, r3
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	b008      	add	sp, #32
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	20000014 	.word	0x20000014
 800cdb4:	ffffdfff 	.word	0xffffdfff

0800cdb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	2382      	movs	r3, #130	; 0x82
 800cdca:	005b      	lsls	r3, r3, #1
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d113      	bne.n	800cdf8 <SPI_EndRxTransaction+0x40>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	689a      	ldr	r2, [r3, #8]
 800cdd4:	2380      	movs	r3, #128	; 0x80
 800cdd6:	021b      	lsls	r3, r3, #8
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d005      	beq.n	800cde8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d107      	bne.n	800cdf8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2140      	movs	r1, #64	; 0x40
 800cdf4:	438a      	bics	r2, r1
 800cdf6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	0013      	movs	r3, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	2180      	movs	r1, #128	; 0x80
 800ce06:	f7ff feb3 	bl	800cb70 <SPI_WaitFlagStateUntilTimeout>
 800ce0a:	1e03      	subs	r3, r0, #0
 800ce0c:	d007      	beq.n	800ce1e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce12:	2220      	movs	r2, #32
 800ce14:	431a      	orrs	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e026      	b.n	800ce6c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	2382      	movs	r3, #130	; 0x82
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d11f      	bne.n	800ce6a <SPI_EndRxTransaction+0xb2>
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	689a      	ldr	r2, [r3, #8]
 800ce2e:	2380      	movs	r3, #128	; 0x80
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d005      	beq.n	800ce42 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	689a      	ldr	r2, [r3, #8]
 800ce3a:	2380      	movs	r3, #128	; 0x80
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d113      	bne.n	800ce6a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	23c0      	movs	r3, #192	; 0xc0
 800ce46:	00d9      	lsls	r1, r3, #3
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	0013      	movs	r3, r2
 800ce50:	2200      	movs	r2, #0
 800ce52:	f7ff ff1b 	bl	800cc8c <SPI_WaitFifoStateUntilTimeout>
 800ce56:	1e03      	subs	r3, r0, #0
 800ce58:	d007      	beq.n	800ce6a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce5e:	2220      	movs	r2, #32
 800ce60:	431a      	orrs	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	e000      	b.n	800ce6c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	0018      	movs	r0, r3
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	b004      	add	sp, #16
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	23c0      	movs	r3, #192	; 0xc0
 800ce84:	0159      	lsls	r1, r3, #5
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	0013      	movs	r3, r2
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f7ff fefc 	bl	800cc8c <SPI_WaitFifoStateUntilTimeout>
 800ce94:	1e03      	subs	r3, r0, #0
 800ce96:	d007      	beq.n	800cea8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	e027      	b.n	800cef8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	0013      	movs	r3, r2
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2180      	movs	r1, #128	; 0x80
 800ceb6:	f7ff fe5b 	bl	800cb70 <SPI_WaitFlagStateUntilTimeout>
 800ceba:	1e03      	subs	r3, r0, #0
 800cebc:	d007      	beq.n	800cece <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cec2:	2220      	movs	r2, #32
 800cec4:	431a      	orrs	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e014      	b.n	800cef8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	23c0      	movs	r3, #192	; 0xc0
 800ced2:	00d9      	lsls	r1, r3, #3
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	0013      	movs	r3, r2
 800cedc:	2200      	movs	r2, #0
 800cede:	f7ff fed5 	bl	800cc8c <SPI_WaitFifoStateUntilTimeout>
 800cee2:	1e03      	subs	r3, r0, #0
 800cee4:	d007      	beq.n	800cef6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceea:	2220      	movs	r2, #32
 800ceec:	431a      	orrs	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cef2:	2303      	movs	r3, #3
 800cef4:	e000      	b.n	800cef8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	0018      	movs	r0, r3
 800cefa:	46bd      	mov	sp, r7
 800cefc:	b004      	add	sp, #16
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	691b      	ldr	r3, [r3, #16]
 800cf0e:	2202      	movs	r2, #2
 800cf10:	4013      	ands	r3, r2
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d124      	bne.n	800cf60 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	4013      	ands	r3, r2
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	d11d      	bne.n	800cf60 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2203      	movs	r2, #3
 800cf2a:	4252      	negs	r2, r2
 800cf2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	699b      	ldr	r3, [r3, #24]
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	d004      	beq.n	800cf4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	0018      	movs	r0, r3
 800cf44:	f000 f902 	bl	800d14c <HAL_TIM_IC_CaptureCallback>
 800cf48:	e007      	b.n	800cf5a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f000 f8f5 	bl	800d13c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	0018      	movs	r0, r3
 800cf56:	f000 f901 	bl	800d15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2204      	movs	r2, #4
 800cf68:	4013      	ands	r3, r2
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d125      	bne.n	800cfba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	2204      	movs	r2, #4
 800cf76:	4013      	ands	r3, r2
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	d11e      	bne.n	800cfba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2205      	movs	r2, #5
 800cf82:	4252      	negs	r2, r2
 800cf84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	23c0      	movs	r3, #192	; 0xc0
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4013      	ands	r3, r2
 800cf98:	d004      	beq.n	800cfa4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	f000 f8d5 	bl	800d14c <HAL_TIM_IC_CaptureCallback>
 800cfa2:	e007      	b.n	800cfb4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	0018      	movs	r0, r3
 800cfa8:	f000 f8c8 	bl	800d13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	0018      	movs	r0, r3
 800cfb0:	f000 f8d4 	bl	800d15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	2b08      	cmp	r3, #8
 800cfc6:	d124      	bne.n	800d012 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	2208      	movs	r2, #8
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	2b08      	cmp	r3, #8
 800cfd4:	d11d      	bne.n	800d012 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2209      	movs	r2, #9
 800cfdc:	4252      	negs	r2, r2
 800cfde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2204      	movs	r2, #4
 800cfe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2203      	movs	r2, #3
 800cfee:	4013      	ands	r3, r2
 800cff0:	d004      	beq.n	800cffc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	0018      	movs	r0, r3
 800cff6:	f000 f8a9 	bl	800d14c <HAL_TIM_IC_CaptureCallback>
 800cffa:	e007      	b.n	800d00c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	0018      	movs	r0, r3
 800d000:	f000 f89c 	bl	800d13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	0018      	movs	r0, r3
 800d008:	f000 f8a8 	bl	800d15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	2210      	movs	r2, #16
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b10      	cmp	r3, #16
 800d01e:	d125      	bne.n	800d06c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	2210      	movs	r2, #16
 800d028:	4013      	ands	r3, r2
 800d02a:	2b10      	cmp	r3, #16
 800d02c:	d11e      	bne.n	800d06c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2211      	movs	r2, #17
 800d034:	4252      	negs	r2, r2
 800d036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2208      	movs	r2, #8
 800d03c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	69da      	ldr	r2, [r3, #28]
 800d044:	23c0      	movs	r3, #192	; 0xc0
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4013      	ands	r3, r2
 800d04a:	d004      	beq.n	800d056 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	0018      	movs	r0, r3
 800d050:	f000 f87c 	bl	800d14c <HAL_TIM_IC_CaptureCallback>
 800d054:	e007      	b.n	800d066 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	0018      	movs	r0, r3
 800d05a:	f000 f86f 	bl	800d13c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	0018      	movs	r0, r3
 800d062:	f000 f87b 	bl	800d15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2201      	movs	r2, #1
 800d074:	4013      	ands	r3, r2
 800d076:	2b01      	cmp	r3, #1
 800d078:	d10f      	bne.n	800d09a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	2201      	movs	r2, #1
 800d082:	4013      	ands	r3, r2
 800d084:	2b01      	cmp	r3, #1
 800d086:	d108      	bne.n	800d09a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2202      	movs	r2, #2
 800d08e:	4252      	negs	r2, r2
 800d090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	0018      	movs	r0, r3
 800d096:	f000 f849 	bl	800d12c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	2280      	movs	r2, #128	; 0x80
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	2b80      	cmp	r3, #128	; 0x80
 800d0a6:	d10f      	bne.n	800d0c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	2280      	movs	r2, #128	; 0x80
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	2b80      	cmp	r3, #128	; 0x80
 800d0b4:	d108      	bne.n	800d0c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2281      	movs	r2, #129	; 0x81
 800d0bc:	4252      	negs	r2, r2
 800d0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	0018      	movs	r0, r3
 800d0c4:	f000 f862 	bl	800d18c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	2240      	movs	r2, #64	; 0x40
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	2b40      	cmp	r3, #64	; 0x40
 800d0d4:	d10f      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	2240      	movs	r2, #64	; 0x40
 800d0de:	4013      	ands	r3, r2
 800d0e0:	2b40      	cmp	r3, #64	; 0x40
 800d0e2:	d108      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2241      	movs	r2, #65	; 0x41
 800d0ea:	4252      	negs	r2, r2
 800d0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f000 f83b 	bl	800d16c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	4013      	ands	r3, r2
 800d100:	2b20      	cmp	r3, #32
 800d102:	d10f      	bne.n	800d124 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	2220      	movs	r2, #32
 800d10c:	4013      	ands	r3, r2
 800d10e:	2b20      	cmp	r3, #32
 800d110:	d108      	bne.n	800d124 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2221      	movs	r2, #33	; 0x21
 800d118:	4252      	negs	r2, r2
 800d11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	0018      	movs	r0, r3
 800d120:	f000 f82c 	bl	800d17c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d124:	46c0      	nop			; (mov r8, r8)
 800d126:	46bd      	mov	sp, r7
 800d128:	b002      	add	sp, #8
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d134:	46c0      	nop			; (mov r8, r8)
 800d136:	46bd      	mov	sp, r7
 800d138:	b002      	add	sp, #8
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d144:	46c0      	nop			; (mov r8, r8)
 800d146:	46bd      	mov	sp, r7
 800d148:	b002      	add	sp, #8
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d154:	46c0      	nop			; (mov r8, r8)
 800d156:	46bd      	mov	sp, r7
 800d158:	b002      	add	sp, #8
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d164:	46c0      	nop			; (mov r8, r8)
 800d166:	46bd      	mov	sp, r7
 800d168:	b002      	add	sp, #8
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d174:	46c0      	nop			; (mov r8, r8)
 800d176:	46bd      	mov	sp, r7
 800d178:	b002      	add	sp, #8
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d184:	46c0      	nop			; (mov r8, r8)
 800d186:	46bd      	mov	sp, r7
 800d188:	b002      	add	sp, #8
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d194:	46c0      	nop			; (mov r8, r8)
 800d196:	46bd      	mov	sp, r7
 800d198:	b002      	add	sp, #8
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e044      	b.n	800d238 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d107      	bne.n	800d1c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2274      	movs	r2, #116	; 0x74
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	f7fa ff09 	bl	8007fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2224      	movs	r2, #36	; 0x24
 800d1ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	438a      	bics	r2, r1
 800d1da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	0018      	movs	r0, r3
 800d1e0:	f000 f830 	bl	800d244 <UART_SetConfig>
 800d1e4:	0003      	movs	r3, r0
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d101      	bne.n	800d1ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e024      	b.n	800d238 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f000 f97b 	bl	800d4f4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	490d      	ldr	r1, [pc, #52]	; (800d240 <HAL_UART_Init+0xa4>)
 800d20a:	400a      	ands	r2, r1
 800d20c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	689a      	ldr	r2, [r3, #8]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2108      	movs	r1, #8
 800d21a:	438a      	bics	r2, r1
 800d21c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2101      	movs	r1, #1
 800d22a:	430a      	orrs	r2, r1
 800d22c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	0018      	movs	r0, r3
 800d232:	f000 fa13 	bl	800d65c <UART_CheckIdleState>
 800d236:	0003      	movs	r3, r0
}
 800d238:	0018      	movs	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	b002      	add	sp, #8
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	fffff7ff 	.word	0xfffff7ff

0800d244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d24c:	231e      	movs	r3, #30
 800d24e:	18fb      	adds	r3, r7, r3
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	69db      	ldr	r3, [r3, #28]
 800d268:	4313      	orrs	r3, r2
 800d26a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a97      	ldr	r2, [pc, #604]	; (800d4d0 <UART_SetConfig+0x28c>)
 800d274:	4013      	ands	r3, r2
 800d276:	0019      	movs	r1, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	430a      	orrs	r2, r1
 800d280:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4a92      	ldr	r2, [pc, #584]	; (800d4d4 <UART_SetConfig+0x290>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	0019      	movs	r1, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68da      	ldr	r2, [r3, #12]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	430a      	orrs	r2, r1
 800d298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a1b      	ldr	r3, [r3, #32]
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	4a89      	ldr	r2, [pc, #548]	; (800d4d8 <UART_SetConfig+0x294>)
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	0019      	movs	r1, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	697a      	ldr	r2, [r7, #20]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a85      	ldr	r2, [pc, #532]	; (800d4dc <UART_SetConfig+0x298>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d127      	bne.n	800d31a <UART_SetConfig+0xd6>
 800d2ca:	4b85      	ldr	r3, [pc, #532]	; (800d4e0 <UART_SetConfig+0x29c>)
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ce:	2203      	movs	r2, #3
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d00d      	beq.n	800d2f2 <UART_SetConfig+0xae>
 800d2d6:	d81b      	bhi.n	800d310 <UART_SetConfig+0xcc>
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d014      	beq.n	800d306 <UART_SetConfig+0xc2>
 800d2dc:	d818      	bhi.n	800d310 <UART_SetConfig+0xcc>
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <UART_SetConfig+0xa4>
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d00a      	beq.n	800d2fc <UART_SetConfig+0xb8>
 800d2e6:	e013      	b.n	800d310 <UART_SetConfig+0xcc>
 800d2e8:	231f      	movs	r3, #31
 800d2ea:	18fb      	adds	r3, r7, r3
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]
 800d2f0:	e035      	b.n	800d35e <UART_SetConfig+0x11a>
 800d2f2:	231f      	movs	r3, #31
 800d2f4:	18fb      	adds	r3, r7, r3
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e030      	b.n	800d35e <UART_SetConfig+0x11a>
 800d2fc:	231f      	movs	r3, #31
 800d2fe:	18fb      	adds	r3, r7, r3
 800d300:	2204      	movs	r2, #4
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e02b      	b.n	800d35e <UART_SetConfig+0x11a>
 800d306:	231f      	movs	r3, #31
 800d308:	18fb      	adds	r3, r7, r3
 800d30a:	2208      	movs	r2, #8
 800d30c:	701a      	strb	r2, [r3, #0]
 800d30e:	e026      	b.n	800d35e <UART_SetConfig+0x11a>
 800d310:	231f      	movs	r3, #31
 800d312:	18fb      	adds	r3, r7, r3
 800d314:	2210      	movs	r2, #16
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	e021      	b.n	800d35e <UART_SetConfig+0x11a>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a71      	ldr	r2, [pc, #452]	; (800d4e4 <UART_SetConfig+0x2a0>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d104      	bne.n	800d32e <UART_SetConfig+0xea>
 800d324:	231f      	movs	r3, #31
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	2200      	movs	r2, #0
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e017      	b.n	800d35e <UART_SetConfig+0x11a>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a6d      	ldr	r2, [pc, #436]	; (800d4e8 <UART_SetConfig+0x2a4>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d104      	bne.n	800d342 <UART_SetConfig+0xfe>
 800d338:	231f      	movs	r3, #31
 800d33a:	18fb      	adds	r3, r7, r3
 800d33c:	2200      	movs	r2, #0
 800d33e:	701a      	strb	r2, [r3, #0]
 800d340:	e00d      	b.n	800d35e <UART_SetConfig+0x11a>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a69      	ldr	r2, [pc, #420]	; (800d4ec <UART_SetConfig+0x2a8>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d104      	bne.n	800d356 <UART_SetConfig+0x112>
 800d34c:	231f      	movs	r3, #31
 800d34e:	18fb      	adds	r3, r7, r3
 800d350:	2200      	movs	r2, #0
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	e003      	b.n	800d35e <UART_SetConfig+0x11a>
 800d356:	231f      	movs	r3, #31
 800d358:	18fb      	adds	r3, r7, r3
 800d35a:	2210      	movs	r2, #16
 800d35c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	69da      	ldr	r2, [r3, #28]
 800d362:	2380      	movs	r3, #128	; 0x80
 800d364:	021b      	lsls	r3, r3, #8
 800d366:	429a      	cmp	r2, r3
 800d368:	d15d      	bne.n	800d426 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800d36a:	231f      	movs	r3, #31
 800d36c:	18fb      	adds	r3, r7, r3
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b08      	cmp	r3, #8
 800d372:	d015      	beq.n	800d3a0 <UART_SetConfig+0x15c>
 800d374:	dc18      	bgt.n	800d3a8 <UART_SetConfig+0x164>
 800d376:	2b04      	cmp	r3, #4
 800d378:	d00d      	beq.n	800d396 <UART_SetConfig+0x152>
 800d37a:	dc15      	bgt.n	800d3a8 <UART_SetConfig+0x164>
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <UART_SetConfig+0x142>
 800d380:	2b02      	cmp	r3, #2
 800d382:	d005      	beq.n	800d390 <UART_SetConfig+0x14c>
 800d384:	e010      	b.n	800d3a8 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d386:	f7fe fa49 	bl	800b81c <HAL_RCC_GetPCLK1Freq>
 800d38a:	0003      	movs	r3, r0
 800d38c:	61bb      	str	r3, [r7, #24]
        break;
 800d38e:	e012      	b.n	800d3b6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d390:	4b57      	ldr	r3, [pc, #348]	; (800d4f0 <UART_SetConfig+0x2ac>)
 800d392:	61bb      	str	r3, [r7, #24]
        break;
 800d394:	e00f      	b.n	800d3b6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d396:	f7fe f9cf 	bl	800b738 <HAL_RCC_GetSysClockFreq>
 800d39a:	0003      	movs	r3, r0
 800d39c:	61bb      	str	r3, [r7, #24]
        break;
 800d39e:	e00a      	b.n	800d3b6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3a0:	2380      	movs	r3, #128	; 0x80
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	61bb      	str	r3, [r7, #24]
        break;
 800d3a6:	e006      	b.n	800d3b6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d3ac:	231e      	movs	r3, #30
 800d3ae:	18fb      	adds	r3, r7, r3
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	701a      	strb	r2, [r3, #0]
        break;
 800d3b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d100      	bne.n	800d3be <UART_SetConfig+0x17a>
 800d3bc:	e07b      	b.n	800d4b6 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	005a      	lsls	r2, r3, #1
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	085b      	lsrs	r3, r3, #1
 800d3c8:	18d2      	adds	r2, r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	0019      	movs	r1, r3
 800d3d0:	0010      	movs	r0, r2
 800d3d2:	f7f2 feb5 	bl	8000140 <__udivsi3>
 800d3d6:	0003      	movs	r3, r0
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	2b0f      	cmp	r3, #15
 800d3e0:	d91c      	bls.n	800d41c <UART_SetConfig+0x1d8>
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	2380      	movs	r3, #128	; 0x80
 800d3e6:	025b      	lsls	r3, r3, #9
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d217      	bcs.n	800d41c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	200e      	movs	r0, #14
 800d3f2:	183b      	adds	r3, r7, r0
 800d3f4:	210f      	movs	r1, #15
 800d3f6:	438a      	bics	r2, r1
 800d3f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	085b      	lsrs	r3, r3, #1
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	2207      	movs	r2, #7
 800d402:	4013      	ands	r3, r2
 800d404:	b299      	uxth	r1, r3
 800d406:	183b      	adds	r3, r7, r0
 800d408:	183a      	adds	r2, r7, r0
 800d40a:	8812      	ldrh	r2, [r2, #0]
 800d40c:	430a      	orrs	r2, r1
 800d40e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	183a      	adds	r2, r7, r0
 800d416:	8812      	ldrh	r2, [r2, #0]
 800d418:	60da      	str	r2, [r3, #12]
 800d41a:	e04c      	b.n	800d4b6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800d41c:	231e      	movs	r3, #30
 800d41e:	18fb      	adds	r3, r7, r3
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	e047      	b.n	800d4b6 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d426:	231f      	movs	r3, #31
 800d428:	18fb      	adds	r3, r7, r3
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	2b08      	cmp	r3, #8
 800d42e:	d015      	beq.n	800d45c <UART_SetConfig+0x218>
 800d430:	dc18      	bgt.n	800d464 <UART_SetConfig+0x220>
 800d432:	2b04      	cmp	r3, #4
 800d434:	d00d      	beq.n	800d452 <UART_SetConfig+0x20e>
 800d436:	dc15      	bgt.n	800d464 <UART_SetConfig+0x220>
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <UART_SetConfig+0x1fe>
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d005      	beq.n	800d44c <UART_SetConfig+0x208>
 800d440:	e010      	b.n	800d464 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d442:	f7fe f9eb 	bl	800b81c <HAL_RCC_GetPCLK1Freq>
 800d446:	0003      	movs	r3, r0
 800d448:	61bb      	str	r3, [r7, #24]
        break;
 800d44a:	e012      	b.n	800d472 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d44c:	4b28      	ldr	r3, [pc, #160]	; (800d4f0 <UART_SetConfig+0x2ac>)
 800d44e:	61bb      	str	r3, [r7, #24]
        break;
 800d450:	e00f      	b.n	800d472 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d452:	f7fe f971 	bl	800b738 <HAL_RCC_GetSysClockFreq>
 800d456:	0003      	movs	r3, r0
 800d458:	61bb      	str	r3, [r7, #24]
        break;
 800d45a:	e00a      	b.n	800d472 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d45c:	2380      	movs	r3, #128	; 0x80
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	61bb      	str	r3, [r7, #24]
        break;
 800d462:	e006      	b.n	800d472 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 800d464:	2300      	movs	r3, #0
 800d466:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d468:	231e      	movs	r3, #30
 800d46a:	18fb      	adds	r3, r7, r3
 800d46c:	2201      	movs	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
        break;
 800d470:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01e      	beq.n	800d4b6 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	085a      	lsrs	r2, r3, #1
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	18d2      	adds	r2, r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	0019      	movs	r1, r3
 800d488:	0010      	movs	r0, r2
 800d48a:	f7f2 fe59 	bl	8000140 <__udivsi3>
 800d48e:	0003      	movs	r3, r0
 800d490:	b29b      	uxth	r3, r3
 800d492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	2b0f      	cmp	r3, #15
 800d498:	d909      	bls.n	800d4ae <UART_SetConfig+0x26a>
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	2380      	movs	r3, #128	; 0x80
 800d49e:	025b      	lsls	r3, r3, #9
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d204      	bcs.n	800d4ae <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	60da      	str	r2, [r3, #12]
 800d4ac:	e003      	b.n	800d4b6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800d4ae:	231e      	movs	r3, #30
 800d4b0:	18fb      	adds	r3, r7, r3
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d4c2:	231e      	movs	r3, #30
 800d4c4:	18fb      	adds	r3, r7, r3
 800d4c6:	781b      	ldrb	r3, [r3, #0]
}
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	b008      	add	sp, #32
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	efff69f3 	.word	0xefff69f3
 800d4d4:	ffffcfff 	.word	0xffffcfff
 800d4d8:	fffff4ff 	.word	0xfffff4ff
 800d4dc:	40013800 	.word	0x40013800
 800d4e0:	40021000 	.word	0x40021000
 800d4e4:	40004400 	.word	0x40004400
 800d4e8:	40004800 	.word	0x40004800
 800d4ec:	40004c00 	.word	0x40004c00
 800d4f0:	007a1200 	.word	0x007a1200

0800d4f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	2201      	movs	r2, #1
 800d502:	4013      	ands	r3, r2
 800d504:	d00b      	beq.n	800d51e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	4a4a      	ldr	r2, [pc, #296]	; (800d638 <UART_AdvFeatureConfig+0x144>)
 800d50e:	4013      	ands	r3, r2
 800d510:	0019      	movs	r1, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	430a      	orrs	r2, r1
 800d51c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d522:	2202      	movs	r2, #2
 800d524:	4013      	ands	r3, r2
 800d526:	d00b      	beq.n	800d540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	4a43      	ldr	r2, [pc, #268]	; (800d63c <UART_AdvFeatureConfig+0x148>)
 800d530:	4013      	ands	r3, r2
 800d532:	0019      	movs	r1, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	430a      	orrs	r2, r1
 800d53e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d544:	2204      	movs	r2, #4
 800d546:	4013      	ands	r3, r2
 800d548:	d00b      	beq.n	800d562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	4a3b      	ldr	r2, [pc, #236]	; (800d640 <UART_AdvFeatureConfig+0x14c>)
 800d552:	4013      	ands	r3, r2
 800d554:	0019      	movs	r1, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	430a      	orrs	r2, r1
 800d560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	2208      	movs	r2, #8
 800d568:	4013      	ands	r3, r2
 800d56a:	d00b      	beq.n	800d584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	4a34      	ldr	r2, [pc, #208]	; (800d644 <UART_AdvFeatureConfig+0x150>)
 800d574:	4013      	ands	r3, r2
 800d576:	0019      	movs	r1, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	430a      	orrs	r2, r1
 800d582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	2210      	movs	r2, #16
 800d58a:	4013      	ands	r3, r2
 800d58c:	d00b      	beq.n	800d5a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	4a2c      	ldr	r2, [pc, #176]	; (800d648 <UART_AdvFeatureConfig+0x154>)
 800d596:	4013      	ands	r3, r2
 800d598:	0019      	movs	r1, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	430a      	orrs	r2, r1
 800d5a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	d00b      	beq.n	800d5c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	4a25      	ldr	r2, [pc, #148]	; (800d64c <UART_AdvFeatureConfig+0x158>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	0019      	movs	r1, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	430a      	orrs	r2, r1
 800d5c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5cc:	2240      	movs	r2, #64	; 0x40
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	d01d      	beq.n	800d60e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	4a1d      	ldr	r2, [pc, #116]	; (800d650 <UART_AdvFeatureConfig+0x15c>)
 800d5da:	4013      	ands	r3, r2
 800d5dc:	0019      	movs	r1, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5ee:	2380      	movs	r3, #128	; 0x80
 800d5f0:	035b      	lsls	r3, r3, #13
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d10b      	bne.n	800d60e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	4a15      	ldr	r2, [pc, #84]	; (800d654 <UART_AdvFeatureConfig+0x160>)
 800d5fe:	4013      	ands	r3, r2
 800d600:	0019      	movs	r1, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	430a      	orrs	r2, r1
 800d60c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d612:	2280      	movs	r2, #128	; 0x80
 800d614:	4013      	ands	r3, r2
 800d616:	d00b      	beq.n	800d630 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	4a0e      	ldr	r2, [pc, #56]	; (800d658 <UART_AdvFeatureConfig+0x164>)
 800d620:	4013      	ands	r3, r2
 800d622:	0019      	movs	r1, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	430a      	orrs	r2, r1
 800d62e:	605a      	str	r2, [r3, #4]
  }
}
 800d630:	46c0      	nop			; (mov r8, r8)
 800d632:	46bd      	mov	sp, r7
 800d634:	b002      	add	sp, #8
 800d636:	bd80      	pop	{r7, pc}
 800d638:	fffdffff 	.word	0xfffdffff
 800d63c:	fffeffff 	.word	0xfffeffff
 800d640:	fffbffff 	.word	0xfffbffff
 800d644:	ffff7fff 	.word	0xffff7fff
 800d648:	ffffefff 	.word	0xffffefff
 800d64c:	ffffdfff 	.word	0xffffdfff
 800d650:	ffefffff 	.word	0xffefffff
 800d654:	ff9fffff 	.word	0xff9fffff
 800d658:	fff7ffff 	.word	0xfff7ffff

0800d65c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af02      	add	r7, sp, #8
 800d662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2280      	movs	r2, #128	; 0x80
 800d668:	2100      	movs	r1, #0
 800d66a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d66c:	f7fc f82e 	bl	80096cc <HAL_GetTick>
 800d670:	0003      	movs	r3, r0
 800d672:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2208      	movs	r2, #8
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b08      	cmp	r3, #8
 800d680:	d10c      	bne.n	800d69c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2280      	movs	r2, #128	; 0x80
 800d686:	0391      	lsls	r1, r2, #14
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <UART_CheckIdleState+0x8c>)
 800d68c:	9200      	str	r2, [sp, #0]
 800d68e:	2200      	movs	r2, #0
 800d690:	f000 f82c 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800d694:	1e03      	subs	r3, r0, #0
 800d696:	d001      	beq.n	800d69c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e021      	b.n	800d6e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2204      	movs	r2, #4
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	2b04      	cmp	r3, #4
 800d6a8:	d10c      	bne.n	800d6c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2280      	movs	r2, #128	; 0x80
 800d6ae:	03d1      	lsls	r1, r2, #15
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4a0d      	ldr	r2, [pc, #52]	; (800d6e8 <UART_CheckIdleState+0x8c>)
 800d6b4:	9200      	str	r2, [sp, #0]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f000 f818 	bl	800d6ec <UART_WaitOnFlagUntilTimeout>
 800d6bc:	1e03      	subs	r3, r0, #0
 800d6be:	d001      	beq.n	800d6c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6c0:	2303      	movs	r3, #3
 800d6c2:	e00d      	b.n	800d6e0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2220      	movs	r2, #32
 800d6ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2274      	movs	r2, #116	; 0x74
 800d6da:	2100      	movs	r1, #0
 800d6dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b004      	add	sp, #16
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	01ffffff 	.word	0x01ffffff

0800d6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	1dfb      	adds	r3, r7, #7
 800d6fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6fc:	e05e      	b.n	800d7bc <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	3301      	adds	r3, #1
 800d702:	d05b      	beq.n	800d7bc <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d704:	f7fb ffe2 	bl	80096cc <HAL_GetTick>
 800d708:	0002      	movs	r2, r0
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	69ba      	ldr	r2, [r7, #24]
 800d710:	429a      	cmp	r2, r3
 800d712:	d302      	bcc.n	800d71a <UART_WaitOnFlagUntilTimeout+0x2e>
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d11b      	bne.n	800d752 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	492f      	ldr	r1, [pc, #188]	; (800d7e4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800d726:	400a      	ands	r2, r1
 800d728:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689a      	ldr	r2, [r3, #8]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2101      	movs	r1, #1
 800d736:	438a      	bics	r2, r1
 800d738:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2220      	movs	r2, #32
 800d73e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2220      	movs	r2, #32
 800d744:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2274      	movs	r2, #116	; 0x74
 800d74a:	2100      	movs	r1, #0
 800d74c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d74e:	2303      	movs	r3, #3
 800d750:	e044      	b.n	800d7dc <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2204      	movs	r2, #4
 800d75a:	4013      	ands	r3, r2
 800d75c:	d02e      	beq.n	800d7bc <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69da      	ldr	r2, [r3, #28]
 800d764:	2380      	movs	r3, #128	; 0x80
 800d766:	011b      	lsls	r3, r3, #4
 800d768:	401a      	ands	r2, r3
 800d76a:	2380      	movs	r3, #128	; 0x80
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	429a      	cmp	r2, r3
 800d770:	d124      	bne.n	800d7bc <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2280      	movs	r2, #128	; 0x80
 800d778:	0112      	lsls	r2, r2, #4
 800d77a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4917      	ldr	r1, [pc, #92]	; (800d7e4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800d788:	400a      	ands	r2, r1
 800d78a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2101      	movs	r1, #1
 800d798:	438a      	bics	r2, r1
 800d79a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2220      	movs	r2, #32
 800d7a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2280      	movs	r2, #128	; 0x80
 800d7ac:	2120      	movs	r1, #32
 800d7ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2274      	movs	r2, #116	; 0x74
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d7b8:	2303      	movs	r3, #3
 800d7ba:	e00f      	b.n	800d7dc <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	68ba      	ldr	r2, [r7, #8]
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	425a      	negs	r2, r3
 800d7cc:	4153      	adcs	r3, r2
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	001a      	movs	r2, r3
 800d7d2:	1dfb      	adds	r3, r7, #7
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d091      	beq.n	800d6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	0018      	movs	r0, r3
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	b004      	add	sp, #16
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	fffffe5f 	.word	0xfffffe5f

0800d7e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b09a      	sub	sp, #104	; 0x68
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d7f2:	2367      	movs	r3, #103	; 0x67
 800d7f4:	18fb      	adds	r3, r7, r3
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	18d3      	adds	r3, r2, r3
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29a      	uxth	r2, r3
 800d808:	2364      	movs	r3, #100	; 0x64
 800d80a:	18fb      	adds	r3, r7, r3
 800d80c:	49cf      	ldr	r1, [pc, #828]	; (800db4c <USB_ActivateEndpoint+0x364>)
 800d80e:	400a      	ands	r2, r1
 800d810:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	78db      	ldrb	r3, [r3, #3]
 800d816:	2b03      	cmp	r3, #3
 800d818:	d017      	beq.n	800d84a <USB_ActivateEndpoint+0x62>
 800d81a:	dc28      	bgt.n	800d86e <USB_ActivateEndpoint+0x86>
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d00e      	beq.n	800d83e <USB_ActivateEndpoint+0x56>
 800d820:	dc25      	bgt.n	800d86e <USB_ActivateEndpoint+0x86>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <USB_ActivateEndpoint+0x44>
 800d826:	2b01      	cmp	r3, #1
 800d828:	d018      	beq.n	800d85c <USB_ActivateEndpoint+0x74>
 800d82a:	e020      	b.n	800d86e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d82c:	2264      	movs	r2, #100	; 0x64
 800d82e:	18bb      	adds	r3, r7, r2
 800d830:	18ba      	adds	r2, r7, r2
 800d832:	8812      	ldrh	r2, [r2, #0]
 800d834:	2180      	movs	r1, #128	; 0x80
 800d836:	0089      	lsls	r1, r1, #2
 800d838:	430a      	orrs	r2, r1
 800d83a:	801a      	strh	r2, [r3, #0]
      break;
 800d83c:	e01c      	b.n	800d878 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800d83e:	2264      	movs	r2, #100	; 0x64
 800d840:	18bb      	adds	r3, r7, r2
 800d842:	18ba      	adds	r2, r7, r2
 800d844:	8812      	ldrh	r2, [r2, #0]
 800d846:	801a      	strh	r2, [r3, #0]
      break;
 800d848:	e016      	b.n	800d878 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d84a:	2264      	movs	r2, #100	; 0x64
 800d84c:	18bb      	adds	r3, r7, r2
 800d84e:	18ba      	adds	r2, r7, r2
 800d850:	8812      	ldrh	r2, [r2, #0]
 800d852:	21c0      	movs	r1, #192	; 0xc0
 800d854:	00c9      	lsls	r1, r1, #3
 800d856:	430a      	orrs	r2, r1
 800d858:	801a      	strh	r2, [r3, #0]
      break;
 800d85a:	e00d      	b.n	800d878 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d85c:	2264      	movs	r2, #100	; 0x64
 800d85e:	18bb      	adds	r3, r7, r2
 800d860:	18ba      	adds	r2, r7, r2
 800d862:	8812      	ldrh	r2, [r2, #0]
 800d864:	2180      	movs	r1, #128	; 0x80
 800d866:	00c9      	lsls	r1, r1, #3
 800d868:	430a      	orrs	r2, r1
 800d86a:	801a      	strh	r2, [r3, #0]
      break;
 800d86c:	e004      	b.n	800d878 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800d86e:	2367      	movs	r3, #103	; 0x67
 800d870:	18fb      	adds	r3, r7, r3
 800d872:	2201      	movs	r2, #1
 800d874:	701a      	strb	r2, [r3, #0]
      break;
 800d876:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	18d3      	adds	r3, r2, r3
 800d882:	2264      	movs	r2, #100	; 0x64
 800d884:	18ba      	adds	r2, r7, r2
 800d886:	8812      	ldrh	r2, [r2, #0]
 800d888:	49b1      	ldr	r1, [pc, #708]	; (800db50 <USB_ActivateEndpoint+0x368>)
 800d88a:	430a      	orrs	r2, r1
 800d88c:	b292      	uxth	r2, r2
 800d88e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	18d3      	adds	r3, r2, r3
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	b21b      	sxth	r3, r3
 800d8a0:	4aac      	ldr	r2, [pc, #688]	; (800db54 <USB_ActivateEndpoint+0x36c>)
 800d8a2:	4013      	ands	r3, r2
 800d8a4:	b21a      	sxth	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	b21b      	sxth	r3, r3
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	b21a      	sxth	r2, r3
 800d8b0:	215e      	movs	r1, #94	; 0x5e
 800d8b2:	187b      	adds	r3, r7, r1
 800d8b4:	801a      	strh	r2, [r3, #0]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	18d3      	adds	r3, r2, r3
 800d8c0:	187a      	adds	r2, r7, r1
 800d8c2:	8812      	ldrh	r2, [r2, #0]
 800d8c4:	49a2      	ldr	r1, [pc, #648]	; (800db50 <USB_ActivateEndpoint+0x368>)
 800d8c6:	430a      	orrs	r2, r1
 800d8c8:	b292      	uxth	r2, r2
 800d8ca:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	7b1b      	ldrb	r3, [r3, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d000      	beq.n	800d8d6 <USB_ActivateEndpoint+0xee>
 800d8d4:	e150      	b.n	800db78 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	785b      	ldrb	r3, [r3, #1]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d100      	bne.n	800d8e0 <USB_ActivateEndpoint+0xf8>
 800d8de:	e07a      	b.n	800d9d6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	617b      	str	r3, [r7, #20]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2250      	movs	r2, #80	; 0x50
 800d8e8:	5a9b      	ldrh	r3, [r3, r2]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	001a      	movs	r2, r3
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	189b      	adds	r3, r3, r2
 800d8f2:	617b      	str	r3, [r7, #20]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	00da      	lsls	r2, r3, #3
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	18d3      	adds	r3, r2, r3
 800d8fe:	2280      	movs	r2, #128	; 0x80
 800d900:	00d2      	lsls	r2, r2, #3
 800d902:	4694      	mov	ip, r2
 800d904:	4463      	add	r3, ip
 800d906:	613b      	str	r3, [r7, #16]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	88db      	ldrh	r3, [r3, #6]
 800d90c:	085b      	lsrs	r3, r3, #1
 800d90e:	b29b      	uxth	r3, r3
 800d910:	18db      	adds	r3, r3, r3
 800d912:	b29a      	uxth	r2, r3
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	18d2      	adds	r2, r2, r3
 800d922:	210e      	movs	r1, #14
 800d924:	187b      	adds	r3, r7, r1
 800d926:	8812      	ldrh	r2, [r2, #0]
 800d928:	801a      	strh	r2, [r3, #0]
 800d92a:	187b      	adds	r3, r7, r1
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	2240      	movs	r2, #64	; 0x40
 800d930:	4013      	ands	r3, r2
 800d932:	d016      	beq.n	800d962 <USB_ActivateEndpoint+0x17a>
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	18d3      	adds	r3, r2, r3
 800d93e:	881b      	ldrh	r3, [r3, #0]
 800d940:	b29a      	uxth	r2, r3
 800d942:	200c      	movs	r0, #12
 800d944:	183b      	adds	r3, r7, r0
 800d946:	4983      	ldr	r1, [pc, #524]	; (800db54 <USB_ActivateEndpoint+0x36c>)
 800d948:	400a      	ands	r2, r1
 800d94a:	801a      	strh	r2, [r3, #0]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	18d3      	adds	r3, r2, r3
 800d956:	183a      	adds	r2, r7, r0
 800d958:	8812      	ldrh	r2, [r2, #0]
 800d95a:	497f      	ldr	r1, [pc, #508]	; (800db58 <USB_ActivateEndpoint+0x370>)
 800d95c:	430a      	orrs	r2, r1
 800d95e:	b292      	uxth	r2, r2
 800d960:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	78db      	ldrb	r3, [r3, #3]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d01d      	beq.n	800d9a6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	18d3      	adds	r3, r2, r3
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29a      	uxth	r2, r3
 800d978:	2008      	movs	r0, #8
 800d97a:	183b      	adds	r3, r7, r0
 800d97c:	4977      	ldr	r1, [pc, #476]	; (800db5c <USB_ActivateEndpoint+0x374>)
 800d97e:	400a      	ands	r2, r1
 800d980:	801a      	strh	r2, [r3, #0]
 800d982:	183b      	adds	r3, r7, r0
 800d984:	183a      	adds	r2, r7, r0
 800d986:	8812      	ldrh	r2, [r2, #0]
 800d988:	2120      	movs	r1, #32
 800d98a:	404a      	eors	r2, r1
 800d98c:	801a      	strh	r2, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	18d3      	adds	r3, r2, r3
 800d998:	183a      	adds	r2, r7, r0
 800d99a:	8812      	ldrh	r2, [r2, #0]
 800d99c:	496c      	ldr	r1, [pc, #432]	; (800db50 <USB_ActivateEndpoint+0x368>)
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	b292      	uxth	r2, r2
 800d9a2:	801a      	strh	r2, [r3, #0]
 800d9a4:	e25e      	b.n	800de64 <USB_ActivateEndpoint+0x67c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	18d3      	adds	r3, r2, r3
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	200a      	movs	r0, #10
 800d9b6:	183b      	adds	r3, r7, r0
 800d9b8:	4968      	ldr	r1, [pc, #416]	; (800db5c <USB_ActivateEndpoint+0x374>)
 800d9ba:	400a      	ands	r2, r1
 800d9bc:	801a      	strh	r2, [r3, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	18d3      	adds	r3, r2, r3
 800d9c8:	183a      	adds	r2, r7, r0
 800d9ca:	8812      	ldrh	r2, [r2, #0]
 800d9cc:	4960      	ldr	r1, [pc, #384]	; (800db50 <USB_ActivateEndpoint+0x368>)
 800d9ce:	430a      	orrs	r2, r1
 800d9d0:	b292      	uxth	r2, r2
 800d9d2:	801a      	strh	r2, [r3, #0]
 800d9d4:	e246      	b.n	800de64 <USB_ActivateEndpoint+0x67c>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2250      	movs	r2, #80	; 0x50
 800d9de:	5a9b      	ldrh	r3, [r3, r2]
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	001a      	movs	r2, r3
 800d9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e6:	189b      	adds	r3, r3, r2
 800d9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	00da      	lsls	r2, r3, #3
 800d9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f2:	18d3      	adds	r3, r2, r3
 800d9f4:	4a5a      	ldr	r2, [pc, #360]	; (800db60 <USB_ActivateEndpoint+0x378>)
 800d9f6:	4694      	mov	ip, r2
 800d9f8:	4463      	add	r3, ip
 800d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	88db      	ldrh	r3, [r3, #6]
 800da00:	085b      	lsrs	r3, r3, #1
 800da02:	b29b      	uxth	r3, r3
 800da04:	18db      	adds	r3, r3, r3
 800da06:	b29a      	uxth	r2, r3
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2250      	movs	r2, #80	; 0x50
 800da14:	5a9b      	ldrh	r3, [r3, r2]
 800da16:	b29b      	uxth	r3, r3
 800da18:	001a      	movs	r2, r3
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	189b      	adds	r3, r3, r2
 800da1e:	627b      	str	r3, [r7, #36]	; 0x24
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	00da      	lsls	r2, r3, #3
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	18d3      	adds	r3, r2, r3
 800da2a:	4a4e      	ldr	r2, [pc, #312]	; (800db64 <USB_ActivateEndpoint+0x37c>)
 800da2c:	4694      	mov	ip, r2
 800da2e:	4463      	add	r3, ip
 800da30:	623b      	str	r3, [r7, #32]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d110      	bne.n	800da5c <USB_ActivateEndpoint+0x274>
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	881b      	ldrh	r3, [r3, #0]
 800da3e:	b29b      	uxth	r3, r3
 800da40:	4a49      	ldr	r2, [pc, #292]	; (800db68 <USB_ActivateEndpoint+0x380>)
 800da42:	4013      	ands	r3, r2
 800da44:	b29a      	uxth	r2, r3
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	801a      	strh	r2, [r3, #0]
 800da4a:	6a3b      	ldr	r3, [r7, #32]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4a46      	ldr	r2, [pc, #280]	; (800db6c <USB_ActivateEndpoint+0x384>)
 800da52:	4313      	orrs	r3, r2
 800da54:	b29a      	uxth	r2, r3
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	801a      	strh	r2, [r3, #0]
 800da5a:	e02b      	b.n	800dab4 <USB_ActivateEndpoint+0x2cc>
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	2b3e      	cmp	r3, #62	; 0x3e
 800da62:	d812      	bhi.n	800da8a <USB_ActivateEndpoint+0x2a2>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	085b      	lsrs	r3, r3, #1
 800da6a:	663b      	str	r3, [r7, #96]	; 0x60
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	2201      	movs	r2, #1
 800da72:	4013      	ands	r3, r2
 800da74:	d002      	beq.n	800da7c <USB_ActivateEndpoint+0x294>
 800da76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da78:	3301      	adds	r3, #1
 800da7a:	663b      	str	r3, [r7, #96]	; 0x60
 800da7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da7e:	b29b      	uxth	r3, r3
 800da80:	029b      	lsls	r3, r3, #10
 800da82:	b29a      	uxth	r2, r3
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	801a      	strh	r2, [r3, #0]
 800da88:	e014      	b.n	800dab4 <USB_ActivateEndpoint+0x2cc>
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	095b      	lsrs	r3, r3, #5
 800da90:	663b      	str	r3, [r7, #96]	; 0x60
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	221f      	movs	r2, #31
 800da98:	4013      	ands	r3, r2
 800da9a:	d102      	bne.n	800daa2 <USB_ActivateEndpoint+0x2ba>
 800da9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da9e:	3b01      	subs	r3, #1
 800daa0:	663b      	str	r3, [r7, #96]	; 0x60
 800daa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	029b      	lsls	r3, r3, #10
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	4a30      	ldr	r2, [pc, #192]	; (800db6c <USB_ActivateEndpoint+0x384>)
 800daac:	4313      	orrs	r3, r2
 800daae:	b29a      	uxth	r2, r3
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	18d2      	adds	r2, r2, r3
 800dabe:	211e      	movs	r1, #30
 800dac0:	187b      	adds	r3, r7, r1
 800dac2:	8812      	ldrh	r2, [r2, #0]
 800dac4:	801a      	strh	r2, [r3, #0]
 800dac6:	187b      	adds	r3, r7, r1
 800dac8:	881a      	ldrh	r2, [r3, #0]
 800daca:	2380      	movs	r3, #128	; 0x80
 800dacc:	01db      	lsls	r3, r3, #7
 800dace:	4013      	ands	r3, r2
 800dad0:	d016      	beq.n	800db00 <USB_ActivateEndpoint+0x318>
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	18d3      	adds	r3, r2, r3
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29a      	uxth	r2, r3
 800dae0:	201c      	movs	r0, #28
 800dae2:	183b      	adds	r3, r7, r0
 800dae4:	491b      	ldr	r1, [pc, #108]	; (800db54 <USB_ActivateEndpoint+0x36c>)
 800dae6:	400a      	ands	r2, r1
 800dae8:	801a      	strh	r2, [r3, #0]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	18d3      	adds	r3, r2, r3
 800daf4:	183a      	adds	r2, r7, r0
 800daf6:	8812      	ldrh	r2, [r2, #0]
 800daf8:	491d      	ldr	r1, [pc, #116]	; (800db70 <USB_ActivateEndpoint+0x388>)
 800dafa:	430a      	orrs	r2, r1
 800dafc:	b292      	uxth	r2, r2
 800dafe:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	18d3      	adds	r3, r2, r3
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	201a      	movs	r0, #26
 800db10:	183b      	adds	r3, r7, r0
 800db12:	4918      	ldr	r1, [pc, #96]	; (800db74 <USB_ActivateEndpoint+0x38c>)
 800db14:	400a      	ands	r2, r1
 800db16:	801a      	strh	r2, [r3, #0]
 800db18:	183b      	adds	r3, r7, r0
 800db1a:	183a      	adds	r2, r7, r0
 800db1c:	8812      	ldrh	r2, [r2, #0]
 800db1e:	2180      	movs	r1, #128	; 0x80
 800db20:	0149      	lsls	r1, r1, #5
 800db22:	404a      	eors	r2, r1
 800db24:	801a      	strh	r2, [r3, #0]
 800db26:	183b      	adds	r3, r7, r0
 800db28:	183a      	adds	r2, r7, r0
 800db2a:	8812      	ldrh	r2, [r2, #0]
 800db2c:	2180      	movs	r1, #128	; 0x80
 800db2e:	0189      	lsls	r1, r1, #6
 800db30:	404a      	eors	r2, r1
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	18d3      	adds	r3, r2, r3
 800db3e:	183a      	adds	r2, r7, r0
 800db40:	8812      	ldrh	r2, [r2, #0]
 800db42:	4903      	ldr	r1, [pc, #12]	; (800db50 <USB_ActivateEndpoint+0x368>)
 800db44:	430a      	orrs	r2, r1
 800db46:	b292      	uxth	r2, r2
 800db48:	801a      	strh	r2, [r3, #0]
 800db4a:	e18b      	b.n	800de64 <USB_ActivateEndpoint+0x67c>
 800db4c:	ffff898f 	.word	0xffff898f
 800db50:	ffff8080 	.word	0xffff8080
 800db54:	ffff8f8f 	.word	0xffff8f8f
 800db58:	ffff80c0 	.word	0xffff80c0
 800db5c:	ffff8fbf 	.word	0xffff8fbf
 800db60:	00000404 	.word	0x00000404
 800db64:	00000406 	.word	0x00000406
 800db68:	ffff83ff 	.word	0xffff83ff
 800db6c:	ffff8000 	.word	0xffff8000
 800db70:	ffffc080 	.word	0xffffc080
 800db74:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	18d3      	adds	r3, r2, r3
 800db82:	881b      	ldrh	r3, [r3, #0]
 800db84:	b29a      	uxth	r2, r3
 800db86:	205c      	movs	r0, #92	; 0x5c
 800db88:	183b      	adds	r3, r7, r0
 800db8a:	49ba      	ldr	r1, [pc, #744]	; (800de74 <USB_ActivateEndpoint+0x68c>)
 800db8c:	400a      	ands	r2, r1
 800db8e:	801a      	strh	r2, [r3, #0]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	18d3      	adds	r3, r2, r3
 800db9a:	183a      	adds	r2, r7, r0
 800db9c:	8812      	ldrh	r2, [r2, #0]
 800db9e:	49b6      	ldr	r1, [pc, #728]	; (800de78 <USB_ActivateEndpoint+0x690>)
 800dba0:	430a      	orrs	r2, r1
 800dba2:	b292      	uxth	r2, r2
 800dba4:	801a      	strh	r2, [r3, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2250      	movs	r2, #80	; 0x50
 800dbae:	5a9b      	ldrh	r3, [r3, r2]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	001a      	movs	r2, r3
 800dbb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbb6:	189b      	adds	r3, r3, r2
 800dbb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	00da      	lsls	r2, r3, #3
 800dbc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dbc2:	18d3      	adds	r3, r2, r3
 800dbc4:	2280      	movs	r2, #128	; 0x80
 800dbc6:	00d2      	lsls	r2, r2, #3
 800dbc8:	4694      	mov	ip, r2
 800dbca:	4463      	add	r3, ip
 800dbcc:	657b      	str	r3, [r7, #84]	; 0x54
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	891b      	ldrh	r3, [r3, #8]
 800dbd2:	085b      	lsrs	r3, r3, #1
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	18db      	adds	r3, r3, r3
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbdc:	801a      	strh	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	653b      	str	r3, [r7, #80]	; 0x50
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2250      	movs	r2, #80	; 0x50
 800dbe6:	5a9b      	ldrh	r3, [r3, r2]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	001a      	movs	r2, r3
 800dbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbee:	189b      	adds	r3, r3, r2
 800dbf0:	653b      	str	r3, [r7, #80]	; 0x50
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	00da      	lsls	r2, r3, #3
 800dbf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbfa:	18d3      	adds	r3, r2, r3
 800dbfc:	4a9f      	ldr	r2, [pc, #636]	; (800de7c <USB_ActivateEndpoint+0x694>)
 800dbfe:	4694      	mov	ip, r2
 800dc00:	4463      	add	r3, ip
 800dc02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	895b      	ldrh	r3, [r3, #10]
 800dc08:	085b      	lsrs	r3, r3, #1
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	18db      	adds	r3, r3, r3
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc12:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	785b      	ldrb	r3, [r3, #1]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d000      	beq.n	800dc1e <USB_ActivateEndpoint+0x436>
 800dc1c:	e087      	b.n	800dd2e <USB_ActivateEndpoint+0x546>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	18d2      	adds	r2, r2, r3
 800dc28:	213c      	movs	r1, #60	; 0x3c
 800dc2a:	187b      	adds	r3, r7, r1
 800dc2c:	8812      	ldrh	r2, [r2, #0]
 800dc2e:	801a      	strh	r2, [r3, #0]
 800dc30:	187b      	adds	r3, r7, r1
 800dc32:	881a      	ldrh	r2, [r3, #0]
 800dc34:	2380      	movs	r3, #128	; 0x80
 800dc36:	01db      	lsls	r3, r3, #7
 800dc38:	4013      	ands	r3, r2
 800dc3a:	d016      	beq.n	800dc6a <USB_ActivateEndpoint+0x482>
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	18d3      	adds	r3, r2, r3
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	203a      	movs	r0, #58	; 0x3a
 800dc4c:	183b      	adds	r3, r7, r0
 800dc4e:	4989      	ldr	r1, [pc, #548]	; (800de74 <USB_ActivateEndpoint+0x68c>)
 800dc50:	400a      	ands	r2, r1
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	18d3      	adds	r3, r2, r3
 800dc5e:	183a      	adds	r2, r7, r0
 800dc60:	8812      	ldrh	r2, [r2, #0]
 800dc62:	4987      	ldr	r1, [pc, #540]	; (800de80 <USB_ActivateEndpoint+0x698>)
 800dc64:	430a      	orrs	r2, r1
 800dc66:	b292      	uxth	r2, r2
 800dc68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	18d2      	adds	r2, r2, r3
 800dc74:	2138      	movs	r1, #56	; 0x38
 800dc76:	187b      	adds	r3, r7, r1
 800dc78:	8812      	ldrh	r2, [r2, #0]
 800dc7a:	801a      	strh	r2, [r3, #0]
 800dc7c:	187b      	adds	r3, r7, r1
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	2240      	movs	r2, #64	; 0x40
 800dc82:	4013      	ands	r3, r2
 800dc84:	d016      	beq.n	800dcb4 <USB_ActivateEndpoint+0x4cc>
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	18d3      	adds	r3, r2, r3
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	2036      	movs	r0, #54	; 0x36
 800dc96:	183b      	adds	r3, r7, r0
 800dc98:	4976      	ldr	r1, [pc, #472]	; (800de74 <USB_ActivateEndpoint+0x68c>)
 800dc9a:	400a      	ands	r2, r1
 800dc9c:	801a      	strh	r2, [r3, #0]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	18d3      	adds	r3, r2, r3
 800dca8:	183a      	adds	r2, r7, r0
 800dcaa:	8812      	ldrh	r2, [r2, #0]
 800dcac:	4975      	ldr	r1, [pc, #468]	; (800de84 <USB_ActivateEndpoint+0x69c>)
 800dcae:	430a      	orrs	r2, r1
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	18d3      	adds	r3, r2, r3
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	2034      	movs	r0, #52	; 0x34
 800dcc4:	183b      	adds	r3, r7, r0
 800dcc6:	4970      	ldr	r1, [pc, #448]	; (800de88 <USB_ActivateEndpoint+0x6a0>)
 800dcc8:	400a      	ands	r2, r1
 800dcca:	801a      	strh	r2, [r3, #0]
 800dccc:	183b      	adds	r3, r7, r0
 800dcce:	183a      	adds	r2, r7, r0
 800dcd0:	8812      	ldrh	r2, [r2, #0]
 800dcd2:	2180      	movs	r1, #128	; 0x80
 800dcd4:	0149      	lsls	r1, r1, #5
 800dcd6:	404a      	eors	r2, r1
 800dcd8:	801a      	strh	r2, [r3, #0]
 800dcda:	183b      	adds	r3, r7, r0
 800dcdc:	183a      	adds	r2, r7, r0
 800dcde:	8812      	ldrh	r2, [r2, #0]
 800dce0:	2180      	movs	r1, #128	; 0x80
 800dce2:	0189      	lsls	r1, r1, #6
 800dce4:	404a      	eors	r2, r1
 800dce6:	801a      	strh	r2, [r3, #0]
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	18d3      	adds	r3, r2, r3
 800dcf2:	183a      	adds	r2, r7, r0
 800dcf4:	8812      	ldrh	r2, [r2, #0]
 800dcf6:	4965      	ldr	r1, [pc, #404]	; (800de8c <USB_ActivateEndpoint+0x6a4>)
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	b292      	uxth	r2, r2
 800dcfc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	18d3      	adds	r3, r2, r3
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	2032      	movs	r0, #50	; 0x32
 800dd0e:	183b      	adds	r3, r7, r0
 800dd10:	495f      	ldr	r1, [pc, #380]	; (800de90 <USB_ActivateEndpoint+0x6a8>)
 800dd12:	400a      	ands	r2, r1
 800dd14:	801a      	strh	r2, [r3, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	18d3      	adds	r3, r2, r3
 800dd20:	183a      	adds	r2, r7, r0
 800dd22:	8812      	ldrh	r2, [r2, #0]
 800dd24:	4959      	ldr	r1, [pc, #356]	; (800de8c <USB_ActivateEndpoint+0x6a4>)
 800dd26:	430a      	orrs	r2, r1
 800dd28:	b292      	uxth	r2, r2
 800dd2a:	801a      	strh	r2, [r3, #0]
 800dd2c:	e09a      	b.n	800de64 <USB_ActivateEndpoint+0x67c>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	18d2      	adds	r2, r2, r3
 800dd38:	214a      	movs	r1, #74	; 0x4a
 800dd3a:	187b      	adds	r3, r7, r1
 800dd3c:	8812      	ldrh	r2, [r2, #0]
 800dd3e:	801a      	strh	r2, [r3, #0]
 800dd40:	187b      	adds	r3, r7, r1
 800dd42:	881a      	ldrh	r2, [r3, #0]
 800dd44:	2380      	movs	r3, #128	; 0x80
 800dd46:	01db      	lsls	r3, r3, #7
 800dd48:	4013      	ands	r3, r2
 800dd4a:	d016      	beq.n	800dd7a <USB_ActivateEndpoint+0x592>
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	18d3      	adds	r3, r2, r3
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	2048      	movs	r0, #72	; 0x48
 800dd5c:	183b      	adds	r3, r7, r0
 800dd5e:	4945      	ldr	r1, [pc, #276]	; (800de74 <USB_ActivateEndpoint+0x68c>)
 800dd60:	400a      	ands	r2, r1
 800dd62:	801a      	strh	r2, [r3, #0]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	18d3      	adds	r3, r2, r3
 800dd6e:	183a      	adds	r2, r7, r0
 800dd70:	8812      	ldrh	r2, [r2, #0]
 800dd72:	4943      	ldr	r1, [pc, #268]	; (800de80 <USB_ActivateEndpoint+0x698>)
 800dd74:	430a      	orrs	r2, r1
 800dd76:	b292      	uxth	r2, r2
 800dd78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	18d2      	adds	r2, r2, r3
 800dd84:	2146      	movs	r1, #70	; 0x46
 800dd86:	187b      	adds	r3, r7, r1
 800dd88:	8812      	ldrh	r2, [r2, #0]
 800dd8a:	801a      	strh	r2, [r3, #0]
 800dd8c:	187b      	adds	r3, r7, r1
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	2240      	movs	r2, #64	; 0x40
 800dd92:	4013      	ands	r3, r2
 800dd94:	d016      	beq.n	800ddc4 <USB_ActivateEndpoint+0x5dc>
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	18d3      	adds	r3, r2, r3
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	2044      	movs	r0, #68	; 0x44
 800dda6:	183b      	adds	r3, r7, r0
 800dda8:	4932      	ldr	r1, [pc, #200]	; (800de74 <USB_ActivateEndpoint+0x68c>)
 800ddaa:	400a      	ands	r2, r1
 800ddac:	801a      	strh	r2, [r3, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	18d3      	adds	r3, r2, r3
 800ddb8:	183a      	adds	r2, r7, r0
 800ddba:	8812      	ldrh	r2, [r2, #0]
 800ddbc:	4931      	ldr	r1, [pc, #196]	; (800de84 <USB_ActivateEndpoint+0x69c>)
 800ddbe:	430a      	orrs	r2, r1
 800ddc0:	b292      	uxth	r2, r2
 800ddc2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	78db      	ldrb	r3, [r3, #3]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d01d      	beq.n	800de08 <USB_ActivateEndpoint+0x620>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	18d3      	adds	r3, r2, r3
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	2040      	movs	r0, #64	; 0x40
 800dddc:	183b      	adds	r3, r7, r0
 800ddde:	492c      	ldr	r1, [pc, #176]	; (800de90 <USB_ActivateEndpoint+0x6a8>)
 800dde0:	400a      	ands	r2, r1
 800dde2:	801a      	strh	r2, [r3, #0]
 800dde4:	183b      	adds	r3, r7, r0
 800dde6:	183a      	adds	r2, r7, r0
 800dde8:	8812      	ldrh	r2, [r2, #0]
 800ddea:	2120      	movs	r1, #32
 800ddec:	404a      	eors	r2, r1
 800ddee:	801a      	strh	r2, [r3, #0]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	18d3      	adds	r3, r2, r3
 800ddfa:	183a      	adds	r2, r7, r0
 800ddfc:	8812      	ldrh	r2, [r2, #0]
 800ddfe:	4923      	ldr	r1, [pc, #140]	; (800de8c <USB_ActivateEndpoint+0x6a4>)
 800de00:	430a      	orrs	r2, r1
 800de02:	b292      	uxth	r2, r2
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	e016      	b.n	800de36 <USB_ActivateEndpoint+0x64e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	18d3      	adds	r3, r2, r3
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	b29a      	uxth	r2, r3
 800de16:	2042      	movs	r0, #66	; 0x42
 800de18:	183b      	adds	r3, r7, r0
 800de1a:	491d      	ldr	r1, [pc, #116]	; (800de90 <USB_ActivateEndpoint+0x6a8>)
 800de1c:	400a      	ands	r2, r1
 800de1e:	801a      	strh	r2, [r3, #0]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	18d3      	adds	r3, r2, r3
 800de2a:	183a      	adds	r2, r7, r0
 800de2c:	8812      	ldrh	r2, [r2, #0]
 800de2e:	4917      	ldr	r1, [pc, #92]	; (800de8c <USB_ActivateEndpoint+0x6a4>)
 800de30:	430a      	orrs	r2, r1
 800de32:	b292      	uxth	r2, r2
 800de34:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	18d3      	adds	r3, r2, r3
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	b29a      	uxth	r2, r3
 800de44:	203e      	movs	r0, #62	; 0x3e
 800de46:	183b      	adds	r3, r7, r0
 800de48:	490f      	ldr	r1, [pc, #60]	; (800de88 <USB_ActivateEndpoint+0x6a0>)
 800de4a:	400a      	ands	r2, r1
 800de4c:	801a      	strh	r2, [r3, #0]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	18d3      	adds	r3, r2, r3
 800de58:	183a      	adds	r2, r7, r0
 800de5a:	8812      	ldrh	r2, [r2, #0]
 800de5c:	490b      	ldr	r1, [pc, #44]	; (800de8c <USB_ActivateEndpoint+0x6a4>)
 800de5e:	430a      	orrs	r2, r1
 800de60:	b292      	uxth	r2, r2
 800de62:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800de64:	2367      	movs	r3, #103	; 0x67
 800de66:	18fb      	adds	r3, r7, r3
 800de68:	781b      	ldrb	r3, [r3, #0]
}
 800de6a:	0018      	movs	r0, r3
 800de6c:	46bd      	mov	sp, r7
 800de6e:	b01a      	add	sp, #104	; 0x68
 800de70:	bd80      	pop	{r7, pc}
 800de72:	46c0      	nop			; (mov r8, r8)
 800de74:	ffff8f8f 	.word	0xffff8f8f
 800de78:	ffff8180 	.word	0xffff8180
 800de7c:	00000404 	.word	0x00000404
 800de80:	ffffc080 	.word	0xffffc080
 800de84:	ffff80c0 	.word	0xffff80c0
 800de88:	ffffbf8f 	.word	0xffffbf8f
 800de8c:	ffff8080 	.word	0xffff8080
 800de90:	ffff8fbf 	.word	0xffff8fbf

0800de94 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08c      	sub	sp, #48	; 0x30
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	7b1b      	ldrb	r3, [r3, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d000      	beq.n	800dea8 <USB_DeactivateEndpoint+0x14>
 800dea6:	e07e      	b.n	800dfa6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	785b      	ldrb	r3, [r3, #1]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d03c      	beq.n	800df2a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	18d2      	adds	r2, r2, r3
 800deba:	210c      	movs	r1, #12
 800debc:	187b      	adds	r3, r7, r1
 800debe:	8812      	ldrh	r2, [r2, #0]
 800dec0:	801a      	strh	r2, [r3, #0]
 800dec2:	187b      	adds	r3, r7, r1
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	2240      	movs	r2, #64	; 0x40
 800dec8:	4013      	ands	r3, r2
 800deca:	d016      	beq.n	800defa <USB_DeactivateEndpoint+0x66>
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	18d3      	adds	r3, r2, r3
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	b29a      	uxth	r2, r3
 800deda:	200a      	movs	r0, #10
 800dedc:	183b      	adds	r3, r7, r0
 800dede:	49c7      	ldr	r1, [pc, #796]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800dee0:	400a      	ands	r2, r1
 800dee2:	801a      	strh	r2, [r3, #0]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	18d3      	adds	r3, r2, r3
 800deee:	183a      	adds	r2, r7, r0
 800def0:	8812      	ldrh	r2, [r2, #0]
 800def2:	49c3      	ldr	r1, [pc, #780]	; (800e200 <USB_DeactivateEndpoint+0x36c>)
 800def4:	430a      	orrs	r2, r1
 800def6:	b292      	uxth	r2, r2
 800def8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	18d3      	adds	r3, r2, r3
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	b29a      	uxth	r2, r3
 800df08:	2008      	movs	r0, #8
 800df0a:	183b      	adds	r3, r7, r0
 800df0c:	49bd      	ldr	r1, [pc, #756]	; (800e204 <USB_DeactivateEndpoint+0x370>)
 800df0e:	400a      	ands	r2, r1
 800df10:	801a      	strh	r2, [r3, #0]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	18d3      	adds	r3, r2, r3
 800df1c:	183a      	adds	r2, r7, r0
 800df1e:	8812      	ldrh	r2, [r2, #0]
 800df20:	49b9      	ldr	r1, [pc, #740]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800df22:	430a      	orrs	r2, r1
 800df24:	b292      	uxth	r2, r2
 800df26:	801a      	strh	r2, [r3, #0]
 800df28:	e163      	b.n	800e1f2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	18d2      	adds	r2, r2, r3
 800df34:	2112      	movs	r1, #18
 800df36:	187b      	adds	r3, r7, r1
 800df38:	8812      	ldrh	r2, [r2, #0]
 800df3a:	801a      	strh	r2, [r3, #0]
 800df3c:	187b      	adds	r3, r7, r1
 800df3e:	881a      	ldrh	r2, [r3, #0]
 800df40:	2380      	movs	r3, #128	; 0x80
 800df42:	01db      	lsls	r3, r3, #7
 800df44:	4013      	ands	r3, r2
 800df46:	d016      	beq.n	800df76 <USB_DeactivateEndpoint+0xe2>
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	18d3      	adds	r3, r2, r3
 800df52:	881b      	ldrh	r3, [r3, #0]
 800df54:	b29a      	uxth	r2, r3
 800df56:	2010      	movs	r0, #16
 800df58:	183b      	adds	r3, r7, r0
 800df5a:	49a8      	ldr	r1, [pc, #672]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800df5c:	400a      	ands	r2, r1
 800df5e:	801a      	strh	r2, [r3, #0]
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	18d3      	adds	r3, r2, r3
 800df6a:	183a      	adds	r2, r7, r0
 800df6c:	8812      	ldrh	r2, [r2, #0]
 800df6e:	49a7      	ldr	r1, [pc, #668]	; (800e20c <USB_DeactivateEndpoint+0x378>)
 800df70:	430a      	orrs	r2, r1
 800df72:	b292      	uxth	r2, r2
 800df74:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	18d3      	adds	r3, r2, r3
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	b29a      	uxth	r2, r3
 800df84:	200e      	movs	r0, #14
 800df86:	183b      	adds	r3, r7, r0
 800df88:	49a1      	ldr	r1, [pc, #644]	; (800e210 <USB_DeactivateEndpoint+0x37c>)
 800df8a:	400a      	ands	r2, r1
 800df8c:	801a      	strh	r2, [r3, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	18d3      	adds	r3, r2, r3
 800df98:	183a      	adds	r2, r7, r0
 800df9a:	8812      	ldrh	r2, [r2, #0]
 800df9c:	499a      	ldr	r1, [pc, #616]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800df9e:	430a      	orrs	r2, r1
 800dfa0:	b292      	uxth	r2, r2
 800dfa2:	801a      	strh	r2, [r3, #0]
 800dfa4:	e125      	b.n	800e1f2 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	785b      	ldrb	r3, [r3, #1]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d000      	beq.n	800dfb0 <USB_DeactivateEndpoint+0x11c>
 800dfae:	e090      	b.n	800e0d2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	18d2      	adds	r2, r2, r3
 800dfba:	2120      	movs	r1, #32
 800dfbc:	187b      	adds	r3, r7, r1
 800dfbe:	8812      	ldrh	r2, [r2, #0]
 800dfc0:	801a      	strh	r2, [r3, #0]
 800dfc2:	187b      	adds	r3, r7, r1
 800dfc4:	881a      	ldrh	r2, [r3, #0]
 800dfc6:	2380      	movs	r3, #128	; 0x80
 800dfc8:	01db      	lsls	r3, r3, #7
 800dfca:	4013      	ands	r3, r2
 800dfcc:	d016      	beq.n	800dffc <USB_DeactivateEndpoint+0x168>
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	18d3      	adds	r3, r2, r3
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	201e      	movs	r0, #30
 800dfde:	183b      	adds	r3, r7, r0
 800dfe0:	4986      	ldr	r1, [pc, #536]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800dfe2:	400a      	ands	r2, r1
 800dfe4:	801a      	strh	r2, [r3, #0]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	18d3      	adds	r3, r2, r3
 800dff0:	183a      	adds	r2, r7, r0
 800dff2:	8812      	ldrh	r2, [r2, #0]
 800dff4:	4985      	ldr	r1, [pc, #532]	; (800e20c <USB_DeactivateEndpoint+0x378>)
 800dff6:	430a      	orrs	r2, r1
 800dff8:	b292      	uxth	r2, r2
 800dffa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	18d2      	adds	r2, r2, r3
 800e006:	211c      	movs	r1, #28
 800e008:	187b      	adds	r3, r7, r1
 800e00a:	8812      	ldrh	r2, [r2, #0]
 800e00c:	801a      	strh	r2, [r3, #0]
 800e00e:	187b      	adds	r3, r7, r1
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	2240      	movs	r2, #64	; 0x40
 800e014:	4013      	ands	r3, r2
 800e016:	d016      	beq.n	800e046 <USB_DeactivateEndpoint+0x1b2>
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	18d3      	adds	r3, r2, r3
 800e022:	881b      	ldrh	r3, [r3, #0]
 800e024:	b29a      	uxth	r2, r3
 800e026:	201a      	movs	r0, #26
 800e028:	183b      	adds	r3, r7, r0
 800e02a:	4974      	ldr	r1, [pc, #464]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800e02c:	400a      	ands	r2, r1
 800e02e:	801a      	strh	r2, [r3, #0]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	18d3      	adds	r3, r2, r3
 800e03a:	183a      	adds	r2, r7, r0
 800e03c:	8812      	ldrh	r2, [r2, #0]
 800e03e:	4970      	ldr	r1, [pc, #448]	; (800e200 <USB_DeactivateEndpoint+0x36c>)
 800e040:	430a      	orrs	r2, r1
 800e042:	b292      	uxth	r2, r2
 800e044:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	18d3      	adds	r3, r2, r3
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	b29a      	uxth	r2, r3
 800e054:	2018      	movs	r0, #24
 800e056:	183b      	adds	r3, r7, r0
 800e058:	4968      	ldr	r1, [pc, #416]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800e05a:	400a      	ands	r2, r1
 800e05c:	801a      	strh	r2, [r3, #0]
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	18d3      	adds	r3, r2, r3
 800e068:	183a      	adds	r2, r7, r0
 800e06a:	8812      	ldrh	r2, [r2, #0]
 800e06c:	4964      	ldr	r1, [pc, #400]	; (800e200 <USB_DeactivateEndpoint+0x36c>)
 800e06e:	430a      	orrs	r2, r1
 800e070:	b292      	uxth	r2, r2
 800e072:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	18d3      	adds	r3, r2, r3
 800e07e:	881b      	ldrh	r3, [r3, #0]
 800e080:	b29a      	uxth	r2, r3
 800e082:	2016      	movs	r0, #22
 800e084:	183b      	adds	r3, r7, r0
 800e086:	4962      	ldr	r1, [pc, #392]	; (800e210 <USB_DeactivateEndpoint+0x37c>)
 800e088:	400a      	ands	r2, r1
 800e08a:	801a      	strh	r2, [r3, #0]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	18d3      	adds	r3, r2, r3
 800e096:	183a      	adds	r2, r7, r0
 800e098:	8812      	ldrh	r2, [r2, #0]
 800e09a:	495b      	ldr	r1, [pc, #364]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800e09c:	430a      	orrs	r2, r1
 800e09e:	b292      	uxth	r2, r2
 800e0a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0a2:	687a      	ldr	r2, [r7, #4]
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	18d3      	adds	r3, r2, r3
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	2014      	movs	r0, #20
 800e0b2:	183b      	adds	r3, r7, r0
 800e0b4:	4953      	ldr	r1, [pc, #332]	; (800e204 <USB_DeactivateEndpoint+0x370>)
 800e0b6:	400a      	ands	r2, r1
 800e0b8:	801a      	strh	r2, [r3, #0]
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	18d3      	adds	r3, r2, r3
 800e0c4:	183a      	adds	r2, r7, r0
 800e0c6:	8812      	ldrh	r2, [r2, #0]
 800e0c8:	494f      	ldr	r1, [pc, #316]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	b292      	uxth	r2, r2
 800e0ce:	801a      	strh	r2, [r3, #0]
 800e0d0:	e08f      	b.n	800e1f2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	18d2      	adds	r2, r2, r3
 800e0dc:	212e      	movs	r1, #46	; 0x2e
 800e0de:	187b      	adds	r3, r7, r1
 800e0e0:	8812      	ldrh	r2, [r2, #0]
 800e0e2:	801a      	strh	r2, [r3, #0]
 800e0e4:	187b      	adds	r3, r7, r1
 800e0e6:	881a      	ldrh	r2, [r3, #0]
 800e0e8:	2380      	movs	r3, #128	; 0x80
 800e0ea:	01db      	lsls	r3, r3, #7
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	d016      	beq.n	800e11e <USB_DeactivateEndpoint+0x28a>
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	18d3      	adds	r3, r2, r3
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	202c      	movs	r0, #44	; 0x2c
 800e100:	183b      	adds	r3, r7, r0
 800e102:	493e      	ldr	r1, [pc, #248]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800e104:	400a      	ands	r2, r1
 800e106:	801a      	strh	r2, [r3, #0]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	18d3      	adds	r3, r2, r3
 800e112:	183a      	adds	r2, r7, r0
 800e114:	8812      	ldrh	r2, [r2, #0]
 800e116:	493d      	ldr	r1, [pc, #244]	; (800e20c <USB_DeactivateEndpoint+0x378>)
 800e118:	430a      	orrs	r2, r1
 800e11a:	b292      	uxth	r2, r2
 800e11c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	18d2      	adds	r2, r2, r3
 800e128:	212a      	movs	r1, #42	; 0x2a
 800e12a:	187b      	adds	r3, r7, r1
 800e12c:	8812      	ldrh	r2, [r2, #0]
 800e12e:	801a      	strh	r2, [r3, #0]
 800e130:	187b      	adds	r3, r7, r1
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	2240      	movs	r2, #64	; 0x40
 800e136:	4013      	ands	r3, r2
 800e138:	d016      	beq.n	800e168 <USB_DeactivateEndpoint+0x2d4>
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	18d3      	adds	r3, r2, r3
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	b29a      	uxth	r2, r3
 800e148:	2028      	movs	r0, #40	; 0x28
 800e14a:	183b      	adds	r3, r7, r0
 800e14c:	492b      	ldr	r1, [pc, #172]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800e14e:	400a      	ands	r2, r1
 800e150:	801a      	strh	r2, [r3, #0]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	18d3      	adds	r3, r2, r3
 800e15c:	183a      	adds	r2, r7, r0
 800e15e:	8812      	ldrh	r2, [r2, #0]
 800e160:	4927      	ldr	r1, [pc, #156]	; (800e200 <USB_DeactivateEndpoint+0x36c>)
 800e162:	430a      	orrs	r2, r1
 800e164:	b292      	uxth	r2, r2
 800e166:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	18d3      	adds	r3, r2, r3
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	b29a      	uxth	r2, r3
 800e176:	2026      	movs	r0, #38	; 0x26
 800e178:	183b      	adds	r3, r7, r0
 800e17a:	4920      	ldr	r1, [pc, #128]	; (800e1fc <USB_DeactivateEndpoint+0x368>)
 800e17c:	400a      	ands	r2, r1
 800e17e:	801a      	strh	r2, [r3, #0]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	18d3      	adds	r3, r2, r3
 800e18a:	183a      	adds	r2, r7, r0
 800e18c:	8812      	ldrh	r2, [r2, #0]
 800e18e:	491f      	ldr	r1, [pc, #124]	; (800e20c <USB_DeactivateEndpoint+0x378>)
 800e190:	430a      	orrs	r2, r1
 800e192:	b292      	uxth	r2, r2
 800e194:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	18d3      	adds	r3, r2, r3
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	2024      	movs	r0, #36	; 0x24
 800e1a6:	183b      	adds	r3, r7, r0
 800e1a8:	4916      	ldr	r1, [pc, #88]	; (800e204 <USB_DeactivateEndpoint+0x370>)
 800e1aa:	400a      	ands	r2, r1
 800e1ac:	801a      	strh	r2, [r3, #0]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	18d3      	adds	r3, r2, r3
 800e1b8:	183a      	adds	r2, r7, r0
 800e1ba:	8812      	ldrh	r2, [r2, #0]
 800e1bc:	4912      	ldr	r1, [pc, #72]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800e1be:	430a      	orrs	r2, r1
 800e1c0:	b292      	uxth	r2, r2
 800e1c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	18d3      	adds	r3, r2, r3
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	2022      	movs	r0, #34	; 0x22
 800e1d4:	183b      	adds	r3, r7, r0
 800e1d6:	490e      	ldr	r1, [pc, #56]	; (800e210 <USB_DeactivateEndpoint+0x37c>)
 800e1d8:	400a      	ands	r2, r1
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	18d3      	adds	r3, r2, r3
 800e1e6:	183a      	adds	r2, r7, r0
 800e1e8:	8812      	ldrh	r2, [r2, #0]
 800e1ea:	4907      	ldr	r1, [pc, #28]	; (800e208 <USB_DeactivateEndpoint+0x374>)
 800e1ec:	430a      	orrs	r2, r1
 800e1ee:	b292      	uxth	r2, r2
 800e1f0:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	b00c      	add	sp, #48	; 0x30
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	ffff8f8f 	.word	0xffff8f8f
 800e200:	ffff80c0 	.word	0xffff80c0
 800e204:	ffff8fbf 	.word	0xffff8fbf
 800e208:	ffff8080 	.word	0xffff8080
 800e20c:	ffffc080 	.word	0xffffc080
 800e210:	ffffbf8f 	.word	0xffffbf8f

0800e214 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e214:	b5b0      	push	{r4, r5, r7, lr}
 800e216:	b0c4      	sub	sp, #272	; 0x110
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	785b      	ldrb	r3, [r3, #1]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d001      	beq.n	800e22a <USB_EPStartXfer+0x16>
 800e226:	f000 fd49 	bl	800ecbc <USB_EPStartXfer+0xaa8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	699a      	ldr	r2, [r3, #24]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	429a      	cmp	r2, r3
 800e234:	d906      	bls.n	800e244 <USB_EPStartXfer+0x30>
    {
      len = ep->maxpacket;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	2286      	movs	r2, #134	; 0x86
 800e23c:	0052      	lsls	r2, r2, #1
 800e23e:	18ba      	adds	r2, r7, r2
 800e240:	6013      	str	r3, [r2, #0]
 800e242:	e005      	b.n	800e250 <USB_EPStartXfer+0x3c>
    }
    else
    {
      len = ep->xfer_len;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	2286      	movs	r2, #134	; 0x86
 800e24a:	0052      	lsls	r2, r2, #1
 800e24c:	18ba      	adds	r2, r7, r2
 800e24e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	7b1b      	ldrb	r3, [r3, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d125      	bne.n	800e2a4 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	6959      	ldr	r1, [r3, #20]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	88da      	ldrh	r2, [r3, #6]
 800e260:	2486      	movs	r4, #134	; 0x86
 800e262:	0064      	lsls	r4, r4, #1
 800e264:	193b      	adds	r3, r7, r4
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f001 fa0a 	bl	800f684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	617b      	str	r3, [r7, #20]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2250      	movs	r2, #80	; 0x50
 800e278:	5a9b      	ldrh	r3, [r3, r2]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	001a      	movs	r2, r3
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	189b      	adds	r3, r3, r2
 800e282:	617b      	str	r3, [r7, #20]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	00da      	lsls	r2, r3, #3
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	18d3      	adds	r3, r2, r3
 800e28e:	4ad0      	ldr	r2, [pc, #832]	; (800e5d0 <USB_EPStartXfer+0x3bc>)
 800e290:	4694      	mov	ip, r2
 800e292:	4463      	add	r3, ip
 800e294:	613b      	str	r3, [r7, #16]
 800e296:	193b      	adds	r3, r7, r4
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	801a      	strh	r2, [r3, #0]
 800e2a0:	f000 fcca 	bl	800ec38 <USB_EPStartXfer+0xa24>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	78db      	ldrb	r3, [r3, #3]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d000      	beq.n	800e2ae <USB_EPStartXfer+0x9a>
 800e2ac:	e346      	b.n	800e93c <USB_EPStartXfer+0x728>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	6a1a      	ldr	r2, [r3, #32]
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d800      	bhi.n	800e2bc <USB_EPStartXfer+0xa8>
 800e2ba:	e2ec      	b.n	800e896 <USB_EPStartXfer+0x682>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	18d3      	adds	r3, r2, r3
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	205a      	movs	r0, #90	; 0x5a
 800e2cc:	183b      	adds	r3, r7, r0
 800e2ce:	49c1      	ldr	r1, [pc, #772]	; (800e5d4 <USB_EPStartXfer+0x3c0>)
 800e2d0:	400a      	ands	r2, r1
 800e2d2:	801a      	strh	r2, [r3, #0]
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	18d3      	adds	r3, r2, r3
 800e2de:	183a      	adds	r2, r7, r0
 800e2e0:	8812      	ldrh	r2, [r2, #0]
 800e2e2:	49bd      	ldr	r1, [pc, #756]	; (800e5d8 <USB_EPStartXfer+0x3c4>)
 800e2e4:	430a      	orrs	r2, r1
 800e2e6:	b292      	uxth	r2, r2
 800e2e8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	6a1a      	ldr	r2, [r3, #32]
 800e2ee:	2186      	movs	r1, #134	; 0x86
 800e2f0:	0049      	lsls	r1, r1, #1
 800e2f2:	187b      	adds	r3, r7, r1
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	1ad2      	subs	r2, r2, r3
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	18d3      	adds	r3, r2, r3
 800e306:	881b      	ldrh	r3, [r3, #0]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	001a      	movs	r2, r3
 800e30c:	2340      	movs	r3, #64	; 0x40
 800e30e:	4013      	ands	r3, r2
 800e310:	d100      	bne.n	800e314 <USB_EPStartXfer+0x100>
 800e312:	e169      	b.n	800e5e8 <USB_EPStartXfer+0x3d4>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	637b      	str	r3, [r7, #52]	; 0x34
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	785b      	ldrb	r3, [r3, #1]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d168      	bne.n	800e3f2 <USB_EPStartXfer+0x1de>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2250      	movs	r2, #80	; 0x50
 800e328:	5a9b      	ldrh	r3, [r3, r2]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	001a      	movs	r2, r3
 800e32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e330:	189b      	adds	r3, r3, r2
 800e332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	00da      	lsls	r2, r3, #3
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	18d3      	adds	r3, r2, r3
 800e33e:	4aa7      	ldr	r2, [pc, #668]	; (800e5dc <USB_EPStartXfer+0x3c8>)
 800e340:	4694      	mov	ip, r2
 800e342:	4463      	add	r3, ip
 800e344:	62bb      	str	r3, [r7, #40]	; 0x28
 800e346:	187b      	adds	r3, r7, r1
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d110      	bne.n	800e370 <USB_EPStartXfer+0x15c>
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	4aa2      	ldr	r2, [pc, #648]	; (800e5e0 <USB_EPStartXfer+0x3cc>)
 800e356:	4013      	ands	r3, r2
 800e358:	b29a      	uxth	r2, r3
 800e35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35c:	801a      	strh	r2, [r3, #0]
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	b29b      	uxth	r3, r3
 800e364:	4a9f      	ldr	r2, [pc, #636]	; (800e5e4 <USB_EPStartXfer+0x3d0>)
 800e366:	4313      	orrs	r3, r2
 800e368:	b29a      	uxth	r2, r3
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	801a      	strh	r2, [r3, #0]
 800e36e:	e05c      	b.n	800e42a <USB_EPStartXfer+0x216>
 800e370:	2286      	movs	r2, #134	; 0x86
 800e372:	0052      	lsls	r2, r2, #1
 800e374:	18bb      	adds	r3, r7, r2
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b3e      	cmp	r3, #62	; 0x3e
 800e37a:	d81a      	bhi.n	800e3b2 <USB_EPStartXfer+0x19e>
 800e37c:	18bb      	adds	r3, r7, r2
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	085b      	lsrs	r3, r3, #1
 800e382:	1d79      	adds	r1, r7, #5
 800e384:	31ff      	adds	r1, #255	; 0xff
 800e386:	600b      	str	r3, [r1, #0]
 800e388:	18bb      	adds	r3, r7, r2
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2201      	movs	r2, #1
 800e38e:	4013      	ands	r3, r2
 800e390:	d006      	beq.n	800e3a0 <USB_EPStartXfer+0x18c>
 800e392:	1d7b      	adds	r3, r7, #5
 800e394:	33ff      	adds	r3, #255	; 0xff
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3301      	adds	r3, #1
 800e39a:	1d7a      	adds	r2, r7, #5
 800e39c:	32ff      	adds	r2, #255	; 0xff
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	1d7b      	adds	r3, r7, #5
 800e3a2:	33ff      	adds	r3, #255	; 0xff
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	029b      	lsls	r3, r3, #10
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	801a      	strh	r2, [r3, #0]
 800e3b0:	e03b      	b.n	800e42a <USB_EPStartXfer+0x216>
 800e3b2:	2286      	movs	r2, #134	; 0x86
 800e3b4:	0052      	lsls	r2, r2, #1
 800e3b6:	18bb      	adds	r3, r7, r2
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	095b      	lsrs	r3, r3, #5
 800e3bc:	1d79      	adds	r1, r7, #5
 800e3be:	31ff      	adds	r1, #255	; 0xff
 800e3c0:	600b      	str	r3, [r1, #0]
 800e3c2:	18bb      	adds	r3, r7, r2
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	221f      	movs	r2, #31
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	d106      	bne.n	800e3da <USB_EPStartXfer+0x1c6>
 800e3cc:	1d7b      	adds	r3, r7, #5
 800e3ce:	33ff      	adds	r3, #255	; 0xff
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	1d7a      	adds	r2, r7, #5
 800e3d6:	32ff      	adds	r2, #255	; 0xff
 800e3d8:	6013      	str	r3, [r2, #0]
 800e3da:	1d7b      	adds	r3, r7, #5
 800e3dc:	33ff      	adds	r3, #255	; 0xff
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	029b      	lsls	r3, r3, #10
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	4a7f      	ldr	r2, [pc, #508]	; (800e5e4 <USB_EPStartXfer+0x3d0>)
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	801a      	strh	r2, [r3, #0]
 800e3f0:	e01b      	b.n	800e42a <USB_EPStartXfer+0x216>
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	785b      	ldrb	r3, [r3, #1]
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d117      	bne.n	800e42a <USB_EPStartXfer+0x216>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2250      	movs	r2, #80	; 0x50
 800e3fe:	5a9b      	ldrh	r3, [r3, r2]
 800e400:	b29b      	uxth	r3, r3
 800e402:	001a      	movs	r2, r3
 800e404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e406:	189b      	adds	r3, r3, r2
 800e408:	637b      	str	r3, [r7, #52]	; 0x34
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	00da      	lsls	r2, r3, #3
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	18d3      	adds	r3, r2, r3
 800e414:	4a71      	ldr	r2, [pc, #452]	; (800e5dc <USB_EPStartXfer+0x3c8>)
 800e416:	4694      	mov	ip, r2
 800e418:	4463      	add	r3, ip
 800e41a:	633b      	str	r3, [r7, #48]	; 0x30
 800e41c:	2386      	movs	r3, #134	; 0x86
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	18fb      	adds	r3, r7, r3
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	b29a      	uxth	r2, r3
 800e426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e428:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e42a:	2085      	movs	r0, #133	; 0x85
 800e42c:	0040      	lsls	r0, r0, #1
 800e42e:	183b      	adds	r3, r7, r0
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	8952      	ldrh	r2, [r2, #10]
 800e434:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	6959      	ldr	r1, [r3, #20]
 800e43a:	2586      	movs	r5, #134	; 0x86
 800e43c:	006d      	lsls	r5, r5, #1
 800e43e:	197b      	adds	r3, r7, r5
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	b29c      	uxth	r4, r3
 800e444:	183b      	adds	r3, r7, r0
 800e446:	881a      	ldrh	r2, [r3, #0]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	0023      	movs	r3, r4
 800e44c:	f001 f91a 	bl	800f684 <USB_WritePMA>
            ep->xfer_buff += len;
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	695a      	ldr	r2, [r3, #20]
 800e454:	197b      	adds	r3, r7, r5
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	18d2      	adds	r2, r2, r3
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	6a1a      	ldr	r2, [r3, #32]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	429a      	cmp	r2, r3
 800e468:	d907      	bls.n	800e47a <USB_EPStartXfer+0x266>
            {
              ep->xfer_len_db -= len;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	6a1a      	ldr	r2, [r3, #32]
 800e46e:	197b      	adds	r3, r7, r5
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	1ad2      	subs	r2, r2, r3
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	621a      	str	r2, [r3, #32]
 800e478:	e008      	b.n	800e48c <USB_EPStartXfer+0x278>
            }
            else
            {
              len = ep->xfer_len_db;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	2286      	movs	r2, #134	; 0x86
 800e480:	0052      	lsls	r2, r2, #1
 800e482:	18ba      	adds	r2, r7, r2
 800e484:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2200      	movs	r2, #0
 800e48a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	785b      	ldrb	r3, [r3, #1]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d16a      	bne.n	800e56a <USB_EPStartXfer+0x356>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	61fb      	str	r3, [r7, #28]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2250      	movs	r2, #80	; 0x50
 800e49c:	5a9b      	ldrh	r3, [r3, r2]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	001a      	movs	r2, r3
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	189b      	adds	r3, r3, r2
 800e4a6:	61fb      	str	r3, [r7, #28]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	00da      	lsls	r2, r3, #3
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	18d3      	adds	r3, r2, r3
 800e4b2:	4a47      	ldr	r2, [pc, #284]	; (800e5d0 <USB_EPStartXfer+0x3bc>)
 800e4b4:	4694      	mov	ip, r2
 800e4b6:	4463      	add	r3, ip
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	2386      	movs	r3, #134	; 0x86
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d110      	bne.n	800e4e8 <USB_EPStartXfer+0x2d4>
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4a44      	ldr	r2, [pc, #272]	; (800e5e0 <USB_EPStartXfer+0x3cc>)
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	801a      	strh	r2, [r3, #0]
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	4a41      	ldr	r2, [pc, #260]	; (800e5e4 <USB_EPStartXfer+0x3d0>)
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	801a      	strh	r2, [r3, #0]
 800e4e6:	e05e      	b.n	800e5a6 <USB_EPStartXfer+0x392>
 800e4e8:	2286      	movs	r2, #134	; 0x86
 800e4ea:	0052      	lsls	r2, r2, #1
 800e4ec:	18bb      	adds	r3, r7, r2
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b3e      	cmp	r3, #62	; 0x3e
 800e4f2:	d81a      	bhi.n	800e52a <USB_EPStartXfer+0x316>
 800e4f4:	18bb      	adds	r3, r7, r2
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	085b      	lsrs	r3, r3, #1
 800e4fa:	1c79      	adds	r1, r7, #1
 800e4fc:	31ff      	adds	r1, #255	; 0xff
 800e4fe:	600b      	str	r3, [r1, #0]
 800e500:	18bb      	adds	r3, r7, r2
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2201      	movs	r2, #1
 800e506:	4013      	ands	r3, r2
 800e508:	d006      	beq.n	800e518 <USB_EPStartXfer+0x304>
 800e50a:	1c7b      	adds	r3, r7, #1
 800e50c:	33ff      	adds	r3, #255	; 0xff
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3301      	adds	r3, #1
 800e512:	1c7a      	adds	r2, r7, #1
 800e514:	32ff      	adds	r2, #255	; 0xff
 800e516:	6013      	str	r3, [r2, #0]
 800e518:	1c7b      	adds	r3, r7, #1
 800e51a:	33ff      	adds	r3, #255	; 0xff
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	029b      	lsls	r3, r3, #10
 800e522:	b29a      	uxth	r2, r3
 800e524:	69bb      	ldr	r3, [r7, #24]
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	e03d      	b.n	800e5a6 <USB_EPStartXfer+0x392>
 800e52a:	2286      	movs	r2, #134	; 0x86
 800e52c:	0052      	lsls	r2, r2, #1
 800e52e:	18bb      	adds	r3, r7, r2
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	095b      	lsrs	r3, r3, #5
 800e534:	1c79      	adds	r1, r7, #1
 800e536:	31ff      	adds	r1, #255	; 0xff
 800e538:	600b      	str	r3, [r1, #0]
 800e53a:	18bb      	adds	r3, r7, r2
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	221f      	movs	r2, #31
 800e540:	4013      	ands	r3, r2
 800e542:	d106      	bne.n	800e552 <USB_EPStartXfer+0x33e>
 800e544:	1c7b      	adds	r3, r7, #1
 800e546:	33ff      	adds	r3, #255	; 0xff
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	3b01      	subs	r3, #1
 800e54c:	1c7a      	adds	r2, r7, #1
 800e54e:	32ff      	adds	r2, #255	; 0xff
 800e550:	6013      	str	r3, [r2, #0]
 800e552:	1c7b      	adds	r3, r7, #1
 800e554:	33ff      	adds	r3, #255	; 0xff
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	b29b      	uxth	r3, r3
 800e55a:	029b      	lsls	r3, r3, #10
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	4a21      	ldr	r2, [pc, #132]	; (800e5e4 <USB_EPStartXfer+0x3d0>)
 800e560:	4313      	orrs	r3, r2
 800e562:	b29a      	uxth	r2, r3
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	801a      	strh	r2, [r3, #0]
 800e568:	e01d      	b.n	800e5a6 <USB_EPStartXfer+0x392>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	785b      	ldrb	r3, [r3, #1]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d119      	bne.n	800e5a6 <USB_EPStartXfer+0x392>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	627b      	str	r3, [r7, #36]	; 0x24
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2250      	movs	r2, #80	; 0x50
 800e57a:	5a9b      	ldrh	r3, [r3, r2]
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	001a      	movs	r2, r3
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	189b      	adds	r3, r3, r2
 800e584:	627b      	str	r3, [r7, #36]	; 0x24
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	00da      	lsls	r2, r3, #3
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	18d3      	adds	r3, r2, r3
 800e590:	4a0f      	ldr	r2, [pc, #60]	; (800e5d0 <USB_EPStartXfer+0x3bc>)
 800e592:	4694      	mov	ip, r2
 800e594:	4463      	add	r3, ip
 800e596:	623b      	str	r3, [r7, #32]
 800e598:	2386      	movs	r3, #134	; 0x86
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	18fb      	adds	r3, r7, r3
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e5a6:	2085      	movs	r0, #133	; 0x85
 800e5a8:	0040      	lsls	r0, r0, #1
 800e5aa:	183b      	adds	r3, r7, r0
 800e5ac:	683a      	ldr	r2, [r7, #0]
 800e5ae:	8912      	ldrh	r2, [r2, #8]
 800e5b0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	6959      	ldr	r1, [r3, #20]
 800e5b6:	2386      	movs	r3, #134	; 0x86
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	18fb      	adds	r3, r7, r3
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	b29c      	uxth	r4, r3
 800e5c0:	183b      	adds	r3, r7, r0
 800e5c2:	881a      	ldrh	r2, [r3, #0]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	0023      	movs	r3, r4
 800e5c8:	f001 f85c 	bl	800f684 <USB_WritePMA>
 800e5cc:	e334      	b.n	800ec38 <USB_EPStartXfer+0xa24>
 800e5ce:	46c0      	nop			; (mov r8, r8)
 800e5d0:	00000402 	.word	0x00000402
 800e5d4:	ffff8f8f 	.word	0xffff8f8f
 800e5d8:	ffff8180 	.word	0xffff8180
 800e5dc:	00000406 	.word	0x00000406
 800e5e0:	ffff83ff 	.word	0xffff83ff
 800e5e4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	785b      	ldrb	r3, [r3, #1]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d166      	bne.n	800e6be <USB_EPStartXfer+0x4aa>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2250      	movs	r2, #80	; 0x50
 800e5f8:	5a9b      	ldrh	r3, [r3, r2]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	001a      	movs	r2, r3
 800e5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e600:	189b      	adds	r3, r3, r2
 800e602:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	00da      	lsls	r2, r3, #3
 800e60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e60c:	18d3      	adds	r3, r2, r3
 800e60e:	4ac5      	ldr	r2, [pc, #788]	; (800e924 <USB_EPStartXfer+0x710>)
 800e610:	4694      	mov	ip, r2
 800e612:	4463      	add	r3, ip
 800e614:	64bb      	str	r3, [r7, #72]	; 0x48
 800e616:	2386      	movs	r3, #134	; 0x86
 800e618:	005b      	lsls	r3, r3, #1
 800e61a:	18fb      	adds	r3, r7, r3
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d110      	bne.n	800e644 <USB_EPStartXfer+0x430>
 800e622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	b29b      	uxth	r3, r3
 800e628:	4abf      	ldr	r2, [pc, #764]	; (800e928 <USB_EPStartXfer+0x714>)
 800e62a:	4013      	ands	r3, r2
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e630:	801a      	strh	r2, [r3, #0]
 800e632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	b29b      	uxth	r3, r3
 800e638:	4abc      	ldr	r2, [pc, #752]	; (800e92c <USB_EPStartXfer+0x718>)
 800e63a:	4313      	orrs	r3, r2
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e640:	801a      	strh	r2, [r3, #0]
 800e642:	e05a      	b.n	800e6fa <USB_EPStartXfer+0x4e6>
 800e644:	2286      	movs	r2, #134	; 0x86
 800e646:	0052      	lsls	r2, r2, #1
 800e648:	18bb      	adds	r3, r7, r2
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b3e      	cmp	r3, #62	; 0x3e
 800e64e:	d818      	bhi.n	800e682 <USB_EPStartXfer+0x46e>
 800e650:	18bb      	adds	r3, r7, r2
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	085b      	lsrs	r3, r3, #1
 800e656:	21fc      	movs	r1, #252	; 0xfc
 800e658:	1878      	adds	r0, r7, r1
 800e65a:	6003      	str	r3, [r0, #0]
 800e65c:	18bb      	adds	r3, r7, r2
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2201      	movs	r2, #1
 800e662:	4013      	ands	r3, r2
 800e664:	d004      	beq.n	800e670 <USB_EPStartXfer+0x45c>
 800e666:	187b      	adds	r3, r7, r1
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3301      	adds	r3, #1
 800e66c:	187a      	adds	r2, r7, r1
 800e66e:	6013      	str	r3, [r2, #0]
 800e670:	23fc      	movs	r3, #252	; 0xfc
 800e672:	18fb      	adds	r3, r7, r3
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	b29b      	uxth	r3, r3
 800e678:	029b      	lsls	r3, r3, #10
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e67e:	801a      	strh	r2, [r3, #0]
 800e680:	e03b      	b.n	800e6fa <USB_EPStartXfer+0x4e6>
 800e682:	2286      	movs	r2, #134	; 0x86
 800e684:	0052      	lsls	r2, r2, #1
 800e686:	18bb      	adds	r3, r7, r2
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	095b      	lsrs	r3, r3, #5
 800e68c:	21fc      	movs	r1, #252	; 0xfc
 800e68e:	1878      	adds	r0, r7, r1
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	18bb      	adds	r3, r7, r2
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	221f      	movs	r2, #31
 800e698:	4013      	ands	r3, r2
 800e69a:	d104      	bne.n	800e6a6 <USB_EPStartXfer+0x492>
 800e69c:	187b      	adds	r3, r7, r1
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	187a      	adds	r2, r7, r1
 800e6a4:	6013      	str	r3, [r2, #0]
 800e6a6:	23fc      	movs	r3, #252	; 0xfc
 800e6a8:	18fb      	adds	r3, r7, r3
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	029b      	lsls	r3, r3, #10
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	4a9e      	ldr	r2, [pc, #632]	; (800e92c <USB_EPStartXfer+0x718>)
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ba:	801a      	strh	r2, [r3, #0]
 800e6bc:	e01d      	b.n	800e6fa <USB_EPStartXfer+0x4e6>
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	785b      	ldrb	r3, [r3, #1]
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d119      	bne.n	800e6fa <USB_EPStartXfer+0x4e6>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	657b      	str	r3, [r7, #84]	; 0x54
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2250      	movs	r2, #80	; 0x50
 800e6ce:	5a9b      	ldrh	r3, [r3, r2]
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	001a      	movs	r2, r3
 800e6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6d6:	189b      	adds	r3, r3, r2
 800e6d8:	657b      	str	r3, [r7, #84]	; 0x54
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	00da      	lsls	r2, r3, #3
 800e6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e2:	18d3      	adds	r3, r2, r3
 800e6e4:	4a8f      	ldr	r2, [pc, #572]	; (800e924 <USB_EPStartXfer+0x710>)
 800e6e6:	4694      	mov	ip, r2
 800e6e8:	4463      	add	r3, ip
 800e6ea:	653b      	str	r3, [r7, #80]	; 0x50
 800e6ec:	2386      	movs	r3, #134	; 0x86
 800e6ee:	005b      	lsls	r3, r3, #1
 800e6f0:	18fb      	adds	r3, r7, r3
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e6fa:	2085      	movs	r0, #133	; 0x85
 800e6fc:	0040      	lsls	r0, r0, #1
 800e6fe:	183b      	adds	r3, r7, r0
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	8912      	ldrh	r2, [r2, #8]
 800e704:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	6959      	ldr	r1, [r3, #20]
 800e70a:	2586      	movs	r5, #134	; 0x86
 800e70c:	006d      	lsls	r5, r5, #1
 800e70e:	197b      	adds	r3, r7, r5
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	b29c      	uxth	r4, r3
 800e714:	183b      	adds	r3, r7, r0
 800e716:	881a      	ldrh	r2, [r3, #0]
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	0023      	movs	r3, r4
 800e71c:	f000 ffb2 	bl	800f684 <USB_WritePMA>
            ep->xfer_buff += len;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	695a      	ldr	r2, [r3, #20]
 800e724:	197b      	adds	r3, r7, r5
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	18d2      	adds	r2, r2, r3
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	6a1a      	ldr	r2, [r3, #32]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	429a      	cmp	r2, r3
 800e738:	d907      	bls.n	800e74a <USB_EPStartXfer+0x536>
            {
              ep->xfer_len_db -= len;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	6a1a      	ldr	r2, [r3, #32]
 800e73e:	197b      	adds	r3, r7, r5
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	1ad2      	subs	r2, r2, r3
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	621a      	str	r2, [r3, #32]
 800e748:	e008      	b.n	800e75c <USB_EPStartXfer+0x548>
            }
            else
            {
              len = ep->xfer_len_db;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	2286      	movs	r2, #134	; 0x86
 800e750:	0052      	lsls	r2, r2, #1
 800e752:	18ba      	adds	r2, r7, r2
 800e754:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2200      	movs	r2, #0
 800e75a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	647b      	str	r3, [r7, #68]	; 0x44
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	785b      	ldrb	r3, [r3, #1]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d166      	bne.n	800e836 <USB_EPStartXfer+0x622>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2250      	movs	r2, #80	; 0x50
 800e770:	5a9b      	ldrh	r3, [r3, r2]
 800e772:	b29b      	uxth	r3, r3
 800e774:	001a      	movs	r2, r3
 800e776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e778:	189b      	adds	r3, r3, r2
 800e77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	00da      	lsls	r2, r3, #3
 800e782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e784:	18d3      	adds	r3, r2, r3
 800e786:	4a6a      	ldr	r2, [pc, #424]	; (800e930 <USB_EPStartXfer+0x71c>)
 800e788:	4694      	mov	ip, r2
 800e78a:	4463      	add	r3, ip
 800e78c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e78e:	2386      	movs	r3, #134	; 0x86
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	18fb      	adds	r3, r7, r3
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d110      	bne.n	800e7bc <USB_EPStartXfer+0x5a8>
 800e79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	4a61      	ldr	r2, [pc, #388]	; (800e928 <USB_EPStartXfer+0x714>)
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a8:	801a      	strh	r2, [r3, #0]
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	4a5e      	ldr	r2, [pc, #376]	; (800e92c <USB_EPStartXfer+0x718>)
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	b29a      	uxth	r2, r3
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	801a      	strh	r2, [r3, #0]
 800e7ba:	e058      	b.n	800e86e <USB_EPStartXfer+0x65a>
 800e7bc:	2286      	movs	r2, #134	; 0x86
 800e7be:	0052      	lsls	r2, r2, #1
 800e7c0:	18bb      	adds	r3, r7, r2
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b3e      	cmp	r3, #62	; 0x3e
 800e7c6:	d818      	bhi.n	800e7fa <USB_EPStartXfer+0x5e6>
 800e7c8:	18bb      	adds	r3, r7, r2
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	085b      	lsrs	r3, r3, #1
 800e7ce:	21f8      	movs	r1, #248	; 0xf8
 800e7d0:	1878      	adds	r0, r7, r1
 800e7d2:	6003      	str	r3, [r0, #0]
 800e7d4:	18bb      	adds	r3, r7, r2
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	4013      	ands	r3, r2
 800e7dc:	d004      	beq.n	800e7e8 <USB_EPStartXfer+0x5d4>
 800e7de:	187b      	adds	r3, r7, r1
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	187a      	adds	r2, r7, r1
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	23f8      	movs	r3, #248	; 0xf8
 800e7ea:	18fb      	adds	r3, r7, r3
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	029b      	lsls	r3, r3, #10
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f6:	801a      	strh	r2, [r3, #0]
 800e7f8:	e039      	b.n	800e86e <USB_EPStartXfer+0x65a>
 800e7fa:	2286      	movs	r2, #134	; 0x86
 800e7fc:	0052      	lsls	r2, r2, #1
 800e7fe:	18bb      	adds	r3, r7, r2
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	095b      	lsrs	r3, r3, #5
 800e804:	21f8      	movs	r1, #248	; 0xf8
 800e806:	1878      	adds	r0, r7, r1
 800e808:	6003      	str	r3, [r0, #0]
 800e80a:	18bb      	adds	r3, r7, r2
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	221f      	movs	r2, #31
 800e810:	4013      	ands	r3, r2
 800e812:	d104      	bne.n	800e81e <USB_EPStartXfer+0x60a>
 800e814:	187b      	adds	r3, r7, r1
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	3b01      	subs	r3, #1
 800e81a:	187a      	adds	r2, r7, r1
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	23f8      	movs	r3, #248	; 0xf8
 800e820:	18fb      	adds	r3, r7, r3
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	b29b      	uxth	r3, r3
 800e826:	029b      	lsls	r3, r3, #10
 800e828:	b29b      	uxth	r3, r3
 800e82a:	4a40      	ldr	r2, [pc, #256]	; (800e92c <USB_EPStartXfer+0x718>)
 800e82c:	4313      	orrs	r3, r2
 800e82e:	b29a      	uxth	r2, r3
 800e830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e832:	801a      	strh	r2, [r3, #0]
 800e834:	e01b      	b.n	800e86e <USB_EPStartXfer+0x65a>
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	785b      	ldrb	r3, [r3, #1]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d117      	bne.n	800e86e <USB_EPStartXfer+0x65a>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2250      	movs	r2, #80	; 0x50
 800e842:	5a9b      	ldrh	r3, [r3, r2]
 800e844:	b29b      	uxth	r3, r3
 800e846:	001a      	movs	r2, r3
 800e848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e84a:	189b      	adds	r3, r3, r2
 800e84c:	647b      	str	r3, [r7, #68]	; 0x44
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	00da      	lsls	r2, r3, #3
 800e854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e856:	18d3      	adds	r3, r2, r3
 800e858:	4a35      	ldr	r2, [pc, #212]	; (800e930 <USB_EPStartXfer+0x71c>)
 800e85a:	4694      	mov	ip, r2
 800e85c:	4463      	add	r3, ip
 800e85e:	643b      	str	r3, [r7, #64]	; 0x40
 800e860:	2386      	movs	r3, #134	; 0x86
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	b29a      	uxth	r2, r3
 800e86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e86c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e86e:	2085      	movs	r0, #133	; 0x85
 800e870:	0040      	lsls	r0, r0, #1
 800e872:	183b      	adds	r3, r7, r0
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	8952      	ldrh	r2, [r2, #10]
 800e878:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	6959      	ldr	r1, [r3, #20]
 800e87e:	2386      	movs	r3, #134	; 0x86
 800e880:	005b      	lsls	r3, r3, #1
 800e882:	18fb      	adds	r3, r7, r3
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	b29c      	uxth	r4, r3
 800e888:	183b      	adds	r3, r7, r0
 800e88a:	881a      	ldrh	r2, [r3, #0]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	0023      	movs	r3, r4
 800e890:	f000 fef8 	bl	800f684 <USB_WritePMA>
 800e894:	e1d0      	b.n	800ec38 <USB_EPStartXfer+0xa24>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	6a1b      	ldr	r3, [r3, #32]
 800e89a:	2086      	movs	r0, #134	; 0x86
 800e89c:	0040      	lsls	r0, r0, #1
 800e89e:	183a      	adds	r2, r7, r0
 800e8a0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	18d3      	adds	r3, r2, r3
 800e8ac:	881b      	ldrh	r3, [r3, #0]
 800e8ae:	b29a      	uxth	r2, r3
 800e8b0:	2466      	movs	r4, #102	; 0x66
 800e8b2:	193b      	adds	r3, r7, r4
 800e8b4:	491f      	ldr	r1, [pc, #124]	; (800e934 <USB_EPStartXfer+0x720>)
 800e8b6:	400a      	ands	r2, r1
 800e8b8:	801a      	strh	r2, [r3, #0]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	18d3      	adds	r3, r2, r3
 800e8c4:	193a      	adds	r2, r7, r4
 800e8c6:	8812      	ldrh	r2, [r2, #0]
 800e8c8:	491b      	ldr	r1, [pc, #108]	; (800e938 <USB_EPStartXfer+0x724>)
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	b292      	uxth	r2, r2
 800e8ce:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	663b      	str	r3, [r7, #96]	; 0x60
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2250      	movs	r2, #80	; 0x50
 800e8d8:	5a9b      	ldrh	r3, [r3, r2]
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	001a      	movs	r2, r3
 800e8de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8e0:	189b      	adds	r3, r3, r2
 800e8e2:	663b      	str	r3, [r7, #96]	; 0x60
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	00da      	lsls	r2, r3, #3
 800e8ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8ec:	18d3      	adds	r3, r2, r3
 800e8ee:	4a0d      	ldr	r2, [pc, #52]	; (800e924 <USB_EPStartXfer+0x710>)
 800e8f0:	4694      	mov	ip, r2
 800e8f2:	4463      	add	r3, ip
 800e8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8f6:	183b      	adds	r3, r7, r0
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e900:	2585      	movs	r5, #133	; 0x85
 800e902:	006d      	lsls	r5, r5, #1
 800e904:	197b      	adds	r3, r7, r5
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	8912      	ldrh	r2, [r2, #8]
 800e90a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	6959      	ldr	r1, [r3, #20]
 800e910:	183b      	adds	r3, r7, r0
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	b29c      	uxth	r4, r3
 800e916:	197b      	adds	r3, r7, r5
 800e918:	881a      	ldrh	r2, [r3, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	0023      	movs	r3, r4
 800e91e:	f000 feb1 	bl	800f684 <USB_WritePMA>
 800e922:	e189      	b.n	800ec38 <USB_EPStartXfer+0xa24>
 800e924:	00000402 	.word	0x00000402
 800e928:	ffff83ff 	.word	0xffff83ff
 800e92c:	ffff8000 	.word	0xffff8000
 800e930:	00000406 	.word	0x00000406
 800e934:	ffff8e8f 	.word	0xffff8e8f
 800e938:	ffff8080 	.word	0xffff8080

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	18d3      	adds	r3, r2, r3
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	b29b      	uxth	r3, r3
 800e94a:	001a      	movs	r2, r3
 800e94c:	2340      	movs	r3, #64	; 0x40
 800e94e:	4013      	ands	r3, r2
 800e950:	d100      	bne.n	800e954 <USB_EPStartXfer+0x740>
 800e952:	e08f      	b.n	800ea74 <USB_EPStartXfer+0x860>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	67bb      	str	r3, [r7, #120]	; 0x78
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	785b      	ldrb	r3, [r3, #1]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d166      	bne.n	800ea2e <USB_EPStartXfer+0x81a>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	673b      	str	r3, [r7, #112]	; 0x70
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2250      	movs	r2, #80	; 0x50
 800e968:	5a9b      	ldrh	r3, [r3, r2]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	001a      	movs	r2, r3
 800e96e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e970:	189b      	adds	r3, r3, r2
 800e972:	673b      	str	r3, [r7, #112]	; 0x70
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	00da      	lsls	r2, r3, #3
 800e97a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e97c:	18d3      	adds	r3, r2, r3
 800e97e:	4adc      	ldr	r2, [pc, #880]	; (800ecf0 <USB_EPStartXfer+0xadc>)
 800e980:	4694      	mov	ip, r2
 800e982:	4463      	add	r3, ip
 800e984:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e986:	2386      	movs	r3, #134	; 0x86
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	18fb      	adds	r3, r7, r3
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d110      	bne.n	800e9b4 <USB_EPStartXfer+0x7a0>
 800e992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e994:	881b      	ldrh	r3, [r3, #0]
 800e996:	b29b      	uxth	r3, r3
 800e998:	4ad6      	ldr	r2, [pc, #856]	; (800ecf4 <USB_EPStartXfer+0xae0>)
 800e99a:	4013      	ands	r3, r2
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a0:	801a      	strh	r2, [r3, #0]
 800e9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	4ad3      	ldr	r2, [pc, #844]	; (800ecf8 <USB_EPStartXfer+0xae4>)
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b0:	801a      	strh	r2, [r3, #0]
 800e9b2:	e058      	b.n	800ea66 <USB_EPStartXfer+0x852>
 800e9b4:	2286      	movs	r2, #134	; 0x86
 800e9b6:	0052      	lsls	r2, r2, #1
 800e9b8:	18bb      	adds	r3, r7, r2
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b3e      	cmp	r3, #62	; 0x3e
 800e9be:	d818      	bhi.n	800e9f2 <USB_EPStartXfer+0x7de>
 800e9c0:	18bb      	adds	r3, r7, r2
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	085b      	lsrs	r3, r3, #1
 800e9c6:	21f4      	movs	r1, #244	; 0xf4
 800e9c8:	1878      	adds	r0, r7, r1
 800e9ca:	6003      	str	r3, [r0, #0]
 800e9cc:	18bb      	adds	r3, r7, r2
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	d004      	beq.n	800e9e0 <USB_EPStartXfer+0x7cc>
 800e9d6:	187b      	adds	r3, r7, r1
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	187a      	adds	r2, r7, r1
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	23f4      	movs	r3, #244	; 0xf4
 800e9e2:	18fb      	adds	r3, r7, r3
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	029b      	lsls	r3, r3, #10
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ee:	801a      	strh	r2, [r3, #0]
 800e9f0:	e039      	b.n	800ea66 <USB_EPStartXfer+0x852>
 800e9f2:	2286      	movs	r2, #134	; 0x86
 800e9f4:	0052      	lsls	r2, r2, #1
 800e9f6:	18bb      	adds	r3, r7, r2
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	095b      	lsrs	r3, r3, #5
 800e9fc:	21f4      	movs	r1, #244	; 0xf4
 800e9fe:	1878      	adds	r0, r7, r1
 800ea00:	6003      	str	r3, [r0, #0]
 800ea02:	18bb      	adds	r3, r7, r2
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	221f      	movs	r2, #31
 800ea08:	4013      	ands	r3, r2
 800ea0a:	d104      	bne.n	800ea16 <USB_EPStartXfer+0x802>
 800ea0c:	187b      	adds	r3, r7, r1
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3b01      	subs	r3, #1
 800ea12:	187a      	adds	r2, r7, r1
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	23f4      	movs	r3, #244	; 0xf4
 800ea18:	18fb      	adds	r3, r7, r3
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	029b      	lsls	r3, r3, #10
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	4ab5      	ldr	r2, [pc, #724]	; (800ecf8 <USB_EPStartXfer+0xae4>)
 800ea24:	4313      	orrs	r3, r2
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2a:	801a      	strh	r2, [r3, #0]
 800ea2c:	e01b      	b.n	800ea66 <USB_EPStartXfer+0x852>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	785b      	ldrb	r3, [r3, #1]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d117      	bne.n	800ea66 <USB_EPStartXfer+0x852>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2250      	movs	r2, #80	; 0x50
 800ea3a:	5a9b      	ldrh	r3, [r3, r2]
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	001a      	movs	r2, r3
 800ea40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea42:	189b      	adds	r3, r3, r2
 800ea44:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	00da      	lsls	r2, r3, #3
 800ea4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea4e:	18d3      	adds	r3, r2, r3
 800ea50:	4aa7      	ldr	r2, [pc, #668]	; (800ecf0 <USB_EPStartXfer+0xadc>)
 800ea52:	4694      	mov	ip, r2
 800ea54:	4463      	add	r3, ip
 800ea56:	677b      	str	r3, [r7, #116]	; 0x74
 800ea58:	2386      	movs	r3, #134	; 0x86
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	18fb      	adds	r3, r7, r3
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	b29a      	uxth	r2, r3
 800ea62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ea66:	2385      	movs	r3, #133	; 0x85
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	18fb      	adds	r3, r7, r3
 800ea6c:	683a      	ldr	r2, [r7, #0]
 800ea6e:	8952      	ldrh	r2, [r2, #10]
 800ea70:	801a      	strh	r2, [r3, #0]
 800ea72:	e09b      	b.n	800ebac <USB_EPStartXfer+0x998>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	785b      	ldrb	r3, [r3, #1]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d16b      	bne.n	800eb54 <USB_EPStartXfer+0x940>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2180      	movs	r1, #128	; 0x80
 800ea80:	187a      	adds	r2, r7, r1
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2250      	movs	r2, #80	; 0x50
 800ea88:	5a9b      	ldrh	r3, [r3, r2]
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	001a      	movs	r2, r3
 800ea8e:	187b      	adds	r3, r7, r1
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	189b      	adds	r3, r3, r2
 800ea94:	187a      	adds	r2, r7, r1
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	00da      	lsls	r2, r3, #3
 800ea9e:	187b      	adds	r3, r7, r1
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	18d3      	adds	r3, r2, r3
 800eaa4:	4a95      	ldr	r2, [pc, #596]	; (800ecfc <USB_EPStartXfer+0xae8>)
 800eaa6:	4694      	mov	ip, r2
 800eaa8:	4463      	add	r3, ip
 800eaaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eaac:	2386      	movs	r3, #134	; 0x86
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	18fb      	adds	r3, r7, r3
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d110      	bne.n	800eada <USB_EPStartXfer+0x8c6>
 800eab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	4a8d      	ldr	r2, [pc, #564]	; (800ecf4 <USB_EPStartXfer+0xae0>)
 800eac0:	4013      	ands	r3, r2
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eac6:	801a      	strh	r2, [r3, #0]
 800eac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eaca:	881b      	ldrh	r3, [r3, #0]
 800eacc:	b29b      	uxth	r3, r3
 800eace:	4a8a      	ldr	r2, [pc, #552]	; (800ecf8 <USB_EPStartXfer+0xae4>)
 800ead0:	4313      	orrs	r3, r2
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ead6:	801a      	strh	r2, [r3, #0]
 800ead8:	e062      	b.n	800eba0 <USB_EPStartXfer+0x98c>
 800eada:	2286      	movs	r2, #134	; 0x86
 800eadc:	0052      	lsls	r2, r2, #1
 800eade:	18bb      	adds	r3, r7, r2
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b3e      	cmp	r3, #62	; 0x3e
 800eae4:	d818      	bhi.n	800eb18 <USB_EPStartXfer+0x904>
 800eae6:	18bb      	adds	r3, r7, r2
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	085b      	lsrs	r3, r3, #1
 800eaec:	21f0      	movs	r1, #240	; 0xf0
 800eaee:	1878      	adds	r0, r7, r1
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	18bb      	adds	r3, r7, r2
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	4013      	ands	r3, r2
 800eafa:	d004      	beq.n	800eb06 <USB_EPStartXfer+0x8f2>
 800eafc:	187b      	adds	r3, r7, r1
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	3301      	adds	r3, #1
 800eb02:	187a      	adds	r2, r7, r1
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	23f0      	movs	r3, #240	; 0xf0
 800eb08:	18fb      	adds	r3, r7, r3
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	029b      	lsls	r3, r3, #10
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb14:	801a      	strh	r2, [r3, #0]
 800eb16:	e043      	b.n	800eba0 <USB_EPStartXfer+0x98c>
 800eb18:	2286      	movs	r2, #134	; 0x86
 800eb1a:	0052      	lsls	r2, r2, #1
 800eb1c:	18bb      	adds	r3, r7, r2
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	095b      	lsrs	r3, r3, #5
 800eb22:	21f0      	movs	r1, #240	; 0xf0
 800eb24:	1878      	adds	r0, r7, r1
 800eb26:	6003      	str	r3, [r0, #0]
 800eb28:	18bb      	adds	r3, r7, r2
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	221f      	movs	r2, #31
 800eb2e:	4013      	ands	r3, r2
 800eb30:	d104      	bne.n	800eb3c <USB_EPStartXfer+0x928>
 800eb32:	187b      	adds	r3, r7, r1
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	187a      	adds	r2, r7, r1
 800eb3a:	6013      	str	r3, [r2, #0]
 800eb3c:	23f0      	movs	r3, #240	; 0xf0
 800eb3e:	18fb      	adds	r3, r7, r3
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	029b      	lsls	r3, r3, #10
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	4a6b      	ldr	r2, [pc, #428]	; (800ecf8 <USB_EPStartXfer+0xae4>)
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb50:	801a      	strh	r2, [r3, #0]
 800eb52:	e025      	b.n	800eba0 <USB_EPStartXfer+0x98c>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	785b      	ldrb	r3, [r3, #1]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d121      	bne.n	800eba0 <USB_EPStartXfer+0x98c>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2188      	movs	r1, #136	; 0x88
 800eb60:	187a      	adds	r2, r7, r1
 800eb62:	6013      	str	r3, [r2, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2250      	movs	r2, #80	; 0x50
 800eb68:	5a9b      	ldrh	r3, [r3, r2]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	001a      	movs	r2, r3
 800eb6e:	187b      	adds	r3, r7, r1
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	189b      	adds	r3, r3, r2
 800eb74:	187a      	adds	r2, r7, r1
 800eb76:	6013      	str	r3, [r2, #0]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	00da      	lsls	r2, r3, #3
 800eb7e:	187b      	adds	r3, r7, r1
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	18d3      	adds	r3, r2, r3
 800eb84:	4a5d      	ldr	r2, [pc, #372]	; (800ecfc <USB_EPStartXfer+0xae8>)
 800eb86:	4694      	mov	ip, r2
 800eb88:	4463      	add	r3, ip
 800eb8a:	2184      	movs	r1, #132	; 0x84
 800eb8c:	187a      	adds	r2, r7, r1
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	2386      	movs	r3, #134	; 0x86
 800eb92:	005b      	lsls	r3, r3, #1
 800eb94:	18fb      	adds	r3, r7, r3
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	187b      	adds	r3, r7, r1
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eba0:	2385      	movs	r3, #133	; 0x85
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	18fb      	adds	r3, r7, r3
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	8912      	ldrh	r2, [r2, #8]
 800ebaa:	801a      	strh	r2, [r3, #0]
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	6959      	ldr	r1, [r3, #20]
 800ebb0:	2386      	movs	r3, #134	; 0x86
 800ebb2:	005b      	lsls	r3, r3, #1
 800ebb4:	18fb      	adds	r3, r7, r3
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	b29c      	uxth	r4, r3
 800ebba:	2385      	movs	r3, #133	; 0x85
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	18fb      	adds	r3, r7, r3
 800ebc0:	881a      	ldrh	r2, [r3, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	0023      	movs	r3, r4
 800ebc6:	f000 fd5d 	bl	800f684 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	785b      	ldrb	r3, [r3, #1]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d117      	bne.n	800ec02 <USB_EPStartXfer+0x9ee>
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	18d3      	adds	r3, r2, r3
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	b29a      	uxth	r2, r3
 800ebe0:	2068      	movs	r0, #104	; 0x68
 800ebe2:	183b      	adds	r3, r7, r0
 800ebe4:	4946      	ldr	r1, [pc, #280]	; (800ed00 <USB_EPStartXfer+0xaec>)
 800ebe6:	400a      	ands	r2, r1
 800ebe8:	801a      	strh	r2, [r3, #0]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	18d3      	adds	r3, r2, r3
 800ebf4:	183a      	adds	r2, r7, r0
 800ebf6:	8812      	ldrh	r2, [r2, #0]
 800ebf8:	4942      	ldr	r1, [pc, #264]	; (800ed04 <USB_EPStartXfer+0xaf0>)
 800ebfa:	430a      	orrs	r2, r1
 800ebfc:	b292      	uxth	r2, r2
 800ebfe:	801a      	strh	r2, [r3, #0]
 800ec00:	e01a      	b.n	800ec38 <USB_EPStartXfer+0xa24>
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	785b      	ldrb	r3, [r3, #1]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d116      	bne.n	800ec38 <USB_EPStartXfer+0xa24>
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	18d3      	adds	r3, r2, r3
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	206a      	movs	r0, #106	; 0x6a
 800ec1a:	183b      	adds	r3, r7, r0
 800ec1c:	4938      	ldr	r1, [pc, #224]	; (800ed00 <USB_EPStartXfer+0xaec>)
 800ec1e:	400a      	ands	r2, r1
 800ec20:	801a      	strh	r2, [r3, #0]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	18d3      	adds	r3, r2, r3
 800ec2c:	183a      	adds	r2, r7, r0
 800ec2e:	8812      	ldrh	r2, [r2, #0]
 800ec30:	4935      	ldr	r1, [pc, #212]	; (800ed08 <USB_EPStartXfer+0xaf4>)
 800ec32:	430a      	orrs	r2, r1
 800ec34:	b292      	uxth	r2, r2
 800ec36:	801a      	strh	r2, [r3, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	18d3      	adds	r3, r2, r3
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	4b31      	ldr	r3, [pc, #196]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800ec48:	2188      	movs	r1, #136	; 0x88
 800ec4a:	0049      	lsls	r1, r1, #1
 800ec4c:	468c      	mov	ip, r1
 800ec4e:	44bc      	add	ip, r7
 800ec50:	4463      	add	r3, ip
 800ec52:	492f      	ldr	r1, [pc, #188]	; (800ed10 <USB_EPStartXfer+0xafc>)
 800ec54:	400a      	ands	r2, r1
 800ec56:	801a      	strh	r2, [r3, #0]
 800ec58:	4b2c      	ldr	r3, [pc, #176]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800ec5a:	2288      	movs	r2, #136	; 0x88
 800ec5c:	0052      	lsls	r2, r2, #1
 800ec5e:	4694      	mov	ip, r2
 800ec60:	44bc      	add	ip, r7
 800ec62:	4463      	add	r3, ip
 800ec64:	4a29      	ldr	r2, [pc, #164]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800ec66:	2188      	movs	r1, #136	; 0x88
 800ec68:	0049      	lsls	r1, r1, #1
 800ec6a:	468c      	mov	ip, r1
 800ec6c:	44bc      	add	ip, r7
 800ec6e:	4462      	add	r2, ip
 800ec70:	8812      	ldrh	r2, [r2, #0]
 800ec72:	2110      	movs	r1, #16
 800ec74:	404a      	eors	r2, r1
 800ec76:	801a      	strh	r2, [r3, #0]
 800ec78:	4b24      	ldr	r3, [pc, #144]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800ec7a:	2288      	movs	r2, #136	; 0x88
 800ec7c:	0052      	lsls	r2, r2, #1
 800ec7e:	4694      	mov	ip, r2
 800ec80:	44bc      	add	ip, r7
 800ec82:	4463      	add	r3, ip
 800ec84:	4a21      	ldr	r2, [pc, #132]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800ec86:	2188      	movs	r1, #136	; 0x88
 800ec88:	0049      	lsls	r1, r1, #1
 800ec8a:	468c      	mov	ip, r1
 800ec8c:	44bc      	add	ip, r7
 800ec8e:	4462      	add	r2, ip
 800ec90:	8812      	ldrh	r2, [r2, #0]
 800ec92:	2120      	movs	r1, #32
 800ec94:	404a      	eors	r2, r1
 800ec96:	801a      	strh	r2, [r3, #0]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	18d3      	adds	r3, r2, r3
 800eca2:	4a1a      	ldr	r2, [pc, #104]	; (800ed0c <USB_EPStartXfer+0xaf8>)
 800eca4:	2188      	movs	r1, #136	; 0x88
 800eca6:	0049      	lsls	r1, r1, #1
 800eca8:	468c      	mov	ip, r1
 800ecaa:	44bc      	add	ip, r7
 800ecac:	4462      	add	r2, ip
 800ecae:	8812      	ldrh	r2, [r2, #0]
 800ecb0:	4918      	ldr	r1, [pc, #96]	; (800ed14 <USB_EPStartXfer+0xb00>)
 800ecb2:	430a      	orrs	r2, r1
 800ecb4:	b292      	uxth	r2, r2
 800ecb6:	801a      	strh	r2, [r3, #0]
 800ecb8:	f000 fbc5 	bl	800f446 <USB_EPStartXfer+0x1232>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	7b1b      	ldrb	r3, [r3, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d000      	beq.n	800ecc6 <USB_EPStartXfer+0xab2>
 800ecc4:	e0a7      	b.n	800ee16 <USB_EPStartXfer+0xc02>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	699a      	ldr	r2, [r3, #24]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	691b      	ldr	r3, [r3, #16]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d922      	bls.n	800ed18 <USB_EPStartXfer+0xb04>
      {
        len = ep->maxpacket;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	691b      	ldr	r3, [r3, #16]
 800ecd6:	2186      	movs	r1, #134	; 0x86
 800ecd8:	0049      	lsls	r1, r1, #1
 800ecda:	187a      	adds	r2, r7, r1
 800ecdc:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	699a      	ldr	r2, [r3, #24]
 800ece2:	187b      	adds	r3, r7, r1
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	1ad2      	subs	r2, r2, r3
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	619a      	str	r2, [r3, #24]
 800ecec:	e01d      	b.n	800ed2a <USB_EPStartXfer+0xb16>
 800ecee:	46c0      	nop			; (mov r8, r8)
 800ecf0:	00000406 	.word	0x00000406
 800ecf4:	ffff83ff 	.word	0xffff83ff
 800ecf8:	ffff8000 	.word	0xffff8000
 800ecfc:	00000402 	.word	0x00000402
 800ed00:	ffff8f8f 	.word	0xffff8f8f
 800ed04:	ffff80c0 	.word	0xffff80c0
 800ed08:	ffffc080 	.word	0xffffc080
 800ed0c:	fffffefe 	.word	0xfffffefe
 800ed10:	ffff8fbf 	.word	0xffff8fbf
 800ed14:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	2286      	movs	r2, #134	; 0x86
 800ed1e:	0052      	lsls	r2, r2, #1
 800ed20:	18ba      	adds	r2, r7, r2
 800ed22:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2200      	movs	r2, #0
 800ed28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2194      	movs	r1, #148	; 0x94
 800ed2e:	187a      	adds	r2, r7, r1
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2250      	movs	r2, #80	; 0x50
 800ed36:	5a9b      	ldrh	r3, [r3, r2]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	001a      	movs	r2, r3
 800ed3c:	187b      	adds	r3, r7, r1
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	189b      	adds	r3, r3, r2
 800ed42:	187a      	adds	r2, r7, r1
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	00da      	lsls	r2, r3, #3
 800ed4c:	187b      	adds	r3, r7, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	18d3      	adds	r3, r2, r3
 800ed52:	4abc      	ldr	r2, [pc, #752]	; (800f044 <USB_EPStartXfer+0xe30>)
 800ed54:	4694      	mov	ip, r2
 800ed56:	4463      	add	r3, ip
 800ed58:	2190      	movs	r1, #144	; 0x90
 800ed5a:	187a      	adds	r2, r7, r1
 800ed5c:	6013      	str	r3, [r2, #0]
 800ed5e:	2386      	movs	r3, #134	; 0x86
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	18fb      	adds	r3, r7, r3
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d114      	bne.n	800ed94 <USB_EPStartXfer+0xb80>
 800ed6a:	187b      	adds	r3, r7, r1
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	881b      	ldrh	r3, [r3, #0]
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	4ab5      	ldr	r2, [pc, #724]	; (800f048 <USB_EPStartXfer+0xe34>)
 800ed74:	4013      	ands	r3, r2
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	187b      	adds	r3, r7, r1
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	801a      	strh	r2, [r3, #0]
 800ed7e:	187b      	adds	r3, r7, r1
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	881b      	ldrh	r3, [r3, #0]
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	4ab1      	ldr	r2, [pc, #708]	; (800f04c <USB_EPStartXfer+0xe38>)
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	187b      	adds	r3, r7, r1
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	801a      	strh	r2, [r3, #0]
 800ed92:	e333      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
 800ed94:	2286      	movs	r2, #134	; 0x86
 800ed96:	0052      	lsls	r2, r2, #1
 800ed98:	18bb      	adds	r3, r7, r2
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2b3e      	cmp	r3, #62	; 0x3e
 800ed9e:	d81a      	bhi.n	800edd6 <USB_EPStartXfer+0xbc2>
 800eda0:	18bb      	adds	r3, r7, r2
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	085b      	lsrs	r3, r3, #1
 800eda6:	21ec      	movs	r1, #236	; 0xec
 800eda8:	1878      	adds	r0, r7, r1
 800edaa:	6003      	str	r3, [r0, #0]
 800edac:	18bb      	adds	r3, r7, r2
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2201      	movs	r2, #1
 800edb2:	4013      	ands	r3, r2
 800edb4:	d004      	beq.n	800edc0 <USB_EPStartXfer+0xbac>
 800edb6:	187b      	adds	r3, r7, r1
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3301      	adds	r3, #1
 800edbc:	187a      	adds	r2, r7, r1
 800edbe:	6013      	str	r3, [r2, #0]
 800edc0:	23ec      	movs	r3, #236	; 0xec
 800edc2:	18fb      	adds	r3, r7, r3
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	029b      	lsls	r3, r3, #10
 800edca:	b29a      	uxth	r2, r3
 800edcc:	2390      	movs	r3, #144	; 0x90
 800edce:	18fb      	adds	r3, r7, r3
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	801a      	strh	r2, [r3, #0]
 800edd4:	e312      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
 800edd6:	2286      	movs	r2, #134	; 0x86
 800edd8:	0052      	lsls	r2, r2, #1
 800edda:	18bb      	adds	r3, r7, r2
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	095b      	lsrs	r3, r3, #5
 800ede0:	21ec      	movs	r1, #236	; 0xec
 800ede2:	1878      	adds	r0, r7, r1
 800ede4:	6003      	str	r3, [r0, #0]
 800ede6:	18bb      	adds	r3, r7, r2
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	221f      	movs	r2, #31
 800edec:	4013      	ands	r3, r2
 800edee:	d104      	bne.n	800edfa <USB_EPStartXfer+0xbe6>
 800edf0:	187b      	adds	r3, r7, r1
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	187a      	adds	r2, r7, r1
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	23ec      	movs	r3, #236	; 0xec
 800edfc:	18fb      	adds	r3, r7, r3
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	029b      	lsls	r3, r3, #10
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	4a91      	ldr	r2, [pc, #580]	; (800f04c <USB_EPStartXfer+0xe38>)
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	2390      	movs	r3, #144	; 0x90
 800ee0e:	18fb      	adds	r3, r7, r3
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	801a      	strh	r2, [r3, #0]
 800ee14:	e2f2      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	78db      	ldrb	r3, [r3, #3]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d000      	beq.n	800ee20 <USB_EPStartXfer+0xc0c>
 800ee1e:	e179      	b.n	800f114 <USB_EPStartXfer+0xf00>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	785b      	ldrb	r3, [r3, #1]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d16f      	bne.n	800ef08 <USB_EPStartXfer+0xcf4>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	21b0      	movs	r1, #176	; 0xb0
 800ee2c:	187a      	adds	r2, r7, r1
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2250      	movs	r2, #80	; 0x50
 800ee34:	5a9b      	ldrh	r3, [r3, r2]
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	001a      	movs	r2, r3
 800ee3a:	187b      	adds	r3, r7, r1
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	189b      	adds	r3, r3, r2
 800ee40:	187a      	adds	r2, r7, r1
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	00da      	lsls	r2, r3, #3
 800ee4a:	187b      	adds	r3, r7, r1
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	18d3      	adds	r3, r2, r3
 800ee50:	4a7f      	ldr	r2, [pc, #508]	; (800f050 <USB_EPStartXfer+0xe3c>)
 800ee52:	4694      	mov	ip, r2
 800ee54:	4463      	add	r3, ip
 800ee56:	21ac      	movs	r1, #172	; 0xac
 800ee58:	187a      	adds	r2, r7, r1
 800ee5a:	6013      	str	r3, [r2, #0]
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d114      	bne.n	800ee8e <USB_EPStartXfer+0xc7a>
 800ee64:	187b      	adds	r3, r7, r1
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	4a76      	ldr	r2, [pc, #472]	; (800f048 <USB_EPStartXfer+0xe34>)
 800ee6e:	4013      	ands	r3, r2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	187b      	adds	r3, r7, r1
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	801a      	strh	r2, [r3, #0]
 800ee78:	187b      	adds	r3, r7, r1
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	4a72      	ldr	r2, [pc, #456]	; (800f04c <USB_EPStartXfer+0xe38>)
 800ee82:	4313      	orrs	r3, r2
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	187b      	adds	r3, r7, r1
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	801a      	strh	r2, [r3, #0]
 800ee8c:	e060      	b.n	800ef50 <USB_EPStartXfer+0xd3c>
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	691b      	ldr	r3, [r3, #16]
 800ee92:	2b3e      	cmp	r3, #62	; 0x3e
 800ee94:	d81a      	bhi.n	800eecc <USB_EPStartXfer+0xcb8>
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	691b      	ldr	r3, [r3, #16]
 800ee9a:	085b      	lsrs	r3, r3, #1
 800ee9c:	21e8      	movs	r1, #232	; 0xe8
 800ee9e:	187a      	adds	r2, r7, r1
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	2201      	movs	r2, #1
 800eea8:	4013      	ands	r3, r2
 800eeaa:	d004      	beq.n	800eeb6 <USB_EPStartXfer+0xca2>
 800eeac:	187b      	adds	r3, r7, r1
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	187a      	adds	r2, r7, r1
 800eeb4:	6013      	str	r3, [r2, #0]
 800eeb6:	23e8      	movs	r3, #232	; 0xe8
 800eeb8:	18fb      	adds	r3, r7, r3
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	029b      	lsls	r3, r3, #10
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	23ac      	movs	r3, #172	; 0xac
 800eec4:	18fb      	adds	r3, r7, r3
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	801a      	strh	r2, [r3, #0]
 800eeca:	e041      	b.n	800ef50 <USB_EPStartXfer+0xd3c>
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	691b      	ldr	r3, [r3, #16]
 800eed0:	095b      	lsrs	r3, r3, #5
 800eed2:	21e8      	movs	r1, #232	; 0xe8
 800eed4:	187a      	adds	r2, r7, r1
 800eed6:	6013      	str	r3, [r2, #0]
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	221f      	movs	r2, #31
 800eede:	4013      	ands	r3, r2
 800eee0:	d104      	bne.n	800eeec <USB_EPStartXfer+0xcd8>
 800eee2:	187b      	adds	r3, r7, r1
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	3b01      	subs	r3, #1
 800eee8:	187a      	adds	r2, r7, r1
 800eeea:	6013      	str	r3, [r2, #0]
 800eeec:	23e8      	movs	r3, #232	; 0xe8
 800eeee:	18fb      	adds	r3, r7, r3
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	029b      	lsls	r3, r3, #10
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	4a54      	ldr	r2, [pc, #336]	; (800f04c <USB_EPStartXfer+0xe38>)
 800eefa:	4313      	orrs	r3, r2
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	23ac      	movs	r3, #172	; 0xac
 800ef00:	18fb      	adds	r3, r7, r3
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	801a      	strh	r2, [r3, #0]
 800ef06:	e023      	b.n	800ef50 <USB_EPStartXfer+0xd3c>
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	785b      	ldrb	r3, [r3, #1]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d11f      	bne.n	800ef50 <USB_EPStartXfer+0xd3c>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	21b8      	movs	r1, #184	; 0xb8
 800ef14:	187a      	adds	r2, r7, r1
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2250      	movs	r2, #80	; 0x50
 800ef1c:	5a9b      	ldrh	r3, [r3, r2]
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	001a      	movs	r2, r3
 800ef22:	187b      	adds	r3, r7, r1
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	189b      	adds	r3, r3, r2
 800ef28:	187a      	adds	r2, r7, r1
 800ef2a:	6013      	str	r3, [r2, #0]
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	00da      	lsls	r2, r3, #3
 800ef32:	187b      	adds	r3, r7, r1
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	18d3      	adds	r3, r2, r3
 800ef38:	4a45      	ldr	r2, [pc, #276]	; (800f050 <USB_EPStartXfer+0xe3c>)
 800ef3a:	4694      	mov	ip, r2
 800ef3c:	4463      	add	r3, ip
 800ef3e:	21b4      	movs	r1, #180	; 0xb4
 800ef40:	187a      	adds	r2, r7, r1
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	187b      	adds	r3, r7, r1
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	801a      	strh	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	22a8      	movs	r2, #168	; 0xa8
 800ef54:	18ba      	adds	r2, r7, r2
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	785b      	ldrb	r3, [r3, #1]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d000      	beq.n	800ef62 <USB_EPStartXfer+0xd4e>
 800ef60:	e078      	b.n	800f054 <USB_EPStartXfer+0xe40>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	21a0      	movs	r1, #160	; 0xa0
 800ef66:	187a      	adds	r2, r7, r1
 800ef68:	6013      	str	r3, [r2, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2250      	movs	r2, #80	; 0x50
 800ef6e:	5a9b      	ldrh	r3, [r3, r2]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	001a      	movs	r2, r3
 800ef74:	187b      	adds	r3, r7, r1
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	189b      	adds	r3, r3, r2
 800ef7a:	187a      	adds	r2, r7, r1
 800ef7c:	6013      	str	r3, [r2, #0]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	00da      	lsls	r2, r3, #3
 800ef84:	187b      	adds	r3, r7, r1
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	18d3      	adds	r3, r2, r3
 800ef8a:	4a2e      	ldr	r2, [pc, #184]	; (800f044 <USB_EPStartXfer+0xe30>)
 800ef8c:	4694      	mov	ip, r2
 800ef8e:	4463      	add	r3, ip
 800ef90:	219c      	movs	r1, #156	; 0x9c
 800ef92:	187a      	adds	r2, r7, r1
 800ef94:	6013      	str	r3, [r2, #0]
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d114      	bne.n	800efc8 <USB_EPStartXfer+0xdb4>
 800ef9e:	187b      	adds	r3, r7, r1
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	4a28      	ldr	r2, [pc, #160]	; (800f048 <USB_EPStartXfer+0xe34>)
 800efa8:	4013      	ands	r3, r2
 800efaa:	b29a      	uxth	r2, r3
 800efac:	187b      	adds	r3, r7, r1
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	801a      	strh	r2, [r3, #0]
 800efb2:	187b      	adds	r3, r7, r1
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	b29b      	uxth	r3, r3
 800efba:	4a24      	ldr	r2, [pc, #144]	; (800f04c <USB_EPStartXfer+0xe38>)
 800efbc:	4313      	orrs	r3, r2
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	187b      	adds	r3, r7, r1
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	801a      	strh	r2, [r3, #0]
 800efc6:	e066      	b.n	800f096 <USB_EPStartXfer+0xe82>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	2b3e      	cmp	r3, #62	; 0x3e
 800efce:	d81a      	bhi.n	800f006 <USB_EPStartXfer+0xdf2>
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	691b      	ldr	r3, [r3, #16]
 800efd4:	085b      	lsrs	r3, r3, #1
 800efd6:	21e4      	movs	r1, #228	; 0xe4
 800efd8:	187a      	adds	r2, r7, r1
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	691b      	ldr	r3, [r3, #16]
 800efe0:	2201      	movs	r2, #1
 800efe2:	4013      	ands	r3, r2
 800efe4:	d004      	beq.n	800eff0 <USB_EPStartXfer+0xddc>
 800efe6:	187b      	adds	r3, r7, r1
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3301      	adds	r3, #1
 800efec:	187a      	adds	r2, r7, r1
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	23e4      	movs	r3, #228	; 0xe4
 800eff2:	18fb      	adds	r3, r7, r3
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	029b      	lsls	r3, r3, #10
 800effa:	b29a      	uxth	r2, r3
 800effc:	239c      	movs	r3, #156	; 0x9c
 800effe:	18fb      	adds	r3, r7, r3
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	801a      	strh	r2, [r3, #0]
 800f004:	e047      	b.n	800f096 <USB_EPStartXfer+0xe82>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	691b      	ldr	r3, [r3, #16]
 800f00a:	095b      	lsrs	r3, r3, #5
 800f00c:	21e4      	movs	r1, #228	; 0xe4
 800f00e:	187a      	adds	r2, r7, r1
 800f010:	6013      	str	r3, [r2, #0]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	221f      	movs	r2, #31
 800f018:	4013      	ands	r3, r2
 800f01a:	d104      	bne.n	800f026 <USB_EPStartXfer+0xe12>
 800f01c:	187b      	adds	r3, r7, r1
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	3b01      	subs	r3, #1
 800f022:	187a      	adds	r2, r7, r1
 800f024:	6013      	str	r3, [r2, #0]
 800f026:	23e4      	movs	r3, #228	; 0xe4
 800f028:	18fb      	adds	r3, r7, r3
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	029b      	lsls	r3, r3, #10
 800f030:	b29b      	uxth	r3, r3
 800f032:	4a06      	ldr	r2, [pc, #24]	; (800f04c <USB_EPStartXfer+0xe38>)
 800f034:	4313      	orrs	r3, r2
 800f036:	b29a      	uxth	r2, r3
 800f038:	239c      	movs	r3, #156	; 0x9c
 800f03a:	18fb      	adds	r3, r7, r3
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	801a      	strh	r2, [r3, #0]
 800f040:	e029      	b.n	800f096 <USB_EPStartXfer+0xe82>
 800f042:	46c0      	nop			; (mov r8, r8)
 800f044:	00000406 	.word	0x00000406
 800f048:	ffff83ff 	.word	0xffff83ff
 800f04c:	ffff8000 	.word	0xffff8000
 800f050:	00000402 	.word	0x00000402
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	785b      	ldrb	r3, [r3, #1]
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d11c      	bne.n	800f096 <USB_EPStartXfer+0xe82>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2250      	movs	r2, #80	; 0x50
 800f060:	5a9b      	ldrh	r3, [r3, r2]
 800f062:	b29b      	uxth	r3, r3
 800f064:	001a      	movs	r2, r3
 800f066:	21a8      	movs	r1, #168	; 0xa8
 800f068:	187b      	adds	r3, r7, r1
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	189b      	adds	r3, r3, r2
 800f06e:	187a      	adds	r2, r7, r1
 800f070:	6013      	str	r3, [r2, #0]
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	00da      	lsls	r2, r3, #3
 800f078:	187b      	adds	r3, r7, r1
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	18d3      	adds	r3, r2, r3
 800f07e:	4ad9      	ldr	r2, [pc, #868]	; (800f3e4 <USB_EPStartXfer+0x11d0>)
 800f080:	4694      	mov	ip, r2
 800f082:	4463      	add	r3, ip
 800f084:	21a4      	movs	r1, #164	; 0xa4
 800f086:	187a      	adds	r2, r7, r1
 800f088:	6013      	str	r3, [r2, #0]
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	b29a      	uxth	r2, r3
 800f090:	187b      	adds	r3, r7, r1
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	69db      	ldr	r3, [r3, #28]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d100      	bne.n	800f0a0 <USB_EPStartXfer+0xe8c>
 800f09e:	e1ad      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	18d2      	adds	r2, r2, r3
 800f0aa:	219a      	movs	r1, #154	; 0x9a
 800f0ac:	187b      	adds	r3, r7, r1
 800f0ae:	8812      	ldrh	r2, [r2, #0]
 800f0b0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f0b2:	187b      	adds	r3, r7, r1
 800f0b4:	881a      	ldrh	r2, [r3, #0]
 800f0b6:	2380      	movs	r3, #128	; 0x80
 800f0b8:	01db      	lsls	r3, r3, #7
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	d004      	beq.n	800f0c8 <USB_EPStartXfer+0xeb4>
 800f0be:	187b      	adds	r3, r7, r1
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	2240      	movs	r2, #64	; 0x40
 800f0c4:	4013      	ands	r3, r2
 800f0c6:	d10d      	bne.n	800f0e4 <USB_EPStartXfer+0xed0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f0c8:	219a      	movs	r1, #154	; 0x9a
 800f0ca:	187b      	adds	r3, r7, r1
 800f0cc:	881a      	ldrh	r2, [r3, #0]
 800f0ce:	2380      	movs	r3, #128	; 0x80
 800f0d0:	01db      	lsls	r3, r3, #7
 800f0d2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f0d4:	d000      	beq.n	800f0d8 <USB_EPStartXfer+0xec4>
 800f0d6:	e191      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f0d8:	187b      	adds	r3, r7, r1
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	2240      	movs	r2, #64	; 0x40
 800f0de:	4013      	ands	r3, r2
 800f0e0:	d000      	beq.n	800f0e4 <USB_EPStartXfer+0xed0>
 800f0e2:	e18b      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	18d3      	adds	r3, r2, r3
 800f0ee:	881b      	ldrh	r3, [r3, #0]
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	2098      	movs	r0, #152	; 0x98
 800f0f4:	183b      	adds	r3, r7, r0
 800f0f6:	49bc      	ldr	r1, [pc, #752]	; (800f3e8 <USB_EPStartXfer+0x11d4>)
 800f0f8:	400a      	ands	r2, r1
 800f0fa:	801a      	strh	r2, [r3, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	18d3      	adds	r3, r2, r3
 800f106:	183a      	adds	r2, r7, r0
 800f108:	8812      	ldrh	r2, [r2, #0]
 800f10a:	49b8      	ldr	r1, [pc, #736]	; (800f3ec <USB_EPStartXfer+0x11d8>)
 800f10c:	430a      	orrs	r2, r1
 800f10e:	b292      	uxth	r2, r2
 800f110:	801a      	strh	r2, [r3, #0]
 800f112:	e173      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	78db      	ldrb	r3, [r3, #3]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d000      	beq.n	800f11e <USB_EPStartXfer+0xf0a>
 800f11c:	e160      	b.n	800f3e0 <USB_EPStartXfer+0x11cc>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	699a      	ldr	r2, [r3, #24]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	429a      	cmp	r2, r3
 800f128:	d90d      	bls.n	800f146 <USB_EPStartXfer+0xf32>
        {
          len = ep->maxpacket;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	691b      	ldr	r3, [r3, #16]
 800f12e:	2186      	movs	r1, #134	; 0x86
 800f130:	0049      	lsls	r1, r1, #1
 800f132:	187a      	adds	r2, r7, r1
 800f134:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	699a      	ldr	r2, [r3, #24]
 800f13a:	187b      	adds	r3, r7, r1
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1ad2      	subs	r2, r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	619a      	str	r2, [r3, #24]
 800f144:	e008      	b.n	800f158 <USB_EPStartXfer+0xf44>
        }
        else
        {
          len = ep->xfer_len;
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	699b      	ldr	r3, [r3, #24]
 800f14a:	2286      	movs	r2, #134	; 0x86
 800f14c:	0052      	lsls	r2, r2, #1
 800f14e:	18ba      	adds	r2, r7, r2
 800f150:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2200      	movs	r2, #0
 800f156:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	785b      	ldrb	r3, [r3, #1]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d000      	beq.n	800f162 <USB_EPStartXfer+0xf4e>
 800f160:	e075      	b.n	800f24e <USB_EPStartXfer+0x103a>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	21d0      	movs	r1, #208	; 0xd0
 800f166:	187a      	adds	r2, r7, r1
 800f168:	6013      	str	r3, [r2, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2250      	movs	r2, #80	; 0x50
 800f16e:	5a9b      	ldrh	r3, [r3, r2]
 800f170:	b29b      	uxth	r3, r3
 800f172:	001a      	movs	r2, r3
 800f174:	187b      	adds	r3, r7, r1
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	189b      	adds	r3, r3, r2
 800f17a:	187a      	adds	r2, r7, r1
 800f17c:	6013      	str	r3, [r2, #0]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	00da      	lsls	r2, r3, #3
 800f184:	187b      	adds	r3, r7, r1
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	18d3      	adds	r3, r2, r3
 800f18a:	4a99      	ldr	r2, [pc, #612]	; (800f3f0 <USB_EPStartXfer+0x11dc>)
 800f18c:	4694      	mov	ip, r2
 800f18e:	4463      	add	r3, ip
 800f190:	21cc      	movs	r1, #204	; 0xcc
 800f192:	187a      	adds	r2, r7, r1
 800f194:	6013      	str	r3, [r2, #0]
 800f196:	2386      	movs	r3, #134	; 0x86
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	18fb      	adds	r3, r7, r3
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d114      	bne.n	800f1cc <USB_EPStartXfer+0xfb8>
 800f1a2:	187b      	adds	r3, r7, r1
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	881b      	ldrh	r3, [r3, #0]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	4a92      	ldr	r2, [pc, #584]	; (800f3f4 <USB_EPStartXfer+0x11e0>)
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	187b      	adds	r3, r7, r1
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	801a      	strh	r2, [r3, #0]
 800f1b6:	187b      	adds	r3, r7, r1
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	4a8e      	ldr	r2, [pc, #568]	; (800f3f8 <USB_EPStartXfer+0x11e4>)
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	187b      	adds	r3, r7, r1
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	801a      	strh	r2, [r3, #0]
 800f1ca:	e066      	b.n	800f29a <USB_EPStartXfer+0x1086>
 800f1cc:	2286      	movs	r2, #134	; 0x86
 800f1ce:	0052      	lsls	r2, r2, #1
 800f1d0:	18bb      	adds	r3, r7, r2
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b3e      	cmp	r3, #62	; 0x3e
 800f1d6:	d81a      	bhi.n	800f20e <USB_EPStartXfer+0xffa>
 800f1d8:	18bb      	adds	r3, r7, r2
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	085b      	lsrs	r3, r3, #1
 800f1de:	21e0      	movs	r1, #224	; 0xe0
 800f1e0:	1878      	adds	r0, r7, r1
 800f1e2:	6003      	str	r3, [r0, #0]
 800f1e4:	18bb      	adds	r3, r7, r2
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	d004      	beq.n	800f1f8 <USB_EPStartXfer+0xfe4>
 800f1ee:	187b      	adds	r3, r7, r1
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	187a      	adds	r2, r7, r1
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	23e0      	movs	r3, #224	; 0xe0
 800f1fa:	18fb      	adds	r3, r7, r3
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	029b      	lsls	r3, r3, #10
 800f202:	b29a      	uxth	r2, r3
 800f204:	23cc      	movs	r3, #204	; 0xcc
 800f206:	18fb      	adds	r3, r7, r3
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	801a      	strh	r2, [r3, #0]
 800f20c:	e045      	b.n	800f29a <USB_EPStartXfer+0x1086>
 800f20e:	2286      	movs	r2, #134	; 0x86
 800f210:	0052      	lsls	r2, r2, #1
 800f212:	18bb      	adds	r3, r7, r2
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	095b      	lsrs	r3, r3, #5
 800f218:	21e0      	movs	r1, #224	; 0xe0
 800f21a:	1878      	adds	r0, r7, r1
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	18bb      	adds	r3, r7, r2
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	221f      	movs	r2, #31
 800f224:	4013      	ands	r3, r2
 800f226:	d104      	bne.n	800f232 <USB_EPStartXfer+0x101e>
 800f228:	187b      	adds	r3, r7, r1
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3b01      	subs	r3, #1
 800f22e:	187a      	adds	r2, r7, r1
 800f230:	6013      	str	r3, [r2, #0]
 800f232:	23e0      	movs	r3, #224	; 0xe0
 800f234:	18fb      	adds	r3, r7, r3
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	029b      	lsls	r3, r3, #10
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4a6e      	ldr	r2, [pc, #440]	; (800f3f8 <USB_EPStartXfer+0x11e4>)
 800f240:	4313      	orrs	r3, r2
 800f242:	b29a      	uxth	r2, r3
 800f244:	23cc      	movs	r3, #204	; 0xcc
 800f246:	18fb      	adds	r3, r7, r3
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	801a      	strh	r2, [r3, #0]
 800f24c:	e025      	b.n	800f29a <USB_EPStartXfer+0x1086>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	785b      	ldrb	r3, [r3, #1]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d121      	bne.n	800f29a <USB_EPStartXfer+0x1086>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	21d8      	movs	r1, #216	; 0xd8
 800f25a:	187a      	adds	r2, r7, r1
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2250      	movs	r2, #80	; 0x50
 800f262:	5a9b      	ldrh	r3, [r3, r2]
 800f264:	b29b      	uxth	r3, r3
 800f266:	001a      	movs	r2, r3
 800f268:	187b      	adds	r3, r7, r1
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	189b      	adds	r3, r3, r2
 800f26e:	187a      	adds	r2, r7, r1
 800f270:	6013      	str	r3, [r2, #0]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	00da      	lsls	r2, r3, #3
 800f278:	187b      	adds	r3, r7, r1
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	18d3      	adds	r3, r2, r3
 800f27e:	4a5c      	ldr	r2, [pc, #368]	; (800f3f0 <USB_EPStartXfer+0x11dc>)
 800f280:	4694      	mov	ip, r2
 800f282:	4463      	add	r3, ip
 800f284:	21d4      	movs	r1, #212	; 0xd4
 800f286:	187a      	adds	r2, r7, r1
 800f288:	6013      	str	r3, [r2, #0]
 800f28a:	2386      	movs	r3, #134	; 0x86
 800f28c:	005b      	lsls	r3, r3, #1
 800f28e:	18fb      	adds	r3, r7, r3
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	b29a      	uxth	r2, r3
 800f294:	187b      	adds	r3, r7, r1
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	801a      	strh	r2, [r3, #0]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	22c8      	movs	r2, #200	; 0xc8
 800f29e:	18ba      	adds	r2, r7, r2
 800f2a0:	6013      	str	r3, [r2, #0]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	785b      	ldrb	r3, [r3, #1]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d000      	beq.n	800f2ac <USB_EPStartXfer+0x1098>
 800f2aa:	e075      	b.n	800f398 <USB_EPStartXfer+0x1184>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	21c0      	movs	r1, #192	; 0xc0
 800f2b0:	187a      	adds	r2, r7, r1
 800f2b2:	6013      	str	r3, [r2, #0]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2250      	movs	r2, #80	; 0x50
 800f2b8:	5a9b      	ldrh	r3, [r3, r2]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	001a      	movs	r2, r3
 800f2be:	187b      	adds	r3, r7, r1
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	189b      	adds	r3, r3, r2
 800f2c4:	187a      	adds	r2, r7, r1
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	00da      	lsls	r2, r3, #3
 800f2ce:	187b      	adds	r3, r7, r1
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	18d3      	adds	r3, r2, r3
 800f2d4:	4a43      	ldr	r2, [pc, #268]	; (800f3e4 <USB_EPStartXfer+0x11d0>)
 800f2d6:	4694      	mov	ip, r2
 800f2d8:	4463      	add	r3, ip
 800f2da:	21bc      	movs	r1, #188	; 0xbc
 800f2dc:	187a      	adds	r2, r7, r1
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	2386      	movs	r3, #134	; 0x86
 800f2e2:	005b      	lsls	r3, r3, #1
 800f2e4:	18fb      	adds	r3, r7, r3
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d114      	bne.n	800f316 <USB_EPStartXfer+0x1102>
 800f2ec:	187b      	adds	r3, r7, r1
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	881b      	ldrh	r3, [r3, #0]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4a3f      	ldr	r2, [pc, #252]	; (800f3f4 <USB_EPStartXfer+0x11e0>)
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	187b      	adds	r3, r7, r1
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	801a      	strh	r2, [r3, #0]
 800f300:	187b      	adds	r3, r7, r1
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	881b      	ldrh	r3, [r3, #0]
 800f306:	b29b      	uxth	r3, r3
 800f308:	4a3b      	ldr	r2, [pc, #236]	; (800f3f8 <USB_EPStartXfer+0x11e4>)
 800f30a:	4313      	orrs	r3, r2
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	187b      	adds	r3, r7, r1
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	801a      	strh	r2, [r3, #0]
 800f314:	e072      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
 800f316:	2286      	movs	r2, #134	; 0x86
 800f318:	0052      	lsls	r2, r2, #1
 800f31a:	18bb      	adds	r3, r7, r2
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b3e      	cmp	r3, #62	; 0x3e
 800f320:	d81a      	bhi.n	800f358 <USB_EPStartXfer+0x1144>
 800f322:	18bb      	adds	r3, r7, r2
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	085b      	lsrs	r3, r3, #1
 800f328:	21dc      	movs	r1, #220	; 0xdc
 800f32a:	1878      	adds	r0, r7, r1
 800f32c:	6003      	str	r3, [r0, #0]
 800f32e:	18bb      	adds	r3, r7, r2
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2201      	movs	r2, #1
 800f334:	4013      	ands	r3, r2
 800f336:	d004      	beq.n	800f342 <USB_EPStartXfer+0x112e>
 800f338:	187b      	adds	r3, r7, r1
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3301      	adds	r3, #1
 800f33e:	187a      	adds	r2, r7, r1
 800f340:	6013      	str	r3, [r2, #0]
 800f342:	23dc      	movs	r3, #220	; 0xdc
 800f344:	18fb      	adds	r3, r7, r3
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	b29b      	uxth	r3, r3
 800f34a:	029b      	lsls	r3, r3, #10
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	23bc      	movs	r3, #188	; 0xbc
 800f350:	18fb      	adds	r3, r7, r3
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	801a      	strh	r2, [r3, #0]
 800f356:	e051      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
 800f358:	2286      	movs	r2, #134	; 0x86
 800f35a:	0052      	lsls	r2, r2, #1
 800f35c:	18bb      	adds	r3, r7, r2
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	095b      	lsrs	r3, r3, #5
 800f362:	21dc      	movs	r1, #220	; 0xdc
 800f364:	1878      	adds	r0, r7, r1
 800f366:	6003      	str	r3, [r0, #0]
 800f368:	18bb      	adds	r3, r7, r2
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	221f      	movs	r2, #31
 800f36e:	4013      	ands	r3, r2
 800f370:	d104      	bne.n	800f37c <USB_EPStartXfer+0x1168>
 800f372:	187b      	adds	r3, r7, r1
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3b01      	subs	r3, #1
 800f378:	187a      	adds	r2, r7, r1
 800f37a:	6013      	str	r3, [r2, #0]
 800f37c:	23dc      	movs	r3, #220	; 0xdc
 800f37e:	18fb      	adds	r3, r7, r3
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	b29b      	uxth	r3, r3
 800f384:	029b      	lsls	r3, r3, #10
 800f386:	b29b      	uxth	r3, r3
 800f388:	4a1b      	ldr	r2, [pc, #108]	; (800f3f8 <USB_EPStartXfer+0x11e4>)
 800f38a:	4313      	orrs	r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	23bc      	movs	r3, #188	; 0xbc
 800f390:	18fb      	adds	r3, r7, r3
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	801a      	strh	r2, [r3, #0]
 800f396:	e031      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	785b      	ldrb	r3, [r3, #1]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d12d      	bne.n	800f3fc <USB_EPStartXfer+0x11e8>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2250      	movs	r2, #80	; 0x50
 800f3a4:	5a9b      	ldrh	r3, [r3, r2]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	001a      	movs	r2, r3
 800f3aa:	21c8      	movs	r1, #200	; 0xc8
 800f3ac:	187b      	adds	r3, r7, r1
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	189b      	adds	r3, r3, r2
 800f3b2:	187a      	adds	r2, r7, r1
 800f3b4:	6013      	str	r3, [r2, #0]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	00da      	lsls	r2, r3, #3
 800f3bc:	187b      	adds	r3, r7, r1
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	18d3      	adds	r3, r2, r3
 800f3c2:	4a08      	ldr	r2, [pc, #32]	; (800f3e4 <USB_EPStartXfer+0x11d0>)
 800f3c4:	4694      	mov	ip, r2
 800f3c6:	4463      	add	r3, ip
 800f3c8:	21c4      	movs	r1, #196	; 0xc4
 800f3ca:	187a      	adds	r2, r7, r1
 800f3cc:	6013      	str	r3, [r2, #0]
 800f3ce:	2386      	movs	r3, #134	; 0x86
 800f3d0:	005b      	lsls	r3, r3, #1
 800f3d2:	18fb      	adds	r3, r7, r3
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	187b      	adds	r3, r7, r1
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	801a      	strh	r2, [r3, #0]
 800f3de:	e00d      	b.n	800f3fc <USB_EPStartXfer+0x11e8>
      }
      else
      {
        return HAL_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e031      	b.n	800f448 <USB_EPStartXfer+0x1234>
 800f3e4:	00000406 	.word	0x00000406
 800f3e8:	ffff8f8f 	.word	0xffff8f8f
 800f3ec:	ffff80c0 	.word	0xffff80c0
 800f3f0:	00000402 	.word	0x00000402
 800f3f4:	ffff83ff 	.word	0xffff83ff
 800f3f8:	ffff8000 	.word	0xffff8000
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	18d3      	adds	r3, r2, r3
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	208e      	movs	r0, #142	; 0x8e
 800f40c:	183b      	adds	r3, r7, r0
 800f40e:	4910      	ldr	r1, [pc, #64]	; (800f450 <USB_EPStartXfer+0x123c>)
 800f410:	400a      	ands	r2, r1
 800f412:	801a      	strh	r2, [r3, #0]
 800f414:	183b      	adds	r3, r7, r0
 800f416:	183a      	adds	r2, r7, r0
 800f418:	8812      	ldrh	r2, [r2, #0]
 800f41a:	2180      	movs	r1, #128	; 0x80
 800f41c:	0149      	lsls	r1, r1, #5
 800f41e:	404a      	eors	r2, r1
 800f420:	801a      	strh	r2, [r3, #0]
 800f422:	183b      	adds	r3, r7, r0
 800f424:	183a      	adds	r2, r7, r0
 800f426:	8812      	ldrh	r2, [r2, #0]
 800f428:	2180      	movs	r1, #128	; 0x80
 800f42a:	0189      	lsls	r1, r1, #6
 800f42c:	404a      	eors	r2, r1
 800f42e:	801a      	strh	r2, [r3, #0]
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	009b      	lsls	r3, r3, #2
 800f438:	18d3      	adds	r3, r2, r3
 800f43a:	183a      	adds	r2, r7, r0
 800f43c:	8812      	ldrh	r2, [r2, #0]
 800f43e:	4905      	ldr	r1, [pc, #20]	; (800f454 <USB_EPStartXfer+0x1240>)
 800f440:	430a      	orrs	r2, r1
 800f442:	b292      	uxth	r2, r2
 800f444:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	0018      	movs	r0, r3
 800f44a:	46bd      	mov	sp, r7
 800f44c:	b044      	add	sp, #272	; 0x110
 800f44e:	bdb0      	pop	{r4, r5, r7, pc}
 800f450:	ffffbf8f 	.word	0xffffbf8f
 800f454:	ffff8080 	.word	0xffff8080

0800f458 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	785b      	ldrb	r3, [r3, #1]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d01d      	beq.n	800f4a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	18d3      	adds	r3, r2, r3
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	b29a      	uxth	r2, r3
 800f478:	200c      	movs	r0, #12
 800f47a:	183b      	adds	r3, r7, r0
 800f47c:	491b      	ldr	r1, [pc, #108]	; (800f4ec <USB_EPSetStall+0x94>)
 800f47e:	400a      	ands	r2, r1
 800f480:	801a      	strh	r2, [r3, #0]
 800f482:	183b      	adds	r3, r7, r0
 800f484:	183a      	adds	r2, r7, r0
 800f486:	8812      	ldrh	r2, [r2, #0]
 800f488:	2110      	movs	r1, #16
 800f48a:	404a      	eors	r2, r1
 800f48c:	801a      	strh	r2, [r3, #0]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	18d3      	adds	r3, r2, r3
 800f498:	183a      	adds	r2, r7, r0
 800f49a:	8812      	ldrh	r2, [r2, #0]
 800f49c:	4914      	ldr	r1, [pc, #80]	; (800f4f0 <USB_EPSetStall+0x98>)
 800f49e:	430a      	orrs	r2, r1
 800f4a0:	b292      	uxth	r2, r2
 800f4a2:	801a      	strh	r2, [r3, #0]
 800f4a4:	e01d      	b.n	800f4e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	18d3      	adds	r3, r2, r3
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	200e      	movs	r0, #14
 800f4b6:	183b      	adds	r3, r7, r0
 800f4b8:	490e      	ldr	r1, [pc, #56]	; (800f4f4 <USB_EPSetStall+0x9c>)
 800f4ba:	400a      	ands	r2, r1
 800f4bc:	801a      	strh	r2, [r3, #0]
 800f4be:	183b      	adds	r3, r7, r0
 800f4c0:	183a      	adds	r2, r7, r0
 800f4c2:	8812      	ldrh	r2, [r2, #0]
 800f4c4:	2180      	movs	r1, #128	; 0x80
 800f4c6:	0149      	lsls	r1, r1, #5
 800f4c8:	404a      	eors	r2, r1
 800f4ca:	801a      	strh	r2, [r3, #0]
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	18d3      	adds	r3, r2, r3
 800f4d6:	183a      	adds	r2, r7, r0
 800f4d8:	8812      	ldrh	r2, [r2, #0]
 800f4da:	4905      	ldr	r1, [pc, #20]	; (800f4f0 <USB_EPSetStall+0x98>)
 800f4dc:	430a      	orrs	r2, r1
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800f4e2:	2300      	movs	r3, #0
}
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	b004      	add	sp, #16
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	ffff8fbf 	.word	0xffff8fbf
 800f4f0:	ffff8080 	.word	0xffff8080
 800f4f4:	ffffbf8f 	.word	0xffffbf8f

0800f4f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	7b1b      	ldrb	r3, [r3, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d000      	beq.n	800f50c <USB_EPClearStall+0x14>
 800f50a:	e095      	b.n	800f638 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	785b      	ldrb	r3, [r3, #1]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d046      	beq.n	800f5a2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	18d2      	adds	r2, r2, r3
 800f51e:	2110      	movs	r1, #16
 800f520:	187b      	adds	r3, r7, r1
 800f522:	8812      	ldrh	r2, [r2, #0]
 800f524:	801a      	strh	r2, [r3, #0]
 800f526:	187b      	adds	r3, r7, r1
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	2240      	movs	r2, #64	; 0x40
 800f52c:	4013      	ands	r3, r2
 800f52e:	d016      	beq.n	800f55e <USB_EPClearStall+0x66>
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	18d3      	adds	r3, r2, r3
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	200e      	movs	r0, #14
 800f540:	183b      	adds	r3, r7, r0
 800f542:	4940      	ldr	r1, [pc, #256]	; (800f644 <USB_EPClearStall+0x14c>)
 800f544:	400a      	ands	r2, r1
 800f546:	801a      	strh	r2, [r3, #0]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	18d3      	adds	r3, r2, r3
 800f552:	183a      	adds	r2, r7, r0
 800f554:	8812      	ldrh	r2, [r2, #0]
 800f556:	493c      	ldr	r1, [pc, #240]	; (800f648 <USB_EPClearStall+0x150>)
 800f558:	430a      	orrs	r2, r1
 800f55a:	b292      	uxth	r2, r2
 800f55c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	78db      	ldrb	r3, [r3, #3]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d068      	beq.n	800f638 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	18d3      	adds	r3, r2, r3
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	b29a      	uxth	r2, r3
 800f574:	200c      	movs	r0, #12
 800f576:	183b      	adds	r3, r7, r0
 800f578:	4934      	ldr	r1, [pc, #208]	; (800f64c <USB_EPClearStall+0x154>)
 800f57a:	400a      	ands	r2, r1
 800f57c:	801a      	strh	r2, [r3, #0]
 800f57e:	183b      	adds	r3, r7, r0
 800f580:	183a      	adds	r2, r7, r0
 800f582:	8812      	ldrh	r2, [r2, #0]
 800f584:	2120      	movs	r1, #32
 800f586:	404a      	eors	r2, r1
 800f588:	801a      	strh	r2, [r3, #0]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	18d3      	adds	r3, r2, r3
 800f594:	183a      	adds	r2, r7, r0
 800f596:	8812      	ldrh	r2, [r2, #0]
 800f598:	492d      	ldr	r1, [pc, #180]	; (800f650 <USB_EPClearStall+0x158>)
 800f59a:	430a      	orrs	r2, r1
 800f59c:	b292      	uxth	r2, r2
 800f59e:	801a      	strh	r2, [r3, #0]
 800f5a0:	e04a      	b.n	800f638 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	18d2      	adds	r2, r2, r3
 800f5ac:	2116      	movs	r1, #22
 800f5ae:	187b      	adds	r3, r7, r1
 800f5b0:	8812      	ldrh	r2, [r2, #0]
 800f5b2:	801a      	strh	r2, [r3, #0]
 800f5b4:	187b      	adds	r3, r7, r1
 800f5b6:	881a      	ldrh	r2, [r3, #0]
 800f5b8:	2380      	movs	r3, #128	; 0x80
 800f5ba:	01db      	lsls	r3, r3, #7
 800f5bc:	4013      	ands	r3, r2
 800f5be:	d016      	beq.n	800f5ee <USB_EPClearStall+0xf6>
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	18d3      	adds	r3, r2, r3
 800f5ca:	881b      	ldrh	r3, [r3, #0]
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	2014      	movs	r0, #20
 800f5d0:	183b      	adds	r3, r7, r0
 800f5d2:	491c      	ldr	r1, [pc, #112]	; (800f644 <USB_EPClearStall+0x14c>)
 800f5d4:	400a      	ands	r2, r1
 800f5d6:	801a      	strh	r2, [r3, #0]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	18d3      	adds	r3, r2, r3
 800f5e2:	183a      	adds	r2, r7, r0
 800f5e4:	8812      	ldrh	r2, [r2, #0]
 800f5e6:	491b      	ldr	r1, [pc, #108]	; (800f654 <USB_EPClearStall+0x15c>)
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	b292      	uxth	r2, r2
 800f5ec:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	18d3      	adds	r3, r2, r3
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	2012      	movs	r0, #18
 800f5fe:	183b      	adds	r3, r7, r0
 800f600:	4915      	ldr	r1, [pc, #84]	; (800f658 <USB_EPClearStall+0x160>)
 800f602:	400a      	ands	r2, r1
 800f604:	801a      	strh	r2, [r3, #0]
 800f606:	183b      	adds	r3, r7, r0
 800f608:	183a      	adds	r2, r7, r0
 800f60a:	8812      	ldrh	r2, [r2, #0]
 800f60c:	2180      	movs	r1, #128	; 0x80
 800f60e:	0149      	lsls	r1, r1, #5
 800f610:	404a      	eors	r2, r1
 800f612:	801a      	strh	r2, [r3, #0]
 800f614:	183b      	adds	r3, r7, r0
 800f616:	183a      	adds	r2, r7, r0
 800f618:	8812      	ldrh	r2, [r2, #0]
 800f61a:	2180      	movs	r1, #128	; 0x80
 800f61c:	0189      	lsls	r1, r1, #6
 800f61e:	404a      	eors	r2, r1
 800f620:	801a      	strh	r2, [r3, #0]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	18d3      	adds	r3, r2, r3
 800f62c:	183a      	adds	r2, r7, r0
 800f62e:	8812      	ldrh	r2, [r2, #0]
 800f630:	4907      	ldr	r1, [pc, #28]	; (800f650 <USB_EPClearStall+0x158>)
 800f632:	430a      	orrs	r2, r1
 800f634:	b292      	uxth	r2, r2
 800f636:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	0018      	movs	r0, r3
 800f63c:	46bd      	mov	sp, r7
 800f63e:	b006      	add	sp, #24
 800f640:	bd80      	pop	{r7, pc}
 800f642:	46c0      	nop			; (mov r8, r8)
 800f644:	ffff8f8f 	.word	0xffff8f8f
 800f648:	ffff80c0 	.word	0xffff80c0
 800f64c:	ffff8fbf 	.word	0xffff8fbf
 800f650:	ffff8080 	.word	0xffff8080
 800f654:	ffffc080 	.word	0xffffc080
 800f658:	ffffbf8f 	.word	0xffffbf8f

0800f65c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	000a      	movs	r2, r1
 800f666:	1cfb      	adds	r3, r7, #3
 800f668:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800f66a:	1cfb      	adds	r3, r7, #3
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d103      	bne.n	800f67a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	224c      	movs	r2, #76	; 0x4c
 800f676:	2180      	movs	r1, #128	; 0x80
 800f678:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	0018      	movs	r0, r3
 800f67e:	46bd      	mov	sp, r7
 800f680:	b002      	add	sp, #8
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b08c      	sub	sp, #48	; 0x30
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	0019      	movs	r1, r3
 800f690:	1dbb      	adds	r3, r7, #6
 800f692:	801a      	strh	r2, [r3, #0]
 800f694:	1d3b      	adds	r3, r7, #4
 800f696:	1c0a      	adds	r2, r1, #0
 800f698:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f69a:	1d3b      	adds	r3, r7, #4
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	085b      	lsrs	r3, r3, #1
 800f6a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f6ac:	1dbb      	adds	r3, r7, #6
 800f6ae:	881a      	ldrh	r2, [r3, #0]
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	18d3      	adds	r3, r2, r3
 800f6b4:	2280      	movs	r2, #128	; 0x80
 800f6b6:	00d2      	lsls	r2, r2, #3
 800f6b8:	4694      	mov	ip, r2
 800f6ba:	4463      	add	r3, ip
 800f6bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6c2:	e01b      	b.n	800f6fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	021b      	lsls	r3, r3, #8
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	001a      	movs	r2, r3
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	3302      	adds	r3, #2
 800f6ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d1e0      	bne.n	800f6c4 <USB_WritePMA+0x40>
  }
}
 800f702:	46c0      	nop			; (mov r8, r8)
 800f704:	46c0      	nop			; (mov r8, r8)
 800f706:	46bd      	mov	sp, r7
 800f708:	b00c      	add	sp, #48	; 0x30
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08a      	sub	sp, #40	; 0x28
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	0019      	movs	r1, r3
 800f718:	1dbb      	adds	r3, r7, #6
 800f71a:	801a      	strh	r2, [r3, #0]
 800f71c:	1d3b      	adds	r3, r7, #4
 800f71e:	1c0a      	adds	r2, r1, #0
 800f720:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f722:	1d3b      	adds	r3, r7, #4
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	085b      	lsrs	r3, r3, #1
 800f728:	b29b      	uxth	r3, r3
 800f72a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f734:	1dbb      	adds	r3, r7, #6
 800f736:	881a      	ldrh	r2, [r3, #0]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	18d3      	adds	r3, r2, r3
 800f73c:	2280      	movs	r2, #128	; 0x80
 800f73e:	00d2      	lsls	r2, r2, #3
 800f740:	4694      	mov	ip, r2
 800f742:	4463      	add	r3, ip
 800f744:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	627b      	str	r3, [r7, #36]	; 0x24
 800f74a:	e018      	b.n	800f77e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f74c:	6a3b      	ldr	r3, [r7, #32]
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	b29b      	uxth	r3, r3
 800f752:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f754:	6a3b      	ldr	r3, [r7, #32]
 800f756:	3302      	adds	r3, #2
 800f758:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	b2da      	uxtb	r2, r3
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	3301      	adds	r3, #1
 800f766:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	0a1b      	lsrs	r3, r3, #8
 800f76c:	b2da      	uxtb	r2, r3
 800f76e:	69fb      	ldr	r3, [r7, #28]
 800f770:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	3301      	adds	r3, #1
 800f776:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77a:	3b01      	subs	r3, #1
 800f77c:	627b      	str	r3, [r7, #36]	; 0x24
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1e3      	bne.n	800f74c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800f784:	1d3b      	adds	r3, r7, #4
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	2201      	movs	r2, #1
 800f78a:	4013      	ands	r3, r2
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d007      	beq.n	800f7a2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800f792:	6a3b      	ldr	r3, [r7, #32]
 800f794:	881b      	ldrh	r3, [r3, #0]
 800f796:	b29b      	uxth	r3, r3
 800f798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	b2da      	uxtb	r2, r3
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	701a      	strb	r2, [r3, #0]
  }
}
 800f7a2:	46c0      	nop			; (mov r8, r8)
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	b00a      	add	sp, #40	; 0x28
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b082      	sub	sp, #8
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	0018      	movs	r0, r3
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	b002      	add	sp, #8
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f7bc:	b590      	push	{r4, r7, lr}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	000a      	movs	r2, r1
 800f7c6:	1cfb      	adds	r3, r7, #3
 800f7c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f7ca:	240f      	movs	r4, #15
 800f7cc:	193b      	adds	r3, r7, r4
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	23ad      	movs	r3, #173	; 0xad
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	58d3      	ldr	r3, [r2, r3]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00e      	beq.n	800f7fc <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	23ad      	movs	r3, #173	; 0xad
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	58d3      	ldr	r3, [r2, r3]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	1cfa      	adds	r2, r7, #3
 800f7ea:	7811      	ldrb	r1, [r2, #0]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	0010      	movs	r0, r2
 800f7f0:	4798      	blx	r3
 800f7f2:	1e03      	subs	r3, r0, #0
 800f7f4:	d102      	bne.n	800f7fc <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800f7f6:	193b      	adds	r3, r7, r4
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800f7fc:	230f      	movs	r3, #15
 800f7fe:	18fb      	adds	r3, r7, r3
 800f800:	781b      	ldrb	r3, [r3, #0]
}
 800f802:	0018      	movs	r0, r3
 800f804:	46bd      	mov	sp, r7
 800f806:	b005      	add	sp, #20
 800f808:	bd90      	pop	{r4, r7, pc}

0800f80a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b082      	sub	sp, #8
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
 800f812:	000a      	movs	r2, r1
 800f814:	1cfb      	adds	r3, r7, #3
 800f816:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	23ad      	movs	r3, #173	; 0xad
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	58d3      	ldr	r3, [r2, r3]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	1cfa      	adds	r2, r7, #3
 800f824:	7811      	ldrb	r1, [r2, #0]
 800f826:	687a      	ldr	r2, [r7, #4]
 800f828:	0010      	movs	r0, r2
 800f82a:	4798      	blx	r3

  return USBD_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	0018      	movs	r0, r3
 800f830:	46bd      	mov	sp, r7
 800f832:	b002      	add	sp, #8
 800f834:	bd80      	pop	{r7, pc}
	...

0800f838 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	22aa      	movs	r2, #170	; 0xaa
 800f846:	0092      	lsls	r2, r2, #2
 800f848:	4694      	mov	ip, r2
 800f84a:	4463      	add	r3, ip
 800f84c:	683a      	ldr	r2, [r7, #0]
 800f84e:	0011      	movs	r1, r2
 800f850:	0018      	movs	r0, r3
 800f852:	f000 ff9a 	bl	801078a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	23a5      	movs	r3, #165	; 0xa5
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	2101      	movs	r1, #1
 800f85e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a23      	ldr	r2, [pc, #140]	; (800f8f0 <USBD_LL_SetupStage+0xb8>)
 800f864:	5a9b      	ldrh	r3, [r3, r2]
 800f866:	0019      	movs	r1, r3
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	23a6      	movs	r3, #166	; 0xa6
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	23aa      	movs	r3, #170	; 0xaa
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	5cd3      	ldrb	r3, [r2, r3]
 800f878:	001a      	movs	r2, r3
 800f87a:	231f      	movs	r3, #31
 800f87c:	4013      	ands	r3, r2
 800f87e:	2b02      	cmp	r3, #2
 800f880:	d019      	beq.n	800f8b6 <USBD_LL_SetupStage+0x7e>
 800f882:	d822      	bhi.n	800f8ca <USBD_LL_SetupStage+0x92>
 800f884:	2b00      	cmp	r3, #0
 800f886:	d002      	beq.n	800f88e <USBD_LL_SetupStage+0x56>
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d00a      	beq.n	800f8a2 <USBD_LL_SetupStage+0x6a>
 800f88c:	e01d      	b.n	800f8ca <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	22aa      	movs	r2, #170	; 0xaa
 800f892:	0092      	lsls	r2, r2, #2
 800f894:	189a      	adds	r2, r3, r2
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	0011      	movs	r1, r2
 800f89a:	0018      	movs	r0, r3
 800f89c:	f000 f99a 	bl	800fbd4 <USBD_StdDevReq>
      break;
 800f8a0:	e020      	b.n	800f8e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	22aa      	movs	r2, #170	; 0xaa
 800f8a6:	0092      	lsls	r2, r2, #2
 800f8a8:	189a      	adds	r2, r3, r2
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	0011      	movs	r1, r2
 800f8ae:	0018      	movs	r0, r3
 800f8b0:	f000 fa02 	bl	800fcb8 <USBD_StdItfReq>
      break;
 800f8b4:	e016      	b.n	800f8e4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	22aa      	movs	r2, #170	; 0xaa
 800f8ba:	0092      	lsls	r2, r2, #2
 800f8bc:	189a      	adds	r2, r3, r2
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	0011      	movs	r1, r2
 800f8c2:	0018      	movs	r0, r3
 800f8c4:	f000 fa4f 	bl	800fd66 <USBD_StdEPReq>
      break;
 800f8c8:	e00c      	b.n	800f8e4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	23aa      	movs	r3, #170	; 0xaa
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	5cd3      	ldrb	r3, [r2, r3]
 800f8d2:	227f      	movs	r2, #127	; 0x7f
 800f8d4:	4393      	bics	r3, r2
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	0011      	movs	r1, r2
 800f8dc:	0018      	movs	r0, r3
 800f8de:	f001 fabd 	bl	8010e5c <USBD_LL_StallEP>
      break;
 800f8e2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	b002      	add	sp, #8
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	46c0      	nop			; (mov r8, r8)
 800f8f0:	000002ae 	.word	0x000002ae

0800f8f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b086      	sub	sp, #24
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	607a      	str	r2, [r7, #4]
 800f8fe:	200b      	movs	r0, #11
 800f900:	183b      	adds	r3, r7, r0
 800f902:	1c0a      	adds	r2, r1, #0
 800f904:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f906:	183b      	adds	r3, r7, r0
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d154      	bne.n	800f9b8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	3355      	adds	r3, #85	; 0x55
 800f912:	33ff      	adds	r3, #255	; 0xff
 800f914:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	23a5      	movs	r3, #165	; 0xa5
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	58d3      	ldr	r3, [r2, r3]
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d139      	bne.n	800f996 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	68da      	ldr	r2, [r3, #12]
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d919      	bls.n	800f962 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	68da      	ldr	r2, [r3, #12]
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	691b      	ldr	r3, [r3, #16]
 800f936:	1ad2      	subs	r2, r2, r3
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	68da      	ldr	r2, [r3, #12]
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f944:	429a      	cmp	r2, r3
 800f946:	d203      	bcs.n	800f950 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	e002      	b.n	800f956 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f954:	b29b      	uxth	r3, r3
 800f956:	6879      	ldr	r1, [r7, #4]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	001a      	movs	r2, r3
 800f95c:	f001 f825 	bl	80109aa <USBD_CtlContinueRx>
 800f960:	e045      	b.n	800f9ee <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f962:	68fa      	ldr	r2, [r7, #12]
 800f964:	23ad      	movs	r3, #173	; 0xad
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	58d3      	ldr	r3, [r2, r3]
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00d      	beq.n	800f98c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	23a7      	movs	r3, #167	; 0xa7
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f978:	2b03      	cmp	r3, #3
 800f97a:	d107      	bne.n	800f98c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	23ad      	movs	r3, #173	; 0xad
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	58d3      	ldr	r3, [r2, r3]
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	0010      	movs	r0, r2
 800f98a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	0018      	movs	r0, r3
 800f990:	f001 f81e 	bl	80109d0 <USBD_CtlSendStatus>
 800f994:	e02b      	b.n	800f9ee <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	23a5      	movs	r3, #165	; 0xa5
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	58d3      	ldr	r3, [r2, r3]
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d125      	bne.n	800f9ee <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f9a2:	68fa      	ldr	r2, [r7, #12]
 800f9a4:	23a5      	movs	r3, #165	; 0xa5
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	0018      	movs	r0, r3
 800f9b2:	f001 fa53 	bl	8010e5c <USBD_LL_StallEP>
 800f9b6:	e01a      	b.n	800f9ee <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	23ad      	movs	r3, #173	; 0xad
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	58d3      	ldr	r3, [r2, r3]
 800f9c0:	699b      	ldr	r3, [r3, #24]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d011      	beq.n	800f9ea <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	23a7      	movs	r3, #167	; 0xa7
 800f9ca:	009b      	lsls	r3, r3, #2
 800f9cc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	d10b      	bne.n	800f9ea <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	23ad      	movs	r3, #173	; 0xad
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	58d3      	ldr	r3, [r2, r3]
 800f9da:	699b      	ldr	r3, [r3, #24]
 800f9dc:	220b      	movs	r2, #11
 800f9de:	18ba      	adds	r2, r7, r2
 800f9e0:	7811      	ldrb	r1, [r2, #0]
 800f9e2:	68fa      	ldr	r2, [r7, #12]
 800f9e4:	0010      	movs	r0, r2
 800f9e6:	4798      	blx	r3
 800f9e8:	e001      	b.n	800f9ee <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f9ea:	2302      	movs	r3, #2
 800f9ec:	e000      	b.n	800f9f0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	0018      	movs	r0, r3
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	b006      	add	sp, #24
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	607a      	str	r2, [r7, #4]
 800fa02:	200b      	movs	r0, #11
 800fa04:	183b      	adds	r3, r7, r0
 800fa06:	1c0a      	adds	r2, r1, #0
 800fa08:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800fa0a:	183b      	adds	r3, r7, r0
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d000      	beq.n	800fa14 <USBD_LL_DataInStage+0x1c>
 800fa12:	e08e      	b.n	800fb32 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	3314      	adds	r3, #20
 800fa18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	23a5      	movs	r3, #165	; 0xa5
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	58d3      	ldr	r3, [r2, r3]
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	d164      	bne.n	800faf0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	68da      	ldr	r2, [r3, #12]
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	691b      	ldr	r3, [r3, #16]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d915      	bls.n	800fa5e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	68da      	ldr	r2, [r3, #12]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	1ad2      	subs	r2, r2, r3
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	0018      	movs	r0, r3
 800fa4c:	f000 ff76 	bl	801093c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	2300      	movs	r3, #0
 800fa54:	2200      	movs	r2, #0
 800fa56:	2100      	movs	r1, #0
 800fa58:	f001 fae9 	bl	801102e <USBD_LL_PrepareReceive>
 800fa5c:	e059      	b.n	800fb12 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	689a      	ldr	r2, [r3, #8]
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	691b      	ldr	r3, [r3, #16]
 800fa66:	0019      	movs	r1, r3
 800fa68:	0010      	movs	r0, r2
 800fa6a:	f7f0 fbef 	bl	800024c <__aeabi_uidivmod>
 800fa6e:	1e0b      	subs	r3, r1, #0
 800fa70:	d11f      	bne.n	800fab2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	689a      	ldr	r2, [r3, #8]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d319      	bcc.n	800fab2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	689a      	ldr	r2, [r3, #8]
 800fa82:	68f9      	ldr	r1, [r7, #12]
 800fa84:	23a6      	movs	r3, #166	; 0xa6
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d211      	bcs.n	800fab2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2200      	movs	r2, #0
 800fa92:	2100      	movs	r1, #0
 800fa94:	0018      	movs	r0, r3
 800fa96:	f000 ff51 	bl	801093c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fa9a:	68fa      	ldr	r2, [r7, #12]
 800fa9c:	23a6      	movs	r3, #166	; 0xa6
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	2100      	movs	r1, #0
 800faa2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	2300      	movs	r3, #0
 800faa8:	2200      	movs	r2, #0
 800faaa:	2100      	movs	r1, #0
 800faac:	f001 fabf 	bl	801102e <USBD_LL_PrepareReceive>
 800fab0:	e02f      	b.n	800fb12 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	23ad      	movs	r3, #173	; 0xad
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	58d3      	ldr	r3, [r2, r3]
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00d      	beq.n	800fadc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	23a7      	movs	r3, #167	; 0xa7
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d107      	bne.n	800fadc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	23ad      	movs	r3, #173	; 0xad
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	58d3      	ldr	r3, [r2, r3]
 800fad4:	68db      	ldr	r3, [r3, #12]
 800fad6:	68fa      	ldr	r2, [r7, #12]
 800fad8:	0010      	movs	r0, r2
 800fada:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2180      	movs	r1, #128	; 0x80
 800fae0:	0018      	movs	r0, r3
 800fae2:	f001 f9bb 	bl	8010e5c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	0018      	movs	r0, r3
 800faea:	f000 ff85 	bl	80109f8 <USBD_CtlReceiveStatus>
 800faee:	e010      	b.n	800fb12 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	23a5      	movs	r3, #165	; 0xa5
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	58d3      	ldr	r3, [r2, r3]
 800faf8:	2b04      	cmp	r3, #4
 800fafa:	d005      	beq.n	800fb08 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	23a5      	movs	r3, #165	; 0xa5
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d104      	bne.n	800fb12 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2180      	movs	r1, #128	; 0x80
 800fb0c:	0018      	movs	r0, r3
 800fb0e:	f001 f9a5 	bl	8010e5c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	23a8      	movs	r3, #168	; 0xa8
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	5cd3      	ldrb	r3, [r2, r3]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d124      	bne.n	800fb68 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	0018      	movs	r0, r3
 800fb22:	f7ff fe42 	bl	800f7aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fb26:	68fa      	ldr	r2, [r7, #12]
 800fb28:	23a8      	movs	r3, #168	; 0xa8
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	54d1      	strb	r1, [r2, r3]
 800fb30:	e01a      	b.n	800fb68 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	23ad      	movs	r3, #173	; 0xad
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	58d3      	ldr	r3, [r2, r3]
 800fb3a:	695b      	ldr	r3, [r3, #20]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d011      	beq.n	800fb64 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	23a7      	movs	r3, #167	; 0xa7
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800fb48:	2b03      	cmp	r3, #3
 800fb4a:	d10b      	bne.n	800fb64 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	23ad      	movs	r3, #173	; 0xad
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	58d3      	ldr	r3, [r2, r3]
 800fb54:	695b      	ldr	r3, [r3, #20]
 800fb56:	220b      	movs	r2, #11
 800fb58:	18ba      	adds	r2, r7, r2
 800fb5a:	7811      	ldrb	r1, [r2, #0]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	0010      	movs	r0, r2
 800fb60:	4798      	blx	r3
 800fb62:	e001      	b.n	800fb68 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800fb64:	2302      	movs	r3, #2
 800fb66:	e000      	b.n	800fb6a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800fb68:	2300      	movs	r3, #0
}
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	b006      	add	sp, #24
 800fb70:	bd80      	pop	{r7, pc}
	...

0800fb74 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	23a7      	movs	r3, #167	; 0xa7
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	5cd1      	ldrb	r1, [r2, r3]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	4a06      	ldr	r2, [pc, #24]	; (800fba0 <USBD_LL_Suspend+0x2c>)
 800fb88:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	23a7      	movs	r3, #167	; 0xa7
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	2104      	movs	r1, #4
 800fb92:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	0018      	movs	r0, r3
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	b002      	add	sp, #8
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	46c0      	nop			; (mov r8, r8)
 800fba0:	0000029d 	.word	0x0000029d

0800fba4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	23a7      	movs	r3, #167	; 0xa7
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	5cd3      	ldrb	r3, [r2, r3]
 800fbb4:	2b04      	cmp	r3, #4
 800fbb6:	d106      	bne.n	800fbc6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a05      	ldr	r2, [pc, #20]	; (800fbd0 <USBD_LL_Resume+0x2c>)
 800fbbc:	5c99      	ldrb	r1, [r3, r2]
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	23a7      	movs	r3, #167	; 0xa7
 800fbc2:	009b      	lsls	r3, r3, #2
 800fbc4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	0018      	movs	r0, r3
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	b002      	add	sp, #8
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	0000029d 	.word	0x0000029d

0800fbd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fbde:	230f      	movs	r3, #15
 800fbe0:	18fb      	adds	r3, r7, r3
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	001a      	movs	r2, r3
 800fbec:	2360      	movs	r3, #96	; 0x60
 800fbee:	4013      	ands	r3, r2
 800fbf0:	2b40      	cmp	r3, #64	; 0x40
 800fbf2:	d004      	beq.n	800fbfe <USBD_StdDevReq+0x2a>
 800fbf4:	d84f      	bhi.n	800fc96 <USBD_StdDevReq+0xc2>
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00b      	beq.n	800fc12 <USBD_StdDevReq+0x3e>
 800fbfa:	2b20      	cmp	r3, #32
 800fbfc:	d14b      	bne.n	800fc96 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fbfe:	687a      	ldr	r2, [r7, #4]
 800fc00:	23ad      	movs	r3, #173	; 0xad
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	58d3      	ldr	r3, [r2, r3]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	0010      	movs	r0, r2
 800fc0e:	4798      	blx	r3
      break;
 800fc10:	e048      	b.n	800fca4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	785b      	ldrb	r3, [r3, #1]
 800fc16:	2b09      	cmp	r3, #9
 800fc18:	d835      	bhi.n	800fc86 <USBD_StdDevReq+0xb2>
 800fc1a:	009a      	lsls	r2, r3, #2
 800fc1c:	4b25      	ldr	r3, [pc, #148]	; (800fcb4 <USBD_StdDevReq+0xe0>)
 800fc1e:	18d3      	adds	r3, r2, r3
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fc24:	683a      	ldr	r2, [r7, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	0011      	movs	r1, r2
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	f000 fa52 	bl	80100d4 <USBD_GetDescriptor>
          break;
 800fc30:	e030      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	0011      	movs	r1, r2
 800fc38:	0018      	movs	r0, r3
 800fc3a:	f000 fbfd 	bl	8010438 <USBD_SetAddress>
          break;
 800fc3e:	e029      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	0011      	movs	r1, r2
 800fc46:	0018      	movs	r0, r3
 800fc48:	f000 fc4a 	bl	80104e0 <USBD_SetConfig>
          break;
 800fc4c:	e022      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	0011      	movs	r1, r2
 800fc54:	0018      	movs	r0, r3
 800fc56:	f000 fce7 	bl	8010628 <USBD_GetConfig>
          break;
 800fc5a:	e01b      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fc5c:	683a      	ldr	r2, [r7, #0]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	0011      	movs	r1, r2
 800fc62:	0018      	movs	r0, r3
 800fc64:	f000 fd1b 	bl	801069e <USBD_GetStatus>
          break;
 800fc68:	e014      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	0011      	movs	r1, r2
 800fc70:	0018      	movs	r0, r3
 800fc72:	f000 fd4e 	bl	8010712 <USBD_SetFeature>
          break;
 800fc76:	e00d      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	0011      	movs	r1, r2
 800fc7e:	0018      	movs	r0, r3
 800fc80:	f000 fd5d 	bl	801073e <USBD_ClrFeature>
          break;
 800fc84:	e006      	b.n	800fc94 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800fc86:	683a      	ldr	r2, [r7, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	0011      	movs	r1, r2
 800fc8c:	0018      	movs	r0, r3
 800fc8e:	f000 fdb7 	bl	8010800 <USBD_CtlError>
          break;
 800fc92:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800fc94:	e006      	b.n	800fca4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	0011      	movs	r1, r2
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	f000 fdaf 	bl	8010800 <USBD_CtlError>
      break;
 800fca2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800fca4:	230f      	movs	r3, #15
 800fca6:	18fb      	adds	r3, r7, r3
 800fca8:	781b      	ldrb	r3, [r3, #0]
}
 800fcaa:	0018      	movs	r0, r3
 800fcac:	46bd      	mov	sp, r7
 800fcae:	b004      	add	sp, #16
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	46c0      	nop			; (mov r8, r8)
 800fcb4:	08018050 	.word	0x08018050

0800fcb8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800fcb8:	b5b0      	push	{r4, r5, r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcc2:	230f      	movs	r3, #15
 800fcc4:	18fb      	adds	r3, r7, r3
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	001a      	movs	r2, r3
 800fcd0:	2360      	movs	r3, #96	; 0x60
 800fcd2:	4013      	ands	r3, r2
 800fcd4:	2b40      	cmp	r3, #64	; 0x40
 800fcd6:	d004      	beq.n	800fce2 <USBD_StdItfReq+0x2a>
 800fcd8:	d839      	bhi.n	800fd4e <USBD_StdItfReq+0x96>
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <USBD_StdItfReq+0x2a>
 800fcde:	2b20      	cmp	r3, #32
 800fce0:	d135      	bne.n	800fd4e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	23a7      	movs	r3, #167	; 0xa7
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	5cd3      	ldrb	r3, [r2, r3]
 800fcea:	3b01      	subs	r3, #1
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d825      	bhi.n	800fd3c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	889b      	ldrh	r3, [r3, #4]
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d819      	bhi.n	800fd2e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	23ad      	movs	r3, #173	; 0xad
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	58d3      	ldr	r3, [r2, r3]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	250f      	movs	r5, #15
 800fd06:	197c      	adds	r4, r7, r5
 800fd08:	6839      	ldr	r1, [r7, #0]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	0010      	movs	r0, r2
 800fd0e:	4798      	blx	r3
 800fd10:	0003      	movs	r3, r0
 800fd12:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	88db      	ldrh	r3, [r3, #6]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d116      	bne.n	800fd4a <USBD_StdItfReq+0x92>
 800fd1c:	197b      	adds	r3, r7, r5
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d112      	bne.n	800fd4a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	0018      	movs	r0, r3
 800fd28:	f000 fe52 	bl	80109d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fd2c:	e00d      	b.n	800fd4a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800fd2e:	683a      	ldr	r2, [r7, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	0011      	movs	r1, r2
 800fd34:	0018      	movs	r0, r3
 800fd36:	f000 fd63 	bl	8010800 <USBD_CtlError>
          break;
 800fd3a:	e006      	b.n	800fd4a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800fd3c:	683a      	ldr	r2, [r7, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	0011      	movs	r1, r2
 800fd42:	0018      	movs	r0, r3
 800fd44:	f000 fd5c 	bl	8010800 <USBD_CtlError>
          break;
 800fd48:	e000      	b.n	800fd4c <USBD_StdItfReq+0x94>
          break;
 800fd4a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800fd4c:	e006      	b.n	800fd5c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	0011      	movs	r1, r2
 800fd54:	0018      	movs	r0, r3
 800fd56:	f000 fd53 	bl	8010800 <USBD_CtlError>
      break;
 800fd5a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	0018      	movs	r0, r3
 800fd60:	46bd      	mov	sp, r7
 800fd62:	b004      	add	sp, #16
 800fd64:	bdb0      	pop	{r4, r5, r7, pc}

0800fd66 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800fd66:	b5b0      	push	{r4, r5, r7, lr}
 800fd68:	b084      	sub	sp, #16
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
 800fd6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fd70:	230f      	movs	r3, #15
 800fd72:	18fb      	adds	r3, r7, r3
 800fd74:	2200      	movs	r2, #0
 800fd76:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	889a      	ldrh	r2, [r3, #4]
 800fd7c:	230e      	movs	r3, #14
 800fd7e:	18fb      	adds	r3, r7, r3
 800fd80:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	001a      	movs	r2, r3
 800fd88:	2360      	movs	r3, #96	; 0x60
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	2b40      	cmp	r3, #64	; 0x40
 800fd8e:	d006      	beq.n	800fd9e <USBD_StdEPReq+0x38>
 800fd90:	d900      	bls.n	800fd94 <USBD_StdEPReq+0x2e>
 800fd92:	e190      	b.n	80100b6 <USBD_StdEPReq+0x350>
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d00c      	beq.n	800fdb2 <USBD_StdEPReq+0x4c>
 800fd98:	2b20      	cmp	r3, #32
 800fd9a:	d000      	beq.n	800fd9e <USBD_StdEPReq+0x38>
 800fd9c:	e18b      	b.n	80100b6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	23ad      	movs	r3, #173	; 0xad
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	58d3      	ldr	r3, [r2, r3]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	0010      	movs	r0, r2
 800fdae:	4798      	blx	r3
      break;
 800fdb0:	e188      	b.n	80100c4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	001a      	movs	r2, r3
 800fdb8:	2360      	movs	r3, #96	; 0x60
 800fdba:	4013      	ands	r3, r2
 800fdbc:	2b20      	cmp	r3, #32
 800fdbe:	d10f      	bne.n	800fde0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	23ad      	movs	r3, #173	; 0xad
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	58d3      	ldr	r3, [r2, r3]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	250f      	movs	r5, #15
 800fdcc:	197c      	adds	r4, r7, r5
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	0010      	movs	r0, r2
 800fdd4:	4798      	blx	r3
 800fdd6:	0003      	movs	r3, r0
 800fdd8:	7023      	strb	r3, [r4, #0]

        return ret;
 800fdda:	197b      	adds	r3, r7, r5
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	e174      	b.n	80100ca <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	785b      	ldrb	r3, [r3, #1]
 800fde4:	2b03      	cmp	r3, #3
 800fde6:	d007      	beq.n	800fdf8 <USBD_StdEPReq+0x92>
 800fde8:	dd00      	ble.n	800fdec <USBD_StdEPReq+0x86>
 800fdea:	e15c      	b.n	80100a6 <USBD_StdEPReq+0x340>
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d100      	bne.n	800fdf2 <USBD_StdEPReq+0x8c>
 800fdf0:	e092      	b.n	800ff18 <USBD_StdEPReq+0x1b2>
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d04b      	beq.n	800fe8e <USBD_StdEPReq+0x128>
 800fdf6:	e156      	b.n	80100a6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	23a7      	movs	r3, #167	; 0xa7
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	5cd3      	ldrb	r3, [r2, r3]
 800fe00:	2b02      	cmp	r3, #2
 800fe02:	d002      	beq.n	800fe0a <USBD_StdEPReq+0xa4>
 800fe04:	2b03      	cmp	r3, #3
 800fe06:	d01d      	beq.n	800fe44 <USBD_StdEPReq+0xde>
 800fe08:	e039      	b.n	800fe7e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe0a:	220e      	movs	r2, #14
 800fe0c:	18bb      	adds	r3, r7, r2
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d010      	beq.n	800fe36 <USBD_StdEPReq+0xd0>
 800fe14:	18bb      	adds	r3, r7, r2
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b80      	cmp	r3, #128	; 0x80
 800fe1a:	d00c      	beq.n	800fe36 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fe1c:	18bb      	adds	r3, r7, r2
 800fe1e:	781a      	ldrb	r2, [r3, #0]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	0011      	movs	r1, r2
 800fe24:	0018      	movs	r0, r3
 800fe26:	f001 f819 	bl	8010e5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2180      	movs	r1, #128	; 0x80
 800fe2e:	0018      	movs	r0, r3
 800fe30:	f001 f814 	bl	8010e5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fe34:	e02a      	b.n	800fe8c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	0011      	movs	r1, r2
 800fe3c:	0018      	movs	r0, r3
 800fe3e:	f000 fcdf 	bl	8010800 <USBD_CtlError>
              break;
 800fe42:	e023      	b.n	800fe8c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	885b      	ldrh	r3, [r3, #2]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d113      	bne.n	800fe74 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800fe4c:	220e      	movs	r2, #14
 800fe4e:	18bb      	adds	r3, r7, r2
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00e      	beq.n	800fe74 <USBD_StdEPReq+0x10e>
 800fe56:	18bb      	adds	r3, r7, r2
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b80      	cmp	r3, #128	; 0x80
 800fe5c:	d00a      	beq.n	800fe74 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	88db      	ldrh	r3, [r3, #6]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800fe66:	18bb      	adds	r3, r7, r2
 800fe68:	781a      	ldrb	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	0011      	movs	r1, r2
 800fe6e:	0018      	movs	r0, r3
 800fe70:	f000 fff4 	bl	8010e5c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	0018      	movs	r0, r3
 800fe78:	f000 fdaa 	bl	80109d0 <USBD_CtlSendStatus>

              break;
 800fe7c:	e006      	b.n	800fe8c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	0011      	movs	r1, r2
 800fe84:	0018      	movs	r0, r3
 800fe86:	f000 fcbb 	bl	8010800 <USBD_CtlError>
              break;
 800fe8a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800fe8c:	e112      	b.n	80100b4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	23a7      	movs	r3, #167	; 0xa7
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	5cd3      	ldrb	r3, [r2, r3]
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d002      	beq.n	800fea0 <USBD_StdEPReq+0x13a>
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d01d      	beq.n	800feda <USBD_StdEPReq+0x174>
 800fe9e:	e032      	b.n	800ff06 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fea0:	220e      	movs	r2, #14
 800fea2:	18bb      	adds	r3, r7, r2
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d010      	beq.n	800fecc <USBD_StdEPReq+0x166>
 800feaa:	18bb      	adds	r3, r7, r2
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b80      	cmp	r3, #128	; 0x80
 800feb0:	d00c      	beq.n	800fecc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800feb2:	18bb      	adds	r3, r7, r2
 800feb4:	781a      	ldrb	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	0011      	movs	r1, r2
 800feba:	0018      	movs	r0, r3
 800febc:	f000 ffce 	bl	8010e5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2180      	movs	r1, #128	; 0x80
 800fec4:	0018      	movs	r0, r3
 800fec6:	f000 ffc9 	bl	8010e5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800feca:	e024      	b.n	800ff16 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800fecc:	683a      	ldr	r2, [r7, #0]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	0011      	movs	r1, r2
 800fed2:	0018      	movs	r0, r3
 800fed4:	f000 fc94 	bl	8010800 <USBD_CtlError>
              break;
 800fed8:	e01d      	b.n	800ff16 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	885b      	ldrh	r3, [r3, #2]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d118      	bne.n	800ff14 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fee2:	210e      	movs	r1, #14
 800fee4:	187b      	adds	r3, r7, r1
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	227f      	movs	r2, #127	; 0x7f
 800feea:	4013      	ands	r3, r2
 800feec:	d006      	beq.n	800fefc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800feee:	187b      	adds	r3, r7, r1
 800fef0:	781a      	ldrb	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	0011      	movs	r1, r2
 800fef6:	0018      	movs	r0, r3
 800fef8:	f000 ffdb 	bl	8010eb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	0018      	movs	r0, r3
 800ff00:	f000 fd66 	bl	80109d0 <USBD_CtlSendStatus>
              }
              break;
 800ff04:	e006      	b.n	800ff14 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	0011      	movs	r1, r2
 800ff0c:	0018      	movs	r0, r3
 800ff0e:	f000 fc77 	bl	8010800 <USBD_CtlError>
              break;
 800ff12:	e000      	b.n	800ff16 <USBD_StdEPReq+0x1b0>
              break;
 800ff14:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800ff16:	e0cd      	b.n	80100b4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	23a7      	movs	r3, #167	; 0xa7
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	5cd3      	ldrb	r3, [r2, r3]
 800ff20:	2b02      	cmp	r3, #2
 800ff22:	d002      	beq.n	800ff2a <USBD_StdEPReq+0x1c4>
 800ff24:	2b03      	cmp	r3, #3
 800ff26:	d03c      	beq.n	800ffa2 <USBD_StdEPReq+0x23c>
 800ff28:	e0b5      	b.n	8010096 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff2a:	220e      	movs	r2, #14
 800ff2c:	18bb      	adds	r3, r7, r2
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d00a      	beq.n	800ff4a <USBD_StdEPReq+0x1e4>
 800ff34:	18bb      	adds	r3, r7, r2
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2b80      	cmp	r3, #128	; 0x80
 800ff3a:	d006      	beq.n	800ff4a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	0011      	movs	r1, r2
 800ff42:	0018      	movs	r0, r3
 800ff44:	f000 fc5c 	bl	8010800 <USBD_CtlError>
                break;
 800ff48:	e0ac      	b.n	80100a4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff4a:	220e      	movs	r2, #14
 800ff4c:	18bb      	adds	r3, r7, r2
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	b25b      	sxtb	r3, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	da0c      	bge.n	800ff70 <USBD_StdEPReq+0x20a>
 800ff56:	18bb      	adds	r3, r7, r2
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	227f      	movs	r2, #127	; 0x7f
 800ff5c:	401a      	ands	r2, r3
 800ff5e:	0013      	movs	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	189b      	adds	r3, r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	3310      	adds	r3, #16
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	18d3      	adds	r3, r2, r3
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	e00d      	b.n	800ff8c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ff70:	230e      	movs	r3, #14
 800ff72:	18fb      	adds	r3, r7, r3
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	227f      	movs	r2, #127	; 0x7f
 800ff78:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff7a:	0013      	movs	r3, r2
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	189b      	adds	r3, r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	3351      	adds	r3, #81	; 0x51
 800ff84:	33ff      	adds	r3, #255	; 0xff
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	18d3      	adds	r3, r2, r3
 800ff8a:	3304      	adds	r3, #4
 800ff8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	2200      	movs	r2, #0
 800ff92:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ff94:	68b9      	ldr	r1, [r7, #8]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2202      	movs	r2, #2
 800ff9a:	0018      	movs	r0, r3
 800ff9c:	f000 fcae 	bl	80108fc <USBD_CtlSendData>
              break;
 800ffa0:	e080      	b.n	80100a4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffa2:	220e      	movs	r2, #14
 800ffa4:	18bb      	adds	r3, r7, r2
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	b25b      	sxtb	r3, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	da14      	bge.n	800ffd8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffae:	18bb      	adds	r3, r7, r2
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	220f      	movs	r2, #15
 800ffb4:	401a      	ands	r2, r3
 800ffb6:	6879      	ldr	r1, [r7, #4]
 800ffb8:	0013      	movs	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	189b      	adds	r3, r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	18cb      	adds	r3, r1, r3
 800ffc2:	3318      	adds	r3, #24
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d11e      	bne.n	8010008 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	0011      	movs	r1, r2
 800ffd0:	0018      	movs	r0, r3
 800ffd2:	f000 fc15 	bl	8010800 <USBD_CtlError>
                  break;
 800ffd6:	e065      	b.n	80100a4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ffd8:	230e      	movs	r3, #14
 800ffda:	18fb      	adds	r3, r7, r3
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	220f      	movs	r2, #15
 800ffe0:	401a      	ands	r2, r3
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	23ac      	movs	r3, #172	; 0xac
 800ffe6:	0059      	lsls	r1, r3, #1
 800ffe8:	0013      	movs	r3, r2
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	189b      	adds	r3, r3, r2
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	18c3      	adds	r3, r0, r3
 800fff2:	185b      	adds	r3, r3, r1
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d106      	bne.n	8010008 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	0011      	movs	r1, r2
 8010000:	0018      	movs	r0, r3
 8010002:	f000 fbfd 	bl	8010800 <USBD_CtlError>
                  break;
 8010006:	e04d      	b.n	80100a4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010008:	220e      	movs	r2, #14
 801000a:	18bb      	adds	r3, r7, r2
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	b25b      	sxtb	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	da0c      	bge.n	801002e <USBD_StdEPReq+0x2c8>
 8010014:	18bb      	adds	r3, r7, r2
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	227f      	movs	r2, #127	; 0x7f
 801001a:	401a      	ands	r2, r3
 801001c:	0013      	movs	r3, r2
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	189b      	adds	r3, r3, r2
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	3310      	adds	r3, #16
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	18d3      	adds	r3, r2, r3
 801002a:	3304      	adds	r3, #4
 801002c:	e00d      	b.n	801004a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801002e:	230e      	movs	r3, #14
 8010030:	18fb      	adds	r3, r7, r3
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	227f      	movs	r2, #127	; 0x7f
 8010036:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010038:	0013      	movs	r3, r2
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	189b      	adds	r3, r3, r2
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	3351      	adds	r3, #81	; 0x51
 8010042:	33ff      	adds	r3, #255	; 0xff
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	18d3      	adds	r3, r2, r3
 8010048:	3304      	adds	r3, #4
 801004a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801004c:	220e      	movs	r2, #14
 801004e:	18bb      	adds	r3, r7, r2
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d003      	beq.n	801005e <USBD_StdEPReq+0x2f8>
 8010056:	18bb      	adds	r3, r7, r2
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b80      	cmp	r3, #128	; 0x80
 801005c:	d103      	bne.n	8010066 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2200      	movs	r2, #0
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	e010      	b.n	8010088 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8010066:	230e      	movs	r3, #14
 8010068:	18fb      	adds	r3, r7, r3
 801006a:	781a      	ldrb	r2, [r3, #0]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	0011      	movs	r1, r2
 8010070:	0018      	movs	r0, r3
 8010072:	f000 ff49 	bl	8010f08 <USBD_LL_IsStallEP>
 8010076:	1e03      	subs	r3, r0, #0
 8010078:	d003      	beq.n	8010082 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2201      	movs	r2, #1
 801007e:	601a      	str	r2, [r3, #0]
 8010080:	e002      	b.n	8010088 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2200      	movs	r2, #0
 8010086:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8010088:	68b9      	ldr	r1, [r7, #8]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2202      	movs	r2, #2
 801008e:	0018      	movs	r0, r3
 8010090:	f000 fc34 	bl	80108fc <USBD_CtlSendData>
              break;
 8010094:	e006      	b.n	80100a4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8010096:	683a      	ldr	r2, [r7, #0]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	0011      	movs	r1, r2
 801009c:	0018      	movs	r0, r3
 801009e:	f000 fbaf 	bl	8010800 <USBD_CtlError>
              break;
 80100a2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80100a4:	e006      	b.n	80100b4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	0011      	movs	r1, r2
 80100ac:	0018      	movs	r0, r3
 80100ae:	f000 fba7 	bl	8010800 <USBD_CtlError>
          break;
 80100b2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80100b4:	e006      	b.n	80100c4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80100b6:	683a      	ldr	r2, [r7, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	0011      	movs	r1, r2
 80100bc:	0018      	movs	r0, r3
 80100be:	f000 fb9f 	bl	8010800 <USBD_CtlError>
      break;
 80100c2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80100c4:	230f      	movs	r3, #15
 80100c6:	18fb      	adds	r3, r7, r3
 80100c8:	781b      	ldrb	r3, [r3, #0]
}
 80100ca:	0018      	movs	r0, r3
 80100cc:	46bd      	mov	sp, r7
 80100ce:	b004      	add	sp, #16
 80100d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080100d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100de:	2308      	movs	r3, #8
 80100e0:	18fb      	adds	r3, r7, r3
 80100e2:	2200      	movs	r2, #0
 80100e4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100ea:	230b      	movs	r3, #11
 80100ec:	18fb      	adds	r3, r7, r3
 80100ee:	2200      	movs	r2, #0
 80100f0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	885b      	ldrh	r3, [r3, #2]
 80100f6:	0a1b      	lsrs	r3, r3, #8
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	2b07      	cmp	r3, #7
 80100fc:	d900      	bls.n	8010100 <USBD_GetDescriptor+0x2c>
 80100fe:	e159      	b.n	80103b4 <USBD_GetDescriptor+0x2e0>
 8010100:	009a      	lsls	r2, r3, #2
 8010102:	4bcb      	ldr	r3, [pc, #812]	; (8010430 <USBD_GetDescriptor+0x35c>)
 8010104:	18d3      	adds	r3, r2, r3
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	23ac      	movs	r3, #172	; 0xac
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	58d3      	ldr	r3, [r2, r3]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	7c12      	ldrb	r2, [r2, #16]
 8010118:	2108      	movs	r1, #8
 801011a:	1879      	adds	r1, r7, r1
 801011c:	0010      	movs	r0, r2
 801011e:	4798      	blx	r3
 8010120:	0003      	movs	r3, r0
 8010122:	60fb      	str	r3, [r7, #12]
      break;
 8010124:	e153      	b.n	80103ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	7c1b      	ldrb	r3, [r3, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10f      	bne.n	801014e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	23ad      	movs	r3, #173	; 0xad
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	58d3      	ldr	r3, [r2, r3]
 8010136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010138:	2208      	movs	r2, #8
 801013a:	18ba      	adds	r2, r7, r2
 801013c:	0010      	movs	r0, r2
 801013e:	4798      	blx	r3
 8010140:	0003      	movs	r3, r0
 8010142:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	3301      	adds	r3, #1
 8010148:	2202      	movs	r2, #2
 801014a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801014c:	e13f      	b.n	80103ce <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	23ad      	movs	r3, #173	; 0xad
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	58d3      	ldr	r3, [r2, r3]
 8010156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010158:	2208      	movs	r2, #8
 801015a:	18ba      	adds	r2, r7, r2
 801015c:	0010      	movs	r0, r2
 801015e:	4798      	blx	r3
 8010160:	0003      	movs	r3, r0
 8010162:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	3301      	adds	r3, #1
 8010168:	2202      	movs	r2, #2
 801016a:	701a      	strb	r2, [r3, #0]
      break;
 801016c:	e12f      	b.n	80103ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	885b      	ldrh	r3, [r3, #2]
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b05      	cmp	r3, #5
 8010176:	d900      	bls.n	801017a <USBD_GetDescriptor+0xa6>
 8010178:	e0d0      	b.n	801031c <USBD_GetDescriptor+0x248>
 801017a:	009a      	lsls	r2, r3, #2
 801017c:	4bad      	ldr	r3, [pc, #692]	; (8010434 <USBD_GetDescriptor+0x360>)
 801017e:	18d3      	adds	r3, r2, r3
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	23ac      	movs	r3, #172	; 0xac
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	58d3      	ldr	r3, [r2, r3]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d00d      	beq.n	80101ae <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	23ac      	movs	r3, #172	; 0xac
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	58d3      	ldr	r3, [r2, r3]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	7c12      	ldrb	r2, [r2, #16]
 80101a0:	2108      	movs	r1, #8
 80101a2:	1879      	adds	r1, r7, r1
 80101a4:	0010      	movs	r0, r2
 80101a6:	4798      	blx	r3
 80101a8:	0003      	movs	r3, r0
 80101aa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101ac:	e0c3      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	0011      	movs	r1, r2
 80101b4:	0018      	movs	r0, r3
 80101b6:	f000 fb23 	bl	8010800 <USBD_CtlError>
            err++;
 80101ba:	210b      	movs	r1, #11
 80101bc:	187b      	adds	r3, r7, r1
 80101be:	781a      	ldrb	r2, [r3, #0]
 80101c0:	187b      	adds	r3, r7, r1
 80101c2:	3201      	adds	r2, #1
 80101c4:	701a      	strb	r2, [r3, #0]
          break;
 80101c6:	e0b6      	b.n	8010336 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	23ac      	movs	r3, #172	; 0xac
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	58d3      	ldr	r3, [r2, r3]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00d      	beq.n	80101f2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	23ac      	movs	r3, #172	; 0xac
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	58d3      	ldr	r3, [r2, r3]
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	7c12      	ldrb	r2, [r2, #16]
 80101e4:	2108      	movs	r1, #8
 80101e6:	1879      	adds	r1, r7, r1
 80101e8:	0010      	movs	r0, r2
 80101ea:	4798      	blx	r3
 80101ec:	0003      	movs	r3, r0
 80101ee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101f0:	e0a1      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	0011      	movs	r1, r2
 80101f8:	0018      	movs	r0, r3
 80101fa:	f000 fb01 	bl	8010800 <USBD_CtlError>
            err++;
 80101fe:	210b      	movs	r1, #11
 8010200:	187b      	adds	r3, r7, r1
 8010202:	781a      	ldrb	r2, [r3, #0]
 8010204:	187b      	adds	r3, r7, r1
 8010206:	3201      	adds	r2, #1
 8010208:	701a      	strb	r2, [r3, #0]
          break;
 801020a:	e094      	b.n	8010336 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	23ac      	movs	r3, #172	; 0xac
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	58d3      	ldr	r3, [r2, r3]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00d      	beq.n	8010236 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801021a:	687a      	ldr	r2, [r7, #4]
 801021c:	23ac      	movs	r3, #172	; 0xac
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	58d3      	ldr	r3, [r2, r3]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	7c12      	ldrb	r2, [r2, #16]
 8010228:	2108      	movs	r1, #8
 801022a:	1879      	adds	r1, r7, r1
 801022c:	0010      	movs	r0, r2
 801022e:	4798      	blx	r3
 8010230:	0003      	movs	r3, r0
 8010232:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010234:	e07f      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8010236:	683a      	ldr	r2, [r7, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	0011      	movs	r1, r2
 801023c:	0018      	movs	r0, r3
 801023e:	f000 fadf 	bl	8010800 <USBD_CtlError>
            err++;
 8010242:	210b      	movs	r1, #11
 8010244:	187b      	adds	r3, r7, r1
 8010246:	781a      	ldrb	r2, [r3, #0]
 8010248:	187b      	adds	r3, r7, r1
 801024a:	3201      	adds	r2, #1
 801024c:	701a      	strb	r2, [r3, #0]
          break;
 801024e:	e072      	b.n	8010336 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	23ac      	movs	r3, #172	; 0xac
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	58d3      	ldr	r3, [r2, r3]
 8010258:	691b      	ldr	r3, [r3, #16]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00d      	beq.n	801027a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	23ac      	movs	r3, #172	; 0xac
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	58d3      	ldr	r3, [r2, r3]
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	7c12      	ldrb	r2, [r2, #16]
 801026c:	2108      	movs	r1, #8
 801026e:	1879      	adds	r1, r7, r1
 8010270:	0010      	movs	r0, r2
 8010272:	4798      	blx	r3
 8010274:	0003      	movs	r3, r0
 8010276:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010278:	e05d      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	0011      	movs	r1, r2
 8010280:	0018      	movs	r0, r3
 8010282:	f000 fabd 	bl	8010800 <USBD_CtlError>
            err++;
 8010286:	210b      	movs	r1, #11
 8010288:	187b      	adds	r3, r7, r1
 801028a:	781a      	ldrb	r2, [r3, #0]
 801028c:	187b      	adds	r3, r7, r1
 801028e:	3201      	adds	r2, #1
 8010290:	701a      	strb	r2, [r3, #0]
          break;
 8010292:	e050      	b.n	8010336 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	23ac      	movs	r3, #172	; 0xac
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	58d3      	ldr	r3, [r2, r3]
 801029c:	695b      	ldr	r3, [r3, #20]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00d      	beq.n	80102be <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	23ac      	movs	r3, #172	; 0xac
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	58d3      	ldr	r3, [r2, r3]
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	7c12      	ldrb	r2, [r2, #16]
 80102b0:	2108      	movs	r1, #8
 80102b2:	1879      	adds	r1, r7, r1
 80102b4:	0010      	movs	r0, r2
 80102b6:	4798      	blx	r3
 80102b8:	0003      	movs	r3, r0
 80102ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102bc:	e03b      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	0011      	movs	r1, r2
 80102c4:	0018      	movs	r0, r3
 80102c6:	f000 fa9b 	bl	8010800 <USBD_CtlError>
            err++;
 80102ca:	210b      	movs	r1, #11
 80102cc:	187b      	adds	r3, r7, r1
 80102ce:	781a      	ldrb	r2, [r3, #0]
 80102d0:	187b      	adds	r3, r7, r1
 80102d2:	3201      	adds	r2, #1
 80102d4:	701a      	strb	r2, [r3, #0]
          break;
 80102d6:	e02e      	b.n	8010336 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102d8:	687a      	ldr	r2, [r7, #4]
 80102da:	23ac      	movs	r3, #172	; 0xac
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	58d3      	ldr	r3, [r2, r3]
 80102e0:	699b      	ldr	r3, [r3, #24]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00d      	beq.n	8010302 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	23ac      	movs	r3, #172	; 0xac
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	58d3      	ldr	r3, [r2, r3]
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	7c12      	ldrb	r2, [r2, #16]
 80102f4:	2108      	movs	r1, #8
 80102f6:	1879      	adds	r1, r7, r1
 80102f8:	0010      	movs	r0, r2
 80102fa:	4798      	blx	r3
 80102fc:	0003      	movs	r3, r0
 80102fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010300:	e019      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	0011      	movs	r1, r2
 8010308:	0018      	movs	r0, r3
 801030a:	f000 fa79 	bl	8010800 <USBD_CtlError>
            err++;
 801030e:	210b      	movs	r1, #11
 8010310:	187b      	adds	r3, r7, r1
 8010312:	781a      	ldrb	r2, [r3, #0]
 8010314:	187b      	adds	r3, r7, r1
 8010316:	3201      	adds	r2, #1
 8010318:	701a      	strb	r2, [r3, #0]
          break;
 801031a:	e00c      	b.n	8010336 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801031c:	683a      	ldr	r2, [r7, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	0011      	movs	r1, r2
 8010322:	0018      	movs	r0, r3
 8010324:	f000 fa6c 	bl	8010800 <USBD_CtlError>
          err++;
 8010328:	210b      	movs	r1, #11
 801032a:	187b      	adds	r3, r7, r1
 801032c:	781a      	ldrb	r2, [r3, #0]
 801032e:	187b      	adds	r3, r7, r1
 8010330:	3201      	adds	r2, #1
 8010332:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8010334:	e04b      	b.n	80103ce <USBD_GetDescriptor+0x2fa>
 8010336:	e04a      	b.n	80103ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	7c1b      	ldrb	r3, [r3, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10b      	bne.n	8010358 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	23ad      	movs	r3, #173	; 0xad
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	58d3      	ldr	r3, [r2, r3]
 8010348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801034a:	2208      	movs	r2, #8
 801034c:	18ba      	adds	r2, r7, r2
 801034e:	0010      	movs	r0, r2
 8010350:	4798      	blx	r3
 8010352:	0003      	movs	r3, r0
 8010354:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010356:	e03a      	b.n	80103ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	0011      	movs	r1, r2
 801035e:	0018      	movs	r0, r3
 8010360:	f000 fa4e 	bl	8010800 <USBD_CtlError>
        err++;
 8010364:	210b      	movs	r1, #11
 8010366:	187b      	adds	r3, r7, r1
 8010368:	781a      	ldrb	r2, [r3, #0]
 801036a:	187b      	adds	r3, r7, r1
 801036c:	3201      	adds	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
      break;
 8010370:	e02d      	b.n	80103ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	7c1b      	ldrb	r3, [r3, #16]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10f      	bne.n	801039a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801037a:	687a      	ldr	r2, [r7, #4]
 801037c:	23ad      	movs	r3, #173	; 0xad
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	58d3      	ldr	r3, [r2, r3]
 8010382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010384:	2208      	movs	r2, #8
 8010386:	18ba      	adds	r2, r7, r2
 8010388:	0010      	movs	r0, r2
 801038a:	4798      	blx	r3
 801038c:	0003      	movs	r3, r0
 801038e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	3301      	adds	r3, #1
 8010394:	2207      	movs	r2, #7
 8010396:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010398:	e019      	b.n	80103ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801039a:	683a      	ldr	r2, [r7, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	0011      	movs	r1, r2
 80103a0:	0018      	movs	r0, r3
 80103a2:	f000 fa2d 	bl	8010800 <USBD_CtlError>
        err++;
 80103a6:	210b      	movs	r1, #11
 80103a8:	187b      	adds	r3, r7, r1
 80103aa:	781a      	ldrb	r2, [r3, #0]
 80103ac:	187b      	adds	r3, r7, r1
 80103ae:	3201      	adds	r2, #1
 80103b0:	701a      	strb	r2, [r3, #0]
      break;
 80103b2:	e00c      	b.n	80103ce <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	0011      	movs	r1, r2
 80103ba:	0018      	movs	r0, r3
 80103bc:	f000 fa20 	bl	8010800 <USBD_CtlError>
      err++;
 80103c0:	210b      	movs	r1, #11
 80103c2:	187b      	adds	r3, r7, r1
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	187b      	adds	r3, r7, r1
 80103c8:	3201      	adds	r2, #1
 80103ca:	701a      	strb	r2, [r3, #0]
      break;
 80103cc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80103ce:	230b      	movs	r3, #11
 80103d0:	18fb      	adds	r3, r7, r3
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d127      	bne.n	8010428 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80103d8:	2108      	movs	r1, #8
 80103da:	187b      	adds	r3, r7, r1
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d019      	beq.n	8010416 <USBD_GetDescriptor+0x342>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	88db      	ldrh	r3, [r3, #6]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d015      	beq.n	8010416 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	88da      	ldrh	r2, [r3, #6]
 80103ee:	187b      	adds	r3, r7, r1
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	1c18      	adds	r0, r3, #0
 80103f4:	1c11      	adds	r1, r2, #0
 80103f6:	b28a      	uxth	r2, r1
 80103f8:	b283      	uxth	r3, r0
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d900      	bls.n	8010400 <USBD_GetDescriptor+0x32c>
 80103fe:	1c01      	adds	r1, r0, #0
 8010400:	b28a      	uxth	r2, r1
 8010402:	2108      	movs	r1, #8
 8010404:	187b      	adds	r3, r7, r1
 8010406:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010408:	187b      	adds	r3, r7, r1
 801040a:	881a      	ldrh	r2, [r3, #0]
 801040c:	68f9      	ldr	r1, [r7, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	0018      	movs	r0, r3
 8010412:	f000 fa73 	bl	80108fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	88db      	ldrh	r3, [r3, #6]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d105      	bne.n	801042a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	0018      	movs	r0, r3
 8010422:	f000 fad5 	bl	80109d0 <USBD_CtlSendStatus>
 8010426:	e000      	b.n	801042a <USBD_GetDescriptor+0x356>
    return;
 8010428:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 801042a:	46bd      	mov	sp, r7
 801042c:	b004      	add	sp, #16
 801042e:	bd80      	pop	{r7, pc}
 8010430:	08018078 	.word	0x08018078
 8010434:	08018098 	.word	0x08018098

08010438 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	889b      	ldrh	r3, [r3, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d13d      	bne.n	80104c6 <USBD_SetAddress+0x8e>
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	88db      	ldrh	r3, [r3, #6]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d139      	bne.n	80104c6 <USBD_SetAddress+0x8e>
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	885b      	ldrh	r3, [r3, #2]
 8010456:	2b7f      	cmp	r3, #127	; 0x7f
 8010458:	d835      	bhi.n	80104c6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	885b      	ldrh	r3, [r3, #2]
 801045e:	b2da      	uxtb	r2, r3
 8010460:	230f      	movs	r3, #15
 8010462:	18fb      	adds	r3, r7, r3
 8010464:	217f      	movs	r1, #127	; 0x7f
 8010466:	400a      	ands	r2, r1
 8010468:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	23a7      	movs	r3, #167	; 0xa7
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	5cd3      	ldrb	r3, [r2, r3]
 8010472:	2b03      	cmp	r3, #3
 8010474:	d106      	bne.n	8010484 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	0011      	movs	r1, r2
 801047c:	0018      	movs	r0, r3
 801047e:	f000 f9bf 	bl	8010800 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010482:	e027      	b.n	80104d4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	240f      	movs	r4, #15
 8010488:	193a      	adds	r2, r7, r4
 801048a:	4914      	ldr	r1, [pc, #80]	; (80104dc <USBD_SetAddress+0xa4>)
 801048c:	7812      	ldrb	r2, [r2, #0]
 801048e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010490:	193b      	adds	r3, r7, r4
 8010492:	781a      	ldrb	r2, [r3, #0]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	0011      	movs	r1, r2
 8010498:	0018      	movs	r0, r3
 801049a:	f000 fd66 	bl	8010f6a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	0018      	movs	r0, r3
 80104a2:	f000 fa95 	bl	80109d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80104a6:	193b      	adds	r3, r7, r4
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d005      	beq.n	80104ba <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	23a7      	movs	r3, #167	; 0xa7
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	2102      	movs	r1, #2
 80104b6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104b8:	e00c      	b.n	80104d4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	23a7      	movs	r3, #167	; 0xa7
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	2101      	movs	r1, #1
 80104c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104c4:	e006      	b.n	80104d4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	0011      	movs	r1, r2
 80104cc:	0018      	movs	r0, r3
 80104ce:	f000 f997 	bl	8010800 <USBD_CtlError>
  }
}
 80104d2:	46c0      	nop			; (mov r8, r8)
 80104d4:	46c0      	nop			; (mov r8, r8)
 80104d6:	46bd      	mov	sp, r7
 80104d8:	b005      	add	sp, #20
 80104da:	bd90      	pop	{r4, r7, pc}
 80104dc:	0000029e 	.word	0x0000029e

080104e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	b2da      	uxtb	r2, r3
 80104f0:	4b4c      	ldr	r3, [pc, #304]	; (8010624 <USBD_SetConfig+0x144>)
 80104f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80104f4:	4b4b      	ldr	r3, [pc, #300]	; (8010624 <USBD_SetConfig+0x144>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d906      	bls.n	801050a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80104fc:	683a      	ldr	r2, [r7, #0]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	0011      	movs	r1, r2
 8010502:	0018      	movs	r0, r3
 8010504:	f000 f97c 	bl	8010800 <USBD_CtlError>
 8010508:	e088      	b.n	801061c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	23a7      	movs	r3, #167	; 0xa7
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	5cd3      	ldrb	r3, [r2, r3]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d002      	beq.n	801051c <USBD_SetConfig+0x3c>
 8010516:	2b03      	cmp	r3, #3
 8010518:	d029      	beq.n	801056e <USBD_SetConfig+0x8e>
 801051a:	e071      	b.n	8010600 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801051c:	4b41      	ldr	r3, [pc, #260]	; (8010624 <USBD_SetConfig+0x144>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d01f      	beq.n	8010564 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8010524:	4b3f      	ldr	r3, [pc, #252]	; (8010624 <USBD_SetConfig+0x144>)
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	001a      	movs	r2, r3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	23a7      	movs	r3, #167	; 0xa7
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	2103      	movs	r1, #3
 8010536:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010538:	4b3a      	ldr	r3, [pc, #232]	; (8010624 <USBD_SetConfig+0x144>)
 801053a:	781a      	ldrb	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	0011      	movs	r1, r2
 8010540:	0018      	movs	r0, r3
 8010542:	f7ff f93b 	bl	800f7bc <USBD_SetClassConfig>
 8010546:	0003      	movs	r3, r0
 8010548:	2b02      	cmp	r3, #2
 801054a:	d106      	bne.n	801055a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	0011      	movs	r1, r2
 8010552:	0018      	movs	r0, r3
 8010554:	f000 f954 	bl	8010800 <USBD_CtlError>
            return;
 8010558:	e060      	b.n	801061c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	0018      	movs	r0, r3
 801055e:	f000 fa37 	bl	80109d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010562:	e05b      	b.n	801061c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	0018      	movs	r0, r3
 8010568:	f000 fa32 	bl	80109d0 <USBD_CtlSendStatus>
        break;
 801056c:	e056      	b.n	801061c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801056e:	4b2d      	ldr	r3, [pc, #180]	; (8010624 <USBD_SetConfig+0x144>)
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d115      	bne.n	80105a2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	23a7      	movs	r3, #167	; 0xa7
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	2102      	movs	r1, #2
 801057e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8010580:	4b28      	ldr	r3, [pc, #160]	; (8010624 <USBD_SetConfig+0x144>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	001a      	movs	r2, r3
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801058a:	4b26      	ldr	r3, [pc, #152]	; (8010624 <USBD_SetConfig+0x144>)
 801058c:	781a      	ldrb	r2, [r3, #0]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	0011      	movs	r1, r2
 8010592:	0018      	movs	r0, r3
 8010594:	f7ff f939 	bl	800f80a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	0018      	movs	r0, r3
 801059c:	f000 fa18 	bl	80109d0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80105a0:	e03c      	b.n	801061c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80105a2:	4b20      	ldr	r3, [pc, #128]	; (8010624 <USBD_SetConfig+0x144>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	001a      	movs	r2, r3
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	d022      	beq.n	80105f6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	b2da      	uxtb	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	0011      	movs	r1, r2
 80105ba:	0018      	movs	r0, r3
 80105bc:	f7ff f925 	bl	800f80a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80105c0:	4b18      	ldr	r3, [pc, #96]	; (8010624 <USBD_SetConfig+0x144>)
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	001a      	movs	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80105ca:	4b16      	ldr	r3, [pc, #88]	; (8010624 <USBD_SetConfig+0x144>)
 80105cc:	781a      	ldrb	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	0011      	movs	r1, r2
 80105d2:	0018      	movs	r0, r3
 80105d4:	f7ff f8f2 	bl	800f7bc <USBD_SetClassConfig>
 80105d8:	0003      	movs	r3, r0
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d106      	bne.n	80105ec <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	0011      	movs	r1, r2
 80105e4:	0018      	movs	r0, r3
 80105e6:	f000 f90b 	bl	8010800 <USBD_CtlError>
            return;
 80105ea:	e017      	b.n	801061c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	0018      	movs	r0, r3
 80105f0:	f000 f9ee 	bl	80109d0 <USBD_CtlSendStatus>
        break;
 80105f4:	e012      	b.n	801061c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	0018      	movs	r0, r3
 80105fa:	f000 f9e9 	bl	80109d0 <USBD_CtlSendStatus>
        break;
 80105fe:	e00d      	b.n	801061c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8010600:	683a      	ldr	r2, [r7, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	0011      	movs	r1, r2
 8010606:	0018      	movs	r0, r3
 8010608:	f000 f8fa 	bl	8010800 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801060c:	4b05      	ldr	r3, [pc, #20]	; (8010624 <USBD_SetConfig+0x144>)
 801060e:	781a      	ldrb	r2, [r3, #0]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	0011      	movs	r1, r2
 8010614:	0018      	movs	r0, r3
 8010616:	f7ff f8f8 	bl	800f80a <USBD_ClrClassConfig>
        break;
 801061a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 801061c:	46bd      	mov	sp, r7
 801061e:	b002      	add	sp, #8
 8010620:	bd80      	pop	{r7, pc}
 8010622:	46c0      	nop			; (mov r8, r8)
 8010624:	2000102c 	.word	0x2000102c

08010628 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	88db      	ldrh	r3, [r3, #6]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d006      	beq.n	8010648 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	0011      	movs	r1, r2
 8010640:	0018      	movs	r0, r3
 8010642:	f000 f8dd 	bl	8010800 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010646:	e026      	b.n	8010696 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	23a7      	movs	r3, #167	; 0xa7
 801064c:	009b      	lsls	r3, r3, #2
 801064e:	5cd3      	ldrb	r3, [r2, r3]
 8010650:	2b02      	cmp	r3, #2
 8010652:	dc02      	bgt.n	801065a <USBD_GetConfig+0x32>
 8010654:	2b00      	cmp	r3, #0
 8010656:	dc03      	bgt.n	8010660 <USBD_GetConfig+0x38>
 8010658:	e016      	b.n	8010688 <USBD_GetConfig+0x60>
 801065a:	2b03      	cmp	r3, #3
 801065c:	d00c      	beq.n	8010678 <USBD_GetConfig+0x50>
 801065e:	e013      	b.n	8010688 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	3308      	adds	r3, #8
 801066a:	0019      	movs	r1, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2201      	movs	r2, #1
 8010670:	0018      	movs	r0, r3
 8010672:	f000 f943 	bl	80108fc <USBD_CtlSendData>
        break;
 8010676:	e00e      	b.n	8010696 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	1d19      	adds	r1, r3, #4
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2201      	movs	r2, #1
 8010680:	0018      	movs	r0, r3
 8010682:	f000 f93b 	bl	80108fc <USBD_CtlSendData>
        break;
 8010686:	e006      	b.n	8010696 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8010688:	683a      	ldr	r2, [r7, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	0011      	movs	r1, r2
 801068e:	0018      	movs	r0, r3
 8010690:	f000 f8b6 	bl	8010800 <USBD_CtlError>
        break;
 8010694:	46c0      	nop			; (mov r8, r8)
}
 8010696:	46c0      	nop			; (mov r8, r8)
 8010698:	46bd      	mov	sp, r7
 801069a:	b002      	add	sp, #8
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b082      	sub	sp, #8
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	23a7      	movs	r3, #167	; 0xa7
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	5cd3      	ldrb	r3, [r2, r3]
 80106b0:	3b01      	subs	r3, #1
 80106b2:	2b02      	cmp	r3, #2
 80106b4:	d822      	bhi.n	80106fc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	88db      	ldrh	r3, [r3, #6]
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d006      	beq.n	80106cc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	0011      	movs	r1, r2
 80106c4:	0018      	movs	r0, r3
 80106c6:	f000 f89b 	bl	8010800 <USBD_CtlError>
        break;
 80106ca:	e01e      	b.n	801070a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2201      	movs	r2, #1
 80106d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	23a9      	movs	r3, #169	; 0xa9
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	58d3      	ldr	r3, [r2, r3]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d005      	beq.n	80106ea <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	2202      	movs	r2, #2
 80106e4:	431a      	orrs	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	330c      	adds	r3, #12
 80106ee:	0019      	movs	r1, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2202      	movs	r2, #2
 80106f4:	0018      	movs	r0, r3
 80106f6:	f000 f901 	bl	80108fc <USBD_CtlSendData>
      break;
 80106fa:	e006      	b.n	801070a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	0011      	movs	r1, r2
 8010702:	0018      	movs	r0, r3
 8010704:	f000 f87c 	bl	8010800 <USBD_CtlError>
      break;
 8010708:	46c0      	nop			; (mov r8, r8)
  }
}
 801070a:	46c0      	nop			; (mov r8, r8)
 801070c:	46bd      	mov	sp, r7
 801070e:	b002      	add	sp, #8
 8010710:	bd80      	pop	{r7, pc}

08010712 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d108      	bne.n	8010736 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	23a9      	movs	r3, #169	; 0xa9
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	2101      	movs	r1, #1
 801072c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	0018      	movs	r0, r3
 8010732:	f000 f94d 	bl	80109d0 <USBD_CtlSendStatus>
  }
}
 8010736:	46c0      	nop			; (mov r8, r8)
 8010738:	46bd      	mov	sp, r7
 801073a:	b002      	add	sp, #8
 801073c:	bd80      	pop	{r7, pc}

0801073e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b082      	sub	sp, #8
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	23a7      	movs	r3, #167	; 0xa7
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	5cd3      	ldrb	r3, [r2, r3]
 8010750:	3b01      	subs	r3, #1
 8010752:	2b02      	cmp	r3, #2
 8010754:	d80d      	bhi.n	8010772 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	885b      	ldrh	r3, [r3, #2]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d110      	bne.n	8010780 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	23a9      	movs	r3, #169	; 0xa9
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	2100      	movs	r1, #0
 8010766:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	0018      	movs	r0, r3
 801076c:	f000 f930 	bl	80109d0 <USBD_CtlSendStatus>
      }
      break;
 8010770:	e006      	b.n	8010780 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8010772:	683a      	ldr	r2, [r7, #0]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	0011      	movs	r1, r2
 8010778:	0018      	movs	r0, r3
 801077a:	f000 f841 	bl	8010800 <USBD_CtlError>
      break;
 801077e:	e000      	b.n	8010782 <USBD_ClrFeature+0x44>
      break;
 8010780:	46c0      	nop			; (mov r8, r8)
  }
}
 8010782:	46c0      	nop			; (mov r8, r8)
 8010784:	46bd      	mov	sp, r7
 8010786:	b002      	add	sp, #8
 8010788:	bd80      	pop	{r7, pc}

0801078a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801078a:	b580      	push	{r7, lr}
 801078c:	b082      	sub	sp, #8
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
 8010792:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	781a      	ldrb	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	785a      	ldrb	r2, [r3, #1]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	3302      	adds	r3, #2
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	3303      	adds	r3, #3
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	021b      	lsls	r3, r3, #8
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	18d3      	adds	r3, r2, r3
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	3304      	adds	r3, #4
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	3305      	adds	r3, #5
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	021b      	lsls	r3, r3, #8
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	18d3      	adds	r3, r2, r3
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	3306      	adds	r3, #6
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	b29a      	uxth	r2, r3
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	3307      	adds	r3, #7
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	021b      	lsls	r3, r3, #8
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	18d3      	adds	r3, r2, r3
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	80da      	strh	r2, [r3, #6]

}
 80107f8:	46c0      	nop			; (mov r8, r8)
 80107fa:	46bd      	mov	sp, r7
 80107fc:	b002      	add	sp, #8
 80107fe:	bd80      	pop	{r7, pc}

08010800 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2180      	movs	r1, #128	; 0x80
 801080e:	0018      	movs	r0, r3
 8010810:	f000 fb24 	bl	8010e5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2100      	movs	r1, #0
 8010818:	0018      	movs	r0, r3
 801081a:	f000 fb1f 	bl	8010e5c <USBD_LL_StallEP>
}
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	46bd      	mov	sp, r7
 8010822:	b002      	add	sp, #8
 8010824:	bd80      	pop	{r7, pc}

08010826 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010826:	b590      	push	{r4, r7, lr}
 8010828:	b087      	sub	sp, #28
 801082a:	af00      	add	r7, sp, #0
 801082c:	60f8      	str	r0, [r7, #12]
 801082e:	60b9      	str	r1, [r7, #8]
 8010830:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010832:	2417      	movs	r4, #23
 8010834:	193b      	adds	r3, r7, r4
 8010836:	2200      	movs	r2, #0
 8010838:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d03c      	beq.n	80108ba <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	0018      	movs	r0, r3
 8010844:	f000 f83d 	bl	80108c2 <USBD_GetLen>
 8010848:	0003      	movs	r3, r0
 801084a:	3301      	adds	r3, #1
 801084c:	b29b      	uxth	r3, r3
 801084e:	18db      	adds	r3, r3, r3
 8010850:	b29a      	uxth	r2, r3
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010856:	193b      	adds	r3, r7, r4
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	193a      	adds	r2, r7, r4
 801085c:	1c59      	adds	r1, r3, #1
 801085e:	7011      	strb	r1, [r2, #0]
 8010860:	001a      	movs	r2, r3
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	189b      	adds	r3, r3, r2
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	7812      	ldrb	r2, [r2, #0]
 801086a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801086c:	193b      	adds	r3, r7, r4
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	193a      	adds	r2, r7, r4
 8010872:	1c59      	adds	r1, r3, #1
 8010874:	7011      	strb	r1, [r2, #0]
 8010876:	001a      	movs	r2, r3
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	189b      	adds	r3, r3, r2
 801087c:	2203      	movs	r2, #3
 801087e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8010880:	e017      	b.n	80108b2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	1c5a      	adds	r2, r3, #1
 8010886:	60fa      	str	r2, [r7, #12]
 8010888:	2417      	movs	r4, #23
 801088a:	193a      	adds	r2, r7, r4
 801088c:	7812      	ldrb	r2, [r2, #0]
 801088e:	1939      	adds	r1, r7, r4
 8010890:	1c50      	adds	r0, r2, #1
 8010892:	7008      	strb	r0, [r1, #0]
 8010894:	0011      	movs	r1, r2
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	1852      	adds	r2, r2, r1
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801089e:	193b      	adds	r3, r7, r4
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	193a      	adds	r2, r7, r4
 80108a4:	1c59      	adds	r1, r3, #1
 80108a6:	7011      	strb	r1, [r2, #0]
 80108a8:	001a      	movs	r2, r3
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	189b      	adds	r3, r3, r2
 80108ae:	2200      	movs	r2, #0
 80108b0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d1e3      	bne.n	8010882 <USBD_GetString+0x5c>
    }
  }
}
 80108ba:	46c0      	nop			; (mov r8, r8)
 80108bc:	46bd      	mov	sp, r7
 80108be:	b007      	add	sp, #28
 80108c0:	bd90      	pop	{r4, r7, pc}

080108c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b084      	sub	sp, #16
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80108ca:	230f      	movs	r3, #15
 80108cc:	18fb      	adds	r3, r7, r3
 80108ce:	2200      	movs	r2, #0
 80108d0:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80108d2:	e008      	b.n	80108e6 <USBD_GetLen+0x24>
  {
    len++;
 80108d4:	210f      	movs	r1, #15
 80108d6:	187b      	adds	r3, r7, r1
 80108d8:	781a      	ldrb	r2, [r3, #0]
 80108da:	187b      	adds	r3, r7, r1
 80108dc:	3201      	adds	r2, #1
 80108de:	701a      	strb	r2, [r3, #0]
    buf++;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	3301      	adds	r3, #1
 80108e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d1f2      	bne.n	80108d4 <USBD_GetLen+0x12>
  }

  return len;
 80108ee:	230f      	movs	r3, #15
 80108f0:	18fb      	adds	r3, r7, r3
 80108f2:	781b      	ldrb	r3, [r3, #0]
}
 80108f4:	0018      	movs	r0, r3
 80108f6:	46bd      	mov	sp, r7
 80108f8:	b004      	add	sp, #16
 80108fa:	bd80      	pop	{r7, pc}

080108fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	1dbb      	adds	r3, r7, #6
 8010908:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801090a:	68fa      	ldr	r2, [r7, #12]
 801090c:	23a5      	movs	r3, #165	; 0xa5
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	2102      	movs	r1, #2
 8010912:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8010914:	1dbb      	adds	r3, r7, #6
 8010916:	881a      	ldrh	r2, [r3, #0]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801091c:	1dbb      	adds	r3, r7, #6
 801091e:	881a      	ldrh	r2, [r3, #0]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010924:	1dbb      	adds	r3, r7, #6
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	2100      	movs	r1, #0
 801092e:	f000 fb47 	bl	8010fc0 <USBD_LL_Transmit>

  return USBD_OK;
 8010932:	2300      	movs	r3, #0
}
 8010934:	0018      	movs	r0, r3
 8010936:	46bd      	mov	sp, r7
 8010938:	b004      	add	sp, #16
 801093a:	bd80      	pop	{r7, pc}

0801093c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	1dbb      	adds	r3, r7, #6
 8010948:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801094a:	1dbb      	adds	r3, r7, #6
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	68ba      	ldr	r2, [r7, #8]
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	2100      	movs	r1, #0
 8010954:	f000 fb34 	bl	8010fc0 <USBD_LL_Transmit>

  return USBD_OK;
 8010958:	2300      	movs	r3, #0
}
 801095a:	0018      	movs	r0, r3
 801095c:	46bd      	mov	sp, r7
 801095e:	b004      	add	sp, #16
 8010960:	bd80      	pop	{r7, pc}

08010962 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b084      	sub	sp, #16
 8010966:	af00      	add	r7, sp, #0
 8010968:	60f8      	str	r0, [r7, #12]
 801096a:	60b9      	str	r1, [r7, #8]
 801096c:	1dbb      	adds	r3, r7, #6
 801096e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	23a5      	movs	r3, #165	; 0xa5
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	2103      	movs	r1, #3
 8010978:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801097a:	1dbb      	adds	r3, r7, #6
 801097c:	8819      	ldrh	r1, [r3, #0]
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	23ae      	movs	r3, #174	; 0xae
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8010986:	1dbb      	adds	r3, r7, #6
 8010988:	8819      	ldrh	r1, [r3, #0]
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	23b0      	movs	r3, #176	; 0xb0
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010992:	1dbb      	adds	r3, r7, #6
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	2100      	movs	r1, #0
 801099c:	f000 fb47 	bl	801102e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	0018      	movs	r0, r3
 80109a4:	46bd      	mov	sp, r7
 80109a6:	b004      	add	sp, #16
 80109a8:	bd80      	pop	{r7, pc}

080109aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	1dbb      	adds	r3, r7, #6
 80109b6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80109b8:	1dbb      	adds	r3, r7, #6
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	68ba      	ldr	r2, [r7, #8]
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	2100      	movs	r1, #0
 80109c2:	f000 fb34 	bl	801102e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80109c6:	2300      	movs	r3, #0
}
 80109c8:	0018      	movs	r0, r3
 80109ca:	46bd      	mov	sp, r7
 80109cc:	b004      	add	sp, #16
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	23a5      	movs	r3, #165	; 0xa5
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	2104      	movs	r1, #4
 80109e0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	2300      	movs	r3, #0
 80109e6:	2200      	movs	r2, #0
 80109e8:	2100      	movs	r1, #0
 80109ea:	f000 fae9 	bl	8010fc0 <USBD_LL_Transmit>

  return USBD_OK;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	0018      	movs	r0, r3
 80109f2:	46bd      	mov	sp, r7
 80109f4:	b002      	add	sp, #8
 80109f6:	bd80      	pop	{r7, pc}

080109f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	23a5      	movs	r3, #165	; 0xa5
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	2105      	movs	r1, #5
 8010a08:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2100      	movs	r1, #0
 8010a12:	f000 fb0c 	bl	801102e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010a16:	2300      	movs	r3, #0
}
 8010a18:	0018      	movs	r0, r3
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	b002      	add	sp, #8
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	0002      	movs	r2, r0
 8010a28:	6039      	str	r1, [r7, #0]
 8010a2a:	1dfb      	adds	r3, r7, #7
 8010a2c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2212      	movs	r2, #18
 8010a32:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a34:	4b02      	ldr	r3, [pc, #8]	; (8010a40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a36:	0018      	movs	r0, r3
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	b002      	add	sp, #8
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	46c0      	nop			; (mov r8, r8)
 8010a40:	200000f8 	.word	0x200000f8

08010a44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	0002      	movs	r2, r0
 8010a4c:	6039      	str	r1, [r7, #0]
 8010a4e:	1dfb      	adds	r3, r7, #7
 8010a50:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	2204      	movs	r2, #4
 8010a56:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a58:	4b02      	ldr	r3, [pc, #8]	; (8010a64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a5a:	0018      	movs	r0, r3
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	b002      	add	sp, #8
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	46c0      	nop			; (mov r8, r8)
 8010a64:	2000010c 	.word	0x2000010c

08010a68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	0002      	movs	r2, r0
 8010a70:	6039      	str	r1, [r7, #0]
 8010a72:	1dfb      	adds	r3, r7, #7
 8010a74:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8010a76:	1dfb      	adds	r3, r7, #7
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a7e:	683a      	ldr	r2, [r7, #0]
 8010a80:	4908      	ldr	r1, [pc, #32]	; (8010aa4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8010a82:	4b09      	ldr	r3, [pc, #36]	; (8010aa8 <USBD_FS_ProductStrDescriptor+0x40>)
 8010a84:	0018      	movs	r0, r3
 8010a86:	f7ff fece 	bl	8010826 <USBD_GetString>
 8010a8a:	e005      	b.n	8010a98 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	4905      	ldr	r1, [pc, #20]	; (8010aa4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8010a90:	4b05      	ldr	r3, [pc, #20]	; (8010aa8 <USBD_FS_ProductStrDescriptor+0x40>)
 8010a92:	0018      	movs	r0, r3
 8010a94:	f7ff fec7 	bl	8010826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a98:	4b02      	ldr	r3, [pc, #8]	; (8010aa4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8010a9a:	0018      	movs	r0, r3
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	b002      	add	sp, #8
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	46c0      	nop			; (mov r8, r8)
 8010aa4:	20002fb8 	.word	0x20002fb8
 8010aa8:	08013ca4 	.word	0x08013ca4

08010aac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	0002      	movs	r2, r0
 8010ab4:	6039      	str	r1, [r7, #0]
 8010ab6:	1dfb      	adds	r3, r7, #7
 8010ab8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	4904      	ldr	r1, [pc, #16]	; (8010ad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010abe:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f7ff feb0 	bl	8010826 <USBD_GetString>
  return USBD_StrDesc;
 8010ac6:	4b02      	ldr	r3, [pc, #8]	; (8010ad0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8010ac8:	0018      	movs	r0, r3
 8010aca:	46bd      	mov	sp, r7
 8010acc:	b002      	add	sp, #8
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	20002fb8 	.word	0x20002fb8
 8010ad4:	08013cac 	.word	0x08013cac

08010ad8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	0002      	movs	r2, r0
 8010ae0:	6039      	str	r1, [r7, #0]
 8010ae2:	1dfb      	adds	r3, r7, #7
 8010ae4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	221a      	movs	r2, #26
 8010aea:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010aec:	f000 f84c 	bl	8010b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010af0:	4b02      	ldr	r3, [pc, #8]	; (8010afc <USBD_FS_SerialStrDescriptor+0x24>)
}
 8010af2:	0018      	movs	r0, r3
 8010af4:	46bd      	mov	sp, r7
 8010af6:	b002      	add	sp, #8
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	46c0      	nop			; (mov r8, r8)
 8010afc:	20000110 	.word	0x20000110

08010b00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	0002      	movs	r2, r0
 8010b08:	6039      	str	r1, [r7, #0]
 8010b0a:	1dfb      	adds	r3, r7, #7
 8010b0c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8010b0e:	1dfb      	adds	r3, r7, #7
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d106      	bne.n	8010b24 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b16:	683a      	ldr	r2, [r7, #0]
 8010b18:	4908      	ldr	r1, [pc, #32]	; (8010b3c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8010b1a:	4b09      	ldr	r3, [pc, #36]	; (8010b40 <USBD_FS_ConfigStrDescriptor+0x40>)
 8010b1c:	0018      	movs	r0, r3
 8010b1e:	f7ff fe82 	bl	8010826 <USBD_GetString>
 8010b22:	e005      	b.n	8010b30 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b24:	683a      	ldr	r2, [r7, #0]
 8010b26:	4905      	ldr	r1, [pc, #20]	; (8010b3c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8010b28:	4b05      	ldr	r3, [pc, #20]	; (8010b40 <USBD_FS_ConfigStrDescriptor+0x40>)
 8010b2a:	0018      	movs	r0, r3
 8010b2c:	f7ff fe7b 	bl	8010826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b30:	4b02      	ldr	r3, [pc, #8]	; (8010b3c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8010b32:	0018      	movs	r0, r3
 8010b34:	46bd      	mov	sp, r7
 8010b36:	b002      	add	sp, #8
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	46c0      	nop			; (mov r8, r8)
 8010b3c:	20002fb8 	.word	0x20002fb8
 8010b40:	08013cb8 	.word	0x08013cb8

08010b44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	0002      	movs	r2, r0
 8010b4c:	6039      	str	r1, [r7, #0]
 8010b4e:	1dfb      	adds	r3, r7, #7
 8010b50:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8010b52:	1dfb      	adds	r3, r7, #7
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d106      	bne.n	8010b68 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	4908      	ldr	r1, [pc, #32]	; (8010b80 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8010b5e:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8010b60:	0018      	movs	r0, r3
 8010b62:	f7ff fe60 	bl	8010826 <USBD_GetString>
 8010b66:	e005      	b.n	8010b74 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	4905      	ldr	r1, [pc, #20]	; (8010b80 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8010b6c:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8010b6e:	0018      	movs	r0, r3
 8010b70:	f7ff fe59 	bl	8010826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8010b76:	0018      	movs	r0, r3
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	b002      	add	sp, #8
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	46c0      	nop			; (mov r8, r8)
 8010b80:	20002fb8 	.word	0x20002fb8
 8010b84:	08013cc4 	.word	0x08013cc4

08010b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b8e:	4b10      	ldr	r3, [pc, #64]	; (8010bd0 <Get_SerialNum+0x48>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b94:	4b0f      	ldr	r3, [pc, #60]	; (8010bd4 <Get_SerialNum+0x4c>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b9a:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <Get_SerialNum+0x50>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	18d3      	adds	r3, r2, r3
 8010ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d00b      	beq.n	8010bc6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bae:	490b      	ldr	r1, [pc, #44]	; (8010bdc <Get_SerialNum+0x54>)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2208      	movs	r2, #8
 8010bb4:	0018      	movs	r0, r3
 8010bb6:	f000 f815 	bl	8010be4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bba:	4909      	ldr	r1, [pc, #36]	; (8010be0 <Get_SerialNum+0x58>)
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	2204      	movs	r2, #4
 8010bc0:	0018      	movs	r0, r3
 8010bc2:	f000 f80f 	bl	8010be4 <IntToUnicode>
  }
}
 8010bc6:	46c0      	nop			; (mov r8, r8)
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	b004      	add	sp, #16
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	46c0      	nop			; (mov r8, r8)
 8010bd0:	1ffff7ac 	.word	0x1ffff7ac
 8010bd4:	1ffff7b0 	.word	0x1ffff7b0
 8010bd8:	1ffff7b4 	.word	0x1ffff7b4
 8010bdc:	20000112 	.word	0x20000112
 8010be0:	20000122 	.word	0x20000122

08010be4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	1dfb      	adds	r3, r7, #7
 8010bf0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8010bf2:	2117      	movs	r1, #23
 8010bf4:	187b      	adds	r3, r7, r1
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8010bfa:	187b      	adds	r3, r7, r1
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	e02f      	b.n	8010c62 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	0f1b      	lsrs	r3, r3, #28
 8010c06:	2b09      	cmp	r3, #9
 8010c08:	d80d      	bhi.n	8010c26 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	0f1b      	lsrs	r3, r3, #28
 8010c0e:	b2da      	uxtb	r2, r3
 8010c10:	2317      	movs	r3, #23
 8010c12:	18fb      	adds	r3, r7, r3
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	0019      	movs	r1, r3
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	185b      	adds	r3, r3, r1
 8010c1e:	3230      	adds	r2, #48	; 0x30
 8010c20:	b2d2      	uxtb	r2, r2
 8010c22:	701a      	strb	r2, [r3, #0]
 8010c24:	e00c      	b.n	8010c40 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	0f1b      	lsrs	r3, r3, #28
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	2317      	movs	r3, #23
 8010c2e:	18fb      	adds	r3, r7, r3
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	0019      	movs	r1, r3
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	185b      	adds	r3, r3, r1
 8010c3a:	3237      	adds	r2, #55	; 0x37
 8010c3c:	b2d2      	uxtb	r2, r2
 8010c3e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	011b      	lsls	r3, r3, #4
 8010c44:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c46:	2117      	movs	r1, #23
 8010c48:	187b      	adds	r3, r7, r1
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	005b      	lsls	r3, r3, #1
 8010c4e:	3301      	adds	r3, #1
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	18d3      	adds	r3, r2, r3
 8010c54:	2200      	movs	r2, #0
 8010c56:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c58:	187b      	adds	r3, r7, r1
 8010c5a:	781a      	ldrb	r2, [r3, #0]
 8010c5c:	187b      	adds	r3, r7, r1
 8010c5e:	3201      	adds	r2, #1
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	2317      	movs	r3, #23
 8010c64:	18fa      	adds	r2, r7, r3
 8010c66:	1dfb      	adds	r3, r7, #7
 8010c68:	7812      	ldrb	r2, [r2, #0]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d3c8      	bcc.n	8010c02 <IntToUnicode+0x1e>
  }
}
 8010c70:	46c0      	nop			; (mov r8, r8)
 8010c72:	46c0      	nop			; (mov r8, r8)
 8010c74:	46bd      	mov	sp, r7
 8010c76:	b006      	add	sp, #24
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b082      	sub	sp, #8
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	23bc      	movs	r3, #188	; 0xbc
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	58d2      	ldr	r2, [r2, r3]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	21ac      	movs	r1, #172	; 0xac
 8010c8e:	0089      	lsls	r1, r1, #2
 8010c90:	468c      	mov	ip, r1
 8010c92:	4463      	add	r3, ip
 8010c94:	0019      	movs	r1, r3
 8010c96:	0010      	movs	r0, r2
 8010c98:	f7fe fdce 	bl	800f838 <USBD_LL_SetupStage>
}
 8010c9c:	46c0      	nop			; (mov r8, r8)
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	b002      	add	sp, #8
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca4:	b590      	push	{r4, r7, lr}
 8010ca6:	b083      	sub	sp, #12
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	000a      	movs	r2, r1
 8010cae:	1cfb      	adds	r3, r7, #3
 8010cb0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	23bc      	movs	r3, #188	; 0xbc
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	58d4      	ldr	r4, [r2, r3]
 8010cba:	1cfb      	adds	r3, r7, #3
 8010cbc:	781a      	ldrb	r2, [r3, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	23be      	movs	r3, #190	; 0xbe
 8010cc2:	0059      	lsls	r1, r3, #1
 8010cc4:	0013      	movs	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	189b      	adds	r3, r3, r2
 8010cca:	00db      	lsls	r3, r3, #3
 8010ccc:	18c3      	adds	r3, r0, r3
 8010cce:	185b      	adds	r3, r3, r1
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	1cfb      	adds	r3, r7, #3
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	0019      	movs	r1, r3
 8010cd8:	0020      	movs	r0, r4
 8010cda:	f7fe fe0b 	bl	800f8f4 <USBD_LL_DataOutStage>
}
 8010cde:	46c0      	nop			; (mov r8, r8)
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	b003      	add	sp, #12
 8010ce4:	bd90      	pop	{r4, r7, pc}

08010ce6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b082      	sub	sp, #8
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
 8010cee:	000a      	movs	r2, r1
 8010cf0:	1cfb      	adds	r3, r7, #3
 8010cf2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	23bc      	movs	r3, #188	; 0xbc
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	58d0      	ldr	r0, [r2, r3]
 8010cfc:	1cfb      	adds	r3, r7, #3
 8010cfe:	781a      	ldrb	r2, [r3, #0]
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	0013      	movs	r3, r2
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	189b      	adds	r3, r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	18cb      	adds	r3, r1, r3
 8010d0c:	333c      	adds	r3, #60	; 0x3c
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	1cfb      	adds	r3, r7, #3
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	0019      	movs	r1, r3
 8010d16:	f7fe fe6f 	bl	800f9f8 <USBD_LL_DataInStage>
}
 8010d1a:	46c0      	nop			; (mov r8, r8)
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	b002      	add	sp, #8
 8010d20:	bd80      	pop	{r7, pc}
	...

08010d24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	23bc      	movs	r3, #188	; 0xbc
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	58d3      	ldr	r3, [r2, r3]
 8010d34:	0018      	movs	r0, r3
 8010d36:	f7fe ff1d 	bl	800fb74 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	699b      	ldr	r3, [r3, #24]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d005      	beq.n	8010d4e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d42:	4b05      	ldr	r3, [pc, #20]	; (8010d58 <HAL_PCD_SuspendCallback+0x34>)
 8010d44:	691a      	ldr	r2, [r3, #16]
 8010d46:	4b04      	ldr	r3, [pc, #16]	; (8010d58 <HAL_PCD_SuspendCallback+0x34>)
 8010d48:	2106      	movs	r1, #6
 8010d4a:	430a      	orrs	r2, r1
 8010d4c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8010d4e:	46c0      	nop			; (mov r8, r8)
 8010d50:	46bd      	mov	sp, r7
 8010d52:	b002      	add	sp, #8
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	46c0      	nop			; (mov r8, r8)
 8010d58:	e000ed00 	.word	0xe000ed00

08010d5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d007      	beq.n	8010d7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d6c:	4b09      	ldr	r3, [pc, #36]	; (8010d94 <HAL_PCD_ResumeCallback+0x38>)
 8010d6e:	691a      	ldr	r2, [r3, #16]
 8010d70:	4b08      	ldr	r3, [pc, #32]	; (8010d94 <HAL_PCD_ResumeCallback+0x38>)
 8010d72:	2106      	movs	r1, #6
 8010d74:	438a      	bics	r2, r1
 8010d76:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8010d78:	f000 f9ba 	bl	80110f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	23bc      	movs	r3, #188	; 0xbc
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	58d3      	ldr	r3, [r2, r3]
 8010d84:	0018      	movs	r0, r3
 8010d86:	f7fe ff0d 	bl	800fba4 <USBD_LL_Resume>
}
 8010d8a:	46c0      	nop			; (mov r8, r8)
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	b002      	add	sp, #8
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	46c0      	nop			; (mov r8, r8)
 8010d94:	e000ed00 	.word	0xe000ed00

08010d98 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	000c      	movs	r4, r1
 8010da2:	0010      	movs	r0, r2
 8010da4:	0019      	movs	r1, r3
 8010da6:	1cfb      	adds	r3, r7, #3
 8010da8:	1c22      	adds	r2, r4, #0
 8010daa:	701a      	strb	r2, [r3, #0]
 8010dac:	1cbb      	adds	r3, r7, #2
 8010dae:	1c02      	adds	r2, r0, #0
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	003b      	movs	r3, r7
 8010db4:	1c0a      	adds	r2, r1, #0
 8010db6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010db8:	260f      	movs	r6, #15
 8010dba:	19bb      	adds	r3, r7, r6
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc0:	250e      	movs	r5, #14
 8010dc2:	197b      	adds	r3, r7, r5
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	23b0      	movs	r3, #176	; 0xb0
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	58d0      	ldr	r0, [r2, r3]
 8010dd0:	19bc      	adds	r4, r7, r6
 8010dd2:	1cbb      	adds	r3, r7, #2
 8010dd4:	781d      	ldrb	r5, [r3, #0]
 8010dd6:	003b      	movs	r3, r7
 8010dd8:	881a      	ldrh	r2, [r3, #0]
 8010dda:	1cfb      	adds	r3, r7, #3
 8010ddc:	7819      	ldrb	r1, [r3, #0]
 8010dde:	002b      	movs	r3, r5
 8010de0:	f7f8 ff7e 	bl	8009ce0 <HAL_PCD_EP_Open>
 8010de4:	0003      	movs	r3, r0
 8010de6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010de8:	250e      	movs	r5, #14
 8010dea:	197c      	adds	r4, r7, r5
 8010dec:	19bb      	adds	r3, r7, r6
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	0018      	movs	r0, r3
 8010df2:	f000 f984 	bl	80110fe <USBD_Get_USB_Status>
 8010df6:	0003      	movs	r3, r0
 8010df8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010dfa:	197b      	adds	r3, r7, r5
 8010dfc:	781b      	ldrb	r3, [r3, #0]
}
 8010dfe:	0018      	movs	r0, r3
 8010e00:	46bd      	mov	sp, r7
 8010e02:	b005      	add	sp, #20
 8010e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e08:	b085      	sub	sp, #20
 8010e0a:	af00      	add	r7, sp, #0
 8010e0c:	6078      	str	r0, [r7, #4]
 8010e0e:	000a      	movs	r2, r1
 8010e10:	1cfb      	adds	r3, r7, #3
 8010e12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e14:	210f      	movs	r1, #15
 8010e16:	187b      	adds	r3, r7, r1
 8010e18:	2200      	movs	r2, #0
 8010e1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e1c:	260e      	movs	r6, #14
 8010e1e:	19bb      	adds	r3, r7, r6
 8010e20:	2200      	movs	r2, #0
 8010e22:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	23b0      	movs	r3, #176	; 0xb0
 8010e28:	009b      	lsls	r3, r3, #2
 8010e2a:	58d2      	ldr	r2, [r2, r3]
 8010e2c:	000d      	movs	r5, r1
 8010e2e:	187c      	adds	r4, r7, r1
 8010e30:	1cfb      	adds	r3, r7, #3
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	0019      	movs	r1, r3
 8010e36:	0010      	movs	r0, r2
 8010e38:	f7f8 ffca 	bl	8009dd0 <HAL_PCD_EP_Close>
 8010e3c:	0003      	movs	r3, r0
 8010e3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e40:	19bc      	adds	r4, r7, r6
 8010e42:	197b      	adds	r3, r7, r5
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	0018      	movs	r0, r3
 8010e48:	f000 f959 	bl	80110fe <USBD_Get_USB_Status>
 8010e4c:	0003      	movs	r3, r0
 8010e4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010e50:	19bb      	adds	r3, r7, r6
 8010e52:	781b      	ldrb	r3, [r3, #0]
}
 8010e54:	0018      	movs	r0, r3
 8010e56:	46bd      	mov	sp, r7
 8010e58:	b005      	add	sp, #20
 8010e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	000a      	movs	r2, r1
 8010e66:	1cfb      	adds	r3, r7, #3
 8010e68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e6a:	210f      	movs	r1, #15
 8010e6c:	187b      	adds	r3, r7, r1
 8010e6e:	2200      	movs	r2, #0
 8010e70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e72:	260e      	movs	r6, #14
 8010e74:	19bb      	adds	r3, r7, r6
 8010e76:	2200      	movs	r2, #0
 8010e78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	23b0      	movs	r3, #176	; 0xb0
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	58d2      	ldr	r2, [r2, r3]
 8010e82:	000d      	movs	r5, r1
 8010e84:	187c      	adds	r4, r7, r1
 8010e86:	1cfb      	adds	r3, r7, #3
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	0019      	movs	r1, r3
 8010e8c:	0010      	movs	r0, r2
 8010e8e:	f7f9 f896 	bl	8009fbe <HAL_PCD_EP_SetStall>
 8010e92:	0003      	movs	r3, r0
 8010e94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e96:	19bc      	adds	r4, r7, r6
 8010e98:	197b      	adds	r3, r7, r5
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	0018      	movs	r0, r3
 8010e9e:	f000 f92e 	bl	80110fe <USBD_Get_USB_Status>
 8010ea2:	0003      	movs	r3, r0
 8010ea4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010ea6:	19bb      	adds	r3, r7, r6
 8010ea8:	781b      	ldrb	r3, [r3, #0]
}
 8010eaa:	0018      	movs	r0, r3
 8010eac:	46bd      	mov	sp, r7
 8010eae:	b005      	add	sp, #20
 8010eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010eb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eb4:	b085      	sub	sp, #20
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
 8010eba:	000a      	movs	r2, r1
 8010ebc:	1cfb      	adds	r3, r7, #3
 8010ebe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ec0:	210f      	movs	r1, #15
 8010ec2:	187b      	adds	r3, r7, r1
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ec8:	260e      	movs	r6, #14
 8010eca:	19bb      	adds	r3, r7, r6
 8010ecc:	2200      	movs	r2, #0
 8010ece:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	23b0      	movs	r3, #176	; 0xb0
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	58d2      	ldr	r2, [r2, r3]
 8010ed8:	000d      	movs	r5, r1
 8010eda:	187c      	adds	r4, r7, r1
 8010edc:	1cfb      	adds	r3, r7, #3
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	0019      	movs	r1, r3
 8010ee2:	0010      	movs	r0, r2
 8010ee4:	f7f9 f8c7 	bl	800a076 <HAL_PCD_EP_ClrStall>
 8010ee8:	0003      	movs	r3, r0
 8010eea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010eec:	19bc      	adds	r4, r7, r6
 8010eee:	197b      	adds	r3, r7, r5
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	0018      	movs	r0, r3
 8010ef4:	f000 f903 	bl	80110fe <USBD_Get_USB_Status>
 8010ef8:	0003      	movs	r3, r0
 8010efa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010efc:	19bb      	adds	r3, r7, r6
 8010efe:	781b      	ldrb	r3, [r3, #0]
}
 8010f00:	0018      	movs	r0, r3
 8010f02:	46bd      	mov	sp, r7
 8010f04:	b005      	add	sp, #20
 8010f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	000a      	movs	r2, r1
 8010f12:	1cfb      	adds	r3, r7, #3
 8010f14:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	23b0      	movs	r3, #176	; 0xb0
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	58d3      	ldr	r3, [r2, r3]
 8010f1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f20:	1cfb      	adds	r3, r7, #3
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	b25b      	sxtb	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	da0d      	bge.n	8010f46 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f2a:	1cfb      	adds	r3, r7, #3
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	227f      	movs	r2, #127	; 0x7f
 8010f30:	4013      	ands	r3, r2
 8010f32:	68f9      	ldr	r1, [r7, #12]
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	0013      	movs	r3, r2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	189b      	adds	r3, r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	18cb      	adds	r3, r1, r3
 8010f40:	3302      	adds	r3, #2
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	e00d      	b.n	8010f62 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f46:	1cfb      	adds	r3, r7, #3
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	227f      	movs	r2, #127	; 0x7f
 8010f4c:	401a      	ands	r2, r3
 8010f4e:	68f8      	ldr	r0, [r7, #12]
 8010f50:	23b5      	movs	r3, #181	; 0xb5
 8010f52:	0059      	lsls	r1, r3, #1
 8010f54:	0013      	movs	r3, r2
 8010f56:	009b      	lsls	r3, r3, #2
 8010f58:	189b      	adds	r3, r3, r2
 8010f5a:	00db      	lsls	r3, r3, #3
 8010f5c:	18c3      	adds	r3, r0, r3
 8010f5e:	185b      	adds	r3, r3, r1
 8010f60:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f62:	0018      	movs	r0, r3
 8010f64:	46bd      	mov	sp, r7
 8010f66:	b004      	add	sp, #16
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6c:	b085      	sub	sp, #20
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	000a      	movs	r2, r1
 8010f74:	1cfb      	adds	r3, r7, #3
 8010f76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f78:	210f      	movs	r1, #15
 8010f7a:	187b      	adds	r3, r7, r1
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f80:	260e      	movs	r6, #14
 8010f82:	19bb      	adds	r3, r7, r6
 8010f84:	2200      	movs	r2, #0
 8010f86:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	23b0      	movs	r3, #176	; 0xb0
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	58d2      	ldr	r2, [r2, r3]
 8010f90:	000d      	movs	r5, r1
 8010f92:	187c      	adds	r4, r7, r1
 8010f94:	1cfb      	adds	r3, r7, #3
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	0019      	movs	r1, r3
 8010f9a:	0010      	movs	r0, r2
 8010f9c:	f7f8 fe75 	bl	8009c8a <HAL_PCD_SetAddress>
 8010fa0:	0003      	movs	r3, r0
 8010fa2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fa4:	19bc      	adds	r4, r7, r6
 8010fa6:	197b      	adds	r3, r7, r5
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	0018      	movs	r0, r3
 8010fac:	f000 f8a7 	bl	80110fe <USBD_Get_USB_Status>
 8010fb0:	0003      	movs	r3, r0
 8010fb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8010fb4:	19bb      	adds	r3, r7, r6
 8010fb6:	781b      	ldrb	r3, [r3, #0]
}
 8010fb8:	0018      	movs	r0, r3
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	b005      	add	sp, #20
 8010fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fc2:	b087      	sub	sp, #28
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	0008      	movs	r0, r1
 8010fca:	607a      	str	r2, [r7, #4]
 8010fcc:	0019      	movs	r1, r3
 8010fce:	230b      	movs	r3, #11
 8010fd0:	18fb      	adds	r3, r7, r3
 8010fd2:	1c02      	adds	r2, r0, #0
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	2408      	movs	r4, #8
 8010fd8:	193b      	adds	r3, r7, r4
 8010fda:	1c0a      	adds	r2, r1, #0
 8010fdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fde:	2117      	movs	r1, #23
 8010fe0:	187b      	adds	r3, r7, r1
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fe6:	2516      	movs	r5, #22
 8010fe8:	197b      	adds	r3, r7, r5
 8010fea:	2200      	movs	r2, #0
 8010fec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	23b0      	movs	r3, #176	; 0xb0
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	58d0      	ldr	r0, [r2, r3]
 8010ff6:	193b      	adds	r3, r7, r4
 8010ff8:	881d      	ldrh	r5, [r3, #0]
 8010ffa:	000e      	movs	r6, r1
 8010ffc:	187c      	adds	r4, r7, r1
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	230b      	movs	r3, #11
 8011002:	18fb      	adds	r3, r7, r3
 8011004:	7819      	ldrb	r1, [r3, #0]
 8011006:	002b      	movs	r3, r5
 8011008:	f7f8 ff90 	bl	8009f2c <HAL_PCD_EP_Transmit>
 801100c:	0003      	movs	r3, r0
 801100e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011010:	2516      	movs	r5, #22
 8011012:	197c      	adds	r4, r7, r5
 8011014:	19bb      	adds	r3, r7, r6
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	0018      	movs	r0, r3
 801101a:	f000 f870 	bl	80110fe <USBD_Get_USB_Status>
 801101e:	0003      	movs	r3, r0
 8011020:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011022:	197b      	adds	r3, r7, r5
 8011024:	781b      	ldrb	r3, [r3, #0]
}
 8011026:	0018      	movs	r0, r3
 8011028:	46bd      	mov	sp, r7
 801102a:	b007      	add	sp, #28
 801102c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801102e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801102e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011030:	b087      	sub	sp, #28
 8011032:	af00      	add	r7, sp, #0
 8011034:	60f8      	str	r0, [r7, #12]
 8011036:	0008      	movs	r0, r1
 8011038:	607a      	str	r2, [r7, #4]
 801103a:	0019      	movs	r1, r3
 801103c:	230b      	movs	r3, #11
 801103e:	18fb      	adds	r3, r7, r3
 8011040:	1c02      	adds	r2, r0, #0
 8011042:	701a      	strb	r2, [r3, #0]
 8011044:	2408      	movs	r4, #8
 8011046:	193b      	adds	r3, r7, r4
 8011048:	1c0a      	adds	r2, r1, #0
 801104a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801104c:	2117      	movs	r1, #23
 801104e:	187b      	adds	r3, r7, r1
 8011050:	2200      	movs	r2, #0
 8011052:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011054:	2516      	movs	r5, #22
 8011056:	197b      	adds	r3, r7, r5
 8011058:	2200      	movs	r2, #0
 801105a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	23b0      	movs	r3, #176	; 0xb0
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	58d0      	ldr	r0, [r2, r3]
 8011064:	193b      	adds	r3, r7, r4
 8011066:	881d      	ldrh	r5, [r3, #0]
 8011068:	000e      	movs	r6, r1
 801106a:	187c      	adds	r4, r7, r1
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	230b      	movs	r3, #11
 8011070:	18fb      	adds	r3, r7, r3
 8011072:	7819      	ldrb	r1, [r3, #0]
 8011074:	002b      	movs	r3, r5
 8011076:	f7f8 fefc 	bl	8009e72 <HAL_PCD_EP_Receive>
 801107a:	0003      	movs	r3, r0
 801107c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801107e:	2516      	movs	r5, #22
 8011080:	197c      	adds	r4, r7, r5
 8011082:	19bb      	adds	r3, r7, r6
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	0018      	movs	r0, r3
 8011088:	f000 f839 	bl	80110fe <USBD_Get_USB_Status>
 801108c:	0003      	movs	r3, r0
 801108e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8011090:	197b      	adds	r3, r7, r5
 8011092:	781b      	ldrb	r3, [r3, #0]
}
 8011094:	0018      	movs	r0, r3
 8011096:	46bd      	mov	sp, r7
 8011098:	b007      	add	sp, #28
 801109a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801109c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	000a      	movs	r2, r1
 80110a6:	1cfb      	adds	r3, r7, #3
 80110a8:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	23b0      	movs	r3, #176	; 0xb0
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	58d2      	ldr	r2, [r2, r3]
 80110b2:	1cfb      	adds	r3, r7, #3
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	0019      	movs	r1, r3
 80110b8:	0010      	movs	r0, r2
 80110ba:	f7f8 ff1e 	bl	8009efa <HAL_PCD_EP_GetRxCount>
 80110be:	0003      	movs	r3, r0
}
 80110c0:	0018      	movs	r0, r3
 80110c2:	46bd      	mov	sp, r7
 80110c4:	b002      	add	sp, #8
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80110d0:	4b02      	ldr	r3, [pc, #8]	; (80110dc <USBD_static_malloc+0x14>)
}
 80110d2:	0018      	movs	r0, r3
 80110d4:	46bd      	mov	sp, r7
 80110d6:	b002      	add	sp, #8
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	46c0      	nop			; (mov r8, r8)
 80110dc:	20001030 	.word	0x20001030

080110e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]

}
 80110e8:	46c0      	nop			; (mov r8, r8)
 80110ea:	46bd      	mov	sp, r7
 80110ec:	b002      	add	sp, #8
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80110f4:	f7f6 f936 	bl	8007364 <SystemClock_Config>
}
 80110f8:	46c0      	nop			; (mov r8, r8)
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	0002      	movs	r2, r0
 8011106:	1dfb      	adds	r3, r7, #7
 8011108:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801110a:	230f      	movs	r3, #15
 801110c:	18fb      	adds	r3, r7, r3
 801110e:	2200      	movs	r2, #0
 8011110:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8011112:	1dfb      	adds	r3, r7, #7
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	2b03      	cmp	r3, #3
 8011118:	d017      	beq.n	801114a <USBD_Get_USB_Status+0x4c>
 801111a:	dc1b      	bgt.n	8011154 <USBD_Get_USB_Status+0x56>
 801111c:	2b02      	cmp	r3, #2
 801111e:	d00f      	beq.n	8011140 <USBD_Get_USB_Status+0x42>
 8011120:	dc18      	bgt.n	8011154 <USBD_Get_USB_Status+0x56>
 8011122:	2b00      	cmp	r3, #0
 8011124:	d002      	beq.n	801112c <USBD_Get_USB_Status+0x2e>
 8011126:	2b01      	cmp	r3, #1
 8011128:	d005      	beq.n	8011136 <USBD_Get_USB_Status+0x38>
 801112a:	e013      	b.n	8011154 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801112c:	230f      	movs	r3, #15
 801112e:	18fb      	adds	r3, r7, r3
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
    break;
 8011134:	e013      	b.n	801115e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011136:	230f      	movs	r3, #15
 8011138:	18fb      	adds	r3, r7, r3
 801113a:	2202      	movs	r2, #2
 801113c:	701a      	strb	r2, [r3, #0]
    break;
 801113e:	e00e      	b.n	801115e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011140:	230f      	movs	r3, #15
 8011142:	18fb      	adds	r3, r7, r3
 8011144:	2201      	movs	r2, #1
 8011146:	701a      	strb	r2, [r3, #0]
    break;
 8011148:	e009      	b.n	801115e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801114a:	230f      	movs	r3, #15
 801114c:	18fb      	adds	r3, r7, r3
 801114e:	2202      	movs	r2, #2
 8011150:	701a      	strb	r2, [r3, #0]
    break;
 8011152:	e004      	b.n	801115e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8011154:	230f      	movs	r3, #15
 8011156:	18fb      	adds	r3, r7, r3
 8011158:	2202      	movs	r2, #2
 801115a:	701a      	strb	r2, [r3, #0]
    break;
 801115c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 801115e:	230f      	movs	r3, #15
 8011160:	18fb      	adds	r3, r7, r3
 8011162:	781b      	ldrb	r3, [r3, #0]
}
 8011164:	0018      	movs	r0, r3
 8011166:	46bd      	mov	sp, r7
 8011168:	b004      	add	sp, #16
 801116a:	bd80      	pop	{r7, pc}

0801116c <atoi>:
 801116c:	b510      	push	{r4, lr}
 801116e:	220a      	movs	r2, #10
 8011170:	2100      	movs	r1, #0
 8011172:	f000 fb79 	bl	8011868 <strtol>
 8011176:	bd10      	pop	{r4, pc}

08011178 <atol>:
 8011178:	b510      	push	{r4, lr}
 801117a:	220a      	movs	r2, #10
 801117c:	2100      	movs	r1, #0
 801117e:	f000 fb73 	bl	8011868 <strtol>
 8011182:	bd10      	pop	{r4, pc}

08011184 <__errno>:
 8011184:	4b01      	ldr	r3, [pc, #4]	; (801118c <__errno+0x8>)
 8011186:	6818      	ldr	r0, [r3, #0]
 8011188:	4770      	bx	lr
 801118a:	46c0      	nop			; (mov r8, r8)
 801118c:	2000012c 	.word	0x2000012c

08011190 <__libc_init_array>:
 8011190:	b570      	push	{r4, r5, r6, lr}
 8011192:	2600      	movs	r6, #0
 8011194:	4d0c      	ldr	r5, [pc, #48]	; (80111c8 <__libc_init_array+0x38>)
 8011196:	4c0d      	ldr	r4, [pc, #52]	; (80111cc <__libc_init_array+0x3c>)
 8011198:	1b64      	subs	r4, r4, r5
 801119a:	10a4      	asrs	r4, r4, #2
 801119c:	42a6      	cmp	r6, r4
 801119e:	d109      	bne.n	80111b4 <__libc_init_array+0x24>
 80111a0:	2600      	movs	r6, #0
 80111a2:	f001 fec5 	bl	8012f30 <_init>
 80111a6:	4d0a      	ldr	r5, [pc, #40]	; (80111d0 <__libc_init_array+0x40>)
 80111a8:	4c0a      	ldr	r4, [pc, #40]	; (80111d4 <__libc_init_array+0x44>)
 80111aa:	1b64      	subs	r4, r4, r5
 80111ac:	10a4      	asrs	r4, r4, #2
 80111ae:	42a6      	cmp	r6, r4
 80111b0:	d105      	bne.n	80111be <__libc_init_array+0x2e>
 80111b2:	bd70      	pop	{r4, r5, r6, pc}
 80111b4:	00b3      	lsls	r3, r6, #2
 80111b6:	58eb      	ldr	r3, [r5, r3]
 80111b8:	4798      	blx	r3
 80111ba:	3601      	adds	r6, #1
 80111bc:	e7ee      	b.n	801119c <__libc_init_array+0xc>
 80111be:	00b3      	lsls	r3, r6, #2
 80111c0:	58eb      	ldr	r3, [r5, r3]
 80111c2:	4798      	blx	r3
 80111c4:	3601      	adds	r6, #1
 80111c6:	e7f2      	b.n	80111ae <__libc_init_array+0x1e>
 80111c8:	08018360 	.word	0x08018360
 80111cc:	08018360 	.word	0x08018360
 80111d0:	08018360 	.word	0x08018360
 80111d4:	08018364 	.word	0x08018364

080111d8 <memset>:
 80111d8:	0003      	movs	r3, r0
 80111da:	1882      	adds	r2, r0, r2
 80111dc:	4293      	cmp	r3, r2
 80111de:	d100      	bne.n	80111e2 <memset+0xa>
 80111e0:	4770      	bx	lr
 80111e2:	7019      	strb	r1, [r3, #0]
 80111e4:	3301      	adds	r3, #1
 80111e6:	e7f9      	b.n	80111dc <memset+0x4>

080111e8 <validate_structure>:
 80111e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111ea:	6801      	ldr	r1, [r0, #0]
 80111ec:	0004      	movs	r4, r0
 80111ee:	293b      	cmp	r1, #59	; 0x3b
 80111f0:	d90b      	bls.n	801120a <validate_structure+0x22>
 80111f2:	223c      	movs	r2, #60	; 0x3c
 80111f4:	4668      	mov	r0, sp
 80111f6:	f000 fd8b 	bl	8011d10 <div>
 80111fa:	6863      	ldr	r3, [r4, #4]
 80111fc:	9900      	ldr	r1, [sp, #0]
 80111fe:	9a01      	ldr	r2, [sp, #4]
 8011200:	185b      	adds	r3, r3, r1
 8011202:	6063      	str	r3, [r4, #4]
 8011204:	2a00      	cmp	r2, #0
 8011206:	db6f      	blt.n	80112e8 <validate_structure+0x100>
 8011208:	6022      	str	r2, [r4, #0]
 801120a:	6861      	ldr	r1, [r4, #4]
 801120c:	293b      	cmp	r1, #59	; 0x3b
 801120e:	d90b      	bls.n	8011228 <validate_structure+0x40>
 8011210:	223c      	movs	r2, #60	; 0x3c
 8011212:	4668      	mov	r0, sp
 8011214:	f000 fd7c 	bl	8011d10 <div>
 8011218:	68a3      	ldr	r3, [r4, #8]
 801121a:	9900      	ldr	r1, [sp, #0]
 801121c:	9a01      	ldr	r2, [sp, #4]
 801121e:	185b      	adds	r3, r3, r1
 8011220:	60a3      	str	r3, [r4, #8]
 8011222:	2a00      	cmp	r2, #0
 8011224:	db65      	blt.n	80112f2 <validate_structure+0x10a>
 8011226:	6062      	str	r2, [r4, #4]
 8011228:	68a1      	ldr	r1, [r4, #8]
 801122a:	2917      	cmp	r1, #23
 801122c:	d90b      	bls.n	8011246 <validate_structure+0x5e>
 801122e:	2218      	movs	r2, #24
 8011230:	4668      	mov	r0, sp
 8011232:	f000 fd6d 	bl	8011d10 <div>
 8011236:	68e3      	ldr	r3, [r4, #12]
 8011238:	9900      	ldr	r1, [sp, #0]
 801123a:	9a01      	ldr	r2, [sp, #4]
 801123c:	185b      	adds	r3, r3, r1
 801123e:	60e3      	str	r3, [r4, #12]
 8011240:	2a00      	cmp	r2, #0
 8011242:	db5b      	blt.n	80112fc <validate_structure+0x114>
 8011244:	60a2      	str	r2, [r4, #8]
 8011246:	6921      	ldr	r1, [r4, #16]
 8011248:	290b      	cmp	r1, #11
 801124a:	d90b      	bls.n	8011264 <validate_structure+0x7c>
 801124c:	220c      	movs	r2, #12
 801124e:	4668      	mov	r0, sp
 8011250:	f000 fd5e 	bl	8011d10 <div>
 8011254:	6963      	ldr	r3, [r4, #20]
 8011256:	9900      	ldr	r1, [sp, #0]
 8011258:	9a01      	ldr	r2, [sp, #4]
 801125a:	185b      	adds	r3, r3, r1
 801125c:	6163      	str	r3, [r4, #20]
 801125e:	2a00      	cmp	r2, #0
 8011260:	db51      	blt.n	8011306 <validate_structure+0x11e>
 8011262:	6122      	str	r2, [r4, #16]
 8011264:	6965      	ldr	r5, [r4, #20]
 8011266:	231c      	movs	r3, #28
 8011268:	07aa      	lsls	r2, r5, #30
 801126a:	d10f      	bne.n	801128c <validate_structure+0xa4>
 801126c:	2164      	movs	r1, #100	; 0x64
 801126e:	0028      	movs	r0, r5
 8011270:	f7ef f8d6 	bl	8000420 <__aeabi_idivmod>
 8011274:	231d      	movs	r3, #29
 8011276:	2900      	cmp	r1, #0
 8011278:	d108      	bne.n	801128c <validate_structure+0xa4>
 801127a:	4b3a      	ldr	r3, [pc, #232]	; (8011364 <validate_structure+0x17c>)
 801127c:	3191      	adds	r1, #145	; 0x91
 801127e:	18e8      	adds	r0, r5, r3
 8011280:	31ff      	adds	r1, #255	; 0xff
 8011282:	f7ef f8cd 	bl	8000420 <__aeabi_idivmod>
 8011286:	424b      	negs	r3, r1
 8011288:	414b      	adcs	r3, r1
 801128a:	331c      	adds	r3, #28
 801128c:	68e2      	ldr	r2, [r4, #12]
 801128e:	271d      	movs	r7, #29
 8011290:	2a00      	cmp	r2, #0
 8011292:	dd63      	ble.n	801135c <validate_structure+0x174>
 8011294:	2603      	movs	r6, #3
 8011296:	271c      	movs	r7, #28
 8011298:	6922      	ldr	r2, [r4, #16]
 801129a:	0018      	movs	r0, r3
 801129c:	68e1      	ldr	r1, [r4, #12]
 801129e:	2a01      	cmp	r2, #1
 80112a0:	d002      	beq.n	80112a8 <validate_structure+0xc0>
 80112a2:	4d31      	ldr	r5, [pc, #196]	; (8011368 <validate_structure+0x180>)
 80112a4:	0090      	lsls	r0, r2, #2
 80112a6:	5940      	ldr	r0, [r0, r5]
 80112a8:	4281      	cmp	r1, r0
 80112aa:	dd5a      	ble.n	8011362 <validate_structure+0x17a>
 80112ac:	1a09      	subs	r1, r1, r0
 80112ae:	3201      	adds	r2, #1
 80112b0:	60e1      	str	r1, [r4, #12]
 80112b2:	6122      	str	r2, [r4, #16]
 80112b4:	2a0c      	cmp	r2, #12
 80112b6:	d1ef      	bne.n	8011298 <validate_structure+0xb0>
 80112b8:	2300      	movs	r3, #0
 80112ba:	6965      	ldr	r5, [r4, #20]
 80112bc:	6123      	str	r3, [r4, #16]
 80112be:	1c68      	adds	r0, r5, #1
 80112c0:	003b      	movs	r3, r7
 80112c2:	6160      	str	r0, [r4, #20]
 80112c4:	4230      	tst	r0, r6
 80112c6:	d1e7      	bne.n	8011298 <validate_structure+0xb0>
 80112c8:	2164      	movs	r1, #100	; 0x64
 80112ca:	f7ef f8a9 	bl	8000420 <__aeabi_idivmod>
 80112ce:	231d      	movs	r3, #29
 80112d0:	2900      	cmp	r1, #0
 80112d2:	d1e1      	bne.n	8011298 <validate_structure+0xb0>
 80112d4:	4b25      	ldr	r3, [pc, #148]	; (801136c <validate_structure+0x184>)
 80112d6:	3191      	adds	r1, #145	; 0x91
 80112d8:	18e8      	adds	r0, r5, r3
 80112da:	31ff      	adds	r1, #255	; 0xff
 80112dc:	f7ef f8a0 	bl	8000420 <__aeabi_idivmod>
 80112e0:	424b      	negs	r3, r1
 80112e2:	414b      	adcs	r3, r1
 80112e4:	331c      	adds	r3, #28
 80112e6:	e7d7      	b.n	8011298 <validate_structure+0xb0>
 80112e8:	323c      	adds	r2, #60	; 0x3c
 80112ea:	3b01      	subs	r3, #1
 80112ec:	6022      	str	r2, [r4, #0]
 80112ee:	6063      	str	r3, [r4, #4]
 80112f0:	e78b      	b.n	801120a <validate_structure+0x22>
 80112f2:	323c      	adds	r2, #60	; 0x3c
 80112f4:	3b01      	subs	r3, #1
 80112f6:	6062      	str	r2, [r4, #4]
 80112f8:	60a3      	str	r3, [r4, #8]
 80112fa:	e795      	b.n	8011228 <validate_structure+0x40>
 80112fc:	3218      	adds	r2, #24
 80112fe:	3b01      	subs	r3, #1
 8011300:	60a2      	str	r2, [r4, #8]
 8011302:	60e3      	str	r3, [r4, #12]
 8011304:	e79f      	b.n	8011246 <validate_structure+0x5e>
 8011306:	320c      	adds	r2, #12
 8011308:	3b01      	subs	r3, #1
 801130a:	6122      	str	r2, [r4, #16]
 801130c:	6163      	str	r3, [r4, #20]
 801130e:	e7a9      	b.n	8011264 <validate_structure+0x7c>
 8011310:	6922      	ldr	r2, [r4, #16]
 8011312:	3a01      	subs	r2, #1
 8011314:	6122      	str	r2, [r4, #16]
 8011316:	3201      	adds	r2, #1
 8011318:	d117      	bne.n	801134a <validate_structure+0x162>
 801131a:	230b      	movs	r3, #11
 801131c:	2203      	movs	r2, #3
 801131e:	6965      	ldr	r5, [r4, #20]
 8011320:	6123      	str	r3, [r4, #16]
 8011322:	1e68      	subs	r0, r5, #1
 8011324:	6160      	str	r0, [r4, #20]
 8011326:	3311      	adds	r3, #17
 8011328:	4210      	tst	r0, r2
 801132a:	d10e      	bne.n	801134a <validate_structure+0x162>
 801132c:	2164      	movs	r1, #100	; 0x64
 801132e:	f7ef f877 	bl	8000420 <__aeabi_idivmod>
 8011332:	003b      	movs	r3, r7
 8011334:	2900      	cmp	r1, #0
 8011336:	d108      	bne.n	801134a <validate_structure+0x162>
 8011338:	4b0d      	ldr	r3, [pc, #52]	; (8011370 <validate_structure+0x188>)
 801133a:	3191      	adds	r1, #145	; 0x91
 801133c:	18e8      	adds	r0, r5, r3
 801133e:	31ff      	adds	r1, #255	; 0xff
 8011340:	f7ef f86e 	bl	8000420 <__aeabi_idivmod>
 8011344:	424b      	negs	r3, r1
 8011346:	414b      	adcs	r3, r1
 8011348:	331c      	adds	r3, #28
 801134a:	6921      	ldr	r1, [r4, #16]
 801134c:	001a      	movs	r2, r3
 801134e:	2901      	cmp	r1, #1
 8011350:	d002      	beq.n	8011358 <validate_structure+0x170>
 8011352:	4a05      	ldr	r2, [pc, #20]	; (8011368 <validate_structure+0x180>)
 8011354:	0089      	lsls	r1, r1, #2
 8011356:	588a      	ldr	r2, [r1, r2]
 8011358:	18b6      	adds	r6, r6, r2
 801135a:	60e6      	str	r6, [r4, #12]
 801135c:	68e6      	ldr	r6, [r4, #12]
 801135e:	2e00      	cmp	r6, #0
 8011360:	ddd6      	ble.n	8011310 <validate_structure+0x128>
 8011362:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8011364:	0000076c 	.word	0x0000076c
 8011368:	080180b0 	.word	0x080180b0
 801136c:	0000076d 	.word	0x0000076d
 8011370:	0000076b 	.word	0x0000076b

08011374 <mktime>:
 8011374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011376:	b08b      	sub	sp, #44	; 0x2c
 8011378:	0004      	movs	r4, r0
 801137a:	f000 fd23 	bl	8011dc4 <__gettzinfo>
 801137e:	0007      	movs	r7, r0
 8011380:	0020      	movs	r0, r4
 8011382:	f7ff ff31 	bl	80111e8 <validate_structure>
 8011386:	233c      	movs	r3, #60	; 0x3c
 8011388:	6862      	ldr	r2, [r4, #4]
 801138a:	68a1      	ldr	r1, [r4, #8]
 801138c:	4353      	muls	r3, r2
 801138e:	6822      	ldr	r2, [r4, #0]
 8011390:	189b      	adds	r3, r3, r2
 8011392:	22e1      	movs	r2, #225	; 0xe1
 8011394:	0112      	lsls	r2, r2, #4
 8011396:	434a      	muls	r2, r1
 8011398:	189b      	adds	r3, r3, r2
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	68e2      	ldr	r2, [r4, #12]
 801139e:	17db      	asrs	r3, r3, #31
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	6923      	ldr	r3, [r4, #16]
 80113a4:	1e50      	subs	r0, r2, #1
 80113a6:	4aad      	ldr	r2, [pc, #692]	; (801165c <mktime+0x2e8>)
 80113a8:	0099      	lsls	r1, r3, #2
 80113aa:	588a      	ldr	r2, [r1, r2]
 80113ac:	1882      	adds	r2, r0, r2
 80113ae:	9204      	str	r2, [sp, #16]
 80113b0:	6962      	ldr	r2, [r4, #20]
 80113b2:	9203      	str	r2, [sp, #12]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	dd14      	ble.n	80113e2 <mktime+0x6e>
 80113b8:	0013      	movs	r3, r2
 80113ba:	079b      	lsls	r3, r3, #30
 80113bc:	d111      	bne.n	80113e2 <mktime+0x6e>
 80113be:	2164      	movs	r1, #100	; 0x64
 80113c0:	0010      	movs	r0, r2
 80113c2:	f7ef f82d 	bl	8000420 <__aeabi_idivmod>
 80113c6:	2900      	cmp	r1, #0
 80113c8:	d108      	bne.n	80113dc <mktime+0x68>
 80113ca:	4ba5      	ldr	r3, [pc, #660]	; (8011660 <mktime+0x2ec>)
 80113cc:	9a03      	ldr	r2, [sp, #12]
 80113ce:	3191      	adds	r1, #145	; 0x91
 80113d0:	31ff      	adds	r1, #255	; 0xff
 80113d2:	18d0      	adds	r0, r2, r3
 80113d4:	f7ef f824 	bl	8000420 <__aeabi_idivmod>
 80113d8:	2900      	cmp	r1, #0
 80113da:	d102      	bne.n	80113e2 <mktime+0x6e>
 80113dc:	9b04      	ldr	r3, [sp, #16]
 80113de:	3301      	adds	r3, #1
 80113e0:	9304      	str	r3, [sp, #16]
 80113e2:	9b04      	ldr	r3, [sp, #16]
 80113e4:	9903      	ldr	r1, [sp, #12]
 80113e6:	61e3      	str	r3, [r4, #28]
 80113e8:	4b9e      	ldr	r3, [pc, #632]	; (8011664 <mktime+0x2f0>)
 80113ea:	4a9f      	ldr	r2, [pc, #636]	; (8011668 <mktime+0x2f4>)
 80113ec:	18cb      	adds	r3, r1, r3
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d900      	bls.n	80113f4 <mktime+0x80>
 80113f2:	e181      	b.n	80116f8 <mktime+0x384>
 80113f4:	2946      	cmp	r1, #70	; 0x46
 80113f6:	dc00      	bgt.n	80113fa <mktime+0x86>
 80113f8:	e091      	b.n	801151e <mktime+0x1aa>
 80113fa:	2203      	movs	r2, #3
 80113fc:	2346      	movs	r3, #70	; 0x46
 80113fe:	4694      	mov	ip, r2
 8011400:	4661      	mov	r1, ip
 8011402:	4662      	mov	r2, ip
 8011404:	4019      	ands	r1, r3
 8011406:	4213      	tst	r3, r2
 8011408:	d000      	beq.n	801140c <mktime+0x98>
 801140a:	e085      	b.n	8011518 <mktime+0x1a4>
 801140c:	4a97      	ldr	r2, [pc, #604]	; (801166c <mktime+0x2f8>)
 801140e:	2002      	movs	r0, #2
 8011410:	0015      	movs	r5, r2
 8011412:	435d      	muls	r5, r3
 8011414:	41c5      	rors	r5, r0
 8011416:	4e96      	ldr	r6, [pc, #600]	; (8011670 <mktime+0x2fc>)
 8011418:	306d      	adds	r0, #109	; 0x6d
 801141a:	30ff      	adds	r0, #255	; 0xff
 801141c:	42b5      	cmp	r5, r6
 801141e:	d80a      	bhi.n	8011436 <mktime+0xc2>
 8011420:	488f      	ldr	r0, [pc, #572]	; (8011660 <mktime+0x2ec>)
 8011422:	1818      	adds	r0, r3, r0
 8011424:	4342      	muls	r2, r0
 8011426:	2004      	movs	r0, #4
 8011428:	41c2      	rors	r2, r0
 801142a:	4892      	ldr	r0, [pc, #584]	; (8011674 <mktime+0x300>)
 801142c:	4290      	cmp	r0, r2
 801142e:	4149      	adcs	r1, r1
 8011430:	316e      	adds	r1, #110	; 0x6e
 8011432:	31ff      	adds	r1, #255	; 0xff
 8011434:	0008      	movs	r0, r1
 8011436:	9a04      	ldr	r2, [sp, #16]
 8011438:	3301      	adds	r3, #1
 801143a:	1812      	adds	r2, r2, r0
 801143c:	9204      	str	r2, [sp, #16]
 801143e:	9a03      	ldr	r2, [sp, #12]
 8011440:	429a      	cmp	r2, r3
 8011442:	d1dd      	bne.n	8011400 <mktime+0x8c>
 8011444:	9b04      	ldr	r3, [sp, #16]
 8011446:	4a8c      	ldr	r2, [pc, #560]	; (8011678 <mktime+0x304>)
 8011448:	9804      	ldr	r0, [sp, #16]
 801144a:	17d9      	asrs	r1, r3, #31
 801144c:	2300      	movs	r3, #0
 801144e:	f7ee ffed 	bl	800042c <__aeabi_lmul>
 8011452:	9a00      	ldr	r2, [sp, #0]
 8011454:	9b01      	ldr	r3, [sp, #4]
 8011456:	1812      	adds	r2, r2, r0
 8011458:	414b      	adcs	r3, r1
 801145a:	9200      	str	r2, [sp, #0]
 801145c:	9301      	str	r3, [sp, #4]
 801145e:	f000 fabb 	bl	80119d8 <__tz_lock>
 8011462:	f000 fac9 	bl	80119f8 <_tzset_unlocked>
 8011466:	4b85      	ldr	r3, [pc, #532]	; (801167c <mktime+0x308>)
 8011468:	681d      	ldr	r5, [r3, #0]
 801146a:	2d00      	cmp	r5, #0
 801146c:	d04c      	beq.n	8011508 <mktime+0x194>
 801146e:	6963      	ldr	r3, [r4, #20]
 8011470:	4a7b      	ldr	r2, [pc, #492]	; (8011660 <mktime+0x2ec>)
 8011472:	1898      	adds	r0, r3, r2
 8011474:	6a23      	ldr	r3, [r4, #32]
 8011476:	9305      	str	r3, [sp, #20]
 8011478:	9309      	str	r3, [sp, #36]	; 0x24
 801147a:	2b00      	cmp	r3, #0
 801147c:	dd01      	ble.n	8011482 <mktime+0x10e>
 801147e:	2301      	movs	r3, #1
 8011480:	9309      	str	r3, [sp, #36]	; 0x24
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4283      	cmp	r3, r0
 8011486:	d000      	beq.n	801148a <mktime+0x116>
 8011488:	e089      	b.n	801159e <mktime+0x22a>
 801148a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801148c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801148e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011490:	0005      	movs	r5, r0
 8011492:	9308      	str	r3, [sp, #32]
 8011494:	9b08      	ldr	r3, [sp, #32]
 8011496:	000e      	movs	r6, r1
 8011498:	9306      	str	r3, [sp, #24]
 801149a:	17db      	asrs	r3, r3, #31
 801149c:	9307      	str	r3, [sp, #28]
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	001a      	movs	r2, r3
 80114a2:	469c      	mov	ip, r3
 80114a4:	17db      	asrs	r3, r3, #31
 80114a6:	1aad      	subs	r5, r5, r2
 80114a8:	419e      	sbcs	r6, r3
 80114aa:	002a      	movs	r2, r5
 80114ac:	9d01      	ldr	r5, [sp, #4]
 80114ae:	0033      	movs	r3, r6
 80114b0:	42ae      	cmp	r6, r5
 80114b2:	dc0e      	bgt.n	80114d2 <mktime+0x15e>
 80114b4:	d102      	bne.n	80114bc <mktime+0x148>
 80114b6:	9d00      	ldr	r5, [sp, #0]
 80114b8:	42aa      	cmp	r2, r5
 80114ba:	d80a      	bhi.n	80114d2 <mktime+0x15e>
 80114bc:	9d06      	ldr	r5, [sp, #24]
 80114be:	9e07      	ldr	r6, [sp, #28]
 80114c0:	1b40      	subs	r0, r0, r5
 80114c2:	41b1      	sbcs	r1, r6
 80114c4:	9d01      	ldr	r5, [sp, #4]
 80114c6:	42a9      	cmp	r1, r5
 80114c8:	dc6e      	bgt.n	80115a8 <mktime+0x234>
 80114ca:	d102      	bne.n	80114d2 <mktime+0x15e>
 80114cc:	9d00      	ldr	r5, [sp, #0]
 80114ce:	42a8      	cmp	r0, r5
 80114d0:	d86a      	bhi.n	80115a8 <mktime+0x234>
 80114d2:	9d06      	ldr	r5, [sp, #24]
 80114d4:	9e07      	ldr	r6, [sp, #28]
 80114d6:	6a38      	ldr	r0, [r7, #32]
 80114d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114da:	1b40      	subs	r0, r0, r5
 80114dc:	41b1      	sbcs	r1, r6
 80114de:	683d      	ldr	r5, [r7, #0]
 80114e0:	2d00      	cmp	r5, #0
 80114e2:	d063      	beq.n	80115ac <mktime+0x238>
 80114e4:	9d01      	ldr	r5, [sp, #4]
 80114e6:	42a9      	cmp	r1, r5
 80114e8:	dc0a      	bgt.n	8011500 <mktime+0x18c>
 80114ea:	d102      	bne.n	80114f2 <mktime+0x17e>
 80114ec:	9d00      	ldr	r5, [sp, #0]
 80114ee:	42a8      	cmp	r0, r5
 80114f0:	d806      	bhi.n	8011500 <mktime+0x18c>
 80114f2:	9901      	ldr	r1, [sp, #4]
 80114f4:	428b      	cmp	r3, r1
 80114f6:	dc60      	bgt.n	80115ba <mktime+0x246>
 80114f8:	d102      	bne.n	8011500 <mktime+0x18c>
 80114fa:	9900      	ldr	r1, [sp, #0]
 80114fc:	428a      	cmp	r2, r1
 80114fe:	d85c      	bhi.n	80115ba <mktime+0x246>
 8011500:	2500      	movs	r5, #0
 8011502:	9b05      	ldr	r3, [sp, #20]
 8011504:	42ab      	cmp	r3, r5
 8011506:	da5c      	bge.n	80115c2 <mktime+0x24e>
 8011508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150a:	001e      	movs	r6, r3
 801150c:	17df      	asrs	r7, r3, #31
 801150e:	9a00      	ldr	r2, [sp, #0]
 8011510:	9b01      	ldr	r3, [sp, #4]
 8011512:	18b6      	adds	r6, r6, r2
 8011514:	415f      	adcs	r7, r3
 8011516:	e0d7      	b.n	80116c8 <mktime+0x354>
 8011518:	206e      	movs	r0, #110	; 0x6e
 801151a:	30ff      	adds	r0, #255	; 0xff
 801151c:	e78b      	b.n	8011436 <mktime+0xc2>
 801151e:	9b03      	ldr	r3, [sp, #12]
 8011520:	2545      	movs	r5, #69	; 0x45
 8011522:	2b46      	cmp	r3, #70	; 0x46
 8011524:	d08e      	beq.n	8011444 <mktime+0xd0>
 8011526:	2303      	movs	r3, #3
 8011528:	9a03      	ldr	r2, [sp, #12]
 801152a:	402b      	ands	r3, r5
 801152c:	42aa      	cmp	r2, r5
 801152e:	db16      	blt.n	801155e <mktime+0x1ea>
 8011530:	2b00      	cmp	r3, #0
 8011532:	d12f      	bne.n	8011594 <mktime+0x220>
 8011534:	2164      	movs	r1, #100	; 0x64
 8011536:	0010      	movs	r0, r2
 8011538:	f7ee ff72 	bl	8000420 <__aeabi_idivmod>
 801153c:	2900      	cmp	r1, #0
 801153e:	d12b      	bne.n	8011598 <mktime+0x224>
 8011540:	4b47      	ldr	r3, [pc, #284]	; (8011660 <mktime+0x2ec>)
 8011542:	9a03      	ldr	r2, [sp, #12]
 8011544:	3191      	adds	r1, #145	; 0x91
 8011546:	18d0      	adds	r0, r2, r3
 8011548:	31ff      	adds	r1, #255	; 0xff
 801154a:	f7ee ff69 	bl	8000420 <__aeabi_idivmod>
 801154e:	424b      	negs	r3, r1
 8011550:	4159      	adcs	r1, r3
 8011552:	316e      	adds	r1, #110	; 0x6e
 8011554:	31ff      	adds	r1, #255	; 0xff
 8011556:	9b04      	ldr	r3, [sp, #16]
 8011558:	1a5b      	subs	r3, r3, r1
 801155a:	9304      	str	r3, [sp, #16]
 801155c:	e772      	b.n	8011444 <mktime+0xd0>
 801155e:	2b00      	cmp	r3, #0
 8011560:	d116      	bne.n	8011590 <mktime+0x21c>
 8011562:	2164      	movs	r1, #100	; 0x64
 8011564:	0028      	movs	r0, r5
 8011566:	f7ee ff5b 	bl	8000420 <__aeabi_idivmod>
 801156a:	23b7      	movs	r3, #183	; 0xb7
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	2900      	cmp	r1, #0
 8011570:	d109      	bne.n	8011586 <mktime+0x212>
 8011572:	4b3b      	ldr	r3, [pc, #236]	; (8011660 <mktime+0x2ec>)
 8011574:	3191      	adds	r1, #145	; 0x91
 8011576:	18e8      	adds	r0, r5, r3
 8011578:	31ff      	adds	r1, #255	; 0xff
 801157a:	f7ee ff51 	bl	8000420 <__aeabi_idivmod>
 801157e:	424b      	negs	r3, r1
 8011580:	414b      	adcs	r3, r1
 8011582:	336e      	adds	r3, #110	; 0x6e
 8011584:	33ff      	adds	r3, #255	; 0xff
 8011586:	9a04      	ldr	r2, [sp, #16]
 8011588:	3d01      	subs	r5, #1
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	e7ca      	b.n	8011526 <mktime+0x1b2>
 8011590:	236e      	movs	r3, #110	; 0x6e
 8011592:	e7f7      	b.n	8011584 <mktime+0x210>
 8011594:	216e      	movs	r1, #110	; 0x6e
 8011596:	e7dd      	b.n	8011554 <mktime+0x1e0>
 8011598:	21b7      	movs	r1, #183	; 0xb7
 801159a:	0049      	lsls	r1, r1, #1
 801159c:	e7db      	b.n	8011556 <mktime+0x1e2>
 801159e:	f000 f96f 	bl	8011880 <__tzcalc_limits>
 80115a2:	2800      	cmp	r0, #0
 80115a4:	d000      	beq.n	80115a8 <mktime+0x234>
 80115a6:	e770      	b.n	801148a <mktime+0x116>
 80115a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80115aa:	e082      	b.n	80116b2 <mktime+0x33e>
 80115ac:	9d01      	ldr	r5, [sp, #4]
 80115ae:	42a9      	cmp	r1, r5
 80115b0:	dc9f      	bgt.n	80114f2 <mktime+0x17e>
 80115b2:	d102      	bne.n	80115ba <mktime+0x246>
 80115b4:	9d00      	ldr	r5, [sp, #0]
 80115b6:	42a8      	cmp	r0, r5
 80115b8:	d89b      	bhi.n	80114f2 <mktime+0x17e>
 80115ba:	9b05      	ldr	r3, [sp, #20]
 80115bc:	2501      	movs	r5, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	db7a      	blt.n	80116b8 <mktime+0x344>
 80115c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115c4:	406b      	eors	r3, r5
 80115c6:	001e      	movs	r6, r3
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d172      	bne.n	80116b2 <mktime+0x33e>
 80115cc:	4662      	mov	r2, ip
 80115ce:	9b08      	ldr	r3, [sp, #32]
 80115d0:	1a9b      	subs	r3, r3, r2
 80115d2:	2d00      	cmp	r5, #0
 80115d4:	d002      	beq.n	80115dc <mktime+0x268>
 80115d6:	4663      	mov	r3, ip
 80115d8:	9a08      	ldr	r2, [sp, #32]
 80115da:	1a9b      	subs	r3, r3, r2
 80115dc:	0018      	movs	r0, r3
 80115de:	6822      	ldr	r2, [r4, #0]
 80115e0:	17d9      	asrs	r1, r3, #31
 80115e2:	18d2      	adds	r2, r2, r3
 80115e4:	6022      	str	r2, [r4, #0]
 80115e6:	9a00      	ldr	r2, [sp, #0]
 80115e8:	9b01      	ldr	r3, [sp, #4]
 80115ea:	1812      	adds	r2, r2, r0
 80115ec:	414b      	adcs	r3, r1
 80115ee:	9200      	str	r2, [sp, #0]
 80115f0:	9301      	str	r3, [sp, #4]
 80115f2:	68e3      	ldr	r3, [r4, #12]
 80115f4:	0020      	movs	r0, r4
 80115f6:	9305      	str	r3, [sp, #20]
 80115f8:	f7ff fdf6 	bl	80111e8 <validate_structure>
 80115fc:	68e3      	ldr	r3, [r4, #12]
 80115fe:	9a05      	ldr	r2, [sp, #20]
 8011600:	1a99      	subs	r1, r3, r2
 8011602:	4293      	cmp	r3, r2
 8011604:	d055      	beq.n	80116b2 <mktime+0x33e>
 8011606:	2901      	cmp	r1, #1
 8011608:	dc1e      	bgt.n	8011648 <mktime+0x2d4>
 801160a:	1c4b      	adds	r3, r1, #1
 801160c:	da00      	bge.n	8011610 <mktime+0x29c>
 801160e:	0031      	movs	r1, r6
 8011610:	9b04      	ldr	r3, [sp, #16]
 8011612:	69e2      	ldr	r2, [r4, #28]
 8011614:	185b      	adds	r3, r3, r1
 8011616:	9304      	str	r3, [sp, #16]
 8011618:	2303      	movs	r3, #3
 801161a:	1856      	adds	r6, r2, r1
 801161c:	d532      	bpl.n	8011684 <mktime+0x310>
 801161e:	9a03      	ldr	r2, [sp, #12]
 8011620:	1e50      	subs	r0, r2, #1
 8011622:	4218      	tst	r0, r3
 8011624:	d113      	bne.n	801164e <mktime+0x2da>
 8011626:	2164      	movs	r1, #100	; 0x64
 8011628:	f7ee fefa 	bl	8000420 <__aeabi_idivmod>
 801162c:	2900      	cmp	r1, #0
 801162e:	d112      	bne.n	8011656 <mktime+0x2e2>
 8011630:	4b13      	ldr	r3, [pc, #76]	; (8011680 <mktime+0x30c>)
 8011632:	9a03      	ldr	r2, [sp, #12]
 8011634:	3191      	adds	r1, #145	; 0x91
 8011636:	18d0      	adds	r0, r2, r3
 8011638:	31ff      	adds	r1, #255	; 0xff
 801163a:	f7ee fef1 	bl	8000420 <__aeabi_idivmod>
 801163e:	424b      	negs	r3, r1
 8011640:	4159      	adcs	r1, r3
 8011642:	316d      	adds	r1, #109	; 0x6d
 8011644:	31ff      	adds	r1, #255	; 0xff
 8011646:	e004      	b.n	8011652 <mktime+0x2de>
 8011648:	2101      	movs	r1, #1
 801164a:	4249      	negs	r1, r1
 801164c:	e7e0      	b.n	8011610 <mktime+0x29c>
 801164e:	21b6      	movs	r1, #182	; 0xb6
 8011650:	0049      	lsls	r1, r1, #1
 8011652:	61e1      	str	r1, [r4, #28]
 8011654:	e02d      	b.n	80116b2 <mktime+0x33e>
 8011656:	216e      	movs	r1, #110	; 0x6e
 8011658:	e7f4      	b.n	8011644 <mktime+0x2d0>
 801165a:	46c0      	nop			; (mov r8, r8)
 801165c:	080180e0 	.word	0x080180e0
 8011660:	0000076c 	.word	0x0000076c
 8011664:	00002710 	.word	0x00002710
 8011668:	00004e20 	.word	0x00004e20
 801166c:	c28f5c29 	.word	0xc28f5c29
 8011670:	028f5c28 	.word	0x028f5c28
 8011674:	00a3d70a 	.word	0x00a3d70a
 8011678:	00015180 	.word	0x00015180
 801167c:	2000126c 	.word	0x2000126c
 8011680:	0000076b 	.word	0x0000076b
 8011684:	9a03      	ldr	r2, [sp, #12]
 8011686:	421a      	tst	r2, r3
 8011688:	d12d      	bne.n	80116e6 <mktime+0x372>
 801168a:	2164      	movs	r1, #100	; 0x64
 801168c:	0010      	movs	r0, r2
 801168e:	f7ee fec7 	bl	8000420 <__aeabi_idivmod>
 8011692:	2900      	cmp	r1, #0
 8011694:	d129      	bne.n	80116ea <mktime+0x376>
 8011696:	4b1a      	ldr	r3, [pc, #104]	; (8011700 <mktime+0x38c>)
 8011698:	9a03      	ldr	r2, [sp, #12]
 801169a:	3191      	adds	r1, #145	; 0x91
 801169c:	18d0      	adds	r0, r2, r3
 801169e:	31ff      	adds	r1, #255	; 0xff
 80116a0:	f7ee febe 	bl	8000420 <__aeabi_idivmod>
 80116a4:	424b      	negs	r3, r1
 80116a6:	4159      	adcs	r1, r3
 80116a8:	316e      	adds	r1, #110	; 0x6e
 80116aa:	31ff      	adds	r1, #255	; 0xff
 80116ac:	428e      	cmp	r6, r1
 80116ae:	da1f      	bge.n	80116f0 <mktime+0x37c>
 80116b0:	61e6      	str	r6, [r4, #28]
 80116b2:	2d01      	cmp	r5, #1
 80116b4:	d000      	beq.n	80116b8 <mktime+0x344>
 80116b6:	e727      	b.n	8011508 <mktime+0x194>
 80116b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116ba:	2501      	movs	r5, #1
 80116bc:	001e      	movs	r6, r3
 80116be:	17df      	asrs	r7, r3, #31
 80116c0:	9a00      	ldr	r2, [sp, #0]
 80116c2:	9b01      	ldr	r3, [sp, #4]
 80116c4:	18b6      	adds	r6, r6, r2
 80116c6:	415f      	adcs	r7, r3
 80116c8:	f000 f98e 	bl	80119e8 <__tz_unlock>
 80116cc:	9804      	ldr	r0, [sp, #16]
 80116ce:	2107      	movs	r1, #7
 80116d0:	6225      	str	r5, [r4, #32]
 80116d2:	3004      	adds	r0, #4
 80116d4:	f7ee fea4 	bl	8000420 <__aeabi_idivmod>
 80116d8:	2900      	cmp	r1, #0
 80116da:	db0b      	blt.n	80116f4 <mktime+0x380>
 80116dc:	61a1      	str	r1, [r4, #24]
 80116de:	0030      	movs	r0, r6
 80116e0:	0039      	movs	r1, r7
 80116e2:	b00b      	add	sp, #44	; 0x2c
 80116e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e6:	216e      	movs	r1, #110	; 0x6e
 80116e8:	e7df      	b.n	80116aa <mktime+0x336>
 80116ea:	21b7      	movs	r1, #183	; 0xb7
 80116ec:	0049      	lsls	r1, r1, #1
 80116ee:	e7dd      	b.n	80116ac <mktime+0x338>
 80116f0:	1a71      	subs	r1, r6, r1
 80116f2:	e7ae      	b.n	8011652 <mktime+0x2de>
 80116f4:	3107      	adds	r1, #7
 80116f6:	e7f1      	b.n	80116dc <mktime+0x368>
 80116f8:	2601      	movs	r6, #1
 80116fa:	4276      	negs	r6, r6
 80116fc:	17f7      	asrs	r7, r6, #31
 80116fe:	e7ee      	b.n	80116de <mktime+0x36a>
 8011700:	0000076c 	.word	0x0000076c

08011704 <siprintf>:
 8011704:	b40e      	push	{r1, r2, r3}
 8011706:	b500      	push	{lr}
 8011708:	490b      	ldr	r1, [pc, #44]	; (8011738 <siprintf+0x34>)
 801170a:	b09c      	sub	sp, #112	; 0x70
 801170c:	ab1d      	add	r3, sp, #116	; 0x74
 801170e:	9002      	str	r0, [sp, #8]
 8011710:	9006      	str	r0, [sp, #24]
 8011712:	9107      	str	r1, [sp, #28]
 8011714:	9104      	str	r1, [sp, #16]
 8011716:	4809      	ldr	r0, [pc, #36]	; (801173c <siprintf+0x38>)
 8011718:	4909      	ldr	r1, [pc, #36]	; (8011740 <siprintf+0x3c>)
 801171a:	cb04      	ldmia	r3!, {r2}
 801171c:	9105      	str	r1, [sp, #20]
 801171e:	6800      	ldr	r0, [r0, #0]
 8011720:	a902      	add	r1, sp, #8
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	f000 fc6a 	bl	8011ffc <_svfiprintf_r>
 8011728:	2300      	movs	r3, #0
 801172a:	9a02      	ldr	r2, [sp, #8]
 801172c:	7013      	strb	r3, [r2, #0]
 801172e:	b01c      	add	sp, #112	; 0x70
 8011730:	bc08      	pop	{r3}
 8011732:	b003      	add	sp, #12
 8011734:	4718      	bx	r3
 8011736:	46c0      	nop			; (mov r8, r8)
 8011738:	7fffffff 	.word	0x7fffffff
 801173c:	2000012c 	.word	0x2000012c
 8011740:	ffff0208 	.word	0xffff0208

08011744 <_strtol_l.isra.0>:
 8011744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011746:	b087      	sub	sp, #28
 8011748:	001e      	movs	r6, r3
 801174a:	9005      	str	r0, [sp, #20]
 801174c:	9101      	str	r1, [sp, #4]
 801174e:	9202      	str	r2, [sp, #8]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d045      	beq.n	80117e0 <_strtol_l.isra.0+0x9c>
 8011754:	0008      	movs	r0, r1
 8011756:	2b24      	cmp	r3, #36	; 0x24
 8011758:	d842      	bhi.n	80117e0 <_strtol_l.isra.0+0x9c>
 801175a:	4b3f      	ldr	r3, [pc, #252]	; (8011858 <_strtol_l.isra.0+0x114>)
 801175c:	2208      	movs	r2, #8
 801175e:	469c      	mov	ip, r3
 8011760:	0003      	movs	r3, r0
 8011762:	4661      	mov	r1, ip
 8011764:	781c      	ldrb	r4, [r3, #0]
 8011766:	1c45      	adds	r5, r0, #1
 8011768:	5d09      	ldrb	r1, [r1, r4]
 801176a:	0028      	movs	r0, r5
 801176c:	000f      	movs	r7, r1
 801176e:	4017      	ands	r7, r2
 8011770:	4211      	tst	r1, r2
 8011772:	d1f5      	bne.n	8011760 <_strtol_l.isra.0+0x1c>
 8011774:	2c2d      	cmp	r4, #45	; 0x2d
 8011776:	d13a      	bne.n	80117ee <_strtol_l.isra.0+0xaa>
 8011778:	2701      	movs	r7, #1
 801177a:	782c      	ldrb	r4, [r5, #0]
 801177c:	1c9d      	adds	r5, r3, #2
 801177e:	2e00      	cmp	r6, #0
 8011780:	d065      	beq.n	801184e <_strtol_l.isra.0+0x10a>
 8011782:	2e10      	cmp	r6, #16
 8011784:	d109      	bne.n	801179a <_strtol_l.isra.0+0x56>
 8011786:	2c30      	cmp	r4, #48	; 0x30
 8011788:	d107      	bne.n	801179a <_strtol_l.isra.0+0x56>
 801178a:	2220      	movs	r2, #32
 801178c:	782b      	ldrb	r3, [r5, #0]
 801178e:	4393      	bics	r3, r2
 8011790:	2b58      	cmp	r3, #88	; 0x58
 8011792:	d157      	bne.n	8011844 <_strtol_l.isra.0+0x100>
 8011794:	2610      	movs	r6, #16
 8011796:	786c      	ldrb	r4, [r5, #1]
 8011798:	3502      	adds	r5, #2
 801179a:	4b30      	ldr	r3, [pc, #192]	; (801185c <_strtol_l.isra.0+0x118>)
 801179c:	0031      	movs	r1, r6
 801179e:	18fb      	adds	r3, r7, r3
 80117a0:	0018      	movs	r0, r3
 80117a2:	9303      	str	r3, [sp, #12]
 80117a4:	f7ee fd52 	bl	800024c <__aeabi_uidivmod>
 80117a8:	2300      	movs	r3, #0
 80117aa:	2201      	movs	r2, #1
 80117ac:	4684      	mov	ip, r0
 80117ae:	0018      	movs	r0, r3
 80117b0:	9104      	str	r1, [sp, #16]
 80117b2:	4252      	negs	r2, r2
 80117b4:	0021      	movs	r1, r4
 80117b6:	3930      	subs	r1, #48	; 0x30
 80117b8:	2909      	cmp	r1, #9
 80117ba:	d81d      	bhi.n	80117f8 <_strtol_l.isra.0+0xb4>
 80117bc:	000c      	movs	r4, r1
 80117be:	42a6      	cmp	r6, r4
 80117c0:	dd28      	ble.n	8011814 <_strtol_l.isra.0+0xd0>
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	db24      	blt.n	8011810 <_strtol_l.isra.0+0xcc>
 80117c6:	0013      	movs	r3, r2
 80117c8:	4584      	cmp	ip, r0
 80117ca:	d306      	bcc.n	80117da <_strtol_l.isra.0+0x96>
 80117cc:	d102      	bne.n	80117d4 <_strtol_l.isra.0+0x90>
 80117ce:	9904      	ldr	r1, [sp, #16]
 80117d0:	42a1      	cmp	r1, r4
 80117d2:	db02      	blt.n	80117da <_strtol_l.isra.0+0x96>
 80117d4:	2301      	movs	r3, #1
 80117d6:	4370      	muls	r0, r6
 80117d8:	1820      	adds	r0, r4, r0
 80117da:	782c      	ldrb	r4, [r5, #0]
 80117dc:	3501      	adds	r5, #1
 80117de:	e7e9      	b.n	80117b4 <_strtol_l.isra.0+0x70>
 80117e0:	f7ff fcd0 	bl	8011184 <__errno>
 80117e4:	2316      	movs	r3, #22
 80117e6:	6003      	str	r3, [r0, #0]
 80117e8:	2000      	movs	r0, #0
 80117ea:	b007      	add	sp, #28
 80117ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117ee:	2c2b      	cmp	r4, #43	; 0x2b
 80117f0:	d1c5      	bne.n	801177e <_strtol_l.isra.0+0x3a>
 80117f2:	782c      	ldrb	r4, [r5, #0]
 80117f4:	1c9d      	adds	r5, r3, #2
 80117f6:	e7c2      	b.n	801177e <_strtol_l.isra.0+0x3a>
 80117f8:	0021      	movs	r1, r4
 80117fa:	3941      	subs	r1, #65	; 0x41
 80117fc:	2919      	cmp	r1, #25
 80117fe:	d801      	bhi.n	8011804 <_strtol_l.isra.0+0xc0>
 8011800:	3c37      	subs	r4, #55	; 0x37
 8011802:	e7dc      	b.n	80117be <_strtol_l.isra.0+0x7a>
 8011804:	0021      	movs	r1, r4
 8011806:	3961      	subs	r1, #97	; 0x61
 8011808:	2919      	cmp	r1, #25
 801180a:	d803      	bhi.n	8011814 <_strtol_l.isra.0+0xd0>
 801180c:	3c57      	subs	r4, #87	; 0x57
 801180e:	e7d6      	b.n	80117be <_strtol_l.isra.0+0x7a>
 8011810:	0013      	movs	r3, r2
 8011812:	e7e2      	b.n	80117da <_strtol_l.isra.0+0x96>
 8011814:	2b00      	cmp	r3, #0
 8011816:	da09      	bge.n	801182c <_strtol_l.isra.0+0xe8>
 8011818:	2322      	movs	r3, #34	; 0x22
 801181a:	9a05      	ldr	r2, [sp, #20]
 801181c:	9803      	ldr	r0, [sp, #12]
 801181e:	6013      	str	r3, [r2, #0]
 8011820:	9b02      	ldr	r3, [sp, #8]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d0e1      	beq.n	80117ea <_strtol_l.isra.0+0xa6>
 8011826:	1e6b      	subs	r3, r5, #1
 8011828:	9301      	str	r3, [sp, #4]
 801182a:	e007      	b.n	801183c <_strtol_l.isra.0+0xf8>
 801182c:	2f00      	cmp	r7, #0
 801182e:	d000      	beq.n	8011832 <_strtol_l.isra.0+0xee>
 8011830:	4240      	negs	r0, r0
 8011832:	9a02      	ldr	r2, [sp, #8]
 8011834:	2a00      	cmp	r2, #0
 8011836:	d0d8      	beq.n	80117ea <_strtol_l.isra.0+0xa6>
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1f4      	bne.n	8011826 <_strtol_l.isra.0+0xe2>
 801183c:	9b02      	ldr	r3, [sp, #8]
 801183e:	9a01      	ldr	r2, [sp, #4]
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	e7d2      	b.n	80117ea <_strtol_l.isra.0+0xa6>
 8011844:	2430      	movs	r4, #48	; 0x30
 8011846:	2e00      	cmp	r6, #0
 8011848:	d1a7      	bne.n	801179a <_strtol_l.isra.0+0x56>
 801184a:	3608      	adds	r6, #8
 801184c:	e7a5      	b.n	801179a <_strtol_l.isra.0+0x56>
 801184e:	2c30      	cmp	r4, #48	; 0x30
 8011850:	d09b      	beq.n	801178a <_strtol_l.isra.0+0x46>
 8011852:	260a      	movs	r6, #10
 8011854:	e7a1      	b.n	801179a <_strtol_l.isra.0+0x56>
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	0801814d 	.word	0x0801814d
 801185c:	7fffffff 	.word	0x7fffffff

08011860 <_strtol_r>:
 8011860:	b510      	push	{r4, lr}
 8011862:	f7ff ff6f 	bl	8011744 <_strtol_l.isra.0>
 8011866:	bd10      	pop	{r4, pc}

08011868 <strtol>:
 8011868:	b510      	push	{r4, lr}
 801186a:	0013      	movs	r3, r2
 801186c:	000a      	movs	r2, r1
 801186e:	0001      	movs	r1, r0
 8011870:	4802      	ldr	r0, [pc, #8]	; (801187c <strtol+0x14>)
 8011872:	6800      	ldr	r0, [r0, #0]
 8011874:	f7ff ff66 	bl	8011744 <_strtol_l.isra.0>
 8011878:	bd10      	pop	{r4, pc}
 801187a:	46c0      	nop			; (mov r8, r8)
 801187c:	2000012c 	.word	0x2000012c

08011880 <__tzcalc_limits>:
 8011880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011882:	b089      	sub	sp, #36	; 0x24
 8011884:	0004      	movs	r4, r0
 8011886:	f000 fa9d 	bl	8011dc4 <__gettzinfo>
 801188a:	4b4c      	ldr	r3, [pc, #304]	; (80119bc <__tzcalc_limits+0x13c>)
 801188c:	0006      	movs	r6, r0
 801188e:	2000      	movs	r0, #0
 8011890:	429c      	cmp	r4, r3
 8011892:	dd5f      	ble.n	8011954 <__tzcalc_limits+0xd4>
 8011894:	256e      	movs	r5, #110	; 0x6e
 8011896:	2164      	movs	r1, #100	; 0x64
 8011898:	4b49      	ldr	r3, [pc, #292]	; (80119c0 <__tzcalc_limits+0x140>)
 801189a:	35ff      	adds	r5, #255	; 0xff
 801189c:	18e0      	adds	r0, r4, r3
 801189e:	4345      	muls	r5, r0
 80118a0:	4b48      	ldr	r3, [pc, #288]	; (80119c4 <__tzcalc_limits+0x144>)
 80118a2:	6074      	str	r4, [r6, #4]
 80118a4:	18e0      	adds	r0, r4, r3
 80118a6:	4b48      	ldr	r3, [pc, #288]	; (80119c8 <__tzcalc_limits+0x148>)
 80118a8:	1080      	asrs	r0, r0, #2
 80118aa:	182d      	adds	r5, r5, r0
 80118ac:	4249      	negs	r1, r1
 80118ae:	18e0      	adds	r0, r4, r3
 80118b0:	f7ee fcd0 	bl	8000254 <__divsi3>
 80118b4:	21c8      	movs	r1, #200	; 0xc8
 80118b6:	4b45      	ldr	r3, [pc, #276]	; (80119cc <__tzcalc_limits+0x14c>)
 80118b8:	182d      	adds	r5, r5, r0
 80118ba:	0049      	lsls	r1, r1, #1
 80118bc:	18e0      	adds	r0, r4, r3
 80118be:	f7ee fcc9 	bl	8000254 <__divsi3>
 80118c2:	2164      	movs	r1, #100	; 0x64
 80118c4:	182b      	adds	r3, r5, r0
 80118c6:	0020      	movs	r0, r4
 80118c8:	9301      	str	r3, [sp, #4]
 80118ca:	f7ee fda9 	bl	8000420 <__aeabi_idivmod>
 80118ce:	9102      	str	r1, [sp, #8]
 80118d0:	21c8      	movs	r1, #200	; 0xc8
 80118d2:	0020      	movs	r0, r4
 80118d4:	0049      	lsls	r1, r1, #1
 80118d6:	f7ee fda3 	bl	8000420 <__aeabi_idivmod>
 80118da:	000a      	movs	r2, r1
 80118dc:	2003      	movs	r0, #3
 80118de:	4253      	negs	r3, r2
 80118e0:	415a      	adcs	r2, r3
 80118e2:	0033      	movs	r3, r6
 80118e4:	0035      	movs	r5, r6
 80118e6:	3358      	adds	r3, #88	; 0x58
 80118e8:	4004      	ands	r4, r0
 80118ea:	9103      	str	r1, [sp, #12]
 80118ec:	9205      	str	r2, [sp, #20]
 80118ee:	3508      	adds	r5, #8
 80118f0:	9307      	str	r3, [sp, #28]
 80118f2:	9406      	str	r4, [sp, #24]
 80118f4:	782b      	ldrb	r3, [r5, #0]
 80118f6:	68ef      	ldr	r7, [r5, #12]
 80118f8:	2b4a      	cmp	r3, #74	; 0x4a
 80118fa:	d12d      	bne.n	8011958 <__tzcalc_limits+0xd8>
 80118fc:	9b01      	ldr	r3, [sp, #4]
 80118fe:	19dc      	adds	r4, r3, r7
 8011900:	9b06      	ldr	r3, [sp, #24]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d102      	bne.n	801190c <__tzcalc_limits+0x8c>
 8011906:	9b02      	ldr	r3, [sp, #8]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d103      	bne.n	8011914 <__tzcalc_limits+0x94>
 801190c:	2100      	movs	r1, #0
 801190e:	9b03      	ldr	r3, [sp, #12]
 8011910:	428b      	cmp	r3, r1
 8011912:	d103      	bne.n	801191c <__tzcalc_limits+0x9c>
 8011914:	2101      	movs	r1, #1
 8011916:	2f3b      	cmp	r7, #59	; 0x3b
 8011918:	dc00      	bgt.n	801191c <__tzcalc_limits+0x9c>
 801191a:	2100      	movs	r1, #0
 801191c:	1864      	adds	r4, r4, r1
 801191e:	3c01      	subs	r4, #1
 8011920:	492b      	ldr	r1, [pc, #172]	; (80119d0 <__tzcalc_limits+0x150>)
 8011922:	692b      	ldr	r3, [r5, #16]
 8011924:	434c      	muls	r4, r1
 8011926:	18e4      	adds	r4, r4, r3
 8011928:	6a2b      	ldr	r3, [r5, #32]
 801192a:	18e4      	adds	r4, r4, r3
 801192c:	61ac      	str	r4, [r5, #24]
 801192e:	9b07      	ldr	r3, [sp, #28]
 8011930:	17e4      	asrs	r4, r4, #31
 8011932:	61ec      	str	r4, [r5, #28]
 8011934:	3528      	adds	r5, #40	; 0x28
 8011936:	42ab      	cmp	r3, r5
 8011938:	d1dc      	bne.n	80118f4 <__tzcalc_limits+0x74>
 801193a:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
 801193c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801193e:	2301      	movs	r3, #1
 8011940:	4291      	cmp	r1, r2
 8011942:	dc05      	bgt.n	8011950 <__tzcalc_limits+0xd0>
 8011944:	d103      	bne.n	801194e <__tzcalc_limits+0xce>
 8011946:	6cb2      	ldr	r2, [r6, #72]	; 0x48
 8011948:	6a31      	ldr	r1, [r6, #32]
 801194a:	428a      	cmp	r2, r1
 801194c:	d800      	bhi.n	8011950 <__tzcalc_limits+0xd0>
 801194e:	2300      	movs	r3, #0
 8011950:	2001      	movs	r0, #1
 8011952:	6033      	str	r3, [r6, #0]
 8011954:	b009      	add	sp, #36	; 0x24
 8011956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011958:	2b44      	cmp	r3, #68	; 0x44
 801195a:	d102      	bne.n	8011962 <__tzcalc_limits+0xe2>
 801195c:	9b01      	ldr	r3, [sp, #4]
 801195e:	19dc      	adds	r4, r3, r7
 8011960:	e7de      	b.n	8011920 <__tzcalc_limits+0xa0>
 8011962:	9a06      	ldr	r2, [sp, #24]
 8011964:	9b05      	ldr	r3, [sp, #20]
 8011966:	2a00      	cmp	r2, #0
 8011968:	d103      	bne.n	8011972 <__tzcalc_limits+0xf2>
 801196a:	9a02      	ldr	r2, [sp, #8]
 801196c:	2a00      	cmp	r2, #0
 801196e:	d000      	beq.n	8011972 <__tzcalc_limits+0xf2>
 8011970:	2301      	movs	r3, #1
 8011972:	2230      	movs	r2, #48	; 0x30
 8011974:	4353      	muls	r3, r2
 8011976:	2200      	movs	r2, #0
 8011978:	4816      	ldr	r0, [pc, #88]	; (80119d4 <__tzcalc_limits+0x154>)
 801197a:	3b04      	subs	r3, #4
 801197c:	6869      	ldr	r1, [r5, #4]
 801197e:	9c01      	ldr	r4, [sp, #4]
 8011980:	181b      	adds	r3, r3, r0
 8011982:	3201      	adds	r2, #1
 8011984:	0090      	lsls	r0, r2, #2
 8011986:	5818      	ldr	r0, [r3, r0]
 8011988:	9004      	str	r0, [sp, #16]
 801198a:	4291      	cmp	r1, r2
 801198c:	dc10      	bgt.n	80119b0 <__tzcalc_limits+0x130>
 801198e:	2107      	movs	r1, #7
 8011990:	1d20      	adds	r0, r4, #4
 8011992:	f7ee fd45 	bl	8000420 <__aeabi_idivmod>
 8011996:	1a79      	subs	r1, r7, r1
 8011998:	d500      	bpl.n	801199c <__tzcalc_limits+0x11c>
 801199a:	3107      	adds	r1, #7
 801199c:	68ab      	ldr	r3, [r5, #8]
 801199e:	1e5a      	subs	r2, r3, #1
 80119a0:	2307      	movs	r3, #7
 80119a2:	4353      	muls	r3, r2
 80119a4:	1859      	adds	r1, r3, r1
 80119a6:	9b04      	ldr	r3, [sp, #16]
 80119a8:	4299      	cmp	r1, r3
 80119aa:	da04      	bge.n	80119b6 <__tzcalc_limits+0x136>
 80119ac:	1864      	adds	r4, r4, r1
 80119ae:	e7b7      	b.n	8011920 <__tzcalc_limits+0xa0>
 80119b0:	9804      	ldr	r0, [sp, #16]
 80119b2:	1824      	adds	r4, r4, r0
 80119b4:	e7e5      	b.n	8011982 <__tzcalc_limits+0x102>
 80119b6:	3907      	subs	r1, #7
 80119b8:	e7f5      	b.n	80119a6 <__tzcalc_limits+0x126>
 80119ba:	46c0      	nop			; (mov r8, r8)
 80119bc:	000007b1 	.word	0x000007b1
 80119c0:	fffff84e 	.word	0xfffff84e
 80119c4:	fffff84f 	.word	0xfffff84f
 80119c8:	fffff893 	.word	0xfffff893
 80119cc:	fffff9bf 	.word	0xfffff9bf
 80119d0:	00015180 	.word	0x00015180
 80119d4:	08018250 	.word	0x08018250

080119d8 <__tz_lock>:
 80119d8:	b510      	push	{r4, lr}
 80119da:	4802      	ldr	r0, [pc, #8]	; (80119e4 <__tz_lock+0xc>)
 80119dc:	f000 f9f6 	bl	8011dcc <__retarget_lock_acquire>
 80119e0:	bd10      	pop	{r4, pc}
 80119e2:	46c0      	nop			; (mov r8, r8)
 80119e4:	200031bf 	.word	0x200031bf

080119e8 <__tz_unlock>:
 80119e8:	b510      	push	{r4, lr}
 80119ea:	4802      	ldr	r0, [pc, #8]	; (80119f4 <__tz_unlock+0xc>)
 80119ec:	f000 f9f0 	bl	8011dd0 <__retarget_lock_release>
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	46c0      	nop			; (mov r8, r8)
 80119f4:	200031bf 	.word	0x200031bf

080119f8 <_tzset_unlocked>:
 80119f8:	b510      	push	{r4, lr}
 80119fa:	4b02      	ldr	r3, [pc, #8]	; (8011a04 <_tzset_unlocked+0xc>)
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	f000 f803 	bl	8011a08 <_tzset_unlocked_r>
 8011a02:	bd10      	pop	{r4, pc}
 8011a04:	2000012c 	.word	0x2000012c

08011a08 <_tzset_unlocked_r>:
 8011a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a0a:	b08d      	sub	sp, #52	; 0x34
 8011a0c:	0006      	movs	r6, r0
 8011a0e:	f000 f9d9 	bl	8011dc4 <__gettzinfo>
 8011a12:	49b2      	ldr	r1, [pc, #712]	; (8011cdc <_tzset_unlocked_r+0x2d4>)
 8011a14:	0007      	movs	r7, r0
 8011a16:	0030      	movs	r0, r6
 8011a18:	f000 f9ce 	bl	8011db8 <_getenv_r>
 8011a1c:	4cb0      	ldr	r4, [pc, #704]	; (8011ce0 <_tzset_unlocked_r+0x2d8>)
 8011a1e:	1e05      	subs	r5, r0, #0
 8011a20:	d10d      	bne.n	8011a3e <_tzset_unlocked_r+0x36>
 8011a22:	4bb0      	ldr	r3, [pc, #704]	; (8011ce4 <_tzset_unlocked_r+0x2dc>)
 8011a24:	4ab0      	ldr	r2, [pc, #704]	; (8011ce8 <_tzset_unlocked_r+0x2e0>)
 8011a26:	6018      	str	r0, [r3, #0]
 8011a28:	4bb0      	ldr	r3, [pc, #704]	; (8011cec <_tzset_unlocked_r+0x2e4>)
 8011a2a:	6018      	str	r0, [r3, #0]
 8011a2c:	4bb0      	ldr	r3, [pc, #704]	; (8011cf0 <_tzset_unlocked_r+0x2e8>)
 8011a2e:	6820      	ldr	r0, [r4, #0]
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	605a      	str	r2, [r3, #4]
 8011a34:	f000 f9ce 	bl	8011dd4 <free>
 8011a38:	6025      	str	r5, [r4, #0]
 8011a3a:	b00d      	add	sp, #52	; 0x34
 8011a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a3e:	6821      	ldr	r1, [r4, #0]
 8011a40:	2900      	cmp	r1, #0
 8011a42:	d159      	bne.n	8011af8 <_tzset_unlocked_r+0xf0>
 8011a44:	6820      	ldr	r0, [r4, #0]
 8011a46:	f000 f9c5 	bl	8011dd4 <free>
 8011a4a:	0028      	movs	r0, r5
 8011a4c:	f7ee fb5c 	bl	8000108 <strlen>
 8011a50:	1c41      	adds	r1, r0, #1
 8011a52:	0030      	movs	r0, r6
 8011a54:	f000 fa12 	bl	8011e7c <_malloc_r>
 8011a58:	6020      	str	r0, [r4, #0]
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d151      	bne.n	8011b02 <_tzset_unlocked_r+0xfa>
 8011a5e:	782b      	ldrb	r3, [r5, #0]
 8011a60:	49a4      	ldr	r1, [pc, #656]	; (8011cf4 <_tzset_unlocked_r+0x2ec>)
 8011a62:	3b3a      	subs	r3, #58	; 0x3a
 8011a64:	425a      	negs	r2, r3
 8011a66:	4153      	adcs	r3, r2
 8011a68:	18ed      	adds	r5, r5, r3
 8011a6a:	0028      	movs	r0, r5
 8011a6c:	4aa2      	ldr	r2, [pc, #648]	; (8011cf8 <_tzset_unlocked_r+0x2f0>)
 8011a6e:	ab0a      	add	r3, sp, #40	; 0x28
 8011a70:	f000 fd58 	bl	8012524 <siscanf>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	dde0      	ble.n	8011a3a <_tzset_unlocked_r+0x32>
 8011a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7a:	18ec      	adds	r4, r5, r3
 8011a7c:	5ceb      	ldrb	r3, [r5, r3]
 8011a7e:	2b2d      	cmp	r3, #45	; 0x2d
 8011a80:	d143      	bne.n	8011b0a <_tzset_unlocked_r+0x102>
 8011a82:	3b2e      	subs	r3, #46	; 0x2e
 8011a84:	3401      	adds	r4, #1
 8011a86:	9304      	str	r3, [sp, #16]
 8011a88:	2616      	movs	r6, #22
 8011a8a:	ab02      	add	r3, sp, #8
 8011a8c:	18f6      	adds	r6, r6, r3
 8011a8e:	2300      	movs	r3, #0
 8011a90:	ad08      	add	r5, sp, #32
 8011a92:	8033      	strh	r3, [r6, #0]
 8011a94:	802b      	strh	r3, [r5, #0]
 8011a96:	ab0a      	add	r3, sp, #40	; 0x28
 8011a98:	0020      	movs	r0, r4
 8011a9a:	4998      	ldr	r1, [pc, #608]	; (8011cfc <_tzset_unlocked_r+0x2f4>)
 8011a9c:	9303      	str	r3, [sp, #12]
 8011a9e:	9502      	str	r5, [sp, #8]
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	9600      	str	r6, [sp, #0]
 8011aa4:	aa07      	add	r2, sp, #28
 8011aa6:	f000 fd3d 	bl	8012524 <siscanf>
 8011aaa:	2800      	cmp	r0, #0
 8011aac:	ddc5      	ble.n	8011a3a <_tzset_unlocked_r+0x32>
 8011aae:	233c      	movs	r3, #60	; 0x3c
 8011ab0:	8832      	ldrh	r2, [r6, #0]
 8011ab2:	4e93      	ldr	r6, [pc, #588]	; (8011d00 <_tzset_unlocked_r+0x2f8>)
 8011ab4:	4353      	muls	r3, r2
 8011ab6:	882a      	ldrh	r2, [r5, #0]
 8011ab8:	4d8d      	ldr	r5, [pc, #564]	; (8011cf0 <_tzset_unlocked_r+0x2e8>)
 8011aba:	189b      	adds	r3, r3, r2
 8011abc:	aa02      	add	r2, sp, #8
 8011abe:	8a91      	ldrh	r1, [r2, #20]
 8011ac0:	22e1      	movs	r2, #225	; 0xe1
 8011ac2:	0112      	lsls	r2, r2, #4
 8011ac4:	434a      	muls	r2, r1
 8011ac6:	189b      	adds	r3, r3, r2
 8011ac8:	9a04      	ldr	r2, [sp, #16]
 8011aca:	498a      	ldr	r1, [pc, #552]	; (8011cf4 <_tzset_unlocked_r+0x2ec>)
 8011acc:	435a      	muls	r2, r3
 8011ace:	4b8a      	ldr	r3, [pc, #552]	; (8011cf8 <_tzset_unlocked_r+0x2f0>)
 8011ad0:	62ba      	str	r2, [r7, #40]	; 0x28
 8011ad2:	602b      	str	r3, [r5, #0]
 8011ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ad6:	0032      	movs	r2, r6
 8011ad8:	18e4      	adds	r4, r4, r3
 8011ada:	0020      	movs	r0, r4
 8011adc:	ab0a      	add	r3, sp, #40	; 0x28
 8011ade:	f000 fd21 	bl	8012524 <siscanf>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	dc18      	bgt.n	8011b18 <_tzset_unlocked_r+0x110>
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011aea:	606b      	str	r3, [r5, #4]
 8011aec:	4b7d      	ldr	r3, [pc, #500]	; (8011ce4 <_tzset_unlocked_r+0x2dc>)
 8011aee:	601a      	str	r2, [r3, #0]
 8011af0:	2200      	movs	r2, #0
 8011af2:	4b7e      	ldr	r3, [pc, #504]	; (8011cec <_tzset_unlocked_r+0x2e4>)
 8011af4:	601a      	str	r2, [r3, #0]
 8011af6:	e7a0      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011af8:	f7ee fb0d 	bl	8000116 <strcmp>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d1a1      	bne.n	8011a44 <_tzset_unlocked_r+0x3c>
 8011b00:	e79b      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011b02:	0029      	movs	r1, r5
 8011b04:	f000 fd38 	bl	8012578 <strcpy>
 8011b08:	e7a9      	b.n	8011a5e <_tzset_unlocked_r+0x56>
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	3b2b      	subs	r3, #43	; 0x2b
 8011b0e:	9204      	str	r2, [sp, #16]
 8011b10:	425a      	negs	r2, r3
 8011b12:	4153      	adcs	r3, r2
 8011b14:	18e4      	adds	r4, r4, r3
 8011b16:	e7b7      	b.n	8011a88 <_tzset_unlocked_r+0x80>
 8011b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b1a:	606e      	str	r6, [r5, #4]
 8011b1c:	18e5      	adds	r5, r4, r3
 8011b1e:	5ce3      	ldrb	r3, [r4, r3]
 8011b20:	2b2d      	cmp	r3, #45	; 0x2d
 8011b22:	d000      	beq.n	8011b26 <_tzset_unlocked_r+0x11e>
 8011b24:	e094      	b.n	8011c50 <_tzset_unlocked_r+0x248>
 8011b26:	3b2e      	subs	r3, #46	; 0x2e
 8011b28:	3501      	adds	r5, #1
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	2416      	movs	r4, #22
 8011b2e:	2300      	movs	r3, #0
 8011b30:	aa02      	add	r2, sp, #8
 8011b32:	18a4      	adds	r4, r4, r2
 8011b34:	ae08      	add	r6, sp, #32
 8011b36:	8293      	strh	r3, [r2, #20]
 8011b38:	8023      	strh	r3, [r4, #0]
 8011b3a:	8033      	strh	r3, [r6, #0]
 8011b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8011b3e:	ab0a      	add	r3, sp, #40	; 0x28
 8011b40:	0028      	movs	r0, r5
 8011b42:	496e      	ldr	r1, [pc, #440]	; (8011cfc <_tzset_unlocked_r+0x2f4>)
 8011b44:	9303      	str	r3, [sp, #12]
 8011b46:	9602      	str	r6, [sp, #8]
 8011b48:	9301      	str	r3, [sp, #4]
 8011b4a:	9400      	str	r4, [sp, #0]
 8011b4c:	aa07      	add	r2, sp, #28
 8011b4e:	f000 fce9 	bl	8012524 <siscanf>
 8011b52:	2800      	cmp	r0, #0
 8011b54:	dd00      	ble.n	8011b58 <_tzset_unlocked_r+0x150>
 8011b56:	e082      	b.n	8011c5e <_tzset_unlocked_r+0x256>
 8011b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5a:	4a6a      	ldr	r2, [pc, #424]	; (8011d04 <_tzset_unlocked_r+0x2fc>)
 8011b5c:	189c      	adds	r4, r3, r2
 8011b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b60:	653c      	str	r4, [r7, #80]	; 0x50
 8011b62:	003c      	movs	r4, r7
 8011b64:	18ed      	adds	r5, r5, r3
 8011b66:	2300      	movs	r3, #0
 8011b68:	3408      	adds	r4, #8
 8011b6a:	9305      	str	r3, [sp, #20]
 8011b6c:	782b      	ldrb	r3, [r5, #0]
 8011b6e:	3b2c      	subs	r3, #44	; 0x2c
 8011b70:	425a      	negs	r2, r3
 8011b72:	4153      	adcs	r3, r2
 8011b74:	18ed      	adds	r5, r5, r3
 8011b76:	782b      	ldrb	r3, [r5, #0]
 8011b78:	9304      	str	r3, [sp, #16]
 8011b7a:	2b4d      	cmp	r3, #77	; 0x4d
 8011b7c:	d000      	beq.n	8011b80 <_tzset_unlocked_r+0x178>
 8011b7e:	e07e      	b.n	8011c7e <_tzset_unlocked_r+0x276>
 8011b80:	261a      	movs	r6, #26
 8011b82:	ab02      	add	r3, sp, #8
 8011b84:	18f6      	adds	r6, r6, r3
 8011b86:	ab0a      	add	r3, sp, #40	; 0x28
 8011b88:	9303      	str	r3, [sp, #12]
 8011b8a:	231e      	movs	r3, #30
 8011b8c:	aa02      	add	r2, sp, #8
 8011b8e:	189b      	adds	r3, r3, r2
 8011b90:	9302      	str	r3, [sp, #8]
 8011b92:	ab0a      	add	r3, sp, #40	; 0x28
 8011b94:	9301      	str	r3, [sp, #4]
 8011b96:	ab09      	add	r3, sp, #36	; 0x24
 8011b98:	9300      	str	r3, [sp, #0]
 8011b9a:	0032      	movs	r2, r6
 8011b9c:	0028      	movs	r0, r5
 8011b9e:	495a      	ldr	r1, [pc, #360]	; (8011d08 <_tzset_unlocked_r+0x300>)
 8011ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8011ba2:	f000 fcbf 	bl	8012524 <siscanf>
 8011ba6:	2803      	cmp	r0, #3
 8011ba8:	d000      	beq.n	8011bac <_tzset_unlocked_r+0x1a4>
 8011baa:	e746      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011bac:	8831      	ldrh	r1, [r6, #0]
 8011bae:	1e4b      	subs	r3, r1, #1
 8011bb0:	2b0b      	cmp	r3, #11
 8011bb2:	d900      	bls.n	8011bb6 <_tzset_unlocked_r+0x1ae>
 8011bb4:	e741      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011bb6:	ab02      	add	r3, sp, #8
 8011bb8:	8b9a      	ldrh	r2, [r3, #28]
 8011bba:	1e53      	subs	r3, r2, #1
 8011bbc:	2b04      	cmp	r3, #4
 8011bbe:	d900      	bls.n	8011bc2 <_tzset_unlocked_r+0x1ba>
 8011bc0:	e73b      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011bc2:	ab02      	add	r3, sp, #8
 8011bc4:	8bdb      	ldrh	r3, [r3, #30]
 8011bc6:	2b06      	cmp	r3, #6
 8011bc8:	d900      	bls.n	8011bcc <_tzset_unlocked_r+0x1c4>
 8011bca:	e736      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011bcc:	9804      	ldr	r0, [sp, #16]
 8011bce:	6061      	str	r1, [r4, #4]
 8011bd0:	7020      	strb	r0, [r4, #0]
 8011bd2:	60a2      	str	r2, [r4, #8]
 8011bd4:	60e3      	str	r3, [r4, #12]
 8011bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bd8:	18eb      	adds	r3, r5, r3
 8011bda:	9304      	str	r3, [sp, #16]
 8011bdc:	2302      	movs	r3, #2
 8011bde:	2616      	movs	r6, #22
 8011be0:	aa07      	add	r2, sp, #28
 8011be2:	8013      	strh	r3, [r2, #0]
 8011be4:	ab02      	add	r3, sp, #8
 8011be6:	18f6      	adds	r6, r6, r3
 8011be8:	2300      	movs	r3, #0
 8011bea:	ad08      	add	r5, sp, #32
 8011bec:	8033      	strh	r3, [r6, #0]
 8011bee:	802b      	strh	r3, [r5, #0]
 8011bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8011bf2:	9b04      	ldr	r3, [sp, #16]
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b2f      	cmp	r3, #47	; 0x2f
 8011bf8:	d108      	bne.n	8011c0c <_tzset_unlocked_r+0x204>
 8011bfa:	ab0a      	add	r3, sp, #40	; 0x28
 8011bfc:	4943      	ldr	r1, [pc, #268]	; (8011d0c <_tzset_unlocked_r+0x304>)
 8011bfe:	9804      	ldr	r0, [sp, #16]
 8011c00:	9303      	str	r3, [sp, #12]
 8011c02:	9502      	str	r5, [sp, #8]
 8011c04:	9301      	str	r3, [sp, #4]
 8011c06:	9600      	str	r6, [sp, #0]
 8011c08:	f000 fc8c 	bl	8012524 <siscanf>
 8011c0c:	233c      	movs	r3, #60	; 0x3c
 8011c0e:	8832      	ldrh	r2, [r6, #0]
 8011c10:	4353      	muls	r3, r2
 8011c12:	882a      	ldrh	r2, [r5, #0]
 8011c14:	189b      	adds	r3, r3, r2
 8011c16:	aa07      	add	r2, sp, #28
 8011c18:	8811      	ldrh	r1, [r2, #0]
 8011c1a:	22e1      	movs	r2, #225	; 0xe1
 8011c1c:	0112      	lsls	r2, r2, #4
 8011c1e:	434a      	muls	r2, r1
 8011c20:	189b      	adds	r3, r3, r2
 8011c22:	6123      	str	r3, [r4, #16]
 8011c24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c26:	9b04      	ldr	r3, [sp, #16]
 8011c28:	4694      	mov	ip, r2
 8011c2a:	4463      	add	r3, ip
 8011c2c:	001d      	movs	r5, r3
 8011c2e:	9b05      	ldr	r3, [sp, #20]
 8011c30:	3428      	adds	r4, #40	; 0x28
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d121      	bne.n	8011c7a <_tzset_unlocked_r+0x272>
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff fe22 	bl	8011880 <__tzcalc_limits>
 8011c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c3e:	4b29      	ldr	r3, [pc, #164]	; (8011ce4 <_tzset_unlocked_r+0x2dc>)
 8011c40:	601a      	str	r2, [r3, #0]
 8011c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c44:	1a9b      	subs	r3, r3, r2
 8011c46:	1e5a      	subs	r2, r3, #1
 8011c48:	4193      	sbcs	r3, r2
 8011c4a:	4a28      	ldr	r2, [pc, #160]	; (8011cec <_tzset_unlocked_r+0x2e4>)
 8011c4c:	6013      	str	r3, [r2, #0]
 8011c4e:	e6f4      	b.n	8011a3a <_tzset_unlocked_r+0x32>
 8011c50:	2201      	movs	r2, #1
 8011c52:	3b2b      	subs	r3, #43	; 0x2b
 8011c54:	9204      	str	r2, [sp, #16]
 8011c56:	425a      	negs	r2, r3
 8011c58:	4153      	adcs	r3, r2
 8011c5a:	18ed      	adds	r5, r5, r3
 8011c5c:	e766      	b.n	8011b2c <_tzset_unlocked_r+0x124>
 8011c5e:	233c      	movs	r3, #60	; 0x3c
 8011c60:	8822      	ldrh	r2, [r4, #0]
 8011c62:	9c04      	ldr	r4, [sp, #16]
 8011c64:	4353      	muls	r3, r2
 8011c66:	8832      	ldrh	r2, [r6, #0]
 8011c68:	189b      	adds	r3, r3, r2
 8011c6a:	aa02      	add	r2, sp, #8
 8011c6c:	8a91      	ldrh	r1, [r2, #20]
 8011c6e:	22e1      	movs	r2, #225	; 0xe1
 8011c70:	0112      	lsls	r2, r2, #4
 8011c72:	434a      	muls	r2, r1
 8011c74:	189b      	adds	r3, r3, r2
 8011c76:	435c      	muls	r4, r3
 8011c78:	e771      	b.n	8011b5e <_tzset_unlocked_r+0x156>
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	e775      	b.n	8011b6a <_tzset_unlocked_r+0x162>
 8011c7e:	9b04      	ldr	r3, [sp, #16]
 8011c80:	2644      	movs	r6, #68	; 0x44
 8011c82:	2b4a      	cmp	r3, #74	; 0x4a
 8011c84:	d101      	bne.n	8011c8a <_tzset_unlocked_r+0x282>
 8011c86:	001e      	movs	r6, r3
 8011c88:	3501      	adds	r5, #1
 8011c8a:	220a      	movs	r2, #10
 8011c8c:	0028      	movs	r0, r5
 8011c8e:	a90b      	add	r1, sp, #44	; 0x2c
 8011c90:	f000 fd1c 	bl	80126cc <strtoul>
 8011c94:	231e      	movs	r3, #30
 8011c96:	aa02      	add	r2, sp, #8
 8011c98:	189b      	adds	r3, r3, r2
 8011c9a:	8018      	strh	r0, [r3, #0]
 8011c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c9e:	9304      	str	r3, [sp, #16]
 8011ca0:	42ab      	cmp	r3, r5
 8011ca2:	d116      	bne.n	8011cd2 <_tzset_unlocked_r+0x2ca>
 8011ca4:	9b05      	ldr	r3, [sp, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d108      	bne.n	8011cbc <_tzset_unlocked_r+0x2b4>
 8011caa:	334d      	adds	r3, #77	; 0x4d
 8011cac:	723b      	strb	r3, [r7, #8]
 8011cae:	3b4a      	subs	r3, #74	; 0x4a
 8011cb0:	60fb      	str	r3, [r7, #12]
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	613b      	str	r3, [r7, #16]
 8011cb6:	9b05      	ldr	r3, [sp, #20]
 8011cb8:	617b      	str	r3, [r7, #20]
 8011cba:	e78f      	b.n	8011bdc <_tzset_unlocked_r+0x1d4>
 8011cbc:	003b      	movs	r3, r7
 8011cbe:	224d      	movs	r2, #77	; 0x4d
 8011cc0:	3330      	adds	r3, #48	; 0x30
 8011cc2:	701a      	strb	r2, [r3, #0]
 8011cc4:	230b      	movs	r3, #11
 8011cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8011cc8:	3b0a      	subs	r3, #10
 8011cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ccc:	2300      	movs	r3, #0
 8011cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011cd0:	e784      	b.n	8011bdc <_tzset_unlocked_r+0x1d4>
 8011cd2:	b280      	uxth	r0, r0
 8011cd4:	7026      	strb	r6, [r4, #0]
 8011cd6:	60e0      	str	r0, [r4, #12]
 8011cd8:	e780      	b.n	8011bdc <_tzset_unlocked_r+0x1d4>
 8011cda:	46c0      	nop			; (mov r8, r8)
 8011cdc:	08018110 	.word	0x08018110
 8011ce0:	20001268 	.word	0x20001268
 8011ce4:	20001270 	.word	0x20001270
 8011ce8:	08018113 	.word	0x08018113
 8011cec:	2000126c 	.word	0x2000126c
 8011cf0:	20000190 	.word	0x20000190
 8011cf4:	08018117 	.word	0x08018117
 8011cf8:	2000125b 	.word	0x2000125b
 8011cfc:	0801813a 	.word	0x0801813a
 8011d00:	20001250 	.word	0x20001250
 8011d04:	fffff1f0 	.word	0xfffff1f0
 8011d08:	08018126 	.word	0x08018126
 8011d0c:	08018139 	.word	0x08018139

08011d10 <div>:
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	000e      	movs	r6, r1
 8011d14:	0004      	movs	r4, r0
 8011d16:	0011      	movs	r1, r2
 8011d18:	0030      	movs	r0, r6
 8011d1a:	0015      	movs	r5, r2
 8011d1c:	f7ee fb80 	bl	8000420 <__aeabi_idivmod>
 8011d20:	2e00      	cmp	r6, #0
 8011d22:	db07      	blt.n	8011d34 <div+0x24>
 8011d24:	2900      	cmp	r1, #0
 8011d26:	da01      	bge.n	8011d2c <div+0x1c>
 8011d28:	3001      	adds	r0, #1
 8011d2a:	1b49      	subs	r1, r1, r5
 8011d2c:	6020      	str	r0, [r4, #0]
 8011d2e:	0020      	movs	r0, r4
 8011d30:	6061      	str	r1, [r4, #4]
 8011d32:	bd70      	pop	{r4, r5, r6, pc}
 8011d34:	2900      	cmp	r1, #0
 8011d36:	ddf9      	ble.n	8011d2c <div+0x1c>
 8011d38:	3801      	subs	r0, #1
 8011d3a:	1949      	adds	r1, r1, r5
 8011d3c:	e7f6      	b.n	8011d2c <div+0x1c>
	...

08011d40 <_findenv_r>:
 8011d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d42:	000d      	movs	r5, r1
 8011d44:	b085      	sub	sp, #20
 8011d46:	0006      	movs	r6, r0
 8011d48:	9203      	str	r2, [sp, #12]
 8011d4a:	f000 fccb 	bl	80126e4 <__env_lock>
 8011d4e:	4f19      	ldr	r7, [pc, #100]	; (8011db4 <_findenv_r+0x74>)
 8011d50:	002b      	movs	r3, r5
 8011d52:	683c      	ldr	r4, [r7, #0]
 8011d54:	2c00      	cmp	r4, #0
 8011d56:	d106      	bne.n	8011d66 <_findenv_r+0x26>
 8011d58:	0030      	movs	r0, r6
 8011d5a:	f000 fccb 	bl	80126f4 <__env_unlock>
 8011d5e:	2000      	movs	r0, #0
 8011d60:	b005      	add	sp, #20
 8011d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d64:	3301      	adds	r3, #1
 8011d66:	781a      	ldrb	r2, [r3, #0]
 8011d68:	2a00      	cmp	r2, #0
 8011d6a:	d01f      	beq.n	8011dac <_findenv_r+0x6c>
 8011d6c:	2a3d      	cmp	r2, #61	; 0x3d
 8011d6e:	d1f9      	bne.n	8011d64 <_findenv_r+0x24>
 8011d70:	e7f2      	b.n	8011d58 <_findenv_r+0x18>
 8011d72:	3404      	adds	r4, #4
 8011d74:	6820      	ldr	r0, [r4, #0]
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d0ee      	beq.n	8011d58 <_findenv_r+0x18>
 8011d7a:	0029      	movs	r1, r5
 8011d7c:	9a01      	ldr	r2, [sp, #4]
 8011d7e:	f000 fc03 	bl	8012588 <strncmp>
 8011d82:	2800      	cmp	r0, #0
 8011d84:	d1f5      	bne.n	8011d72 <_findenv_r+0x32>
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	9a01      	ldr	r2, [sp, #4]
 8011d8a:	189a      	adds	r2, r3, r2
 8011d8c:	9202      	str	r2, [sp, #8]
 8011d8e:	9a01      	ldr	r2, [sp, #4]
 8011d90:	5c9b      	ldrb	r3, [r3, r2]
 8011d92:	2b3d      	cmp	r3, #61	; 0x3d
 8011d94:	d1ed      	bne.n	8011d72 <_findenv_r+0x32>
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	0030      	movs	r0, r6
 8011d9a:	1ae4      	subs	r4, r4, r3
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	10a4      	asrs	r4, r4, #2
 8011da0:	601c      	str	r4, [r3, #0]
 8011da2:	f000 fca7 	bl	80126f4 <__env_unlock>
 8011da6:	9802      	ldr	r0, [sp, #8]
 8011da8:	3001      	adds	r0, #1
 8011daa:	e7d9      	b.n	8011d60 <_findenv_r+0x20>
 8011dac:	1b5b      	subs	r3, r3, r5
 8011dae:	9301      	str	r3, [sp, #4]
 8011db0:	e7e0      	b.n	8011d74 <_findenv_r+0x34>
 8011db2:	46c0      	nop			; (mov r8, r8)
 8011db4:	20000010 	.word	0x20000010

08011db8 <_getenv_r>:
 8011db8:	b507      	push	{r0, r1, r2, lr}
 8011dba:	aa01      	add	r2, sp, #4
 8011dbc:	f7ff ffc0 	bl	8011d40 <_findenv_r>
 8011dc0:	bd0e      	pop	{r1, r2, r3, pc}
	...

08011dc4 <__gettzinfo>:
 8011dc4:	4800      	ldr	r0, [pc, #0]	; (8011dc8 <__gettzinfo+0x4>)
 8011dc6:	4770      	bx	lr
 8011dc8:	20000198 	.word	0x20000198

08011dcc <__retarget_lock_acquire>:
 8011dcc:	4770      	bx	lr

08011dce <__retarget_lock_acquire_recursive>:
 8011dce:	4770      	bx	lr

08011dd0 <__retarget_lock_release>:
 8011dd0:	4770      	bx	lr

08011dd2 <__retarget_lock_release_recursive>:
 8011dd2:	4770      	bx	lr

08011dd4 <free>:
 8011dd4:	b510      	push	{r4, lr}
 8011dd6:	4b03      	ldr	r3, [pc, #12]	; (8011de4 <free+0x10>)
 8011dd8:	0001      	movs	r1, r0
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	f000 f804 	bl	8011de8 <_free_r>
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	46c0      	nop			; (mov r8, r8)
 8011de4:	2000012c 	.word	0x2000012c

08011de8 <_free_r>:
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	0005      	movs	r5, r0
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d010      	beq.n	8011e12 <_free_r+0x2a>
 8011df0:	1f0c      	subs	r4, r1, #4
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	da00      	bge.n	8011dfa <_free_r+0x12>
 8011df8:	18e4      	adds	r4, r4, r3
 8011dfa:	0028      	movs	r0, r5
 8011dfc:	f000 fcaa 	bl	8012754 <__malloc_lock>
 8011e00:	4a1d      	ldr	r2, [pc, #116]	; (8011e78 <_free_r+0x90>)
 8011e02:	6813      	ldr	r3, [r2, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d105      	bne.n	8011e14 <_free_r+0x2c>
 8011e08:	6063      	str	r3, [r4, #4]
 8011e0a:	6014      	str	r4, [r2, #0]
 8011e0c:	0028      	movs	r0, r5
 8011e0e:	f000 fca9 	bl	8012764 <__malloc_unlock>
 8011e12:	bd70      	pop	{r4, r5, r6, pc}
 8011e14:	42a3      	cmp	r3, r4
 8011e16:	d908      	bls.n	8011e2a <_free_r+0x42>
 8011e18:	6821      	ldr	r1, [r4, #0]
 8011e1a:	1860      	adds	r0, r4, r1
 8011e1c:	4283      	cmp	r3, r0
 8011e1e:	d1f3      	bne.n	8011e08 <_free_r+0x20>
 8011e20:	6818      	ldr	r0, [r3, #0]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	1841      	adds	r1, r0, r1
 8011e26:	6021      	str	r1, [r4, #0]
 8011e28:	e7ee      	b.n	8011e08 <_free_r+0x20>
 8011e2a:	001a      	movs	r2, r3
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d001      	beq.n	8011e36 <_free_r+0x4e>
 8011e32:	42a3      	cmp	r3, r4
 8011e34:	d9f9      	bls.n	8011e2a <_free_r+0x42>
 8011e36:	6811      	ldr	r1, [r2, #0]
 8011e38:	1850      	adds	r0, r2, r1
 8011e3a:	42a0      	cmp	r0, r4
 8011e3c:	d10b      	bne.n	8011e56 <_free_r+0x6e>
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	1809      	adds	r1, r1, r0
 8011e42:	1850      	adds	r0, r2, r1
 8011e44:	6011      	str	r1, [r2, #0]
 8011e46:	4283      	cmp	r3, r0
 8011e48:	d1e0      	bne.n	8011e0c <_free_r+0x24>
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	1841      	adds	r1, r0, r1
 8011e50:	6011      	str	r1, [r2, #0]
 8011e52:	6053      	str	r3, [r2, #4]
 8011e54:	e7da      	b.n	8011e0c <_free_r+0x24>
 8011e56:	42a0      	cmp	r0, r4
 8011e58:	d902      	bls.n	8011e60 <_free_r+0x78>
 8011e5a:	230c      	movs	r3, #12
 8011e5c:	602b      	str	r3, [r5, #0]
 8011e5e:	e7d5      	b.n	8011e0c <_free_r+0x24>
 8011e60:	6821      	ldr	r1, [r4, #0]
 8011e62:	1860      	adds	r0, r4, r1
 8011e64:	4283      	cmp	r3, r0
 8011e66:	d103      	bne.n	8011e70 <_free_r+0x88>
 8011e68:	6818      	ldr	r0, [r3, #0]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	1841      	adds	r1, r0, r1
 8011e6e:	6021      	str	r1, [r4, #0]
 8011e70:	6063      	str	r3, [r4, #4]
 8011e72:	6054      	str	r4, [r2, #4]
 8011e74:	e7ca      	b.n	8011e0c <_free_r+0x24>
 8011e76:	46c0      	nop			; (mov r8, r8)
 8011e78:	20001274 	.word	0x20001274

08011e7c <_malloc_r>:
 8011e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7e:	2303      	movs	r3, #3
 8011e80:	1ccd      	adds	r5, r1, #3
 8011e82:	439d      	bics	r5, r3
 8011e84:	3508      	adds	r5, #8
 8011e86:	0006      	movs	r6, r0
 8011e88:	2d0c      	cmp	r5, #12
 8011e8a:	d21f      	bcs.n	8011ecc <_malloc_r+0x50>
 8011e8c:	250c      	movs	r5, #12
 8011e8e:	42a9      	cmp	r1, r5
 8011e90:	d81e      	bhi.n	8011ed0 <_malloc_r+0x54>
 8011e92:	0030      	movs	r0, r6
 8011e94:	f000 fc5e 	bl	8012754 <__malloc_lock>
 8011e98:	4925      	ldr	r1, [pc, #148]	; (8011f30 <_malloc_r+0xb4>)
 8011e9a:	680a      	ldr	r2, [r1, #0]
 8011e9c:	0014      	movs	r4, r2
 8011e9e:	2c00      	cmp	r4, #0
 8011ea0:	d11a      	bne.n	8011ed8 <_malloc_r+0x5c>
 8011ea2:	4f24      	ldr	r7, [pc, #144]	; (8011f34 <_malloc_r+0xb8>)
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d104      	bne.n	8011eb4 <_malloc_r+0x38>
 8011eaa:	0021      	movs	r1, r4
 8011eac:	0030      	movs	r0, r6
 8011eae:	f000 fb27 	bl	8012500 <_sbrk_r>
 8011eb2:	6038      	str	r0, [r7, #0]
 8011eb4:	0029      	movs	r1, r5
 8011eb6:	0030      	movs	r0, r6
 8011eb8:	f000 fb22 	bl	8012500 <_sbrk_r>
 8011ebc:	1c43      	adds	r3, r0, #1
 8011ebe:	d12b      	bne.n	8011f18 <_malloc_r+0x9c>
 8011ec0:	230c      	movs	r3, #12
 8011ec2:	0030      	movs	r0, r6
 8011ec4:	6033      	str	r3, [r6, #0]
 8011ec6:	f000 fc4d 	bl	8012764 <__malloc_unlock>
 8011eca:	e003      	b.n	8011ed4 <_malloc_r+0x58>
 8011ecc:	2d00      	cmp	r5, #0
 8011ece:	dade      	bge.n	8011e8e <_malloc_r+0x12>
 8011ed0:	230c      	movs	r3, #12
 8011ed2:	6033      	str	r3, [r6, #0]
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed8:	6823      	ldr	r3, [r4, #0]
 8011eda:	1b5b      	subs	r3, r3, r5
 8011edc:	d419      	bmi.n	8011f12 <_malloc_r+0x96>
 8011ede:	2b0b      	cmp	r3, #11
 8011ee0:	d903      	bls.n	8011eea <_malloc_r+0x6e>
 8011ee2:	6023      	str	r3, [r4, #0]
 8011ee4:	18e4      	adds	r4, r4, r3
 8011ee6:	6025      	str	r5, [r4, #0]
 8011ee8:	e003      	b.n	8011ef2 <_malloc_r+0x76>
 8011eea:	6863      	ldr	r3, [r4, #4]
 8011eec:	42a2      	cmp	r2, r4
 8011eee:	d10e      	bne.n	8011f0e <_malloc_r+0x92>
 8011ef0:	600b      	str	r3, [r1, #0]
 8011ef2:	0030      	movs	r0, r6
 8011ef4:	f000 fc36 	bl	8012764 <__malloc_unlock>
 8011ef8:	0020      	movs	r0, r4
 8011efa:	2207      	movs	r2, #7
 8011efc:	300b      	adds	r0, #11
 8011efe:	1d23      	adds	r3, r4, #4
 8011f00:	4390      	bics	r0, r2
 8011f02:	1ac2      	subs	r2, r0, r3
 8011f04:	4298      	cmp	r0, r3
 8011f06:	d0e6      	beq.n	8011ed6 <_malloc_r+0x5a>
 8011f08:	1a1b      	subs	r3, r3, r0
 8011f0a:	50a3      	str	r3, [r4, r2]
 8011f0c:	e7e3      	b.n	8011ed6 <_malloc_r+0x5a>
 8011f0e:	6053      	str	r3, [r2, #4]
 8011f10:	e7ef      	b.n	8011ef2 <_malloc_r+0x76>
 8011f12:	0022      	movs	r2, r4
 8011f14:	6864      	ldr	r4, [r4, #4]
 8011f16:	e7c2      	b.n	8011e9e <_malloc_r+0x22>
 8011f18:	2303      	movs	r3, #3
 8011f1a:	1cc4      	adds	r4, r0, #3
 8011f1c:	439c      	bics	r4, r3
 8011f1e:	42a0      	cmp	r0, r4
 8011f20:	d0e1      	beq.n	8011ee6 <_malloc_r+0x6a>
 8011f22:	1a21      	subs	r1, r4, r0
 8011f24:	0030      	movs	r0, r6
 8011f26:	f000 faeb 	bl	8012500 <_sbrk_r>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	d1db      	bne.n	8011ee6 <_malloc_r+0x6a>
 8011f2e:	e7c7      	b.n	8011ec0 <_malloc_r+0x44>
 8011f30:	20001274 	.word	0x20001274
 8011f34:	20001278 	.word	0x20001278

08011f38 <__ssputs_r>:
 8011f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f3a:	688e      	ldr	r6, [r1, #8]
 8011f3c:	b085      	sub	sp, #20
 8011f3e:	0007      	movs	r7, r0
 8011f40:	000c      	movs	r4, r1
 8011f42:	9203      	str	r2, [sp, #12]
 8011f44:	9301      	str	r3, [sp, #4]
 8011f46:	429e      	cmp	r6, r3
 8011f48:	d83c      	bhi.n	8011fc4 <__ssputs_r+0x8c>
 8011f4a:	2390      	movs	r3, #144	; 0x90
 8011f4c:	898a      	ldrh	r2, [r1, #12]
 8011f4e:	00db      	lsls	r3, r3, #3
 8011f50:	421a      	tst	r2, r3
 8011f52:	d034      	beq.n	8011fbe <__ssputs_r+0x86>
 8011f54:	2503      	movs	r5, #3
 8011f56:	6909      	ldr	r1, [r1, #16]
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	1a5b      	subs	r3, r3, r1
 8011f5c:	9302      	str	r3, [sp, #8]
 8011f5e:	6963      	ldr	r3, [r4, #20]
 8011f60:	9802      	ldr	r0, [sp, #8]
 8011f62:	435d      	muls	r5, r3
 8011f64:	0feb      	lsrs	r3, r5, #31
 8011f66:	195d      	adds	r5, r3, r5
 8011f68:	9b01      	ldr	r3, [sp, #4]
 8011f6a:	106d      	asrs	r5, r5, #1
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	181b      	adds	r3, r3, r0
 8011f70:	42ab      	cmp	r3, r5
 8011f72:	d900      	bls.n	8011f76 <__ssputs_r+0x3e>
 8011f74:	001d      	movs	r5, r3
 8011f76:	0553      	lsls	r3, r2, #21
 8011f78:	d532      	bpl.n	8011fe0 <__ssputs_r+0xa8>
 8011f7a:	0029      	movs	r1, r5
 8011f7c:	0038      	movs	r0, r7
 8011f7e:	f7ff ff7d 	bl	8011e7c <_malloc_r>
 8011f82:	1e06      	subs	r6, r0, #0
 8011f84:	d109      	bne.n	8011f9a <__ssputs_r+0x62>
 8011f86:	230c      	movs	r3, #12
 8011f88:	603b      	str	r3, [r7, #0]
 8011f8a:	2340      	movs	r3, #64	; 0x40
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	89a2      	ldrh	r2, [r4, #12]
 8011f90:	4240      	negs	r0, r0
 8011f92:	4313      	orrs	r3, r2
 8011f94:	81a3      	strh	r3, [r4, #12]
 8011f96:	b005      	add	sp, #20
 8011f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f9a:	9a02      	ldr	r2, [sp, #8]
 8011f9c:	6921      	ldr	r1, [r4, #16]
 8011f9e:	f000 fbbc 	bl	801271a <memcpy>
 8011fa2:	89a3      	ldrh	r3, [r4, #12]
 8011fa4:	4a14      	ldr	r2, [pc, #80]	; (8011ff8 <__ssputs_r+0xc0>)
 8011fa6:	401a      	ands	r2, r3
 8011fa8:	2380      	movs	r3, #128	; 0x80
 8011faa:	4313      	orrs	r3, r2
 8011fac:	81a3      	strh	r3, [r4, #12]
 8011fae:	9b02      	ldr	r3, [sp, #8]
 8011fb0:	6126      	str	r6, [r4, #16]
 8011fb2:	18f6      	adds	r6, r6, r3
 8011fb4:	6026      	str	r6, [r4, #0]
 8011fb6:	6165      	str	r5, [r4, #20]
 8011fb8:	9e01      	ldr	r6, [sp, #4]
 8011fba:	1aed      	subs	r5, r5, r3
 8011fbc:	60a5      	str	r5, [r4, #8]
 8011fbe:	9b01      	ldr	r3, [sp, #4]
 8011fc0:	429e      	cmp	r6, r3
 8011fc2:	d900      	bls.n	8011fc6 <__ssputs_r+0x8e>
 8011fc4:	9e01      	ldr	r6, [sp, #4]
 8011fc6:	0032      	movs	r2, r6
 8011fc8:	9903      	ldr	r1, [sp, #12]
 8011fca:	6820      	ldr	r0, [r4, #0]
 8011fcc:	f000 fbae 	bl	801272c <memmove>
 8011fd0:	68a3      	ldr	r3, [r4, #8]
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	1b9b      	subs	r3, r3, r6
 8011fd6:	60a3      	str	r3, [r4, #8]
 8011fd8:	6823      	ldr	r3, [r4, #0]
 8011fda:	199e      	adds	r6, r3, r6
 8011fdc:	6026      	str	r6, [r4, #0]
 8011fde:	e7da      	b.n	8011f96 <__ssputs_r+0x5e>
 8011fe0:	002a      	movs	r2, r5
 8011fe2:	0038      	movs	r0, r7
 8011fe4:	f000 fbc6 	bl	8012774 <_realloc_r>
 8011fe8:	1e06      	subs	r6, r0, #0
 8011fea:	d1e0      	bne.n	8011fae <__ssputs_r+0x76>
 8011fec:	0038      	movs	r0, r7
 8011fee:	6921      	ldr	r1, [r4, #16]
 8011ff0:	f7ff fefa 	bl	8011de8 <_free_r>
 8011ff4:	e7c7      	b.n	8011f86 <__ssputs_r+0x4e>
 8011ff6:	46c0      	nop			; (mov r8, r8)
 8011ff8:	fffffb7f 	.word	0xfffffb7f

08011ffc <_svfiprintf_r>:
 8011ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ffe:	b0a1      	sub	sp, #132	; 0x84
 8012000:	9003      	str	r0, [sp, #12]
 8012002:	001d      	movs	r5, r3
 8012004:	898b      	ldrh	r3, [r1, #12]
 8012006:	000f      	movs	r7, r1
 8012008:	0016      	movs	r6, r2
 801200a:	061b      	lsls	r3, r3, #24
 801200c:	d511      	bpl.n	8012032 <_svfiprintf_r+0x36>
 801200e:	690b      	ldr	r3, [r1, #16]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d10e      	bne.n	8012032 <_svfiprintf_r+0x36>
 8012014:	2140      	movs	r1, #64	; 0x40
 8012016:	f7ff ff31 	bl	8011e7c <_malloc_r>
 801201a:	6038      	str	r0, [r7, #0]
 801201c:	6138      	str	r0, [r7, #16]
 801201e:	2800      	cmp	r0, #0
 8012020:	d105      	bne.n	801202e <_svfiprintf_r+0x32>
 8012022:	230c      	movs	r3, #12
 8012024:	9a03      	ldr	r2, [sp, #12]
 8012026:	3801      	subs	r0, #1
 8012028:	6013      	str	r3, [r2, #0]
 801202a:	b021      	add	sp, #132	; 0x84
 801202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202e:	2340      	movs	r3, #64	; 0x40
 8012030:	617b      	str	r3, [r7, #20]
 8012032:	2300      	movs	r3, #0
 8012034:	ac08      	add	r4, sp, #32
 8012036:	6163      	str	r3, [r4, #20]
 8012038:	3320      	adds	r3, #32
 801203a:	7663      	strb	r3, [r4, #25]
 801203c:	3310      	adds	r3, #16
 801203e:	76a3      	strb	r3, [r4, #26]
 8012040:	9507      	str	r5, [sp, #28]
 8012042:	0035      	movs	r5, r6
 8012044:	782b      	ldrb	r3, [r5, #0]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <_svfiprintf_r+0x52>
 801204a:	2b25      	cmp	r3, #37	; 0x25
 801204c:	d147      	bne.n	80120de <_svfiprintf_r+0xe2>
 801204e:	1bab      	subs	r3, r5, r6
 8012050:	9305      	str	r3, [sp, #20]
 8012052:	42b5      	cmp	r5, r6
 8012054:	d00c      	beq.n	8012070 <_svfiprintf_r+0x74>
 8012056:	0032      	movs	r2, r6
 8012058:	0039      	movs	r1, r7
 801205a:	9803      	ldr	r0, [sp, #12]
 801205c:	f7ff ff6c 	bl	8011f38 <__ssputs_r>
 8012060:	1c43      	adds	r3, r0, #1
 8012062:	d100      	bne.n	8012066 <_svfiprintf_r+0x6a>
 8012064:	e0ae      	b.n	80121c4 <_svfiprintf_r+0x1c8>
 8012066:	6962      	ldr	r2, [r4, #20]
 8012068:	9b05      	ldr	r3, [sp, #20]
 801206a:	4694      	mov	ip, r2
 801206c:	4463      	add	r3, ip
 801206e:	6163      	str	r3, [r4, #20]
 8012070:	782b      	ldrb	r3, [r5, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d100      	bne.n	8012078 <_svfiprintf_r+0x7c>
 8012076:	e0a5      	b.n	80121c4 <_svfiprintf_r+0x1c8>
 8012078:	2201      	movs	r2, #1
 801207a:	2300      	movs	r3, #0
 801207c:	4252      	negs	r2, r2
 801207e:	6062      	str	r2, [r4, #4]
 8012080:	a904      	add	r1, sp, #16
 8012082:	3254      	adds	r2, #84	; 0x54
 8012084:	1852      	adds	r2, r2, r1
 8012086:	1c6e      	adds	r6, r5, #1
 8012088:	6023      	str	r3, [r4, #0]
 801208a:	60e3      	str	r3, [r4, #12]
 801208c:	60a3      	str	r3, [r4, #8]
 801208e:	7013      	strb	r3, [r2, #0]
 8012090:	65a3      	str	r3, [r4, #88]	; 0x58
 8012092:	2205      	movs	r2, #5
 8012094:	7831      	ldrb	r1, [r6, #0]
 8012096:	4854      	ldr	r0, [pc, #336]	; (80121e8 <_svfiprintf_r+0x1ec>)
 8012098:	f000 fb34 	bl	8012704 <memchr>
 801209c:	1c75      	adds	r5, r6, #1
 801209e:	2800      	cmp	r0, #0
 80120a0:	d11f      	bne.n	80120e2 <_svfiprintf_r+0xe6>
 80120a2:	6822      	ldr	r2, [r4, #0]
 80120a4:	06d3      	lsls	r3, r2, #27
 80120a6:	d504      	bpl.n	80120b2 <_svfiprintf_r+0xb6>
 80120a8:	2353      	movs	r3, #83	; 0x53
 80120aa:	a904      	add	r1, sp, #16
 80120ac:	185b      	adds	r3, r3, r1
 80120ae:	2120      	movs	r1, #32
 80120b0:	7019      	strb	r1, [r3, #0]
 80120b2:	0713      	lsls	r3, r2, #28
 80120b4:	d504      	bpl.n	80120c0 <_svfiprintf_r+0xc4>
 80120b6:	2353      	movs	r3, #83	; 0x53
 80120b8:	a904      	add	r1, sp, #16
 80120ba:	185b      	adds	r3, r3, r1
 80120bc:	212b      	movs	r1, #43	; 0x2b
 80120be:	7019      	strb	r1, [r3, #0]
 80120c0:	7833      	ldrb	r3, [r6, #0]
 80120c2:	2b2a      	cmp	r3, #42	; 0x2a
 80120c4:	d016      	beq.n	80120f4 <_svfiprintf_r+0xf8>
 80120c6:	0035      	movs	r5, r6
 80120c8:	2100      	movs	r1, #0
 80120ca:	200a      	movs	r0, #10
 80120cc:	68e3      	ldr	r3, [r4, #12]
 80120ce:	782a      	ldrb	r2, [r5, #0]
 80120d0:	1c6e      	adds	r6, r5, #1
 80120d2:	3a30      	subs	r2, #48	; 0x30
 80120d4:	2a09      	cmp	r2, #9
 80120d6:	d94e      	bls.n	8012176 <_svfiprintf_r+0x17a>
 80120d8:	2900      	cmp	r1, #0
 80120da:	d111      	bne.n	8012100 <_svfiprintf_r+0x104>
 80120dc:	e017      	b.n	801210e <_svfiprintf_r+0x112>
 80120de:	3501      	adds	r5, #1
 80120e0:	e7b0      	b.n	8012044 <_svfiprintf_r+0x48>
 80120e2:	4b41      	ldr	r3, [pc, #260]	; (80121e8 <_svfiprintf_r+0x1ec>)
 80120e4:	6822      	ldr	r2, [r4, #0]
 80120e6:	1ac0      	subs	r0, r0, r3
 80120e8:	2301      	movs	r3, #1
 80120ea:	4083      	lsls	r3, r0
 80120ec:	4313      	orrs	r3, r2
 80120ee:	002e      	movs	r6, r5
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	e7ce      	b.n	8012092 <_svfiprintf_r+0x96>
 80120f4:	9b07      	ldr	r3, [sp, #28]
 80120f6:	1d19      	adds	r1, r3, #4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	9107      	str	r1, [sp, #28]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	db01      	blt.n	8012104 <_svfiprintf_r+0x108>
 8012100:	930b      	str	r3, [sp, #44]	; 0x2c
 8012102:	e004      	b.n	801210e <_svfiprintf_r+0x112>
 8012104:	425b      	negs	r3, r3
 8012106:	60e3      	str	r3, [r4, #12]
 8012108:	2302      	movs	r3, #2
 801210a:	4313      	orrs	r3, r2
 801210c:	6023      	str	r3, [r4, #0]
 801210e:	782b      	ldrb	r3, [r5, #0]
 8012110:	2b2e      	cmp	r3, #46	; 0x2e
 8012112:	d10a      	bne.n	801212a <_svfiprintf_r+0x12e>
 8012114:	786b      	ldrb	r3, [r5, #1]
 8012116:	2b2a      	cmp	r3, #42	; 0x2a
 8012118:	d135      	bne.n	8012186 <_svfiprintf_r+0x18a>
 801211a:	9b07      	ldr	r3, [sp, #28]
 801211c:	3502      	adds	r5, #2
 801211e:	1d1a      	adds	r2, r3, #4
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	9207      	str	r2, [sp, #28]
 8012124:	2b00      	cmp	r3, #0
 8012126:	db2b      	blt.n	8012180 <_svfiprintf_r+0x184>
 8012128:	9309      	str	r3, [sp, #36]	; 0x24
 801212a:	4e30      	ldr	r6, [pc, #192]	; (80121ec <_svfiprintf_r+0x1f0>)
 801212c:	2203      	movs	r2, #3
 801212e:	0030      	movs	r0, r6
 8012130:	7829      	ldrb	r1, [r5, #0]
 8012132:	f000 fae7 	bl	8012704 <memchr>
 8012136:	2800      	cmp	r0, #0
 8012138:	d006      	beq.n	8012148 <_svfiprintf_r+0x14c>
 801213a:	2340      	movs	r3, #64	; 0x40
 801213c:	1b80      	subs	r0, r0, r6
 801213e:	4083      	lsls	r3, r0
 8012140:	6822      	ldr	r2, [r4, #0]
 8012142:	3501      	adds	r5, #1
 8012144:	4313      	orrs	r3, r2
 8012146:	6023      	str	r3, [r4, #0]
 8012148:	7829      	ldrb	r1, [r5, #0]
 801214a:	2206      	movs	r2, #6
 801214c:	4828      	ldr	r0, [pc, #160]	; (80121f0 <_svfiprintf_r+0x1f4>)
 801214e:	1c6e      	adds	r6, r5, #1
 8012150:	7621      	strb	r1, [r4, #24]
 8012152:	f000 fad7 	bl	8012704 <memchr>
 8012156:	2800      	cmp	r0, #0
 8012158:	d03c      	beq.n	80121d4 <_svfiprintf_r+0x1d8>
 801215a:	4b26      	ldr	r3, [pc, #152]	; (80121f4 <_svfiprintf_r+0x1f8>)
 801215c:	2b00      	cmp	r3, #0
 801215e:	d125      	bne.n	80121ac <_svfiprintf_r+0x1b0>
 8012160:	2207      	movs	r2, #7
 8012162:	9b07      	ldr	r3, [sp, #28]
 8012164:	3307      	adds	r3, #7
 8012166:	4393      	bics	r3, r2
 8012168:	3308      	adds	r3, #8
 801216a:	9307      	str	r3, [sp, #28]
 801216c:	6963      	ldr	r3, [r4, #20]
 801216e:	9a04      	ldr	r2, [sp, #16]
 8012170:	189b      	adds	r3, r3, r2
 8012172:	6163      	str	r3, [r4, #20]
 8012174:	e765      	b.n	8012042 <_svfiprintf_r+0x46>
 8012176:	4343      	muls	r3, r0
 8012178:	0035      	movs	r5, r6
 801217a:	2101      	movs	r1, #1
 801217c:	189b      	adds	r3, r3, r2
 801217e:	e7a6      	b.n	80120ce <_svfiprintf_r+0xd2>
 8012180:	2301      	movs	r3, #1
 8012182:	425b      	negs	r3, r3
 8012184:	e7d0      	b.n	8012128 <_svfiprintf_r+0x12c>
 8012186:	2300      	movs	r3, #0
 8012188:	200a      	movs	r0, #10
 801218a:	001a      	movs	r2, r3
 801218c:	3501      	adds	r5, #1
 801218e:	6063      	str	r3, [r4, #4]
 8012190:	7829      	ldrb	r1, [r5, #0]
 8012192:	1c6e      	adds	r6, r5, #1
 8012194:	3930      	subs	r1, #48	; 0x30
 8012196:	2909      	cmp	r1, #9
 8012198:	d903      	bls.n	80121a2 <_svfiprintf_r+0x1a6>
 801219a:	2b00      	cmp	r3, #0
 801219c:	d0c5      	beq.n	801212a <_svfiprintf_r+0x12e>
 801219e:	9209      	str	r2, [sp, #36]	; 0x24
 80121a0:	e7c3      	b.n	801212a <_svfiprintf_r+0x12e>
 80121a2:	4342      	muls	r2, r0
 80121a4:	0035      	movs	r5, r6
 80121a6:	2301      	movs	r3, #1
 80121a8:	1852      	adds	r2, r2, r1
 80121aa:	e7f1      	b.n	8012190 <_svfiprintf_r+0x194>
 80121ac:	ab07      	add	r3, sp, #28
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	003a      	movs	r2, r7
 80121b2:	0021      	movs	r1, r4
 80121b4:	4b10      	ldr	r3, [pc, #64]	; (80121f8 <_svfiprintf_r+0x1fc>)
 80121b6:	9803      	ldr	r0, [sp, #12]
 80121b8:	e000      	b.n	80121bc <_svfiprintf_r+0x1c0>
 80121ba:	bf00      	nop
 80121bc:	9004      	str	r0, [sp, #16]
 80121be:	9b04      	ldr	r3, [sp, #16]
 80121c0:	3301      	adds	r3, #1
 80121c2:	d1d3      	bne.n	801216c <_svfiprintf_r+0x170>
 80121c4:	89bb      	ldrh	r3, [r7, #12]
 80121c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80121c8:	065b      	lsls	r3, r3, #25
 80121ca:	d400      	bmi.n	80121ce <_svfiprintf_r+0x1d2>
 80121cc:	e72d      	b.n	801202a <_svfiprintf_r+0x2e>
 80121ce:	2001      	movs	r0, #1
 80121d0:	4240      	negs	r0, r0
 80121d2:	e72a      	b.n	801202a <_svfiprintf_r+0x2e>
 80121d4:	ab07      	add	r3, sp, #28
 80121d6:	9300      	str	r3, [sp, #0]
 80121d8:	003a      	movs	r2, r7
 80121da:	0021      	movs	r1, r4
 80121dc:	4b06      	ldr	r3, [pc, #24]	; (80121f8 <_svfiprintf_r+0x1fc>)
 80121de:	9803      	ldr	r0, [sp, #12]
 80121e0:	f000 f87c 	bl	80122dc <_printf_i>
 80121e4:	e7ea      	b.n	80121bc <_svfiprintf_r+0x1c0>
 80121e6:	46c0      	nop			; (mov r8, r8)
 80121e8:	080182b0 	.word	0x080182b0
 80121ec:	080182b6 	.word	0x080182b6
 80121f0:	080182ba 	.word	0x080182ba
 80121f4:	00000000 	.word	0x00000000
 80121f8:	08011f39 	.word	0x08011f39

080121fc <_printf_common>:
 80121fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121fe:	0015      	movs	r5, r2
 8012200:	9301      	str	r3, [sp, #4]
 8012202:	688a      	ldr	r2, [r1, #8]
 8012204:	690b      	ldr	r3, [r1, #16]
 8012206:	000c      	movs	r4, r1
 8012208:	9000      	str	r0, [sp, #0]
 801220a:	4293      	cmp	r3, r2
 801220c:	da00      	bge.n	8012210 <_printf_common+0x14>
 801220e:	0013      	movs	r3, r2
 8012210:	0022      	movs	r2, r4
 8012212:	602b      	str	r3, [r5, #0]
 8012214:	3243      	adds	r2, #67	; 0x43
 8012216:	7812      	ldrb	r2, [r2, #0]
 8012218:	2a00      	cmp	r2, #0
 801221a:	d001      	beq.n	8012220 <_printf_common+0x24>
 801221c:	3301      	adds	r3, #1
 801221e:	602b      	str	r3, [r5, #0]
 8012220:	6823      	ldr	r3, [r4, #0]
 8012222:	069b      	lsls	r3, r3, #26
 8012224:	d502      	bpl.n	801222c <_printf_common+0x30>
 8012226:	682b      	ldr	r3, [r5, #0]
 8012228:	3302      	adds	r3, #2
 801222a:	602b      	str	r3, [r5, #0]
 801222c:	6822      	ldr	r2, [r4, #0]
 801222e:	2306      	movs	r3, #6
 8012230:	0017      	movs	r7, r2
 8012232:	401f      	ands	r7, r3
 8012234:	421a      	tst	r2, r3
 8012236:	d027      	beq.n	8012288 <_printf_common+0x8c>
 8012238:	0023      	movs	r3, r4
 801223a:	3343      	adds	r3, #67	; 0x43
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	1e5a      	subs	r2, r3, #1
 8012240:	4193      	sbcs	r3, r2
 8012242:	6822      	ldr	r2, [r4, #0]
 8012244:	0692      	lsls	r2, r2, #26
 8012246:	d430      	bmi.n	80122aa <_printf_common+0xae>
 8012248:	0022      	movs	r2, r4
 801224a:	9901      	ldr	r1, [sp, #4]
 801224c:	9800      	ldr	r0, [sp, #0]
 801224e:	9e08      	ldr	r6, [sp, #32]
 8012250:	3243      	adds	r2, #67	; 0x43
 8012252:	47b0      	blx	r6
 8012254:	1c43      	adds	r3, r0, #1
 8012256:	d025      	beq.n	80122a4 <_printf_common+0xa8>
 8012258:	2306      	movs	r3, #6
 801225a:	6820      	ldr	r0, [r4, #0]
 801225c:	682a      	ldr	r2, [r5, #0]
 801225e:	68e1      	ldr	r1, [r4, #12]
 8012260:	2500      	movs	r5, #0
 8012262:	4003      	ands	r3, r0
 8012264:	2b04      	cmp	r3, #4
 8012266:	d103      	bne.n	8012270 <_printf_common+0x74>
 8012268:	1a8d      	subs	r5, r1, r2
 801226a:	43eb      	mvns	r3, r5
 801226c:	17db      	asrs	r3, r3, #31
 801226e:	401d      	ands	r5, r3
 8012270:	68a3      	ldr	r3, [r4, #8]
 8012272:	6922      	ldr	r2, [r4, #16]
 8012274:	4293      	cmp	r3, r2
 8012276:	dd01      	ble.n	801227c <_printf_common+0x80>
 8012278:	1a9b      	subs	r3, r3, r2
 801227a:	18ed      	adds	r5, r5, r3
 801227c:	2700      	movs	r7, #0
 801227e:	42bd      	cmp	r5, r7
 8012280:	d120      	bne.n	80122c4 <_printf_common+0xc8>
 8012282:	2000      	movs	r0, #0
 8012284:	e010      	b.n	80122a8 <_printf_common+0xac>
 8012286:	3701      	adds	r7, #1
 8012288:	68e3      	ldr	r3, [r4, #12]
 801228a:	682a      	ldr	r2, [r5, #0]
 801228c:	1a9b      	subs	r3, r3, r2
 801228e:	42bb      	cmp	r3, r7
 8012290:	ddd2      	ble.n	8012238 <_printf_common+0x3c>
 8012292:	0022      	movs	r2, r4
 8012294:	2301      	movs	r3, #1
 8012296:	9901      	ldr	r1, [sp, #4]
 8012298:	9800      	ldr	r0, [sp, #0]
 801229a:	9e08      	ldr	r6, [sp, #32]
 801229c:	3219      	adds	r2, #25
 801229e:	47b0      	blx	r6
 80122a0:	1c43      	adds	r3, r0, #1
 80122a2:	d1f0      	bne.n	8012286 <_printf_common+0x8a>
 80122a4:	2001      	movs	r0, #1
 80122a6:	4240      	negs	r0, r0
 80122a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80122aa:	2030      	movs	r0, #48	; 0x30
 80122ac:	18e1      	adds	r1, r4, r3
 80122ae:	3143      	adds	r1, #67	; 0x43
 80122b0:	7008      	strb	r0, [r1, #0]
 80122b2:	0021      	movs	r1, r4
 80122b4:	1c5a      	adds	r2, r3, #1
 80122b6:	3145      	adds	r1, #69	; 0x45
 80122b8:	7809      	ldrb	r1, [r1, #0]
 80122ba:	18a2      	adds	r2, r4, r2
 80122bc:	3243      	adds	r2, #67	; 0x43
 80122be:	3302      	adds	r3, #2
 80122c0:	7011      	strb	r1, [r2, #0]
 80122c2:	e7c1      	b.n	8012248 <_printf_common+0x4c>
 80122c4:	0022      	movs	r2, r4
 80122c6:	2301      	movs	r3, #1
 80122c8:	9901      	ldr	r1, [sp, #4]
 80122ca:	9800      	ldr	r0, [sp, #0]
 80122cc:	9e08      	ldr	r6, [sp, #32]
 80122ce:	321a      	adds	r2, #26
 80122d0:	47b0      	blx	r6
 80122d2:	1c43      	adds	r3, r0, #1
 80122d4:	d0e6      	beq.n	80122a4 <_printf_common+0xa8>
 80122d6:	3701      	adds	r7, #1
 80122d8:	e7d1      	b.n	801227e <_printf_common+0x82>
	...

080122dc <_printf_i>:
 80122dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122de:	b08b      	sub	sp, #44	; 0x2c
 80122e0:	9206      	str	r2, [sp, #24]
 80122e2:	000a      	movs	r2, r1
 80122e4:	3243      	adds	r2, #67	; 0x43
 80122e6:	9307      	str	r3, [sp, #28]
 80122e8:	9005      	str	r0, [sp, #20]
 80122ea:	9204      	str	r2, [sp, #16]
 80122ec:	7e0a      	ldrb	r2, [r1, #24]
 80122ee:	000c      	movs	r4, r1
 80122f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122f2:	2a78      	cmp	r2, #120	; 0x78
 80122f4:	d806      	bhi.n	8012304 <_printf_i+0x28>
 80122f6:	2a62      	cmp	r2, #98	; 0x62
 80122f8:	d808      	bhi.n	801230c <_printf_i+0x30>
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	d100      	bne.n	8012300 <_printf_i+0x24>
 80122fe:	e0c0      	b.n	8012482 <_printf_i+0x1a6>
 8012300:	2a58      	cmp	r2, #88	; 0x58
 8012302:	d052      	beq.n	80123aa <_printf_i+0xce>
 8012304:	0026      	movs	r6, r4
 8012306:	3642      	adds	r6, #66	; 0x42
 8012308:	7032      	strb	r2, [r6, #0]
 801230a:	e022      	b.n	8012352 <_printf_i+0x76>
 801230c:	0010      	movs	r0, r2
 801230e:	3863      	subs	r0, #99	; 0x63
 8012310:	2815      	cmp	r0, #21
 8012312:	d8f7      	bhi.n	8012304 <_printf_i+0x28>
 8012314:	f7ed ff0a 	bl	800012c <__gnu_thumb1_case_shi>
 8012318:	001f0016 	.word	0x001f0016
 801231c:	fff6fff6 	.word	0xfff6fff6
 8012320:	fff6fff6 	.word	0xfff6fff6
 8012324:	fff6001f 	.word	0xfff6001f
 8012328:	fff6fff6 	.word	0xfff6fff6
 801232c:	00a8fff6 	.word	0x00a8fff6
 8012330:	009a0036 	.word	0x009a0036
 8012334:	fff6fff6 	.word	0xfff6fff6
 8012338:	fff600b9 	.word	0xfff600b9
 801233c:	fff60036 	.word	0xfff60036
 8012340:	009efff6 	.word	0x009efff6
 8012344:	0026      	movs	r6, r4
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	3642      	adds	r6, #66	; 0x42
 801234a:	1d11      	adds	r1, r2, #4
 801234c:	6019      	str	r1, [r3, #0]
 801234e:	6813      	ldr	r3, [r2, #0]
 8012350:	7033      	strb	r3, [r6, #0]
 8012352:	2301      	movs	r3, #1
 8012354:	e0a7      	b.n	80124a6 <_printf_i+0x1ca>
 8012356:	6808      	ldr	r0, [r1, #0]
 8012358:	6819      	ldr	r1, [r3, #0]
 801235a:	1d0a      	adds	r2, r1, #4
 801235c:	0605      	lsls	r5, r0, #24
 801235e:	d50b      	bpl.n	8012378 <_printf_i+0x9c>
 8012360:	680d      	ldr	r5, [r1, #0]
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	2d00      	cmp	r5, #0
 8012366:	da03      	bge.n	8012370 <_printf_i+0x94>
 8012368:	232d      	movs	r3, #45	; 0x2d
 801236a:	9a04      	ldr	r2, [sp, #16]
 801236c:	426d      	negs	r5, r5
 801236e:	7013      	strb	r3, [r2, #0]
 8012370:	4b61      	ldr	r3, [pc, #388]	; (80124f8 <_printf_i+0x21c>)
 8012372:	270a      	movs	r7, #10
 8012374:	9303      	str	r3, [sp, #12]
 8012376:	e032      	b.n	80123de <_printf_i+0x102>
 8012378:	680d      	ldr	r5, [r1, #0]
 801237a:	601a      	str	r2, [r3, #0]
 801237c:	0641      	lsls	r1, r0, #25
 801237e:	d5f1      	bpl.n	8012364 <_printf_i+0x88>
 8012380:	b22d      	sxth	r5, r5
 8012382:	e7ef      	b.n	8012364 <_printf_i+0x88>
 8012384:	680d      	ldr	r5, [r1, #0]
 8012386:	6819      	ldr	r1, [r3, #0]
 8012388:	1d08      	adds	r0, r1, #4
 801238a:	6018      	str	r0, [r3, #0]
 801238c:	062e      	lsls	r6, r5, #24
 801238e:	d501      	bpl.n	8012394 <_printf_i+0xb8>
 8012390:	680d      	ldr	r5, [r1, #0]
 8012392:	e003      	b.n	801239c <_printf_i+0xc0>
 8012394:	066d      	lsls	r5, r5, #25
 8012396:	d5fb      	bpl.n	8012390 <_printf_i+0xb4>
 8012398:	680d      	ldr	r5, [r1, #0]
 801239a:	b2ad      	uxth	r5, r5
 801239c:	4b56      	ldr	r3, [pc, #344]	; (80124f8 <_printf_i+0x21c>)
 801239e:	270a      	movs	r7, #10
 80123a0:	9303      	str	r3, [sp, #12]
 80123a2:	2a6f      	cmp	r2, #111	; 0x6f
 80123a4:	d117      	bne.n	80123d6 <_printf_i+0xfa>
 80123a6:	2708      	movs	r7, #8
 80123a8:	e015      	b.n	80123d6 <_printf_i+0xfa>
 80123aa:	3145      	adds	r1, #69	; 0x45
 80123ac:	700a      	strb	r2, [r1, #0]
 80123ae:	4a52      	ldr	r2, [pc, #328]	; (80124f8 <_printf_i+0x21c>)
 80123b0:	9203      	str	r2, [sp, #12]
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	6821      	ldr	r1, [r4, #0]
 80123b6:	ca20      	ldmia	r2!, {r5}
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	0608      	lsls	r0, r1, #24
 80123bc:	d550      	bpl.n	8012460 <_printf_i+0x184>
 80123be:	07cb      	lsls	r3, r1, #31
 80123c0:	d502      	bpl.n	80123c8 <_printf_i+0xec>
 80123c2:	2320      	movs	r3, #32
 80123c4:	4319      	orrs	r1, r3
 80123c6:	6021      	str	r1, [r4, #0]
 80123c8:	2710      	movs	r7, #16
 80123ca:	2d00      	cmp	r5, #0
 80123cc:	d103      	bne.n	80123d6 <_printf_i+0xfa>
 80123ce:	2320      	movs	r3, #32
 80123d0:	6822      	ldr	r2, [r4, #0]
 80123d2:	439a      	bics	r2, r3
 80123d4:	6022      	str	r2, [r4, #0]
 80123d6:	0023      	movs	r3, r4
 80123d8:	2200      	movs	r2, #0
 80123da:	3343      	adds	r3, #67	; 0x43
 80123dc:	701a      	strb	r2, [r3, #0]
 80123de:	6863      	ldr	r3, [r4, #4]
 80123e0:	60a3      	str	r3, [r4, #8]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	db03      	blt.n	80123ee <_printf_i+0x112>
 80123e6:	2204      	movs	r2, #4
 80123e8:	6821      	ldr	r1, [r4, #0]
 80123ea:	4391      	bics	r1, r2
 80123ec:	6021      	str	r1, [r4, #0]
 80123ee:	2d00      	cmp	r5, #0
 80123f0:	d102      	bne.n	80123f8 <_printf_i+0x11c>
 80123f2:	9e04      	ldr	r6, [sp, #16]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00c      	beq.n	8012412 <_printf_i+0x136>
 80123f8:	9e04      	ldr	r6, [sp, #16]
 80123fa:	0028      	movs	r0, r5
 80123fc:	0039      	movs	r1, r7
 80123fe:	f7ed ff25 	bl	800024c <__aeabi_uidivmod>
 8012402:	9b03      	ldr	r3, [sp, #12]
 8012404:	3e01      	subs	r6, #1
 8012406:	5c5b      	ldrb	r3, [r3, r1]
 8012408:	7033      	strb	r3, [r6, #0]
 801240a:	002b      	movs	r3, r5
 801240c:	0005      	movs	r5, r0
 801240e:	429f      	cmp	r7, r3
 8012410:	d9f3      	bls.n	80123fa <_printf_i+0x11e>
 8012412:	2f08      	cmp	r7, #8
 8012414:	d109      	bne.n	801242a <_printf_i+0x14e>
 8012416:	6823      	ldr	r3, [r4, #0]
 8012418:	07db      	lsls	r3, r3, #31
 801241a:	d506      	bpl.n	801242a <_printf_i+0x14e>
 801241c:	6863      	ldr	r3, [r4, #4]
 801241e:	6922      	ldr	r2, [r4, #16]
 8012420:	4293      	cmp	r3, r2
 8012422:	dc02      	bgt.n	801242a <_printf_i+0x14e>
 8012424:	2330      	movs	r3, #48	; 0x30
 8012426:	3e01      	subs	r6, #1
 8012428:	7033      	strb	r3, [r6, #0]
 801242a:	9b04      	ldr	r3, [sp, #16]
 801242c:	1b9b      	subs	r3, r3, r6
 801242e:	6123      	str	r3, [r4, #16]
 8012430:	9b07      	ldr	r3, [sp, #28]
 8012432:	0021      	movs	r1, r4
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	9805      	ldr	r0, [sp, #20]
 8012438:	9b06      	ldr	r3, [sp, #24]
 801243a:	aa09      	add	r2, sp, #36	; 0x24
 801243c:	f7ff fede 	bl	80121fc <_printf_common>
 8012440:	1c43      	adds	r3, r0, #1
 8012442:	d135      	bne.n	80124b0 <_printf_i+0x1d4>
 8012444:	2001      	movs	r0, #1
 8012446:	4240      	negs	r0, r0
 8012448:	b00b      	add	sp, #44	; 0x2c
 801244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801244c:	2220      	movs	r2, #32
 801244e:	6809      	ldr	r1, [r1, #0]
 8012450:	430a      	orrs	r2, r1
 8012452:	6022      	str	r2, [r4, #0]
 8012454:	0022      	movs	r2, r4
 8012456:	2178      	movs	r1, #120	; 0x78
 8012458:	3245      	adds	r2, #69	; 0x45
 801245a:	7011      	strb	r1, [r2, #0]
 801245c:	4a27      	ldr	r2, [pc, #156]	; (80124fc <_printf_i+0x220>)
 801245e:	e7a7      	b.n	80123b0 <_printf_i+0xd4>
 8012460:	0648      	lsls	r0, r1, #25
 8012462:	d5ac      	bpl.n	80123be <_printf_i+0xe2>
 8012464:	b2ad      	uxth	r5, r5
 8012466:	e7aa      	b.n	80123be <_printf_i+0xe2>
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	680d      	ldr	r5, [r1, #0]
 801246c:	1d10      	adds	r0, r2, #4
 801246e:	6949      	ldr	r1, [r1, #20]
 8012470:	6018      	str	r0, [r3, #0]
 8012472:	6813      	ldr	r3, [r2, #0]
 8012474:	062e      	lsls	r6, r5, #24
 8012476:	d501      	bpl.n	801247c <_printf_i+0x1a0>
 8012478:	6019      	str	r1, [r3, #0]
 801247a:	e002      	b.n	8012482 <_printf_i+0x1a6>
 801247c:	066d      	lsls	r5, r5, #25
 801247e:	d5fb      	bpl.n	8012478 <_printf_i+0x19c>
 8012480:	8019      	strh	r1, [r3, #0]
 8012482:	2300      	movs	r3, #0
 8012484:	9e04      	ldr	r6, [sp, #16]
 8012486:	6123      	str	r3, [r4, #16]
 8012488:	e7d2      	b.n	8012430 <_printf_i+0x154>
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	1d11      	adds	r1, r2, #4
 801248e:	6019      	str	r1, [r3, #0]
 8012490:	6816      	ldr	r6, [r2, #0]
 8012492:	2100      	movs	r1, #0
 8012494:	0030      	movs	r0, r6
 8012496:	6862      	ldr	r2, [r4, #4]
 8012498:	f000 f934 	bl	8012704 <memchr>
 801249c:	2800      	cmp	r0, #0
 801249e:	d001      	beq.n	80124a4 <_printf_i+0x1c8>
 80124a0:	1b80      	subs	r0, r0, r6
 80124a2:	6060      	str	r0, [r4, #4]
 80124a4:	6863      	ldr	r3, [r4, #4]
 80124a6:	6123      	str	r3, [r4, #16]
 80124a8:	2300      	movs	r3, #0
 80124aa:	9a04      	ldr	r2, [sp, #16]
 80124ac:	7013      	strb	r3, [r2, #0]
 80124ae:	e7bf      	b.n	8012430 <_printf_i+0x154>
 80124b0:	6923      	ldr	r3, [r4, #16]
 80124b2:	0032      	movs	r2, r6
 80124b4:	9906      	ldr	r1, [sp, #24]
 80124b6:	9805      	ldr	r0, [sp, #20]
 80124b8:	9d07      	ldr	r5, [sp, #28]
 80124ba:	47a8      	blx	r5
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d0c1      	beq.n	8012444 <_printf_i+0x168>
 80124c0:	6823      	ldr	r3, [r4, #0]
 80124c2:	079b      	lsls	r3, r3, #30
 80124c4:	d415      	bmi.n	80124f2 <_printf_i+0x216>
 80124c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c8:	68e0      	ldr	r0, [r4, #12]
 80124ca:	4298      	cmp	r0, r3
 80124cc:	dabc      	bge.n	8012448 <_printf_i+0x16c>
 80124ce:	0018      	movs	r0, r3
 80124d0:	e7ba      	b.n	8012448 <_printf_i+0x16c>
 80124d2:	0022      	movs	r2, r4
 80124d4:	2301      	movs	r3, #1
 80124d6:	9906      	ldr	r1, [sp, #24]
 80124d8:	9805      	ldr	r0, [sp, #20]
 80124da:	9e07      	ldr	r6, [sp, #28]
 80124dc:	3219      	adds	r2, #25
 80124de:	47b0      	blx	r6
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d0af      	beq.n	8012444 <_printf_i+0x168>
 80124e4:	3501      	adds	r5, #1
 80124e6:	68e3      	ldr	r3, [r4, #12]
 80124e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124ea:	1a9b      	subs	r3, r3, r2
 80124ec:	42ab      	cmp	r3, r5
 80124ee:	dcf0      	bgt.n	80124d2 <_printf_i+0x1f6>
 80124f0:	e7e9      	b.n	80124c6 <_printf_i+0x1ea>
 80124f2:	2500      	movs	r5, #0
 80124f4:	e7f7      	b.n	80124e6 <_printf_i+0x20a>
 80124f6:	46c0      	nop			; (mov r8, r8)
 80124f8:	080182c1 	.word	0x080182c1
 80124fc:	080182d2 	.word	0x080182d2

08012500 <_sbrk_r>:
 8012500:	2300      	movs	r3, #0
 8012502:	b570      	push	{r4, r5, r6, lr}
 8012504:	4d06      	ldr	r5, [pc, #24]	; (8012520 <_sbrk_r+0x20>)
 8012506:	0004      	movs	r4, r0
 8012508:	0008      	movs	r0, r1
 801250a:	602b      	str	r3, [r5, #0]
 801250c:	f7f5 fe4a 	bl	80081a4 <_sbrk>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	d103      	bne.n	801251c <_sbrk_r+0x1c>
 8012514:	682b      	ldr	r3, [r5, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d000      	beq.n	801251c <_sbrk_r+0x1c>
 801251a:	6023      	str	r3, [r4, #0]
 801251c:	bd70      	pop	{r4, r5, r6, pc}
 801251e:	46c0      	nop			; (mov r8, r8)
 8012520:	200031c4 	.word	0x200031c4

08012524 <siscanf>:
 8012524:	b40e      	push	{r1, r2, r3}
 8012526:	b530      	push	{r4, r5, lr}
 8012528:	2381      	movs	r3, #129	; 0x81
 801252a:	b09c      	sub	sp, #112	; 0x70
 801252c:	466a      	mov	r2, sp
 801252e:	ac1f      	add	r4, sp, #124	; 0x7c
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	cc20      	ldmia	r4!, {r5}
 8012534:	8293      	strh	r3, [r2, #20]
 8012536:	9002      	str	r0, [sp, #8]
 8012538:	9006      	str	r0, [sp, #24]
 801253a:	f7ed fde5 	bl	8000108 <strlen>
 801253e:	4b0b      	ldr	r3, [pc, #44]	; (801256c <siscanf+0x48>)
 8012540:	466a      	mov	r2, sp
 8012542:	930b      	str	r3, [sp, #44]	; 0x2c
 8012544:	2300      	movs	r3, #0
 8012546:	9003      	str	r0, [sp, #12]
 8012548:	9007      	str	r0, [sp, #28]
 801254a:	4809      	ldr	r0, [pc, #36]	; (8012570 <siscanf+0x4c>)
 801254c:	930f      	str	r3, [sp, #60]	; 0x3c
 801254e:	9314      	str	r3, [sp, #80]	; 0x50
 8012550:	3b01      	subs	r3, #1
 8012552:	82d3      	strh	r3, [r2, #22]
 8012554:	a902      	add	r1, sp, #8
 8012556:	0023      	movs	r3, r4
 8012558:	002a      	movs	r2, r5
 801255a:	6800      	ldr	r0, [r0, #0]
 801255c:	9401      	str	r4, [sp, #4]
 801255e:	f000 f98b 	bl	8012878 <__ssvfiscanf_r>
 8012562:	b01c      	add	sp, #112	; 0x70
 8012564:	bc30      	pop	{r4, r5}
 8012566:	bc08      	pop	{r3}
 8012568:	b003      	add	sp, #12
 801256a:	4718      	bx	r3
 801256c:	08012575 	.word	0x08012575
 8012570:	2000012c 	.word	0x2000012c

08012574 <__seofread>:
 8012574:	2000      	movs	r0, #0
 8012576:	4770      	bx	lr

08012578 <strcpy>:
 8012578:	0003      	movs	r3, r0
 801257a:	780a      	ldrb	r2, [r1, #0]
 801257c:	3101      	adds	r1, #1
 801257e:	701a      	strb	r2, [r3, #0]
 8012580:	3301      	adds	r3, #1
 8012582:	2a00      	cmp	r2, #0
 8012584:	d1f9      	bne.n	801257a <strcpy+0x2>
 8012586:	4770      	bx	lr

08012588 <strncmp>:
 8012588:	b530      	push	{r4, r5, lr}
 801258a:	0005      	movs	r5, r0
 801258c:	1e10      	subs	r0, r2, #0
 801258e:	d00b      	beq.n	80125a8 <strncmp+0x20>
 8012590:	2400      	movs	r4, #0
 8012592:	3a01      	subs	r2, #1
 8012594:	5d2b      	ldrb	r3, [r5, r4]
 8012596:	5d08      	ldrb	r0, [r1, r4]
 8012598:	4283      	cmp	r3, r0
 801259a:	d104      	bne.n	80125a6 <strncmp+0x1e>
 801259c:	4294      	cmp	r4, r2
 801259e:	d002      	beq.n	80125a6 <strncmp+0x1e>
 80125a0:	3401      	adds	r4, #1
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1f6      	bne.n	8012594 <strncmp+0xc>
 80125a6:	1a18      	subs	r0, r3, r0
 80125a8:	bd30      	pop	{r4, r5, pc}
	...

080125ac <_strtoul_l.isra.0>:
 80125ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ae:	001e      	movs	r6, r3
 80125b0:	4b43      	ldr	r3, [pc, #268]	; (80126c0 <_strtoul_l.isra.0+0x114>)
 80125b2:	b087      	sub	sp, #28
 80125b4:	000f      	movs	r7, r1
 80125b6:	9101      	str	r1, [sp, #4]
 80125b8:	469c      	mov	ip, r3
 80125ba:	2108      	movs	r1, #8
 80125bc:	9005      	str	r0, [sp, #20]
 80125be:	9202      	str	r2, [sp, #8]
 80125c0:	003b      	movs	r3, r7
 80125c2:	4662      	mov	r2, ip
 80125c4:	781c      	ldrb	r4, [r3, #0]
 80125c6:	1c7d      	adds	r5, r7, #1
 80125c8:	5d10      	ldrb	r0, [r2, r4]
 80125ca:	002f      	movs	r7, r5
 80125cc:	0002      	movs	r2, r0
 80125ce:	400a      	ands	r2, r1
 80125d0:	4208      	tst	r0, r1
 80125d2:	d1f5      	bne.n	80125c0 <_strtoul_l.isra.0+0x14>
 80125d4:	2c2d      	cmp	r4, #45	; 0x2d
 80125d6:	d13a      	bne.n	801264e <_strtoul_l.isra.0+0xa2>
 80125d8:	2701      	movs	r7, #1
 80125da:	782c      	ldrb	r4, [r5, #0]
 80125dc:	1c9d      	adds	r5, r3, #2
 80125de:	2e00      	cmp	r6, #0
 80125e0:	d069      	beq.n	80126b6 <_strtoul_l.isra.0+0x10a>
 80125e2:	2e10      	cmp	r6, #16
 80125e4:	d109      	bne.n	80125fa <_strtoul_l.isra.0+0x4e>
 80125e6:	2c30      	cmp	r4, #48	; 0x30
 80125e8:	d107      	bne.n	80125fa <_strtoul_l.isra.0+0x4e>
 80125ea:	2220      	movs	r2, #32
 80125ec:	782b      	ldrb	r3, [r5, #0]
 80125ee:	4393      	bics	r3, r2
 80125f0:	2b58      	cmp	r3, #88	; 0x58
 80125f2:	d15b      	bne.n	80126ac <_strtoul_l.isra.0+0x100>
 80125f4:	2610      	movs	r6, #16
 80125f6:	786c      	ldrb	r4, [r5, #1]
 80125f8:	3502      	adds	r5, #2
 80125fa:	2001      	movs	r0, #1
 80125fc:	0031      	movs	r1, r6
 80125fe:	4240      	negs	r0, r0
 8012600:	f7ed fd9e 	bl	8000140 <__udivsi3>
 8012604:	9003      	str	r0, [sp, #12]
 8012606:	2001      	movs	r0, #1
 8012608:	0031      	movs	r1, r6
 801260a:	4240      	negs	r0, r0
 801260c:	f7ed fe1e 	bl	800024c <__aeabi_uidivmod>
 8012610:	2300      	movs	r3, #0
 8012612:	9104      	str	r1, [sp, #16]
 8012614:	2101      	movs	r1, #1
 8012616:	2201      	movs	r2, #1
 8012618:	0018      	movs	r0, r3
 801261a:	468c      	mov	ip, r1
 801261c:	4252      	negs	r2, r2
 801261e:	0021      	movs	r1, r4
 8012620:	3930      	subs	r1, #48	; 0x30
 8012622:	2909      	cmp	r1, #9
 8012624:	d81a      	bhi.n	801265c <_strtoul_l.isra.0+0xb0>
 8012626:	000c      	movs	r4, r1
 8012628:	42a6      	cmp	r6, r4
 801262a:	dd25      	ble.n	8012678 <_strtoul_l.isra.0+0xcc>
 801262c:	2b00      	cmp	r3, #0
 801262e:	db21      	blt.n	8012674 <_strtoul_l.isra.0+0xc8>
 8012630:	9903      	ldr	r1, [sp, #12]
 8012632:	0013      	movs	r3, r2
 8012634:	4281      	cmp	r1, r0
 8012636:	d307      	bcc.n	8012648 <_strtoul_l.isra.0+0x9c>
 8012638:	d103      	bne.n	8012642 <_strtoul_l.isra.0+0x96>
 801263a:	9904      	ldr	r1, [sp, #16]
 801263c:	0013      	movs	r3, r2
 801263e:	42a1      	cmp	r1, r4
 8012640:	db02      	blt.n	8012648 <_strtoul_l.isra.0+0x9c>
 8012642:	4663      	mov	r3, ip
 8012644:	4370      	muls	r0, r6
 8012646:	1820      	adds	r0, r4, r0
 8012648:	782c      	ldrb	r4, [r5, #0]
 801264a:	3501      	adds	r5, #1
 801264c:	e7e7      	b.n	801261e <_strtoul_l.isra.0+0x72>
 801264e:	2c2b      	cmp	r4, #43	; 0x2b
 8012650:	d001      	beq.n	8012656 <_strtoul_l.isra.0+0xaa>
 8012652:	0017      	movs	r7, r2
 8012654:	e7c3      	b.n	80125de <_strtoul_l.isra.0+0x32>
 8012656:	782c      	ldrb	r4, [r5, #0]
 8012658:	1c9d      	adds	r5, r3, #2
 801265a:	e7fa      	b.n	8012652 <_strtoul_l.isra.0+0xa6>
 801265c:	0021      	movs	r1, r4
 801265e:	3941      	subs	r1, #65	; 0x41
 8012660:	2919      	cmp	r1, #25
 8012662:	d801      	bhi.n	8012668 <_strtoul_l.isra.0+0xbc>
 8012664:	3c37      	subs	r4, #55	; 0x37
 8012666:	e7df      	b.n	8012628 <_strtoul_l.isra.0+0x7c>
 8012668:	0021      	movs	r1, r4
 801266a:	3961      	subs	r1, #97	; 0x61
 801266c:	2919      	cmp	r1, #25
 801266e:	d803      	bhi.n	8012678 <_strtoul_l.isra.0+0xcc>
 8012670:	3c57      	subs	r4, #87	; 0x57
 8012672:	e7d9      	b.n	8012628 <_strtoul_l.isra.0+0x7c>
 8012674:	0013      	movs	r3, r2
 8012676:	e7e7      	b.n	8012648 <_strtoul_l.isra.0+0x9c>
 8012678:	2b00      	cmp	r3, #0
 801267a:	da09      	bge.n	8012690 <_strtoul_l.isra.0+0xe4>
 801267c:	2322      	movs	r3, #34	; 0x22
 801267e:	2001      	movs	r0, #1
 8012680:	9a05      	ldr	r2, [sp, #20]
 8012682:	4240      	negs	r0, r0
 8012684:	6013      	str	r3, [r2, #0]
 8012686:	9b02      	ldr	r3, [sp, #8]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d109      	bne.n	80126a0 <_strtoul_l.isra.0+0xf4>
 801268c:	b007      	add	sp, #28
 801268e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012690:	2f00      	cmp	r7, #0
 8012692:	d000      	beq.n	8012696 <_strtoul_l.isra.0+0xea>
 8012694:	4240      	negs	r0, r0
 8012696:	9a02      	ldr	r2, [sp, #8]
 8012698:	2a00      	cmp	r2, #0
 801269a:	d0f7      	beq.n	801268c <_strtoul_l.isra.0+0xe0>
 801269c:	2b00      	cmp	r3, #0
 801269e:	d001      	beq.n	80126a4 <_strtoul_l.isra.0+0xf8>
 80126a0:	1e6b      	subs	r3, r5, #1
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	9b02      	ldr	r3, [sp, #8]
 80126a6:	9a01      	ldr	r2, [sp, #4]
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	e7ef      	b.n	801268c <_strtoul_l.isra.0+0xe0>
 80126ac:	2430      	movs	r4, #48	; 0x30
 80126ae:	2e00      	cmp	r6, #0
 80126b0:	d1a3      	bne.n	80125fa <_strtoul_l.isra.0+0x4e>
 80126b2:	3608      	adds	r6, #8
 80126b4:	e7a1      	b.n	80125fa <_strtoul_l.isra.0+0x4e>
 80126b6:	2c30      	cmp	r4, #48	; 0x30
 80126b8:	d097      	beq.n	80125ea <_strtoul_l.isra.0+0x3e>
 80126ba:	260a      	movs	r6, #10
 80126bc:	e79d      	b.n	80125fa <_strtoul_l.isra.0+0x4e>
 80126be:	46c0      	nop			; (mov r8, r8)
 80126c0:	0801814d 	.word	0x0801814d

080126c4 <_strtoul_r>:
 80126c4:	b510      	push	{r4, lr}
 80126c6:	f7ff ff71 	bl	80125ac <_strtoul_l.isra.0>
 80126ca:	bd10      	pop	{r4, pc}

080126cc <strtoul>:
 80126cc:	b510      	push	{r4, lr}
 80126ce:	0013      	movs	r3, r2
 80126d0:	000a      	movs	r2, r1
 80126d2:	0001      	movs	r1, r0
 80126d4:	4802      	ldr	r0, [pc, #8]	; (80126e0 <strtoul+0x14>)
 80126d6:	6800      	ldr	r0, [r0, #0]
 80126d8:	f7ff ff68 	bl	80125ac <_strtoul_l.isra.0>
 80126dc:	bd10      	pop	{r4, pc}
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	2000012c 	.word	0x2000012c

080126e4 <__env_lock>:
 80126e4:	b510      	push	{r4, lr}
 80126e6:	4802      	ldr	r0, [pc, #8]	; (80126f0 <__env_lock+0xc>)
 80126e8:	f7ff fb71 	bl	8011dce <__retarget_lock_acquire_recursive>
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	46c0      	nop			; (mov r8, r8)
 80126f0:	200031ba 	.word	0x200031ba

080126f4 <__env_unlock>:
 80126f4:	b510      	push	{r4, lr}
 80126f6:	4802      	ldr	r0, [pc, #8]	; (8012700 <__env_unlock+0xc>)
 80126f8:	f7ff fb6b 	bl	8011dd2 <__retarget_lock_release_recursive>
 80126fc:	bd10      	pop	{r4, pc}
 80126fe:	46c0      	nop			; (mov r8, r8)
 8012700:	200031ba 	.word	0x200031ba

08012704 <memchr>:
 8012704:	b2c9      	uxtb	r1, r1
 8012706:	1882      	adds	r2, r0, r2
 8012708:	4290      	cmp	r0, r2
 801270a:	d101      	bne.n	8012710 <memchr+0xc>
 801270c:	2000      	movs	r0, #0
 801270e:	4770      	bx	lr
 8012710:	7803      	ldrb	r3, [r0, #0]
 8012712:	428b      	cmp	r3, r1
 8012714:	d0fb      	beq.n	801270e <memchr+0xa>
 8012716:	3001      	adds	r0, #1
 8012718:	e7f6      	b.n	8012708 <memchr+0x4>

0801271a <memcpy>:
 801271a:	2300      	movs	r3, #0
 801271c:	b510      	push	{r4, lr}
 801271e:	429a      	cmp	r2, r3
 8012720:	d100      	bne.n	8012724 <memcpy+0xa>
 8012722:	bd10      	pop	{r4, pc}
 8012724:	5ccc      	ldrb	r4, [r1, r3]
 8012726:	54c4      	strb	r4, [r0, r3]
 8012728:	3301      	adds	r3, #1
 801272a:	e7f8      	b.n	801271e <memcpy+0x4>

0801272c <memmove>:
 801272c:	b510      	push	{r4, lr}
 801272e:	4288      	cmp	r0, r1
 8012730:	d902      	bls.n	8012738 <memmove+0xc>
 8012732:	188b      	adds	r3, r1, r2
 8012734:	4298      	cmp	r0, r3
 8012736:	d303      	bcc.n	8012740 <memmove+0x14>
 8012738:	2300      	movs	r3, #0
 801273a:	e007      	b.n	801274c <memmove+0x20>
 801273c:	5c8b      	ldrb	r3, [r1, r2]
 801273e:	5483      	strb	r3, [r0, r2]
 8012740:	3a01      	subs	r2, #1
 8012742:	d2fb      	bcs.n	801273c <memmove+0x10>
 8012744:	bd10      	pop	{r4, pc}
 8012746:	5ccc      	ldrb	r4, [r1, r3]
 8012748:	54c4      	strb	r4, [r0, r3]
 801274a:	3301      	adds	r3, #1
 801274c:	429a      	cmp	r2, r3
 801274e:	d1fa      	bne.n	8012746 <memmove+0x1a>
 8012750:	e7f8      	b.n	8012744 <memmove+0x18>
	...

08012754 <__malloc_lock>:
 8012754:	b510      	push	{r4, lr}
 8012756:	4802      	ldr	r0, [pc, #8]	; (8012760 <__malloc_lock+0xc>)
 8012758:	f7ff fb39 	bl	8011dce <__retarget_lock_acquire_recursive>
 801275c:	bd10      	pop	{r4, pc}
 801275e:	46c0      	nop			; (mov r8, r8)
 8012760:	200031bc 	.word	0x200031bc

08012764 <__malloc_unlock>:
 8012764:	b510      	push	{r4, lr}
 8012766:	4802      	ldr	r0, [pc, #8]	; (8012770 <__malloc_unlock+0xc>)
 8012768:	f7ff fb33 	bl	8011dd2 <__retarget_lock_release_recursive>
 801276c:	bd10      	pop	{r4, pc}
 801276e:	46c0      	nop			; (mov r8, r8)
 8012770:	200031bc 	.word	0x200031bc

08012774 <_realloc_r>:
 8012774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012776:	0007      	movs	r7, r0
 8012778:	000d      	movs	r5, r1
 801277a:	0016      	movs	r6, r2
 801277c:	2900      	cmp	r1, #0
 801277e:	d105      	bne.n	801278c <_realloc_r+0x18>
 8012780:	0011      	movs	r1, r2
 8012782:	f7ff fb7b 	bl	8011e7c <_malloc_r>
 8012786:	0004      	movs	r4, r0
 8012788:	0020      	movs	r0, r4
 801278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278c:	2a00      	cmp	r2, #0
 801278e:	d103      	bne.n	8012798 <_realloc_r+0x24>
 8012790:	f7ff fb2a 	bl	8011de8 <_free_r>
 8012794:	0034      	movs	r4, r6
 8012796:	e7f7      	b.n	8012788 <_realloc_r+0x14>
 8012798:	f000 fbc2 	bl	8012f20 <_malloc_usable_size_r>
 801279c:	002c      	movs	r4, r5
 801279e:	42b0      	cmp	r0, r6
 80127a0:	d2f2      	bcs.n	8012788 <_realloc_r+0x14>
 80127a2:	0031      	movs	r1, r6
 80127a4:	0038      	movs	r0, r7
 80127a6:	f7ff fb69 	bl	8011e7c <_malloc_r>
 80127aa:	1e04      	subs	r4, r0, #0
 80127ac:	d0ec      	beq.n	8012788 <_realloc_r+0x14>
 80127ae:	0029      	movs	r1, r5
 80127b0:	0032      	movs	r2, r6
 80127b2:	f7ff ffb2 	bl	801271a <memcpy>
 80127b6:	0029      	movs	r1, r5
 80127b8:	0038      	movs	r0, r7
 80127ba:	f7ff fb15 	bl	8011de8 <_free_r>
 80127be:	e7e3      	b.n	8012788 <_realloc_r+0x14>

080127c0 <_sungetc_r>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	0014      	movs	r4, r2
 80127c4:	1c4b      	adds	r3, r1, #1
 80127c6:	d103      	bne.n	80127d0 <_sungetc_r+0x10>
 80127c8:	2501      	movs	r5, #1
 80127ca:	426d      	negs	r5, r5
 80127cc:	0028      	movs	r0, r5
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	8993      	ldrh	r3, [r2, #12]
 80127d2:	2220      	movs	r2, #32
 80127d4:	4393      	bics	r3, r2
 80127d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	b2ce      	uxtb	r6, r1
 80127dc:	6863      	ldr	r3, [r4, #4]
 80127de:	b2cd      	uxtb	r5, r1
 80127e0:	2a00      	cmp	r2, #0
 80127e2:	d010      	beq.n	8012806 <_sungetc_r+0x46>
 80127e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80127e6:	429a      	cmp	r2, r3
 80127e8:	dd07      	ble.n	80127fa <_sungetc_r+0x3a>
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	3b01      	subs	r3, #1
 80127ee:	6023      	str	r3, [r4, #0]
 80127f0:	701e      	strb	r6, [r3, #0]
 80127f2:	6863      	ldr	r3, [r4, #4]
 80127f4:	3301      	adds	r3, #1
 80127f6:	6063      	str	r3, [r4, #4]
 80127f8:	e7e8      	b.n	80127cc <_sungetc_r+0xc>
 80127fa:	0021      	movs	r1, r4
 80127fc:	f000 fb52 	bl	8012ea4 <__submore>
 8012800:	2800      	cmp	r0, #0
 8012802:	d0f2      	beq.n	80127ea <_sungetc_r+0x2a>
 8012804:	e7e0      	b.n	80127c8 <_sungetc_r+0x8>
 8012806:	6921      	ldr	r1, [r4, #16]
 8012808:	6822      	ldr	r2, [r4, #0]
 801280a:	2900      	cmp	r1, #0
 801280c:	d007      	beq.n	801281e <_sungetc_r+0x5e>
 801280e:	4291      	cmp	r1, r2
 8012810:	d205      	bcs.n	801281e <_sungetc_r+0x5e>
 8012812:	1e51      	subs	r1, r2, #1
 8012814:	7808      	ldrb	r0, [r1, #0]
 8012816:	42a8      	cmp	r0, r5
 8012818:	d101      	bne.n	801281e <_sungetc_r+0x5e>
 801281a:	6021      	str	r1, [r4, #0]
 801281c:	e7ea      	b.n	80127f4 <_sungetc_r+0x34>
 801281e:	6423      	str	r3, [r4, #64]	; 0x40
 8012820:	0023      	movs	r3, r4
 8012822:	3344      	adds	r3, #68	; 0x44
 8012824:	6363      	str	r3, [r4, #52]	; 0x34
 8012826:	2303      	movs	r3, #3
 8012828:	63a3      	str	r3, [r4, #56]	; 0x38
 801282a:	0023      	movs	r3, r4
 801282c:	3346      	adds	r3, #70	; 0x46
 801282e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012830:	701e      	strb	r6, [r3, #0]
 8012832:	6023      	str	r3, [r4, #0]
 8012834:	2301      	movs	r3, #1
 8012836:	e7de      	b.n	80127f6 <_sungetc_r+0x36>

08012838 <__ssrefill_r>:
 8012838:	b510      	push	{r4, lr}
 801283a:	000c      	movs	r4, r1
 801283c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801283e:	2900      	cmp	r1, #0
 8012840:	d00e      	beq.n	8012860 <__ssrefill_r+0x28>
 8012842:	0023      	movs	r3, r4
 8012844:	3344      	adds	r3, #68	; 0x44
 8012846:	4299      	cmp	r1, r3
 8012848:	d001      	beq.n	801284e <__ssrefill_r+0x16>
 801284a:	f7ff facd 	bl	8011de8 <_free_r>
 801284e:	2000      	movs	r0, #0
 8012850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012852:	6360      	str	r0, [r4, #52]	; 0x34
 8012854:	6063      	str	r3, [r4, #4]
 8012856:	4283      	cmp	r3, r0
 8012858:	d002      	beq.n	8012860 <__ssrefill_r+0x28>
 801285a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	bd10      	pop	{r4, pc}
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	2001      	movs	r0, #1
 8012864:	6023      	str	r3, [r4, #0]
 8012866:	2300      	movs	r3, #0
 8012868:	89a2      	ldrh	r2, [r4, #12]
 801286a:	6063      	str	r3, [r4, #4]
 801286c:	3320      	adds	r3, #32
 801286e:	4313      	orrs	r3, r2
 8012870:	81a3      	strh	r3, [r4, #12]
 8012872:	4240      	negs	r0, r0
 8012874:	e7f3      	b.n	801285e <__ssrefill_r+0x26>
	...

08012878 <__ssvfiscanf_r>:
 8012878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801287a:	4cb5      	ldr	r4, [pc, #724]	; (8012b50 <__ssvfiscanf_r+0x2d8>)
 801287c:	0005      	movs	r5, r0
 801287e:	44a5      	add	sp, r4
 8012880:	000c      	movs	r4, r1
 8012882:	2100      	movs	r1, #0
 8012884:	9148      	str	r1, [sp, #288]	; 0x120
 8012886:	9149      	str	r1, [sp, #292]	; 0x124
 8012888:	a905      	add	r1, sp, #20
 801288a:	914a      	str	r1, [sp, #296]	; 0x128
 801288c:	21be      	movs	r1, #190	; 0xbe
 801288e:	48b1      	ldr	r0, [pc, #708]	; (8012b54 <__ssvfiscanf_r+0x2dc>)
 8012890:	0049      	lsls	r1, r1, #1
 8012892:	ae45      	add	r6, sp, #276	; 0x114
 8012894:	5070      	str	r0, [r6, r1]
 8012896:	48b0      	ldr	r0, [pc, #704]	; (8012b58 <__ssvfiscanf_r+0x2e0>)
 8012898:	3104      	adds	r1, #4
 801289a:	ae45      	add	r6, sp, #276	; 0x114
 801289c:	5070      	str	r0, [r6, r1]
 801289e:	9304      	str	r3, [sp, #16]
 80128a0:	9101      	str	r1, [sp, #4]
 80128a2:	7813      	ldrb	r3, [r2, #0]
 80128a4:	9300      	str	r3, [sp, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d100      	bne.n	80128ac <__ssvfiscanf_r+0x34>
 80128aa:	e14f      	b.n	8012b4c <__ssvfiscanf_r+0x2d4>
 80128ac:	4fab      	ldr	r7, [pc, #684]	; (8012b5c <__ssvfiscanf_r+0x2e4>)
 80128ae:	2008      	movs	r0, #8
 80128b0:	5cf9      	ldrb	r1, [r7, r3]
 80128b2:	2308      	movs	r3, #8
 80128b4:	1c56      	adds	r6, r2, #1
 80128b6:	400b      	ands	r3, r1
 80128b8:	4201      	tst	r1, r0
 80128ba:	d01e      	beq.n	80128fa <__ssvfiscanf_r+0x82>
 80128bc:	6863      	ldr	r3, [r4, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	dd11      	ble.n	80128e6 <__ssvfiscanf_r+0x6e>
 80128c2:	2108      	movs	r1, #8
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	781a      	ldrb	r2, [r3, #0]
 80128c8:	5cba      	ldrb	r2, [r7, r2]
 80128ca:	420a      	tst	r2, r1
 80128cc:	d101      	bne.n	80128d2 <__ssvfiscanf_r+0x5a>
 80128ce:	0032      	movs	r2, r6
 80128d0:	e7e7      	b.n	80128a2 <__ssvfiscanf_r+0x2a>
 80128d2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 80128d4:	3301      	adds	r3, #1
 80128d6:	9200      	str	r2, [sp, #0]
 80128d8:	3201      	adds	r2, #1
 80128da:	9249      	str	r2, [sp, #292]	; 0x124
 80128dc:	6862      	ldr	r2, [r4, #4]
 80128de:	6023      	str	r3, [r4, #0]
 80128e0:	3a01      	subs	r2, #1
 80128e2:	6062      	str	r2, [r4, #4]
 80128e4:	e7ea      	b.n	80128bc <__ssvfiscanf_r+0x44>
 80128e6:	9a01      	ldr	r2, [sp, #4]
 80128e8:	ab45      	add	r3, sp, #276	; 0x114
 80128ea:	589b      	ldr	r3, [r3, r2]
 80128ec:	0021      	movs	r1, r4
 80128ee:	0028      	movs	r0, r5
 80128f0:	9300      	str	r3, [sp, #0]
 80128f2:	4798      	blx	r3
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d0e4      	beq.n	80128c2 <__ssvfiscanf_r+0x4a>
 80128f8:	e7e9      	b.n	80128ce <__ssvfiscanf_r+0x56>
 80128fa:	9900      	ldr	r1, [sp, #0]
 80128fc:	2925      	cmp	r1, #37	; 0x25
 80128fe:	d164      	bne.n	80129ca <__ssvfiscanf_r+0x152>
 8012900:	9347      	str	r3, [sp, #284]	; 0x11c
 8012902:	9345      	str	r3, [sp, #276]	; 0x114
 8012904:	7853      	ldrb	r3, [r2, #1]
 8012906:	2b2a      	cmp	r3, #42	; 0x2a
 8012908:	d102      	bne.n	8012910 <__ssvfiscanf_r+0x98>
 801290a:	3b1a      	subs	r3, #26
 801290c:	9345      	str	r3, [sp, #276]	; 0x114
 801290e:	1c96      	adds	r6, r2, #2
 8012910:	0037      	movs	r7, r6
 8012912:	200a      	movs	r0, #10
 8012914:	7839      	ldrb	r1, [r7, #0]
 8012916:	1c7b      	adds	r3, r7, #1
 8012918:	9302      	str	r3, [sp, #8]
 801291a:	000b      	movs	r3, r1
 801291c:	3b30      	subs	r3, #48	; 0x30
 801291e:	2b09      	cmp	r3, #9
 8012920:	d91f      	bls.n	8012962 <__ssvfiscanf_r+0xea>
 8012922:	4e8f      	ldr	r6, [pc, #572]	; (8012b60 <__ssvfiscanf_r+0x2e8>)
 8012924:	2203      	movs	r2, #3
 8012926:	0030      	movs	r0, r6
 8012928:	f7ff feec 	bl	8012704 <memchr>
 801292c:	2800      	cmp	r0, #0
 801292e:	d007      	beq.n	8012940 <__ssvfiscanf_r+0xc8>
 8012930:	2301      	movs	r3, #1
 8012932:	1b80      	subs	r0, r0, r6
 8012934:	4083      	lsls	r3, r0
 8012936:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012938:	9f02      	ldr	r7, [sp, #8]
 801293a:	4313      	orrs	r3, r2
 801293c:	9203      	str	r2, [sp, #12]
 801293e:	9345      	str	r3, [sp, #276]	; 0x114
 8012940:	783b      	ldrb	r3, [r7, #0]
 8012942:	1c7e      	adds	r6, r7, #1
 8012944:	2b78      	cmp	r3, #120	; 0x78
 8012946:	d807      	bhi.n	8012958 <__ssvfiscanf_r+0xe0>
 8012948:	2b57      	cmp	r3, #87	; 0x57
 801294a:	d812      	bhi.n	8012972 <__ssvfiscanf_r+0xfa>
 801294c:	2b25      	cmp	r3, #37	; 0x25
 801294e:	d03c      	beq.n	80129ca <__ssvfiscanf_r+0x152>
 8012950:	d836      	bhi.n	80129c0 <__ssvfiscanf_r+0x148>
 8012952:	2b00      	cmp	r3, #0
 8012954:	d100      	bne.n	8012958 <__ssvfiscanf_r+0xe0>
 8012956:	e0f6      	b.n	8012b46 <__ssvfiscanf_r+0x2ce>
 8012958:	2303      	movs	r3, #3
 801295a:	934b      	str	r3, [sp, #300]	; 0x12c
 801295c:	3307      	adds	r3, #7
 801295e:	9346      	str	r3, [sp, #280]	; 0x118
 8012960:	e076      	b.n	8012a50 <__ssvfiscanf_r+0x1d8>
 8012962:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012964:	9f02      	ldr	r7, [sp, #8]
 8012966:	9303      	str	r3, [sp, #12]
 8012968:	4343      	muls	r3, r0
 801296a:	3b30      	subs	r3, #48	; 0x30
 801296c:	185b      	adds	r3, r3, r1
 801296e:	9347      	str	r3, [sp, #284]	; 0x11c
 8012970:	e7d0      	b.n	8012914 <__ssvfiscanf_r+0x9c>
 8012972:	0018      	movs	r0, r3
 8012974:	3858      	subs	r0, #88	; 0x58
 8012976:	2820      	cmp	r0, #32
 8012978:	d8ee      	bhi.n	8012958 <__ssvfiscanf_r+0xe0>
 801297a:	f7ed fbd7 	bl	800012c <__gnu_thumb1_case_shi>
 801297e:	0051      	.short	0x0051
 8012980:	ffedffed 	.word	0xffedffed
 8012984:	ffed0086 	.word	0xffed0086
 8012988:	ffedffed 	.word	0xffedffed
 801298c:	ffedffed 	.word	0xffedffed
 8012990:	ffedffed 	.word	0xffedffed
 8012994:	00600093 	.word	0x00600093
 8012998:	00240024 	.word	0x00240024
 801299c:	ffed0024 	.word	0xffed0024
 80129a0:	ffed0062 	.word	0xffed0062
 80129a4:	ffedffed 	.word	0xffedffed
 80129a8:	009dffed 	.word	0x009dffed
 80129ac:	004b0065 	.word	0x004b0065
 80129b0:	ffedffed 	.word	0xffedffed
 80129b4:	ffed009b 	.word	0xffed009b
 80129b8:	ffed0060 	.word	0xffed0060
 80129bc:	0051ffed 	.word	0x0051ffed
 80129c0:	3b45      	subs	r3, #69	; 0x45
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d8c8      	bhi.n	8012958 <__ssvfiscanf_r+0xe0>
 80129c6:	2305      	movs	r3, #5
 80129c8:	e041      	b.n	8012a4e <__ssvfiscanf_r+0x1d6>
 80129ca:	6863      	ldr	r3, [r4, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dd0f      	ble.n	80129f0 <__ssvfiscanf_r+0x178>
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	9900      	ldr	r1, [sp, #0]
 80129d4:	781a      	ldrb	r2, [r3, #0]
 80129d6:	428a      	cmp	r2, r1
 80129d8:	d000      	beq.n	80129dc <__ssvfiscanf_r+0x164>
 80129da:	e0b7      	b.n	8012b4c <__ssvfiscanf_r+0x2d4>
 80129dc:	3301      	adds	r3, #1
 80129de:	6862      	ldr	r2, [r4, #4]
 80129e0:	6023      	str	r3, [r4, #0]
 80129e2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80129e4:	3a01      	subs	r2, #1
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	3301      	adds	r3, #1
 80129ea:	6062      	str	r2, [r4, #4]
 80129ec:	9349      	str	r3, [sp, #292]	; 0x124
 80129ee:	e76e      	b.n	80128ce <__ssvfiscanf_r+0x56>
 80129f0:	9a01      	ldr	r2, [sp, #4]
 80129f2:	ab45      	add	r3, sp, #276	; 0x114
 80129f4:	589b      	ldr	r3, [r3, r2]
 80129f6:	0021      	movs	r1, r4
 80129f8:	0028      	movs	r0, r5
 80129fa:	9302      	str	r3, [sp, #8]
 80129fc:	4798      	blx	r3
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0e6      	beq.n	80129d0 <__ssvfiscanf_r+0x158>
 8012a02:	9848      	ldr	r0, [sp, #288]	; 0x120
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d000      	beq.n	8012a0a <__ssvfiscanf_r+0x192>
 8012a08:	e099      	b.n	8012b3e <__ssvfiscanf_r+0x2c6>
 8012a0a:	3801      	subs	r0, #1
 8012a0c:	23a7      	movs	r3, #167	; 0xa7
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	449d      	add	sp, r3
 8012a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a16:	9200      	str	r2, [sp, #0]
 8012a18:	2220      	movs	r2, #32
 8012a1a:	9900      	ldr	r1, [sp, #0]
 8012a1c:	430a      	orrs	r2, r1
 8012a1e:	9245      	str	r2, [sp, #276]	; 0x114
 8012a20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012a22:	9200      	str	r2, [sp, #0]
 8012a24:	2280      	movs	r2, #128	; 0x80
 8012a26:	9900      	ldr	r1, [sp, #0]
 8012a28:	0092      	lsls	r2, r2, #2
 8012a2a:	430a      	orrs	r2, r1
 8012a2c:	9245      	str	r2, [sp, #276]	; 0x114
 8012a2e:	2210      	movs	r2, #16
 8012a30:	9246      	str	r2, [sp, #280]	; 0x118
 8012a32:	226e      	movs	r2, #110	; 0x6e
 8012a34:	429a      	cmp	r2, r3
 8012a36:	419b      	sbcs	r3, r3
 8012a38:	425b      	negs	r3, r3
 8012a3a:	3303      	adds	r3, #3
 8012a3c:	e007      	b.n	8012a4e <__ssvfiscanf_r+0x1d6>
 8012a3e:	220a      	movs	r2, #10
 8012a40:	e7f6      	b.n	8012a30 <__ssvfiscanf_r+0x1b8>
 8012a42:	2300      	movs	r3, #0
 8012a44:	9346      	str	r3, [sp, #280]	; 0x118
 8012a46:	e7f8      	b.n	8012a3a <__ssvfiscanf_r+0x1c2>
 8012a48:	2308      	movs	r3, #8
 8012a4a:	9346      	str	r3, [sp, #280]	; 0x118
 8012a4c:	3b04      	subs	r3, #4
 8012a4e:	934b      	str	r3, [sp, #300]	; 0x12c
 8012a50:	6863      	ldr	r3, [r4, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	dd3f      	ble.n	8012ad6 <__ssvfiscanf_r+0x25e>
 8012a56:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012a58:	9300      	str	r3, [sp, #0]
 8012a5a:	065b      	lsls	r3, r3, #25
 8012a5c:	d406      	bmi.n	8012a6c <__ssvfiscanf_r+0x1f4>
 8012a5e:	6823      	ldr	r3, [r4, #0]
 8012a60:	493e      	ldr	r1, [pc, #248]	; (8012b5c <__ssvfiscanf_r+0x2e4>)
 8012a62:	781a      	ldrb	r2, [r3, #0]
 8012a64:	5c8a      	ldrb	r2, [r1, r2]
 8012a66:	2108      	movs	r1, #8
 8012a68:	420a      	tst	r2, r1
 8012a6a:	d13e      	bne.n	8012aea <__ssvfiscanf_r+0x272>
 8012a6c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	dc51      	bgt.n	8012b16 <__ssvfiscanf_r+0x29e>
 8012a72:	0022      	movs	r2, r4
 8012a74:	0028      	movs	r0, r5
 8012a76:	ab04      	add	r3, sp, #16
 8012a78:	a945      	add	r1, sp, #276	; 0x114
 8012a7a:	f000 f875 	bl	8012b68 <_scanf_chars>
 8012a7e:	2801      	cmp	r0, #1
 8012a80:	d064      	beq.n	8012b4c <__ssvfiscanf_r+0x2d4>
 8012a82:	2802      	cmp	r0, #2
 8012a84:	d000      	beq.n	8012a88 <__ssvfiscanf_r+0x210>
 8012a86:	e722      	b.n	80128ce <__ssvfiscanf_r+0x56>
 8012a88:	e7bb      	b.n	8012a02 <__ssvfiscanf_r+0x18a>
 8012a8a:	0031      	movs	r1, r6
 8012a8c:	a805      	add	r0, sp, #20
 8012a8e:	f000 f9cd 	bl	8012e2c <__sccl>
 8012a92:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012a94:	0006      	movs	r6, r0
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	2340      	movs	r3, #64	; 0x40
 8012a9a:	9a00      	ldr	r2, [sp, #0]
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	9345      	str	r3, [sp, #276]	; 0x114
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e7d4      	b.n	8012a4e <__ssvfiscanf_r+0x1d6>
 8012aa4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012aa6:	9300      	str	r3, [sp, #0]
 8012aa8:	2340      	movs	r3, #64	; 0x40
 8012aaa:	9a00      	ldr	r2, [sp, #0]
 8012aac:	4313      	orrs	r3, r2
 8012aae:	9345      	str	r3, [sp, #276]	; 0x114
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	e7cc      	b.n	8012a4e <__ssvfiscanf_r+0x1d6>
 8012ab4:	2302      	movs	r3, #2
 8012ab6:	e7ca      	b.n	8012a4e <__ssvfiscanf_r+0x1d6>
 8012ab8:	9845      	ldr	r0, [sp, #276]	; 0x114
 8012aba:	06c3      	lsls	r3, r0, #27
 8012abc:	d500      	bpl.n	8012ac0 <__ssvfiscanf_r+0x248>
 8012abe:	e706      	b.n	80128ce <__ssvfiscanf_r+0x56>
 8012ac0:	9b04      	ldr	r3, [sp, #16]
 8012ac2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8012ac4:	1d19      	adds	r1, r3, #4
 8012ac6:	9104      	str	r1, [sp, #16]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	07c7      	lsls	r7, r0, #31
 8012acc:	d501      	bpl.n	8012ad2 <__ssvfiscanf_r+0x25a>
 8012ace:	801a      	strh	r2, [r3, #0]
 8012ad0:	e6fd      	b.n	80128ce <__ssvfiscanf_r+0x56>
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	e6fb      	b.n	80128ce <__ssvfiscanf_r+0x56>
 8012ad6:	9a01      	ldr	r2, [sp, #4]
 8012ad8:	ab45      	add	r3, sp, #276	; 0x114
 8012ada:	589b      	ldr	r3, [r3, r2]
 8012adc:	0021      	movs	r1, r4
 8012ade:	0028      	movs	r0, r5
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	4798      	blx	r3
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	d0b6      	beq.n	8012a56 <__ssvfiscanf_r+0x1de>
 8012ae8:	e78b      	b.n	8012a02 <__ssvfiscanf_r+0x18a>
 8012aea:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8012aec:	9200      	str	r2, [sp, #0]
 8012aee:	3201      	adds	r2, #1
 8012af0:	9249      	str	r2, [sp, #292]	; 0x124
 8012af2:	6862      	ldr	r2, [r4, #4]
 8012af4:	3a01      	subs	r2, #1
 8012af6:	6062      	str	r2, [r4, #4]
 8012af8:	2a00      	cmp	r2, #0
 8012afa:	dd02      	ble.n	8012b02 <__ssvfiscanf_r+0x28a>
 8012afc:	3301      	adds	r3, #1
 8012afe:	6023      	str	r3, [r4, #0]
 8012b00:	e7ad      	b.n	8012a5e <__ssvfiscanf_r+0x1e6>
 8012b02:	9a01      	ldr	r2, [sp, #4]
 8012b04:	ab45      	add	r3, sp, #276	; 0x114
 8012b06:	589b      	ldr	r3, [r3, r2]
 8012b08:	0021      	movs	r1, r4
 8012b0a:	0028      	movs	r0, r5
 8012b0c:	9300      	str	r3, [sp, #0]
 8012b0e:	4798      	blx	r3
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0a4      	beq.n	8012a5e <__ssvfiscanf_r+0x1e6>
 8012b14:	e775      	b.n	8012a02 <__ssvfiscanf_r+0x18a>
 8012b16:	2b04      	cmp	r3, #4
 8012b18:	dc06      	bgt.n	8012b28 <__ssvfiscanf_r+0x2b0>
 8012b1a:	0022      	movs	r2, r4
 8012b1c:	0028      	movs	r0, r5
 8012b1e:	ab04      	add	r3, sp, #16
 8012b20:	a945      	add	r1, sp, #276	; 0x114
 8012b22:	f000 f87f 	bl	8012c24 <_scanf_i>
 8012b26:	e7aa      	b.n	8012a7e <__ssvfiscanf_r+0x206>
 8012b28:	4b0e      	ldr	r3, [pc, #56]	; (8012b64 <__ssvfiscanf_r+0x2ec>)
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d100      	bne.n	8012b30 <__ssvfiscanf_r+0x2b8>
 8012b2e:	e6ce      	b.n	80128ce <__ssvfiscanf_r+0x56>
 8012b30:	0022      	movs	r2, r4
 8012b32:	0028      	movs	r0, r5
 8012b34:	ab04      	add	r3, sp, #16
 8012b36:	a945      	add	r1, sp, #276	; 0x114
 8012b38:	e000      	b.n	8012b3c <__ssvfiscanf_r+0x2c4>
 8012b3a:	bf00      	nop
 8012b3c:	e79f      	b.n	8012a7e <__ssvfiscanf_r+0x206>
 8012b3e:	89a3      	ldrh	r3, [r4, #12]
 8012b40:	065b      	lsls	r3, r3, #25
 8012b42:	d400      	bmi.n	8012b46 <__ssvfiscanf_r+0x2ce>
 8012b44:	e762      	b.n	8012a0c <__ssvfiscanf_r+0x194>
 8012b46:	2001      	movs	r0, #1
 8012b48:	4240      	negs	r0, r0
 8012b4a:	e75f      	b.n	8012a0c <__ssvfiscanf_r+0x194>
 8012b4c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8012b4e:	e75d      	b.n	8012a0c <__ssvfiscanf_r+0x194>
 8012b50:	fffffd64 	.word	0xfffffd64
 8012b54:	080127c1 	.word	0x080127c1
 8012b58:	08012839 	.word	0x08012839
 8012b5c:	0801814d 	.word	0x0801814d
 8012b60:	080182b6 	.word	0x080182b6
 8012b64:	00000000 	.word	0x00000000

08012b68 <_scanf_chars>:
 8012b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b6a:	0015      	movs	r5, r2
 8012b6c:	688a      	ldr	r2, [r1, #8]
 8012b6e:	000c      	movs	r4, r1
 8012b70:	9001      	str	r0, [sp, #4]
 8012b72:	2a00      	cmp	r2, #0
 8012b74:	d105      	bne.n	8012b82 <_scanf_chars+0x1a>
 8012b76:	6989      	ldr	r1, [r1, #24]
 8012b78:	3201      	adds	r2, #1
 8012b7a:	2900      	cmp	r1, #0
 8012b7c:	d000      	beq.n	8012b80 <_scanf_chars+0x18>
 8012b7e:	3a02      	subs	r2, #2
 8012b80:	60a2      	str	r2, [r4, #8]
 8012b82:	6822      	ldr	r2, [r4, #0]
 8012b84:	06d2      	lsls	r2, r2, #27
 8012b86:	d403      	bmi.n	8012b90 <_scanf_chars+0x28>
 8012b88:	681a      	ldr	r2, [r3, #0]
 8012b8a:	1d11      	adds	r1, r2, #4
 8012b8c:	6019      	str	r1, [r3, #0]
 8012b8e:	6817      	ldr	r7, [r2, #0]
 8012b90:	2600      	movs	r6, #0
 8012b92:	69a0      	ldr	r0, [r4, #24]
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d013      	beq.n	8012bc0 <_scanf_chars+0x58>
 8012b98:	2801      	cmp	r0, #1
 8012b9a:	d108      	bne.n	8012bae <_scanf_chars+0x46>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	6962      	ldr	r2, [r4, #20]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	5cd3      	ldrb	r3, [r2, r3]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10b      	bne.n	8012bc0 <_scanf_chars+0x58>
 8012ba8:	2e00      	cmp	r6, #0
 8012baa:	d127      	bne.n	8012bfc <_scanf_chars+0x94>
 8012bac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012bae:	2802      	cmp	r0, #2
 8012bb0:	d124      	bne.n	8012bfc <_scanf_chars+0x94>
 8012bb2:	682b      	ldr	r3, [r5, #0]
 8012bb4:	4a1a      	ldr	r2, [pc, #104]	; (8012c20 <_scanf_chars+0xb8>)
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	5cd3      	ldrb	r3, [r2, r3]
 8012bba:	2208      	movs	r2, #8
 8012bbc:	4213      	tst	r3, r2
 8012bbe:	d11d      	bne.n	8012bfc <_scanf_chars+0x94>
 8012bc0:	2210      	movs	r2, #16
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	3601      	adds	r6, #1
 8012bc6:	4213      	tst	r3, r2
 8012bc8:	d103      	bne.n	8012bd2 <_scanf_chars+0x6a>
 8012bca:	682b      	ldr	r3, [r5, #0]
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	703b      	strb	r3, [r7, #0]
 8012bd0:	3701      	adds	r7, #1
 8012bd2:	682a      	ldr	r2, [r5, #0]
 8012bd4:	686b      	ldr	r3, [r5, #4]
 8012bd6:	3201      	adds	r2, #1
 8012bd8:	602a      	str	r2, [r5, #0]
 8012bda:	68a2      	ldr	r2, [r4, #8]
 8012bdc:	3b01      	subs	r3, #1
 8012bde:	3a01      	subs	r2, #1
 8012be0:	606b      	str	r3, [r5, #4]
 8012be2:	60a2      	str	r2, [r4, #8]
 8012be4:	2a00      	cmp	r2, #0
 8012be6:	d009      	beq.n	8012bfc <_scanf_chars+0x94>
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dcd2      	bgt.n	8012b92 <_scanf_chars+0x2a>
 8012bec:	23c0      	movs	r3, #192	; 0xc0
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	0029      	movs	r1, r5
 8012bf2:	58e3      	ldr	r3, [r4, r3]
 8012bf4:	9801      	ldr	r0, [sp, #4]
 8012bf6:	4798      	blx	r3
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d0ca      	beq.n	8012b92 <_scanf_chars+0x2a>
 8012bfc:	6822      	ldr	r2, [r4, #0]
 8012bfe:	2310      	movs	r3, #16
 8012c00:	0011      	movs	r1, r2
 8012c02:	4019      	ands	r1, r3
 8012c04:	421a      	tst	r2, r3
 8012c06:	d106      	bne.n	8012c16 <_scanf_chars+0xae>
 8012c08:	68e3      	ldr	r3, [r4, #12]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	60e3      	str	r3, [r4, #12]
 8012c0e:	69a3      	ldr	r3, [r4, #24]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d000      	beq.n	8012c16 <_scanf_chars+0xae>
 8012c14:	7039      	strb	r1, [r7, #0]
 8012c16:	6923      	ldr	r3, [r4, #16]
 8012c18:	2000      	movs	r0, #0
 8012c1a:	199e      	adds	r6, r3, r6
 8012c1c:	6126      	str	r6, [r4, #16]
 8012c1e:	e7c5      	b.n	8012bac <_scanf_chars+0x44>
 8012c20:	0801814d 	.word	0x0801814d

08012c24 <_scanf_i>:
 8012c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c26:	000c      	movs	r4, r1
 8012c28:	b08d      	sub	sp, #52	; 0x34
 8012c2a:	9302      	str	r3, [sp, #8]
 8012c2c:	4b79      	ldr	r3, [pc, #484]	; (8012e14 <_scanf_i+0x1f0>)
 8012c2e:	0016      	movs	r6, r2
 8012c30:	9005      	str	r0, [sp, #20]
 8012c32:	aa09      	add	r2, sp, #36	; 0x24
 8012c34:	cb23      	ldmia	r3!, {r0, r1, r5}
 8012c36:	c223      	stmia	r2!, {r0, r1, r5}
 8012c38:	4b77      	ldr	r3, [pc, #476]	; (8012e18 <_scanf_i+0x1f4>)
 8012c3a:	9306      	str	r3, [sp, #24]
 8012c3c:	69a3      	ldr	r3, [r4, #24]
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	d001      	beq.n	8012c46 <_scanf_i+0x22>
 8012c42:	4b76      	ldr	r3, [pc, #472]	; (8012e1c <_scanf_i+0x1f8>)
 8012c44:	9306      	str	r3, [sp, #24]
 8012c46:	22ae      	movs	r2, #174	; 0xae
 8012c48:	2000      	movs	r0, #0
 8012c4a:	68a3      	ldr	r3, [r4, #8]
 8012c4c:	0052      	lsls	r2, r2, #1
 8012c4e:	1e59      	subs	r1, r3, #1
 8012c50:	9004      	str	r0, [sp, #16]
 8012c52:	4291      	cmp	r1, r2
 8012c54:	d905      	bls.n	8012c62 <_scanf_i+0x3e>
 8012c56:	3b5e      	subs	r3, #94	; 0x5e
 8012c58:	3bff      	subs	r3, #255	; 0xff
 8012c5a:	9304      	str	r3, [sp, #16]
 8012c5c:	235e      	movs	r3, #94	; 0x5e
 8012c5e:	33ff      	adds	r3, #255	; 0xff
 8012c60:	60a3      	str	r3, [r4, #8]
 8012c62:	0023      	movs	r3, r4
 8012c64:	331c      	adds	r3, #28
 8012c66:	9301      	str	r3, [sp, #4]
 8012c68:	23d0      	movs	r3, #208	; 0xd0
 8012c6a:	2700      	movs	r7, #0
 8012c6c:	6822      	ldr	r2, [r4, #0]
 8012c6e:	011b      	lsls	r3, r3, #4
 8012c70:	4313      	orrs	r3, r2
 8012c72:	6023      	str	r3, [r4, #0]
 8012c74:	9b01      	ldr	r3, [sp, #4]
 8012c76:	9303      	str	r3, [sp, #12]
 8012c78:	6833      	ldr	r3, [r6, #0]
 8012c7a:	a809      	add	r0, sp, #36	; 0x24
 8012c7c:	7819      	ldrb	r1, [r3, #0]
 8012c7e:	00bb      	lsls	r3, r7, #2
 8012c80:	2202      	movs	r2, #2
 8012c82:	5818      	ldr	r0, [r3, r0]
 8012c84:	f7ff fd3e 	bl	8012704 <memchr>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	d02b      	beq.n	8012ce4 <_scanf_i+0xc0>
 8012c8c:	2f01      	cmp	r7, #1
 8012c8e:	d162      	bne.n	8012d56 <_scanf_i+0x132>
 8012c90:	6863      	ldr	r3, [r4, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d106      	bne.n	8012ca4 <_scanf_i+0x80>
 8012c96:	3308      	adds	r3, #8
 8012c98:	6822      	ldr	r2, [r4, #0]
 8012c9a:	6063      	str	r3, [r4, #4]
 8012c9c:	33f9      	adds	r3, #249	; 0xf9
 8012c9e:	33ff      	adds	r3, #255	; 0xff
 8012ca0:	4313      	orrs	r3, r2
 8012ca2:	6023      	str	r3, [r4, #0]
 8012ca4:	4b5e      	ldr	r3, [pc, #376]	; (8012e20 <_scanf_i+0x1fc>)
 8012ca6:	6822      	ldr	r2, [r4, #0]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	6023      	str	r3, [r4, #0]
 8012cac:	68a3      	ldr	r3, [r4, #8]
 8012cae:	1e5a      	subs	r2, r3, #1
 8012cb0:	60a2      	str	r2, [r4, #8]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d016      	beq.n	8012ce4 <_scanf_i+0xc0>
 8012cb6:	6833      	ldr	r3, [r6, #0]
 8012cb8:	1c5a      	adds	r2, r3, #1
 8012cba:	6032      	str	r2, [r6, #0]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	9a03      	ldr	r2, [sp, #12]
 8012cc0:	7013      	strb	r3, [r2, #0]
 8012cc2:	6873      	ldr	r3, [r6, #4]
 8012cc4:	1c55      	adds	r5, r2, #1
 8012cc6:	3b01      	subs	r3, #1
 8012cc8:	6073      	str	r3, [r6, #4]
 8012cca:	9503      	str	r5, [sp, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	dc09      	bgt.n	8012ce4 <_scanf_i+0xc0>
 8012cd0:	23c0      	movs	r3, #192	; 0xc0
 8012cd2:	005b      	lsls	r3, r3, #1
 8012cd4:	58e3      	ldr	r3, [r4, r3]
 8012cd6:	0031      	movs	r1, r6
 8012cd8:	9805      	ldr	r0, [sp, #20]
 8012cda:	9307      	str	r3, [sp, #28]
 8012cdc:	4798      	blx	r3
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	d000      	beq.n	8012ce4 <_scanf_i+0xc0>
 8012ce2:	e081      	b.n	8012de8 <_scanf_i+0x1c4>
 8012ce4:	3701      	adds	r7, #1
 8012ce6:	2f03      	cmp	r7, #3
 8012ce8:	d1c6      	bne.n	8012c78 <_scanf_i+0x54>
 8012cea:	6863      	ldr	r3, [r4, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d101      	bne.n	8012cf4 <_scanf_i+0xd0>
 8012cf0:	330a      	adds	r3, #10
 8012cf2:	6063      	str	r3, [r4, #4]
 8012cf4:	2110      	movs	r1, #16
 8012cf6:	2700      	movs	r7, #0
 8012cf8:	6863      	ldr	r3, [r4, #4]
 8012cfa:	6960      	ldr	r0, [r4, #20]
 8012cfc:	1ac9      	subs	r1, r1, r3
 8012cfe:	4b49      	ldr	r3, [pc, #292]	; (8012e24 <_scanf_i+0x200>)
 8012d00:	18c9      	adds	r1, r1, r3
 8012d02:	f000 f893 	bl	8012e2c <__sccl>
 8012d06:	9d03      	ldr	r5, [sp, #12]
 8012d08:	68a3      	ldr	r3, [r4, #8]
 8012d0a:	6822      	ldr	r2, [r4, #0]
 8012d0c:	9303      	str	r3, [sp, #12]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d041      	beq.n	8012d96 <_scanf_i+0x172>
 8012d12:	6831      	ldr	r1, [r6, #0]
 8012d14:	6963      	ldr	r3, [r4, #20]
 8012d16:	7808      	ldrb	r0, [r1, #0]
 8012d18:	5c1b      	ldrb	r3, [r3, r0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d03b      	beq.n	8012d96 <_scanf_i+0x172>
 8012d1e:	2830      	cmp	r0, #48	; 0x30
 8012d20:	d129      	bne.n	8012d76 <_scanf_i+0x152>
 8012d22:	2380      	movs	r3, #128	; 0x80
 8012d24:	011b      	lsls	r3, r3, #4
 8012d26:	421a      	tst	r2, r3
 8012d28:	d025      	beq.n	8012d76 <_scanf_i+0x152>
 8012d2a:	9b04      	ldr	r3, [sp, #16]
 8012d2c:	3701      	adds	r7, #1
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d005      	beq.n	8012d3e <_scanf_i+0x11a>
 8012d32:	001a      	movs	r2, r3
 8012d34:	9b03      	ldr	r3, [sp, #12]
 8012d36:	3a01      	subs	r2, #1
 8012d38:	3301      	adds	r3, #1
 8012d3a:	9204      	str	r2, [sp, #16]
 8012d3c:	60a3      	str	r3, [r4, #8]
 8012d3e:	6873      	ldr	r3, [r6, #4]
 8012d40:	3b01      	subs	r3, #1
 8012d42:	6073      	str	r3, [r6, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	dd1d      	ble.n	8012d84 <_scanf_i+0x160>
 8012d48:	6833      	ldr	r3, [r6, #0]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	6033      	str	r3, [r6, #0]
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	60a3      	str	r3, [r4, #8]
 8012d54:	e7d8      	b.n	8012d08 <_scanf_i+0xe4>
 8012d56:	2f02      	cmp	r7, #2
 8012d58:	d1a8      	bne.n	8012cac <_scanf_i+0x88>
 8012d5a:	21c0      	movs	r1, #192	; 0xc0
 8012d5c:	2380      	movs	r3, #128	; 0x80
 8012d5e:	6822      	ldr	r2, [r4, #0]
 8012d60:	00c9      	lsls	r1, r1, #3
 8012d62:	4011      	ands	r1, r2
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	4299      	cmp	r1, r3
 8012d68:	d1bf      	bne.n	8012cea <_scanf_i+0xc6>
 8012d6a:	3bf1      	subs	r3, #241	; 0xf1
 8012d6c:	3bff      	subs	r3, #255	; 0xff
 8012d6e:	6063      	str	r3, [r4, #4]
 8012d70:	33f0      	adds	r3, #240	; 0xf0
 8012d72:	4313      	orrs	r3, r2
 8012d74:	e799      	b.n	8012caa <_scanf_i+0x86>
 8012d76:	4b2c      	ldr	r3, [pc, #176]	; (8012e28 <_scanf_i+0x204>)
 8012d78:	4013      	ands	r3, r2
 8012d7a:	6023      	str	r3, [r4, #0]
 8012d7c:	780b      	ldrb	r3, [r1, #0]
 8012d7e:	702b      	strb	r3, [r5, #0]
 8012d80:	3501      	adds	r5, #1
 8012d82:	e7dc      	b.n	8012d3e <_scanf_i+0x11a>
 8012d84:	23c0      	movs	r3, #192	; 0xc0
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	58e3      	ldr	r3, [r4, r3]
 8012d8a:	0031      	movs	r1, r6
 8012d8c:	9805      	ldr	r0, [sp, #20]
 8012d8e:	9303      	str	r3, [sp, #12]
 8012d90:	4798      	blx	r3
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d0db      	beq.n	8012d4e <_scanf_i+0x12a>
 8012d96:	6823      	ldr	r3, [r4, #0]
 8012d98:	05db      	lsls	r3, r3, #23
 8012d9a:	d50e      	bpl.n	8012dba <_scanf_i+0x196>
 8012d9c:	9b01      	ldr	r3, [sp, #4]
 8012d9e:	429d      	cmp	r5, r3
 8012da0:	d907      	bls.n	8012db2 <_scanf_i+0x18e>
 8012da2:	23be      	movs	r3, #190	; 0xbe
 8012da4:	3d01      	subs	r5, #1
 8012da6:	005b      	lsls	r3, r3, #1
 8012da8:	0032      	movs	r2, r6
 8012daa:	7829      	ldrb	r1, [r5, #0]
 8012dac:	58e3      	ldr	r3, [r4, r3]
 8012dae:	9805      	ldr	r0, [sp, #20]
 8012db0:	4798      	blx	r3
 8012db2:	9b01      	ldr	r3, [sp, #4]
 8012db4:	2001      	movs	r0, #1
 8012db6:	429d      	cmp	r5, r3
 8012db8:	d029      	beq.n	8012e0e <_scanf_i+0x1ea>
 8012dba:	6821      	ldr	r1, [r4, #0]
 8012dbc:	2310      	movs	r3, #16
 8012dbe:	000a      	movs	r2, r1
 8012dc0:	401a      	ands	r2, r3
 8012dc2:	4219      	tst	r1, r3
 8012dc4:	d11c      	bne.n	8012e00 <_scanf_i+0x1dc>
 8012dc6:	702a      	strb	r2, [r5, #0]
 8012dc8:	6863      	ldr	r3, [r4, #4]
 8012dca:	9901      	ldr	r1, [sp, #4]
 8012dcc:	9805      	ldr	r0, [sp, #20]
 8012dce:	9e06      	ldr	r6, [sp, #24]
 8012dd0:	47b0      	blx	r6
 8012dd2:	9b02      	ldr	r3, [sp, #8]
 8012dd4:	6821      	ldr	r1, [r4, #0]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	068a      	lsls	r2, r1, #26
 8012dda:	d507      	bpl.n	8012dec <_scanf_i+0x1c8>
 8012ddc:	1d1a      	adds	r2, r3, #4
 8012dde:	9902      	ldr	r1, [sp, #8]
 8012de0:	600a      	str	r2, [r1, #0]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6018      	str	r0, [r3, #0]
 8012de6:	e008      	b.n	8012dfa <_scanf_i+0x1d6>
 8012de8:	2700      	movs	r7, #0
 8012dea:	e7d4      	b.n	8012d96 <_scanf_i+0x172>
 8012dec:	1d1a      	adds	r2, r3, #4
 8012dee:	07ce      	lsls	r6, r1, #31
 8012df0:	d5f5      	bpl.n	8012dde <_scanf_i+0x1ba>
 8012df2:	9902      	ldr	r1, [sp, #8]
 8012df4:	600a      	str	r2, [r1, #0]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	8018      	strh	r0, [r3, #0]
 8012dfa:	68e3      	ldr	r3, [r4, #12]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	60e3      	str	r3, [r4, #12]
 8012e00:	2000      	movs	r0, #0
 8012e02:	9b01      	ldr	r3, [sp, #4]
 8012e04:	1aed      	subs	r5, r5, r3
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	19ef      	adds	r7, r5, r7
 8012e0a:	19df      	adds	r7, r3, r7
 8012e0c:	6127      	str	r7, [r4, #16]
 8012e0e:	b00d      	add	sp, #52	; 0x34
 8012e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	08013cd4 	.word	0x08013cd4
 8012e18:	08011861 	.word	0x08011861
 8012e1c:	080126c5 	.word	0x080126c5
 8012e20:	fffffaff 	.word	0xfffffaff
 8012e24:	080182ec 	.word	0x080182ec
 8012e28:	fffff6ff 	.word	0xfffff6ff

08012e2c <__sccl>:
 8012e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e2e:	780b      	ldrb	r3, [r1, #0]
 8012e30:	0004      	movs	r4, r0
 8012e32:	2b5e      	cmp	r3, #94	; 0x5e
 8012e34:	d00c      	beq.n	8012e50 <__sccl+0x24>
 8012e36:	1c48      	adds	r0, r1, #1
 8012e38:	2100      	movs	r1, #0
 8012e3a:	0022      	movs	r2, r4
 8012e3c:	1c65      	adds	r5, r4, #1
 8012e3e:	35ff      	adds	r5, #255	; 0xff
 8012e40:	7011      	strb	r1, [r2, #0]
 8012e42:	3201      	adds	r2, #1
 8012e44:	42aa      	cmp	r2, r5
 8012e46:	d1fb      	bne.n	8012e40 <__sccl+0x14>
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d105      	bne.n	8012e58 <__sccl+0x2c>
 8012e4c:	3801      	subs	r0, #1
 8012e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e50:	784b      	ldrb	r3, [r1, #1]
 8012e52:	1c88      	adds	r0, r1, #2
 8012e54:	2101      	movs	r1, #1
 8012e56:	e7f0      	b.n	8012e3a <__sccl+0xe>
 8012e58:	2201      	movs	r2, #1
 8012e5a:	262d      	movs	r6, #45	; 0x2d
 8012e5c:	4051      	eors	r1, r2
 8012e5e:	0002      	movs	r2, r0
 8012e60:	54e1      	strb	r1, [r4, r3]
 8012e62:	7815      	ldrb	r5, [r2, #0]
 8012e64:	1c50      	adds	r0, r2, #1
 8012e66:	2d2d      	cmp	r5, #45	; 0x2d
 8012e68:	d009      	beq.n	8012e7e <__sccl+0x52>
 8012e6a:	2d5d      	cmp	r5, #93	; 0x5d
 8012e6c:	d0ef      	beq.n	8012e4e <__sccl+0x22>
 8012e6e:	2d00      	cmp	r5, #0
 8012e70:	d101      	bne.n	8012e76 <__sccl+0x4a>
 8012e72:	0010      	movs	r0, r2
 8012e74:	e7eb      	b.n	8012e4e <__sccl+0x22>
 8012e76:	002b      	movs	r3, r5
 8012e78:	e7f1      	b.n	8012e5e <__sccl+0x32>
 8012e7a:	0033      	movs	r3, r6
 8012e7c:	e7ef      	b.n	8012e5e <__sccl+0x32>
 8012e7e:	7855      	ldrb	r5, [r2, #1]
 8012e80:	2d5d      	cmp	r5, #93	; 0x5d
 8012e82:	d0fa      	beq.n	8012e7a <__sccl+0x4e>
 8012e84:	42ab      	cmp	r3, r5
 8012e86:	dcf8      	bgt.n	8012e7a <__sccl+0x4e>
 8012e88:	0018      	movs	r0, r3
 8012e8a:	3202      	adds	r2, #2
 8012e8c:	3001      	adds	r0, #1
 8012e8e:	5421      	strb	r1, [r4, r0]
 8012e90:	4285      	cmp	r5, r0
 8012e92:	dcfb      	bgt.n	8012e8c <__sccl+0x60>
 8012e94:	2000      	movs	r0, #0
 8012e96:	1c5f      	adds	r7, r3, #1
 8012e98:	42ab      	cmp	r3, r5
 8012e9a:	da01      	bge.n	8012ea0 <__sccl+0x74>
 8012e9c:	1ae8      	subs	r0, r5, r3
 8012e9e:	3801      	subs	r0, #1
 8012ea0:	183b      	adds	r3, r7, r0
 8012ea2:	e7de      	b.n	8012e62 <__sccl+0x36>

08012ea4 <__submore>:
 8012ea4:	000b      	movs	r3, r1
 8012ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ea8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8012eaa:	3344      	adds	r3, #68	; 0x44
 8012eac:	000c      	movs	r4, r1
 8012eae:	429d      	cmp	r5, r3
 8012eb0:	d11c      	bne.n	8012eec <__submore+0x48>
 8012eb2:	2680      	movs	r6, #128	; 0x80
 8012eb4:	00f6      	lsls	r6, r6, #3
 8012eb6:	0031      	movs	r1, r6
 8012eb8:	f7fe ffe0 	bl	8011e7c <_malloc_r>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	d102      	bne.n	8012ec6 <__submore+0x22>
 8012ec0:	2001      	movs	r0, #1
 8012ec2:	4240      	negs	r0, r0
 8012ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012ec6:	0023      	movs	r3, r4
 8012ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8012eca:	63a6      	str	r6, [r4, #56]	; 0x38
 8012ecc:	3346      	adds	r3, #70	; 0x46
 8012ece:	781a      	ldrb	r2, [r3, #0]
 8012ed0:	4b10      	ldr	r3, [pc, #64]	; (8012f14 <__submore+0x70>)
 8012ed2:	54c2      	strb	r2, [r0, r3]
 8012ed4:	0023      	movs	r3, r4
 8012ed6:	3345      	adds	r3, #69	; 0x45
 8012ed8:	781a      	ldrb	r2, [r3, #0]
 8012eda:	4b0f      	ldr	r3, [pc, #60]	; (8012f18 <__submore+0x74>)
 8012edc:	54c2      	strb	r2, [r0, r3]
 8012ede:	782a      	ldrb	r2, [r5, #0]
 8012ee0:	4b0e      	ldr	r3, [pc, #56]	; (8012f1c <__submore+0x78>)
 8012ee2:	54c2      	strb	r2, [r0, r3]
 8012ee4:	18c0      	adds	r0, r0, r3
 8012ee6:	6020      	str	r0, [r4, #0]
 8012ee8:	2000      	movs	r0, #0
 8012eea:	e7eb      	b.n	8012ec4 <__submore+0x20>
 8012eec:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8012eee:	0029      	movs	r1, r5
 8012ef0:	0073      	lsls	r3, r6, #1
 8012ef2:	001a      	movs	r2, r3
 8012ef4:	9301      	str	r3, [sp, #4]
 8012ef6:	f7ff fc3d 	bl	8012774 <_realloc_r>
 8012efa:	1e05      	subs	r5, r0, #0
 8012efc:	d0e0      	beq.n	8012ec0 <__submore+0x1c>
 8012efe:	1987      	adds	r7, r0, r6
 8012f00:	0001      	movs	r1, r0
 8012f02:	0032      	movs	r2, r6
 8012f04:	0038      	movs	r0, r7
 8012f06:	f7ff fc08 	bl	801271a <memcpy>
 8012f0a:	9b01      	ldr	r3, [sp, #4]
 8012f0c:	6027      	str	r7, [r4, #0]
 8012f0e:	6365      	str	r5, [r4, #52]	; 0x34
 8012f10:	63a3      	str	r3, [r4, #56]	; 0x38
 8012f12:	e7e9      	b.n	8012ee8 <__submore+0x44>
 8012f14:	000003ff 	.word	0x000003ff
 8012f18:	000003fe 	.word	0x000003fe
 8012f1c:	000003fd 	.word	0x000003fd

08012f20 <_malloc_usable_size_r>:
 8012f20:	1f0b      	subs	r3, r1, #4
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	1f18      	subs	r0, r3, #4
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	da01      	bge.n	8012f2e <_malloc_usable_size_r+0xe>
 8012f2a:	580b      	ldr	r3, [r1, r0]
 8012f2c:	18c0      	adds	r0, r0, r3
 8012f2e:	4770      	bx	lr

08012f30 <_init>:
 8012f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f32:	46c0      	nop			; (mov r8, r8)
 8012f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f36:	bc08      	pop	{r3}
 8012f38:	469e      	mov	lr, r3
 8012f3a:	4770      	bx	lr

08012f3c <_fini>:
 8012f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3e:	46c0      	nop			; (mov r8, r8)
 8012f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f42:	bc08      	pop	{r3}
 8012f44:	469e      	mov	lr, r3
 8012f46:	4770      	bx	lr
